[
    "-- Define the Vehicle Package\npackage Vehicle {\n    -- Define the Vehicle Class\n    class Vehicle {\n        -- Define the Attributes\n        real vehicleMass;\n        String currentStatus;\n        Engine engine;\n        Driver driver;\n\n        -- Define the Relationships\n        relationship hasEngine {\n            type Engine;\n            end vehicle;\n        }\n\n        relationship hasDriver {\n            type Driver;\n            end vehicle;\n        }\n    }\n\n    -- Define the Engine Package\n    package Engine {\n        -- Define the Engine Class\n        class Engine {\n            -- Define the Attributes\n            real enginePower;\n            real engineRPM;\n\n            -- Define the Operations\n            operation startEngine() {\n                -- Implementation goes here\n            }\n\n            operation stopEngine() {\n                -- Implementation goes here\n            }\n        }\n    }\n\n    -- Define the Driver Package\n    package Driver {\n        -- Define the Driver Class\n        class Driver {\n            -- Define the Attributes\n            String name;\n            real weight;\n\n            -- Define the Operations",
    "-- Define the Package for the model\npackage vehicleModel\n{\n  -- Define the base types\n  type Boolean is DataType {\n    value: Boolean\n  }\n\n  type String is DataType {\n    value: String\n  }\n\n  -- Define the Personnel Entity\n  entity Personnel {\n    -- Define the attributes\n    attribute name: String\n  }\n\n  -- Define the Engine Entity\n  entity Engine {\n    -- Define the attributes\n    attribute power: Real\n  }\n\n  -- Define the ManuallyOperatedVehicle Class\n  class ManuallyOperatedVehicle {\n    -- Define the attributes\n    attribute driver: Personnel\n\n    -- Define the relationships\n    relationship hasEngine: Engine {\n      lower: 1\n      upper: 1\n    }\n  }\n\n  -- Define the PoweredVehicle Class\n  class PoweredVehicle {\n    -- Define the relationships\n    relationship hasEngine: Engine {\n      lower: 1\n      upper: 1\n    }\n  }\n\n  -- Define the ManuallyOperatedPoweredVehicle Class\n  class",
    "-- Define abstract VehicleComponent type\nmodel VehicleModel\n\nabstract class VehicleComponent {\n    - name: String;\n}\n\n-- Define Vehicle type\nclass Vehicle {\n    -- Define attributes\n    - numberOfWheels: Integer = 4;\n    - engine: Engine;\n    - transmission: Transmission;\n\n    -- Define relationships\n    -- A vehicle has exactly one engine and one transmission\n    -- A vehicle has exactly four wheels\n    -- A vehicle can have multiple instances of each wheel type\n    -- A vehicle can have multiple instances of each component type\n    -- A vehicle can have extensions of vehicle and component types\n    -- A vehicle can have extensions of wheel and component types\n\n    -- Define composition relationships\n    -- A vehicle is composed of one engine and one transmission\n    -- A vehicle is composed of four wheels\n    -- A vehicle can be composed of multiple instances of each component type\n    -- A vehicle can be composed of multiple instances of each wheel type\n    -- A vehicle can be extended by multiple instances of vehicle and component types\n    -- A vehicle can be extended by multiple instances of wheel and component types\n\n    --",
    "-- Define the base types\nmodel VehicleModel\n\n  -- Define the Vehicle type\n  type Vehicle {\n    - engine: Engine\n  }\n\n  -- Define the SmallVehicle type, which is a subtype of Vehicle\n  type SmallVehicle < Vehicle {\n  }\n\n  -- Define the LargeVehicle type, which is a subtype of Vehicle\n  type LargeVehicle < Vehicle {\n  }\n\n  -- Define the Engine type\n  type Engine {\n    - cylinders: CylinderSubsystem\n  }\n\n  -- Define the CylinderSubsystem type\n  type CylinderSubsystem {\n    - numberOfCylinders: int\n  }\n\n  -- Define the SmallEngine type, which is a subtype of Engine\n  type SmallEngine < Engine {\n    - numberOfCylinders: int = 4\n  }\n\n  -- Define the LargeEngine type, which is a subtype of Engine\n  type LargeEngine < Engine {\n    - numberOfCylinders: int = 6\n  }\nendmodel V",
    "-- Define the TrafficSignalSystem Block\nmodel TrafficSignalSystem\n\n-- Define the TrafficSignal Block\nblock TrafficSignal {\n    -- Define the Color Enumeration\n    enumeration Color {\n        Green,\n        Yellow,\n        Red\n    }\n\n    -- Define the State Property\n    property state : Color = Red;\n}\n\n-- Define the GreenTrafficSignal Block\nblock GreenTrafficSignal < TrafficSignal {\n    -- Set the State Property\n    state := Green;\n}\n```",
    "-- Define the Information Classification Block\nmodel InformationClassification\n\n-- Define the Information Classification Enumeration\nenum InformationLevel {\n    uncl (\"Unclassified\", \"Green\"),\n    conf (\"Confidential\", \"Yellow\"),\n    secr (\"Secret\", \"Red\")\n}\n\n-- Define the Information Classification Property\nproperty InformationClassificationProperty {\n    label : String,\n    code : String,\n    level : InformationLevel,\n    grade : Real\n}\n\n-- Define the Information Classification Block Diagram\nBlock InformationClassificationBlock {\n    InformationClassificationProperty asicpp_InformationClassificationProperty\n}\n\n-- Define the Information Block\nBlock Information {\n    InformationClassificationProperty asicpp_InformationClassificationProperty\n}\n\n-- Define the Information Classification Relationship\nRelation ClassificationRelationship {\n    source : Information,\n    target : InformationClassificationBlock\n}\n```",
    "-- Define the types\ntype EngineType {\n    cylinderCount: Int(min=4, max=6);\n}\n\ntype VehicleType {\n    engine: Engine;\n}\n\n-- Define the classes\nclass Engine {\n    - name: String;\n    - cylinders: Set(Cylinder);\n}\n\nclass Cylinder {\n    - name: String;\n}\n\n-- Define the relationships\nEngine -- \"has engine of type:\" VehicleType : EngineType;\nVehicleType -- \"has engine with:\" Engine;\nEngine -- \"consists of:\" Set(Cylinder);\nCylinder -- \"is part of:\" Engine;\n```",
    "-- Define the System Package\npackage system\n{\n  -- Define the Vehicle Abstraction\n  abstract class Vehicle\n  {\n    -- Define Quality Attributes\n    property float fuelEfficiency;\n    property float topSpeed;\n\n    -- Define Driver Information\n    property Person driver;\n\n    -- Define Fuel Tank\n    association fuelTank : FuelTank;\n\n    -- Define the Fuel Type\n    property Fuel fuelType;\n  }\n\n  -- Define the FuelTank Abstraction\n  class FuelTank\n  {\n    -- Define Fuel Capacity\n    property float fuelCapacity;\n\n    -- Define Fuel Type\n    property Fuel fuelType;\n  }\n\n  -- Define the Fuel Enum\n  enum Fuel\n  {\n    Gasoline,\n    Diesel,\n    Electric\n  }\n\n  -- Define the Person Abstraction\n  class Person\n  {\n    -- Define Name\n    property string name;\n\n    -- Define Age\n    property int age;\n  }\n}\n```",
    "-- Define the Package for the Automobile Wheel Assembly System Model\npackage automobile_wheel_assembly {\n\n  -- Define the Components of the Automobile Wheel Assembly System Model\n  Component wheel_bearing_unit {\n  }\n\n  Component tire {\n    Property bead1 : Multiplicity (1..1);\n    Property bead2 : Multiplicity (1..1);\n  }\n\n  Component rim {\n  }\n\n  Component hub {\n    Property mounting_holes : Multiplicity (1..*);\n  }\n\n  Component bolt_mounting_hole {\n  }\n\n  Component threaded_hole {\n  }\n\n  Component bolt_connection {\n  }\n\n  -- Define the Relationships between the Components of the Automobile Wheel Assembly System Model\n  Tie tire_to_rim bead1 : Tire -> BoundedBy rim : Rim;\n  Tie tire_to_rim bead2 : Tire -> BoundedBy rim : Rim;\n\n  Tie mounting_holes : Hub -> Connects -> bolt",
    "-- Define the System\nmodel FuelManagementSystem\n\n-- Define the Context\ncontext Context\ncreate\n    FuelManagementSystem as System\nendContext Context\n\n-- Define the Components\npackage FuelManagementSystem_Components\n\ncreate\n    FuelTankAssembly(name=\"Fuel Tank Assembly\") as Block,\n    Engine(name=\"Engine\") as Block\nendPackage FuelManagementSystem_Components\n\n-- Define the Interfaces\npackage FuelManagementSystem_Interfaces\n\ncreate\n    FuelSupplyInterface(name=\"Fuel Supply Interface\") as Interface,\n    FuelReturnInterface(name=\"Fuel Return Interface\") as Interface,\n    TemperatureInterface(name=\"Temperature Interface\") as Interface\nendPackage FuelManagementSystem_Interfaces\n\n-- Define the Connections\npackage FuelManagementSystem_Connections\n\ncreate\n    FuelSupplyConnection(source=FuelTankAssembly.FuelSupplyPort, target=Engine.FuelSupplyPort, interface=FuelSupplyInterface),\n    FuelReturnConnection(source=Engine.FuelReturnPort",
    "-- Define the Package for the Vehicle System Model\npackage vehicle_system_model {\n\n  -- Define the Abstract Vehicle Component\n  abstract class VehicleComponent {\n    - name : String;\n    - mass : Real;\n  }\n\n  -- Define the Abstract Vehicle Component with Ordering\n  abstract class OrderedVehicleComponent {\n    VehicleComponent super;\n    - next : OrderedVehicleComponent;\n  }\n\n  -- Define the Vehicle\n  class Vehicle {\n    VehicleComponent vehicle_mass;\n    OrderedVehicleComponent front_axle;\n    OrderedVehicleComponent rear_axle;\n\n    -- Define the Default Vehicle Configuration\n    initial vehicle_mass.mass = 1750.0;\n    initial front_axle.next = rear_axle;\n    initial rear_axle.next = null;\n  }\n\n  -- Define the Front Axle\n  class FrontAxle extends VehicleComponent {\n    -- Define the Default Front Axle Configuration\n    initial mass = 350.0;\n  }\n\n",
    "-- Define the package for the coupling system model\npackage CouplingSystem\n{\n    -- Define the Vehicle and Trailer blocks\n    block Vehicle\n    {\n        -- Define the properties of the vehicle\n        property height : Real;\n        property weight : Real;\n\n        -- Define the internal structure of the vehicle\n        internal block Engine\n        {\n            -- Define the properties of the engine\n            property power : Real;\n        }\n\n        -- Define the connection to the hitch\n        connection ConnectionToHitch\n        {\n            -- Define the reference to the hitch ball\n            reference hitchBall : Ball;\n        };\n    }\n\n    block Trailer\n    {\n        -- Define the properties of the trailer\n        property length : Real;\n        property weight : Real;\n\n        -- Define the internal structure of the trailer\n        internal block Cargo\n        {\n            -- Define the properties of the cargo\n            property weight : Real;\n        }\n\n        -- Define the connection to the hitch\n        connection ConnectionToHitch\n        {\n            -- Define the reference to the hitch connector\n",
    "-- Model Declaration\nmodel VehiclePowerTransmissionSystem\n\n-- Block Definition\nblock Engine {\n    port fuelCommand: Input FuelCommandType;\n    port power: Output PowerType;\n    port clutch: Output ClutchType;\n}\n\nblock Transmission {\n    port powerIn: Input PowerType;\n    port clutchIn: Input ClutchType;\n    port powerOut: Output PowerType;\n}\n\nblock Clutch {\n    port engine: Input PowerType;\n    port transmission: Input ClutchType;\n    port clutchOut: Output ClutchType;\n}\n\nblock Driveshaft {\n    port powerIn: Input PowerType;\n    port powerOut: Output PowerType;\n}\n\nblock RearAxleAssembly {\n    block Differential {\n        port leftHalfShaft: Input PowerType;\n        port rightHalfShaft: Input PowerType;\n        port powerOut: Output PowerType;\n    }\n\n    block LeftHalfShaft {\n        port differential: Input PowerType;\n        port wheel: Output WheelType;\n   ",
    "-- First Decomposition\n\nmodel MultiArchitectureSystem\n\nsubsystem b11 {\n    Component c1 {\n        port pb {\n            interface pe\n        }\n    }\n\n    Component c2 {\n        -- ...\n    }\n\n    Interface pe {\n        -- ...\n    }\n}\n\nsubsystem b12 {\n    Component c3 {\n        port pd {\n            interface pf\n        }\n    }\n\n    Component c4 {\n        -- ...\n    }\n\n    Interface pf {\n        -- ...\n    }\n}\n\nInterface pe {\n    endConnection pb\n}\n\nInterface pf {\n    endConnection pd\n}\n\n-- Second Decomposition\n\nsubsystem b21 {\n    Component c1_ref {\n        -- Reference to c1\n    }\n\n    Component c2_ref {\n        -- Reference to c2\n    }\n\n    Component c3_ref {\n        -- Reference to c3\n    }\n\n    Component c4_ref {\n        -- Reference to c4\n    }\n",
    "-- Define the System Block\nmodel PowertrainSystem\n\n-- Define the Context\ncontext Context\n  create ObjectNode fuelCommand : FuelCommand;\nendContext Context;\n\n-- Define the Blocks\nblock Engine\n  provide FuelCommand: FuelCommand;\n  provide EngineTorque: Real;\nendEngine;\n\nblock FuelCommandHandler\n  provide FuelCommand: FuelCommand;\n  provide EngineStartStopControl: EngineStartStopControl;\nendFuelCommandHandler;\n\nblock EngineStartStopControl\n  provide EngineStartStopCommand: EngineStartStopCommand;\n  provide Engine: Engine;\nendEngineStartStopControl;\n\nblock EngineTorqueAmplifier\n  provide EngineTorque: Real;\n  provide TransmissionTorque: Real;\nendEngineTorqueAmplifier;\n\nblock Transmission\n  provide TransmissionTorque: Real;\n  provide DriveshaftTorque: Real;\nendTransmission;\n\nblock Driveshaft\n  provide DriveshaftTorque: Real;\n  provide LeftWheelTorque: Real;\n  provide RightWhe",
    "-- Define the main block 'PowertrainControlSystem'\nmodel PowertrainControlSystem\n\n-- Define the context 'AutomotiveEnvironment'\ncontext AutomotiveEnvironment\n\n-- Define the main block 'PowertrainControlSystem'\nblock PowertrainControlSystem {\n    -- Define the internal block 'FuelCommandHandler'\n    internal block FuelCommandHandler {\n        -- Define the input 'FuelCommandInput'\n        input FuelCommandInput : Sequence {\n            data FuelCommand : Integer\n        }\n\n        -- Define the output 'EngineStartOutput'\n        output EngineStartOutput : Boolean\n\n        -- Define the internal block 'EngineController'\n        internal block EngineController {\n            -- Define the internal block 'Engine'\n            internal block Engine {\n                -- Define the internal block 'StallDetector'\n                internal block StallDetector {\n                    -- Define the output 'StallDetectedOutput'\n                    output StallDetectedOutput : Boolean\n                }\n\n                -- Define the internal block 'TorqueGenerator'\n                internal block TorqueGenerator {\n                    -- Define the",
    "-- Define the system context\nmodel PowertrainSystem\n\n-- Define the main blocks\nBlock Engine\nBlock FuelCommand\nBlock Transmission\nBlock Wheel\n\n-- Define the relationships\nRelation Engine_has_FuelCommand [\n  source : Engine,\n  target : FuelCommand,\n  navigated_by : has_FuelCommand\n]\n\nRelation FuelCommand_generates_EngineTorque [\n  source : FuelCommand,\n  target : Engine,\n  navigated_by : generates_Torque\n]\n\nRelation Engine_has_Transmission [\n  source : Engine,\n  target : Transmission,\n  navigated_by : has_Transmission\n]\n\nRelation Transmission_transmits_EngineTorque [\n  source : Transmission,\n  target : Engine,\n  navigated_by : transmits_Torque\n]\n\nRelation Transmission_has_Wheels [\n  source : Transmission,\n  target : Wheel,\n  navigated_by : has_Wheels\n]\n\nRelation Wheel_receives_",
    "-- Define the system\nmodel PowerConnectionSystem\n\n-- Define the context\ncontext Context\n\n-- Define the blocks\nblock Vehicle\n    extends Context\n    provides PowerConnection\n\nblock Trailer\n    extends Context\n    requires PowerConnection\n\nblock HitchBall\n    extends MechanicalComponent\n    ownedBy Vehicle\n\nblock TrailerCoupler\n    extends MechanicalComponent\n    ownedBy Trailer\n\n-- Define the interfaces\ninterface PowerConnection\n    operation Connect()\n    operation Disconnect()\n\n-- Define the relationships\nrelationship Connection\n    source HitchBall\n    target TrailerCoupler\n    end\n\nrelationship Requirement\n    source Vehicle\n    target PowerConnection\n\nrelationship Requirement\n    source Trailer\n    target PowerConnection\n```",
    "-- Define the package for the model\npackage VehicleTrailerSystem\n{\n    -- Define the types\n    Type Vehicle {\n        property chassis : TowBall;\n    }\n\n    Type Trailer {\n        property frame : Coupler;\n    }\n\n    -- Define the blocks\n    Block VehicleBlock {\n        type Vehicle;\n    }\n\n    Block TrailerBlock {\n        type Trailer;\n    }\n\n    -- Define the connectors\n    Connector Connection {\n        end1 : TowBall (VehicleBlock);\n        end2 : Coupler (TrailerBlock);\n    }\n\n    -- Define the relationships\n    VehicleBlock --connect> Connection;\n    TrailerBlock --connect> Connection;\n}\n```",
    "-- Define the Package for the Model\npackage VehicleTrailerSystem\n{\n    -- Define the Vehicle Package\n    package Vehicle\n    {\n        class Chassis\n        {\n            -- Define the Tow Ball Device\n            internal TowBallDevice towBall;\n        }\n\n        class TowBallDevice\n        {\n            -- Define the Ball Shape\n            shape BallShape {\n                ellipse(width=10.0, height=10.0);\n            }\n        }\n    }\n\n    -- Define the Trailer Package\n    package Trailer\n    {\n        class TrailerChassis\n        {\n            -- Define the Coupler Mechanism\n            internal CouplerMechanism coupler;\n        }\n\n        class CouplerMechanism\n        {\n            -- Define the Engaged State\n            state Engaged {\n                -- Define the Latched Property\n                property Latched : Boolean = true;\n            }\n\n            -- Define the Disengaged State\n            state Disengaged {\n                -- Define the Unlatched Property\n                property",
    "-- Define the FuelSystem Package\npackage FuelSystem {\n\n  -- Define the FuelSystem Block\n  Block FuelSystem {\n    -- Define the FuelTank Block\n    Block FuelTank {\n      -- Define the FuelTank Ports\n      Port fuelSupplyPort: Fuel;\n      Port fuelReturnPort: Fuel;\n\n      -- Define the FuelTank Internal Features\n      Feature temperature: Real;\n    }\n\n    -- Define the Engine Block\n    Block Engine {\n      -- Define the Engine Ports\n      Port fuelSupplyPort: Fuel;\n      Port fuelReturnPort: Fuel;\n\n      -- Define the Engine Internal Features\n      Feature temperature: Real;\n    }\n\n    -- Define the Fuel Flow Connection\n    Connection fuelFlowConnection {\n      source FuelTank.fuelSupplyPort;\n      target Engine.fuelSupplyPort;\n    }\n\n    Connection fuelReturnConnection {\n      source Engine.fuelReturnPort;\n      target FuelTank.fuelReturnPort;\n    }\n\n    -- Define the F",
    "-- Define the main system block\nmodel FuelDeliverySystem\n\n-- Define the storage tank block\nblock StorageTank {\n    property FuelLevel : real min: 0 max: 100;\n}\n\n-- Define the fuel pump block\nblock FuelPump {\n    property FlowRate : real min: 0;\n}\n\n-- Define the vehicle fuel tank block\nblock VehicleFuelTank {\n    property MaxCapacity : real min: 0;\n    property CurrentFuelLevel : real min: 0 max: MaxCapacity;\n}\n\n-- Define the connections between blocks\nconnection FuelFlow from StorageTank to FuelPump;\nconnection FuelFlow from FuelPump to VehicleFuelTank;\n\n-- Define the flows and their properties\nflow FuelTransfer {\n    source FuelFlow;\n    target FuelFlow;\n    property FuelQuantity : real min: 0;\n}\n\n-- Define the initial fuel reservoir\nInitialFuelReservoir = StorageTank;\nInitialFuelReservoir.FuelLevel = 10",
    "-- Define the Automobile System\nmodel AutomobileAssemblySystem\n\n-- Define the Vehicle Assembly Block\nBlock VehicleAssembly {\n    -- Define the Input and Output Interfaces\n    Provided GearboxInput : Input Gearbox;\n    Provided EngineInput : Input Engine;\n    Provided FinalAssemblyOutput : Output Vehicle;\n\n    -- Define the Internal Structure\n    Part VehicleBody;\n\n    -- Define the Assembly Operations\n    Assembly GearboxAssembly {\n        Precondition: GearboxInput.isAvailable();\n        Postcondition: GearboxInput.isConsumed();\n        Result: this.hasGearbox(GearboxAssembly.Result);\n    }\n\n    Assembly EngineAssembly {\n        Precondition: EngineInput.isAvailable();\n        Postcondition: EngineInput.isConsumed();\n        Result: this.hasEngine(EngineAssembly.Result);\n    }\n\n    Assembly FinalAssembly {\n        Precondition: this.hasGearbox() and this.hasEngine();\n        Postcondition: Vehicle.isAvailable();\n        Result: Vehicle;\n    }\n}\n",
    "-- Define the VehicleA System Block\nmodel VehicleA\n\n-- Define the VehicleA System Context\ncontext VehicleACtx\n    create VehicleA : Block {\n        -- Define the VehicleA States\n        State Off {\n            transition Starting {\n                trigger BrakePedalPressed and StartSignalReceived\n            }\n        }\n        State Starting {\n            transition Running {\n                trigger VehicleOnSignalReceived\n            }\n        }\n        State Running {\n            action SelfChecks {\n                -- Perform self-checks\n            }\n            action PowerSupply {\n                -- Supply power to the vehicle\n            }\n            action ParkingBrake {\n                -- Apply parking brake\n            }\n            transition Degraded {\n                guard TemperatureExceedsSafetyThreshold\n            }\n        }\n        State Degraded {\n            -- Implement degraded mode functionality\n            transition Maintenance {\n                -- Perform maintenance\n            }\n            transition Normal {\n                -- Restore to normal state\n            }\n        }\n        State Main",
    "-- Define the System Block\nmodel VehicleSystem\n\n-- Define the Vehicle Block\nblock Vehicle {\n    -- Define the State Machines\n    state Machines {\n        StateMachine VehicleStateMachine {\n            State ShutDown {\n                Transition InitiateStartup {\n                    Trigger BrakePedalPressed\n                    Trigger StartSignalReceived\n                }\n                State SelfInspection {\n                    Action SelfInspectionProcedure\n                }\n                State PowerSupply {\n                    Action PowerSupplyProcedure\n                }\n                State Operational {\n                    Invariant TemperatureWithinNormalRange\n                }\n                State Degraded {\n                    Action SendWarningSignal\n                    Action SwitchToDegradedMode\n                    Action EnsureSafety\n                }\n            }\n        }\n\n        -- Define the Signals\n        Signal BrakePedalPressed\n        Signal StartSignalReceived\n        Signal TemperatureOverheated\n        Signal WarningSignalSent\n        Signal VehicleStatus",
    "-- Define the simulation context\nmodel SimulationSystem\n\n-- Define the system\nSystem SimulationSystem {\n    ProvidedInterfaces: {\n        Interface \"SnapshotRecorder\" {\n            Operation \"recordSnapshot\"()\n        }\n    }\n\n    RequiredInterfaces: {\n        Interface \"VehicleController\" {\n            Signal \"vehicleStateChanged\"(vehicle: Vehicle)\n        }\n        Interface \"RoadController\" {\n            Signal \"roadStateChanged\"(road: Road)\n        }\n    }\n}\n\n-- Define the vehicle\nclass Vehicle {\n    attributes {\n        Real mass\n        Real position\n        Real velocity\n        Real acceleration\n    }\n\n    operations {\n        -- No operations defined\n    }\n\n    associations {\n        Vehicle --vehicle: VehicleController.vehicle\n    }\n}\n\n-- Define the road\nclass Road {\n    attributes {\n        Real slope\n        Real frictionCoefficient\n    }\n\n    operations {\n        -- No operations defined\n    }\n\n    associations {\n        Road",
    "-- Define the main system\nmodel AutomotiveSystem\n\n-- Define the automobile as the main system\nSystem Automobile\n\n-- Define the configurable components\nBlock SubsystemA\n    Property configOption1 : Boolean = true\n    Property configOption2 : Boolean = false\n    Subsystem\n        Part Component1\n        Part Component2\n        Part Component3\n\nBlock SubsystemB\n    Property configOption1 : Boolean = true\n    Property configOption2 : Boolean = false\n    Property configOption3 : Boolean = false\n    Subsystem\n        Part Component4\n        Part Component5\n        Part Component6\n\n-- Define the relationships between components\nSubsystemA --|> Subsystem\nSubsystemB --|> Subsystem\n\n-- Define the constraints\nConstraint constraint1\n    for SubsystemA.configOption2\n    then SubsystemB.configOption3 = true\n    or SubsystemA.configOption2 = false\n\n-- Define the predefined configurations\nConfiguration ConfigurationA\n    SubsystemA.configOption1 = true\n    SubsystemA.configOption2 = false\n    SubsystemB.configOption1 = true\n   ",
    "-- Define abstract base classes for Subsystems\n\nmodel MyModel\n\n  abstract class Subsystem {\n    - name: String;\n    - ports: Set(Port);\n  }\n\n  abstract class Subsystem_A extends Subsystem {\n    -- Abstract definition for Subsystem A\n  }\n\n  abstract class Subsystem_B extends Subsystem {\n    -- Abstract definition for Subsystem B\n  }\n\n  -- Define Component types\n\n  class Part1 {\n    - name: String;\n    - ports: Port { p1 };\n  }\n\n  class Part2 {\n    - name: String;\n  }\n\n  class Part3 {\n    - name: String;\n    - ports: Port { p1 };\n    -- Define behavioral variants\n    variant Variant1 {\n      -- Define behavior for Variant1\n    }\n\n    variant Variant2 {\n      -- Define behavior for Variant2\n    }\n  }\n\n  class Part4 {\n    - name: String;\n    - ports: Port { p2 };\n  }\n\n  class Part5",
    "-- Define the System\nmodel VehicleConfigurationSystem\n\n-- Define the Vehicle System Block\nBlock VehicleSystem {\n    -- Define the Vehicle System Ports\n    Port VehicleInputPort {\n        data Type VehiclePerformanceRequirements\n    }\n\n    Port VehicleOutputPort {\n        data Type CustomizedVehicle\n    }\n\n    -- Define the Vehicle System Internal Blocks\n    Block Engine {\n        data Type EngineType\n    }\n\n    Block Transmission {\n        data Type TransmissionType\n    }\n\n    Block Wheels {\n        data Type WheelType\n    }\n\n    -- Define the Vehicle System Internal Relationships\n    Engine -->> VehicleSystem : engine\n    Transmission -->> VehicleSystem : transmission\n    Wheels -->> VehicleSystem : wheels\n\n    -- Define the Vehicle System Configuration Constraints\n    Engine.engine <-- VehicleSystem : engineConstraint\n    Transmission.transmission <-- VehicleSystem : transmissionConstraint\n    Wheels.wheelType <-- VehicleSystem : wheelConstraint\n}\n\n-- Define the Engine Block\nBlock Engine {",
    "-- Define the System\nmodel AutomobileSystem\n\n-- Define the Vehicle Package\npackage Vehicle\nextends AutomobileSystem\n\n-- Define the Vehicle Class\nclass Vehicle {\n    -- Define the attributes\n    real mass;\n    boolean fuelStatus;\n\n    -- Define the operations\n    operation checkMass(real maxMass) : Boolean {\n        -- Implement the logic to check if the vehicle mass is within the maximum mass limit\n    }\n}\n\n-- Define the Engine Class\nclass Engine {\n    -- Define the attributes\n    real torque;\n\n    -- Define the interfaces\n    interface DriveInterface {\n        -- Define the required operation\n        operation connectToTransmission();\n    }\n\n    Engine_EngineDriveInterface : DriveInterface;\n}\n\n-- Define the Transmission Class\nclass Transmission {\n    -- Define the interfaces\n    interface DriveInterface {\n        -- Define the required operation\n        operation receivePower();\n    }\n\n    Transmission_EngineDriveInterface : Engine.DriveInterface;\n}\n\n-- Define the Reliability Requirement\nrequirement ReliabilityRequirement",
    "-- Define the System\nmodel MassComplianceSystem\n\n-- Define the Blocks\nBlock TestOperator {\n    Property name : String = \"Test Operator\";\n}\n\nBlock WeighingEquipment {\n    Property name : String = \"Weighing Equipment\";\n}\n\n-- Define the Vehicle\nClass Vehicle {\n    Property mass : Real;\n}\n\n-- Define the Relationships\nRelation TestedBy {\n    Source Vehicle;\n    Target TestOperator;\n}\n\nRelation WeighedBy {\n    Source TestOperator;\n    Target WeighingEquipment;\n}\n\nRelation MeasuredBy {\n    Source WeighingEquipment;\n    Target Vehicle;\n}\n\nRelation CompliantWith {\n    Source Vehicle;\n    Target MassConstraint;\n}\n\n-- Define the Constraints\nClass MassConstraint {\n    Property maxMass : Real = 2500;\n}\n\n-- Define the System Context\nContext MassComplianceContext {\n    Node TestOperator1, WeighingEquipment1, Vehicle1",
    "-- Define the main package\npackage WaterSupplyNetwork {\n    -- Define the main artifact\n    Artifact SpigotBank {\n        name \"SpigotBank\";\n        providedInterfaces ^Spigot{\n            name \"Spigot\";\n            providedHotWater: OutputHotWater;\n            providedColdWater: OutputColdWater;\n        }\n    }\n\n    -- Define the interface\n    interface Spigot {\n        -- Define the hot water output interface\n        OutputHotWater {\n            name \"HotWater\";\n        }\n\n        -- Define the cold water output interface\n        OutputColdWater {\n            name \"ColdWater\";\n        }\n    }\n\n    -- Define the component\n    Component Faucet {\n        name \"Faucet\";\n        requiredInterfaces ^Spigot{\n            name \"Spigot\";\n            requiredHotWater: InputHotWater;\n            requiredColdWater: InputColdWater;\n        }\n\n        -- Define the hot water inlet\n        InputHotWater {\n            name \"HotWater\";\n        }\n\n        --",
    "-- Define the System\nmodel VehicleQualityAnalysisSystem\n\n-- Define the System Context\ncontext VehicleQualityAnalysisSystemContext\n\n-- Define the System Block\nblock VehicleQualityAnalysisSystem\n    extends Context::Context\n\n-- Define the System Requirements\nrequirement VehicleQualityAnalysisSystem_Req_001\n    provided by VehicleQualityAnalysisSystem\n    that VehicleQualityAnalysisSystem models and analyzes the quality attributes of vehicles\n\nrequirement VehicleQualityAnalysisSystem_Req_002\n    provided by VehicleQualityAnalysisSystem\n    that Users can input quality data for each component\n\nrequirement VehicleQualityAnalysisSystem_Req_003\n    provided by VehicleQualityAnalysisSystem\n    that The system automatically aggregates and calculates the total mass of the vehicle\n\nrequirement VehicleQualityAnalysisSystem_Req_004\n    provided by VehicleQualityAnalysisSystem\n    that The system supports the definition of quality analysis requirements\n\nrequirement VehicleQualityAnalysisSystem_Req_005\n    provided by VehicleQualityAnalysisSystem\n    that The",
    "-- Define the System Block\nmodel VehiclePowertrainSystem\n\n-- Define the Engine Block\nblock Engine {\n    -- Define Engine Attributes\n    property Power: Real;\n    property Mass: Real;\n    property Efficiency: Real;\n    property Reliability: Real;\n    property Cost: Real;\n}\n\n-- Define the EngineType Block\nblock EngineType {\n    -- Define EngineType Attributes\n    property Name: String;\n\n    -- Define EngineType Components\n    component FourCylinderEngine {\n        part Cylinder: Engine;\n        part Piston: Engine;\n        part ConnectingRod: Engine;\n        part Crankshaft: Engine;\n    }\n\n    component SixCylinderEngine {\n        part Cylinder: Engine[*];\n        part Piston: Engine[*];\n        part ConnectingRod: Engine[*];\n        part Crankshaft: Engine;\n    }\n\n    -- Define EngineType Relationships\n    EngineType -- \"has\" --> FourCylinderEngine;\n    EngineType -- \"has\" --> Six",
    "-- Define the main package\npackage VehicleSystem\n{\n    -- Define the context\n    context Context\n    {\n        import \"sysml/sysml.ocl\";\n\n        -- Define the required interfaces\n        require FuelEconomyInterface = \"FuelEconomyInterface\";\n        require VehicleInterface = \"VehicleInterface\";\n\n        -- Define the main block\n        Block Vehicle\n        {\n            -- Define the ports\n            Port fuelEconomyPort : FuelEconomyInterface;\n            Port vehiclePort : VehicleInterface;\n\n            -- Define the internal blocks\n            Block Powertrain\n            {\n                -- Define the attributes\n                real powerOutput;\n                real fuelConsumption;\n            }\n\n            Block Load\n            {\n                real mass;\n            }\n\n            Block OperatingConditions\n            {\n                real urbanDriving;\n                real highwayDriving;\n            }\n\n            -- Define the relationships\n            Powertrain -->> fuelConsumption: FuelEconomyInterface::fuelConsumption;\n            Load -->> mass:",
    "-- Define the system\nmodel VehicleSimulationSystem\n\n-- Define the context\ncontext Context\n\n-- Define the blocks\nblock Vehicle\n    property mass: Real32\nend Vehicle\n\nblock PowerInput\n    property powerData: Sequence(Real32)\nend PowerInput\n\nblock DynamicEquations\n    property timeStep: Real32\nend DynamicEquations\n\nblock VehicleMotionAnalyzer\n    operation calculateMotion(vehicle: Vehicle, powerData: Sequence(Real32)): Sequence(Real32)\n    -- Input: Vehicle and PowerData\n    -- Output: Acceleration\n    parameter vehicle: Vehicle\n    parameter powerData: Sequence(Real32)\n\n    -- Define local variables\n    var acceleration: Sequence(Real32) = Sequence{}\n    var velocity: Real32 = 0.0\n    var position: Real32 = 0.0\n\n    -- Initialize variables\n    acceleration = Sequence{}\n\n    -- Calculate motion\n    for i in 1..powerData.length do:\n",
    "-- Define the vehicle system\nmodel VehicleSystem\n\n-- Define the vehicle as a Block\nBlock Vehicle {\n    mass : Real(initialValue: 2500.0)\n}\n\n-- Define the FrontAxle assembly\nAssembly FrontAxle {\n    mass : Real(initialValue: 150.0)\n\n    -- Define the FrontWheel components\n    Part FrontWheel1 {\n        mass : Real\n    }\n\n    Part FrontWheel2 {\n        mass : Real\n    }\n\n    -- Define the FrontAxle component\n    Part FrontAxle {\n        mass : Real(initialValue: 100.0)\n        property SteeringAngle : Real\n    }\n\n    -- Connect the components\n    FrontAxle -->> FrontWheel1 : wheel\n    FrontAxle -->> FrontWheel2 : wheel\n    FrontAxle -->> FrontAxle : axle\n\n    -- Connect the FrontAxle to the Vehicle\n    FrontAxle -->> Vehicle : axle\n}\n\n-- Define the",
    "-- Define the System\nmodel VehicleManagementSystem\n\n-- Define the Vehicle\npackage Vehicle\n    class Vehicle {\n        -- Define the attributes\n        property name : String;\n        property safetyComponents : Set(Component);\n        property securityComponents : Set(Component);\n\n        -- Define the relationships\n        relationship mandatorySafetyComponents : Set(Component) -> safetyComponents : mandatorySafetyComponent;\n        relationship optionalSafetyComponents : Set(Component) -> safetyComponents : optionalSafetyComponent;\n        relationship securityComponents : Set(Component) -> securityComponents : hasSecurityComponent;\n    }\n\n-- Define the Component\npackage Component\n    class Component {\n        property name : String;\n        property isMandatorySafetyFeature : Boolean;\n        property isOptionalSafetyFeature : Boolean;\n        property isSecurityFeature : Boolean;\n    }\n\n-- Define the mandatory safety features\npackage MandatorySafetyFeatures\n    extend Component {\n        property kind : String = \"Mandatory Safety Feature\";\n    }\n\n-- Define the optional safety features\npackage OptionalSafetyFeatures\n    extend",
    "-- Define the System Block\nmodel MySystemArchitecture\n\n-- Define the Layers\npackage Layers {\n    package Application {\n        Block ApplicationLayer {\n            -- Define Core Attributes\n            attribute float x;\n            attribute float y;\n            attribute float z;\n        }\n    }\n\n    package Service {\n        Block ServiceLayer {\n            -- Define Dependency on Application Layer\n            requires Application::ApplicationLayer;\n        }\n    }\n\n    package Data {\n        Block DataLayer {\n            -- Define Dependency on Service Layer\n            provides Service::ServiceLayer;\n        }\n    }\n\n    -- Define Dependencies between Layers\n    Application::ApplicationLayer -->> Service::ServiceLayer;\n    Service::ServiceLayer -->> Data::DataLayer;\n}\n```",
    "-- Define the System\nmodel PowertrainSystem\n\n-- Define the Context\ncontext Context\n  create Clock : TimeClock;\nendContext Context;\n\n-- Define the Blocks\nblock Engine\n  provide Torque : Real;\nendEngine Engine;\n\nblock Transmission\n  provide Power : Real;\nendTransmission Transmission;\n\nblock Motor\n  provide Torque : Real;\nendMotor Motor;\n\n-- Define the Torque Generator Interface\ninterface TorqueGenerator\n  provide Torque : Real;\nendInterface TorqueGenerator;\n\n-- Define the Powertrain System\nsystem PowertrainSystem\n  context Context;\n\n  part Engine : Engine;\n  part Transmission : Transmission;\n  part Motor : Motor;\n\n  Engine.Torque -> Transmission.Power;\n  Motor.Torque -> Transmission.Power;\n\n-- Define the Constraints\nconstraint PositiveTorque\n  for (all p : PowertrainSystem.Parts | p.name != \"Transmission\") do:\n    p.out.Torque > 0.0;\nendPositiveTorque;\n",
    "-- Model Declaration\nmodel PowertrainSystem\nextends SysML::Block\n\n-- Block Definitions\n\nBlock Engine {\n  extends SysML::Block\n  provides Power\n  requires Power\n\n  -- Ports\n  Port powerInput : PowerPort {\n    dataType SysML::ValueSpecification {\n      dataType SysML::Real\n      name powerInput\n    }\n  }\n\n  Port powerOutput : PowerPort {\n    dataType SysML::ValueSpecification {\n      dataType SysML::Real\n      name powerOutput\n    }\n  }\n\n  -- Internal Blocks\n  Block TorqueGenerator {\n    extends SysML::Block\n    provides Torque\n    requires Power\n\n    -- Ports\n    Port inputPower : PowerPort {\n      dataType SysML::ValueSpecification {\n        dataType SysML::Real\n        name inputPower\n      }\n    }\n\n    Port outputTorque : TorquePort {\n      dataType SysML::ValueSpecification {\n        dataType SysML::Real\n        name outputTor",
    "-- Define the Vehicle Package\npackage Vehicle {\n    -- Define the Safety Feature Type\n    type SafetyFeature {\n        featureName : String;\n        mandatory : Boolean;\n    }\n\n    -- Define the AntiTheft Feature Type\n    type AntiTheftFeature {\n        featureName : String;\n    }\n\n    -- Define the Both Feature Type\n    type BothFeature {\n        featureName : String;\n    }\n\n    -- Define the Vehicle Block\n    Block Vehicle {\n        name : \"Vehicle\";\n\n        -- Define the Safety Components\n        SafetyComponent safetyComponents : Set(SafetyFeature);\n\n        -- Define the Anti-Theft Components\n        AntiTheftComponent antiTheftComponents : Set(AntiTheftFeature);\n\n        -- Define the Both Components\n        BothComponent bothComponents : Set(BothFeature);\n    }\n\n    -- Define the Safety Feature Instances\n    SafetyFeature frontSeatBelts {\n        featureName = \"Front Seat Belts\";\n        mandatory = true;\n    }\n\n    SafetyFeature bumpers {\n        feature",
    "-- Define the System\nmodel FuelSupplySystem\n\n-- Define the Context\ncontext Context\n  create FuelSupplySystem : System\nendContext Context\n\n-- Define the FuelTankAssembly Block\nblock FuelTankAssembly\n  extends Context\n\n  -- Define the FuelTank\n  part FuelTank : Tank\n\n  -- Define the FuelPump\n  part FuelPump : Valve\n    self.name = 'FuelPump'\n    self.isControl = true\n\n  -- Define the FuelTankAssembly Interfaces\n  interface FuelSupplyInterface\n    provide Fuel : Flow\n    provide FuelReturn : Flow\n    provide FuelTemperature : Real\n\n  interface FuelConsumingUnitInterface\n    require Fuel : Flow\n\n  -- Connect the FuelTankAssembly Interfaces\n  FuelTankAssembly -> FuelSupplyInterface\n  FuelTankAssembly -> FuelConsumingUnitInterface\n\n  -- Define the FuelTankAssembly Connections\n  FuelTankAssembly.FuelTank -> FuelTankAssembly",
    "-- Define the System\nmodel VehicleSafetySecurity\n\n-- Define the Blocks\nBlock Vehicle {\n    -- Define the Compartments\n    Compartment Interior {\n        Requirement SeatBelts {\n            number 2\n            feature Safety\n        }\n        Requirement Airbag {\n            feature Safety\n            optional true\n        }\n        Requirement AntiTheftAlarm {\n            feature Security\n        }\n    }\n    Compartment Body {\n        Requirement Bumper {\n            feature Safety\n            mandatory true\n        }\n        Requirement KeylessEntry {\n            feature Security\n            mandatory true\n        }\n    }\n    Compartment Chassis {\n        Requirement Wheels {\n            number 2\n            feature Structure\n        }\n        Requirement AntiLockBrakingSystems {\n            number 2\n            feature Safety\n            optional true\n        }\n    }\n}\n\n-- Define the Requirements\nrequirement SeatBelts {\n    name \"Two seat belts\"\n    feature Safety\n    mandatory true\n}\nrequirement Airbag {\n   ",
    "-- Define the package for the vehicle component system\npackage VehicleComponentSystem {\n\n  -- Define the interior subsystem\n  subsystem Interior {\n    -- Define the alarm system\n    Component AlarmSystem {\n      artifact AlarmSystemDocumentation;\n    }\n\n    -- Define the seat belts\n    Component SeatBelts {\n      artifact SeatBeltsDocumentation;\n      property SafetyRating;\n    }\n\n    -- Define the front row seats\n    Component FrontRowSeats {\n      artifact FrontRowSeatsDocumentation;\n    }\n\n    -- Define the driver's airbag\n    Component DriverAirbag {\n      artifact DriverAirbagDocumentation;\n    }\n  }\n\n  -- Define the body assembly subsystem\n  subsystem BodyAssembly {\n    -- Define the vehicle body\n    Component VehicleBody {\n      artifact VehicleBodyDocumentation;\n    }\n\n    -- Define the bumper\n    Component Bumper {\n      artifact BumperDocumentation;\n      property CrashRating;\n    }\n\n    -- Define the keyless entry system",
    "-- Define Security Classification Enumeration\nmodel SecurityClassification\ncreate Enumeration SecurityClassificationLevel\n    extend ValueType\n    {\n        attribute name: String;\n        value Unclassified = SecurityClassificationLevel{name='Unclassified'};\n        value Confidential = SecurityClassificationLevel{name='Confidential'};\n        value Secret = SecurityClassificationLevel{name='Secret'};\n    }\nend SecurityClassification;\n\n-- Define System Model\nmodel MySystem\ncreate Block MySystemBlock\n    extend Node\n    {\n        attribute name = 'My System';\n    }\nend MySystem;\n\n-- Define Component Model\nmodel ComponentModel\ncreate Block Component\n    extend Node\n    {\n        attribute name = 'Component';\n        association securityClassification : SecurityClassificationLevel\n        {\n            end1.oclIsKindOf(Component);\n            end2.oclIsKindOf(SecurityClassificationLevel);\n        };\n    }\nend ComponentModel;\n\n-- Define Relationships\nmodel MySystemSecurity\ncreate MySystemMySystemBlock\ncreate ComponentModelComponent\n\ncreate MySystem",
    "-- Define the main blocks\nmodel AutomotiveECU {\n  Block VehicleControlUnit {\n    Property busIF : BusInterface;\n  }\n\n  Block EngineControlUnit {\n    Property busIF : BusInterface;\n  }\n\n  Block CANBus {\n    Property vehicles : Set(VehicleControlUnit);\n    Property engines : Set(EngineControlUnit);\n  }\n\n  Block SensorInterface {\n    Property futureExpansion : Set(Interface);\n  }\n}\n\n-- Define the interfaces\ninterface BusInterface {\n  Signal signalCAN : DataType(int);\n}\n\ninterface Interface {\n  -- Define the data types\n  DataType EngineData {\n    Attribute engineRPM : int;\n    Attribute engineTemp : int;\n  }\n\n  DataType VehicleData {\n    Attribute vehicleSpeed : int;\n    Attribute engineRPM : int;\n  }\n}\n\n-- Connect the blocks\nAutomotiveECU.CANBus --> AutomotiveECU.VehicleControlUnit : busIF;\nAutomotiveECU.CANBus --> AutomotiveECU",
    "-- Define the System\nmodel BloodGlucoseMeter\n\n-- Define the Blocks\nBlock Battery\nBlock BatteryManagement\nBlock BloodGlucoseSensor\nBlock Alarm\nBlock EmergencyResponse\n\n-- Define the Relationships\nBattery -->> BatteryManagement : Provides\nBatteryManagement -->> Alarm : Triggers\nBatteryManagement -->> EmergencyResponse : Triggers\n\n-- Define the Properties\nProperty Battery.capacity : real = 1000.0\nProperty Battery.status : Boolean = true\n\n-- Define the Operations\nOperation BatteryManagement.checkBatteryStatus() : Boolean\nOperation BatteryManagement.alertUser() : void\nOperation Alarm.activate() : void\nOperation EmergencyResponse.respond() : void\n\n-- Define the Block Diagram\nBlockDiagram BatterySystem\nBatterySystem.Battery : Battery\nBatterySystem.BatteryManagement : BatteryManagement\nBatterySystem.BloodGlucoseSensor : BloodGlucoseSensor\nBatterySystem.Alarm : Alarm\nBatterySystem.EmergencyResponse : EmergencyResponse\n\nBatterySystem",
    "-- Constants Package\npackage Constants\n{\n    -- Mathematical Constants\n    Constant e\n    {\n        name := 'e';\n        value := 2.7182818284590451;\n        annotation => 'http://www.omg.org/spec/SysML/20110701/MOF-annotation/1.0/unitless';\n    };\n\n    Constant pi\n    {\n        name := 'pi';\n        value := 3.14159265358979323846;\n        annotation => 'http://www.omg.org/spec/SysML/20110701/MOF-annotation/1.0/unitless';\n    };\n\n    -- Physical Constants\n    Constant c\n    {\n        name := 'c';\n        value := 299792458.0;\n        annotation => 'http://www.omg.org/spec/SysML/20110",
    "-- Define Tire Class\nclass Tire {\n    -- Define Attributes\n    attribute name : String;\n    attribute rimDiameter : Real;\n    attribute width : Integer;\n}\n\n-- Define Tire Instances\ninstance FrenchTire1 of Tire {\n    name = 'Michelin';\n    rimDiameter = 18.0;\n    width = 245;\n}\n\ninstance FrenchTire2 of Tire {\n    name = 'Michelin';\n    rimDiameter = 19.0;\n    width = 255;\n}\n\ninstance GermanTire1 of Tire {\n    name = 'Continental';\n    rimDiameter = 17.0;\n    width = 225;\n}\n```",
    "-- Define package for automotive component model\npackage automotive_component_model {\n  -- Define Vehicle type\n  type Vehicle {\n    mass: Real(isQuantity = true, unit = \"kg|lb\");\n    length: Real(isQuantity = true, unit = \"m|ft\");\n  }\n\n  -- Define FrontWheel type\n  type FrontWheel {\n    hubDiameter: Real(isQuantity = true, unit = \"in|cm\");\n    width: Real(isQuantity = true, unit = \"mm|in\");\n    tireHeight: Real(isQuantity = true, unit = \"in|cm\");\n    outerDiameter: Real(isQuantity = true, unit = \"in|cm\");\n  }\n\n  -- Define Tire type\n  type Tire {\n  }\n\n  -- Define Vehicle with two FrontWheels and two Tires\n  Vehicle(mass: 1200, length: 4.82) -> {\n    leftFrontWheel: FrontWheel();\n    rightFrontWheel: FrontWhe",
    "-- Define the types\ntype EngineType {\n    FourCylinder\n    SixCylinder\n}\n\ntype TransmissionType {\n    Manual\n    Automatic\n}\n\n-- Define the classes\nclass Vehicle {\n    - engine: Engine\n    - transmission: Transmission\n\n    operation selectEngine(EngineType engineType) {\n        self.engine = Engine(engineType)\n    }\n\n    operation selectTransmission(TransmissionType transmissionType) {\n        self.transmission = Transmission(transmissionType)\n    }\n\n    constraint {\n        self.engine.type in {FourCylinder, SixCylinder}\n        self.transmission.type in {Manual, Automatic}\n\n        (self.engine.type = SixCylinder and self.transmission.type = Automatic) or\n        (self.engine.type = FourCylinder and self.transmission.type = Manual)\n    }\n}\n\nclass Engine {\n    - type: EngineType\n\n    Engine(EngineType engineType) {\n        self.type = engine",
    "-- Define the main system\nmodel AutomotiveComponentModel\n\n-- Define the vehicle\nsubsystem Vehicle {\n    property mass : Real = 1200;\n    property length : Real = 4.82;\n\n    -- Define wheel assemblies\n    + WheelAssembly {\n        property radiusBrakeDisc : Real = 95;\n\n        -- Define wheel\n        + Wheel {\n            property rimDiameter : Real = 18;\n            property tireWidth : Real = 245;\n            property tireHeight : Real = 45;\n            property outerDiameter : Real;\n            property treadDepth : Real = 6.0;\n\n            -- Calculate outer diameter\n            operation calculateOuterDiameter() : Real {\n                self.outerDiameter = sqrt(pow(self.rimDiameter / 2.0, 2.0) + pow(self.tireWidth / 2.0, 2.0) + pow(self.tireHeight, 2.0));\n            }\n        }\n\n",
    "-- Define the main system block\nmodel AutomotiveFuelSystem\n\n-- Define the fuel tank assembly block\nblock FuelTankAssembly {\n  -- Define the outlet interface\n  interface Outlet {\n    -- Define the fuel flow\n    flow Fuel {\n      -- Define the direction\n      direction Out;\n    }\n\n    -- Define the return function\n    operation ReturnFuel();\n  }\n\n  -- Define the fuel tank\n  Property FuelLevel: real;\n\n  -- Define the fuel tank assembly ports\n  port FuelInlet {\n    type Fuel;\n  }\n\n  port FuelOutlet {\n    type Fuel;\n    -- Connect to the outlet interface\n    connectsTo Outlet;\n  }\n\n  -- Define the fuel tank assembly components\n  component FuelTank {\n    -- Define the fuel capacity\n    property FuelCapacity: real;\n  }\n\n  component FuelLevelSensor {\n    -- Define the fuel level measurement\n    property FuelLevelMeasured: real;\n  }\n\n  -- Connect the components\n  FuelT",
    "-- Define the ISQ Package\npackage ISQ {\n    -- Define the Base Physical Quantity Stereotype\n    stereotype BasePhysicalQuantity {\n        property hasUnit : String;\n        property hasBaseUnit : String;\n    }\n\n    -- Define the Base Physical Quantities\n    class Length extends BasePhysicalQuantity {\n        property value : Real;\n    }\n\n    class Mass extends BasePhysicalQuantity {\n        property value : Real;\n    }\n\n    class Time extends BasePhysicalQuantity {\n        property value : Real;\n    }\n\n    class ElectricCurrent extends BasePhysicalQuantity {\n        property value : Real;\n    }\n\n    class Temperature extends BasePhysicalQuantity {\n        property value : Real;\n    }\n\n    class AmountOfSubstance extends BasePhysicalQuantity {\n        property value : Real;\n    }\n\n    class LuminousIntensity extends BasePhysicalQuantity {\n        property value : Real;\n    }\n}\n\n-- Define the System Package\npackage System {\n    -- Define the System Block\n   ",
    "-- Define the Package for the Unit System Library\npackage UnitSystemLibrary {\n\n  -- Define the Interface for the Unit Converter\n  interface IUnitConverter {\n    operation convert(fromUnit : Unit, toUnit : Unit) : Real\n  }\n\n  -- Define the Interface for the Unit Registry\n  interface IUnitRegistry {\n    operation getUnit(unitType : UnitType, unitName : String) : Unit\n  }\n\n  -- Define the Interface for the Unit Type\n  interface IUnitType {\n    attribute name : String\n  }\n\n  -- Define the Class for the Unit\n  class Unit {\n    attribute name : String\n    attribute conversionFactor : Real\n    attribute isBase : Boolean = false\n\n    association unitType : IUnitType\n  }\n\n  -- Define the Class for the Unit Type Library\n  class UnitTypeLibrary {\n    attribute units : Set(Unit)\n  }\n\n  -- Define the Class for the Unit System\n  class UnitSystem {\n    attribute converter : IUnitConverter\n    attribute registry : IUnitRegistry\n    attribute unitTypeLibrary : UnitType",
    "-- Define the system\nmodel Headlamp_Adjustment_System\n\n-- Define the context\ncontext Context\n  requires SI\nendContext Context\n\n-- Define the blocks\nblock Headlamp\n  provides Light\nendblock Headlamp\n\nblock Headlamp_Adjustment_Knob\n  extends Block\n  requires SI\n\n  property tiltAngle : real\nendblock Headlamp_Adjustment_Knob\n\n-- Define the constraints\nconstraint Tilt_Angle_Constraint\n  for (headlamp : Headlamp, knob : Headlamp_Adjustment_Knob)\n  where (50_degrees <= knob.tiltAngle <= 80_degrees)\nendconstraint Tilt_Angle_Constraint\n```",
    "-- Define the Block 'System'\nmodel System\n\n-- Define the Block 'DataTypes' as a Package within 'System'\npackage DataTypes {\n\n  -- Define the Enum 'StatusLevel'\n  enum StatusLevel {\n    Red,\n    Yellow,\n    Green\n  }\n\n  -- Define the Block 'CoreDataTypes' as a Package within 'DataTypes'\n  package CoreDataTypes {\n\n    -- Define the Class 'UnsignedInteger'\n    class UnsignedInteger {\n      property value : Integer\n      invariant nonNegative(self.value)\n    }\n\n    -- Define the Class 'UnsignedFloat'\n    class UnsignedFloat {\n      property value : Real\n      invariant nonNegative(self.value)\n    }\n\n    -- Define the Class 'DateTime'\n    class DateTime {\n      property value : String\n    }\n\n    -- Define the Class 'String'\n    class String {\n      property value : String\n    }\n\n    -- Define the Class 'Boolean'\n    class Boolean {\n      property value : Boolean\n    }\n  }\n\n  -- Define the",
    "-- Define types\ntype Person {\n  name : String;\n}\n\ntype Bag {\n  parts : Set[SparePart];\n}\n\ntype SparePart {\n  id : Integer;\n  name : String;\n}\n\ntype ListInt {\n  values : Sequence[Integer];\n}\n\ntype ListPerson {\n  persons : Set[Person];\n}\n\ntype SetString {\n  values : Set[String];\n}\n\ntype OrderedSetPerson {\n  persons : OrderedSet[Person];\n}\n\ntype ArrayReal {\n  values : Array[Real] { length = 4 };\n}\n\n-- Define blocks\nblock System {\n  -- Define internal blocks\n  subsystem SparePartsManagement {\n    -- Define internal blocks\n    block BagManagement {\n      Bag myBag : Bag;\n    }\n\n    -- Define internal ports\n    port Archive : Input {\n      type Bag;\n    }\n\n    -- Define internal connections\n    Bag myBag : BagManagement.Bag > Archive : Bag;\n\n    -- Define internal operations\n    operation manageSp",
    "-- Define the Tire and Manufacturer types\ntype Tire {\n    manufacturer : Manufacturer\n    rimDiameter : Real number[0..*]\n    tireWidth : Real number[0..*]\n    installationPosition : Vector[3] real[0..*] optional\n}\n\ntype Manufacturer {\n    name : String\n}\n\n-- Define the TireSystem and TireBlock types\nclass TireSystem {\n    tires : Set[Tire] [0..*]\n}\n\nclass TireBlock {\n    tire : Tire\n}\n```",
    "-- Define the main package\npackage Spacecraft_System\n{\n    -- Define the required imports\n    import \"http://www.omg.org/spec/SysML/20110701/SysML.xml#BlockDefinition\" as Block;\n    import \"http://www.omg.org/spec/SysML/20110701/SysML.xml#ValueType\" as ValueType;\n    import \"http://www.omg.org/spec/SysML/20110701/SysML.xml#String\" as String;\n\n    -- Define the main block\n    Block Spacecraft_System_Block {\n        -- Define the internal blocks\n        Block Time_Model {\n            -- Define the Time data type\n            ValueType Time {\n                dataType: Integer;\n                isSpecification: true;\n                feature {\n                    name: \"seconds\";\n                    lower: 0;\n                }\n            }\n\n            Block UTC_Time {\n                name: \"UTC_Time\";\n                extension {\n",
    "-- Define the Alloy package\npackage Alloy {\n    -- Define the Material class\n    class Material {\n        property atomicMass : Real;\n        property name : String;\n    }\n\n    -- Define the Metal subclass of Material\n    subclass Metal of Material {\n    }\n\n    -- Define the Alloy class\n    class Alloy {\n        property name : String;\n        property tensileStrength : Real;\n\n        -- Define the composition relationship\n        relationship composition {\n            source Alloy;\n            target Material;\n            property massFraction : Real;\n        }\n\n        -- Define the component Materials\n        association components {\n            end1 Alloy;\n            end2 Material;\n            role componentMaterial;\n            navigation alloy : Alloy;\n            navigation material : Material;\n        }\n\n        -- Define the instantiation of common Metals and Alloys\n        create Iron {\n            name \"Iron\";\n            extend Metal;\n            atomicMass 55.847;\n        }\n\n        create Steel980 {\n            name \"Steel 9",
    "-- Define the EngineeringMaterialsDatabase System Block\nSystem EngineeringMaterialsDatabase {\n  -- Define the EngineeringMaterial Block\n  Block EngineeringMaterial {\n    -- Define the Attributes\n    Real atomicMass;\n    String name;\n    String materialType;\n    Real tensileStrength;\n\n    -- Define the Internal Composition\n    InternalComponent internalComposition {\n      -- Define the Constituent Materials\n      InternalComponent metal;\n      InternalComponent alloy;\n\n      -- Define the Multiplicity of Constituent Materials\n      (metal : Material) -- 1..*;\n      (alloy : Alloy) -- 0..1;\n    }\n\n    -- Define the Relationships\n    EngineeringMaterial -- \"has\" -> InternalComponent internalComposition;\n  }\n\n  -- Define the Material Block\n  Block Material {\n    -- Define the Attributes\n    Real density;\n  }\n\n  -- Define the Alloy Block\n  Block Alloy {\n    -- Define the Attributes\n    Real carbonContent;\n    Real manganeseContent;\n\n    -- Define the Relationships",
    "-- Define the system context\nmodel MyPubSubSystem\nextends SysML::BlockDefinition\n\n-- Define the system components\n\ncomponent Publisher\nextends SysML::Block\n\ncomponent Subscriber\nextends SysML::Block\n\ncomponent Server\nextends SysML::Block\n\n-- Define the system interfaces\n\ninterface Message\nextends SysML::ValueSpecification\n{\n    String name = 'Message';\n}\n\ninterface Topic\nextends SysML::ValueSpecification\n{\n    String name = 'Topic';\n}\n\ninterface PublisherInterface\n{\n    -- Operation to publish a message on a topic\n    Operation publishMessage(in Message msg, in Topic topic : String) : Boolean;\n}\n\ninterface SubscriberInterface\n{\n    -- Operation to subscribe to a topic\n    Operation subscribeToTopic(in Topic topic : String) : Boolean;\n\n    -- Operation to receive a message from the server\n    Operation receiveMessage() : Message;\n}\n\n-- Define the system connections\n\nconnection Publisher_to_Server\n{\n    source Publisher",
    "-- Define the System\nmodel FuelSystem\n\n-- Define the Context\ncontext Context\n\n-- Define the Blocks\nBlock FuelTankAssembly {\n    property float FuelCapacity;\n    internal Block FuelLines {\n        end1 FuelInlet;\n        end2 FuelOutlet;\n    }\n    internal Block Engine {\n        property float FuelConsumptionRate;\n        internal Block FuelReturnLines {\n            end1 FuelReturnInlet;\n            end2 FuelReturnOutlet;\n        }\n    }\n}\n\nBlock Engine {\n    property float FuelEfficiency;\n}\n\n-- Define the Relationships\nFuelTankAssembly -->> FuelLines -->> Engine;\nEngine -->> FuelReturnLines -->> FuelTankAssembly;\n\n-- Define the Signals\nSignal FuelTemperatureSignal {\n    source FuelTankAssembly;\n    target Engine;\n}\n\n-- Define the Flows\nFlow FuelFlow {\n    source FuelTankAssembly.FuelOutlet;\n    target Engine.FuelInlet;\n}",
    "-- Define the main blocks\n\nmodel MQTT_System\n\nBlock Producers {\n    -- Define the Producer block\n    Block Producer {\n        Property message : String;\n        Operation publish(in topic : String);\n    }\n}\n\nBlock Server {\n    -- Define the Server block\n    Block MessageBroker {\n        Property topics : Set(String);\n        Property subscribers : Set(Consumer);\n        Operation subscribe(in consumer : Consumer, in topic : String);\n        Operation unsubscribe(in consumer : Consumer, in topic : String);\n        Operation deliverMessage(in message : String, in topic : String);\n    }\n}\n\nBlock Consumers {\n    -- Define the Consumer block\n    Block Consumer {\n        Property topic : String;\n        Operation requestSubscription(in topic : String);\n    }\n}\n\n-- Define the relationships\n\nRelation Producer_to_MessageBroker {\n    Source Producers.Producer;\n    Target Server.MessageBroker;\n}\n\nRelation Consumer_to_MessageBroker {\n   ",
    "-- Define the System\nmodel TransportationSystem\n\n-- Define the Blocks\nBlock Driver {\n    Property fuelLevel : real;\n}\n\nBlock Passenger {\n\n}\n\nBlock Vehicle {\n    Property maxFuelCapacity : real;\n    Property currentFuelLevel : real = 0;\n    Action refuel {\n        Precondition fuelLevel < 0.1 * maxFuelCapacity;\n        Postcondition currentFuelLevel > maxFuelCapacity * 0.1;\n    }\n}\n\n-- Define the Relationships\nRelation user <-- \"uses\" Vehicle;\nRelation driver \"is a\" Person;\nRelation passenger \"is a\" Person;\nRelation vehicle \"has\" Driver;\nRelation vehicle \"has\" Passenger;\nRelation vehicle \"has\" FuelTank;\n\n-- Define the FuelTank\nBlock FuelTank {\n    Property fuelLevel : real;\n}\n\n-- Define the Connections\nConnection user_vehicle {\n    Source user;\n    Target vehicle;\n}\n\nConnection driver_vehicle {\n    Source",
    "-- Define the System Block\nmodel FuelManagementSystem\n\n-- Define the FuelTank Block\nBlock FuelTankAssembly {\n    -- Define the FuelTank Ports\n    Port FuelOutlet {\n        dataType Fuel\n        flow FuelFlow\n        isSupply true\n        isObserved true\n        attribute {\n            name: \"FuelTemperature\"\n            dataType: Real\n        }\n    }\n\n    Port FuelInlet {\n        dataType Fuel\n        flow FuelFlow\n        isSupply false\n        isObserved true\n        attribute {\n            name: \"FuelTemperature\"\n            dataType: Real\n        }\n    }\n}\n\n-- Define the EngineUnit Block\nBlock EngineUnit {\n    -- Define the Engine Ports\n    Port FuelInlet {\n        dataType Fuel\n        flow FuelFlow\n        isSupply true\n        isObserved true\n        attribute {\n            name: \"FuelTemperature\"\n            dataType: Real\n        }\n    }\n\n    Port FuelOutlet {\n       ",
    "-- Define the System Block\nmodel FuelSystemManagement\n\n-- Define the Fuel Tank Assembly Block\nBlock FuelTankAssembly {\n    -- Define the Ports\n    Port fuelSupplyPort {\n        data FuelTemperature: real;\n    }\n\n    -- Define the Internal Blocks\n    Block FuelTank {\n        -- Define the State\n        State empty {\n            -- Define the Transition\n            Transition fill {\n                trigger FuelArrives;\n                action FuelIsStored;\n            }\n        }\n\n        State full {\n            -- Define the Transition\n            Transition fuelConsumption {\n                trigger FuelIsRequested;\n                action FuelIsSupplied;\n            }\n        }\n    }\n}\n\n-- Define the Engine Block\nBlock Engine {\n    -- Define the Ports\n    Port fuelReturnPort {\n        data FuelTemperature: real;\n    }\n\n    -- Define the Internal Blocks\n    Block FuelCombustionEngine {\n        -- Define the State\n        State running {\n            -- Define",
    "-- Define the system context\nmodel MyCameraSystem\n\nextension MyCameraExtension of MyCameraSystem\n{\n    -- Define the main system\n    Block MyCameraSystem\n        initialNode MyCameraSystem_InitialNode\n    {\n        -- Define the user interface\n        Block UserInterface\n            Port UserInput : Input {\n                dataType Integer\n                name \"SceneSelection\"\n            }\n            Port UserOutput : Output {\n                dataType Image\n                name \"CapturedImage\"\n            }\n        end\n\n        -- Define the camera core\n        Block CameraCore\n            Port CameraInput : Input {\n                dataType Image\n                name \"IntermediateImage\"\n            }\n            Port CameraOutput : Output {\n                dataType Image\n                name \"FinalImage\"\n            }\n            InternalBlock Focusing\n                Port FocusingInput : Input {\n                    dataType Image\n                    name \"SceneImage\"\n                }\n                Port FocusingOutput : Output {\n                    dataType Image\n                    name \"FocusedImage\"\n                }\n                InternalBlock AutoFocus\n",
    "-- Define the main package\npackage PhotographyWorkflow\n{\n    -- Define the system\n    System PhotographySystem\n    {\n        -- Define the context\n        Context Context\n        {\n            Requirement \"The system is designed to support the photography workflow\" as r1;\n        }\n\n        -- Define the internal structure\n        Model PhotographyModel\n        {\n            -- Define the focus operation\n            Operation Focusing\n            {\n                -- Define the input\n                Parameter SceneToFocus\n                {\n                    dataType Integer;\n                    lower = 0;\n                    upper = 100;\n                };\n\n                -- Define the output\n                Parameter IntermediateImage as i1;\n                dataType Image;\n            };\n\n            -- Define the shoot operation\n            Operation Shooting\n            {\n                -- Define the input\n                Parameter FocusedImage as i2;\n                dataType Image;\n\n                -- Define the output\n                Parameter FinalImage as o1;\n                dataType Image;\n            };\n\n            -- Define the",
    "-- Define the main package\npackage PhotographyWorkflow\n{\n    -- Define the system\n    System PhotographySystem\n    {\n        -- Define the context\n        Context User\n        {\n            Property userName : String;\n        }\n\n        -- Define the internal blocks\n        Block FramingAndFocusing\n        {\n            Port framingPort : Input Image;\n            Port focusingPort : Output Image;\n\n            InternalFeature focusingResult : Image;\n\n            Action focus\n            {\n                Precondition framingPort.received = true;\n                Postcondition focusingPort.provided = true;\n                focusingResult = framingPort.image.applyFocusingAlgorithm();\n            }\n        }\n\n        Block Shooting\n        {\n            Port shootingPort : Input Image;\n            Port photographPort : Output Image;\n\n            InternalFeature photograph : Image;\n\n            Action shoot\n            {\n                Precondition shootingPort.received = true;\n                Postcondition photographPort.provided = true;\n                photograph = shootingPort.image.applyShootingAlgorithm(focusingResult);",
    "-- Define the context\nmodel PhotographySystem\n\ncontext Context\n{\n    Requirement r1 : requirement {\n        name : \"Automate photography process\";\n        description : \"The system automates the photography process.\";\n    };\n\n    Requirement r2 : requirement {\n        name : \"Perform focus processing\";\n        description : \"The system performs focus processing on the scene.\";\n    };\n\n    Requirement r3 : requirement {\n        name : \"Generate image suitable for shooting\";\n        description : \"The system generates an image suitable for shooting.\";\n    };\n\n    Requirement r4 : requirement {\n        name : \"Convert image into photograph\";\n        description : \"The system converts the image into a photograph.\";\n    };\n\n    Requirement r5 : requirement {\n        name : \"Seamless integration\";\n        description : \"The system integrates the focus processing and shooting operations seamlessly.\";\n    };\n\n    Requirement r6 : requirement {\n        name : \"No user intervention in focusing\";\n        description : \"The user does not need to intervene in focusing details.\";\n    };\n\n    Requ",
    "-- Define the main package\npackage PhotographyWorkflow\n\n-- Define the required types\ntype Scene {\n    name: String\n}\n\ntype Image {\n    name: String\n    focus: Boolean\n}\n\ntype Picture {\n    name: String\n}\n\n-- Define the required blocks\nblock User {\n    -- No attributes\n}\n\nblock PhotographySystem {\n    -- No attributes\n\n    -- Define the internal blocks\n    internal Focus {\n        -- No attributes\n        operation focus(scene: Scene): Image;\n    }\n\n    internal Shoot {\n        -- No attributes\n        operation shoot(image: Image): Picture;\n    }\n}\n\n-- Define the required relationships\nUser -> PhotographySystem : uses\nScene -> Focus : input\nFocus -> Image : produces\nImage -> Shoot : input\nShoot -> Picture : produces\n```",
    "-- Define the main package\npackage PhotographyWorkflow\n{\n    -- Define the context\n    Context Context\n    {\n        Requirement r1 : String = \"This system is designed to support the photography workflow\";\n        Requirement r2 : String = \"Allowing users to select a scene and capture it as a photograph\";\n        Requirement r3 : String = \"In the shooting process, the selected scene is first focused to ensure optimal image sharpness\";\n        Requirement r4 : String = \"If the camera detects that the focus is clear, it will proceed to take the photo\";\n        Requirement r5 : String = \"The entire process automatically performs focusing and shooting operations in sequence\";\n        Requirement r6 : String = \"Providing users with a convenient one-click shooting experience\";\n        Requirement r7 : String = \"While ensuring the clarity and quality of the photos\";\n    }\n\n    -- Define the system\n    System Camera\n    {\n        Requirement r1 : Context.r1;\n        Requirement r2 : Context.r2;\n\n        -- Define the internal blocks\n        Block Focusing\n        {",
    "-- Define the context\ncontext Context {\n    -- Define the system\n    System Camera {\n        -- Define the external interfaces\n        Operation SceneInput {\n            parameter Scene : Input\n        }\n\n        Operation Focus {\n            result FocusedImage : Output\n            precondition FocusRequested\n            postcondition FocusCompleted\n        }\n\n        Operation Shoot {\n            result Photo : Output\n            precondition FocusCompleted\n            postcondition ShootCompleted\n        }\n\n        -- Define the internal blocks\n        Block FocusBlock {\n            port FocusInput : Input {\n                connect SceneInput.Scene\n            }\n\n            port FocusOutput : Output {\n                connect Focus.FocusedImage\n            }\n\n            Operation FocusOperation {\n                -- Define the focus algorithm\n                -- ...\n            }\n        }\n\n        Block ShootBlock {\n            port FocusedImageInput : Input {\n                connect FocusBlock.FocusOutput\n            }\n\n            port PhotoOutput : Output {\n                connect Shoot.Photo\n            }\n\n            Operation ShootOperation {\n                -- Define the shooting",
    "-- Define the context\ncontext Context {\n    -- Define the main system\n    System PhotographySystem {\n        -- Define the input\n        Input ShootingScene {\n            dataType String\n            name \"ShootingScene\"\n        }\n\n        -- Define the internal block that performs the focusing process\n        Block FocusBlock {\n            -- Define the input\n            Input Image {\n                dataType Image\n                name \"Image\"\n            }\n\n            -- Define the output\n            Output FocusedImage {\n                dataType Image\n                name \"FocusedImage\"\n            }\n\n            -- Define the internal operation that performs the focusing process\n            Operation Focus {\n                input Image\n                output FocusedImage\n            }\n        }\n\n        -- Define the internal block that performs the shooting operation\n        Block ShootingBlock {\n            -- Define the input\n            Input FocusedImage {\n                dataType Image\n                name \"FocusedImage\"\n            }\n\n            -- Define the output\n            Output Photograph {\n                dataType Image\n                name \"Photograph\"\n           ",
    "-- Define the system\nmodel AutomaticBrakeControlSystem\n\n-- Define the context\ncontext Context\n\n-- Define the external interfaces\ninterface VehicleInterface\n    extends Node {\n    signal VehicleStarted : Boolean;\n    signal BrakePedalPressed : Boolean;\n    signal RoadAdhesion : Real;\n}\n\ninterface EnvironmentInterface\n    extends Node {\n    signal Vehicle : VehicleInterface;\n}\n\n-- Define the system components\npackage ControlSystem {\n    class AutomaticBrakeControl {\n        - VehicleInterface vehicle : VehicleInterface;\n        - Real tractionVariation : Real;\n        - Real optimalBrakePressure : Real;\n        - Real brakePressure : Real;\n        - Real modulationFrequency : Real;\n\n        operation Activate() {\n            self.vehicle.VehicleStarted -> self.tractionVariation = 0.0;\n            self.brakePressure = 0.0;\n            self.modulationFrequency = 0.0;\n        }\n\n        operation MonitorBrakePedal() {",
    "-- Define the System\nmodel BatteryChargingControlSystem\n\n-- Define the Context\ncontext Context\n\n-- Define the Blocks\nBlock Battery\nBlock Charger\nBlock BatteryManagementSystem\n\n-- Define the Relationships\nBattery -->> Charger : supplies\nCharger -->> BatteryManagementSystem : reports\nBatteryManagementSystem -->> Battery : monitors\nBatteryManagementSystem -->> Charger : controls\n\n-- Define the Battery\nBlock Battery\n    property float BatteryLevel\n\n-- Define the Charger\nBlock Charger\n    property float ChargingCurrent\n\n-- Define the BatteryManagementSystem\nBlock BatteryManagementSystem\n    operation RealTimeBatteryLevelMonitoring()\n    operation AutomaticCharging()\n    operation ChargingTerminationControl()\n\n-- Define the Constraints\nconstraint ChargingTermination\n    if BatteryManagementSystem.BatteryLevel >= 100 then\n        Charger.ChargingCurrent = 0\n    end if\n\n-- Define the Flow\nFlow BatteryLevelFlow\n    source BatteryManagementSystem",
    "-- Define the system\nmodel ChargingSystem\n\n-- Define the context\ncontext Context\n\n-- Define the blocks\nBlock Battery\nBlock Charger\nBlock ControlSystem\n\n-- Define the relationships\nBattery --realization-> ControlSystem : BatteryManagement\nCharger --realization-> ControlSystem : ChargingControl\n\n-- Define the properties\nProperty BatteryLevelPercentage\n    type Double\n    initial 0.0\n    final 100.0\n    isReadOnly false\n\nBlock Battery\n    BatteryLevelPercentage : self.level\n\n-- Define the behavior\nBehavior ChargingBehavior\n    initialNode InitialNode\n\n    InitialNode --> Node1\n    Node1 [event ChargingStarted]\n    Node1 --> Node2\n\n    Node2 [invariant BatteryBelow100]\n    Node2 --> Node3\n\n    Node3 [action ReplenishBattery]\n    Node3 --> Node4\n\n    Node4 [invariant BatteryAt100]\n    Node4 --> Node5\n\n    Node5 [action ChargingTerminated",
    "-- Define the main system\nmodel CameraSystem\n\n-- Define the context\ncontext Context\n    create ObjectNode contextRoot\nendContext Context\n\n-- Define the main system\npackage CameraSystem\n    extend Context\n\n    -- Define the autofocus subsystem\n    subsystem AutofocusSubsystem\n        create ObjectNode autofocusNode\n        provide Focusing\n    endSubsystem AutofocusSubsystem\n\n    -- Define the imaging subsystem\n    subsystem ImagingSubsystem\n        create ObjectNode imagingNode\n        provide Imaging\n    endSubsystem ImagingSubsystem\n\n    -- Define the user interface\n    subsystem UserInterface\n        create ObjectNode uiNode\n        provide UserInterfaceControl\n    endSubsystem UserInterface\n\n-- Define the interfaces\ninterface Focusing\n    operation ObtainFocus(scene: Scene)\nendInterface Focusing\n\ninterface Imaging\n    operation CaptureImage(focusedScene: Scene)\nendInterface Imaging\n\ninterface UserInterfaceControl\n    operation SelectScene(scene: Scene)\n    operation ConfirmScene()\nendInterface UserInterfaceControl\n\n-- Define the",
    "-- Define the context\nmodel CameraSystem\n\ncontext Context {\n    Requirement r1 : shootingProcessAutomation;\n    Requirement r2 : highQualityPhotos;\n}\n\n-- Define the main system\nsystem Camera {\n    -- Define the internal structure\n    + ShootingProcess (r1) {\n        -- Define the functional modules\n        + SceneSelection {\n            -- Define the ports\n            -- None\n        }\n\n        + Focusing {\n            -- Define the ports\n            -- None\n        }\n\n        + Imaging {\n            -- Define the ports\n            -- None\n        }\n\n        -- Define the collaboration\n        -- between functional modules\n        SceneSelection -> Focusing : trigger;\n        Focusing -> Imaging : trigger;\n    }\n}\n\n-- Define the external interfaces\npackage Interfaces {\n    interface ICamera {\n        -- Define the provided interfaces\n        operation selectScene();\n\n        -- Define the required interfaces\n        operation getImage();\n    }\n}\n\n-- Define the environment\nenvironment DigitalCameraEnvironment {\n    -- Define the actors\n   ",
    "-- Define the system\nmodel VehicleSimulation\n\n-- Define the blocks\nblock Vehicle\n    property mass : Real;\n    property position : Real;\n    property velocity : Real;\n    property powerInput : Real;\n\nblock SimulationEngine\n    operation calculateSpeed(vehicle : Vehicle, timeStep : Real): Real;\n    operation calculatePosition(vehicle : Vehicle, timeStep : Real): Real;\n\n-- Define the relationships\nVehicle -- \"has\" > SimulationEngine : control;\n\n-- Define the constraints\nconstraint InitialCondition {\n    Vehicle.position > 0 and\n    Vehicle.velocity = 0 and\n    Vehicle.mass > 0 and\n    SimulationEngine.powerInput.oclIsTypeOf(Real)\n}\n\n-- Define the operations\noperation Vehicle::setMass(value : Real) {\n    self.mass = value;\n}\n\noperation Vehicle::setPosition(value : Real) {\n    self.position = value;\n}\n\noperation Vehicle::setVelocity(value : Real) {\n    self.velocity =",
    "-- Define the main package\npackage CameraSystem\n{\n    -- Define the context\n    Context Context\n    {\n        Input SceneInput : InputPort {\n            name : \"SceneInput\"\n            dataType : String\n        };\n\n        Output PhotoOutput : OutputPort {\n            name : \"PhotoOutput\"\n            dataType : Image\n        };\n\n        -- Define the system\n        System CameraSystem\n        {\n            isInitial : true;\n\n            -- Define the internal blocks\n            Block SceneProcessing : Block {\n                name : \"SceneProcessing\"\n                initialNode : true;\n\n                -- Define the internal nodes\n                Node Focusing : Node {\n                    name : \"Focusing\"\n                    initialNode : true;\n\n                    -- Define the input and output connectors\n                    Input SceneInput_Focusing : Input {\n                        name : \"SceneInput\"\n                        type : SceneInput\n                        multiplicity : (1, 1)\n                        connects : SceneInput -> SceneInput_Focusing;\n                    };\n\n                    Output",
    "-- Define Blocks\n\nBlock Camera {\n  Port viewPort : Input Image;\n  Port displayPort : Output Picture;\n\n  InternalBlock Focusing {\n    Port image : Output Image;\n  }\n\n  InternalBlock Capturing {\n    Port image : Input Image;\n    Port picture : Output Picture;\n  }\n\n  InternalBlock Displaying {\n    Port picture : Input Picture;\n  }\n\n  Focusing --> Camera;\n  Capturing --> Camera;\n  Displaying --> Camera;\n}\n\nBlock Image {\n  Attribute resolution : Real;\n}\n\nBlock Picture {\n  Attribute resolution : Real;\n}\n\n-- Define Relationships\n\nCamera -> Focusing;\nFocusing --> Image;\nImage --> Camera;\n\nCamera -> Capturing;\nCapturing --> Image;\nImage --> Capturing;\nImage --> Picture;\nPicture --> Capturing;\n\nCamera -> Displaying;\nDisplaying --> Picture;\nPicture --> Displaying;\nPicture --> Camera;\n```",
    "-- Define the Sensor Block\nmodel SensorSystem\n\nBlock Sensor {\n    -- Define the Sensor Properties\n    Property status : String = \"NotReady\"\n    Property ready : Boolean = false\n\n    -- Define the Sensor Operations\n    Operation update() {\n        self.status = \"Updated\"\n    }\n}\n\n-- Define the Sensor Manager Block\nBlock SensorManager {\n    -- Define the SensorManager Properties\n    Set<Sensor> registeredSensors : { sensor : Sensor | sensor.status <> \"Destroyed\" }\n\n    -- Define the SensorManager Operations\n    Operation initialize() {\n        -- Initialize the registeredSensors Set\n    }\n\n    Operation detectReadySensors() : Set<Sensor> {\n        Set<Sensor> readySensors\n        for (sensor in registeredSensors) {\n            if (sensor.ready = true) {\n                readySensors.add(sensor)\n            }\n        }\n        return readySensors\n    }\n\n    Operation processReadySensors() {\n        Set<Sensor> readySensors = detectReadySensors()\n",
    "-- Define Signals\nsignal VehicleStartSignal\nsignal VehiclePowerOnSignal\nsignal VehicleShutdownSignal\n\n-- Define Blocks\nBlock Vehicle\nBlock System\n\n-- Define Internal Blocks of Vehicle\nBlock OffState\nBlock StartingState\nBlock OnState\n\n-- Define Relationships\nRelation Vehicle_has_OffState\nRelation Vehicle_has_StartingState\nRelation Vehicle_has_OnState\n\nVehicle -> OffState [Vehicle_has_OffState]\nVehicle -> StartingState [Vehicle_has_StartingState]\nVehicle -> OnState [Vehicle_has_OnState]\n\n-- Define Transitions\nTransition OffState_to_StartingState\nTransition StartingState_to_OnState\nTransition OnState_to_OffState\n\nOffState_to_StartingState [VehicleStartSignal]\nStartingState_to_OnState [VehiclePowerOnSignal]\nOnState_to_OffState [VehicleShutdownSignal]\n\n-- Define Internal Blocks of System\nBlock StateMachine\n\n-- Define Relationships\nRelation System",
    "-- Define the system\nmodel AutomaticVehicleControlSystem\n\n-- Define the context\ncontext AutomaticVehicleControlSystemContext\n\n-- Define the vehicle\nclass Vehicle\n    property status : String = \"off\"\nendclass\n\n-- Define the signals\nsignal VehicleStartSignal\nsignal VehicleOnSignal\nsignal VehicleOffSignal\n\n-- Define the states\nclass State\nendclass\n\nclass OffState extends State\nendclass\n\nclass StartingState extends State\nendclass\n\nclass OnState extends State\nendclass\n\n-- Define the transitions\ntransition VehicleStartTransition\n    source OffState\n    target StartingState\n    trigger VehicleStartSignal\nendtransition\n\ntransition VehicleOnTransition\n    source StartingState\n    target OnState\n    trigger VehicleOnSignal\nendtransition\n\ntransition VehicleOffTransition\n    source OnState\n    target OffState\n    trigger VehicleOffSignal\nendtransition\n\n-- Define the system context\ncontext SystemContext\n\n-- Define the system\nclass System\n    property vehicle : Vehicle\n    property currentState : State = OffState\nendclass\n\n-- Define the flow\n",
    "-- Define the System Block\nmodel PowerManagementSystem\n\n-- Define the Context\ncontext VehicleContext\n\n-- Define the Blocks\nBlock Vehicle\nBlock PowerManagementSystem\n\n-- Define the Relationships\nPowerManagementSystem -->> Vehicle : aggregation\n\n-- Define the States\nState Off\nState StartPhase\nState PoweredOn\nState Shutdown\n\n-- Define the Transitions\nTransition StartCommand\nTransition VehicleStarted\nTransition ShutdownCommand\n\n-- Define the State Machines\nStateMachine PowerManagementStateMachine\n\n-- Define the States in the StateMachine\nState Off_State in PowerManagementStateMachine\nState StartPhase_State in PowerManagementStateMachine\nState PoweredOn_State in PowerManagementStateMachine\nState Shutdown_State in PowerManagementStateMachine\n\n-- Define the Transitions in the StateMachine\nTransition StartCommand_Transition in PowerManagementStateMachine\nTransition VehicleStarted_Transition in PowerManagementStateMachine\nTransition ShutdownCommand_Transition in PowerManagementStateMachine\n\n-- Define the Initial State\nInitialNode InitialNode_PowerManagementStateMachine in PowerManagementStateMachine\n\n-- Define the StateMachine Triggers\nTrigger",
    "-- Define the System Block\nmodel VehicleControlSystem\n\n-- Define the Blocks\nBlock Vehicle\nBlock UserInterface\nBlock ControlUnit\n\n-- Define the Relationships\nRelation Vehicle_has_ControlUnit [\n    source : Vehicle,\n    target : ControlUnit,\n    navigability : biDirectional\n]\n\nRelation ControlUnit_has_UserInterface [\n    source : ControlUnit,\n    target : UserInterface,\n    navigability : biDirectional\n]\n\n-- Define the States\nState Vehicle_Shutdown\nState Vehicle_Startup\nState Vehicle_Running\n\n-- Define the Transitions\nTransition Vehicle_Shutdown_to_Startup [\n    source : Vehicle_Shutdown,\n    target : Vehicle_Startup,\n    trigger : Vehicle_StartSignal,\n    guard : Vehicle_IsInShutdownState\n]\n\nTransition Vehicle_Startup_to_Running [\n    source : Vehicle_Startup,\n    target : Vehicle_Running,\n    trigger : Vehicle_StartedSignal,\n    guard : Vehicle_",
    "-- Define the vehicle system\nmodel VehiclePowerManagement\n\n-- Define the vehicle system context\ncontext VehiclePowerManagementContext\n\n-- Define the vehicle system blocks\nblock Vehicle\n    property name = \"Vehicle\";\n\nblock PowerManagement\n    property name = \"PowerManagement\";\n    extends Vehicle;\n\n-- Define the vehicle operating states\nstate Off\n    property name = \"Off\";\n\nstate Start\n    property name = \"Start\";\n\nstate On\n    property name = \"On\";\n\n-- Define the vehicle operating state transitions\ntransition OffToStart\n    source Off;\n    target Start;\n    trigger StartSignal;\n\ntransition StartToOn\n    source Start;\n    target On;\n    trigger OnSignal;\n\ntransition OnToOff\n    source On;\n    target Off;\n    trigger OffSignal;\n\n-- Define the PowerManagement block internal blocks\nblock ControlUnit\n    property name = \"ControlUnit\";\n    extends PowerManagement;\n\n-- Define the ControlUnit internal signals\nsignal StartSignal;\nsignal OnSignal;\nsignal OffSignal;\n```",
    "-- Define the System Block\nmodel VehicleHealthMonitoringSystem\n\n-- Define the Blocks\nBlock Vehicle\nBlock VehicleController\nBlock VehicleHealthStatus\nBlock MaintenanceSystem\n\n-- Define the Relationships\nRelation r_Vehicle_has_VehicleController {\n    Vehicle -->> VehicleController : Controls\n}\n\nRelation r_VehicleController_has_VehicleHealthStatus {\n    VehicleController -->> VehicleHealthStatus : Monitors\n}\n\nRelation r_VehicleHealthStatus_has_TemperatureSensor {\n    VehicleHealthStatus -->> TemperatureSensor : Has\n}\n\nRelation r_TemperatureSensor_provides_Temperature {\n    TemperatureSensor -->> VehicleHealthStatus : Provides\n}\n\nRelation r_VehicleHealthStatus_has_MaintenanceSystem {\n    VehicleHealthStatus -->> MaintenanceSystem : Triggers\n}\n\nRelation r_MaintenanceSystem_has_Timer {\n    MaintenanceSystem -->> Timer : Has\n}\n\nRelation r_Timer_provides_Time {\n",
    "-- Define the Clock block\nmodel ClockModel\n\nblock Clock\n    property time: Real(min: 0.0, max: 1.0) = 0.0;\n\nend Clock\n\n-- Define the Server block\nmodel ServerModel\n\nblock Server\n    internal Clock localClock;\n    internal Clock requestClock;\n    internal State offState;\n    internal State waitingState;\n    internal State responseState;\n    internal Port requestPort: Request_type;\n\n    initialState offState;\n\n    transition start {\n        trigger requestPort->receive(\"start\");\n        source offState;\n        target waitingState;\n    }\n\n    transition receiveRequest {\n        trigger requestPort->receive(\"request\");\n        source waitingState;\n        target responseState;\n    }\n\n    transition automaticShutdown {\n        guard (self.localClock.time > 23.0 * 60.0 * 60.0 + 59.0 * 60.0 + 59.0)\n        source responseState;\n        target off",
    "-- Define the System Context\nmodel StartStopSystem\n\n-- Define the Blocks\nBlock Vehicle\nBlock Controller\n\n-- Define the Internal Blocks of Vehicle\nBlock Vehicle_OffState\nBlock Vehicle_StartProcess\nBlock Vehicle_OperatingState\n\n-- Define the Internal Blocks of Controller\nBlock Controller_SelfCheck\n\n-- Define the Relationships\nRelation Vehicle_has_OffState -> Vehicle_OffState\nRelation Vehicle_has_StartProcess -> Vehicle_StartProcess\nRelation Vehicle_has_OperatingState -> Vehicle_OperatingState\n\nRelation Vehicle_StartProcess_has_StartSignalInput -> StartSignal\nRelation Vehicle_StartProcess_has_BrakePedalInput -> BrakePedal\nRelation Vehicle_StartProcess_has_PowerOnSignalInput -> PowerOnSignal\nRelation Vehicle_StartProcess_has_ControllerOutput -> Controller\n\nRelation Controller_has_SelfCheck -> Controller_SelfCheck\n\nRelation Vehicle_OperatingState_has_SelfCheckInput -> Controller_SelfCheck\nRelation Vehicle_Oper",
    "-- Define the system context\nmodel VehicleControlSystem\n\n-- Define the system\npackage VehicleControlSystem_System\nextends Block\n\n-- Define the context\ncontext VehicleControlSystem_Context\n\n-- Define the off state\nclass OffState\nextends State\n\n-- Define the start-up state\nclass StartUpState\nextends State\n\n-- Define the started state\nclass StartedState\nextends State\n\n-- Define the off state machine\nStateMachine VehicleControlSystem_StateMachine\nextends ControlFlow\n\n-- Define the states\ninitial OffState_State\nfinal State OffState\nState StartUpState_State\nState StartedState_State\n\n-- Define the transitions\nTransition OffState_To_StartUpState\nsource OffState\ntarget StartUpState\ntrigger VehicleStartSignal\n\nTransition StartUpState_To_StartedState\nsource StartUpState\ntarget StartedState\ntrigger BrakePedalDepressed_and_VehicleOnSignalReceived\n\nTransition StartedState_To_OffState\nsource StartedState\ntarget OffState\ntrigger ShutdownSignal\n\n-- Define the signals\nSignal",
    "-- Define the system\nmodel CruiseControlSystem\n\n-- Define the components\npackage VehicleComponents {\n    class Driver {\n        -- No attributes\n    }\n\n    class CruiseController {\n        -- No attributes\n        signal SetSpeedCommand : Speed;\n        signal DesiredSpeed : Speed;\n        signal ActualSpeed : Speed;\n        signal FuelControlCommand : FuelControl;\n    }\n\n    class Speedometer {\n        -- No attributes\n        signal ActualSpeed : Speed;\n    }\n\n    class Engine {\n        -- No attributes\n        signal FuelControlCommand : FuelControl;\n        signal EngineOutput : Power;\n    }\n\n    class Vehicle {\n        -- No attributes\n    }\n}\n\n-- Define the signals\npackage Signals {\n    type Speed {\n        -- No attributes\n    }\n\n    type FuelControl {\n        -- No attributes\n    }\n\n    type Power {\n        -- No attributes\n    }\n}\n\n-- Define the connections\npackage Connections {\n    connection Driver_to_CruiseController {\n        source : Driver",
    "-- Define Blocks\n\nmodel CruiseControlSystem\n\nblock Vehicle\n    property speed: real;\nend Vehicle;\n\nblock Speedometer\nend Speedometer;\n\nblock CruiseController\n    operation setSpeed(speed:in real):void;\n    signal SpeedCommand;\n    signal SpeedFeedback;\n    internal signal DesiredSpeed: real;\n    internal signal SpeedError: real;\n    internal signal ThrottleCommand: real;\n\n    operation setSpeed(speed:in real) {\n        DesiredSpeed = speed;\n        SpeedCommand << SpeedCommand;\n    }\nend CruiseController;\n\nblock EngineSystem\n    property powerOutput: real;\nend EngineSystem;\n\n-- Define Connections\n\nCruiseController.SpeedCommand --> Speedometer.input;\nSpeedometer.output --> CruiseController.SpeedFeedback;\nCruiseController.SpeedFeedback --> CruiseController.DesiredSpeed;\nCruiseController.DesiredSpeed --> CruiseController.SpeedError;\nCruiseController.SpeedError --> CruiseController.ThrottleCommand;\nCruiseController",
    "-- Define Blocks\n\nmodel CruiseControlSystem\n\nBlock CruiseController {\n    Property speedSet :: Real\n    Port inControlInterface : Control {\n        Message speedCommand : ControlMessage {\n            Parameter speed : Real\n        }\n    }\n    Port outEngine : Control {\n        Message throttleCommand : ControlMessage {\n            Parameter throttle : Real\n        }\n    }\n    InternalBlock speedSensor {\n        Port speedSensorPort : DataFlow {\n            Message currentSpeed : DataFlowMessage {\n                Parameter speed : Real\n            }\n        }\n    }\n    InternalBlock throttleControl {\n        Port difference : DataFlow {\n            Message speedDifference : DataFlowMessage {\n                Parameter difference : Real\n            }\n        }\n        Port throttleCommandPort : Control {\n            Message throttleCommand : ControlMessage {\n                Parameter throttle : Real\n            }\n        }\n        InternalBlock calculator {\n            Port setSpeed : DataFlow {\n                Data setSpeedData : Real = speedSet\n            }\n            Port currentSpeed : DataFlow {",
    "-- Model: Automotive Cruise Control System\n\nmodel AutomotiveCruiseControlSystem\n\n  -- Requirement: This system is designed to implement automotive cruise control functionality.\n  requirement CruiseControlFunctionality {\n    description \"The system is designed to implement automotive cruise control functionality.\";\n  }\n\n  -- Requirement: When the driver wishes to set the vehicle’s cruising speed, they can send a command specifying the desired speed.\n  requirement DriverCommand {\n    description \"The driver can send a command specifying the desired cruising speed.\";\n  }\n\n  -- Requirement: Upon receiving this command, the vehicle’s cruise controller calculates and sends appropriate throttle control instructions to the engine based on real-time speed information from the speedometer.\n  requirement CruiseController {\n    description \"The cruise controller calculates and sends throttle control instructions to the engine based on real-time speed information.\";\n  }\n\n  -- Requirement: This enables the automatic adjustment and maintenance of the vehicle at the set cruising speed.\n  requirement AutomaticSpeedControl {\n    description \"The system enables the automatic adjustment",
    "-- Define Blocks\n\nmodel AutomotiveCruiseControl\n\nBlock CruiseControlInterface {\n    Property speedSet: Real\n}\n\nBlock CruiseController {\n    Property targetSpeed: Real\n    Property actualSpeed: Real\n    Property engineFuelControlCommands: Real\n}\n\nBlock Engine {\n}\n\nBlock SpeedSensor {\n    Property actualSpeed: Real\n}\n\n-- Define Relationships\n\nRelation CruiseControlInterface_to_CruiseController [\n    source: CruiseControlInterface,\n    target: CruiseController,\n    navigability: biDirectional,\n    end1: dataPort speedSet,\n    end2: input port setSpeed\n]\n\nRelation CruiseController_to_SpeedSensor [\n    source: CruiseController,\n    target: SpeedSensor,\n    navigability: biDirectional,\n    end1: output port speedInfo,\n    end2: input port speed\n]\n\nRelation CruiseController_to_Engine [\n    source: CruiseController,\n    target: Engine,\n    navigability: biDirectional,\n   ",
    "-- Define the system context\nmodel CruiseControlSystem\n\n-- Define the system\npackage CruiseControl\nextends SystemBlock {\n    -- Define the external interfaces\n    provide Interface CruiseControlInterface {\n        signal SetSpeedCommand : SpeedCommand\n        signal FuelControlCommand : FuelControlCommand\n    }\n\n    -- Define the internal blocks\n    part CruiseController {\n        provide Interface CruiseControlInterface {\n            receive SetSpeedCommand : SpeedCommand\n            provide FuelControlCommand : FuelControlCommand\n        }\n\n        internal signal ActualSpeed : Real\n        internal signal DesiredSpeed : Real\n        internal signal SpeedDifference : Real\n\n        -- Define the internal blocks\n        part SpeedSensor {\n            provide Interface CruiseControlInterface {\n                receive ActualSpeed : Real\n            }\n\n            internal signal RealTimeSpeed : Real\n        }\n\n        part CruiseControllerLogic {\n            internal signal SpeedDifference : Real\n            internal signal FuelControlCommand : FuelControlCommand\n\n            -- Define the internal behavior\n            context CruiseControllerBehavior {\n                entry Action",
    "-- Define the system\nmodel VehicleLifecycleManagementSystem {\n  Package Vehicle {\n    Class Vehicle {\n      - name: String;\n      - assemblyDate: Date;\n      - deliveryDate: Date;\n      - currentOwner: Owner;\n      - previousOwners: Owner[*];\n      - drivers: Driver[*];\n    }\n\n    Class Owner {\n      - name: String;\n      - startDate: Date;\n      - endDate: Date;\n    }\n\n    Class Driver {\n      - name: String;\n    }\n\n    Class Date {\n      attribute timestamp: Integer;\n    }\n  }\n\n  Package Lifecycle {\n    Class VehicleAssembly {\n      - vehicle: Vehicle;\n    }\n\n    Class VehicleDelivery {\n      - vehicle: Vehicle;\n      - deliveryDate: Date;\n    }\n\n    Class OwnershipTransfer {\n      - previousOwner: Owner;\n      - currentOwner: Owner;\n      - startDate: Date;\n      - endDate: Date;\n    }\n",
    "-- Define the Vehicle Package\npackage vehicle {\n    -- Define the Vehicle Class\n    class Vehicle {\n        -- Define Attributes\n        real mass;\n        boolean operationalStatus;\n        real gearSetting;\n        real acceleratorPedalPosition;\n\n        -- Define Internal References\n        Engine engine;\n        Driver driver;\n\n        -- Define Associations\n        Wheel leftWheel;\n        Wheel rightWheel;\n\n        -- Define Invariants\n        invariant operationalStatus implies (gearSetting in [0..6] and acceleratorPedalPosition in [0..1]);\n    }\n\n    -- Define the Engine Class\n    class Engine {\n        -- Define Attributes\n        real enginePower;\n    }\n\n    -- Define the Driver Class\n    class Driver {\n        -- Define Attributes\n        real weight;\n    }\n\n    -- Define the Wheel Class\n    class Wheel {\n        -- Define Attributes\n        real tirePressure;\n    }\n\n    -- Define the Vehicle_1 Instance\n    Vehicle vehicle_1 {\n        mass = 1",
    "-- Define the system package\npackage System\n{\n  -- Define the vehicle class\n  class Vehicle {\n    -- Define attributes\n    real mass;\n    Integer gear;\n    real acceleratorPosition;\n\n    -- Define initial state of Vehicle_1\n    Vehicle InitialState_Vehicle_1(mass: 2000, gear: 0, acceleratorPosition: 0.0);\n\n    -- Define next state of Vehicle_1\n    Vehicle NextState_Vehicle_1(mass: 1500, gear: 2, acceleratorPosition: 0.5);\n\n    -- Define relationships\n    Engine engine;\n    Driver driver;\n  }\n\n  -- Define the engine class\n  class Engine {\n    -- Define relationships\n    Vehicle vehicle;\n  }\n\n  -- Define the driver class\n  class Driver {\n    -- Define relationships\n    Vehicle vehicle;\n  }\n}\n```",
    "-- Define the Vehicle Package\npackage vehicle {\n\n  -- Define the Vehicle Class\n  class Vehicle {\n    -- Define Attributes\n    real mass;\n    real currentThrottlePosition;\n    real currentGearPosition;\n\n    -- Define Initial Values\n    initial mass = 2000;\n    initial currentThrottlePosition = 0;\n    initial currentGearPosition = 0;\n\n    -- Define Operations\n    operation changeMass(newMass: real) {\n      self.mass = newMass;\n    }\n\n    operation changeGearPosition(newGearPosition: real) {\n      self.currentGearPosition = newGearPosition;\n    }\n\n    operation changeThrottlePosition(newThrottlePosition: real) {\n      self.currentThrottlePosition = newThrottlePosition;\n    }\n  }\n\n  -- Define the Engine Component\n  class Engine {\n  }\n\n  -- Define the Driver Class\n  class Driver {\n    -- Define Attribute\n    String name;\n  }\n\n  -- Define Alice and",
    "-- Define the Package for the Vehicle System Model\npackage VehicleSystemModel {\n\n  -- Define the Vehicle SysML Block\n  Block Vehicle {\n    -- Define the Vehicle's Attribute: Total Mass\n    property mass : Real;\n\n    -- Define the Vehicle's Relationship: Contains Components\n    -- Each component has its own mass and can be a simple component or a composite object\n    -- The total mass of a vehicle includes the mass of itself and all its subcomponents\n    relationship Contains {\n      end1 : Component;\n      end2 : Vehicle;\n      navigability: in;\n      multiplicity: (0..*) -> 1;\n    }\n\n    -- Define the Core Components of a Vehicle\n    Component Engine {\n      property mass : Real;\n    }\n\n    Component Transmission {\n      property mass : Real;\n    }\n\n    -- Define the Composite Component: Body\n    -- The Body is a composite object that contains other components\n    Block Body {\n      -- Define the Body's Attribute: Total Mass\n      property mass : Real;\n\n",
    "-- Define the Package for the model\npackage vehicle_management_system\n\n-- Define the Block for the Vehicle\nblock Vehicle {\n    -- Define the attributes for the Vehicle\n    attribute VIN : String;\n    attribute mass : Real;\n\n    -- Define the relationship between a Vehicle and its Components\n    relationship hasComponent(component : Component) {\n        end1 : Vehicle;\n        end2 : Component;\n        lower : 1;\n        upper : *;\n    }\n}\n\n-- Define the Block for the Component\nblock Component {\n    -- Define the attributes for the Component\n    attribute serialNumber : String;\n    attribute mass : Real;\n}\n\n-- Define the Package for the Components\npackage components {\n    -- Define the Block for the Engine\n    block Engine {\n        extends Component;\n        attribute engineMass : Real;\n    }\n\n    -- Define the Block for the Transmission\n    block Transmission {\n        extends Component;\n        attribute transmissionMass : Real;\n    }\n}\n\n-- Define the Package for the Mass Management\npackage mass_management {\n   ",
    "-- Define the base class for all objects\nmodel MassManagementSystem\n\n  Package MassManagementPackage {\n    Class Object {\n      Property simpleMass: Real;\n    }\n  }\n\n  -- Define the base class for simple objects\n  Package SimpleObjectPackage {\n    Class SimpleThing < Object {\n      Property totalMass: Real = simpleMass;\n    }\n  }\n\n  -- Define the base class for composite objects\n  Package CompositeObjectPackage {\n    Class CompositeThing < Object {\n      Property totalMass: Real;\n\n      -- Define the relationship between a composite object and its subcomponents\n      Relation hasSubcomponent(self: CompositeThing, other: Object) {\n        self.totalMass = self.totalMass + other.totalMass;\n      }\n\n      -- Define the multiplicity of a composite object's subcomponents\n      Multiplicity subComponents(self: CompositeThing) {\n        (1..*) Object;\n      }\n    }\n  }\n}\n```",
    "-- Define the MassType Enumeration\nenum MassType {\n    Basic,\n    Subcomponent\n}\n\n-- Define the Object Class\nclass Object {\n    -- Define the Mass Property\n    property mass : Real(isQuantity = true, isDerived = false) {\n        dataType : MassType::Basic\n    }\n\n    -- Define the Subcomponents Property\n    property subcomponents : Set(of Object) {\n        isOrdered = false,\n        isNavigable = true\n    }\n}\n\n-- Define the CompositeObject Class that extends Object\nclass CompositeObject < Object {\n    -- Define the MinimumMass Property\n    property minimumMass : Real(isQuantity = true, isDerived = false)\n}\n\n-- Define the MassCalculation Operation\noperation calculateTotalMass(self : Object) : Real {\n    result = self.mass\n\n    for (subcomponent : Object | subcomponent in self.subcomponents) {\n        if (MassType::Subcomponent = subcomponent.type_of) {\n            if (subcomponent.minimumMass <= self.minimumMass",
    "-- Define the main system block\nmodel VehicleDynamics\n\n-- Define the input and output interfaces\nBlock Vehicle\n    Provided VehiclePower: Real;\n    Provided WheelPower: Real;\n    Provided AerodynamicDragCoefficient: Real;\n    Provided FrictionCoefficient: Real;\n    Provided VehicleMass: Real;\n    Provided Speed: Real;\n    Provided Time: Real;\n\n    Required Acceleration: Real;\n    Required Power: Real;\n    Required Speed: Real;\n    Required Position: Real;\n\nBlock Environment\n    -- No provided or required interfaces\n\n-- Define the internal blocks\nBlock PowerCalculation\n    Provided WheelPower: Real;\n    Provided AerodynamicDragCoefficient: Real;\n    Provided FrictionCoefficient: Real;\n    Provided VehicleMass: Real;\n    Provided Speed: Real;\n\n    -- Define the internal blocks\n    Block PowerComponents\n        Provided WheelPower: Real;\n        Provided AerodynamicDragCoe",
    "-- Define the main block 'Vehicle'\nmodel VehicleSimulation\n\nblock Vehicle {\n    -- Define the main attributes\n    real initialSpeed;\n    real initialPosition;\n    real timeStep;\n    real aerodynamicDragCoefficient;\n    real rollingResistanceCoefficient;\n    real totalMass;\n    real wheelEndOutputPower;\n\n    -- Define the internal state variables\n    real currentAcceleration;\n    real currentSpeed;\n    real currentPosition;\n\n    -- Define the internal signals\n    signal AvailableDrivingPower;\n\n    -- Define the internal operations\n    operation Initialize(\n        in _initialSpeed : real = 0,\n        in _initialPosition : real = 0,\n        in _timeStep : real = 0,\n        in _aerodynamicDragCoefficient : real = 0,\n        in _rollingResistanceCoefficient : real = 0,\n        in _totalMass : real = 0,\n        in _wheelEndOutputPower : real = 0\n    ) {\n        self.initialSpeed =",
    "-- Define the System Block\nmodel VehicleDynamicsModel\n\n-- Define the Block 'Vehicle'\nBlock Vehicle {\n    -- Define the Attributes\n    Real vehicleMass;\n    Real wheelPower;\n    Real aerodynamicDragCoefficient;\n    Real rollingResistanceCoefficient;\n    Real initialSpeed;\n    Real initialPosition;\n\n    -- Define the Internal Signals\n    Signal velocity_s;\n    Signal acceleration_mps2;\n    Signal displacement_m;\n\n    -- Define the Operations\n    Operation calculateDynamics {\n        Input: vehicleMass: Real;\n               wheelPower: Real;\n               aerodynamicDragCoefficient: Real;\n               rollingResistanceCoefficient: Real;\n               initialSpeed: Real;\n               initialPosition: Real;\n\n        Output: velocity_s: Real;\n               acceleration_mps2: Real;\n               displacement_m: Real;\n\n        Precondition: vehicleMass > 0.0 and\n                      wheelPower > 0.0 and\n                      aerodynamic",
    "-- Define the main block 'Vehicle'\nmodel VehicleDynamicModel\n\nblock Vehicle {\n    -- Define the attributes\n    real initialPosition;\n    real initialVelocity;\n    real mass;\n    real wheelEndDrivePower;\n    real timeInterval;\n\n    -- Define the internal signals\n    real acceleration;\n    real finalVelocity;\n    real finalPosition;\n\n    -- Define the parameters\n    real dragCoefficient;\n    real frictionCoefficient;\n\n    -- Define the ports\n    Input InputPort {\n        data initialPosition: real;\n        data initialVelocity: real;\n        data mass: real;\n        data wheelEndDrivePower: real;\n        data timeInterval: real;\n    }\n\n    Output OutputPort {\n        data acceleration: real;\n        data finalVelocity: real;\n        data finalPosition: real;\n    }\n\n    -- Define the internal blocks\n    block DynamicEquations {\n        -- Define the equations\n        equation AccelerationEquation {\n            acceleration = (wheelEndDrivePower",
    "-- Define the system\nmodel MassManagementSystem\n\n-- Define the context\ncontext Context\ncreate\n    Mass: Real(isSpecification=true, name=\"Maximum permitted limit\", value=\"2500.0\")\nend\n\n-- Define the vehicle\npackage Vehicle\n\n-- Define the chassis\nclass Chassis\n    property mass: Real(isSpecification=false, name=\"Mass\")\nend\n\n-- Define the engine\nclass Engine\n    property mass: Real(isSpecification=false, name=\"Mass\")\nend\n\n-- Define the gearbox\nclass Gearbox\n    property mass: Real(isSpecification=false, name=\"Mass\")\nend\n\n-- Define the vehicle as a composite structure\nstructure Vehicle {\n    Chassis chassis : Chassis\n    Engine engine : Engine\n    Gearbox gearbox : Gearbox\n}\n\n-- Define the mass calculation operation\noperation calculateTotalMass(self: Vehicle) : Real\n    create\n        result: Real\n        totalMass: Real\n    end\n\n    totalMass = self.chassis.mass +",
    "-- Define the system\nmodel VehicleMassControlSystem\n\n-- Define the context\ncontext Context\ncreate\n    Mass: Real(isQuantity = true, isDerived = false, unit = \"kilogram\")\nend\n\n-- Define the system components\npackage VehicleComponents\n\n    subsystem Chassis\n        artifact ChassisComponent\n        property mass: Real(isQuantity = true, isDerived = false, unit = \"kilogram\")\n\n    subsystem Engine\n        artifact EngineComponent\n        property mass: Real(isQuantity = true, isDerived = false, unit = \"kilogram\")\n\n    subsystem Transmission\n        artifact TransmissionComponent\n        property mass: Real(isQuantity = true, isDerived = false, unit = \"kilogram\")\n\n-- Define the system constraints\npackage Constraints\n\n    requirement MassConstraint\n        annotation (precondition = 'total mass of the vehicle must not exceed 2500 kilograms')\n        constraint\n            sum(VehicleComponents::Chassis.mass, VehicleComponents::Engine.mass, VehicleComponents::",
    "-- Define the types\ntype Mass {\n    real value;\n}\n\ntype Vehicle {\n    Mass chassisMass;\n    Mass engineMass;\n    Mass transmissionMass;\n    Mass totalMass;\n}\n\n-- Define the blocks\nBlock chassis {\n    type Vehicle;\n    Mass chassisMass;\n}\n\nBlock engine {\n    type Vehicle;\n    Mass engineMass;\n}\n\nBlock transmission {\n    type Vehicle;\n    Mass transmissionMass;\n}\n\nBlock system {\n    type Vehicle;\n    Mass totalMass;\n\n    Operation checkMass {\n        input chassis: Chassis;\n        input engine: Engine;\n        input transmission: Transmission;\n\n        precondition {\n            self.totalMass.value <= 2500\n        }\n\n        effect {\n            self.totalMass.value = chassis.chassisMass.value + engine.engineMass.value + transmission.transmissionMass.value;\n        }\n    }\n}\n\n-- Define the connections\nChassis chassis",
    "-- Define the system\nmodel ChassisWeightControlSystem\n\n-- Define the context\ncontext Context\ncreate\n    Weight: Real(isQuantity=true, isDerived=false, isInput=true),\n    MaxWeight: Real(isQuantity=true, isDerived=false, isParameter=true, value=\"2500.0 kg\")\nend\n\n-- Define the main blocks\nBlock Chassis\n    provides ChassisWeight: Real(isQuantity=true, isDerived=false, lower=0.0)\nend\n\nBlock Engine\n    provides EngineWeight: Real(isQuantity=true, isDerived=false, lower=0.0)\nend\n\nBlock Transmission\n    provides TransmissionWeight: Real(isQuantity=true, isDerived=false, lower=0.0)\nend\n\n-- Define the weight summation and comparison\nBlock WeightSummation\n    extends Node\n    provides TotalWeight: Real(isQuantity=true, isDerived=true)\n\n    Operation sumWeights(self: WeightSummation, chassis",
    "-- Define the System Block\nmodel VehicleSystem\n\n-- Define the Vehicle Block\nBlock Vehicle {\n    property mass: Real negative;\n}\n\n-- Define the Chassis Block\nBlock Chassis {\n    property mass: Real negative;\n}\n\n-- Define the Engine Block\nBlock Engine {\n    property mass: Real negative;\n}\n\n-- Define the Transmission Block\nBlock Transmission {\n    property mass: Real negative;\n}\n\n-- Define the Vehicle Composition\nRelation Vehicle_has_Chassis {\n    source Vehicle;\n    target Chassis;\n}\n\nRelation Vehicle_has_Engine {\n    source Vehicle;\n    target Engine;\n}\n\nRelation Vehicle_has_Transmission {\n    source Vehicle;\n    target Transmission;\n}\n\n-- Define the Mass Constraint\nConstraint TotalMass {\n    context Vehicle;\n    inv mass <= 2500;\n}\n\n-- Define the Dynamic Constraints\nBlock Vehicle_Dynamic {\n    property initialVelocity: Real;\n    property final",
    "-- Define the main package\npackage VehicleManagementSystem {\n\n  -- Define the Vehicle block\n  package Vehicle {\n\n    -- Define the Vehicle class\n    class Vehicle {\n      property name : String;\n      property nextMaintenanceTime : Time;\n      property maintenanceInterval : Time;\n      property maxAllowedTemperature : Real;\n      property currentTemperature : Real;\n      property status : String;\n\n      operation setNextMaintenanceTime(newTime : Time);\n      operation setMaxAllowedTemperature(newMaxAllowedTemperature : Real);\n      operation setCurrentTemperature(newCurrentTemperature : Real);\n\n      signal MaintenanceRequired;\n      signal MaintenanceCompleted;\n\n      -- Define the internal transition for switching to \"under maintenance\"\n      transition MaintenanceDue {\n        guard (self.status = 'healthy' and self.nextMaintenanceTime <= now())\n      }\n\n      -- Define the action for setting the status to \"under maintenance\"\n      action setUnderMaintenance {\n        self.status = 'under maintenance';\n      }\n\n      -- Define the internal transition for",
    "-- Define the types\ntype Integer is datatype Integer;\ntype Mass is datatype Real;\ntype Speed is datatype Real;\ntype Torque is datatype Real;\n\n-- Define the blocks\nBlock vehicle {\n  property .mass : Mass;\n  property .maxMassLimit : Mass;\n\n  Block engine {\n    property .speed : Speed;\n    property .torque : Torque;\n  }\n\n  Block fuelTank {\n    property .mass : Mass;\n  }\n\n  Block transmission {\n  }\n\n  Block clutch {\n    property .engaged : Boolean;\n  }\n}\n\n-- Define the relationships\nvehicle -- \"has\" -- engine;\nvehicle -- \"has\" -- fuelTank;\nengine -- \"provides\" -- torque;\ntransmission -- \"connectedTo\" -- engine;\nengine -- \"interactsWith\" -- clutch;\nclutch -- \"isPartOf\" -- vehicle;\n\n-- Define the constraints\nconstraint totalMass {\n  vehicle.mass <= vehicle.maxMassLimit;\n  fuelTank.mass >= 0;\n}",
    "-- Define the System\nmodel VehicleSystem\n\n-- Define the Vehicle\npackage Vehicle\n\nsubsystem Vehicle {\n    property mass : Real(isQuantity = true)\n}\n\n-- Define the Fuel\nclass Fuel {\n    property mass : Real(isQuantity = true)\n}\n\n-- Define the Engine\nsubsystem Engine {\n    property torque : Real(isQuantity = true)\n}\n\n-- Define the Transmission\nsubsystem Transmission {\n    property mass : Real(isQuantity = true)\n}\n\n-- Define the Clutch\ninterface Clutch {\n    operation transmitTorque()\n}\n\n-- Define the Powertrain\nsubsystem Powertrain {\n    part Engine : Engine\n    part Transmission : Transmission\n}\n\n-- Define the Vehicle's Mass\nrelationship Vehicle_Mass {\n    source Vehicle\n    target Powertrain\n    end\n\n    constraint {\n        (Vehicle.mass <= 2000) and (Powertrain.mass <= 1850)\n        or\n        (Vehicle.mass <= ",
    "-- Define the main package\npackage VehicleSystemModel {\n    -- Define the Vehicle Block\n    Block Vehicle {\n        -- Define the Vehicle's mass properties\n        Property totalMassFueled {\n            dataType Integer;\n            initialValue 2000;\n            lowerBound 2000;\n            upperBound 2000;\n        }\n        Property totalMassEmpty {\n            dataType Integer;\n            initialValue 1500;\n            lowerBound 1500;\n            upperBound 1500;\n        }\n\n        -- Define the Engine Block\n        Block Engine {\n            -- Define the Engine's torque property\n            Property torque {\n                dataType Integer;\n                lowerBound 0;\n            }\n\n            -- Define the Clutch Interface\n            Interface ClutchInterface {\n                -- Define the Engine's torque transmission capability\n                Operation transmitTorque {\n                    precondition Engine.torque > 0;\n                }\n            }\n\n            -- Connect the Engine to the Clutch",
    "-- Define the main blocks\nmodel VehicleControl\n\nBlock vehicle\nBlock engine\nBlock fuelTank\nBlock clutch\nBlock gearbox\n\n-- Define the relationships\nvehicle -->> engine\nvehicle -->> fuelTank\nvehicle -->> clutch\nvehicle -->> gearbox\n\n-- Define the properties\nproperty int vehicle_maxMass_fullTank = 2000;\nproperty int vehicle_maxMass_emptyTank = 1500;\nproperty int engine_maxTorque;\nproperty int clutch_effectiveTransmission;\n\n-- Define the constraints\nConstraint vehicle_mass_fullTank {\n    (vehicle.curbMass + fuelTank.fuelMass) <= vehicle_maxMass_fullTank;\n}\n\nConstraint vehicle_mass_emptyTank {\n    vehicle.curbMass <= vehicle_maxMass_emptyTank;\n}\n\nConstraint engine_torque {\n    engine.maxTorque >= engine_maxTorque;\n}\n\nConstraint clutch_effectiveTransmission {\n    clutch.effectiveTransmission = true;\n}\n```",
    "-- Define the main package\npackage vehiclePerformanceAnalysis\n{\n  -- Define the Blocks\n  Block vehicle {\n    -- Define the internal parts\n    InternalBlock engine {\n      -- Define the ports\n      ProvidedPort powerInput {\n        dataType Real\n      }\n      ProvidedPort throttleInput {\n        dataType Real\n      }\n      ProvidedPort vehicleWeight {\n        dataType Real\n      }\n      ProvidedPort payload {\n        dataType Real\n      }\n      ProvidedPort wheelDiameter {\n        dataType Real\n      }\n      ProvidedPort transmissionEfficiency {\n        dataType Real\n      }\n      ProvidedPort fuelEconomyUrban {\n        dataType Real\n      }\n      ProvidedPort fuelEconomyHighway {\n        dataType Real\n      }\n\n      -- Define the internal parts\n      InternalBlock powerTrain {\n        -- Define the ports\n        ProvidedPort enginePowerOutput {\n          dataType Real\n        }\n        ProvidedPort vehicleAcceleration {\n          dataType Real\n        }\n        ProvidedPort vehicle",
    "-- Define the main package\npackage VehicleFuelEconomySimulation\n{\n    -- Define the Blocks\n    Block Vehicle {\n        -- Define the attributes\n        Real curbWeight;\n        Real load;\n        Real wheelDiameter;\n        Real transmissionEfficiency;\n\n        -- Define the internal parts\n        InternalBlock Engine {\n            Real enginePower;\n        }\n\n        -- Define the relationships\n        Relation hasWheels(Wheel wheel) {\n            wheel.vehicle = self;\n        }\n\n        Relation hasTransmission(Transmission transmission) {\n            transmission.vehicle = self;\n        }\n\n        Relation hasEngine(Engine engine) {\n            engine.vehicle = self;\n        }\n\n        -- Define the operations\n        Operation calculateFuelEconomy(in DrivingScenario scenario) returns Real {\n            -- Define the input and output parameters\n            Real requiredWheelPower;\n            Real actualEnginePower;\n            Real fuelConsumption;\n\n            -- Define the flow\n            requiredWheelPower = scenario.calculateRequiredWheel",
    "-- Define the System\nmodel EngineSelectionSystem\n\n-- Define the Blocks\nBlock EngineSelectionBlock {\n    name EngineSelection\n}\n\nBlock FourCylinderEngineBlock {\n    name FourCylinderEngine\n}\n\nBlock SixCylinderEngineBlock {\n    name SixCylinderEngine\n}\n\n-- Define the Relationships\nRelation EngineSelection_has_FourCylinderEngine {\n    source FourCylinderEngineBlock;\n    target EngineSelectionBlock;\n}\n\nRelation EngineSelection_has_SixCylinderEngine {\n    source SixCylinderEngineBlock;\n    target EngineSelectionBlock;\n}\n\n-- Define the Parameters\nParameter Engine_Power {\n    name Power;\n    type Real;\n}\n\nParameter Engine_Mass {\n    name Mass;\n    type Real;\n}\n\nParameter Engine_Efficiency {\n    name Efficiency;\n    type Real;\n}\n\nParameter Engine_Cost {\n    name Cost;\n    type Real;\n}\n\n-- Define the FourCylinderEngine\nBlock FourCylinderEngine {\n",
    "-- Define the System Context\nmodel VehicleQualityControlSystem\n\n-- Define the Blocks\nBlock Vehicle\nBlock WeightSensor\nBlock WeightProcessor\nBlock WeightEvaluator\nBlock VehicleQualityController\n\n-- Define the Relationships\nWeightSensor -->> Vehicle : Provides\nWeightProcessor -->> WeightSensor : Consumes\nWeightEvaluator -->> WeightProcessor : Consumes\nVehicleQualityController -->> WeightEvaluator : Consumes\n\n-- Define the Weight Sensor\nBlock WeightSensor {\n    Property actualWeight : Real\n}\n\n-- Define the Weight Processor\nBlock WeightProcessor {\n    Operation collectWeightData() : Real\n    Operation processWeightData(weight : Real) : Real\n}\n\n-- Define the Weight Evaluator\nBlock WeightEvaluator {\n    Property maxWeight : Real = 2500.0\n    Operation evaluateWeight(weight : Real) : Boolean\n}\n\n-- Define the Vehicle\nBlock Vehicle {\n    Property curbWeight : Real\n}\n\n-- Define the VehicleQualityController\nBlock VehicleQualityController {\n    Operation checkV",
    "-- Define the package for the system model\npackage SystemModel {\n\n  -- Define the Vehicle block\n  class Vehicle {\n    property mass: Real;\n  }\n\n  -- Define the WeighingEquipment block\n  class WeighingEquipment {\n    operation measureMass(vehicle: Vehicle): Real;\n  }\n\n  -- Define the MassVerificationUnit block\n  class MassVerificationUnit {\n    operation evaluateMass(mass: Real): Boolean;\n  }\n\n  -- Define the MassInspectionProcess block\n  class MassInspectionProcess {\n    property vehicle: Vehicle;\n    property weighingEquipment: WeighingEquipment;\n    property massVerificationUnit: MassVerificationUnit;\n\n    operation inspectMass();\n\n    operation getVehicleMass(): Real;\n    operation getVehicle(): Vehicle;\n\n    operation getWeighingEquipment(): WeighingEquipment;\n    operation getMassVerificationUnit(): MassVerificationUnit;\n\n    operation checkMassCompliance();\n  }\n\n  -- Define",
    "-- Define the System\nmodel TransportationSystem\n\n-- Define the Context\ncontext Context\n    create OverlandTransportationInfrastructure as Class\nendContext Context\n\n-- Define the System Packages\npackage Requirements\n    extend Context\nendPackage Requirements\n\npackage SystemComponents\n    extend Context\nendPackage SystemComponents\n\npackage FunctionalRequirements\n    extend Requirements\n\n    create Vehicle as Class\n        create Driver as Role\n        create Passenger as Role\n        create Seat as Part\n        create Door as Part\n        create Engine as Part\n        create SafetySystem as Part\n        create ComfortSystem as Part\n        create EnvironmentalIntegrationSystem as Part\n        create InfrastructureCompatibilitySystem as Part\n\n        create Enter as Action\n            create Preconditions: Vehicle.Driver -> true\n            create Postconditions: Vehicle.Driver -> true\n            create Preconditions: Vehicle.Passenger -> Vehicle.Door.isOpen\n            create Postconditions: Vehicle.Passenger -> Vehicle.Seat.isAvailable\n\n        create Exit as Action\n            create Preconditions: Vehicle.Driver -> true\n",
    "-- Define the System\nmodel TransportationSystem\n\n-- Define the Context\ncontext Context\n\n-- Define the Blocks\n\nblock Vehicle\n    extends Context\n\n    -- Define the Ports\n    port EntryPort\n        type Self\n        required\n\n    port ExitPort\n        type Self\n        required\n\n    port DriverPort\n        type Driver\n        required\n\n    port PassengerPort1..4\n        type Passenger\n        multiplicity (1..4)\n        required\n\n    -- Define the Internal Blocks\n    internal block Engine\n\n    internal block FuelTank\n        multiplicity (1)\n\n    -- Define the Relationships\n    relationship Drives\n        source Vehicle\n        target Driver\n\n    relationship Contains\n        source Vehicle\n        target Engine\n\n    relationship Contains\n        source Vehicle\n        target FuelTank\nendblock Vehicle\n\n-- Define the Actors\n\nactor Driver\n\nactor Passenger\n\n-- Define the Interactions\n\ninteraction EnterVehicle\n    participants Driver, Passenger, Vehicle\n    preconditions Driver -> Vehicle:",
    "-- Define the base types\ntype EngineType {\n    cylinderCount: Integer;\n    cylinderDiameter: DiameterType;\n}\n\ntype DiameterType {\n    small: Boolean;\n    large: Boolean;\n}\n\ntype TransmissionType {\n    manual: Boolean;\n    automatic: Boolean;\n}\n\n-- Define the main blocks\nblock Vehicle {\n    name: String;\n    engine: Engine;\n    transmission: Transmission;\n}\n\n-- Define the engine and transmission blocks\nblock Engine {\n    type: EngineType;\n}\n\nblock Transmission {\n    type: TransmissionType;\n}\n\n-- Define the constraints\nconstraint Engine_Cylinder_Diameter {\n    Engine.type.cylinderDiameter.small -> Engine.type.cylinderCount = 4\n    Engine.type.cylinderDiameter.large -> Engine.type.cylinderCount = 6\n}\n\nconstraint Transmission_Engine_Constraint {\n    Transmission.type.manual -> Engine.type.cylinderCount = 4\n",
    "-- Define the Engine Block\nmodel EngineModel\n\n-- Define the Cylinder Block\nblock Cylinder {\n    property diameter : Integer (min = 70, max = 100);\n}\n\n-- Define the Engine Variant Blocks\nblock FourCylinderEngine {\n    extension Engine {\n        -- Four cylinder engine configuration\n        extension Cylinder {\n            multiplicity (1..4);\n        }\n    }\n}\n\nblock SixCylinderEngine {\n    extension Engine {\n        -- Six cylinder engine configuration\n        extension Cylinder {\n            multiplicity (1..6);\n        }\n    }\n}\n\n-- Define the Engine Block\nblock Engine {\n    extension FourCylinderEngine;\n    extension SixCylinderEngine;\n\n    -- Engine properties\n    property cylinderCount : Integer (min = 4, max = 6);\n}\n```",
    "-- Define the AutomotiveDomain package\npackage AutomotiveDomain {\n\n  -- Define the Engine type with its properties\n  class Engine {\n    property name : String;\n    property numCylinders : Integer;\n    property cylinderDiameter : Integer;\n  }\n\n  -- Define the ManualTransmission type\n  class ManualTransmission {}\n\n  -- Define the AutomaticTransmission type\n  class AutomaticTransmission {}\n\n  -- Define the Vehicle type with its properties and associations\n  class Vehicle {\n    property engine : Engine;\n    property transmission : (ManualTransmission | AutomaticTransmission);\n\n    invariant engine_transmission {\n      self.engine.numCylinders = (self.engine.numCylinders = 4) implies self.transmission instanceof ManualTransmission;\n      self.engine.numCylinders = (self.engine.numCylinders = 6) implies self.transmission instanceof AutomaticTransmission;\n    }\n  }\n\n  -- Define the Engine types with their instances\n  Engine \"4-cy",
    "-- Define the System\nmodel MySystem\n\n-- Define the System Assembly\nSystem MySystem\n    Part MySystemAssembly {\n        name = 'MySystemAssembly';\n    }\n\n-- Define the Computer Subsystem\nBlock ComputerSubsystem {\n    name = 'ComputerSubsystem';\n\n    -- Define the Interface for Software Integration\n    Provided Interface SoftwareInterface {\n        name = 'SoftwareInterface';\n    }\n\n    -- Define the Internal Blocks\n    Block ComputerHardware {\n        name = 'ComputerHardware';\n    }\n\n    ComputerHardware -- Realization of ComputerSubsystem\n}\n\n-- Define the Storage Subsystem\nBlock StorageSubsystem {\n    name = 'StorageSubsystem';\n\n    -- Define the Interface for Data Compatibility\n    Required Interface DataInterface {\n        name = 'DataInterface';\n    }\n\n    -- Define the Internal Blocks\n    Block StorageHardware {\n        name = 'StorageHardware';\n    }\n\n    StorageHardware -- Realization of StorageSubsystem\n}\n\n-- Define the Software Design\nBlock SoftwareDesign {",
    "-- Define the System\nmodel PowertrainSystem\n\n-- Define the Logical Layer\npackage LogicalLayer\n    LogicalPowertrainSystem : System\n\n    -- Define Logical Components\n    Component TorqueGenerator {\n        provides Power() as PowerOutput : Power;\n        provides Torque() as TorqueOutput : Torque;\n    }\n\n    Component PowerProvider {\n        provides Power() as PowerOutput : Power;\n    }\nend_package\n\n-- Define the Physical Layer\npackage PhysicalLayer\n    System PowertrainSystem_Physical\n\n    -- Define Physical Components\n    Component PowerUnit {\n        extends PowerProvider;\n        provides Torque() as TorqueOutput : Torque;\n    }\n\n    Component Engine : PowerUnit {\n        -- Add any specific properties or relationships here\n    }\nend_package\n\n-- Define the Mapping Relationship\nPowertrainSystem.LogicalLayer.TorqueGenerator --> PowertrainSystem_Physical.PowerUnit : TorqueGenerator_PowerUnitMapping\n```",
    "-- Define the System Block\nmodel PowerTransmissionSystem\n\n-- Define the Logical Layer\nrequirement PowerTransmissionRequirement {\n    provided PowerTransmissionService {\n        capability PowerTransmissionCapability {\n            provided PowerTransmissionService_power\n            provided PowerTransmissionService_torque\n        }\n    }\n}\n\nBlock PowerTransmissionSystem_Logical {\n    name PowerTransmissionSystem\n    extends requirement PowerTransmissionRequirement\n\n    InternalBlock TorqueGenerator {\n        name TorqueGenerator\n        extends PowerTransmissionCapability {\n            provided PowerTransmissionService_power\n            provided PowerTransmissionService_torque\n        }\n    }\n}\n\n-- Define the Physical Layer\nBlock PowerTransmissionSystem_Physical {\n    name PowerTransmissionSystem\n\n    InternalBlock Powertrain {\n        name Powertrain\n        extends PowerTransmissionCapability {\n            provided PowerTransmissionService_power\n            provided PowerTransmissionService_torque\n\n            InternalBlock Engine {\n                name Engine\n                extends TorqueGenerator {\n                    allocatedPowerTransmissionService PowerTransmissionService",
    "-- Define the package for the vehicle feature annotation system\npackage VehicleFeatureAnnotationSystem {\n\n  -- Define the vehicle package\n  package Vehicle {\n\n    -- Define the vehicle class\n    class Vehicle {\n      feature safetyFeatures : Set(SafetyFeature);\n      feature securityFeatures : Set(SecurityFeature);\n    }\n\n    -- Define the safety feature class\n    class SafetyFeature {\n      feature name : String;\n      feature assembly : Assembly;\n      feature safetyFunction : String;\n    }\n\n    -- Define the security feature class\n    class SecurityFeature {\n      feature name : String;\n      feature assembly : Assembly;\n      feature securityFunction : String;\n    }\n\n    -- Define the interior assembly\n    assembly Interior {\n      feature name : String;\n      ownedElement seatBelts : SafetyFeature;\n      ownedElement frontSeats : SafetyFeature;\n      ownedElement driverAirbag : SafetyFeature;\n      ownedElement alarmSystem : SecurityFeature;\n    }\n\n    -- Define the body assembly\n    assembly Body {\n      feature name : String;\n      ownedElement bodyShell : Assembly;",
    "-- Define the System Block\nmodel VehicleSimulationSystem\n\n  -- Define the Vehicle Block\n  Block Vehicle {\n    -- Define the Vehicle's Properties\n    Property InitialVelocity : Real;\n    Property InitialPosition : Real;\n    Property Acceleration : Real;\n    Property TimeStep : Real;\n\n    -- Define the Vehicle's Internal Signals\n    Signal Velocity : Real;\n    Signal Position : Real;\n\n    -- Define the Vehicle's Internal Ports\n    Port input {\n      DataType InitialVelocity_d : Real;\n      DataType InitialPosition_d : Real;\n      DataType Acceleration_d : Real;\n      DataType TimeStep_d : Real;\n    }\n\n    Port output {\n      DataType Velocity_d : Real;\n      DataType Position_d : Real;\n    }\n\n    -- Define the Vehicle's Internal Blocks\n    Block VehicleModel {\n      -- Define the Vehicle's Internal Signals\n      Signal Velocity_internal : Real;\n      Signal Position_internal :",
    "-- Define packages\npackage SafetyFeatures {\n    -- Define safety-related components\n    class SeatBelt {\n        @Safety\n    }\n\n    class Bumper {\n        @Safety\n        isMandatory = true\n    }\n\n    class Wheel {\n        @Safety\n    }\n\n    class AntiLockBrakingSystem {\n        @Safety\n        isMandatory = false\n    }\n\n    class KeylessEntrySystem {\n        @Safety\n        isMandatory = false\n    }\n}\n\npackage MandatorySafetyFeatures {\n    extend SafetyFeatures::SeatBelt {\n        isMandatory = true\n    }\n\n    extend SafetyFeatures::Bumper {\n        isMandatory = true\n    }\n\n    extend SafetyFeatures::Wheel {\n        multiplicity (1..2)\n    }\n}\n\n-- Define the system\nmodel CarSafety {\n    -- Define the car\n    Package Car {\n        -- Define the car's body\n        Package Body {\n            Part bumper\n",
    "-- Define the vehicle system\nmodel VehicleSafetyComplianceSystem\n\n-- Define the vehicle package\npackage Vehicle\n{\n    -- Define the vehicle class\n    class Vehicle\n    {\n        -- Define the attributes\n        attribute int numberOfSeatBelts = 2;\n        attribute boolean driverAirbagPresent = false;\n        attribute boolean bumperPresent = true;\n        attribute boolean keylessEntrySystemPresent = false;\n        attribute int numberOfTires;\n        attribute boolean absPresent = false;\n\n        -- Define the mandatory safety features\n        feature SafetyFeature {\n            (mandatory: true)\n        }\n\n        -- Define the required seat belts\n        feature SeatBelt {\n            (subtypes: SafetyFeature,\n             (isPartOf: Vehicle))\n        }\n\n        -- Define the mandatory bumper\n        feature Bumper {\n            (subtypes: SafetyFeature,\n             (isPartOf: Vehicle))\n        }\n\n        -- Define the optional driver's airbag\n        feature DriverAirbag {\n            (subtypes: SafetyFeature,\n             (",
    "-- Define the main package\npackage RiskManagementSystem\n{\n    -- Define the Blocks\n    Block RiskManagementSystemBlock {\n        -- Define the internal blocks\n        Block RiskIdentification {\n            Block Situation {\n                Property probability : Real;\n            }\n            Block Cause {\n                Property probability : Real;\n            }\n            Association causalRelationship : Situation -- Cause;\n        }\n        Block Failure {\n            Block Situation {\n                Property severityLevel : Real;\n            }\n            Block FailureEffect {\n                -- Define the internal blocks\n                Block Impact {\n                    Property impactLevel : Real;\n                }\n                Association impactRelationship : Situation -- FailureEffect;\n            }\n            Association failureRelationship : Situation -- FailureEffect;\n        }\n        Association riskScenario : RiskIdentification -- Failure;\n    }\n}\n```",
    "-- Define the System\nmodel RiskMetadataModeling\n\n-- Define the Block \"System\"\nBlock System\n{\n    name : \"RiskMetadataModeling\";\n}\n\n-- Define the Block \"Scenario\"\nBlock Scenario\n{\n    name : \"Scenario\";\n    extension ScenarioExtension;\n}\n\n-- Define the Block \"Cause\"\nBlock Cause\n{\n    name : \"Cause\";\n    extension CauseExtension;\n}\n\n-- Define the Block \"Failure\"\nBlock Failure\n{\n    name : \"Failure\";\n    extension FailureExtension;\n}\n\n-- Define the Block \"ScenarioExtension\"\nBlock ScenarioExtension\n{\n    properties ScenarioProperties;\n}\n\n-- Define the Block \"CauseExtension\"\nBlock CauseExtension\n{\n    properties CauseProperties;\n}\n\n-- Define the Block \"FailureExtension\"\nBlock FailureExtension\n{\n    properties FailureProperties;\n}\n\n-- Define the properties for \"ScenarioExtension\"\nproperty ScenarioProperties\n{\n    scenarioID : String;\n    description : String;\n   ",
    "-- Define the system\nmodel EquipmentMonitoringSystem\n\n-- Define the context\ncontext Context\ncreate\n    Battery: Block \"Battery\"\n    Equipment: Block \"Equipment\"\n    System: Block \"EquipmentMonitoringSystem\"\nendContext Context\n\n-- Define the relationships\nEquipment -- \"has\" --> Battery\nSystem -- \"consistsOf\" --> Equipment\n\n-- Define the properties\nproperty BatteryLevel_min: real \"Minimum Battery Level\"\nproperty BatteryAging_probability: real \"Probability of Battery Aging\"\nproperty SeverityLevel: real \"Severity Level\"\n\n-- Define the blocks\nBlock Equipment {\n    property State: String \"State\"\n}\n\nBlock Battery {\n    property Level: real \"Battery Level\"\n}\n\n-- Define the behavior\nBehavior EquipmentBehavior {\n    operation detectLowBatteryLevel() {\n        if (Battery.Level < BatteryLevel_min) then {\n            Equipment.State = \"low battery\"\n            analyzeSituation()\n        }\n    }\n\n    operation analyzeSitu",
    "-- Define the top-level system\nmodel MySystem\n\n-- Define the top-level system block\nblock MySystem {\n    -- Define the top-level system's interfaces\n    provide Interface1 : Interface1;\n    provide Interface2 : Interface2;\n\n    -- Define the top-level system's subsystems\n    subsystem Subsystem1 {\n        -- Define Subsystem1's interfaces\n        require Interface3 : Interface3;\n        provide Interface4 : Interface4;\n\n        -- Define Subsystem1's components\n        component Component1 {\n            -- Define Component1's interfaces\n            provide Interface5 : Interface5;\n            require Interface6 : Interface6;\n        }\n\n        component Component2 {\n            -- Define Component2's interfaces\n            provide Interface7 : Interface7;\n            require Interface8 : Interface8;\n        }\n    }\n\n    subsystem Subsystem2 {\n        -- Define Subsystem2's interfaces\n        require Interface9 : Interface9;\n        provide Inter",
    "-- Define the root system block\nmodel AutomotiveSystemArchitecture\nextends Block {\n    -- Define the root component\n    Component rootComponent;\n\n    -- Define the safety attribute for safety components\n    attribute boolean safety;\n\n    -- Define the subsystems and components\n    Subsystem engineSubsystem;\n    Subsystem brakeSubsystem;\n    Subsystem steeringSubsystem;\n\n    Component engineComponent;\n    Component crankshaftComponent;\n    Component cylinderComponent;\n    Component fuelInjectionComponent;\n    Component exhaustComponent;\n\n    Component seatBeltComponent;\n    Component bumperComponent;\n    Component driverAirbagComponent optional;\n    Component absComponent optional;\n\n    -- Define the relationships between the components\n    engineComponent --realizes--> engineSubsystem;\n    crankshaftComponent --realizes--> engineSubsystem;\n    cylinderComponent --realizes--> engineSubsystem;\n    fuelInjectionComponent --realizes--> engineSubsystem;\n    exhaustComponent --realizes--> engineSubsystem;\n\n    seatBeltComponent --realizes--> rootComponent;\n    bumper",
    "-- Define the alias for 'Car'\nmodel AutomotiveDomain\n\nalias Car = Automobile;\n\n-- Define the Automobile (Car)\npackage Automobile {\n    -- Define the Automobile (Car) as a Core Component\n    CoreComponent Automobile {\n        -- Define the name and description\n        name : \"汽车 (Car)\";\n        description : \"Represents a car in the automotive domain.\";\n\n        -- Define the attributes\n        Real torque;\n        description : \"The rotational force produced by the engine.\";\n    }\n\n    -- Define the explanatory comment\n    comment \"This package contains the definitions and annotations for fundamental concepts and elements in the automotive domain.\";\n}\n```",
    "-- Define the AutomotiveDomain package\npackage AutomotiveDomain {\n\n    -- Define the Automobile and Car stereotypes\n    stereotype Automobile {\n        property name : String;\n        property documentation : Document;\n    }\n\n    stereotype Car {\n        alias name : String;\n    }\n\n    -- Define the Automobile and Document classes\n    class Automobile {\n        property name : String;\n        property documentation : Document;\n    }\n\n    class Document {\n        property content : String;\n    }\n\n    -- Define the TorqueValue and PhysicalQuantity classes\n    class TorqueValue {\n        stereotype PhysicalQuantity;\n        property value : Real;\n        property unit : String;\n    }\n\n    -- Define the Automobile_Document association\n    association Automobile_Document {\n        end Automobile : Automobile;\n        end Document : Document;\n    }\n\n    -- Define the Car_Automobile alias association\n    alias Car \"Automobile\";\n\n    -- Define the TorqueValue_Automobile association\n    association TorqueValue_Automobile {\n        end Automobile",
    "-- Define the Automobile Package\npackage Automobile {\n  -- Define the Automobile Class\n  class Automobile {\n    -- Define the Car alias\n    alias Car::Automobile;\n\n    -- Define the TorqueValue property\n    property TorqueValue : Real;\n\n    -- Define the Torque alias for TorqueValue\n    alias Torque::TorqueValue;\n  }\n\n  -- Define the Import Package for Physical Quantities\n  import \"PhysicalQuantities:PhysicalQuantities.sysml\" as PQ;\n\n  -- Extend the Automobile Class with the PQ:Quantity\n  extend Automobile {\n    -- Define the TorqueValue as a Quantity with the unit \"Nm\"\n    TorqueValue : PQ::Quantity {\n      unit : PQ::Unit { name := \"Nm\"; };\n    };\n  }\n}\n```",
    "-- Define the Vehicle Package\npackage Vehicle {\n    -- Define the Vehicle Class\n    class Vehicle {\n        property name : String;\n    }\n\n    -- Define the Engine Class\n    class Engine {\n        property numberOfCylinders : Integer;\n\n        -- Define the Cylinder Compartment\n        compartment Cylinders {\n            -- Define the Cylinder Class\n            class Cylinder {\n                -- No properties\n            }\n\n            -- Constraint for the number of cylinders\n            constraint EngineConstraint {\n                self.numberOfCylinders in (4..6)\n            }\n        }\n\n        -- Define the Vehicle association\n        association VehicleEngine {\n            end1 : Vehicle;\n            end2 : Engine;\n        }\n    }\n\n    -- Define the SmallVehicle and LargeVehicle classes\n    class SmallVehicle < Vehicle {\n    }\n\n    class LargeVehicle < Vehicle {\n    }\n\n    -- Constraint for the number of cylinders based on vehicle size\n    constraint VehicleC",
    "-- Define the System Block\nmodel FuelManagementSystem\n\n-- Define the Blocks\nBlock FuelTank {\n    Property temperature : Real\n}\n\nBlock Engine {\n\n}\n\n-- Define the Interfaces\nInterface FuelInterface {\n    Port fuelIn : Input FuelFlow\n    Port fuelOut : Output FuelFlow\n}\n\n-- Define the Connections\nConnection FuelTank_to_Engine {\n    Source FuelTank\n    Target Engine\n    Interface FuelInterface\n}\n\n-- Define the FuelFlow\nClass FuelFlow {\n\n}\n\n-- Define the System Context\nContext FuelManagementSystemContext {\n    System FuelManagementSystem\n    Block FuelTank\n    Block Engine\n    Connection FuelTank_to_Engine\n}\n```",
    "-- Define the Vehicle Package\npackage vehicle {\n    -- Define the Vehicle Class\n    class Vehicle {\n        -- Define the Vehicle Attribute\n        attribute mass : Real;\n\n        -- Define the AxleAssembly Relationship\n        relationship AxleAssembly {\n            end1 : Vehicle;\n            end2 : AxleAssembly;\n        }\n    }\n\n    -- Define the AxleAssembly Package\n    package AxleAssembly {\n        -- Define the AxleAssembly Class\n        class AxleAssembly {\n            -- Define the Axle Relationship\n            relationship Axle {\n                end1 : AxleAssembly;\n                end2 : Axle;\n            }\n\n            -- Define the LeftWheel and RightWheel Relationships\n            relationship LeftWheel {\n                end1 : AxleAssembly;\n                end2 : Wheel;\n                name : String;\n            }\n\n            relationship RightWheel {\n                end1 : AxleAssembly;\n                end2 : Wheel;\n                name : String;\n            }\n\n            -- Define the Optional FrontAx"
]