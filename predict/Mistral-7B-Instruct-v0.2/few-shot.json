[
    "package 'Vehicle' {\n\tattribute def VehicleMass;\n\tattribute def VehicleStatus;\n\tport def VehicleStatusPort {\n\t\tout vehicleStatus: VehicleStatus;\n\t}\n\tport def EnginePort {\n\t\tout engine: Engine;\n\t}\n\tport def DriverPort {\n\t\tout driver: Personnel;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport VehicleStatusPort: VehicleStatusPort;\n\t\t\tport EnginePort: EnginePort;\n\t\t\tport DriverPort: DriverPort;\n\t\t\tperform vehicleManagement.manageVehicle {\n\t\t\t\tout vehicleStatus = VehicleStatusPort.vehicleStatus;\n\t\t\t\tout engine = EnginePort.engine;\n\t\t\t\tout driver = DriverPort.driver;\n\t\t\t}\n\t\t}\n\t\tinterface vehicleToEngine connect vehicle.EnginePort to engine.EnginePort {\n\t\t\tref flow engineFlow from source.engine to target.engine;\n\t\t}",
    "package 'VehicleModel' {\n\ttype Personnel {\n\t\tattribute def Name;\n\t}\n\ttype Engine {\n\t\tattribute def Power;\n\t}\n\ttype ManuallyOperatedVehicle {\n\t\tattribute def VehicleType;\n\t\tpart context {\n\t\t\tpart driver {\n\t\t\t\ttype Personnel;\n\t\t\t\tport driverPort: ~PersonnelPort;\n\t\t\t}\n\t\t\tpart vehicle {\n\t\t\t\ttype ManuallyOperatedVehicle;\n\t\t\t\tport vehiclePort: ~VehiclePort;\n\t\t\t}\n\t\t\tpart engine {\n\t\t\t\ttype Engine;\n\t\t\t\tport enginePort: ~EnginePort;\n\t\t\t}\n\t\t\tinterface driverToVehicle connect driver.driverPort to vehicle.vehiclePort {\n\t\t\t\tref flow driverFlow from driver.Name to vehicle.",
    "package 'VehicleStructure' {\n\tabstract class 'VehicleComponent' {\n\t\tattribute def Name;\n\t\tattribute def Quantity;\n\t}\n\tclass 'Engine' extends VehicleComponent {\n\t\tattribute def Horsepower;\n\t}\n\tclass 'Transmission' extends VehicleComponent {\n\t\tattribute def GearRatio;\n\t}\n\tclass 'Wheel' extends VehicleComponent {\n\t\tattribute def Size;\n\t}\n\tclass 'Vehicle' {\n\t\tattribute def VehicleName;\n\t\tpart engine : Engine {\n\t\t\tquantity 1;\n\t\t}\n\t\tpart transmission : Transmission {\n\t\t\tquantity 1;\n\t\t}\n\t\tpart wheels : Set[Wheel] {\n\t\t\tquantity 4;\n\t\t}\n\t\toperation createVehicle {\n\t\t\tcreate engine;\n\t\t\tcreate transmission;\n",
    "package 'Vehicle' {\n\tenum VehicleType { Small, Large }\n\tattribute def EngineType;\n\tattribute def NumCylinders;\n\tport def EnginePort {\n\t\tout engineType : EngineType;\n\t\tout numCylinders : NumCylinders;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport enginePort: EnginePort;\n\t\t\tperform defineVehicleType {\n\t\t\t\tout engineType = enginePort.engineType;\n\t\t\t\tout numCylinders = enginePort.numCylinders;\n\t\t\t}\n\t\t}\n\t\tinterface vehicleToEngine connect vehicle.enginePort to engine.enginePort {\n\t\t\tref flow engineFlow from source.enginePort to target.enginePort;\n\t\t}\n\t\tpart engine {",
    "package 'TrafficSignalSystem' {\n\tenum Color { Green, Yellow, Red }\n\ttype TrafficLight {\n\t\tattribute def color: Color;\n\t}\n\ttype GreenLight {\n\t\textends TrafficLight;\n\t\tattribute def isGo: Boolean := true;\n\t}\n\tport def TrafficLightPort {\n\t\tout color: Color;\n\t}\n\tport def GoPort {\n\t\tout isGo: Boolean;\n\t}\n\tpart context {\n\t\tpart trafficLight {\n\t\t\tport TrafficLightPort: TrafficLightPort;\n\t\t\tperform trafficLight.setColor {\n\t\t\t\tout color = TrafficLightPort.color;\n\t\t\t}\n\t\t}\n\t\tpart greenLight {\n\t\t\tport TrafficLightPort: ~TrafficLightPort;\n\t\t\tport GoPort: GoPort;\n\t\t\tperform trafficLight.setColor {\n\t\t\t\tout color = Green;\n\t\t\t}\n\t\t\tperform go.setIsGo {\n\t\t\t\tout isGo = GoPort.is",
    "package 'InformationClassification' {\n\tattribute def Code;\n\tattribute def Color;\n\tattribute def Grade;\n\tattribute def Points;\n\ttype Level {\n\t\tUnclassified {\n\t\t\tCode: 'uncl';\n\t\t\tColor: 'green';\n\t\t}\n\t\tConfidential {\n\t\t\tCode: 'conf';\n\t\t\tColor: 'yellow';\n\t\t}\n\t\tSecret {\n\t\t\tCode: 'secr';\n\t\t\tColor: 'red';\n\t\t}\n\t}\n\ttype GradeLevel {\n\t\tA {\n\t\t\tPoints",
    "package 'VehicleSystem' {\n\tenum EngineType { Small, Large }\n\tattribute def NumCylinders;\n\ttype Engine {\n\t\tattribute NumCylinders: int;\n\t\tpart cylinders {\n\t\t\ttype Cylinder;\n\t\t\tmultiplicity (1..NumCylinders);\n\t\t}\n\t}\n\ttype Vehicle {\n\t\tattribute def VehicleType: EngineType;\n\t\tpart engine: Engine;\n\t}\n\ttype SmallVehicle extends Vehicle {\n\t\tattribute def NumCylinders: 4;\n\t}\n\ttype LargeVehicle extends Vehicle {\n\t\tattribute def NumCylinders: 6;\n\t}\n}",
    "package 'VehicleModel' {\n\tattribute def FuelCapacity;\n\tattribute def MaxSpeed;\n\tattribute def Weight;\n\tattribute def FuelType;\n\ttype Driver {\n\t\tattribute def Name;\n\t\tattribute def Age;\n\t}\n\ttype FuelTank {\n\t\tattribute def FuelLevel;\n\t\tattribute def FuelCapacity;\n\t\ttype Fuel {\n\t\t\tattribute def Name;\n\t\t}\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tattribute FuelCapacity, MaxSpeed, Weight;\n\t\t\ttype driver: Driver;\n\t\t\tpart fuelTank {\n\t\t\t\ttype fuel: Fuel;\n\t\t\t\tattribute FuelLevel;\n\t\t\t}\n\t\t}\n\t\tpart fuel {\n\t\t\ttype Fuel;\n\t\t}\n\t\tpart personnel {\n\t\t\ttype Driver;\n\t\t}\n\t}\n\trelation Vehicle_has_Driver {\n\t\tsource vehicle;\n\t\ttarget",
    "package 'AutomobileWheelAssembly' {\n\ttype WheelBearingUnit {\n\t\tproperty bearingType: String;\n\t}\n\ttype Tire {\n\t\tproperty tireSize: String;\n\t\tproperty tirePressure: Real;\n\t}\n\ttype Bead {\n\t\tproperty beadType: String;\n\t}\n\ttype Hub {\n\t\tproperty hubType: String;\n\t\tproperty mountingHoles: Set(MountingHole);\n\t}\n\ttype Rim {\n\t\tproperty rimType: String;\n\t}\n\ttype BoltMountingHole {\n\t\tproperty holeType: String;\n\t}\n\ttype ThreadedHole {\n\t\tproperty holeType: String;\n\t}\n\ttype Bolt {\n\t",
    "package 'FuelManagement' {\n\tattribute def Temperature;\n\tattribute def FuelLevel;\n\tport def FuelPort {\n\t\tin fuel: FuelLevel;\n\t\tout fuelFlow: FuelLevel;\n\t\tin temperature: Temperature;\n\t\tout temperatureInfo: Temperature;\n\t}\n\tport def EnginePort {\n\t\tin engineFuel: FuelLevel;\n\t\tout engineReturnFlow: FuelLevel;\n\t\tin engineTemperature: Temperature;\n\t\tout engineTemperatureInfo: Temperature;\n\t}\n\tpart context {\n\t\tpart fuelTankAssembly {\n\t\t\tport fuelPort: FuelPort;\n\t\t\tport enginePort: EnginePort;\n\t\t\tperform fuelTransfer.receiveFuel {\n\t\t\t\tin fuel = fuelPort.fuel;\n\t\t\t\tout engineFuel = enginePort.engineF",
    "package 'Vehicle' {\n\tattribute def Mass;\n\ttype Axle {\n\t\tattribute def Mass;\n\t\tattribute def SteeringAngle;\n\t\tport def TirePort {\n\t\t\tout tire: Tire;\n\t\t}\n\t\tpart tire1, tire2 {\n\t\t\ttype Tire;\n\t\t\tport tirePort: TirePort;\n\t\t}\n\t}\n\ttype Tire {\n\t\tattribute def Mass;\n\t}\n\tpart Vehicle {\n",
    "package 'CouplingSystem' {\n\tattribute def VehicleWeight;\n\tattribute def TrailerWeight;\n\tport def VehiclePort {\n\t\tin vehicleWeight: VehicleWeight;\n\t}\n\tport def TrailerPort {\n\t\tin trailerWeight: TrailerWeight;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport vehiclePort: VehiclePort;\n\t\t\tpart hitch {\n\t\t\t\tport ballRefPort: BallPort;\n\t\t\t\tperform connectToTrailer {\n\t\t\t\t\tin ballRef = ballRefPort.ballRef;\n\t\t\t\t\tout connected: Boolean",
    "package 'VehiclePowerTransmission' {\n\tattribute def EnginePower;\n\tattribute def TransmissionPower;\n\tattribute def ClutchPower;\n\tattribute def DriveshaftPower;\n\tattribute def RearAxlePower;\n",
    "package 'IntegratedManagementSystem' {\n\tpackage 'Decomposition1' {\n\t\tpackage 'SubsystemB11' {\n\t\t\tpart componentC1 {\n\t\t\t\t",
    "package 'AutomotivePowertrain' {\n\tattribute def FuelCommand;\n\tattribute def EngineTorque;\n\tattribute def TransmissionTorque;\n\tattribute def DriveshaftTorque;\n\tattribute def LeftWheelTorque;\n\tattribute def RightWheelTorque;\n\tport def FuelCommandPort {\n\t\tin fuelCommand: FuelCommand;\n\t}\n\tport def EngineTorquePort {\n\t\tout engineTorque: EngineTorque;\n\t}\n\tport def TransmissionTorquePort {\n\t\tin transmissionTorque: TransmissionTorque;\n\t}\n\tport def DriveshaftTorquePort {\n\t\tout driveshaftTorque: DriveshaftTorque;\n",
    "package 'AutomotivePowertrain' {\n\tattribute def FuelCmd;\n\tattribute def EngineStatus;\n\tattribute def Torque;\n\tattribute def WheelTorque;\n\tport def FuelCmdPort {\n\t\tin fuelCmd : FuelCmd;\n\t}\n\tport def EngineStatusPort {\n\t\tout engineStatus : EngineStatus;\n\t}\n\tport def TorquePort {\n\t\tin torque : Torque;\n\t\tout wheelTorque : WheelTorque;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport fuelCmdPort: FuelCmdPort;\n\t\t\tperform powertrainControl.receiveFuelCmd {\n\t\t\t\tin fuelCmd = fuelCmdPort.fuelCmd;\n\t\t\t}\n\t\t}\n\t\t",
    "package 'Powertrain' {\n\tattribute def FuelCmd;\n\tattribute def EngineTorque;\n\tattribute def TransmissionTorque;\n\tattribute def WheelTorque;\n\tport def FuelCmdPort {\n\t\tin fuelCmd : FuelCmd;\n\t}\n\tport def EngineTorquePort {\n\t\tout engineTorque : EngineTorque;\n\t}\n\tport def TransmissionTorquePort {\n\t\tout transmissionTorque : TransmissionTorque;\n\t}\n\tport def WheelTorquePort {\n\t\tout wheelTorque : WheelTorque;\n\t}\n\tpart context {\n\t\tpart driver {\n\t\t\tport fuelCmdPort: FuelCmdPort;\n\t\t\tperform powertrainControl.receiveFuelCmd {\n\t\t\t\tin fuelCmd = fuelCmdPort.fuelCmd",
    "package 'PowerConnection' {\n\tattribute def Connected;\n\tattribute def VehicleFrame;\n\tattribute def TrailerFrame;\n\tport def VehiclePort {\n\t\tin connected: Connected;\n\t\tin vehicleFrame: VehicleFrame;\n\t\tout power: Power;\n\t}\n\tport def TrailerPort {\n\t\tin connected: Connected;\n\t\tin trailerFrame: TrailerFrame;\n\t\tin power: Power;\n\t\tout powerOut: Power;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport vehiclePort: VehiclePort;\n\t\t\tperform powerConnection.connect {\n\t\t\t\tin connected = vehiclePort.connected;\n\t\t\t\tin vehicleFrame = vehiclePort.vehicleFrame;\n\t\t\t\tout power = powerOutPort.power;\n\t\t\t}\n\t\t\tpart hitchBall {\n\t\t\t\tperform",
    "package 'VehicleTrailerConnection' {\n\tattribute def ConnectionStatus;\n\tport def VehiclePort {\n\t\tin connectionStatus: ConnectionStatus;\n\t}\n\tport def TrailerPort {\n\t\tin connectionStatus: ConnectionStatus;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport chassisPort: ~Port;\n\t\t\tport towBallPort: ~Port;\n\t\t\tpart chassis {\n\t\t\t\tport chassisPort: chassisPort;\n\t\t\t\tpart towBall {\n\t\t\t\t\tport towBallPort: towBallPort;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart user {\n\t\t\t\tport vehiclePort",
    "package 'VehicleTrailerConnection' {\n\tattribute def TowBallHeight;\n\tattribute def CouplerEngagement;\n\tport def VehiclePort {\n\t\tin towBallHeight: TowBallHeight;\n\t\tout connectionStatus: Boolean;\n\t}\n\tport def TrailerPort {\n\t\tin couplerEngagement: CouplerEngagement;\n\t\tout connectionStatus: Boolean;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport towBallHeightPort: VehiclePort;\n\t\t\tpart chassis {\n\t\t\t\tport towBallPort: ~VehiclePort;\n\t\t\t\tperform connectTrailer.receiveTowBall {\n\t\t\t\t\tin towBallHeight = towBallHeightPort.towBallHeight;\n\t\t\t",
    "package 'FuelSystem' {\n\tattribute def Temperature;\n\tport def FuelSupplyPort {\n\t\tin fuel: Fuel;\n\t\tout temperature: Temperature;\n\t}\n\tport def FuelReturnPort {\n\t\tin fuel: Fuel;\n\t\tout temperature: Temperature;\n\t}\n\tpart context {\n\t\tpart fuelTank {\n\t\t\tport fuelSupplyPort: FuelSupplyPort;\n\t\t\tport fuelReturnPort: FuelReturnPort;\n\t\t\tperform fuelCirculation.receiveFuel {\n\t\t\t\tin fuel = fuelSupplyPort.fuel;\n\t\t\t\tout temperature = fuelSupplyPort.temperature;\n\t\t\t}\n\t\t\tperform fuelCirculation.sendFuel {\n\t\t\t\tin fuel = fuelReturnPort.f",
    "package 'FuelDeliverySystem' {\n\tattribute def FuelCapacity;\n\tattribute def FuelLevel;\n\tport def StorageTankPort {\n\t\tin fuel: Fuel;\n\t\tout fuelFlow: FuelFlow;\n\t}\n\tport def FuelPumpPort {\n\t\tin fuelFlow: FuelFlow;\n\t\tout fuelFlow: FuelFlow;\n\t}\n\tport def VehicleFuelTankPort {\n\t\tin fuelFlow: FuelFlow;\n\t\tout fuelLevel: FuelLevel;\n\t}\n\tpart context {\n\t\tpart storageTank {\n\t\t\tport StorageTankPort: StorageTankPort;\n\t\t\tperform fuelDelivery.",
    "package 'AutomobileAssembly' {\n\ttype Gearbox {\n\t\tattribute def GearboxID;\n\t}\n\ttype Engine {\n\t\tattribute def EngineID;\n\t}\n\ttype VehicleAssembly {\n\t\tattribute def VehicleID;\n\t\tattribute def Gearbox: Gearbox;\n\t\tattribute def Engine: Engine;\n\t}\n\ttype AssemblyStep {\n\t\tattribute def StepID;\n\t\tport def InputPort {\n\t\t\tin input: VehicleAssembly;\n\t\t}\n\t\tport def OutputPort {\n\t\t\tout output: VehicleAssembly;\n\t\t}\n\t}\n\tpart context {\n\t\tpart",
    "package 'VehicleControl' {\n\tattribute def VehicleState;\n\tattribute def Temperature;\n\tport def ControllerPort {\n\t\tin startSignal: Boolean;\n\t\tin",
    "package 'VehicleSystem' {\n\tattribute def FuelLevel;\n\tattribute def MaintenanceInterval;\n\tattribute def TemperatureThreshold;\n\tport def VehicleControllerPort {\n\t\tin startSignal: Boolean;\n\t\tin brakePedal: Boolean;\n\t\tout warningSignal: Boolean;\n\t\tout status: VehicleStatus;\n\t\tout fuelLevel: FuelLevel;\n\t\tout maintenanceInterval: MaintenanceInterval;\n\t\tout temperatureThreshold: TemperatureThreshold;\n\t}\n",
    "package 'VehicleSimulation' {\n\tattribute def Mass;\n\tattribute def Position;\n\tattribute def Velocity;\n\tattribute def Acceleration;\n\tattribute def RoadSlope;\n\tattribute def SurfaceFriction;\n\tport def InputPort {\n\t\tin mass: Mass;\n\t\tin position: Position;\n\t\tin velocity: Velocity;\n\t\tin acceleration: Acceleration;\n\t\tin roadSlope: RoadSlope;\n\t\tin surfaceFriction: SurfaceFriction;\n\t}\n\tport def OutputPort {\n\t\tout state: State;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport inputPort: InputPort;\n\t\t\tperform simulation.calculateState {\n\t\t\t\tin mass = inputPort.mass;\n",
    "package 'AutomotiveConfigurationManagement' {\n\ttype ConfigurationOption {\n\t\tproperty optionName: String;\n\t\tproperty components: Set(Component);\n\t}",
    "package 'VehiclePlatform' {\n\ttype Component {\n\t\tattribute def name: String;\n\t\tattribute def port1: Port;\n\t\tattribute def port2: Port;\n\t\tattribute def behavioralVariants: Set(Behavior);\n\t}\n\ttype Subsystem {\n\t\tattribute def name: String;\n\t\tattribute def internalComponents: Set(Component);\n\t\t",
    "package 'VehicleConfiguration' {\n\tattribute def PerformanceLevel;\n\tattribute def EngineType;\n\tattribute def TransmissionType;\n\tattribute def WheelType;\n\tport def UserInputPort {\n\t\tin performanceLevel: PerformanceLevel;\n\t}\n\tport def EnginePort {\n\t\tin engineType: EngineType;\n\t}\n\tport def TransmissionPort {\n\t\tin transmissionType: TransmissionType;\n\t}\n\tport def WheelPort {\n\t\tin wheelType: WheelType;\n\t}\n\tport def VehicleModelPort {\n\t\tin vehicleModel: String;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t",
    "package 'AutomobileSystem' {\n\tattribute def VehicleMass;\n\tattribute def FuelStatus;\n\tattribute def EngineTorque;\n\tattribute def TransmissionDriveInterface;\n\tattribute def VehicleReliability;\n\ttype VehicleType {\n\t\tVehicle2000kg, Vehicle2500kg;\n\t}\n\ttype Engine",
    "package 'VehicleMassCompliance' {\n\tattribute def MaxPermissibleMass;\n\tport def VehiclePort {\n\t\tin mass: Real;\n\t}\n\tport def ResultPort {\n\t\tout result: Boolean;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport massPort: VehiclePort;\n\t\t\tperform measureMass.sendMass {\n\t\t\t\tin mass = massPort.mass;\n\t\t\t}\n\t\t}\n\t\tpart testOperator {\n\t\t\tport resultPort: ResultPort;\n\t\t\tperform compareMasses.compare {\n\t\t\t\tin mass = vehicle.massPort.mass;\n\t\t\t\tin MaxPermissibleMass = 2500.0;\n\t\t\t\tout result = resultPort",
    "package 'WaterSupplyNetwork' {\n\tattribute def Temperature;\n\tport def SpigotBankPort {\n\t\tin hotWater: Temperature;\n\t\tin coldWater: Temperature;\n\t\tout hotWaterOutlet: Temperature;\n\t\tout coldWaterOutlet: Temperature;\n\t}\n\tport def SpigotPort {\n\t\tin hotWaterInlet: Temperature;\n\t\tin coldWaterInlet: Temperature;\n\t\tout hotWaterOutlet: Temperature;\n\t\tout coldWaterOutlet: Temperature;\n\t}\n\tport def FaucetPort {\n\t\tin hotWaterInlet: Temperature;\n\t\tin coldWaterInlet: Temperature;\n\t\tout hotWaterOutlet: Temperature",
    "package 'VehicleQualityAnalysis' {\n\tattribute def TotalMass;\n\ttype ComponentType { Engine, Transmission, FrontAxleAssembly, RearAxleAssembly }\n\ttype AnalysisObjective { FuelEfficiency, Emissions, Safety, Durability }\n\ttype AnalysisUseCase { RegressionAnalysis, FailureModeAndEffectsAnalysis, DesignOfExperiments }\n\ttype AnalysisTask {\n\t\tname: String;\n\t\tcomponent: ComponentType;\n\t\tobjective: AnalysisObjective;\n\t\tuseCase: AnalysisUseCase;\n\t}\n\ttype AnalysisPlan {\n\t\tname: String;\n\t\ttasks: AnalysisTask[];\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tperform inputComponentData {\n\t\t\t\tin componentType: ComponentType;\n\t\t\t\tin qualityData: Real;",
    "package 'VehiclePowertrain' {\n\tattribute def EngineType;\n\tattribute def Power;\n\tattribute def Mass;\n\tattribute def Efficiency;\n\tattribute def Reliability;\n\tattribute def Cost;\n\tport def EngineTypePort {\n\t\tin engineType: EngineType;\n\t}\n\tport def PowerPort {\n\t\tout power: Power;\n\t}\n\tport def MassPort {\n\t\tout mass: Mass;\n\t}\n\tport def EfficiencyPort {\n\t\tout efficiency: Efficiency;\n\t}\n\tport def ReliabilityPort {\n\t\tout reli",
    "package 'FuelEconomySystem' {\n\tattribute def UrbanFuelEconomy;\n\tattribute def HighwayFuelEconomy;\n\tattribute def Load;\n\tattribute def VehiclePowertrain;\n\tport def InputPort {\n\t\tin load: Load;\n\t\tin powertrain: VehiclePowertrain;\n\t}\n\tport def OutputPort {\n\t\tout urbanFuelEconomy: UrbanFuelEconomy;\n\t\tout highwayFuelEconomy: HighwayFuelEconomy;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport inputPort: InputPort;\n\t\t\tperform fuelEconomyAnalysis.calculateFuelEconomy {",
    "package 'VehicleSimulation' {\n\tattribute def Mass;\n\tattribute def InitialPosition;\n\tattribute def InitialVelocity;\n\tattribute def TimeStep;\n\tattribute def PowerData;\n\tport def InputPort {\n\t\tin Mass: Real;\n\t\tin InitialPosition: Real;\n\t\tin InitialVelocity: Real;\n\t\tin PowerData: Sequence<Real>;\n\t}\n\tport def OutputPort {\n\t\tout Acceleration: RealSequence;\n\t\tout VelocityVariation: RealSequence;\n\t\tout Displacement: RealSequence;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport InputPort: InputPort;\n\t\t\tperform simulation.runSimulation {\n\t\t\t\tin Mass = InputPort.Mass;\n\t\t\t\tin InitialPosition = InputPort.InitialPosition;\n\t\t\t\t",
    "package 'Vehicle' {\n\tattribute def TotalMass: 2500.0;\n\tpart frontAxleAssembly {\n\t\tattribute def Mass: 150.0;\n\t\tpart frontAxle {\n\t\t\tattribute def Mass: 150.0;\n\t\t\tpart frontWheel1;\n\t\t\tpart frontWheel2;\n\t\t}\n\t\tpart frontWheel1;\n\t\tpart frontWheel2;\n\t}\n\tpart rearAxleAssembly {\n\t\tattribute def Mass: 250.0;\n\t\tpart rearAxle {\n\t\t\tattribute def Mass: 250.0;\n\t\t\tpart rear",
    "package 'VehicleManagementSystem' {\n\tattribute def Vehicle;\n\tattribute def MandatorySafetyFeatures;\n\tattribute def OptionalSafetyFeatures;\n\tattribute def SecurityFeatures;\n\tport def VehiclePort {\n\t\tout vehicle: Vehicle;\n\t}\n\tport def MandatorySafetyFeaturesPort {\n\t\tout mandatorySafetyFeatures: MandatorySafetyFeatures;\n\t}\n\tport def OptionalSafetyFeaturesPort {\n\t\tout optionalSafetyFeatures: OptionalSafetyFeatures;\n\t}\n\tport def SecurityFeaturesPort {\n\t\tout securityFeatures: SecurityFeatures;\n",
    "package 'System' {\n\tattribute def X;\n\tattribute def Y;\n\tattribute def Z;\n\tpackage ApplicationLayer {\n\t\tport ApplicationPort {\n\t\t\tin x: X;\n\t\t\tin y: Y;\n\t\t\tout z: Z;\n\t\t}\n\t\tpart ApplicationComponent {\n\t\t\tport ApplicationPort;\n\t\t\tperform ApplicationComponent.getZ {\n\t\t\t\tin x = ApplicationPort.x;\n\t\t\t\tin y = ApplicationPort.y;\n\t\t\t\tout z = Z;\n\t\t\t}\n\t\t}\n\t}\n\tpackage ServiceLayer {\n\t\tport ServicePort {\n\t\t\tin x: X;\n\t\t\tin y: Y;\n\t\t\tout z: Z;\n\t\t}\n\t\tpart ServiceComponent {\n\t\t\tport ServicePort;\n\t\t\tperform ServiceComponent.getZ {\n\t\t\t\tin x = ServicePort.x;\n\t\t\t\tin y = ServicePort.y;",
    "package 'Powertrain' {\n\tattribute def Torque;\n\tport def TorqueCmdPort {\n\t\tin cmd: Real;\n\t}\n\tport def TorqueOutputPort {\n\t\tout torque: Torque;\n\t}\n\tpart context {\n\t\tpart logic {\n\t\t\tport cmdPort: TorqueCmdPort;\n\t\t\tperform generateTorque.mapCmdToTorque {\n\t\t\t\tin cmd = cmdPort.cmd;\n\t\t\t\tout torque = torqueOutputPort.torque;\n\t\t\t}\n\t\t}\n\t\tpart physical {\n\t\t\tport torqueInputPort: ~TorqueCmdPort;\n\t\t\tperform generateTorque.generate {\n\t\t\t\tin torque = torqueInputPort.torque;\n\t\t\t\tpre torque > 0.0;\n\t\t\t}\n\t\t\tpart engine {\n\t\t\t\tport torqueInputPort: TorqueInputPort;",
    "package 'PowerSystem' {\n\tattribute def Torque;\n\tattribute def Power;\n\tport def PowerPort {\n\t\tin power: Power;\n\t\tout torque: Torque;\n\t}\n\tport def EnginePort {\n\t\tin power: Power;\n\t\tout torque: Torque;\n\t}\n\tpart context {\n\t\tpart system {\n\t\t\tport PowerPort: PowerPort;\n\t\t\tpart torqueGenerator {\n\t\t\t\tport TorqueGeneratorPort: ~TorqueGeneratorPort;\n\t\t\t\tperform generateTorque {\n\t\t\t\t\tin power = PowerPort.power;\n\t\t\t\t\tout torque = TorqueGeneratorPort.torque;\n\t\t\t\t}\n\t\t\t\tpart TorqueGeneratorPort {\n\t\t\t\t\tport outTorque: Torque;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart powertrain {\n\t\t\t\tpart engine {\n\t\t\t",
    "package 'Vehicle' {\n\tattribute def SafetyComponents;\n\tattribute def AntiTheftComponents;\n\tattribute def BothComponents;\n\tattribute def MandatoryComponents;\n\tport def SafetyPort {\n\t\tout safetyComponents: SafetyComponents;\n\t}\n\tport def AntiTheftPort {\n\t\tout antiTheftComponents: AntiTheftComponents;\n\t}\n\tport def BothPort {\n\t\tout bothComponents: BothComponents;\n\t}\n\tport def MandatoryPort {\n\t\tout mandatoryComponents: Mandatory",
    "package 'FuelSystem' {\n\tattribute def FuelTemperature;\n\tport def FuelPumpPort {\n\t\tin fuel: Fuel;\n\t\tin returnFuel: Fuel;\n\t\tout pressurizedFuel: Fuel;\n\t\tout returnPressurizedFuel: Fuel;\n\t\tout fuelTemperature: FuelTemperature;\n\t}\n\tport def FuelTankPort {\n\t\tin pressurizedFuel: Fuel;\n\t\tin returnPressurizedFuel: Fuel;\n\t\tout fuel: Fuel;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport fuelPumpPort: FuelPumpPort;\n\t\t\tport fuelTankPort: FuelTankPort;\n\t\t\tperform fuelSupply.sendFuel {",
    "package 'Vehicle' {\n\tattribute def SeatBelts;\n\tattribute def Airbag;\n\tattribute def AntiTheftAlarm;\n\tattribute def Bumper;\n\tattribute def KeylessEntry;\n\tattribute def Wheels;\n\tattribute def ABS;\n\tport def SafetyPort {\n\t\tout seatBelts: SeatBelts;\n\t\tout airbag: Airbag;\n\t\tout antiTheftAlarm: AntiTheftAlarm;\n\t\tout bumper: Bumper;\n\t\tout keylessEntry: KeylessEntry;\n\t}\n\tport def SecurityPort {\n\t\tout antiThe",
    "package 'VehicleSafetyAndSecurity' {\n\tattribute def SeatBeltLength;\n\tattribute def AirbagPressure;\n\tattribute def BumperStrength;\n\tattribute def AlarmStatus;\n\tattribute def KeylessEntryStatus;\n\tport def AlarmPort {\n\t\tout alarmStatus: AlarmStatus;\n\t}\n\tport def KeylessEntryPort {\n\t\tout keylessEntryStatus: KeylessEntryStatus;\n\t}\n\tport def SeatBeltPort {\n\t\tout seatBeltLength: SeatBeltLength;\n\t}\n\tport def AirbagPort {\n\t\tout airbagPressure: AirbagPressure;\n\t}\n\tport def BumperPort {\n\t\tout bumperStrength: BumperStrength;\n\t}",
    "package 'SecurityClassification' {\n\tenum SecurityLevel { Unclassified, Confidential, Secret }\n\tattribute def SecurityClassification;\n\ttype Component {\n\t\tproperty SecurityClassification: SecurityLevel;\n\t}\n\tport def ComponentPort {\n\t\tout component: Component;\n\t}\n\tpart context {\n\t\tpart system {\n\t\t\tport ComponentPort: ComponentPort;\n\t\t\tperform classifyComponent.sendComponent {\n\t\t\t\tout component = ComponentPort.component;\n\t\t\t}\n\t\t}\n\t\tinterface systemToComponent connect system.ComponentPort to component.ComponentPort {\n\t\t\tref flow componentFlow from source.component to target.component;\n\t\t}\n\t\tpart component {\n\t\t\tport ComponentPort: ~ComponentPort;\n\t\t\tperform classifyComponent.classify {\n\t\t\t\tin component = ComponentPort.component;\n\t\t\t\tout SecurityClassification = self.SecurityClassification;\n\t\t\t}\n\t\t}\n\t}\n\taction classifyComponent {\n\t\taction sendComponent { out component: Component; }",
    "package 'AutomotiveECU' {\n\tattribute def CANBusSpeed;\n\tattribute def VehicleControlUnit {\n\t\tproperty name = 'Vehicle Control Unit';\n\t\tport BusIFPort {\n\t\t\tout busIF: BusIF;\n\t\t}\n\t\tpart busIF {\n\t\t\tport canBusPort: ~BusPort;\n\t\t}\n\t}\n\tattribute def EngineControlUnit {\n\t\tproperty name = 'Engine Control Unit';\n\t\tport BusIFPort {\n\t\t\tout busIF: BusIF;\n\t\t}\n\t\tpart busIF {\n\t\t\tport canBusPort: ~BusPort;\n\t\t}\n\t}\n\tattribute def SensorDataInterface {\n\t\tproperty name = 'Sensor Data",
    "package 'BloodGlucoseMeter' {\n\tattribute def BatteryLevel;\n\tattribute def AlarmStatus;\n\tport def UserPort {\n\t\tin batteryLevel: BatteryLevel;\n\t\tin alarmStatus: AlarmStatus;\n\t\tout measurementResult: Real;\n\t}\n\tport def PowerPort {\n\t\tin power: Power;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport userPort: UserPort;\n\t\t\tperform measureBloodGlucose.sendMeasurementRequest {\n\t\t\t\tin batteryLevel = userPort.batteryLevel;\n\t\t\t\tin alarmStatus = userPort.alarmStatus;\n\t\t\t\tout measurementResult = measureBlood",
    "package 'ScientificConstants' {\n\tattribute def MathematicalConstants {\n\t\tkey e { value = 2.718281828459045108203127036510040801016326340; }\n\t\tkey pi { value = 3.14159265358979323846264338327950288419716939; }\n\t}\n\tattribute def PhysicalConstants {\n\t\tkey speedOfLight { value = 2997",
    "package 'AutomotiveTires' {\n\ttype Tire {\n\t\tattribute manufacturer: String;\n\t\tattribute rimDiameter: Real;\n\t\tattribute width: Integer;\n\t}\n\taction TireFactory {\n\t\tresult tire: Tire;\n\t\tparameter manufacturer: String;\n\t\tparameter rimDiameter: Real;\n\t\tparameter width: Integer;\n\t\taction createTire {\n\t\t\tout tire = Tire();\n\t\t\ttire.manufacturer = manufacturer;\n\t\t\ttire.rimDiameter = rimDiameter;\n\t\t\ttire.width = width;\n\t\t}\n\t}\n}\n\npackage 'Car' {\n\tpart automotiveTires {\n\t\tport tireFactoryPort: T",
    "package 'AutomotiveComponentModel' {\n\tattribute def VehicleMass { value = 1200.0; unit = 'kg'; }\n\tattribute def VehicleLength { value = 4.82; unit = 'm' }\n\ttype Vehicle {\n\t\tattribute def mass { value = VehicleMass; }\n\t\tattribute def length { value = VehicleLength; }\n\t\tpart leftWheel {\n\t\t\ttype Wheel;\n\t\t\tend;\n\t\t}\n\t\tpart rightWheel {\n\t\t\ttype Wheel;\n\t\t\tend;\n\t\t}\n\t}\n\ttype Wheel {\n\t\tattribute def hubDiameter { value = 0.495; unit = '",
    "package 'Powertrain' {\n\tenum EngineType { FourCylinder, SixCylinder }\n\tenum TransmissionType { Manual, Automatic }\n\tattribute def Engine;\n\tattribute def Transmission;\n\tport def EnginePort {\n\t\tout engine: EngineType;\n\t}\n\tport def TransmissionPort {\n\t\tout transmission: TransmissionType;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport EnginePort: EnginePort;\n\t\t\tport TransmissionPort: TransmissionPort;\n\t\t\tperform powertrainConfiguration.selectEngineAndTransmission {\n\t\t\t\tout engine = EnginePort.engine;\n\t\t\t\tout transmission = TransmissionPort.transmission;\n\t\t\t}\n\t\t}\n\t\tinterface vehicleToEngine connect vehicle.Engine",
    "package 'Automotive' {\n\tattribute def TotalMass { value: 1200.0; unit: kilogram; }\n\tattribute def Length { value: 4820.0; unit: millimeter; }\n\ttype WheelAssembly {\n\t\tattribute def Wheel",
    "package 'AutomotiveFuelSystem' {\n\tattribute def FuelTemperature;\n\tport def FuelTankAssemblyPort {\n\t\tin fuel: Fuel;\n\t\tout fuelReturn: Fuel;\n\t}\n\tport def FuelPumpPort {\n\t\tin fuel: Fuel;\n\t\tout engineFuel: Fuel;\n\t\tin fuelReturn: Fuel;\n\t}\n\tpart context {\n\t\tpart fuelTankAssembly {\n\t\t\tport fuelTankAssemblyPort: FuelTankAssemblyPort;\n\t\t\tperform fuelCirculation.receiveFuel {\n\t\t\t\tin fuel = fuelTankAssemblyPort.fuel;\n\t\t\t\tout fuelReturn = fuelTankAssemblyPort.fuelReturn;\n\t\t\t}\n\t",
    "package 'PhysicalQuantitySystem' {\n\tattribute def BaseQuantities {\n\t\tkey length: Length;\n\t\tkey mass: Mass;\n\t\tkey time: Time;\n\t\tkey electricCurrent: ElectricCurrent;\n\t\tkey temperature: Temperature;\n\t\tkey amountOfSubstance: AmountOfSubstance;\n\t\tkey luminousIntensity: LuminousIntensity;\n\t}\n\tattribute def ImportedQuantities;\n\tattribute def ExtendedQuantities;\n\tport def ImportQuantityPort {\n\t\tin importedQuantity: ImportedQuantity;\n\t\tin importedUnit: Unit;\n\t}\n\tport def ExtendQuantityPort {\n\t\tin extendedQuantity: ExtendedQuantity;\n\t\tin extendedUnit: Unit;\n\t}\n\tport def PhysicalQuantityPort {\n\t\tin physicalQuantity: PhysicalQuantity;\n\t\tin unit: Unit;\n\t}\n\tpart context {\n\t\t",
    "package 'UnitConversionLibrary' {\n\tattribute def ISQ {\n\t\tkey 'InternationalSystemOfQuantities';\n\t\tvalue 'ISQ';\n\t}\n\tattribute def USCustomaryUnits {\n\t\tkey 'USCustomaryUnits';\n\t\tvalue 'USCU';\n\t}\n\ttype UnitType {\n\t\tattribute def Name;\n\t\tattribute def Symbol;\n\t\tattribute def ConversionFactor;\n\t\tattribute def BaseUnit;\n\t\tattribute def Dimension;\n\t\toperation convertToBaseUnit {\n\t\t\tin value: Real;\n\t\t\tout result: Real;\n\t\t}\n\t\toperation convertToTargetUnit {\n\t\t\tin value: Real;\n\t\t\tin targetUnit: UnitType;\n\t\t\tout result: Real;\n\t\t}\n\t}\n\tpackage ISQ {\n\t\textend UnitType {\n\t\t\tattribute def ISQUnit: Unit",
    "package 'HeadlampTiltAdjustment' {\n\tattribute def TiltAngle;\n\tconstant def PI = 3.14159265358979323846;\n\tconstant def E = 2.7182818284590451023;\n\tport def InputPort {\n\t\tin tiltAngle: Real;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport inputPort: InputPort;\n\t\t\tperform checkTiltAngle.check {\n\t\t\t\tin tiltAngle = inputPort.tiltAngle;\n\t\t\t\tif tiltAngle < 50 or tiltAngle > 80 then {\n\t\t\t\t\tout ofCompliance = true;\n\t\t\t\t} else {\n\t\t\t\t\tout ofCompliance",
    "package 'SystemDataTypes' {\n\tenum StatusLevel { Red, Yellow, Green }\n\ttype UnsignedInt {\n\t\tattribute def value: Natural;\n\t\tconstraint def nonNegative { value >= 0 }\n\t}\n\ttype UnsignedFloat {\n\t\tattribute def value: Real;\n\t\tconstraint def nonNegative { value >= 0 }\n\t}\n\ttype DateTime {\n\t\tattribute def value: TemporalExpression;\n\t}\n\ttype String {\n\t\tattribute def value: String;\n\t}\n\ttype Boolean {\n",
    "package 'System' {\n\ttype Person {\n\t\tattribute name: String;\n\t}\n\ttype Bag {\n\t\tattribute id: Integer;\n\t\tattribute spareParts: Set<Part>;\n\t}\n\ttype Part {\n\t\tattribute id: Integer;\n\t\tattribute name: String;\n\t}\n\ttype List {\n\t\tattribute id: Integer;\n\t\tattribute integers: Sequence<Integer>;\n\t}\n\ttype Set {\n\t\tattribute id: Integer;\n\t\tattribute strings: Set<String>;\n\t}\n\ttype OrderedSet {\n\t\tattribute id: Integer;\n\t\tattribute personnel: OrderedSet",
    "package 'Tire' {\n\tattribute manufacturer: String;\n\tattribute rimDiameter: Real;\n\tattribute tireWidth: Real;\n\tattribute installationPosition: Vector(3);\n\tport tirePort {\n\t\tout manufacturer: String;\n\t\tout rimDiameter: Real;\n\t\tout tireWidth: Real;\n\t\tout installationPosition: Vector(3);\n\t}\n\tpart context {\n\t\tpart tireEntry {\n\t\t\tport tirePort: tirePort;\n\t\t\tperform tireDescription.setAttributes {\n\t\t\t\tin manufacturer = tirePort.manufacturer;\n\t\t\t\tin rimDiameter = tirePort.rimDiameter;\n\t\t\t\tin tireWidth = tirePort.tireWidth;\n\t\t\t\tin installationPosition = tirePort",
    "package 'SpacecraftTrajectoryRecorder' {\n\tattribute def MissionLiftoffTime;\n\tattribute def UTC_LiftoffTime;\n\tattribute def Time;\n\tattribute def Position { x: Real; y: Real; z: Real; }\n\tattribute def Velocity { x: Real; y: Real; z: Real; }\n\tport def InputPort {\n\t\tin UTC_LiftoffTime: UTC_Time;\n\t\tin MissionLiftoffTime: Real;\n\t}\n\tport def OutputPort {\n\t\tout Time: Time;\n\t\tout",
    "package 'MaterialScience' {\n\tattribute def AtomicMass;\n\tattribute def TensileStrength;\n\ttype Metal {\n\t\tattribute AtomicMass: real;\n\t\tattribute TensileStrength: real;\n\t}\n\ttype Alloy {\n\t\tattribute massFraction: real;\n\t\tpart Metal_",
    "package 'EngineeringMaterialsDB' {\n\ttype Material {\n\t\tattribute atomicMass: Real;\n\t\tattribute compositionalInfo: StructuredData;\n\t\tattribute mechanicalProperties: StructuredData;\n\t}\n\ttype MetalAlloy extends Material {\n\t\tattribute massFractions: StructuredData;\n\t}\n\ttype StructuredData {\n\t\tattribute data: String;\n\t\t",
    "package 'PubSub' {\n\tattribute def Topic;\n\tattribute def Message;\n\ttype Publisher {\n\t\toperation publishMessage(message: Message, topic: Topic);\n\t}\n\ttype Subscriber {\n\t\toperation subscribeToTopic(topic: Topic);\n\t\toperation unsubscribeFromTopic(topic: Topic);\n\t}\n\ttype Server {\n\t\toperation registerPublisher(publisher: Publisher);\n\t\toperation registerSubscriber(subscriber: Subscriber);\n\t\toperation distributeMessage(message: Message, topic: Topic);\n\t}\n\tpart context {\n\t\tpart publisher {\n\t\t\ttype Publisher;\n\t\t\tperform publishMessage {\n\t\t\t\tin message: Message;\n\t\t\t\tin",
    "package 'VehicleFuelSystem' {\n\tattribute def FuelTemperature;\n\tport def FuelTankAssemblyPort {\n\t\tin fuel: Fuel;\n\t\tout fuelReturn: Fuel;\n\t\tout fuelTemperature: FuelTemperature;\n\t}\n\tport def EnginePort {\n\t\tin fuel: Fuel;\n\t\tout fuelReturn: Fuel;\n\t\tin fuelTemperature: FuelTemperature;\n\t}\n\tpart context {\n\t\tpart fuelTankAssembly {\n\t\t\tport fuelTankAssemblyPort: FuelTankAssemblyPort;\n\t\t\tperform fuelSupply {\n\t\t\t\tin fuel = fuelTankAssemblyPort.fuel;\n\t\t\t\tout fuel = enginePort.fuel;\n\t\t\t\tout fuelTemperature = fuelTankAssemblyPort.fuelTemperature;",
    "package 'PublishSubscribe' {\n\ttype Topic {\n\t\tattribute name: String;\n\t}\n\ttype Producer {\n\t\tattribute id: Integer;\n\t\tattribute topic: Topic;\n\t\tport def topicPort {\n\t\t\tin topic: Topic;\n\t\t\tout message: Message;\n\t\t}\n\t}\n\ttype Server {\n\t\tattribute id: Integer;\n\t\tport def producerPort {\n\t\t\tin message: Message;\n\t\t\tin topic: Topic;\n\t\t}\n\t\tport def consumerPort {\n\t\t\tin message: Message;\n\t\t\tout topic: Topic;\n\t\t}\n\t\tset subscribers: Set[Consumer];\n\t\taction handleMessage {\n\t\t\tin message: Message;\n\t\t\tin topic: Topic;\n\t\t\t",
    "package 'TransportationSystem' {\n\tattribute def MaxFuelCapacity;\n\tattribute def FuelLevel;\n\tattribute def VehicleCapacity;\n\tattribute def CurrentSpeed;\n\tport def UserPort {\n\t\tin user: User;\n\t\tout exitUser: User;\n\t}\n\tport def FuelPort {\n\t\tin fuelLevel: FuelLevel;\n\t\tout refuel: FuelLevel;\n\t}\n\tport def EnvironmentalPort {\n\t\tin environmentalFactors: EnvironmentalFactors;\n\t}\n\tport def DriverPort {\n\t\tin driver: Driver;\n\t\tout exitDriver: Driver;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport userPort: UserPort;\n\t\t\tport fuelPort: FuelPort;\n\t\t\tport environmentalPort",
    "package 'FuelSupplyAndReturnSystem' {\n\tattribute def FuelTemperature;\n\tport def FuelTankPort {\n\t\tin fuelTemperature: FuelTemperature;\n\t\tout fuel: Sequence {\n\t\t\tproperty Fuel;\n\t\t}\n\t}\n\tport def EnginePort {\n\t\tin fuel: Sequence {\n\t\t\tproperty Fuel;\n\t\t}\n\t\tin fuelReturn: Sequence {\n\t\t\tproperty Fuel;\n\t\t}\n\t\tout fuelTemperature: FuelTemperature;\n\t}\n\tpart context {\n\t\tpart fuelTank {\n\t\t\tport fuelTankPort: F",
    "package 'FuelSystem' {\n\tattribute def Temperature;\n\ttype FuelFlow {\n\t\tproperty def flowRate: real;\n\t}\n\tport def FuelTankAssemblyPort {\n\t\tin fuel: FuelFlow;\n\t\tout temperature: Temperature;\n\t}\n\tport def EnginePort {\n\t\tin fuel: FuelFlow;\n\t\tout temperature: Temperature;\n\t\tout returnFuel: FuelFlow;\n\t}\n\tpart context {\n\t\tpart FuelTankAssembly {\n\t\t\tport FuelTankAssemblyPort: FuelTankAssemblyPort;\n\t\t\tperform fuelSupply {\n\t\t\t\tin fuel = FuelTankAssemblyPort.fuel;\n\t\t\t\tout temperature = FuelTankAssemblyPort.temperature;\n\t\t\t}\n\t\t}\n\t\tpart Engine {\n\t\t\tport EnginePort:",
    "package 'Camera' {\n\tattribute def SceneSelection;\n\tattribute def IntermediateImage;\n\tattribute def FinalPhoto;\n\tport def SceneSelectionPort {\n\t\tin sceneSelection: SceneSelection;\n\t}\n\tport def IntermediateImagePort {\n\t\tout intermediateImage: IntermediateImage;\n\t}\n\tport def FinalPhotoPort {\n\t\tout finalPhoto: FinalPhoto;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport SceneSelectionPort: SceneSelectionPort;\n\t\t\tperform captureScene.sendSceneSelection {\n\t\t\t\tin sceneSelection = SceneSelectionPort.sceneSelection;\n\t\t\t}\n\t\t}\n\t\tinterface userToCamera connect user.SceneSelectionPort to camera.SceneSelectionPort {\n\t\t\tref flow references captureScene.sceneSelectionFlow\n\t\t\t\tfrom source.sceneSelection to target.sceneSelection; \n\t\t}\n\t\tpart camera {\n\t\t\tport SceneSelectionPort: ~SceneSelectionPort;",
    "package 'PhotographyWorkflow' {\n\tattribute def Scene;\n\tattribute def FocusedImage;\n\tattribute def FinalImage;\n\tport def UserInputPort {\n\t\tin scene: Scene;\n\t}\n\tport def OutputPort {\n\t\tout finalImage: FinalImage;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport userInputPort: UserInputPort;\n\t\t\tperform focus.receiveScene {\n\t\t\t\tin scene = userInputPort.scene;\n\t\t\t}\n\t\t}\n\t\tinterface userToFocusing connect user.userInputPort to focusing.inputPort {\n\t\t\tref flow focusFlow from source.scene to target.scene;\n\t\t}\n\t\tpart focusing {\n\t\t\tport inputPort: ~UserInputPort;\n\t\t\tperform focus.",
    "package 'PhotographySystem' {\n\tattribute def Scene;\n\tattribute def Image;\n\tport def UserPort {\n\t\tin scene: Scene;\n\t\tout image: Image;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport userPort: UserPort;\n\t\t\tperform frameScene.sendScene {\n\t\t\t\tin scene = userPort.scene;\n\t\t\t}\n\t\t}\n\t\tinterface userToSystem connect user.userPort to system.userPort {\n\t\t\tref flow frameSceneFlow from source.scene to target.scene;\n\t\t}\n\t\tpart system {\n\t\t\tport userPort: ~UserPort;\n\t\t\tpart focusing {\n\t\t\t\tperform focusScene.focus {\n\t\t\t\t\tin scene = userPort.scene;\n\t\t\t\t\tout image = imagePort.image;\n\t\t\t\t}\n\t\t\t\tport imagePort: ImagePort;\n\t\t\t}\n\t\t",
    "package 'AutomatedPhotographySystem' {\n\tattribute def FocusedImage;\n\tattribute def Photograph;\n\tport def FocusPort {\n\t\tin focusRequest: FocusRequest;\n\t\tout focusResult: FocusResult;\n\t}\n\tport def ShootPort {\n\t\tin photographRequest: PhotographRequest;\n\t\tout photograph: Photograph;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport focusPort: FocusPort;\n\t\t\tport shootPort: ShootPort;\n\t\t\tperform automatePhotographyProcess.sendFocusRequest {\n\t\t\t\tin focusRequest = focusPort.focusRequest;\n\t\t\t\tout focusResult = focusPort.focusResult;\n\t\t\t}\n\t\t\tperform automatePhotographyProcess.sendShootRequest {\n\t\t\t\tin photographRequest = shootPort.photographRequest;\n\t\t\t\tout photograph = shootPort.photograph;\n\t\t\t}\n\t\t}\n\t\tinterface userToFocus connect user.focusPort to focus.focusPort",
    "package 'PhotographyWorkflow' {\n\tattribute def Scene;\n\tattribute def Image;\n\tattribute def Picture;\n\tport def UserInputPort {\n\t\tin scene: Scene;\n\t}\n\tport def OutputPort {\n\t\tout picture: Picture;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport UserInputPort: UserInputPort;\n\t\t}\n\t\tpart PhotographyWorkflow {\n\t\t\tport UserInputPort: ~UserInputPort;\n\t\t\tport OutputPort: OutputPort;\n\t\t\tperform focus.focusScene {\n\t\t\t\tin scene = UserInputPort.scene;\n\t\t\t\tout Image = ImagePort.image;\n\t\t\t}\n\t\t\tport ImagePort: ~ImagePort;\n\t\t\tperform shoot.shootImage {\n\t\t\t\tin Image = ImagePort.image;",
    "package 'PhotographyWorkflow' {\n\tattribute def Scene;\n\tattribute def FocusStatus;\n\tattribute def Image;\n\tport def UserInputPort {\n\t\tin scene: Scene;\n\t}\n\tport def OutputPort {\n\t\tout image: Image;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport userInputPort: UserInputPort;\n\t\t\tperform captureImage.receiveScene {\n\t\t\t\tin scene = userInputPort.scene;\n\t\t\t}\n\t\t}\n\t\tinterface userToCamera connect user.userInputPort to camera.inputPort {\n\t\t\tref flow sceneFlow from source.scene to target.scene;\n\t\t}\n\t\tpart camera {\n\t\t\tport inputPort: UserInputPort;\n\t\t\tport outputPort: OutputPort;\n\t\t\tperform focusAndCapture.focusScene {\n\t\t\t\tin scene = inputPort.scene;\n\t\t\t\tout focusStatus = focusStatusPort.focusStatus;\n\t\t\t",
    "package 'PhotographySystem' {\n\tattribute def Scene;\n\tattribute def FocusedImage;\n\tattribute def Photograph;\n\tport def ScenePort {\n\t\tin scene: Scene;\n\t}\n\tport def FocusedImagePort {\n\t\tin focusedImage: FocusedImage;\n\t\tout photograph: Photograph;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport ScenePort: ScenePort;\n\t\t\tperform captureScene.sendScene {\n\t\t\t\tin scene = ScenePort.scene;\n\t\t\t}\n\t\t}\n\t\tinterface userToSystem connect user.ScenePort to system.ScenePort {\n\t\t\tref flow sceneFlow from source.scene to target.scene;\n\t\t}\n\t\tpart system {\n\t\t\tport ScenePort: ~ScenePort;\n\t\t\tport FocusedImagePort: FocusedImagePort;\n",
    "package 'PhotographyWorkflow' {\n\tattribute def CurrentScene;\n\tattribute def FocusedImage;\n\tattribute def FinalPhoto;\n\tport def UserInputPort {\n\t\tin takePhotoCmd: TakePhotoCmd;\n\t}\n\tport def FocusPort {\n\t\tin scene: CurrentScene;\n\t\tout focusedImage: FocusedImage;\n\t}\n\tport def ShootingPort {\n\t\tin focusedImage: FocusedImage;\n\t\tout finalPhoto: FinalPhoto;\n\t}\n\tport def DisplayPort {\n\t\tout finalPhoto: FinalPhoto;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport userInputPort: UserInputPort;\n\t\t\tperform takePhoto.sendTakePhotoCmd {\n\t\t\t\tout takePhotoCmd = userInputPort.takePhotoCmd;\n\t\t",
    "package 'AutomaticBrakeControl' {\n\tattribute def BrakePressure;\n\tattribute def TractionInfo;\n\tport def UserInputPort {\n\t\tin start: Boolean;\n\t}\n\tport def BrakePedalPort {\n\t\tin brakePressure: BrakePressure;\n\t}\n\tport def TractionInfoPort {\n\t\tin tractionInfo: TractionInfo;\n\t}\n\tport def OutputPort {\n\t\tout brakePressure: BrakePressure;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport startPort: UserInputPort;\n\t\t\tperform activateSystem.sendStart {\n\t\t\t\tin start = startPort.start;\n\t\t\t}\n\t\t}",
    "package 'BatteryChargingControlSystem' {\n\tattribute def BatteryLevel;\n\tport def BatteryLevelPort {\n\t\tin batteryLevel: BatteryLevel;\n\t}\n\tport def ChargingPort {\n\t\tin charging: Boolean;\n\t}\n\tpart context {\n\t\tpart battery {\n\t\t\tport BatteryLevelPort: ~BatteryLevelPort;\n\t\t\tperform batteryMonitoring.monitorBatteryLevel {\n\t\t\t\tin batteryLevel = BatteryLevelPort.batteryLevel;\n\t\t\t}\n\t\t\tpart chargingCircuit {\n\t\t\t\tport ChargingPort: ChargingPort;\n\t\t\t\tperform chargingControl.supplyCharge {\n\t\t\t\t\tin charging = ChargingPort.charging;\n\t\t\t\t\twhen batteryLevel < 100 {\n\t\t\t\t\t\tperform chargingControl.terminateCharging {\n\t\t",
    "package 'BatteryChargingSystem' {\n\tattribute def BatteryLevel;\n\tport def InputPort {\n\t\tin power: Power;\n\t\tin battery: Battery;\n\t}\n\tport def OutputPort {\n\t\tout batteryLevel: BatteryLevel;\n\t}\n\tpart context {\n\t\tpart battery {\n\t\t\tport inputPort: InputPort;\n\t\t\tport outputPort: OutputPort;\n\t\t\tperform chargingControl.monitorBatteryLevel {\n\t\t\t\tin power = inputPort.power;\n\t\t\t\tin battery = inputPort.battery;\n\t\t\t\tout batteryLevel = outputPort.batteryLevel;\n\t\t\t}\n\t\t\tpart chargingController {\n\t\t\t\tport batteryLevelPort: ~OutputPort;\n\t\t\t\tperform chargingControl.controlCharging {\n\t\t\t\t\tin batteryLevel = batteryLevelPort.batteryLevel;\n\t\t\t\t\tif batteryLevel",
    "package 'Camera' {\n\tattribute def Scene;\n\tattribute def FocusedImage;\n\tport def ScenePort {\n\t\tin scene: Scene;\n\t}\n\tport def FocusedImagePort {\n\t\tout focusedImage: FocusedImage;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport ScenePort: ScenePort;\n\t\t\tperform takePhoto.sendScene {\n\t\t\t\tin scene = ScenePort.scene;\n\t\t\t}\n\t\t}\n\t\tinterface userToCamera connect user.ScenePort to camera.ScenePort {\n\t\t\tref flow sceneFlow from source.scene to target.scene;\n\t\t}\n\t\tpart camera {\n\t\t\tport ScenePort: ~ScenePort;\n\t\t\tport FocusedImagePort: FocusedImagePort;\n\t\t\tperform autofocus",
    "package 'DigitalCamera' {\n\tattribute def SceneSelection;\n\tattribute def Focus;\n\tattribute def Image;\n\tport def SceneSelectionPort {\n\t\tin sceneSelection: SceneSelection;\n\t}\n\tport def FocusPort {\n\t\tin focus: Focus;\n\t\tout image: Image;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport SceneSelectionPort: SceneSelectionPort;\n\t\t\tperform shoot.sendSceneSelection {\n\t\t\t\tin sceneSelection = SceneSelectionPort.sceneSelection;\n\t\t\t}\n\t\t}\n\t\tinterface userToCamera connect user.SceneSelectionPort to camera.SceneSelectionPort {\n\t\t\tref flow sceneSelectionFlow from source.sceneSelection to target.sceneSelection;\n\t\t}\n\t\tpart camera {\n\t\t\tport SceneSelectionPort: ~SceneSelectionPort;\n",
    "package 'VehicleSimulation' {\n\tattribute def Mass;\n\tattribute def InitialPosition;\n\tattribute def InitialVelocity;\n\tattribute def TimeStep;\n\tport def InputPort {\n\t\tin mass: Mass;\n\t\tin initialPosition: Real;\n\t\tin initialVelocity: Real;\n\t\tin timeStep: Real;\n\t\tin powerInput: Real[];\n\t}\n\tport def OutputPort {\n\t\tout position: Real[];\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport inputPort: InputPort;\n\t\t\tperform simulation.runSimulation {\n\t\t\t\tin mass = inputPort.mass;\n\t\t\t\tin initialPosition = inputPort.initialPosition;\n\t\t\t\tin initialVelocity = inputPort.initialVelocity;\n\t\t\t\tin timeStep = inputPort.timeStep;\n\t\t\t\t",
    "package 'Camera' {\n\tattribute def Scene;\n\tattribute def Image;\n\tattribute def Photo;\n\tport def ScenePort {\n\t\tin scene: Scene;\n\t}\n\tport def ImagePort {\n\t\tout image: Image;\n\t}\n\tport def PhotoPort {\n\t\tout photo: Photo;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport scenePort: ScenePort;\n\t\t\tperform captureImage.sendScene {\n\t\t\t\tin scene = scenePort.scene;\n\t\t\t}\n\t\t}\n\t\tinterface userToCamera connect user.scenePort to camera.scenePort {\n\t\t\tref flow sceneFlow from source.scene to target.scene;\n\t\t}\n\t\tpart camera {\n\t\t\tport scenePort: ~ScenePort;\n\t\t\tport imagePort: ImagePort;\n\t\t\tport photoPort: ~PhotoPort",
    "package 'Camera' {\n\tattribute def ViewPort;\n\tattribute def Image;\n\tattribute def Picture;\n\tport def ViewPortPort {\n\t\tin viewPort: ViewPort;\n\t}\n\tport def DisplayPort {\n\t\tout picture: Picture;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport ViewPortPort: ViewPortPort;\n\t\t\tperform captureImage.sendViewPort {\n\t\t\t\tin viewPort = ViewPortPort.viewPort;\n\t\t\t}\n\t\t}\n\t\tinterface userToCamera connect user.ViewPortPort to camera.ViewPortPort {\n\t\t\tref flow focusFlow from source.viewPort to target.viewPort;\n\t\t\tref flow imageFlow from focusFlow.viewPort to captureImage.viewPort;\n\t\t\tref flow pictureFlow from captureImage.picture to DisplayPort.picture;\n\t\t}\n\t\tpart camera {\n\t\t",
    "package 'SensorManager' {\n\ttype Sensor {\n\t\tattribute def status;\n\t\toperation def updateSensor {\n\t\t\tin self;\n\t\t\tout updatedSensor: Sensor;\n\t\t}\n\t}\n\ttype ReadySensor <| extends Sensor {\n\t\tattribute def readyState: Boolean;\n\t}\n\tpart context {\n\t\tpart sensorManager {\n\t\t\tperform sensorManager.manageSensors {\n\t\t\t\tfor (sensor in registeredSensors) {\n\t\t\t\t\tif (sensor.readyState = true) {\n\t\t\t\t\t\tsensor.updateSensor();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpart registeredSensors {\n\t\t\t+ Sensor*\n\t\t}\n\t}\n\taction sensorManager {\n\t\taction manageSensors {\n\t\t\tfor (sensor in registeredSensors) {\n\t\t\t\tif (sensor.readyState = true) {\n\t\t\t\t\tsensor",
    "package 'VehicleControl' {\n\tattribute def VehicleState;\n\tport def VehicleControlPort {\n\t\tin startSignal : Boolean;\n\t\tin powerOnSignal : Boolean;\n\t\tin shutdownSignal : Boolean;\n\t\tout vehicleState : VehicleState;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport vehicleControlPort: VehicleControlPort;\n\t\t\tperform vehicleControl.handleControlSignals {\n\t\t\t\tin startSignal = vehicleControlPort.startSignal;\n\t\t\t\tin powerOnSignal = vehicleControlPort.powerOnSignal;\n\t\t\t\tin shutdownSignal = vehicleControlPort.shutdownSignal;\n\t\t\t\tout vehicleState = vehicleControl.vehicleState;\n\t\t\t}\n\t\t}\n\t\tinterface vehicleToVehicleControl connect vehicle.vehicleControlPort",
    "package 'VehicleControlSystem' {\n\tattribute def CurrentState;\n\tport def VehicleControlPort {\n\t\tin vehicleStartSignal : Boolean;\n\t\tin vehicleOnSignal : Boolean;\n\t\tin vehicleOffSignal : Boolean;\n\t\tout currentState : CurrentState;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport vehicleControlPort: VehicleControlPort;\n\t\t\tperform stateManagement.handleControlSignals {\n\t\t\t\tin vehicleStartSignal = vehicleControlPort.vehicleStartSignal;\n\t\t\t\tin vehicleOnSignal = vehicleControlPort.vehicleOnSignal;\n\t\t\t\tin vehicleOffSignal = vehicleControlPort.vehicleOffSignal;\n\t\t\t\tout currentState = stateManagement.getCurrentState();",
    "package 'VehiclePowerManagement' {\n\tattribute def ControlSignal;\n\tattribute def PowerState;\n\tport def ControlSignalPort {\n\t\tin controlSignal: ControlSignal;\n\t}\n\tport def PowerStatePort {\n\t\tout powerState: PowerState;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport controlSignalPort: ControlSignalPort;\n\t\t\tperform powerManagement.handleControlSignal {\n\t\t\t\tin controlSignal = controlSignalPort.controlSignal;\n\t\t\t}\n\t\t}\n\t\tinterface userToPowerManagement connect user.controlSignalPort to powerManagement.controlSignalPort {\n\t\t\tref flow controlSignalFlow from source.controlSignal to target.controlSignal;\n\t\t}\n",
    "package 'VehicleControl' {\n\tattribute def VehicleStatus;\n\tport def UserInputPort {\n\t\tin startCmd : Boolean;\n\t\tin shutdownCmd : Boolean;\n\t}\n\tport def VehicleStatusPort {\n\t\tout vehicleStatus : VehicleStatus;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport userInputPort: UserInputPort;\n\t\t\tperform controlVehicleState.sendUserInput {\n\t\t\t\tin startCmd = userInputPort.startCmd;\n\t\t\t\tin shutdownCmd = userInputPort.shutdownCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToControlSystem connect user.userInputPort to controlSystem.userInputPort {\n\t\t\tref flow userInputFlow from source.startCmd to target.startCmd;\n\t\t\tref flow userInputFlow from source",
    "package 'PowerManagement' {\n\tattribute def OperatingState;\n\tport def StartCmdPort {\n\t\tin startCmd: Boolean;\n\t}\n\tport def OnCmdPort {\n\t\tin onCmd: Boolean;\n\t}\n\tport def OffCmdPort {\n\t\tin offCmd: Boolean;\n\t}\n\tport def HealthStatePort {\n\t\tout healthState: HealthState;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport startCmdPort: StartCmdPort;\n\t\t\tport onCmdPort: OnCmdPort;\n\t\t\tport offCmdPort: OffCmdPort;\n\t\t\tperform powerManagement.handleUserInput {\n\t\t\t\tin startCmd = startCmdPort.startCmd;",
    "package 'VehicleHealthMonitoring' {\n\tattribute def MaxTemp;\n\tattribute def MaintenanceInterval;\n\tattribute def MaintenanceTime;\n\tattribute def MaintenanceNext;\n\tattribute def VehicleStatus;\n\tport def VehicleControllerPort {\n\t\tin warning: Boolean;\n\t\tin status: VehicleStatus;\n\t\tout nextMaintenance: Time;\n\t}\n\tport def SensorPort {\n\t\tin temperature: Real;\n\t}\n\tpart context {\n\t\tpart sensor {\n\t\t\tport sensorPort: SensorPort;\n\t\t\tperform",
    "package 'Server' {\n\tattribute def Clock;\n\tattribute def RequestPort;\n\tattribute def ResponsePort;\n\tport def RequestPort {\n\t\tin request: RequestMessage;\n\t}\n\tport def ResponsePort {\n\t\tout response: ResponseMessage;\n\t}\n\tpart context {\n\t\tpart server {\n\t\t\tport requestPort: RequestPort;\n\t\t\tport responsePort: ResponsePort;\n\t\t\tperform serverControl.managePowerState {\n\t\t\t\tout clock = clockPort.clock;\n\t\t\t}\n\t\t\tport clockPort: ClockPort;\n\t\t\tstate off {\n\t\t\t\taction receiveStartCmd { in startCmd: StartCommand; }\n\t\t\t\t",
    "package 'VehicleStartStopControl' {\n\tattribute def StartStopState;\n\tport def StartSignalPort {\n\t\tin startSignal: Boolean;\n\t}\n\tport def PowerOnSignalPort {\n\t\tin powerOnSignal: Boolean;\n\t}\n\tport def BrakePedalPort {\n\t\tin brakePedal: Boolean;\n\t}\n\tport def ControllerPort {\n\t\tin stopSignal: Boolean;\n\t\tout startSignal: Boolean;\n\t}\n\tport def ParkingBrakePort {\n\t\tout parkingBrake: Boolean;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport startSignalPort: StartSignalPort;\n\t\t\tport powerOn",
    "package 'VehicleControlSystem' {\n\tattribute def VehicleState;\n\tattribute def StartControlSignal;\n\tattribute def VehicleOnSignal;\n\tattribute def ParkingBrakeApplied;\n\tport def StartControlSignalPort {\n\t\tin startControlSignal: StartControlSignal;\n\t}\n\tport def VehicleOnSignalPort {\n\t\tin vehicleOnSignal: VehicleOnSignal;\n\t}\n\tport def ParkingBrakePort {\n\t\tin parkingBrakeApplied: ParkingBrakeApplied;\n\t}\n\tport",
    "package 'CruiseControl' {\n\tattribute def SetSpeedCmd;\n\tattribute def ActualSpeed;\n\tattribute def FuelControlCmd;\n\tport def SetSpeedCmdPort {\n\t\tin setSpeedCmd : SetSpeedCmd;\n\t}\n\tport def ActualSpeedPort {\n\t\tout actualSpeed : ActualSpeed;\n\t}\n\tport def FuelControlCmdPort {\n\t\tin fuelControlCmd : FuelControlCmd;\n\t}\n\tport def EnginePort {\n\t\tin fuelControlCmd : FuelControlCmdPort;\n\t\tout engineOutput : ActualSpeed;\n\t}\n\tport def SpeedometerPort {\n\t\tin actualSpeed : ActualSpeed;\n\t}\n\tpart context {\n\t\tpart driver {\n\t\t\t",
    "package 'CruiseControl' {\n\tattribute def SetSpeed;\n\tattribute def RealTimeVehicleSpeed;\n\tattribute def ThrottleControlCommand;\n\tport def SetSpeedPort {\n\t\tin setSpeed: SetSpeed;\n\t}\n\tport def SpeedometerPort {\n\t\tout realTimeVehicleSpeed: RealTimeVehicleSpeed;\n\t}\n\tport def EngineSystemPort {\n\t\tin throttleControlCommand: ThrottleControlCommand;\n\t}\n\tpart context {\n\t\tpart driver {\n\t\t\tport setSpeedPort: SetSpeedPort;\n\t\t\tperform cruiseControl.receiveSetSpeed {\n\t\t\t\tin setSpeed = setSpeedPort.setSpeed;\n\t\t\t}\n\t\t}\n\t\tinterface driverToCruiseControl connect driver.setSpeedPort to cruiseControl.setSpeedPort {\n\t\t\tref flow setSpeedFlow from source.setSpeed to target",
    "package 'AutomotiveCruiseControl' {\n\tattribute def SetSpeed;\n\tattribute def CurrentSpeed;\n\tport def ControlInterfacePort {\n\t\tin setSpeed : SetSpeed;\n\t}\n\tport def SpeedometerPort {\n\t\tout currentSpeed : CurrentSpeed;\n\t}\n\tport def EnginePort {\n\t\tin throttleCmd : ThrottleCmd;\n\t}\n\tpart context {\n\t\tpart driver {\n\t\t\tport controlInterfacePort: ControlInterfacePort;\n\t\t\tperform setSpeedCommand.sendSetSpeed {\n\t\t\t\tout setSpeed = controlInterfacePort.setSpeed;\n\t\t\t}\n\t\t}\n\t\tinterface driverToCruiseController connect driver.controlInterfacePort to cruiseController",
    "package 'AutomotiveCruiseControl' {\n\tattribute def DesiredSpeed;\n\tattribute def ActualSpeed;\n\tport def DriverInputPort {\n\t\tin desiredSpeed: DesiredSpeed;\n\t}\n\tport def EngineControlPort {\n\t\tout throttleControl: ThrottleControl;\n\t}\n\tpart context {\n\t\tpart driver {\n\t\t\tport driverInputPort: DriverInputPort;\n\t\t\tperform setDesiredSpeed.sendDesiredSpeed {\n\t\t\t\tin desiredSpeed = driverInputPort.desiredSpeed;\n\t\t\t}\n\t\t}\n\t\tinterface driverToCruiseController connect driver.driverInputPort to cruiseController.driverInputPort {\n\t\t\tref",
    "package 'AutomotiveCruiseControl' {\n\tattribute def TargetSpeed;\n\tattribute def ActualSpeed;\n\tattribute def EngineOutput;\n\tport def CruiseControlInterfacePort {\n\t\tin targetSpeed : TargetSpeed;\n\t}\n\tport def CruiseControllerPort {\n\t\tin actualSpeed : ActualSpeed;\n\t\tin engineOutput : EngineOutput;\n\t\tout fuelControlCmd : EngineOutput;\n\t}\n\tport def EnginePort {\n\t\tin fuelControlCmd : EngineOutput;\n\t}\n\tpart context {\n\t\t",
    "package 'CruiseControl' {\n\tattribute def SetSpeedCmd;\n\tattribute def ActualSpeed;\n\tattribute def FuelControlCmd;\n\tport def SetSpeedCmdPort {\n\t\tin setSpeedCmd : SetSpeedCmd;\n\t}\n\tport def ActualSpeedPort {\n\t\tout actualSpeed : ActualSpeed;\n\t}\n\tport def FuelControlCmdPort {\n\t\tin fuelControlCmd : FuelControlCmd;\n\t}\n\tport def EngineControllerPort {\n\t\tin fuelControlCmd : FuelControlCmd;\n\t\tout engineStatus : ActualSpeed;\n\t}\n\tpart context {\n\t\tpart driver {\n\t\t\tport setSpeedCmdPort: SetSpeedCmdPort;\n\t\t\tperform cruiseControl.receiveSetSpeedCmd",
    "package 'VehicleLifecycleManagement' {\n\tattribute def VehicleID;\n\tattribute def DeliveryDate;\n\tattribute def OwnerName;\n\tattribute def OwnerID;\n\tattribute def CurrentOwner {\n\t\ttype Owner;\n\t\townedBy driver: Driver;\n\t}\n\tattribute def Drivers {\n\t\ttype Driver;\n\t\townedBy driverSet: Set[Driver];\n\t}\n\tport def VehiclePort {\n\t\tout vehicleID: VehicleID;\n\t\tout deliveryDate: DeliveryDate;\n\t\tout ownerName: OwnerName;\n\t\tout ownerID: OwnerID;\n\t\tout currentOwner: CurrentOwner",
    "package 'Vehicle' {\n\tattribute def mass;\n\tattribute def operationalStatus {\n\t\tattribute def gearSetting;\n\t\tattribute def acceleratorPedalPosition;\n\t}\n\tport def EnginePort {\n\t\tout engine: Engine;\n\t}\n\tport def DriverPort {\n\t\tin driver: Driver;\n\t}\n\tpart context {\n\t\tpart engine {\n\t\t\tport EnginePort: ~EnginePort;\n\t\t}\n\t\tpart driver {\n\t\t\tport DriverPort: DriverPort;\n\t\t}\n\t\tpart wheel {\n\t\t\tattribute def position;\n\t\t\tport name: String;\n\t\t}\n\t\tpart leftFrontWheel {\n\t\t\tport name: \"leftFront\";\n\t\t\tpart wheel;\n\t\t\t",
    "package 'VehicleSystem' {\n\ttype Vehicle {\n\t\tattribute def mass: Real;\n\t\tattribute def gear: Integer;\n\t\tattribute def acceleratorPosition: Real;\n\t\taction evolve {\n\t\t\taction changeMass { in newMass: Real; }\n\t\t\taction changeGear { in newGear: Integer; }\n\t\t\taction changeAcceleratorPosition { in newAcceleratorPosition: Real; }\n\t\t\tsuccession flow massFlow from changeMass.newMass to mass;\n\t\t\tsuccession flow gearFlow from changeGear.newGear to gear;\n\t\t\tsuccession flow acceleratorPositionFlow from changeAcceleratorPosition.newAcceler",
    "package 'Vehicle' {\n\tattribute def mass;\n\tattribute def gearPosition;\n\tattribute def throttlePedalPosition;\n\tport def DriverPort {\n\t\tin driver: Driver;\n\t}\n\tpart context {\n\t\tpart engine {\n\t\t\t// engine properties and interactions with vehicle go here\n\t\t}\n\t\tpart driverAlice {\n\t\t\tport DriverPort: DriverPort;\n\t\t\tperform driveVehicle.drive {\n\t\t\t\tin driver = DriverPort.driver;\n\t\t\t\t// code for Alice's driving behavior goes here\n\t\t\t}\n\t\t}",
    "package 'VehicleMassModel' {\n\tattribute def Mass;\n\ttype Component {\n\t\tattribute def Mass;\n\t\toperation getTotalMass() : Mass;\n\t}\n\ttype Vehicle {\n\t\tattribute def Name;\n\t\tattribute def Mass: Mass;\n\t\toperation getTotalMass() : Mass;\n\t\tpart body : Component {\n\t\t\toperation getTotalMass() = self.Mass + body.Mass;\n\t\t}\n\t\tpart engine : Component {\n\t\t\toperation getTotalMass() = self.Mass + engine.Mass;\n\t\t}\n\t\tpart transmission : Component {\n\t\t\toperation getTotalMass() =",
    "package 'VehicleMassManagement' {\n\tattribute def Mass;\n\ttype Component {\n\t\tattribute def SerialNumber;\n\t\tattribute def Mass: Mass;\n\t\tport def MassPort {\n\t\t\tout mass: Mass;\n\t\t}\n\t}\n\ttype Vehicle {\n\t\tattribute def VIN;\n\t\tport def VehicleMassPort {\n\t\t\tout vin: VIN;\n\t\t\tout totalMass: Mass;\n\t\t}\n\t\tpart context {\n\t\t\tpart engine {\n\t\t\t\ttype Component;\n\t\t\t\tport engineMassPort: MassPort;",
    "package 'MassManagement' {\n\tattribute def simpleMass;\n\tattribute def totalMass;\n\ttype Object {\n\t\tattribute def simpleMass;\n\t\tattribute def totalMass;\n\t}\n\ttype SimpleThing < Object {\n\t}\n\ttype CompositeThing < Object {\n\t\tpart subComponents: Object[*];\n\t\taction calculateTotalMass {\n\t\t\tvar sum: Real = 0.0;\n\t\t\tfor (each subComponent in subComponents) {\n\t\t\t\tsum += subComponent.totalMass;\n\t\t\t}\n\t\t\tself.totalMass = sum + self.simpleMass;\n\t\t}\n\t}\n\tpart context {\n\t\tpart objectToBeManaged {\n\t\t\ttype Object;\n\t\t\taction calculateTotalMass { self.totalMass = self.simpleMass; }\n\t\t}\n\t\tpart simpleThing",
    "package 'MassManagement' {\n\tattribute def BasicMass;\n\tattribute def SubComponents {\n\t\ttype Object {\n\t\t\tattribute def SubComponentMass;\n\t\t\tattribute def MinMassThreshold;\n\t\t}\n\t}\n\tport def InputPort {\n\t\tin object: Object;\n\t}\n\tport def OutputPort {\n\t\tout totalMass: Real;\n\t}\n\tpart context {\n\t\tpart objectToBeManaged {\n\t\t\tport InputPort: InputPort;\n\t\t\tport OutputPort: OutputPort;\n\t\t\tperform massCalculation.calculateTotalMass {\n\t\t\t\tin object = InputPort",
    "package 'VehicleDynamics' {\n\tattribute def Mass;\n\tattribute def AerodynamicDragCoefficient;\n\tattribute def FrictionCoefficient;\n\tattribute def WheelPower;\n\tattribute def Speed;\n\tattribute def Time;\n\tport def InputPort {\n\t\tin wheelPower: WheelPower;\n\t\tin aerodynamicDragCoefficient: AerodynamicDragCoefficient;\n\t\tin frictionCoefficient: FrictionCoefficient;\n\t\tin mass: Mass;\n\t}\n\tport def OutputPort {\n\t\tout power: Real;\n\t\tout acceleration:",
    "package 'VehicleSimulation' {\n\tattribute def TotalMass;\n\tattribute def TimeStep;\n\tattribute def AerodynamicDragCoefficient;\n\tattribute def RollingResistanceCoefficient;\n\tattribute def InitialSpeed;\n\tattribute def InitialPosition;\n\tattribute def WheelEndOutputPower;\n\tport def InputPort {\n\t\tin totalMass : TotalMass;\n\t\tin timeStep : TimeStep;\n\t\tin aerodynamicDragCoefficient : AerodynamicDragCoefficient;\n\t\tin rollingResistanceCoefficient : RollingResistanceCoefficient;\n\t\tin initialSpeed : Initial",
    "package 'VehicleDynamics' {\n\tattribute def Mass;\n\tattribute def WheelPower;\n\tattribute def AerodynamicDragCoefficient;\n\tattribute def RollingResistanceCoefficient;\n\tattribute def InitialSpeed;\n\tattribute def InitialPosition;\n\tport def InputPort {\n\t\tin mass : Mass;\n\t\tin wheelPower : WheelPower;\n\t\tin aerodynamicDragCoefficient : AerodynamicDragCoefficient;\n\t\tin rollingResistanceCoefficient : RollingResistanceCoefficient;\n\t\tin initialSpeed : InitialSpeed;\n\t\tin initialPosition : InitialPosition;\n\t}\n\tport def OutputPort {\n\t\tout speed : Real;\n\t\tout position : Real;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport inputPort:",
    "package 'VehicleDynamics' {\n\tattribute def InitialPosition;\n\tattribute def InitialVelocity;\n\tattribute def Mass;\n\tattribute def DrivePower;\n\tattribute def TimeInterval;\n\tattribute def DragCoefficient;\n\tattribute def FrictionCoefficient;\n\tport def InputPort {\n\t\tin InitialPosition: Real;\n\t\tin InitialVelocity: Real;\n\t\tin Mass: Real;\n\t\tin DrivePower: Real;\n\t\tin TimeInterval: Real;\n\t}\n\tport def OutputPort {\n\t\tout Acceleration: Real;\n\t\tout FinalVelocity: Real;\n\t\tout FinalPosition: Real;",
    "package 'VehicleWeightManagement' {\n\tattribute def ChassisMass;\n\tattribute def EngineMass;\n\tattribute def GearboxMass;\n\tattribute def TotalMass;\n\tport def InputPort {\n\t\tin chassisMass: ChassisMass;\n\t\tin engineMass: EngineMass;\n\t\tin gearboxMass: GearboxMass;\n\t}\n\tport def OutputPort {\n\t\tout totalMass: TotalMass;\n\t\tout warning: Boolean;\n\t}\n\tpart context {\n\t\tpart chassis {\n\t\t\tport inputPort: InputPort;\n\t\t\tperform calculateTotalMass.setChassisMass {\n\t\t\t\tin chassisMass = inputPort.chassisMass;\n\t\t\t}\n\t\t}\n\t\tpart engine {\n\t",
    "package 'VehicleMassControl' {\n\tattribute def TotalMass;\n\tattribute def EngineMass;\n\tattribute def TransmissionMass;\n\ttype Component {\n\t\tattribute def Mass: Real;\n\t}\n\ttype Chassis {\n\t\textends Component;\n\t}\n\ttype Engine {\n\t\textends Component;\n\t\tattribute def EngineType;\n\t}\n\ttype Transmission {\n\t\textends Component;\n\t}\n\tport def InputPort {\n\t\tin mass: Real;\n\t}\n\tport def OutputPort {\n\t\tout mass: Real;\n\t}\n\tpart context {\n\t\tpart chassis {\n\t\t\tpart chassisComponent {\n\t",
    "package 'VehicleMassManagement' {\n\tattribute def ChassisMass;\n\tattribute def EngineMass;\n\tattribute def TransmissionMass;\n\tattribute def TotalMass;\n\tport def InputPort {\n\t\tin chassisMass : ChassisMass;\n\t\tin engineMass : EngineMass;\n\t\tin transmissionMass : TransmissionMass;\n\t}\n\tport def OutputPort {\n\t\tout totalMass : TotalMass;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport inputPort: InputPort;\n\t\t\tport outputPort: OutputPort;\n\t\t\tperform massVerification.calculateTotalMass {\n\t\t\t\tin chassisMass = inputPort.chassisMass;\n\t\t\t\tin engineMass =",
    "package 'WeightManagement' {\n\tattribute def ChassisWeight;\n\tattribute def EngineWeight;\n\tattribute def TransmissionWeight;\n\tattribute def TotalWeight;\n\tport def ChassisWeightPort {\n\t\tin chassisWeight: ChassisWeight;\n\t}\n\tport def EngineWeightPort {\n\t\tin engineWeight: EngineWeight;\n\t}\n\tport def TransmissionWeightPort {\n\t\tin transmissionWeight: TransmissionWeight;\n\t}\n\tport def TotalWeightPort {\n\t\tout totalWeight: TotalWeight;\n\t}\n\tpart context {\n\t\tpart vehicleComponents {\n\t\t\tpart chassis {\n\t\t\t\tport chassisWeightPort: ChassisWeightPort;\n\t\t\t\tperform weightManagement.recordChassisWeight {\n\t\t\t\t\tin chassisWeight = chassisWeightPort.chassis",
    "package 'Vehicle' {\n\tattribute def ChassisMass;\n\tattribute def EngineMass;\n\tattribute def TransmissionMass;\n\tattribute def TotalMass {\n\t\tread getTotalMass();\n\t}\n\toperation getTotalMass() {\n\t\treturn ChassisMass + EngineMass + TransmissionMass;\n\t}\n\tconstraint TotalMassConstraint {\n\t\tTotalMass <= 2500;\n\t}\n\tport def InitialVelocityPort {\n\t\tin initialVelocity: Real;\n\t}\n\tport def FinalVelocityPort {\n\t\tin finalVelocity: Real;\n\t}\n\tport def MassPort {\n\t\tin mass: Real;\n\t}\n\tport def ForcePort {\n\t\tin force: Real;\n",
    "package 'VehicleMaintenance' {\n\ttype MaintenanceState {\n\t\tvalue Healthy = 'Healthy';\n\t\tvalue UnderMaintenance = 'UnderMaintenance';\n\t}\n\ttype MaintenanceEvent {\n\t\tvalue MaintenanceScheduled = 'MaintenanceScheduled';\n\t\tvalue MaintenanceStarted = 'MaintenanceStarted';\n\t\tvalue MaintenanceCompleted = 'MaintenanceCompleted';\n\t}\n\tattribute def MaintenanceInterval;\n\tattribute def MaxTemp;\n\tattribute def NextMaintenanceTime;\n\tattribute def MaintenanceDuration;\n\tattribute def CurrentTemp;\n\tattribute def MaintenanceStartTime;\n\tport def MaintenancePort {\n\t\tin maintenanceEvent : MaintenanceEvent;\n\t\tin nextMaintenanceTime : NextMaintenanceTime;\n\t\tin",
    "package 'Vehicle' {\n\tattribute def MaxMassLimit;\n\tattribute def FuelMass;\n\tattribute def EngineTorque;\n\tport def EnginePort {\n\t\tin engineTorque: EngineTorque;\n\t}\n\tport def FuelPort {\n\t\tin fuelMass: FuelMass;\n\t}\n\tport def TransmissionPort {\n\t\tout power: Real;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport EnginePort: EnginePort;\n\t\t\tport FuelPort: FuelPort;\n\t\t\tport TransmissionPort: TransmissionPort;\n\t\t\tperform engineControl.calculateTotalMass {\n\t\t\t\tin fuelMass = FuelPort.fuelMass;\n\t\t\t\tin engineTorque = EnginePort.engineTorque;\n\t\t\t\tout totalMass: Real = (fuelMass + curbWeight) as Real;\n\t\t\t}\n\t\t\tperform engineControl.generateTorque {\n\t\t\t\tin engineSpeed: Real;\n\t\t\t\tout engine",
    "package 'Vehicle' {\n\tattribute def DryMass;\n\tattribute def FuelMass;\n\tattribute def TotalMass_FullTank;\n\tattribute def TotalMass_EmptyTank;\n\tattribute def EngineTorque;\n\tattribute def EngineSpeed;\n\tport def ClutchPort {\n\t\tin engineTorque: EngineTorque;\n\t\tin engineSpeed: EngineSpeed;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport DryMassPort: ~Attribute;\n\t\t\tport FuelMassPort: ~Attribute;\n\t\t\tport ClutchPort: ClutchPort;\n\t\t\tperform massControl.calculateTotalMass {\n\t\t\t\tin DryMass = DryMassPort.DryMass;",
    "package 'Vehicle' {\n\tattribute def VehicleMass {\n\t\tinitialValue 1500;\n\t\tminValue 0;\n\t\tmaxValue 2000;\n\t}\n\tattribute def EngineMass {\n\t\tinitialValue 300;\n\t\tminValue 0;\n\t\tmaxValue 1000;\n\t}\n\tattribute def EngineTorque {\n\t\ttype Integer;\n\t\tminValue 0;\n\t}\n\tattribute def EngineSpeed {\n\t\ttype Integer;\n\t\tminValue 0;\n\t}\n\tport def EnginePort {\n\t\tin engineTorque: EngineTorque;\n\t\tin engineSpeed: EngineSpeed;\n\t}\n\tport def VehiclePort {\n\t\tout vehicleMass: VehicleMass;\n\t}\n\tpart context {\n\t\tpart engine {\n\t\t\tport enginePort:",
    "package 'Vehicle' {\n\tattribute def CurbMass;\n\tattribute def FuelMass;\n\tattribute def MaxTotalMass_FullTank;\n\tattribute def MaxTotalMass_EmptyTank;\n\tport def EnginePort {\n\t\tin engineTorque: Real;\n\t}\n\tport def ClutchPort {\n\t\tin clutchEngagement: Boolean;\n\t}\n\tport def GearboxPort {\n\t\tout gearboxTorque: Real;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport EnginePort: EnginePort;\n\t\t\tport ClutchPort: ClutchPort;\n\t\t\tport GearboxPort: GearboxPort;\n\t\t\tperform massControl.calculateTotalVehicleMass {\n\t\t",
    "package 'VehiclePerformanceAnalysis' {\n\tattribute def CurbWeight;\n\tattribute def Payload;\n\tattribute def WheelDiameter;\n\tattribute def TransmissionEfficiency;\n\tattribute def UrbanFuelEconomy;\n\tattribute def HighwayFuelEconomy;\n\tport def UserInputPort {\n\t\tin curbWeight: CurbWeight;\n\t\tin payload: Payload;\n\t\tin wheelDiameter:",
    "package 'VehicleFuelEconomySimulation' {\n\tattribute def CurbWeight;\n\tattribute def Load;\n\tattribute def WheelDiameter;\n\tattribute def TransmissionEfficiency;\n\tport def UserInputPort {\n\t\tin drivingTrajectory: Sequence<Real>;\n\t\tin speedVariation: Sequence<Real>;\n\t}\n\tport def OutputPort {\n\t\tout fuelConsumption: Real;\n\t\tout fuelEconomy: Real;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport userInputPort: UserInputPort;\n\t\t\tperform simulationAnalysis.receiveUserInput {\n\t\t\t\tin drivingTrajectory = userInputPort.drivingTrajectory;",
    "package 'EngineSelectionSystem' {\n\tattribute def EngineType;\n\tattribute def Power;\n\tattribute def Mass;\n\tattribute def Efficiency;\n\tattribute def Cost;\n\tport def EnginePort {\n\t\tin engineType: EngineType;\n\t\tout power: Power;\n\t\tout mass: Mass;\n\t\tout efficiency: Efficiency;\n\t\tout cost: Cost;\n\t}\n\tpart context {\n\t\tpart engine {\n\t\t\tport enginePort: EnginePort;\n\t\t\tperform engineAnalysis.calculatePerformanceIndicators {\n\t\t\t\tin engineType = enginePort.engineType;\n\t\t\t\tout power = powerPort.power;\n\t\t\t\tout mass = massPort.mass;\n\t\t\t\tout efficiency = efficiencyPort.efficiency;\n\t\t\t\tout cost = costPort.cost;\n\t\t\t}\n\t\t\tport powerPort: PowerPort;\n\t\t\tport massPort: MassPort;\n",
    "package 'VehicleWeightCheck' {\n\tattribute def ActualWeight;\n\tattribute def MaxWeight;\n\tport def WeightDataPort {\n\t\tin actualWeight: ActualWeight;\n\t}\n\tport def WeightEvaluationPort {\n\t\tout evaluationResult: Boolean;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport weightDataPort: WeightDataPort;\n\t\t\tperform weightCheck.collectWeightData {\n\t\t\t\tin actualWeight = weightDataPort.actualWeight;\n\t\t\t}\n\t\t}\n\t\tpart weightProcessor {\n\t\t\tport weightDataPort: ~WeightDataPort;\n\t\t\tperform weightCheck.processWeightData {\n\t\t\t\tin actualWeight = weightDataPort.actualWeight;\n\t\t\t\tout maxWeight = maxWeightPort.maxWeight;\n\t\t\t}\n\t\t\tport maxWeightPort: MaxWeightPort;\n\t\t}\n",
    "package 'VehicleMassVerification' {\n\tattribute def MaxMass;\n\ttype Vehicle {\n\t\tattribute def CurrentMass;\n\t}\n\ttype WeighingEquipment {\n\t\toperation measureMass(vehicle: Vehicle): Real;\n\t}\n\ttype MassVerificationUnit {\n\t\toperation evaluateMass(measuredMass: Real): Boolean;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\ttype Vehicle;\n\t\t\tattribute MaxMass = 2500: Real;\n\t\t}\n\t\tpart weighingEquipment {\n\t\t\ttype WeighingEquipment;\n\t\t}\n\t\tpart massVerificationUnit {\n\t\t",
    "package 'TransportationSystem' {\n\tattribute def Capacity;\n\tattribute def EnvironmentalFactors;\n\tattribute def InfrastructureCompatibility;\n\tport def UserInterfacePort {\n\t\tin userInput: UserInput;\n\t\tout vehicleStatus: VehicleStatus;\n\t}\n\tport def DriverPort {\n\t\tin driverInput: DriverInput;\n\t\tout vehicleControl: VehicleControl;\n\t}\n\tport def PassengerPort {\n\t\tin passengerInput: PassengerInput;\n\t\tout passengerComfort: PassengerComfort;\n\t}\n\tport def EnvironmentalPort {\n\t\tin environmentalFactors: EnvironmentalFactors;\n\t}\n\tport def InfrastructurePort {\n\t\tin infrastructureCompatibility: InfrastructureCompatibility;\n\t}\n\tpart context {\n\t\tpart userInterface {\n\t\t\tport",
    "package 'TransportationSystem' {\n\tattribute def Capacity;\n\tattribute def EnvironmentalConditions;\n\tattribute def FuelLevel;\n\tport def DriverPort {\n\t\tin driver: Person;\n\t\tin environmentalConditions: EnvironmentalConditions;\n\t\tout steeringWheel: Control;\n\t\tout acceleratorPedal: Control;\n\t\tout brakePedal: Control;\n\t\tout fuelLevel: FuelLevel;\n\t}\n\tport def PassengerPort {\n\t\tin passenger: Person;\n\t\tout seatBelt: Safety;\n\t}\n\tport def RefuelingPort {\n\t\tin fuel: Fuel;\n\t\tout fuelPump: Control;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport driverPort: DriverPort;\n\t\t\tport passengerPorts [1..4]: array of PassengerPort;\n\t\t\tport refuelingPort: RefuelingPort;\n\t\t\t",
    "package 'VehicleProductLine' {\n\tenum EngineType { FourCylinder, SixCylinder }\n\tenum TransmissionType { Manual, Automatic }\n\tenum CylinderDiameter { Small, Large }\n\ttype Engine {\n\t\tattribute def cylinderCount: int;\n\t\tattribute def cylinderDiameter: CylinderDiameter;\n\t\toperation def getEngineType {\n\t\t\tresult: EngineType =\n\t\t\t\tif (self.cylinderCount = 4) then FourCylinder\n\t\t\t\telse SixCylinder",
    "package 'ConfigurableEngine' {\n\tattribute def CylinderCount;\n\tattribute def CylinderDiameter;\n\tport def EngineConfigPort {\n\t\tin cylinderCount : CylinderCount;\n\t\tin cylinderDiameter : CylinderDiameter;\n\t}\n\tpart context {\n\t\tpart engine {\n\t\t\tport engineConfigPort: EngineConfigPort;\n\t\t\tperform configureEngine {\n\t\t\t\tin cylinderCount = engineConfigPort.cylinderCount;\n\t\t\t\tin cylinderDiameter = engineConfigPort.cylinderDiameter;\n\t\t\t\tcreateCylinders();\n\t\t\t}\n\t\t}\n\t\tinterface engineToCylinders connect engine.engineConfigPort to cylinders.engineConfigPort {\n\t\t\tref flow engineConfigFlow\n\t\t\t\tfrom source.engineConfigPort to target",
    "package 'AutomotiveConfiguration' {\n\tenum EngineType { FourCylinder, SixCylinder }\n\tenum TransmissionType { Manual, Automatic }\n\tenum CylinderDiameter { SeventyMM, OneHundredMM }\n\tclass Engine {\n\t\tattribute EngineType: EngineType;\n\t\tattribute CylinderDiameter: CylinderDiameter;\n\t\tinvariant if EngineType = FourCylinder then CylinderDiameter = SeventyMM;\n\t\tinvariant if EngineType = SixCylinder then CylinderDiameter = OneHundredMM;\n\t}\n\tclass",
    "package 'System' {\n\tattribute def DataFormat;\n\tattribute def MessageFormat;\n\tport def SoftwarePort {\n\t\tin messageFormat: MessageFormat;\n\t\tin dataFormat: DataFormat;\n\t\tout result: void;\n\t}\n\tport def ComputerPort {\n\t\tin messageFormat: MessageFormat;\n\t\tin dataFormat: DataFormat;\n\t\tout result: void;\n\t}\n\tport def StoragePort {\n\t\tin messageFormat: MessageFormat;\n\t\tin dataFormat: DataFormat;\n\t\tout result: void;\n\t}\n\tpart context {\n\t\tpart computer {\n\t\t\tport computerPort: ComputerPort;\n\t\t\tpart software {\n\t\t\t\tport softwarePort: SoftwarePort;\n\t\t\t\tperform processData {\n\t\t\t\t\tin messageFormat = softwarePort.messageFormat;\n\t\t\t\t\tin dataFormat = softwarePort",
    "package 'PowertrainSystem' {\n\tattribute def LogicalPower;\n\tattribute def PhysicalPower;\n\tport def LogicalPowerPort {\n\t\tin logicalPower: LogicalPower;\n\t}\n\tport def PhysicalPowerPort {\n\t\tout physicalPower: PhysicalPower;\n\t}\n\tpart context {\n\t\tpart logicalLayer {\n\t\t\tpart powerProvider {\n\t\t\t\tport logicalPowerPort: LogicalPowerPort;\n\t\t\t\tperform powerGeneration.generatePower {\n\t\t\t\t\tin logicalPower = logicalPowerPort.logicalPower;\n\t\t\t\t\tout powerUnit.physicalPower = powerUnit.powerOutput;\n\t\t\t\t}\n\t\t\t",
    "package 'PowerTransmissionSystem' {\n\tattribute def Power;\n\tattribute def Torque;\n\tport def PowerPort {\n\t\tout power: Power;\n\t}\n\tport def TorquePort {\n\t\tout torque: Torque;\n\t}\n\tpart context {\n\t\tpart system {\n\t\t\tport powerPort: PowerPort;\n\t\t\tport torquePort: TorquePort;\n\t\t\tpart logicalPowertrain {\n\t\t\t\tport powerPort: ~PowerPort;\n\t\t\t\tport torquePort: ~TorquePort;\n\t\t\t\tpart torqueGenerator {\n\t\t\t\t\tport powerPort: ~PowerPort;\n\t\t\t\t\tport torquePort: ~",
    "package 'VehicleFeatureAnnotationSystem' {\n\tattribute def Vehicle;\n\tport def VehiclePort {\n\t\tout vehicle: Vehicle;\n\t}\n\tpart context {\n\t\tpart interior {\n\t\t\tport seatBeltsPort: SeatBeltsPort;\n\t\t\tport frontSeatPort: FrontSeatPort;\n\t\t\tport driverAirbagPort: DriverAirbagPort;\n\t\t\tport alarmSystemPort: AlarmSystemPort;\n\t\t\tperform safetyAnnotation.annotateInteriorComponents {\n\t\t\t\tout seatBelts = seatBeltsPort.seatBelts;\n\t\t\t\tout frontSeat = frontSeatPort.",
    "package 'VehicleDynamicSimulation' {\n\tattribute def InitialVelocity;\n\tattribute def InitialPosition;\n\tattribute def Acceleration;\n\tattribute def TimeStep;\n\tport def InputPort {\n\t\tin initialVelocity : InitialVelocity;\n\t\tin initialPosition : InitialPosition;\n\t\tin acceleration : Acceleration;\n\t\tin timeStep : TimeStep;\n\t}\n\tport def OutputPort {\n\t\tout velocity : Real;\n\t\tout position : Real;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport inputPort: InputPort;\n\t\t\tperform simulation.runSimulation {\n\t\t\t\tin initialVelocity = inputPort.initialVelocity;\n\t\t\t\tin initialPosition = inputPort.initialPosition;\n\t\t\t\tin acceleration = inputPort.acceleration;\n\t\t\t\tin timeStep = inputPort.timeStep;\n\t\t\t\tout velocity = outputPort.vel",
    "package 'Car' {\n\tattribute isMandatory: Boolean;\n\tpackage SafetyFeatures {\n\t\ttype SeatBelt {\n\t\t\t@Safety;\n\t\t\tisMandatory = false;\n\t\t\tpart interior {\n\t\t\t\tpart driverSeat {\n\t\t\t\t\tpart driverSeatBelt {\n\t\t\t\t\t\tisMandatory = true;\n\t\t\t\t\t}\n\t\t\t\t\tpart passengerSeatBelt {",
    "package 'VehicleSafetyComplianceSystem' {\n\ttype SafetyFeature {\n\t\tmandatory: Boolean;\n\t}\n\ttype SeatBelt {\n\t\tnumber: Integer;\n\t}\n\ttype VehicleInterior {\n\t\tpart seatBelts {\n\t\t\ttype seatBelt: SeatBelt;\n\t\t\tnumber = 2;\n\t\t\tsafetyFeature.mandatory = true;\n\t\t}\n\t}\n\ttype DriverAirbag {\n\t\tsafetyFeature.mandatory = false;\n\t}\n\ttype VehicleBody {\n\t\tpart bumper {\n\t\t\tsafetyFeature.mandatory = true;\n\t",
    "package 'RiskManagement' {\n\tattribute def Probability;\n\tattribute def Severity;\n\ttype Cause {\n\t\tattribute def Description;\n\t\tattribute Probability;\n\t}\n\ttype Failure {\n\t\tattribute def Description;\n\t\tattribute Severity;\n\t}\n\ttype Situation {\n\t\tattribute def Description;\n\t\tpart causes {\n\t\t\tCause cause;\n\t\t}\n\t\tpart failures {\n\t\t\tFailure failure;\n\t\t}\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tperform riskAnalysis.analyzeSituation {\n\t\t\t\tin situation = situationPort.situation;\n\t\t\t\tout causes = causesPort.causes;\n\t\t\t\tout failures = failuresPort.failures;\n\t\t\t}\n\t\t}\n\t\tinterface userToRiskManagement connect user.situationPort to riskManagement.",
    "package 'RiskMetadataModeling' {\n\tattribute def ScenarioID;\n\tattribute def ScenarioName;\n\tattribute def CauseProbability;\n\tattribute def FailureType;\n\tattribute def FailureSeverity;\n\tattribute def CausalRelationship;\n\ttype Cause {\n\t\tattribute def CauseID;\n\t\tattribute def CauseName;\n\t\tattribute def CauseProbability;\n\t}\n\ttype Failure {\n\t\tattribute def FailureID;\n\t\tattribute def FailureName;\n\t\tattribute def FailureSeverity;\n\t}\n\ttype Scenario {\n\t\tattribute def ScenarioID;\n\t\tattribute def ScenarioName;\n\t\tpart causes {\n\t\t\tpart cause:",
    "package 'RiskAnalysis' {\n\tattribute def BatteryLevel;\n\tattribute def SeverityLevel;\n\tport def InputPort {\n\t\tin batteryLevel: BatteryLevel;\n\t}\n\tport def OutputPort {\n\t\tout severityLevel: SeverityLevel;\n\t}\n\tpart context {\n\t\tpart battery {\n\t\t\tport batteryLevelPort: InputPort;\n\t\t\tperform riskAnalysis.monitorBatteryLevel {\n\t\t\t\tin batteryLevel = batteryLevelPort.batteryLevel;\n\t\t\t\tout risk = riskAnalysis.analy",
    "package 'System' {\n\tattribute def DecompositionLevel;\n\tport def InterfacePort {\n\t\tin inData: Data;\n\t\tout outData: Data;\n\t}\n\tpart context {\n\t\tpart subsystem1 {\n\t\t\tport interfacePort: InterfacePort;\n\t\t\tpart component1 {\n\t\t\t\tport interfacePort: ~InterfacePort;\n\t\t\t\tperform function1 {\n\t\t\t\t\tin inData = interfacePort.inData;\n\t\t\t\t\tout outData = interfacePort.outData;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart component2 {\n\t\t\t\tport interfacePort: ~InterfacePort;\n\t\t\t\tperform function2 {\n\t\t\t\t\tin inData = interfacePort.inData;\n\t\t\t\t\tout outData =",
    "package 'AutomotiveSystem' {\n\tattribute def Safety;\n\tattribute def Mandatory;\n\tattribute def Optional;\n\tport def SystemViewPort {\n\t\tout systemView: View;\n\t}\n\tpart context {\n\t\tpart rootComponent {\n\t\t\tport systemViewPort: SystemViewPort;\n",
    "package 'Automotive' {\n\talias 'Car' as '汽车 (Automobile)';\n\t// Detailed comments explaining the purpose and usage of the package\n\n\t// Define core component: Automobile\n\tcomponent 'Car' {\n\t\t// Detailed comments explaining the purpose and usage of the component\n\t\tattribute def Torque;\n\t\t// Detailed comments explaining the purpose and usage of the attribute\n\t}\n}",
    "package 'AutomobileDocumentManagementPlatform' {\n\ttype Automobile {\n\t\talias Car;\n\t\tattribute def Documentation;\n\t\tattribute def PhysicalQuantities;\n\t}\n\ttype TorqueValue {\n\t\tstereotype 'ISQ_Standard';\n\t\tattribute def Value;\n\t}\n\ttype Document {\n\t\tattribute def Content;\n\t\tattribute def AttachedTo {\n\t\t\ttype Automobile;\n\t\t\talias Car;\n\t\t}\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tperform searchDocumentation {\n\t\t\t\tin automobile: Automobile;\n\t",
    "package 'Automobile' {\n\ttype TorqueValue {\n\t\treal value;\n\t}\n\ttype Torque {\n\t\talias for TorqueValue;\n\t}\n\tmodel Automobile {\n\t\tparameter def alias = 'Car';\n\t\tparameter def torque: Torque;\n\t\tport def TorquePort {\n\t\t\tout torque: Torque;\n\t\t}\n\t\tpart context {\n\t\t\tpart user {\n\t\t\t\tport TorquePort: TorquePort;\n\t\t\t\tperform importTorqueData.importData {\n\t\t\t\t\tin torqueData: Real;\n\t\t\t\t\tout torque = TorquePort.torque;\n\t\t\t\t\tcreate TorqueValue_t(value: torqueData);\n\t\t\t\t\tupdate TorquePort.torque = TorqueValue_t;\n\t\t\t\t}\n\t\t\t",
    "package 'VehicleSystem' {\n\tenum VehicleSize { Small, Medium, Large }\n\tattribute def EngineCylinders;\n\ttype Engine {\n\t\tattribute def NumberOfCylinders;\n\t\toperation configureEngineCylinders(vehicleSize: VehicleSize) {\n\t\t\tself.NumberOfCylinders = (vehicleSize = Medium) ? 5 : (vehicleSize = Small) ? 4 : 6;\n\t\t}\n\t}\n\ttype Vehicle {\n\t\tattribute def VehicleSize;\n\t\tpart engine: Engine {\n\t\t\toperation configureEngine() {\n\t\t\t\tself.engine.configureEngineCylinders(self.VehicleSize);\n\t\t\t}\n\t\t}\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\ttype Vehicle;\n\t\t\toperation createVehicle(vehicleSize: VehicleSize) {\n\t\t\t\tcreate Vehicle(vehicleSize: vehicleSize);",
    "package 'FuelManagement' {\n\tattribute def Temperature;\n\tattribute def FuelLevel;\n\tport def FuelInterfacePort {\n\t\tin fuelFlow: Real;\n\t\tin fuelReturn: Real;\n\t\tout temperature: Temperature;\n\t\tout fuelLevel: FuelLevel;\n\t}\n\tpart context {\n\t\tpart fuelTank {\n\t\t\tport fuelInterfacePort: FuelInterfacePort;\n\t\t\tperform fuelManagement.manageFuelLevel {\n\t\t\t\tin fuelFlow = fuelInterfacePort.fuelFlow;\n\t\t\t\tout fuelLevel = fuelInterfacePort.fuelLevel;\n\t\t\t}\n\t\t\tperform fuelManagement.monitorFuelTemperature {\n\t\t\t\tout temperature = fuelInterfacePort.temperature;\n\t\t\t}\n\t\t}\n\t\tpart engine {\n\t\t\tport fuelInterfacePort: FuelInterfacePort;\n\t\t\tperform fuelManagement.deliverFuel {\n\t\t\t\tin fuelFlow = fuelInterfacePort.fuelFlow;\n\t\t\t}\n\t\t\tperform fuelManagement.support",
    "package 'Vehicle' {\n\tattribute def mass: Real;\n\ttype AxleAssembly {\n\t\tattribute def axleMass: Real;\n\t\tpart axle {\n\t\t\ttype FrontAxle {\n\t\t\t\tattribute def steeringAngle: Real option;\n\t\t\t\tpart wheel1: Wheel;\n\t\t\t\tpart wheel2: Wheel;\n\t\t\t}\n\t\t\ttype RearAxle {\n\t\t\t\tpart wheel1: Wheel;\n\t\t\t\tpart wheel2: Wheel;\n\t\t\t}\n\t\t}\n\t\t"
]