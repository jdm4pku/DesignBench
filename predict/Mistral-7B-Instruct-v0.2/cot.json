[
    "-- Define the Vehicle Package\npackage Vehicle {\n  -- Define the Vehicle Class\n  class Vehicle {\n    -- Define the Attributes\n    property mass : Real;\n    property status : VehicleStatus;\n\n    -- Define the Relationships\n    relationship engine : Engine;\n    relationship driver : Person;\n  }\n\n  -- Define the VehicleStatus Class\n  class VehicleStatus {\n    property gearSetting : Integer;\n    property acceleratorPosition : Real;\n  }\n}\n\n-- Define the Engine Package\npackage Engine {\n  -- Define the Engine Class\n  class Engine {\n    -- Define the Attributes\n    property power : Real;\n  }\n}\n\n-- Define the Person Package\npackage Person {\n  -- Define the Person Class\n  class Person {\n    -- Define the Attributes\n    property name : String;\n  }\n}\n```",
    "// Define the types\ntype Personnel {\n  name: String\n}\n\ntype Engine {\n  power: Real\n}\n\n// Define the classes\nclass Vehicle {\n  - name: String\n  - type: String\n\n  + driver: Personnel\n\n  Vehicle(name: String, type: String) {\n    self.name = name\n    self.type = type\n  }\n}\n\nclass ManuallyOperatedVehicle < Vehicle {\n  + engine: Engine?\n}\n\nclass PoweredVehicle < Vehicle {\n  + engine: Engine\n}\n\nclass ManuallyOperatedPoweredVehicle < ManuallyOperatedVehicle {\n  + engine: Engine\n}\n```",
    "// Define abstract vehicle component type\nabstract vehicleComponent {\n  - name: String\n}\n\n// Define vehicle component subclasses\nsubclass engine {\n  - power: Real\n}\n\nsubclass transmission {\n  - gearRatio: Real\n}\n\nsubclass wheel {\n  - tireSize: Real\n}\n\n// Define vehicle type\nabstract vehicle {\n  - name: String\n  - components: Set(vehicleComponent) = { engine, transmission, wheel }\n  - numWheels: Integer = 4\n}\n\n// Define vehicle subclasses\nsubclass car {\n  - numDoors: Integer\n}\n\nsubclass truck {\n  - payloadCapacity: Real\n}\n\n// Define vehicle extension points\nextensionPoint vehicleExtensionPoints {\n  extension point vehicleExtension {\n    extensionPointType vehicleExtensionType: String\n  }\n}\n\n// Define component extension points\nextensionPoint componentExtensionPoints {\n  extension point componentExtension {\n    extensionPointType componentExtensionType: String\n  }\n}\n```",
    "-- Define abstract base class for Vehicle\nmodel VehicleModel\n\nabstract class Vehicle {\n    -- Define attribute for engine\n    Engine engine;\n}\n\n-- Define class for SmallVehicle\nclass SmallVehicle extends Vehicle {\n    -- Define attribute for number of cylinders in small engine\n    int numSmallCylinders = 4;\n}\n\n-- Define class for LargeVehicle extends Vehicle {\nclass LargeVehicle extends Vehicle {\n    -- Define attribute for number of cylinders in large engine\n    int numLargeCylinders = 6;\n}\n\n-- Define abstract base class for Engine\nabstract class Engine {\n    -- Define attribute for number of cylinders\n    int numCylinders;\n\n    -- Define subsystem for engine cylinders\n    subsystem Cylinders {\n        int numCylinders;\n    }\n}\n```",
    "-- Define the TrafficSignalSystem Block\nBlock TrafficSignalSystem {\n  -- Define the TrafficSignal Block\n  Block TrafficSignal {\n    -- Define the GreenTrafficSignal Block\n    Block GreenTrafficSignal {\n      isState Green {\n        stateColor 'green';\n      }\n    }\n\n    -- Define the YellowTrafficSignal Block\n    Block YellowTrafficSignal {\n      isState Yellow {\n        stateColor 'yellow';\n      }\n    }\n\n    -- Define the RedTrafficSignal Block\n    Block RedTrafficSignal {\n      isState Red {\n        stateColor 'red';\n      }\n    }\n\n    -- Define the CurrentColor State\n    State CurrentColor {\n      color : String;\n    }\n\n    -- Define the TrafficSignalState Machine\n    StateMachine TrafficSignalStateMachine {\n      InitialState InitialState {\n        transition ToGreen [\n          trigger GreenButtonPressed;\n          source CurrentColor;\n          target GreenTrafficSignal;\n        ];\n\n        transition ToYellow [\n          trigger YellowButtonPressed;\n          source GreenTra",
    "// Define the Information Block\nblock Information {\n  attribute code : String;\n  attribute color : String;\n\n  // Define the Unclassified Information\n  class UnclassifiedInformation {\n    code = 'uncl';\n    color = 'green';\n  }\n\n  // Define the Confidential Information\n  class ConfidentialInformation {\n    code = 'conf';\n    color = 'yellow';\n  }\n\n  // Define the Secret Information\n  class SecretInformation {\n    code = 'secr';\n    color = 'red';\n  }\n\n  // Define the Grade Classification\n  class GradeClassification {\n    attribute level : Integer;\n    attribute points : Real;\n\n    // Define the Grade Levels\n    class LevelA {\n      level = 1;\n      points = 4.0;\n    }\n\n    class LevelB {\n      level = 2;\n      points = 3.0;\n    }\n\n    class LevelC {\n      level = 3;\n      points = 2.0;\n    }\n\n    class LevelD {\n",
    "-- Define abstract base classes\n\nmodel EngineModel\n\nabstract class Engine {\n    - name: String;\n    - numberOfCylinders: Integer(min=4, max=6);\n}\n\nabstract class Vehicle {\n    - name: String;\n    -- Define a relationship between Vehicle and Engine\n    -- A Vehicle has one Engine\n    Engine engine;\n}\n\n-- Define concrete classes\n\nclass SmallVehicle extends Vehicle {\n    Engine engine;\n}\n\nclass LargeVehicle extends Vehicle {\n    Engine engine;\n}\n\nclass Cylinder {\n    -- Define a relationship between Cylinder and Engine\n    -- An Engine has multiple Cylinders\n    Engine engine;\n}\n\n-- Define a relationship between Engine and Cylinder\nEngine :: 0..* Cylinder;\n\n-- Define a relationship between Vehicle and SmallVehicle/LargeVehicle\nVehicle \"1\" SmallVehicle;\nVehicle \"1\" LargeVehicle;\n```",
    "-- Define the system\nmodel VehicleModelingSystem\n\n-- Define the vehicle\npackage VehiclePackage {\n  class Vehicle {\n    -- Quality attributes\n    attribute int maxSpeed;\n    attribute int weight;\n\n    -- Driver information\n    association Driver {\n      end1 Vehicle: 1;\n      end2 Driver: 1;\n    }\n\n    -- Fuel tank\n    class FuelTank {\n      -- Fuel type\n      attribute String fuelType;\n\n      -- Capacity\n      attribute int capacity;\n\n      -- Independent association with vehicle\n      association FuelTank_Vehicle {\n        end1 FuelTank: 1;\n        end2 Vehicle: 1;\n      }\n    }\n\n    -- Define the fuel\n    class Fuel {\n      attribute String name;\n    }\n\n    -- Define the personnel\n    class Personnel {\n      attribute String name;\n    }\n\n    -- Define the fuel and personnel\n    class FuelAndPersonnel {\n      association Fuel {\n        end1 FuelAndPersonnel: 1;\n",
    "-- Define the package for the wheel assembly model\npackage WheelAssemblyModel {\n\n  -- Define the types for the components\n  type WheelBearingUnit {\n    -- Add any attributes or operations as needed\n  }\n\n  type Tire {\n    -- Add any attributes or operations as needed\n  }\n\n  type Bead {\n    -- Add any attributes or operations as needed\n  }\n\n  type Hub {\n    -- Add any attributes or operations as needed\n    property connection: Set(BoltConnection) = {};\n  }\n\n  type Rim {\n    -- Add any attributes or operations as needed\n  }\n\n  type BoltMountingHole {\n    -- Add any attributes or operations as needed\n  }\n\n  type ThreadedHole {\n    -- Add any attributes or operations as needed\n  }\n\n  type BoltConnection {\n    -- Add any attributes or operations as needed\n    property bolt: Bolt;\n    property mountingHole: BoltMountingHole;\n    property threadedHole: ThreadedHole;\n  }\n\n  -- Define",
    "-- Define the system context\nmodel FuelManagementSystem\n\n-- Define the main components\nBlock FuelTankAssembly {\n  self.name = 'FuelTankAssembly';\n  Port fuelPort {\n    self.name = 'FuelPort';\n    self.isInput = true;\n    self.isOutput = true;\n  }\n  Port returnPort {\n    self.name = 'ReturnPort';\n    self.isInput = true;\n    self.isOutput = true;\n  }\n  InternalFlow fuelFlow {\n    self.name = 'FuelFlow';\n    self.source = fuelPort;\n    self.target = engine.fuelPort;\n  }\n  InternalFlow returnFlow {\n    self.name = 'ReturnFlow';\n    self.source = engine.returnPort;\n    self.target = fuelPort;\n  }\n  Block temperatureSensor {\n    self.name = 'TemperatureSensor';\n    self.isObserved = true;\n    DataFlow temperatureDataFlow {\n      self.name = 'TemperatureDataFlow';\n      self.source =",
    "-- Define the Package for the Vehicle System Model\npackage VehicleSystemModel {\n\n  -- Define the Abstract Base Class for Components\n  class Component {\n    -- Define the Attribute for Mass\n    real mass;\n  }\n\n  -- Define the Abstract Base Class for Tire\n  class Tire extends Component {\n  }\n\n  -- Define the Abstract Base Class for Axle\n  class Axle extends Component {\n    real steeringAngle;\n  }\n\n  -- Define the Concrete Class for Default Tire\n  class DefaultTire extends Tire {\n  }\n\n  -- Define the Concrete Class for Default Front Axle\n  class DefaultFrontAxle extends Axle {\n    DefaultTire tire1;\n    DefaultTire tire2;\n  }\n\n  -- Define the Concrete Class for Default Rear Axle\n  class DefaultRearAxle extends Axle {\n    DefaultTire tire1;\n    DefaultTire tire2;\n  }\n\n  -- Define the Concrete Class for Vehicle\n  class Vehicle extends Component {\n    real mass;\n    Default",
    "-- Define the Package\npackage CouplingSystem\n{\n  -- Define the Vehicle\n  class Vehicle\n  {\n    -- Define the Port for the Hitch Reference\n    port HitchRef\n    {\n      type Hitch;\n      multiplicity (0..1);\n    }\n  }\n\n  -- Define the Hitch\n  class Hitch\n  {\n    -- Define the Ball Port\n    port Ball\n    {\n      type Ball;\n      multiplicity (1);\n    }\n\n    -- Define the Vehicle Reference\n    reference Vehicle_ref : Vehicle;\n  }\n\n  -- Define the Ball\n  class Ball\n  {\n  }\n\n  -- Define the Trailer\n  class Trailer\n  {\n    -- Define the Hitch Reference Port\n    port HitchRef\n    {\n      type Hitch;\n      multiplicity (1);\n    }\n  }\n}\n```",
    "-- Define the System Block\nmodel VehiclePowerTransmissionSystem\n\n-- Define the Engine Block\nBlock Engine\n  Port fuelCommand: Input FuelCommandType;\n  Port power: Output PowerType;\n  Port clutch: Output ClutchType;\nend Engine;\n\n-- Define the Transmission Block\nBlock Transmission\n  Port powerIn: Input PowerType;\n  Port clutchIn: Input ClutchType;\n  Port powerOut: Output PowerType;\nend Transmission;\n\n-- Define the Clutch Block\nBlock Clutch\n  Port power: Input PowerType;\n  Port clutch: Output ClutchType;\nend Clutch;\n\n-- Define the Driveshaft Block\nBlock Driveshaft\n  Port powerIn: Input PowerType;\n  Port powerOut: Output PowerType;\nend Driveshaft;\n\n-- Define the RearAxleAssembly Block\nBlock RearAxleAssembly\n  Port powerIn: Input PowerType;\n  Port differentialLeft: Output DifferentialType;\n  Port differentialRight: Output DifferentialType;\nend RearAxle",
    "-- Decomposition 1\n\nmodel MultiArchitectureSystem\n\nsubsystem b11 {\n  Component c1 {\n    port pb {\n      interface pe\n    }\n  }\n\n  Component c2 {\n    -- ...\n  }\n\n  port p1 {\n    interface pe\n  }\n}\n\nsubsystem b12 {\n  Component c3 {\n    port pd {\n      interface pf\n    }\n  }\n\n  Component c4 {\n    -- ...\n  }\n\n  port p2 {\n    interface pf\n  }\n}\n\ninterface pe {\n  -- ...\n}\n\ninterface pf {\n  -- ...\n}\n\n-- Communication between b11 and b12\n\nconnection c1_pf_connection {\n  source c1.pb;\n  target b22.pf;\n}\n\nconnection c3_pe_connection {\n  source b11.p1;\n  target c3.pd;\n}\n\n-- Decomposition 2\n\nmodule b21 {\n  import b1",
    "-- Define the system context\nmodel PowertrainSystem\n\n-- Define the system\npackage Powertrain\nextends Block\n{\n  -- Define the system's ports\n  port FuelCommand : Input {\n    dataType FuelCommandType\n  }\n\n  port EngineStartStop : Input {\n    dataType Boolean\n  }\n\n  port LeftWheelTorque : Output {\n    dataType Real\n  }\n\n  port RightWheelTorque : Output {\n    dataType Real\n  }\n\n  -- Define the system's internal blocks\n  block Engine\n  {\n    -- Define the engine's ports\n    port FuelCommand : Input {\n      dataType FuelCommandType\n    }\n\n    port EngineTorque : Output {\n      dataType Real\n    }\n\n    -- Define the engine's behavior\n    behavior EngineBehavior as\n    {\n      initial node EngineInitialization {\n        FuelCommand.receive()\n      }\n\n      transition EngineStart {\n        if EngineStartStop.value = true then\n          EngineTorque.send(calculateEngineTorque())",
    "-- Model: PowertrainControlSystem\nmodel PowertrainControlSystem\n\n-- Block: PowertrainControlSystem\nblock PowertrainControlSystem {\n  -- Internal Block: FuelCommand\n  internal block FuelCommand {\n    -- Port: FuelCommandInput\n    port FuelCommandInput : Input {\n      data FuelCommand : Integer;\n    };\n  };\n\n  -- Internal Block: EngineControl\n  internal block EngineControl {\n    -- Port: EngineControlInput\n    port EngineControlInput : Input {\n      data EngineControlCommand : Boolean;\n    };\n\n    -- Port: EngineStallSignal\n    port EngineStallSignal : Output {\n      data EngineStall : Boolean;\n    };\n\n    -- Internal Block: Engine\n    internal block Engine {\n      -- State: Idle\n      state Idle {\n        -- Transition: StartEngine\n        transition StartEngine : EngineControlInput.EngineControlCommand -> Engine {\n          guard EngineControlCommand = true;\n          action Engine.start();\n        };\n      };\n\n      -- State: Running\n      state Running {\n        -- Transition: Stop",
    "-- Define the context\ncontext VehiclePowertrainSystem {\n  -- Define the main block\n  Block VehiclePowertrain {\n    -- Define the internal blocks\n    Block Engine {\n      -- Define the ports\n      Input FuelCommand : Real;\n      Output EngineTorque : Real;\n    }\n\n    Block Transmission {\n      -- Define the ports\n      Input EngineTorque : Real;\n      Output TransmittedTorque : Real;\n    }\n\n    Block Wheel {\n      -- Define the ports\n      Input TransmittedTorque : Real;\n      Output WheelTorque : Real;\n    }\n\n    -- Define the connectors\n    Connector PowerFlow {\n      Source Engine;\n      Target Transmission;\n    }\n\n    Connector PowerFlow_1 {\n      Source Transmission;\n      Target Wheel;\n    }\n\n    -- Define the flows\n    Flow FuelCommandFlow {\n      Source VehiclePowertrain.Engine.FuelCommand;\n      Target VehiclePowertrain.Engine.EngineTorque;\n    }\n\n    Flow TransmittedTorqueFlow {\n     ",
    "-- Define the system context\nmodel PowerConnectionSystem\n\n-- Define the vehicle and trailer as external systems\nExternalSystem Vehicle {\n  name = 'Vehicle';\n}\n\nExternalSystem Trailer {\n  name = 'Trailer';\n}\n\n-- Define the hitch ball and trailer coupler as components\nComponent HitchBall {\n  name = 'HitchBall';\n  ownedBy = Vehicle;\n}\n\nComponent TrailerCoupler {\n  name = 'TrailerCoupler';\n  ownedBy = Trailer;\n}\n\n-- Define the power connection and disconnection functions\nOperation Connect {\n  name = 'Connect';\n  preconditions = 'HitchBall.isFree and TrailerCoupler.isFree';\n  postconditions = 'HitchBall.isEngaged and TrailerCoupler.isEngaged';\n  input = HitchBall;\n  output = TrailerCoupler;\n}\n\nOperation Disconnect {\n  name = 'Disconnect';\n  preconditions = 'HitchBall.isEngaged and TrailerCou",
    "-- Define the system\nmodel VehicleTrailerManagementSystem {\n\n  -- Define the vehicle\n  Block vehicle {\n    Property chassis;\n    Property towBall;\n  }\n\n  -- Define the trailer\n  Block trailer {\n    Property coupler;\n    Property frame;\n  }\n\n  -- Define the connection between vehicle and trailer\n  Connection connection {\n    End vehicleEnd (vehicle);\n    End trailerEnd (trailer);\n    Property status;\n  }\n\n  -- Define the system context\n  Context context {\n    Node vehicleNode (vehicle);\n    Node trailerNode (trailer);\n    Node connectionNode (connection);\n\n    Relation connectionRel (connection, vehicleNode, trailerNode);\n  }\n\n  -- Define the initial state of the system\n  Initial p1 {\n    connection.status = \"disconnected\";\n  }\n}\n```",
    "-- Define the vehicle and trailer blocks\n\nmodel DynamicConnectionModel\n\n  -- Vehicle Block\n  Block vehicle {\n    Property towBall {\n      Type TowBallType;\n    }\n  }\n\n  -- Trailer Block\n  Block trailer {\n    Property coupler {\n      Type CouplerType;\n      InternalConnection connectionToVehicle;\n    }\n  }\n\n  -- Define the types\n  Type TowBallType {\n    Attribute isAvailable {\n      Type Boolean;\n      InitialValue true;\n    }\n  }\n\n  Type CouplerType {\n    Attribute isEngaged {\n      Type Boolean;\n      InitialValue false;\n    }\n  }\n\n  -- Define the internal connections\n  InternalConnection connectionToVehicle {\n    Source coupler.connectionToVehicleEnd;\n    Target towBall;\n  }\n\n  -- Define the transitions for hitching and unhitching operations\n  Transition hitching {\n    Source vehicle.towBall.isAvailable = false;\n    Target coupler.isEngaged = true;\n ",
    "\n```vbnet\n// Define the context\ncontext FuelSystemContext {\n  // Define the main system\n  System FuelSystem {\n    // Define the fuel tank assembly\n    Subsystem FuelTankAssembly {\n      Port FuelSupplyPort {\n        dataType Fuel\n      }\n      Port FuelReturnPort {\n        dataType Fuel\n      }\n      Property Temperature {\n        type Real\n      }\n    }\n\n    // Define the engine\n    Subsystem Engine {\n      Port FuelSupplyPort {\n        dataType Fuel\n      }\n      Port FuelReturnPort {\n        dataType Fuel\n      }\n    }\n\n    // Define the connection between fuel tank assembly and engine\n    Connection FuelConnection {\n      source FuelTankAssembly.FuelSupplyPort\n      target Engine.FuelSupplyPort\n    }\n\n    Connection FuelReturnConnection {\n      source Engine.FuelReturnPort\n      target FuelTankAssembly.FuelReturnPort\n    }\n\n    // Define the interface between fuel tank assembly and engine\n    Interface FuelInterface {\n     ",
    "-- Define the system context\ncontext FuelDeliverySystem {\n  import \"SysML/UML/Statements/CommonBehaviors.stereotype\";\n  import \"SysML/UML/Statements/FlowFinal.stereotype\";\n  import \"SysML/UML/Statements/FlowIntermediate.stereotype\";\n  import \"SysML/UML/Statements/FlowSource.stereotype\";\n  import \"SysML/UML/Statements/FlowTarget.stereotype\";\n  import \"SysML/UML/Classes/Class.stereotype\";\n  import \"SysML/UML/Classes/Classifier.stereotype\";\n  import \"SysML/UML/Classes/Feature.stereotype\";\n  import \"SysML/UML/Classes/Property.stereotype\";\n  import \"SysML/UML/Classes/Relationship.stereotype\";\n  import \"SysML/UML/Classes/ValueSpecification.stereotype\";\n  import \"SysML/UML/Classes/NamedElement.stereotype\";\n ",
    "// Define the vehicle assembly system\nmodel AutomobileAssemblySystem\n\n// Define the vehicle assembly\nclass VehicleAssembly {\n    - assemblyLine: AssemblyLine\n    - gearbox: Gearbox\n    - engine: Engine\n}\n\n// Define the assembly line\nclass AssemblyLine {\n    - vehicleAssembly: VehicleAssembly\n}\n\n// Define the gearbox\nclass Gearbox {\n    - input: PowerInput\n    - output: PowerOutput\n}\n\n// Define the engine\nclass Engine {\n    - input: PowerInput\n    - output: PowerOutput\n}\n\n// Define the power input\nclass PowerInput {\n    - name: String\n}\n\n// Define the power output\nclass PowerOutput {\n    - name: String\n}\n\n// Define the relationship between vehicle assembly and assembly line\nVehicleAssembly -> AssemblyLine : assembles\n\n// Define the relationship between assembly line and gearbox\nAssemblyLine -> Gearbox : installs\n\n// Define the relationship between assembly line and engine\nAssemblyLine -> Engine : installs\n\n// Define the relationship between gearbox and engine\nGearbox <--",
    "-- Define the VehicleA system\nmodel VehicleA\n\n-- Define the Off, Starting, Running, Health Management, Maintenance, and Degraded states\nState Off {\n    -- No incoming transitions\n}\n\nState Starting {\n    -- Incoming transitions: PressBrake_and_ReceiveStartSignal\n    transition PressBrake_and_ReceiveStartSignal {\n        source: Off\n        target: Starting\n        guard: (brakePedalPressed and startSignalReceived)\n    }\n}\n\nState Running {\n    -- Incoming transitions: EnterRunning\n    transition EnterRunning {\n        source: Starting\n        target: Running\n    }\n\n    -- Outgoing transitions: ApplyParkingBrake, DetectOverTemperature, and SendOverTemperatureSignal\n    transition ApplyParkingBrake {\n        source: Running\n        target: HealthManagement\n    }\n\n    transition DetectOverTemperature {\n        source: Running\n        target: Degraded\n        guard: temperature > safetyThreshold\n    }\n\n    transition SendOverTemperatureSignal {\n        source: Degraded\n        target",
    "-- Define the Vehicle Package\npackage Vehicle {\n  -- Define the Vehicle Block\n  Block Vehicle {\n    -- Define the Vehicle Statechart\n    Statechart Vehicle_Statechart {\n      State ShutDown {\n        Transition InitiateStartup {\n          Trigger PressBrakePedal & ReceiveStartSignal\n        }\n      }\n\n      State Running {\n        Transition SelfInspection {\n          Guard VehicleIsHealthy\n        }\n      }\n\n      State Degraded {\n        Transition ReturnToRunning {\n          Guard VehicleIsHealthy\n        }\n      }\n\n      State Shutdown {\n        -- No transitions defined\n      }\n    }\n\n    -- Define the Vehicle Properties\n    Property Fuel { type Double }\n    Property MaintenanceInterval { type Double }\n    Property TemperatureThreshold { type Double }\n\n    -- Define the Vehicle Signals\n    Signal PressBrakePedal\n    Signal ReceiveStartSignal\n    Signal VehicleIsHealthy\n    Signal WarningSignal\n\n    -- Define the V",
    "-- Define the simulation context\ncontext SimulationContext {\n  -- Define the vehicle and road entities\n  Block vehicle {\n    -- Define the vehicle's mass, position, velocity, and acceleration properties\n    Real mass;\n    Point position;\n    Real velocity;\n    Real acceleration;\n  }\n\n  Block road {\n    -- Define the road's slope and surface friction coefficient properties\n    Real slope;\n    Real surfaceFrictionCoefficient;\n  }\n\n  -- Define the simulation time series\n  Sequence timeSeries {\n    Time startTime;\n    Time endTime;\n    Time stepSize;\n  }\n\n  -- Define the snapshot recording behavior\n  Behavior snapshotRecordingBehavior {\n    -- Define the input and output actions\n    Action startSnapshot {\n      -- Define the input parameter: the time point for snapshot recording\n      Parameter timePoint : Time;\n    }\n\n    Action stopSnapshot {\n      -- Define the output parameter: the recorded snapshot data\n      DataType snapshotData : SnapshotData;\n    }\n\n    -- Define the internal flow\n    Transition startSnapshot",
    "-- Define the main system\nmodel AutomotiveSystem\n\n-- Define the configurable components\nComponent subsystemA {\n    property configOption1 : Boolean = true;\n    property configOption2 : Boolean = false;\n\n    Component component1;\n    Component component2;\n    Component component3;\n}\n\nComponent subsystemB {\n    property configOption1 : Boolean = true;\n    property configOption2 : Boolean = false;\n\n    Component component4;\n    Component component5;\n    Component component6;\n}\n\n-- Define the main system's configuration\nConfiguration configA {\n    subsystemA.configOption1 = true;\n    subsystemA.configOption2 = false;\n    subsystemB.configOption1 = true;\n    subsystemB.configOption2 = false;\n}\n\nConfiguration configB {\n    subsystemA.configOption1 = false;\n    subsystemA.configOption2 = true;\n    subsystemB.configOption1 = true;\n    subsystemB.configOption2 = false;\n}\n\n-- Define the constraint\nconstraint constraint1 {",
    "-- Define abstract subsystems\n\nabstract Subsystem\n{\n  feature name : String;\n}\n\nabstract SubsystemA <| extends Subsystem\n{\n  feature quantity : Integer;\n}\n\nabstract SubsystemB <| extends Subsystem\n{\n  feature type : String;\n}\n\n-- Define components\n\nComponent part1\n{\n  port p1 : InputOutputPort;\n  feature name : String;\n}\n\nComponent part2\n{\n  port p1 : InputOutputPort;\n  feature name : String;\n}\n\nComponent part3\n{\n  port p1 : InputOutputPort;\n  behavioralVariants variant1, variant2;\n}\n\nComponent part4\n{\n  port p2 : InputOutputPort;\n  feature name : String;\n}\n\nComponent part5\n{\n  port p2 : InputOutputPort;\n  behavioralVariants variant1, variant2;\n}\n\nComponent part6\n{\n  port p1 : InputOutputPort;\n  port p2 : InputOutputPort;\n}\n\n-- Define subsystems\n\n",
    "-- Define the System\nmodel VehicleConfigurationSystem {\n  -- Define the Vehicle System\n  System Vehicle {\n    -- Define the Performance Requirement Block\n    Block PerformanceRequirement {\n      -- Define the Performance Requirement Parameters\n      Parameter highPerformance {\n        name \"High Performance\"\n        type Boolean\n      }\n      Parameter standardPerformance {\n        name \"Standard Performance\"\n        type Boolean\n      }\n    }\n\n    -- Define the Configuration Block\n    Block Configuration {\n      -- Define the Engine Component\n      Component Engine {\n        -- Define the Engine Types\n        Class EngineType {\n          -- Define the 4-cylinder Engine\n          Subclass 4CylinderEngine {\n            property engineType {\n              dataType String\n              initialValue \"4-cylinder\"\n            }\n          }\n\n          -- Define the 6-cylinder Engine\n          Subclass 6CylinderEngine {\n            property engineType {\n              dataType String\n              initialValue \"6-cylinder\"\n            }\n          }\n        }\n\n        -- Define the Engine Instances\n",
    "// Define the system context\nmodel AutomobileSystem\n\n// Define the main package\npackage AutomobileSystem\n\n// Define the vehicle package\npackage Vehicle\n\n// Define the vehicle class\nclass Vehicle {\n    // Define attributes\n    Mass: Real(isQuantity = true, isDerived = false);\n    FuelStatus: Boolean(isDerived = false);\n\n    // Define relationships\n    Engine: Engine;\n    Transmission: Transmission;\n\n    // Define constraints\n    constraint MaxMass {\n        self.Mass <= 2500 // for vehicles with max mass of 2500 kg\n        self.Mass <= 2000 // for vehicles with max mass of 2000 kg\n    }\n\n    constraint FuelStatus {\n        self.FuelStatus = true // for vehicles that must be filled\n        self.FuelStatus = false // for vehicles that can be empty\n    }\n}\n\n// Define the engine package\npackage Engine\n\n// Define the engine class\nclass Engine {\n    // Define attributes\n    Torque: Real(isQuantity = true,",
    "// Define the system\nmodel MassComplianceSystem\n\n// Define the context\ncontext Context\n{\n    // Define the required mass\n    real MaxPermissibleMass = 2500.0;\n}\n\n// Define the vehicle\nclass Vehicle\n{\n    // Define the mass property\n    real mass;\n\n    // Define the operation to measure the mass\n    operation MeasureMass() : real\n    {\n        // TODO: Implement the mass measurement logic\n    }\n}\n\n// Define the test operator\nclass TestOperator\n{\n    // Define the operation to test a vehicle\n    operation TestVehicle(vehicle : Vehicle) : Boolean\n    {\n        // Measure the vehicle mass\n        real measuredMass = vehicle.MeasureMass();\n\n        // Check if the vehicle is compliant\n        return measuredMass <= Context.MaxPermissibleMass;\n    }\n}\n\n// Define the system's behavior\nsequence TestVehicleSequence\n{\n    // Define the input vehicle\n    Vehicle vehicle;\n\n    // Define the test operator\n    TestOperator testOperator;\n\n    //",
    "-- Define the main supply pipe (SpigotBank)\nmodel WaterSupplyNetwork\n\n  Context Context_WaterSupplyNetwork {\n    Requirement r_HotWater {\n      name = 'Hot water must be reliably delivered to all faucets';\n      description = 'Ensure hot water is available at all faucets';\n    }\n\n    Requirement r_ColdWater {\n      name = 'Cold water must be reliably delivered to all faucets';\n      description = 'Ensure cold water is available at all faucets';\n    }\n\n    Requirement r_SimultaneousSupply {\n      name = 'Simultaneous supply of hot and cold water to multiple faucets';\n      description = 'Ensure hot and cold water can be supplied to multiple faucets at the same time';\n    }\n\n    Requirement r_CorrectConnection {\n      name = 'Correct connection of hot and cold water pipelines';\n      description = 'Ensure hot and cold water pipelines are correctly connected';\n    }\n\n    Requirement r_SmoothTransmission {\n      name",
    "// Define the system\nmodel VehicleQualityAnalysisSystem\n{\n  // Define the context\n  Context VehicleQualityAnalysisContext\n  {\n    // Define the system\n    System VehicleQualityAnalysisSystem\n    {\n      // Define the components\n      Component Engine\n      Component Transmission\n      Component FrontAxleAssembly\n      Component RearAxleAssembly\n      Component Vehicle\n      {\n        // Define the properties\n        Property totalMass : real = 0.0;\n      }\n\n      // Define the relationships\n      Relation Engine_isPartOf_Vehicle\n      Relation Transmission_isPartOf_Vehicle\n      Relation FrontAxleAssembly_isPartOf_Vehicle\n      Relation RearAxleAssembly_isPartOf_Vehicle\n      Relation Vehicle_hasComponent_Engine\n      Relation Vehicle_hasComponent_Transmission\n      Relation Vehicle_hasComponent_FrontAxleAssembly\n      Relation Vehicle_hasComponent_RearAxleAssembly\n\n      // Define the data flows\n      DataFlow Engine_massFlow_to",
    "// Define the system context\nmodel VehiclePowertrainSystem\n\n// Define the main block\nblock VehiclePowertrain\n{\n  // Define the engine block\n  block Engine\n  {\n    // Define the engine types\n    FeatureValue engineType_FV {\n      name : EngineType;\n      value : String;\n      dataType : String;\n    }\n\n    // Define the engine properties\n    FeatureValue power_FV {\n      name : Power;\n      value : Real;\n      dataType : Double;\n      lowerBound : 0;\n      upperBound : 1000;\n    }\n\n    FeatureValue mass_FV {\n      name : Mass;\n      value : Real;\n      dataType : Double;\n      lowerBound : 0;\n      upperBound : 1000;\n    }\n\n    FeatureValue efficiency_FV {\n      name : Efficiency;\n      value : Real;\n      dataType : Double;\n      lowerBound : 0;\n      upperBound : 1;\n    }\n\n    FeatureValue reliability_FV",
    "-- Define the context\ncontext Context {\n  -- Define the units\n  Unit mile {\n    name Miles;\n    literals \"mile\";\n    value 5280;\n  }\n\n  Unit gallon {\n    name Gallon;\n    literals \"gallon\";\n    value 231;\n  }\n\n  -- Define the vehicle\n  Block Vehicle {\n    name \"Vehicle\";\n\n    -- Define the powertrain\n    Block Powertrain {\n      name \"Powertrain\";\n      internal Powertrain_Port power_input;\n      internal Powertrain_Port power_output;\n    }\n\n    -- Define the load\n    Block Load {\n      name \"Load\";\n      internal Mass_Flow_Port load_mass_input;\n      internal Mass_Flow_Port load_mass_output;\n      initialValue mass 1000;\n    }\n\n    -- Define the operating conditions\n    Block Operating_Conditions {\n      name \"Operating_Conditions\";\n      internal Operating_Condition urban;\n      internal Operating_Condition highway;\n   ",
    "\n1. Block named \"Vehicle\" with two internal blocks: \"PowerInput\" and \"MotionCalculation\".\n2. \"PowerInput\" block has one input port named \"PowerData\" and one output port named \"Power\".\n3. \"MotionCalculation\" block has three output ports named \"Acceleration\", \"Velocity\", and \"Position\".\n4. Connect \"PowerInput\" output port \"Power\" to \"MotionCalculation\" input port \"Power\".\n5. Connect \"MotionCalculation\" output ports \"Acceleration\", \"Velocity\", and \"Position\" to the environment.\n\nSysML code:\n```vbnet\nmodel Vehicle\n\n  Block Vehicle {\n    Block PowerInput {\n      Port PowerData : Input Real;\n      Port Power : Output Real;\n    }\n\n    Block MotionCalculation {\n      Real timeStep : Constant Real = 0.1;\n      Real mass : Constant Real = 1000.0;\n      Real initialPosition : Constant Real = 0.0;\n      Real initialVelocity : Constant Real = 0.0;\n\n     ",
    "-- Define the vehicle system\nmodel VehicleSystem\n\n-- Define the vehicle as a Block\nBlock Vehicle {\n    mass : Real(initial: 2500.0);\n}\n\n-- Define the front axle assembly as a Block\nBlock FrontAxleAssembly {\n    mass : Real(initial: 150.0);\n}\n\n-- Define the front axle as a RequirementSpecification\nRequirementSpecification FrontAxle {\n    mass : Real;\n    steeringAngle : Real;\n}\n\n-- Define the front wheel as a Block\nBlock FrontWheel {\n    mass : Real;\n}\n\n-- Define the front wheel connection to the front axle\nConnection FrontWheel_to_FrontAxle {\n    source : FrontWheel;\n    target : FrontAxle;\n}\n\n-- Define the front axle connection to the front axle assembly\nConnection FrontAxle_to_FrontAxleAssembly {\n    source : FrontAxle;\n    target : FrontAxleAssembly;\n}\n\n-- Define the rear axle assembly as",
    "-- Define the system\nmodel VehicleManagementSystem {\n\n  -- Define the context\n  Context VehicleContext {\n    Requirement mandatorySafety {\n      name \"Mandatory Safety Features\"\n      description \"Seat belts and bumpers are mandatory safety features.\"\n    }\n\n    Requirement optionalSafety {\n      name \"Optional Safety Features\"\n      description \"Airbags and anti-lock braking systems are optional safety features.\"\n    }\n\n    Requirement security {\n      name \"Security Features\"\n      description \"Alarms and keyless entry systems are security features.\"\n    }\n  }\n\n  -- Define the system\n  Block VehicleManagementSystem {\n    name \"Vehicle Management System\"\n\n    -- Define the internal blocks\n    Block FilterAndOrganize {\n      name \"Filter and Organize\"\n      port SafetyComponents {\n        type Component\n        role \"Safety Components\"\n      }\n\n      port SecurityComponents {\n        type Component\n        role \"Security Components\"\n      }\n\n      internalFeature filter {\n        name \"Filter\"\n      }\n",
    "\n\n```SysMLModel\n-- Define the system\nmodel MySystem\n\n-- Define the layers\npackage Application {\n  -- Define the Application Layer\n  context System {\n    provide Application_Interface: IApplication\n  }\n}\n\npackage Service {\n  -- Define the Service Layer\n  context Application {\n    import \"Application::IApplication\" as Application_Interface;\n\n    provide Service_Interface: IService\n\n    -- Define the dependencies\n    require Data_Interface: IData from Data;\n\n    -- Define the core attributes\n    attribute x: Integer;\n    attribute y: String;\n\n    -- Define the core attribute z\n    attribute z: Integer;\n\n    -- Define the relationship between x, y, and z\n    invariant z = x * y.length;\n\n    -- Define the functionalities\n    operation f1() : Boolean;\n    operation f2() : Integer;\n  }\n}\n\npackage Data {\n  -- Define the Data Layer\n  context Service {\n    provide Data_Interface: IData;\n  }\n}\n\n-- Define the interfaces\ninterface IApplication {\n  --",
    "-- Define the system context\nmodel Powertrain_System\n\n-- Define the main block\nblock Powertrain\n{\n  -- Define the internal context\n  context Internal_Context\n  {\n    -- Define the functional requirements\n    requirement Torque_Generation\n    {\n      description \"The system should generate torque during operation.\"\n      annotation \"http://www.omg.org/spec/SysML/20110701/MOF-Stereotypes/Requirements.stereotype\" \"stereotype\" \"requirement\"\n      annotation \"http://www.omg.org/spec/SysML/20110701/MOF-Stereotypes/Functional_Requirement.stereotype\" \"stereotype\" \"functional_requirement\"\n      annotation \"http://www.omg.org/spec/SysML/20110701/MOF-Stereotypes/NonNegative.stereotype\" \"stereotype\" \"non_negative\"\n      annotation \"http://www.omg.org/spec",
    "-- Define the system\nmodel PowerSystem\n\n-- Define the context\ncontext Context\n  requires PowerSystem_Context in PowerSystem\n\n-- Define the blocks\nBlock Engine\n  extends Node\n  provides Power\n  provides Torque\n\nBlock Powertrain\n  extends Node\n  contains Engine\n\nBlock TorqueGenerator\n  extends Node\n  provides Torque\n\n-- Define the relationships\nRelation Engine_Powertrain\n  source Powertrain\n  target Engine\n  provided Power\n\nRelation TorqueGenerator_Engine\n  source Engine\n  target TorqueGenerator\n  provided Torque\n```",
    "-- Define the package for the vehicle model\npackage VehicleModel {\n\n  -- Define the package for safety components\n  package SafetyComponents {\n    -- Define the abstract class for safety components\n    abstract class SafetyComponent {\n      property name : String;\n      property mandatory : Boolean;\n    }\n\n    -- Define the class for mandatory safety components\n    class MandatorySafetyComponent < SafetyComponent {\n      property isInstalled : Boolean;\n    }\n\n    -- Define the class for safety components that affect both safety and anti-theft\n    class SafetyAntiTheftComponent < SafetyComponent {\n      property isInstalled : Boolean;\n    }\n\n    -- Define the class for safety components that only affect safety\n    class SafetyComponentOnly < SafetyComponent {\n      property isInstalled : Boolean;\n    }\n  }\n\n  -- Define the package for anti-theft components\n  package AntiTheftComponents {\n    -- Define the abstract class for anti-theft components\n    abstract class AntiTheftComponent {\n      property name : String;\n      property isInstalled : Boolean;\n    }\n\n    --",
    "-- Define the context\ncontext VehicleFuelSystem {\n  -- Define the main system\n  System VehicleFuelSystem {\n    -- Define the fuel tank assembly\n    Subsystem FuelTankAssembly {\n      -- Define the fuel tank\n      Part FuelTank {\n        -- Define the fuel temperature sensor\n        Port FuelTemperatureSensor {\n          dataType Real\n          multiplicity (1)..1\n        }\n      }\n\n      -- Define the fuel pump\n      Subsystem FuelPump {\n        -- Define the fuel inlet\n        Port FuelInlet {\n          multiplicity (1)..1\n          connection FuelTank.out\n        }\n\n        -- Define the fuel outlet\n        Port FuelOutlet {\n          multiplicity (1)..1\n          connection (FuelTankAssembly.out)\n        }\n\n        -- Define the return inlet\n        Port FuelReturnInlet {\n          multiplicity (1)..1\n          connection FuelTank.return\n        }\n\n        -- Define the return outlet\n        Port FuelReturnOutlet",
    "-- Define the vehicle system\nmodel VehicleSystem\n\n-- Define the safety and security package\npackage SafetySecurity\n\n-- Define the safety and security requirements\nrequirement SeatBelts {\n    description = 'The vehicle interior must be equipped with two seat belts';\n    mandatory = true;\n}\n\nrequirement Airbag {\n    description = 'An airbag should also be installed in the cockpit';\n    mandatory = false;\n}\n\nrequirement AntiTheftAlarm {\n    description = 'An anti-theft alarm device should be installed inside the vehicle';\n    mandatory = true;\n}\n\nrequirement Bumper {\n    description = 'The vehicle body must be equipped with a bumper';\n    mandatory = true;\n}\n\nrequirement KeylessEntry {\n    description = 'The vehicle body must be equipped with a keyless entry system';\n    mandatory = true;\n}\n\nrequirement Wheels {\n    description = 'The chassis structure is to be fitted with two wheels';\n    mandatory = true;\n}\n\nrequirement AntiLockBrakingSystems {\n    description = 'The",
    "-- Define the context\ncontext VehicleSafetyAndSecurity {\n  import \"SysML/UML/Statements/CommonBehaviors.stereotype\";\n  import \"SysML/UML/Classes/Class.stereotype\";\n  import \"SysML/UML/Classes/ClassifierRole.stereotype\";\n  import \"SysML/UML/Classes/Feature.stereotype\";\n  import \"SysML/UML/Classes/Property.stereotype\";\n  import \"SysML/UML/Classes/Relationship.stereotype\";\n  import \"SysML/UML/Classes/ValueSpecification.stereotype\";\n  import \"SysML/UML/Classes/NamedElement.stereotype\";\n  import \"SysML/UML/Classes/ModelingElement.stereotype\";\n  import \"SysML/UML/Classes/Block.stereotype\";\n\n  -- Define the system\n  Block VehicleSafetyAndSecuritySystem {\n    name \"Vehicle Safety and Security System\";\n\n    -- Define the interior subsystem\n    Block Interior",
    "-- Define the security classification enumeration\nmodel SecurityClassification\ncreate Enumeration SecurityClassificationLevel\n  member Unclassified\n  member Confidential\n  member Secret\nendSecurityClassificationLevel\n\n-- Define the Component class with a security classification attribute\nmodel MySystem\ncreate Class Component\n  feature securityClassification : SecurityClassificationLevel = Unclassified\nendComponent\n```",
    "-- Define the system\nmodel AutomotiveECU {\n\n  -- Define the context\n  Context AutomotiveECUContext {\n    Requirement safetyRequirements;\n    Requirement performanceRequirements;\n  }\n\n  -- Define the system\n  System AutomotiveECU {\n    context AutomotiveECUContext;\n\n    -- Define the Vehicle Control Unit\n    Subsystem VehicleControlUnit {\n      Port canPort {\n        type CANPort;\n        name \"CAN Bus Interface\";\n      }\n\n      InternalBus busIF {\n        name \"Bus Interface\";\n        port canPort;\n      }\n\n      -- Define the VCU internal components\n      Component VehicleControlUnitComponents {\n        -- Add any necessary components here\n      }\n    }\n\n    -- Define the Engine Control Unit\n    Subsystem EngineControlUnit {\n      Port canPort {\n        type CANPort;\n        name \"CAN Bus Interface\";\n      }\n\n      InternalBus busIF {\n        name \"Bus Interface\";\n        port canPort;\n      }\n\n      -- Define the ECU internal components\n     ",
    "-- Define the system context\nmodel BloodGlucoseMeter\n\n-- Define the external environment\ncontext Environment {\n    provide Battery: Battery() as \"Battery\";\n    provide User: Human() as \"User\";\n}\n\n-- Define the system\nsystem BloodGlucoseMeterSystem {\n    -- Define the system's internal structure\n    part BatteryMonitor {\n        provide BatteryStatus: Real() as \"BatteryStatus\";\n    }\n\n    part AlarmSystem {\n        provide Alarm: Alarm() as \"Alarm\";\n        provide EmergencyResponse: EmergencyResponse() as \"EmergencyResponse\";\n    }\n\n    -- Define the system's behavior\n    behavior BloodGlucoseMeterBehavior {\n        -- Define the system's interactions with the environment\n        interaction BatteryDetection {\n            -- Define the precondition\n            precondition BatteryIsDetected {\n                Battery.BatteryStatus < 10.0;\n            }\n\n            -- Define the action\n            action BatteryAlert {\n                Alarm.Trigger(\"BatteryLow\");",
    "-- Constants Package\npackage Constants {\n  -- Mathematical Constants\n  Constant e {\n    name := 'e';\n    value := 2.7182818284590451;\n    annotation 'http://www.omg.org/spec/SysML/20110701/MOF-annotation/1.0/unitless';\n  }\n\n  Constant pi {\n    name := 'pi';\n    value := 3.14159265358979323846;\n    annotation 'http://www.omg.org/spec/SysML/20110701/MOF-annotation/1.0/unitless';\n  }\n\n  -- Physical Constants\n  Constant c {\n    name := 'c';\n    value := 299792458.0;\n    annotation 'http://www.omg.org/spec/SysML/20110701/MOF-annotation/1",
    "// Define Tire Class\nclass Tire {\n    -- Attribute: Manufacturer\n    String manufacturer : required;\n\n    -- Attribute: Rim Diameter\n    real rimDiameter : required;\n\n    -- Attribute: Width\n    int width : required;\n}\n\n// Define Tire Data Type\ndata TireData {\n    -- Attribute: Manufacturer\n    String manufacturer : required;\n\n    -- Attribute: Rim Diameter\n    real rimDiameter : required;\n\n    -- Attribute: Width\n    int width : required;\n}\n\n// Define Tire Instance\nTire myTire1 = new Tire {\n    manufacturer = \"Michelin\";\n    rimDiameter = 18.0;\n    width = 245;\n};\n\n// Define French Tire Instance\nTire myTire2 = new Tire {\n    manufacturer = \"Michelin\";\n    rimDiameter = 17.5;\n    width = 225;\n};\n\n// Define German Tire Instance\nTire myTire3 = new T",
    "-- Define the package for the automotive component model\npackage automotiveComponentModel {\n\n  -- Define the Vehicle type\n  type Vehicle {\n    mass: Real[1..1] = 1200.0 \"kg\";\n    length: Real[1..1] = 4.82 \"m\";\n\n    -- Define the left and right front wheels\n    leftWheel: Wheel;\n    rightWheel: Wheel;\n\n    -- Constraint to ensure each vehicle has a pair of left and right wheels\n    invariant count(all owning: Part | self.owns(owning)) = 2;\n  }\n\n  -- Define the Wheel type\n  type Wheel {\n    hubDiameter: Real[1..1] = 18.0 \"in\";\n    width: Real[1..1] = 245.0 \"mm\";\n\n    -- Calculate the outer diameter based on hub diameter and tire height\n    outerDiameter: Real[1..1] = (hubDiameter * 3.14159265",
    "// Define the types for the engine and transmission\ntype Engine {\n  - cylinders : Integer (min = 4, max = 6);\n}\n\ntype Transmission {\n  - type : String ({\"manual\", \"automatic\"});\n}\n\n// Define the vehicle class\nclass Vehicle {\n  // Define the attributes\n  + engine : Engine;\n  + transmission : Transmission;\n\n  // Define the constraints\n  + engine.cylinders = if (self.performanceLevel = \"high\") then 6 else 4;\n  + transmission.type = if (self.performanceLevel = \"high\") then \"automatic\" else \"manual\";\n  + engine.cylinders = if (transmission.type = \"manual\") then 4 else 6;\n}\n\n// Define the performance level attribute for the vehicle\nattribute performanceLevel of Vehicle {\n  - type : String ({\"low\", \"high\"});\n}\n```",
    "-- Define the system\nmodel AutomotiveComponents {\n\n  -- Define the vehicle\n  System Vehicle {\n    mass: Real(value: 1200.0, unit: \"kg\");\n    length: Real(value: 4.82, unit: \"m\");\n\n    -- Define wheel assembly\n    Class WheelAssembly {\n      property radiusBrakeDisc: Real(value: 95.0, unit: \"mm\");\n\n      -- Define wheel\n      Class Wheel {\n        property rimDiameter: Real(value: 18.0, unit: \"inch\");\n        property tireWidth: Real(value: 245.0, unit: \"mm\");\n        property tireHeight: Real(value: 45.0, unit: \"mm\");\n        property outerDiameter: Real();\n\n        -- Define tire\n        Class Tire {\n          property treadDepth: Real(value: 6.0, unit: \"mm\");\n          property minimumTreadDepth: Real(value: 3.5, unit: \"mm\");\n        }\n\n",
    "-- Model: Automotive Fuel System\n\nmodel AutomotiveFuelSystem\n\n-- Requirements\nrequirement FuelSupply {\n    description \"The system is able to deliver fuel to the engine or other components.\"\n}\n\nrequirement FuelReturn {\n    description \"The system is able to receive returned fuel.\"\n}\n\nrequirement FuelCirculationEfficiency {\n    description \"Fuel can circulate efficiently among all components.\"\n}\n\nrequirement FuelCirculationSafety {\n    description \"Fuel can circulate safely among all components.\"\n}\n\nrequirement FuelTemperatureMonitoring {\n    description \"The system is able to monitor and transmit fuel temperature information.\"\n}\n\n-- Blocks\nblock FuelTankAssembly {\n    name \"Fuel Tank Assembly\";\n    provides FuelSupply, FuelReturn;\n    requires --;\n\n    port FuelOutlet {\n        name \"Fuel Outlet\";\n        type Fuel;\n        direction out;\n    }\n\n    port FuelInlet {\n        name \"Fuel Inlet",
    "-- Define the base physical quantities\n\nModel PhysicalQuantities\n\nParameter Length <float value=\"0.0\"> -- Length [m]\nParameter Mass <float value=\"0.0\"> -- Mass [kg]\nParameter Time <float value=\"0.0\"> -- Time [s]\nParameter ElectricCurrent <float value=\"0.0\"> -- Electric Current [A]\nParameter Temperature <float value=\"0.0\"> -- Temperature [K]\nParameter AmountOfSubstance <float value=\"0.0\"> -- Amount of Substance [mol]\nParameter LuminousIntensity <float value=\"0.0\"> -- Luminous Intensity [cd]\n\n-- Define the derived physical quantities\n\nModel DerivedPhysicalQuantities\n\nParameter Velocity <stereotype=\"DerivedValue\"> velocity: Real(base_Quantity=Time, base_Unit=\"m/s\")\nParameter Acceleration <stereotype=\"DerivedValue\"> acceleration: Real(base_Quantity=Mass, base_Quantity2=Time, base_Unit=\"m/s^2\")\nParameter Force <stereotype",
    "-- Define the library package\npackage UnitSystemLibrary {\n  -- Define the context\n  context Context {\n    -- Define the base types\n    Type ISQ {\n      -- Define the ISQ package\n      package ISQ {\n        -- Define the ISQ types\n        Type Quantity {\n          attribute name: String;\n          attribute symbol: String;\n          attribute dimension: String;\n        }\n\n        Type Unit {\n          attribute name: String;\n          attribute symbol: String;\n          attribute conversionFactor: Real;\n          associationTo Quantity: hasUnit;\n        }\n      }\n    }\n\n    Type USCustomaryUnits {\n      -- Define the USCustomaryUnits package\n      package USCustomaryUnits {\n        -- Define the USCustomaryUnits types\n        Type Unit {\n          attribute name: String;\n          attribute symbol: String;\n          attribute conversionFactor: Real;\n          associationTo Quantity: hasUnit;\n        }\n      }\n    }\n\n    -- Define the conversion relationship between ISQ and USCustomaryUnits\n    Unit ISQ_Unit: Unit {\n      name: \"IS",
    "-- Define the context of the system\ncontext HeadlampAdjustmentSystem {\n  -- Define the units for the system\n  annotation this.units = \"SI\";\n\n  -- Define the required input and output interfaces\n  interface Input {\n    real tiltAngle_degrees;\n  }\n\n  interface Output {\n    real adjustedAngle_degrees;\n  }\n\n  -- Define the system block\n  Block HeadlampAdjustmentSystem {\n    -- Define the internal variables\n    real minAngle_degrees = 50.0;\n    real maxAngle_degrees = 80.0;\n\n    -- Define the internal operation to adjust the headlamp angle\n    Operation adjustHeadlampAngle(Input input) returns Output {\n      real angle = input.tiltAngle_degrees;\n      real adjustedAngle = angle;\n\n      -- Check if the input angle is within the acceptable range\n      if (angle < minAngle_degrees) then {\n        adjustedAngle = minAngle_degrees;\n      }\n      if (angle > maxAngle_degrees) then {\n        adjusted",
    "-- Define the Block 'System'\nBlock System {\n  -- Define the Context 'SystemContext'\n  Context SystemContext {\n    -- Define the Package 'DataTypes'\n    Package DataTypes {\n      -- Define the Enumeration 'Status'\n      Enumeration Status {\n        -- Define the Literal 'Red'\n        Literal Red {\n          name = 'Red'\n        }\n\n        -- Define the Literal 'Yellow'\n        Literal Yellow {\n          name = 'Yellow'\n        }\n\n        -- Define the Literal 'Green'\n        Literal Green {\n          name = 'Green'\n        }\n      }\n\n      -- Define the DataType 'UnsignedInteger'\n      DataType UnsignedInteger {\n        -- Define the Property 'isNonNegative'\n        Property isNonNegative {\n          type = Boolean\n          isDerived = true\n          expression = 'self.value >= 0'\n        }\n      }\n\n      -- Define the DataType 'UnsignedFloat'\n      DataType UnsignedFloat {\n        -- Define the Property 'isNonNegative",
    "-- Define types\ntype Person {\n  name : String;\n}\n\n-- Define collections\ncollection Bag {\n  - sparePart : SparePart;\n}\ntype SparePart {\n  id : Integer;\n}\n\ncollection List[Integer] {\n  - integerValue : Integer;\n}\n\nset Set[String] {\n  -- empty\n}\n\ncollection OrderedSet[Person] {\n  - person : Person;\n}\n\narray RealArray[4] {\n  -- empty\n}\n\n-- Define relationships\nrelationship SparePart_in_Bag {\n  source : Bag;\n  target : SparePart;\n}\n\nrelationship Person_in_OrderedSet {\n  source : OrderedSet[Person];\n  target : Person;\n}\n\nrelationship List_of_PersonnelSets {\n  source : List[Set[Person]];\n  target : Set[Person];\n}\n\nrelationship RealArray_of_RealNumbers {\n  source : RealArray[4];\n  target : Real;\n}\n```",
    "Model tireSystem {\n  // Define a class for tire\n  Class Tire {\n    Attribute manufacturer : String;\n    Attribute rimDiameter : Real;\n    Attribute tireWidth : Real;\n    Attribute installationPosition : Vector[3] of Real;\n  }\n\n  // Define a container for tires\n  Package Tires {\n    +tire : Tire;\n  }\n}\n```",
    "-- Define the main system block\nmodel AscentSystem\n\n-- Define the clock\nBlock clock_0\n    property time[0..*] : Real;\n\n-- Define the context\nContext Context_0\n    import clock_0 as Clock;\n\n-- Define the Block defining the spacecraft\nBlock Spacecraft_0\n    property position[0..*] : Real[3];\n    property velocity[0..*] : Real[3];\n    property time : Real;\n\n-- Define the Block defining the trajectory recorder\nBlock TrajectoryRecorder_0\n    property recordedData[0..*] : TrajectoryData;\n\n-- Define the TrajectoryData type\nType TrajectoryData\n    properties:\n        time : Real;\n        position : Real[3];\n        velocity : Real[3];\n\n-- Define the internal connection between Spacecraft_0 and TrajectoryRecorder_0\nConnection Spacecraft_to_TrajectoryRecorder\n    source : Spacecraft_0.time;\n    target : TrajectoryRecorder_0.record(Spacecraft_0.position,",
    "-- Define the Alloy and Metal packages\npackage Alloy {\n  -- Define the Alloy class\n  class Alloy {\n    property name : String;\n    property tensileStrength : Real;\n\n    -- Define the composition relationship\n    relationship hasComponent(self : Alloy, component : Material) {\n      -- Define the mass fraction constraint\n      constraint {\n        self.mass : Real = sum(component.mass);\n        component.mass : Real >= 0;\n      }\n    }\n  }\n}\n\npackage Metal {\n  -- Define the Material class\n  class Material {\n    property name : String;\n    property atomicMass : Real;\n\n    -- Define the mass property\n    property mass : Real;\n  }\n}\n\n-- Define the Alloy and Metal types\ntype AlloyType = Alloy;\ntype MaterialType = Material;\n\n-- Define the Alloy and Metal instances\nAlloy \"Iron\" {\n  name = \"Iron\";\n  tensileStrength = 200.0 MPa;\n}\n\nAlloy \"Carbon\" {",
    "-- Define the EngineeringMaterials package\npackage EngineeringMaterials {\n\n  -- Define the Material class\n  class Material {\n    property atomicMass : real;\n    property name : String;\n\n    -- Define the MetalAlloy subclass\n    subclass MetalAlloy {\n      property composition : Set(Material);\n      property tensileStrength : real;\n\n      -- Define the HighStrengthSteel subclass\n      subclass HighStrengthSteel {\n        property massFractionIron : real;\n        property massFractionCarbon : real;\n        property massFractionManganese : real;\n      }\n    }\n  }\n}\n```",
    "-- Define the system context\ncontext MyPubSubSystem {\n  -- Define the system\n  System MyPubSub {\n    -- Define the server\n    Node Server {\n      -- Define the message buffer\n      InternalBuffer MessageBuffer;\n\n      -- Define the topic management\n      TopicManagement TopicManagement {\n        -- Define the list of topics\n        TopicList TopicList;\n\n        -- Define the relationship between topics and subscribers\n        SubscriptionList SubscriptionList;\n      }\n\n      -- Define the interface for message publishing\n      Operation publishMessage(Message msg : Message) : Boolean {\n        -- Add the message to the buffer\n        MessageBuffer.add(msg);\n\n        -- Distribute the message to subscribers\n        for (Subscriber subscriber : SubscriptionList.allSubscribers) {\n          if (subscriber.Topic in TopicList.allTopics) {\n            subscriber.receiveMessage(msg);\n          }\n        }\n\n        -- Return success\n        return true;\n      }\n    }\n\n    -- Define the message producer\n    Node Producer {\n",
    "-- Define the context\ncontext VehicleFuelSystem {\n  // Define the main blocks\n  Block FuelTankAssembly {\n    -- Define internal ports\n    Port FuelIn { type Fuel; }\n    Port FuelOut { type Fuel; }\n\n    -- Define internal features\n    Feature FuelCapacity { type real; value 50; }\n    Feature TemperatureSensor { type TemperatureSensor; }\n\n    -- Define internal relationships\n    Relationship FuelSupply {\n      source FuelTankAssembly.FuelOut;\n      target Engine.FuelIn;\n    }\n\n    -- Define internal behavior\n    Activity FuelSupplyActivity {\n      Action FuelSupplyAction {\n        input FuelTankAssembly.FuelIn;\n        output Engine.FuelIn;\n      }\n    }\n  }\n\n  Block Engine {\n    -- Define internal ports\n    Port FuelIn { type Fuel; }\n    Port FuelReturn { type Fuel; }\n\n    -- Define internal features\n    Feature FuelCapacity { type real; value 2",
    "-- Define the main blocks\n\nBlock Producers {\n  Property message : String;\n}\n\nBlock Server {\n  Property topic : String;\n  Property subscribers : Set(Consumer);\n  Property messages : Set(Message);\n}\n\nBlock Consumers {\n  Property topic : String;\n}\n\n-- Define the relationships\n\nRelation Producer_to_Server {\n  Source Producers;\n  Target Server;\n  Navigation message : message;\n}\n\nRelation Server_to_Consumer {\n  Source Server;\n  Target Consumers;\n  Navigation topic : topic;\n}\n\nRelation Consumer_to_Server {\n  Source Consumers;\n  Target Server;\n}\n\n-- Define the messages\n\nMessage Subscription_Request {\n  Source Consumers;\n  Target Server;\n}\n\nMessage Message_Publish {\n  Source Producers;\n  Target Server;\n  Navigation message : message;\n}\n\nMessage Message_Delivery {\n  Source Server;\n  Target Consumers;\n  Navigation",
    "-- Define the system\nmodel TransportationSystem {\n\n  -- Define the context\n  Context Context {\n    Requirement \"The system is designed to provide transportation services for users.\" as requirement_1;\n    Requirement \"Users (the driver and up to four passengers) can enter the vehicle.\" as requirement_2;\n    Requirement \"The driver is responsible for operating the vehicle to complete travel tasks.\" as requirement_3;\n    Requirement \"During vehicle use, if the fuel level falls below 10% of the maximum tank capacity, the driver may go to a gas station to refuel.\" as requirement_4;\n    Requirement \"Environmental factors will be taken into account throughout the process.\" as requirement_5;\n    Requirement \"After transportation is completed, all individuals exit the vehicle safely.\" as requirement_6;\n    Requirement \"This system focuses on facilitating user boarding, timely refueling during the journey, and ensuring the smooth boarding and alighting of passengers and the driver.\" as requirement_7;\n  }\n\n  -- Define the system\n  Block TransportationSystem_Block {\n    name \"TransportationSystem",
    "-- Define the System\nmodel FuelManagementSystem {\n\n  -- Define the Fuel Tank Assembly\n  Block FuelTankAssembly {\n    -- Define the Fuel Tank\n    Block FuelTank {\n      -- Define the Fuel Port\n      Port FuelPort_Supply {\n        data Fuel {\n          temperature: Real\n        }\n      }\n\n      -- Define the Fuel Port for Fuel Return\n      Port FuelPort_Return {\n        data Fuel {\n          temperature: Real\n        }\n      }\n\n      -- Define the Interface for Fuel Supply\n      Interface FuelInterface_Supply {\n        signal FuelFlow {\n          flow_direction: FlowDirection::forward\n        }\n      }\n\n      -- Define the Interface for Fuel Return\n      Interface FuelInterface_Return {\n        signal FuelFlow {\n          flow_direction: FlowDirection::reverse\n        }\n      }\n\n      -- Connect the Fuel Ports to the Interfaces\n      Provide FuelPort_Supply -> FuelInterface_Supply\n      Provide",
    "-- Define the context\ncontext VehicleFuelSystemManagement {\n  -- Define the main system\n  System VehicleFuelSystem {\n    -- Define the components\n    Component FuelTankAssembly {\n      -- Define the ports\n      Port fuelSupplyPort : FuelInterface {\n        data FuelTemperature : Real;\n      };\n      Port fuelReturnPort : FuelInterface {\n        data FuelTemperature : Real;\n      };\n    };\n\n    Component Engine {\n      -- Define the ports\n      Port engineFuelSupplyPort : FuelInterface {\n        data FuelTemperature : Real;\n      };\n      Port engineFuelReturnPort : FuelInterface {\n        data FuelTemperature : Real;\n      };\n    };\n\n    -- Define the interfaces\n    Interface FuelInterface {\n      data FuelTemperature : Real;\n    };\n\n    -- Define the connections\n    Connection fuelTankAssemblyToEngine {\n      source FuelTankAssembly.fuelSupplyPort;\n      target Engine.engineFuelSupplyPort;\n    };\n\n   ",
    "-- Define the system context\ncontext Context {\n  -- Define the system\n  System System {\n    -- Define the main flow\n    Flow mainFlow {\n      -- Define the initial node\n      Node initialNode {\n        -- Define the user selecting a scene\n        ActivityFinalNode userSelectsScene {\n          output Scene selectedScene\n        }\n      }\n\n      -- Define the first flow node\n      Node firstFlowNode {\n        -- Define the automatic focusing activity\n        Activity automaticFocusing {\n          input Scene scene\n          output IntermediateImage intermediateImage\n        }\n      }\n\n      -- Define the second flow node\n      Node secondFlowNode {\n        -- Define the capturing activity\n        Activity capturing {\n          input IntermediateImage intermediateImage\n          output Photo finalPhoto\n        }\n      }\n\n      -- Connect the nodes\n      Connect automaticFocusing.output -> firstFlowNode.input\n      Connect firstFlowNode.output -> capturing.input\n      Connect capturing.output -> mainFlow.output\n    }\n  }\n}\n```",
    "-- Model: PhotographyWorkflowSystem\n\nModel PhotographyWorkflowSystem {\n  Requirement \"User selects or sets a scene to be photographed\" as SceneSelection {\n    Provided \"Scene\" Scene;\n  }\n\n  Requirement \"System performs focusing on the selected scene\" as Focusing {\n    Provided \"Scene\" Scene;\n    Provided \"ClearFocus\" ClearFocus;\n\n    Action Focus {\n      Precondition SceneSelection.Scene = Focusing.Scene;\n      Postcondition ClearFocus;\n    }\n  }\n\n  Requirement \"System generates an intermediate image\" as ImageGeneration {\n    Provided \"ClearFocus\" ClearFocus;\n    Provided \"IntermediateImage\" IntermediateImage;\n\n    Action GenerateIntermediateImage {\n      Precondition ClearFocus;\n      Postcondition IntermediateImage;\n    }\n  }\n\n  Requirement \"System carries out the shooting operation\" as Shooting {\n    Provided \"IntermediateImage\" IntermediateImage;\n    Provided \"HighQualityPhotoOutput\" HighQualityPhotoOutput;\n\n    Action Sh",
    "-- Define the context\ncontext Context {\n  -- Define the system\n  System PhotographySystem {\n    -- Define the external interfaces\n    ProvidedInterface UserInterface {\n      -- Define the provided operations\n      Operation SelectScene {\n        -- Define the input and output parameters\n        Parameter Scene scene;\n      }\n    }\n\n    ProvidedInterface ImageSensor {\n      -- Define the provided operations\n      Operation Focus {\n        -- Define the input and output parameters\n        Parameter Scene scene;\n        Parameter Image image;\n      }\n\n      Operation Shoot {\n        -- Define the input and output parameters\n        Parameter Image image;\n        Parameter Photograph photograph;\n      }\n    }\n\n    -- Define the internal components\n    Component Camera {\n      -- Define the internal ports\n      Port FocusPort : ImageSensor.Focus;\n      Port ShootPort : ImageSensor.Shoot;\n\n      -- Define the internal connections\n      Connection FocusConnection {\n        source FocusPort.image;\n        target : FocusingComponent.image;\n      }\n\n      Connection ShootConnection {\n        source ShootPort.phot",
    "-- Define the context\ncontext Context {\n  -- Define the system\n  System PhotographySystem {\n    -- Define the external interfaces\n    ProvidedPort FocusInput {\n      dataType FocusData\n    }\n\n    ProvidedPort ShootOutput {\n      dataType PhotographData\n    }\n\n    -- Define the internal blocks\n    Block FocusProcessor {\n      -- Define the internal interfaces\n      ProvidedPort FocusInput_p {\n        dataType FocusData\n      }\n\n      RequiredPort FocusOutput_r {\n        dataType FocusData\n      }\n\n      -- Define the internal behavior\n      behavior FocusBehavior {\n        -- Define the focus processing operation\n        operation FocusProcessing {\n          Precondition: FocusInput_p.received = true\n          Postcondition: FocusOutput_r.provided = FocusData(focusValue = focusValue)\n        }\n      }\n    }\n\n    Block Shooter {\n      -- Define the internal interfaces\n      RequiredPort FocusInput_r {\n        dataType FocusData\n      }\n\n      ProvidedPort ShootOutput_p {\n        dataType",
    "-- Define the main block 'PhotographyWorkflow'\nblock PhotographyWorkflow {\n  -- Define the internal block 'Camera'\n  internal Camera {\n    -- Define the internal block 'Scene'\n    internal Scene {\n      -- Define the attribute 'desired'\n      attribute desired : String;\n    }\n\n    -- Define the internal block 'Focus'\n    internal Focus {\n      -- Define the input 'Scene'\n      input Scene : Scene;\n\n      -- Define the output 'FocusedImage'\n      output FocusedImage : Image;\n    }\n\n    -- Define the internal block 'Image'\n    internal Image {\n      -- Define the attribute 'frame'\n      attribute frame : ImageData;\n    }\n\n    -- Define the internal block 'Shoot'\n    internal Shoot {\n      -- Define the input 'FocusedImage'\n      input FocusedImage : Image;\n\n      -- Define the output 'Picture'\n      output Picture : Picture;\n    }\n\n    -- Define the internal block 'Picture'\n    internal Picture {\n      -- Define the attribute 'phot",
    "-- Define the context\ncontext PhotographyWorkflow {\n  import \"SysML/UML/Statements/CommonBehaviors.stereotype\";\n  import \"SysML/UML/Classes/Class.stereotype\";\n  import \"SysML/UML/Classes/ClassifierRole.stereotype\";\n  import \"SysML/UML/Classes/Feature.stereotype\";\n  import \"SysML/UML/Classes/Property.stereotype\";\n  import \"SysML/UML/Classes/Relationship.stereotype\";\n  import \"SysML/UML/Classes/Association.stereotype\";\n  import \"SysML/UML/Classes/Generalization.stereotype\";\n  import \"SysML/UML/Classes/Package.stereotype\";\n  import \"SysML/UML/Classes/Block.stereotype\";\n  import \"SysML/UML/Classes/ValueSpecification.stereotype\";\n  import \"SysML/UML/Classes/Action.stereotype\";\n  import \"SysML/UML/Classes",
    "\n\nBlock 'Camera' {\n  Port 'SceneInput' {\n    Type Scene\n  }\n\n  Port 'FocusOutput' {\n    Type Focus\n  }\n\n  Port 'ShootInput' {\n    Type Focus\n  }\n\n  Port 'PhotoOutput' {\n    Type Photo\n  }\n\n  InternalBlock 'Focusing' {\n    Port 'FocusInput' {\n      Type Focus\n    }\n\n    Port 'FocusOutput' {\n      Type Focus\n    }\n\n    Action FocusAction {\n      Precondition FocusInput != null\n      Postcondition FocusOutput != null\n      Body FocusActionBody\n    }\n\n    Flow 'FocusFlow' {\n      Source FocusInput\n      Target FocusOutput\n      Action FocusAction\n    }\n  }\n\n  InternalBlock 'Shooting' {\n    Port 'ShootInput' {\n      Type Focus\n    }\n\n    Port 'PhotoOutput' {\n      Type Photo\n    }\n\n    Action ShootAction {\n      Precondition ShootInput != null\n      Postcondition PhotoOutput != null\n      Body ShootActionBody\n    }\n\n   ",
    "-- Define the context\ncontext Context {\n  -- Define the system\n  System PhotographyWorkflow {\n    -- Define the input and output interfaces\n    ProvidedPort takePhoto {\n      Operation takePhoto_op() {\n        -- Define the precondition\n        Precondition pre_takePhoto {\n          -- No precondition\n        }\n      }\n    }\n\n    RequiredPort displayPhoto {\n      Operation displayPhoto_op() {\n        -- Define the postcondition\n        Postcondition post_displayPhoto {\n          -- No postcondition\n        }\n      }\n    }\n\n    -- Define the internal blocks\n    Block focus {\n      -- Define the input and output interfaces\n      ProvidedPort acquireScene {\n        Operation acquireScene_op() {\n          -- Define the precondition\n          Precondition pre_acquireScene {\n            -- No precondition\n          }\n        }\n      }\n\n      RequiredPort focusResult {\n        Operation focus_op() {\n          -- Define the postcondition\n          Postcondition post_focus {\n            Image image;\n          }\n        }\n      }\n    }\n",
    "-- Define the system context\nmodel AutomaticBrakeControlSystem\n\n-- Define the system\npackage AutomaticBrakeControlSystem {\n    System AutomaticBrakeControl {\n        -- Define the system's name and its initial state\n        name AutomaticBrakeControl;\n        initialState Active;\n\n        -- Define the system's ports\n        Port Key {\n            name Key;\n            type Boolean;\n            direction Input;\n        }\n\n        Port BrakePedal {\n            name BrakePedal;\n            type Real;\n            direction Input;\n        }\n\n        Port Traction {\n            name Traction;\n            type Real;\n            direction Input;\n        }\n\n        Port BrakePressure {\n            name BrakePressure;\n            type Real;\n            direction Output;\n        }\n\n        Port ModulationFrequency {\n            name ModulationFrequency;\n            type Real;\n            direction Output;\n        }\n\n        -- Define the system's internal blocks\n        Block BrakeControl {\n            name BrakeControl;\n\n            -- Define the block'",
    "-- Model: Battery Charging Control System\n\nmodel BatteryChargingControlSystem\n\n-- Define Blocks\nBlock Battery\nBlock Charger\nBlock BatteryManagementSystem\n\nBattery <|-- \"Has\" --> Charger\nBattery <|-- \"Has\" --> BatteryManagementSystem\n\n-- Define Properties\nProperty Battery.capacity : real\nProperty Charger.outputPower : real\nProperty BatteryManagementSystem.batteryLevel : real\n\n-- Define Relationships\nRelation Battery_BatteryLevel_BatteryManagementSystem [\n  source : BatteryManagementSystem,\n  target : Battery,\n  navigability : Bidirectional,\n  end1 : \"monitors\",\n  end2 : \"is monitored by\"\n]\n\nRelation Charger_Charges_Battery [\n  source : Charger,\n  target : Battery,\n  navigability : Bidirectional,\n  end1 : \"charges\",\n  end2 : \"is charged by\"\n]\n\nRelation Battery_IsFullyCharged",
    "-- Define the system context\ncontext BatteryChargingSystem {\n  -- Define the battery model\n  Block Battery {\n    property float batteryLevel;\n  }\n\n  -- Define the charging system model\n  Block ChargingSystem {\n    internal Block Battery: Battery;\n\n    -- Define the charging operation\n    Operation Charging {\n      precondition: batteryLevel < 100%;\n      postcondition: batteryLevel >= 100%;\n\n      -- Define the charging behavior\n      behavior ChargingBehavior {\n        entryAction:\n          Battery.batteryLevel < 100% implies\n            Battery.batteryLevel := Battery.batteryLevel + 1;\n\n        activity ChargingActivity {\n          initialNode: entry;\n          finalNode: termination;\n          node \"Charging\" {\n            transition toCharging when Battery.batteryLevel < 100%;\n            transition toTermination when Battery.batteryLevel >= 100%;\n          }\n        }\n      }\n    }\n  }\n}",
    "-- Define the system\nmodel CameraSystem {\n  -- Define the context\n  Context Context {\n    Requirement r_UserSelectScene {\n      name : \"User selects scene\";\n      source : User;\n      target : CameraSystem;\n    }\n  }\n\n  -- Define the external interfaces\n  Interface UserInterface {\n    Operation op_SelectScene {\n      name : \"Select scene\";\n      input : Scene;\n      output : Boolean;\n    }\n  }\n\n  Interface ImageRecorder {\n    Operation op_SaveImage {\n      name : \"Save image\";\n      input : Image;\n    }\n  }\n\n  -- Define the internal blocks\n  Block AutofocusSubsystem {\n    Port p_Scene {\n      type : Scene;\n      direction : in;\n    }\n\n    Port p_FocusedScene {\n      type : Scene;\n      direction : out;\n    }\n\n    Requirement r_SceneToFocus {\n      source : p_Scene;\n      target : AutofocusSubsystem;\n    }\n\n    Requ",
    "-- Model: DigitalCameraShootingSystem\n\nModel DigitalCameraShootingSystem {\n  Requirement r1 {\n    name : \"AutomatedShooting\";\n    description : \"The system enables users to complete the entire shooting process with a single, simple operation.\";\n  }\n\n  Requirement r2 {\n    name : \"HighQualityImage\";\n    description : \"The system outputs high-quality photos.\";\n  }\n\n  Block viewfinder {\n    name : \"Viewfinder\";\n  }\n\n  Block focusing {\n    name : \"Focusing\";\n  }\n\n  Block imaging {\n    name : \"Imaging\";\n    internalFeature \"Image\" {\n      name : \"OutputImage\";\n      type : Image;\n    }\n  }\n\n  Block shootingController {\n    name : \"ShootingController\";\n\n    InternalFeature selectedScene {\n      name : \"SelectedScene\";\n      type : Scene;\n    }\n\n    Action shoot {\n      name : \"Shoot\";\n      input : selectedScene;\n      output : Image;\n      precondition :",
    "-- Define the vehicle block\nmodel VehicleModel\n\n-- Define the vehicle block with its attributes\nBlock Vehicle [\n  property mass : Real = 100.0; -- mass of the vehicle\n  property position : Real = 0.0; -- initial position of the vehicle\n  property velocity : Real = 0.0; -- initial velocity of the vehicle\n  property timeStep : Real = 0.1; -- time interval of each simulation step\n]\n\n-- Define the context block\nContext SimulationContext [\n  property time : Real; -- current simulation time\n  property power : Real; -- power input at each time step\n]\n\n-- Define the vehicle's behavior\nBehavior VehicleBehavior [\n  initialNode Initial [\n    create Vehicle;\n  ];\n\n  transition TimeStep [\n    Vehicle.time = SimulationContext.time;\n    SimulationContext.time += Vehicle.timeStep;\n\n    create Node CalculateSpeed [\n      Vehicle.velocity = (Vehicle.velocity + (SimulationContext.power / Vehicle.mass) * Vehicle.timeStep);",
    "-- Define the context diagram\ncontext MyCameraSystem {\n  import \"SysML/UML/ModelingCore.sysml#\";\n  import \"SysML/UML/Statics.sysml#\";\n\n  -- Define the main system\n  System MyCamera {\n    -- Define the input and output interfaces\n    Port shootingPort {\n      type ShootingInput;\n      direction in;\n    }\n\n    Port displayPort {\n      type PhotoOutput;\n      direction out;\n    }\n\n    -- Define the internal components\n    Component SceneProcessor {\n      -- Define the internal behavior\n      Behavior sceneProcessingBehavior {\n        -- Define the input and output actions\n        Action receiveScene {\n          input shootingPort.shootingInput;\n          output SceneData sceneData;\n        }\n\n        Action focus {\n          input SceneData sceneData;\n          output FocusedSceneData focusedSceneData;\n        }\n\n        Action captureImage {\n          input FocusedSceneData focusedSceneData;\n          output ImageData imageData;\n        }\n\n        -- Define the internal flow\n       ",
    "-- Define the context\ncontext CameraSystem {\n  -- Define the nodes\n  Node viewPort {\n    Property scene : Scene\n  }\n\n  Node Image {\n    Property focus : Boolean = false\n  }\n\n  Node Picture {\n    Property displayed : Boolean = false\n  }\n\n  -- Define the flows\n  Flow focusFlow {\n    Source viewPort\n    Target Image\n    Action focusImage()\n  }\n\n  Flow captureFlow {\n    Source Image\n    Target Picture\n    Action capture()\n  }\n\n  Flow displayFlow {\n    Source Picture\n    Target displayPort\n    Action displayPicture()\n  }\n\n  -- Define the connectors\n  Connect viewPort_to_Image {\n    Source viewPort\n    Target Image\n    Role scene\n  }\n\n  Connect Image_to_Picture {\n    Source Image\n    Target Picture\n    Role image\n  }\n\n  Connect Picture_to_displayPort {\n    Source Picture\n    Target displayPort\n    Role picture\n  }\n}\n```",
    "-- Define the Sensor block\nblock Sensor {\n  -- Define the attributes\n  attribute status : String = \"idle\";\n\n  -- Define the operations\n  operation update() {\n    self.status = \"ready\";\n  }\n}\n\n-- Define the SensorManager block\nblock SensorManager {\n  -- Define the internal model elements\n  internal Sensor[] sensors;\n\n  -- Define the operations\n  operation registerSensor(in sensor : Sensor) {\n    self.sensors <- self.sensors + sensor;\n  }\n\n  operation checkReadySensors() : Integer {\n    var readySensorsCount : Integer = 0;\n\n    for (sensor in self.sensors) {\n      if (sensor.status = \"ready\") {\n        sensor.update();\n        readySensorsCount = readySensorsCount + 1;\n      }\n    }\n\n    return readySensorsCount;\n  }\n}\n```",
    "-- Define the system context\ncontext VehicleControlSystem {\n  -- Define the vehicle system\n  System Vehicle {\n    -- Define the vehicle states\n    State off {\n      -- Define the initial transition\n      transition receiveVehicleStartSignal {\n        trigger VehicleStartSignal;\n        target Vehicle.starting;\n      }\n    }\n\n    State starting {\n      -- Define the transition to the on state\n      transition receiveVehiclePowerOnSignal {\n        trigger VehiclePowerOnSignal;\n        target Vehicle.on;\n      }\n    }\n\n    State on {\n      -- Define the transition back to the off state\n      transition receiveVehicleShutdownSignal {\n        trigger VehicleShutdownSignal;\n        target Vehicle.off;\n      }\n    }\n  }\n}\n```",
    "-- Define the Block 'VehicleControlSystem'\nmodel VehicleControlSystem\n\n-- Define the Block 'Vehicle'\nBlock Vehicle {\n    property bool isOn = false;\n}\n\n-- Define the Block 'VehicleControl'\nBlock VehicleControl {\n    property bool isStarting = false;\n    property bool isRunning = false;\n\n    -- Define the Internal Transition 'VehicleStart'\n    Transition VehicleStart {\n        source VehicleControl { isStarting = true };\n        target VehicleControl { isRunning = true, isStarting = false };\n        trigger VehicleStartSignal;\n    }\n\n    -- Define the Internal Transition 'VehicleStop'\n    Transition VehicleStop {\n        source VehicleControl { isRunning = true };\n        target VehicleControl { isOff = true, isRunning = false };\n        trigger VehicleOffSignal;\n    }\n\n    -- Define the Internal Transition 'VehicleStarting'\n    Transition VehicleStarting {\n        source VehicleControl { isOff = true };\n        target VehicleControl { isStart",
    "-- Define the Block 'PowerManagementSystem'\nPowerManagementSystem = Block {\n  name = 'PowerManagementSystem';\n\n  -- Define the Internal Block 'OffState'\n  OffState = InternalBlock {\n    name = 'OffState';\n    isSpecificationOf = PowerManagementSystem;\n  };\n\n  -- Define the Internal Block 'StartPhase'\n  StartPhase = InternalBlock {\n    name = 'StartPhase';\n    isSpecificationOf = PowerManagementSystem;\n\n    -- Define the Transition 'StartCommand'\n    StartCommand = Transition {\n      name = 'StartCommand';\n      source = OffState;\n      target = StartPhase;\n      trigger = Event { name = 'StartCommand' };\n    };\n  };\n\n  -- Define the Internal Block 'PoweredOnState'\n  PoweredOnState = InternalBlock {\n    name = 'PoweredOnState';\n    isSpecificationOf = PowerManagementSystem;\n\n    -- Define the Transition 'VehicleStarted'\n    VehicleStarted = Transition {\n      name = 'VehicleStarted';\n      source",
    "-- Define the context\ncontext VehicleControlSystem {\n  -- Define the main states\n  State shutdown {\n    -- Define the transition to start-up state\n    transition startUp {\n      trigger VehicleStartSignal;\n      source shutdown;\n      target StartUp;\n    }\n  }\n\n  State StartUp {\n    -- Define the transition to running state\n    transition run {\n      trigger VehicleStartedSignal;\n      source StartUp;\n      target Running;\n    }\n  }\n\n  State Running {\n    -- Define the transition to shutdown state\n    transition shutdown {\n      trigger VehicleShutdownSignal;\n      source Running;\n      target shutdown;\n    }\n  }\n}\n\n-- Define the signals\nSignal VehicleStartSignal {\n  -- No attributes\n}\n\nSignal VehicleStartedSignal {\n  -- No attributes\n}\n\nSignal VehicleShutdownSignal {\n  -- No attributes\n}\n```",
    "-- Define the context\ncontext VehiclePowerManagement {\n  -- Define the vehicle entity\n  Entity Vehicle {\n    -- Define the attributes\n    Attribute state {\n      dataType StateType\n      initialValue Off\n    }\n\n    -- Define the operations\n    Operation switchToStartState {\n      input Signal startSignal : StartSignal\n      precondition state = Off\n      postcondition state = Start\n    }\n\n    Operation switchToOnState {\n      input Signal onSignal : OnSignal\n      precondition state = Start\n      postcondition state = On\n    }\n\n    Operation switchToOffState {\n      input Signal offSignal : OffSignal\n      precondition state = On\n      postcondition state = Off\n    }\n  }\n\n  -- Define the signals\n  Signal StartSignal {}\n  Signal OnSignal {}\n  Signal OffSignal {}\n}\n```",
    "-- Define Blocks\n\nBlock Vehicle {\n  Property temperature : Real;\n  Property maxTemp : Real;\n  Property status : String;\n\n  Action senseTemperature() {\n    Self.temperature = getTemperature();\n  }\n\n  Transition overTemperature(\n    trigger: Self.temperature > Self.maxTemp,\n    actions: Self.status = \"degraded\"\n  );\n\n  Transition normalStatus() {\n    trigger: Self.temperature <= Self.maxTemp && Self.status = \"degraded\";\n    actions: Self.status = \"normal\";\n  }\n}\n\nBlock VehicleController {\n  Property vehicle : Vehicle;\n\n  Action receiveWarning() {\n    -- Implementation\n  }\n}\n\nBlock Maintenance {\n  Property vehicle : Vehicle;\n  Property nextMaintenanceTime : Time;\n\n  Action enterMaintenanceStatus() {\n    Self.status = \"maintenance\";\n  }\n\n  Transition maintenanceStatusReached() {\n    trigger: Self.nextMaintenanceTime = getCurrentTime();\n    actions",
    "-- Define the Clock\nClock clock_1 {\n  name = 'Clock_1';\n  rate = '1s';\n}\n\n-- Define the System\nModel MyModel {\n  name = 'MyModel';\n\n  -- Define the Server\n  Block Server {\n    name = 'Server';\n\n    -- Define the States\n    State off {\n      name = 'Off';\n      initial = true;\n    }\n\n    State waiting {\n      name = 'Waiting';\n      transition waiting_to_response {\n        trigger = ReceivedEvent(name = 'start', port = requestPort);\n      }\n    }\n\n    State response {\n      name = 'Response';\n      transition response_to_waiting {\n        time = '5min';\n      }\n      transition response_to_off {\n        trigger = TimeEvent(clock = clock_1, time = '23:59:55');\n      }\n    }\n\n    -- Define the Ports\n    Port requestPort {\n      name = 'RequestPort';\n      type = 'Request';\n    }",
    "-- Define the context\ncontext VehicleControlSystem {\n  -- Define the system\n  System VehicleControlSystem {\n    -- Define the initial state\n    InitialState off {\n      -- Define the transition to start state\n      Transition start {\n        -- Define the trigger\n        Trigger startSignal {\n          -- Define the condition\n          Condition received {\n            -- Define the expression\n            Expression receivedStartSignal = self.received > 0\n          }\n        }\n      }\n\n      -- Define the internal transition to self-check state\n      InternalTransition selfCheck {\n        -- Define the condition\n        Condition inOperatingState = self.state <> off\n      }\n    }\n\n    -- Define the state for start process\n    State start {\n      -- Define the entry action\n      Action enterStart {\n        -- Define the action body\n        ActionBody {\n          -- Define the action to send start signal to controller\n          Action sendStartToController {\n            -- Define the action body\n            ActionBody {\n              -- Define the operation\n              Operation sendStart {\n                -- Define the input and output parameters\n               ",
    "-- Define Blocks\n\nBlock VehicleControlSystem {\n  isOff(self : VehicleControlSystem) : Boolean = self.state = Off\n  isStarting(self : VehicleControlSystem) : Boolean = self.state = Starting\n  isStarted(self : VehicleControlSystem) : Boolean = self.state = Started\n  isShuttingDown(self : VehicleControlSystem) : Boolean = self.state = ShuttingDown\n  isOff_ : Boolean := false\n  isStarting_ : Boolean := false\n  isStarted_ : Boolean := false\n  isShuttingDown_ : Boolean := false\n  state(self : VehicleControlSystem) : State = Off\n\n  -- Define Internal Transitions\n  Transition Startup {\n    source(self : VehicleControlSystem)\n    target(self.state = Starting)\n    trigger VehicleStartSignal\n  }\n\n  Transition SelfCheck {\n    source(self : VehicleControlSystem)\n    target(self.state = Started)\n    trigger SelfCheckComplete\n  }\n\n  Transition Shutdown",
    "-- Define the system context\ncontext CruiseControlSystem {\n  import \"SysML/UML/ModelingCore.pkg\"\n  import \"SysML/UML/BehavioralExtensions/InteractionOperators.pkg\"\n\n  -- Define the system\n  System CruiseControlSystem {\n    -- Define the driver\n    Part Driver {\n      -- Define the driver's behavior\n      Behavior DriverBehavior {\n        -- Define the activateCruiseEvent\n        Event activateCruise {\n          -- Define the input parameter\n          Parameter setSpeed : Integer\n        }\n      }\n    }\n\n    -- Define the cruise controller\n    Part CruiseController {\n      -- Define the cruise controller's behavior\n      Behavior CruiseControllerBehavior {\n        -- Define the receiveSetSpeedEvent\n        Operation receiveSetSpeedEvent : Sequence {\n          -- Define the input event\n          Event.oclIsTypeOf(self.oclIsKindOf(Interaction), activateCruise)\n          self.setSpeed = activateCruise.setSpeed\n        }\n\n        -- Define the generateFuelControlCommand",
    "\n\nBlock CruiseController {\n  Port operation : Operation {\n    name = 'SetSpeed';\n    parameter speed : Real;\n  };\n\n  Port speedometer : Port {\n    name = 'VehicleSpeed';\n    type = Real;\n  };\n\n  Port engine : Port {\n    name = 'ThrottleCommand';\n    type = Real;\n  };\n\n  InternalBlock controllerLogic {\n    Flow finalSpeed : Real {\n      source = operation.speed;\n      target = speedometer;\n    };\n\n    Flow desiredSpeed : Real {\n      source = operation.speed;\n    };\n\n    Flow actualSpeed : Real {\n      source = speedometer;\n    };\n\n    Flow error : Real {\n      source = actualSpeed;\n      target = controllerLogic.subtract(desiredSpeed, actualSpeed);\n    };\n\n    Flow throttleCommand : Real {\n      source = controllerLogic.map(error, 0.1, 0.5, 0.2, 1);\n      target = engine;\n    };\n  };\n\n  InternalBlock controllerLog",
    "-- Define the system context\ncontext CruiseControlSystem {\n  import \"SysML/UML/ModelingCore.pkg\"\n  import \"SysML/UML/BehavioralFrameworks.pkg\"\n  import \"SysML/UML/Automation.pkg\"\n\n  -- Define the system\n  System CruiseControl {\n    -- Define the ports\n    Port driverPort {\n      DataType int\n      Interface inVehicleControlInterface\n    }\n\n    Port enginePort {\n      DataType int\n      Interface engineControlInterface\n    }\n\n    -- Define the internal blocks\n    Block speedometer {\n      DataType real speed\n      Provided speed_p : Real\n    }\n\n    Block cruiseController {\n      DataType real setSpeed\n      DataType real currentSpeed\n      DataType real speedDifference\n      DataType int throttleCommand\n\n      Provided driverCommand_p : Real\n      Provided speed_p : Real\n      Provided engineCommand_p : Int\n\n      InternalControl flow {\n        InitialNode initialNode\n        Transition receiveDriverCommand {",
    "-- Define Blocks\n\nBlock CruiseController {\n  Property speedSettingRequest : Real;\n  Property cruisingSpeed : Real;\n  Property vehicleSpeed : Real;\n  Property throttleControl : Real;\n\n  Operation receiveSpeedSettingRequest(speedSetting : Real) {\n    speedSettingRequest = speedSetting;\n  }\n\n  Operation calculateThrottleControl() returns (throttle : Real) {\n    throttleControl = (cruisingSpeed - vehicleSpeed) / 10;\n    throttle = throttleControl;\n  }\n}\n\nBlock Engine {\n  Property throttle : Real;\n}\n\nBlock Speedometer {\n  Property vehicleSpeed : Real;\n}\n\n-- Define Connections\n\nConnection cruisingSpeedSetting {\n  Source CruiseController.cruisingSpeed;\n  Target CruiseController.speedSettingRequest;\n}\n\nConnection speedometerFeedback {\n  Source Speedometer.vehicleSpeed;\n  Target CruiseController.vehicleSpeed;\n}\n\nConnection throttleControl {\n  Source CruiseController.thrott",
    "\n\nBlock cruiseController\n  Ports:\n    Input:\n      dataPort1: DataPort(name=\"SetSpeed\", dataType=\"Real\")\n      dataPort2: DataPort(name=\"ActualSpeed\", dataType=\"Real\")\n      dataPort3: DataPort(name=\"FuelControlCommand\", dataType=\"Real\")\n\n    Output:\n      dataPort4: DataPort(name=\"EngineFuelControlCommand\", dataType=\"Real\")\n\n  InternalFeatures:\n    feature1: Feature(name=\"SetSpeed\", dataType=\"Real\")\n    feature2: Feature(name=\"ActualSpeed\", dataType=\"Real\")\n    feature3: Feature(name=\"EngineFuelControlCommand\", dataType=\"Real\")\n\n    constraint1: Constraint(name=\"SpeedControlConstraint\")\n      expression: feature1 > feature2\n\n    constraint2: Constraint(name=\"FuelControlConstraint\")\n      expression: feature3 = (feature1 - feature2)\n\nBlock engine\n  Ports:\n    Input:\n      dataPort1: DataPort(name=\"EngineFuelControlCommand\", dataType=\"Real\")\n\n    Output:",
    "-- Define the system context\ncontext CruiseControlSystem {\n  import \"SysML/UML/Statements/CommonBehaviors.stereotype\";\n  import \"SysML/UML/Statements/InteractionOperators.stereotype\";\n\n  -- Define the system\n  System CruiseControl {\n    -- Define the system's ports\n    Port SetSpeedPort {\n      dataType Integer;\n      provided Interface CruiseControl_SetSpeed_Interface;\n    }\n\n    Port ActualSpeedPort {\n      dataType Real;\n      required Interface CruiseControl_ActualSpeed_Interface;\n    }\n\n    Port FuelControlPort {\n      dataType Integer;\n      provided Interface CruiseControl_FuelControl_Interface;\n    }\n\n    Port EngineSpeedPort {\n      dataType Real;\n      required Interface EngineController_EngineSpeed_Interface;\n    }\n\n    Port EngineFuelFlowPort {\n      dataType Real;\n      required Interface EngineController_EngineFuelFlow_Interface;\n    }\n\n    -- Define the system's internal",
    "-- Define the system context\nmodel VehicleLifecycleManagementSystem\n\n-- Define the vehicle concept\npackage Vehicle\n\n  class Vehicle {\n    -- Identification\n    property id : String;\n\n    -- Lifecycle stages\n    property assembly : Assembly;\n    property delivery : Delivery;\n    property ownership : Ownership;\n    property endOfUse : EndOfUse;\n\n    -- Lifecycle operations\n    operation assemble() {\n      -- Implementation details\n    }\n\n    operation deliver(date : Date) {\n      delivery.date = date;\n    }\n\n    operation transferOwnership(owner : Person) {\n      ownership.owner = owner;\n    }\n\n    operation scrap() {\n      endOfUse.scrap = true;\n    }\n  }\n\n-- Define the assembly concept\npackage Assembly\n\n  class Assembly {\n    -- Implementation details\n  }\n\n-- Define the delivery concept\npackage Delivery\n\n  class Delivery {\n    property date : Date;\n  }\n\n-- Define the ownership concept\npackage Ownership\n\n  class Ownership",
    "-- Define the Vehicle Package\npackage Vehicle {\n\n  -- Define the Vehicle Class\n  class Vehicle {\n    attribute mass: Real;\n    attribute operationalStatus: OperationalStatus;\n\n    -- Define the Engine Compartment\n    compartment Engine {\n      part engine: Engine;\n    }\n\n    -- Define the Driver Reference\n    reference driver: Driver;\n\n    -- Define the Wheels Compartment\n    compartment Wheels {\n      part leftFrontWheel: Wheel;\n      part rightFrontWheel: Wheel;\n    }\n  }\n\n  -- Define the OperationalStatus Enum\n  enum OperationalStatus {\n    Idle,\n    Moving,\n    Accelerating,\n    Braking\n  }\n\n  -- Define the Engine Class\n  class Engine {\n    attribute engineMass: Real;\n  }\n\n  -- Define the Driver Class\n  class Driver {\n    attribute weight: Real;\n  }\n\n  -- Define the Wheel Class\n  class Wheel {\n    attribute wheelRadius: Real;\n  }\n\n  -- Define the",
    "-- Define the types\ntype Vehicle {\n  mass: Real negative;\n  state {\n    gear: Int;\n    acceleratorPosition: Real;\n  }\n}\n\n-- Define the blocks\nBlock Vehicle_1 {\n  type Vehicle;\n  initialMass: Real negative = 2000;\n  initialState {\n    gear = 0;\n    acceleratorPosition = 0.0;\n  }\n  nextState {\n    mass = 1500;\n    state {\n      gear = 2;\n      acceleratorPosition = 0.5;\n    }\n  }\n}\n```",
    "-- Define the Vehicle System\nmodel VehicleModel\n\n-- Define the Vehicle Package\npackage Vehicle\nextends System\n{\n    -- Define the Vehicle Class\n    class Vehicle\n    {\n        -- Define the Vehicle Properties\n        property Mass : Real;\n        property GearPosition : Integer;\n        property ThrottlePosition : Real;\n\n        -- Define the Initial State\n        initial state InitialState\n        {\n            Mass = 2000;\n            GearPosition = Neutral;\n            ThrottlePosition = 0;\n        }\n\n        -- Define the Transition to the Second State\n        transition ToSecondState\n        {\n            when Mass = 1500\n            and GearPosition = Neutral\n            and ThrottlePosition = 0\n            then\n            {\n                Mass = 1500;\n                GearPosition = Second;\n                ThrottlePosition = 0.5;\n            }\n        }\n\n        -- Define the Drivers\n        driver Alice;\n        driver Bob;\n\n        -- Define",
    "// Define the types for mass and vehicle\ntype Mass {\n  real value;\n}\n\ntype Vehicle {\n  Mass totalMass;\n  Vehicle subVehicle: 1..*;\n}\n\n// Define the core components\ntype Engine {\n  Mass engineMass;\n}\n\ntype Transmission {\n  Mass transmissionMass;\n}\n\n// Define the vehicle with core components\nVehicle vehicle {\n  Engine engine;\n  Transmission transmission;\n  Mass totalMass;\n}\n\n// Define the relationship between vehicle and its subcomponents\nVehicle vehicle {\n  Engine engine;\n  Transmission transmission;\n  subVehicle : Engine engine, Transmission transmission;\n}\n\n// Define the relationship between vehicle and its mass\nVehicle vehicle {\n  totalMass: totalMass = engine.engineMass + transmission.transmissionMass + (\n    for all subComponent in subVehicle: subComponent.totalMass\n  );\n}\n```",
    "-- Define the types\ntype Vehicle {\n  VIN : String;\n  mass : Real;\n}\n\ntype Component {\n  serialNumber : Integer;\n  mass : Real;\n}\n\ntype SubComponent extends Component {\n}\n\n-- Define the classes\nclass VehicleClass {\n  Vehicle vehicle;\n  Component[] components;\n\n  operation calculateTotalMass() : Real {\n    return vehicle.mass + sum(components.mass);\n  }\n}\n\nclass ComponentClass {\n  Component component;\n}\n\nclass SubComponentClass extends ComponentClass {\n}\n\n-- Define the associations\nComponent Vehicle.hasComponents : ComponentClass {\n  end1 : Vehicle;\n  end2 : ComponentClass;\n  multiplicity : \"*\";\n}\n\nComponent SubComponent.isPartOf : ComponentClass {\n  end1 : SubComponent;\n  end2 : ComponentClass;\n  multiplicity : \"*\";\n}\n\n-- Define the constraints\nconstraint totalMass {\n  self.vehicle.calculateTotalMass() > 0;\n}\n\nconstraint massFilter {\n ",
    "\n\nBlock 'SimpleThing':\n\nProperty simpleMass: Real;\n\nBlock 'CompositeThing':\n\nProperty simpleMass: Real;\nProperty totalMass: Real;\n\nRelation Contains:\n  Source CompositeThing;\n  Target Object;\n  Navigation totalMass: TotalMass;\n\nBlock 'Object':\n\nProperty totalMass: Real;\n\nOperation calculateTotalMass:\n  Input: Object self;\n  Output: Real result;\n  Precondition: self.simpleMass != null;\n  Postcondition: result = self.simpleMass + (self.subComponents->forAll(c | c.totalMass));\n\nBlock 'SubComponent':\n\nProperty simpleMass: Real;\n\nEndModel;",
    "\n\nBlock 'MassManagementSystem' {\n  Attribute mass : Real;\n\n  Operation calculateTotalMass() : Real {\n    -- Calculate the total mass of the system and its subcomponents\n    Real totalMass = mass;\n    for (SubComponent subComponent : self.allSubComponents) {\n      totalMass += subComponent.mass;\n    }\n    return totalMass;\n  }\n\n  Operation filterSubComponents(minMass : Real) : Set(SubComponent) {\n    -- Filter subcomponents based on mass threshold\n    Set(SubComponent) filteredSubComponents = {};\n    for (SubComponent subComponent : self.allSubComponents) {\n      if (subComponent.mass >= minMass) {\n        filteredSubComponents.add(subComponent);\n      }\n    }\n    return filteredSubComponents;\n  }\n}\n\nBlock 'SubComponent' {\n  Attribute mass : Real;\n}\n\nRelation 'hasSubComponent' {\n  Source 'MassManagementSystem';\n  Target 'SubComponent';\n}\n\nRelation 'hasOwnMass' {\n  Source 'MassManagementSystem';\n  Target 'MassManagement",
    "-- Define Input Parameters\nParameter wheelPower[real];\nParameter aerodynamicDragCoefficient[real];\nParameter frictionCoefficient[real];\nParameter vehicleMass[real];\nParameter speed[real];\nParameter time[real];\n\n-- Define Constants\nConstant g[real] = 9.81; -- Acceleration due to gravity\n\n-- Define Block for Vehicle Dynamics\nBlock VehicleDynamics {\n  -- Define Internal Parameters\n  Real power[0..1];\n  Real acceleration[0..1];\n  Real speed_internal[0..1];\n  Real position[0..1];\n\n  -- Define Internal Calculations\n  power = wheelPower + (aerodynamicDragCoefficient * (vehicleMass * pow(speed, 2)) * g) - (frictionCoefficient * vehicleMass * abs(acceleration));\n  acceleration = (power / vehicleMass) - g;\n  speed_internal = speed + acceleration * time;\n  position = speed_internal * time;\n\n  -- Define Output Ports\n",
    "-- Define the system context\ncontext VehicleSimulation {\n  -- Define the main system\n  System Vehicle {\n    -- Define the input ports\n    Input AerodynamicDragCoefficient : real;\n    Input RollingResistanceCoefficient : real;\n    Input InitialSpeed : real;\n    Input InitialPosition : real;\n    Input TimeStep : real;\n\n    -- Define the output ports\n    Output Acceleration : real;\n    Output Speed : real;\n    Output Position : real;\n\n    -- Define the internal variables\n    real AvailableDrivingPower;\n\n    -- Define the internal processes\n    process CalculateAvailableDrivingPower {\n      Input WheelEndOutputPower : real;\n      Input TotalVehicleMass : real;\n\n      Variable AvailableDrivingPower;\n\n      Calculate AvailableDrivingPower =\n        AvailableDrivingPower = WheelEndOutputPower -\n          (AerodynamicDragCoefficient * TotalVehicleMass * InitialSpeed * InitialSpeed) -\n          (RollingResistanceCoefficient * TotalVehicleMass);\n    }",
    "-- Define the system context\nmodel VehicleDynamicsModel\n\n-- Define the vehicle block\nBlock Vehicle\n  property Mass : Real(initial: 1000.0);\n  property WheelPower : Real(initial: 50.0);\n  property AerodynamicDragCoefficient : Real(initial: 0.3);\n  property RollingResistanceCoefficient : Real(initial: 0.01);\nend Vehicle\n\n-- Define the environment block\nBlock Environment\n  property AirDensity : Real(initial: 1.225);\nend Environment\n\n-- Define the vehicle dynamics block\nBlock VehicleDynamics\n  property Vehicle : Port(type: Vehicle, name: \"Vehicle\");\n  property Environment : Port(type: Environment, name: \"Environment\");\n  property Time : Real(initial: 0.0);\n  property Position : Real(initial: 0.0);\n  property Velocity : Real(initial: 0.0);\n  property Acceleration : Real(initial: 0.0);\n\n  operation Initialize",
    "-- Define the system context\ncontext VehicleDynamics\n\n-- Define the main system\nmodel Vehicle\n\n-- Define the input parameters\nParameter Input_Position {\n  dataType Real\n}\n\nParameter Input_Velocity {\n  dataType Real\n}\n\nParameter Input_Mass {\n  dataType Real\n}\n\nParameter Input_Power {\n  dataType Real\n}\n\nParameter Input_Time_Interval {\n  dataType Real\n}\n\n-- Define the constant parameters\nParameter Drag_Coefficient {\n  dataType Real\n  initial 0.4\n}\n\nParameter Friction_Coefficient {\n  dataType Real\n  initial 0.01\n}\n\n-- Define the variables\nVariable Acceleration : Real\nVariable Velocity : Real\nVariable Position : Real\n\n-- Define the initial state\nInitialState InitialState {\n  Velocity = Input_Velocity\n  Position = Input_Position\n}\n\n-- Define the transition for calculating acceleration\nTransition Acceleration_Calculation {\n  trigger Input_Power != 0\n\n  Variables {\n",
    "-- Define the system\nmodel MassManagementSystem\n\n-- Define the context\ncontext Context\n  massLimit : Real (2500);\nendContext Context\n\n-- Define the chassis\nclass Chassis\n  mass : Real;\nendChassis\n\n-- Define the engine\nclass Engine\n  mass : Real;\nendEngine\n\n-- Define the gearbox\nclass Gearbox\n  mass : Real;\nendGearbox\n\n-- Define the vehicle\nclass Vehicle\n  chassis : Chassis;\n  engine : Engine;\n  gearbox : Gearbox;\n  totalMass : Real;\n\n  initial totalMass = (chassis.mass + engine.mass + gearbox.mass);\n  invariant totalMass <= Context.massLimit;\nendVehicle\n```",
    "-- Define the system\nmodel VehicleMassControlSystem\n\n-- Define the context\ncontext Context\n  requires MassConstraintRequirement = \"Total mass of the vehicle should not exceed 2500 kg.\";\n\n-- Define the vehicle and its components\nclass Vehicle\n  extends Context\n\n  property mass: Real;\n\nclass Chassis\n  extends Vehicle\n  requires ChassisMassRequirement = \"Chassis mass should be measured and recorded.\";\n\nclass Engine\n  extends Vehicle\n  requires EngineMassRequirement = \"Engine mass should be measured and recorded.\";\n\nclass Transmission\n  extends Vehicle\n  requires TransmissionMassRequirement = \"Transmission mass should be measured and recorded.\";\n\n-- Define the mass constraints\nconstraint TotalMassConstraint\n  for Vehicle vehicle\n  inv vehicle.mass <= 2500;\n\nconstraint EngineMassConstraint\n  for Engine engine\n  inv engine.mass <= 1000; -- Assume engine mass limit is 1000 kg\n\nconstraint TransmissionMassConstraint\n  for Transmission transmission\n  inv transmission.mass <= 500; --",
    "-- Define the system\nmodel VehicleMassManagementSystem\n\n-- Define the vehicle\npackage Vehicle {\n    Class Vehicle {\n        property mass : Real;\n    }\n}\n\n-- Define the chassis, engine, and transmission\npackage Chassis {\n    Class Chassis {\n        property mass : Real;\n    }\n}\n\npackage Engine {\n    Class Engine {\n        property mass : Real;\n    }\n}\n\npackage Transmission {\n    Class Transmission {\n        property mass : Real;\n    }\n}\n\n-- Define the constraint\nconstraint TotalMass {\n    vehicle : Vehicle;\n    chassis : Chassis;\n    engine : Engine;\n    transmission : Transmission;\n\n    totalMass : Real = vehicle.mass + chassis.mass + engine.mass + transmission.mass;\n\n    totalMass <= 2500;\n}\n```",
    "-- Define the system context\nmodel VehicleWeightManagementSystem\n\n-- Define the system\npackage VehicleWeightManagementSystem {\n    System VehicleWeightManagementSystem {\n        -- Define the main vehicle components\n        Component chassis {\n            property weight : Real\n        }\n        Component engine {\n            property weight : Real\n        }\n        Component transmission {\n            property weight : Real\n        }\n\n        -- Define the weight constraint\n        Requirement weightConstraint {\n            name \"Weight constraint\";\n            description \"The combined weight of the main vehicle components should not exceed 2,500 kilograms.\";\n            inv \"self.chassis.weight + self.engine.weight + self.transmission.weight <= 2500\";\n        }\n\n        -- Define the system context\n        Context VehicleContext {\n            import VehicleWeightManagementSystem::VehicleWeightManagementSystem;\n            import VehicleWeightManagementSystem::chassis;\n            import VehicleWeightManagementSystem::engine;\n            import VehicleWeightManagementSystem::transmission;\n\n            -- Define the system's initial state\n            InitialState",
    "-- Define the vehicle system\nmodel VehicleSystem\n\n-- Define the vehicle components\nBlock chassis {\n  attribute.mass: Real mass = 0;\n}\n\nBlock engine {\n  attribute.mass: Real mass = 0;\n}\n\nBlock transmission {\n  attribute.mass: Real mass = 0;\n}\n\n-- Define the vehicle as a composite of its components\nComposite vehicle {\n  part chassis;\n  part engine;\n  part transmission;\n}\n\n-- Define the mass constraint\nConstraint totalMass {\n  vehicle.mass = chassis.mass + engine.mass + transmission.mass;\n  totalMass <= 2500;\n}\n\n-- Define the dynamic behavior constraint\nBlock vehicleDynamic {\n  attribute.mass: Real mass = 0;\n  attribute.initialVelocity: Real initialVelocity = 0;\n  attribute.finalVelocity: Real finalVelocity = 0;\n  attribute.time: Real time = 0;\n  attribute.force: Real force = 0;\n\n  constraint.massConstraint {\n    mass >",
    "-- Define the Block defining the System\nmodel VehicleManagementSystem {\n\n  -- Define the Block defining the Vehicle\n  Block Vehicle {\n    -- Define the Attribute for the Vehicle's Maximum Allowed Temperature\n    Attribute MaxAllowedTemperature : real;\n\n    -- Define the Attribute for the Vehicle's Next Maintenance Time\n    Attribute NextMaintenanceTime : real;\n\n    -- Define the Attribute for the Vehicle's Maintenance Interval\n    Attribute MaintenanceInterval : real;\n\n    -- Define the Attribute for the Vehicle's Health Status\n    Attribute HealthStatus : String;\n\n    -- Define the Transition for the Vehicle's Health Status Switching to \"under maintenance\"\n    Transition MaintenanceRequired {\n      Trigger MaintenanceTimeReached {\n        Expression (self.NextMaintenanceTime <= now)\n      }\n    }\n\n    -- Define the Action for the Vehicle's Maintenance Initiation\n    Action InitiateMaintenance {\n      Precondition MaintenanceRequired {\n        Expression (self.HealthStatus = \"healthy\")\n      }\n      Postcondition",
    "\n```vbnet\n// Define the mass of the vehicle and its components\nBlock vehicle [\n  Property.mass : Real [\n    Initial : 0.0,\n    Constraint : mass <= Max_mass\n  ]\n\n  Block engine [\n    Property.mass : Real [\n      Initial : 0.0\n    ]\n  ]\n\n  Block fuel [\n    Property.mass : Real [\n      Initial : 0.0,\n      Constraint : mass > 0.0\n    ]\n  ]\n\n  // Define the mass relationship between the components and the vehicle\n  Relation has_mass [\n    Source : vehicle,\n    Target : engine,\n    Role : engine_mass\n  ]\n\n  Relation has_mass [\n    Source : vehicle,\n    Target : fuel,\n    Role : fuel_mass\n  ]\n\n  // Define the mass limit constraint\n  Block Max_mass [\n    Property.value : Real [\n      Initial : 5000.0\n    ]\n  ]\n\n  Constraint mass_limit [\n    Expression : vehicle.mass <= Max_mass.value",
    "-- Define the vehicle and its mass\nmodel Vehicle_Model\n\n  Context VehicleContext\n\n  -- Define the vehicle\n  Block Vehicle\n    InitialMass (initialMass: Real = 1500.0)\n    FuelMass (fuelMass: Real)\n    TotalMass (totalMass: Real)\n\n    -- Constraint: With a full fuel tank, the vehicle’s total mass must not exceed 2000 kg\n    constraint TotalMass_WithFullFuel\n      for Vehicle.TotalMass\n      when Vehicle.FuelMass = Vehicle.InitialMass + 500.0\n      then Vehicle.TotalMass <= 2000.0\n\n    -- Constraint: With an empty fuel tank, the vehicle’s total mass must not exceed 1500 kg\n    constraint TotalMass_WithEmptyFuel\n      for Vehicle.TotalMass\n      when Vehicle.FuelMass = 0.0\n      then Vehicle.TotalMass <= 1500.0\n\n    -- Define the engine\n    Part Engine\n      Torque (tor",
    "-- Model: VehicleSystem\nmodel VehicleSystem\n\n-- Package: Vehicle\npackage Vehicle\n  extends Model\n\n  -- Class: Vehicle\n  class Vehicle {\n    -- Attribute: mass_fully_fueled\n    attribute mass_fully_fueled : Real = 2000;\n\n    -- Attribute: mass_empty\n    attribute mass_empty : Real = 1500;\n  }\n\n-- Package: Engine\npackage Engine\n  extends Model\n\n  -- Class: Engine\n  class Engine {\n    -- Attribute: max_torque\n    attribute max_torque : Real;\n\n    -- Attribute: performance_table\n    attribute performance_table : Sequence {\n      data PerformanceSpecification {\n        -- Attribute: speed\n        attribute speed : Real;\n\n        -- Attribute: torque\n        attribute torque : Real;\n      }\n    }\n\n    -- Operation: generate_torque\n    operation generate_torque() : Real {\n      -- Precondition: engine_is_running\n      precondition engine_is_running;\n\n      --",
    "-- Define the vehicle and its components\nmodel VehicleModel\n\n  -- Define the vehicle\n  Package Vehicle {\n    Property curbMass : real = 1200.0;\n    Property fuelMass : real;\n    Property totalMass : real;\n\n    -- Constraint for total mass when fuel tank is full\n    Constraint maxTotalMassFull {\n      totalMass = curbMass + fuelMass;\n      totalMass <= 2000.0;\n    }\n\n    -- Constraint for total mass when fuel tank is empty\n    Constraint maxTotalMassEmpty {\n      totalMass = curbMass;\n      totalMass <= 1500.0;\n    }\n\n    -- Define the engine\n    Package Engine {\n      Property torque : real;\n      Property speed : real;\n    }\n\n    -- Define the clutch interface\n    Package Clutch {\n      Property engaged : boolean = false;\n    }\n\n    -- Define the gearbox\n    Package Gearbox {\n      Property inputTorque : real;\n      Property outputTorque : real;\n    }",
    "// Define the system context\ncontext VehiclePerformanceAnalysisSystem {\n  // Define the vehicle block\n  Block Vehicle {\n    // Define the vehicle attributes\n    Property curbWeight : Real;\n    Property payload : Real;\n    Property wheelDiameter : Real;\n    Property transmissionEfficiency : Real;\n    Property fuelEconomy_Urban : Real;\n    Property fuelEconomy_Highway : Real;\n\n    // Define the powertrain block\n    Block Powertrain {\n      // Define the engine block\n      Block Engine {\n        // Define the engine power\n        Output Power : Real;\n      }\n\n      // Define the transmission block\n      Block Transmission {\n        // Define the transmission efficiency\n        Input transmissionEfficiency : Real;\n      }\n\n      // Connect the engine and transmission\n      Connect Engine.Power -> Transmission.Input;\n    }\n\n    // Define the driving cycle block\n    Block DrivingCycle {\n      // Define the time-stamped position and speed information\n      Sequence drivingCycleData {\n        Data position : Real;\n        Data speed",
    "// Define the system context\ncontext VehicleFuelEconomySimulation {\n  // Define the main system\n  System VehicleFuelEconomy {\n    // Define the vehicle\n    Subsystem Vehicle {\n      Property.weight CurbWeight;\n      Property.weight Load;\n      Property.real WheelDiameter;\n      Property.real TransmissionEfficiency;\n      // Define the engine\n      Subsystem Engine {\n        Property.real EnginePower;\n      }\n      // Define the dynamics\n      Block VehicleDynamics {\n        Input WheelPower;\n        Output Acceleration;\n        Output EnergyConsumption;\n        Transition calculateAcceleration {\n          Source Vehicle;\n          Target VehicleDynamics;\n          DataAcceleration acc;\n          DataEnergyConsumption energy;\n          when WheelPower > 0 {\n            calculateAcceleration.body = '// Calculate acceleration';\n            calculateAcceleration.guards += 'self.TransmissionEfficiency > 0';\n            calculateAcceleration.outputPinMappings += 'acc = self.",
    "// Define the Engine type with attributes\nmodel EngineSelectionSystem\n\n  type Engine {\n    - name: String;\n    - engineType: String;\n    - power: Real;\n    - mass: Real;\n    - efficiency: Real;\n    - cost: Real;\n  }\n\n  // Define the Evaluation Function\n  context EvaluationFunction {\n    - evaluationResult: Real;\n\n    operation evaluateEngine(engine: Engine) : Real {\n      evaluationResult = (power * efficiency) / mass - cost;\n    }\n  }\n\n  // Define the System Context\n  context SystemContext {\n    - engineCandidates: Set[Engine];\n    - evaluationFunction: EvaluationFunction;\n\n    operation selectOptimalEngine() : Engine {\n      engineCandidates = { engine | engine.engineType in (\"fourCylinder\", \"sixCylinder\") };\n      evaluationFunction = EvaluationFunction();\n\n      for engine in engineCandidates do:\n        evaluationFunction.evaluateEngine(engine);\n\n      return engineCandidates->collect{|e| (e, evaluation",
    "// Define the Block defining the system\nmodel VehicleQualityControlSystem\n\n// Define the Block defining the Vehicle\nblock Vehicle {\n    property weight: Real(isQuantity = true, unit = \"kg\")\n}\n\n// Define the Block defining the DataCollector\nblock DataCollector {\n    operation collectWeightData(vehicle: Vehicle): Real {\n        // Collect weight data from the vehicle\n        return vehicle.weight\n    }\n}\n\n// Define the Block defining the DataProcessor\nblock DataProcessor {\n    operation processWeightData(weight: Real): Boolean {\n        // Process the weight data\n        return weight <= 2500\n    }\n}\n\n// Define the Block defining the Evaluator\nblock Evaluator {\n    operation evaluate(dataProcessorOutput: Boolean): String {\n        // Determine the evaluation result based on the processed data\n        return dataProcessorOutput ? \"Qualified\" : \"Unqualified\"\n    }\n}\n\n// Define the Block defining the Test\nblock Test {\n    property vehicle: Vehicle\n    property dataCollector: DataCollector\n   ",
    "-- Define the types\ntype Vehicle {\n  mass: Real negative;\n}\n\ntype WeighingEquipment {\n  currentMass: Real;\n}\n\ntype MassVerificationUnit {\n  qualifiedVehicles: Set(Vehicle);\n  unqualifiedVehicles: Set(Vehicle);\n}\n\n-- Define the relationships\nMassVerificationUnit -- \"VERIFIES\" --> Vehicle : mass <= 2500;\n\nMassVerificationUnit --> WeighingEquipment;\nWeighingEquipment --> Vehicle;\n\n-- Define the flows\nMassVerificationUnit --> WeighingEquipment : measureMass;\nWeighingEquipment --> MassVerificationUnit : currentMass;\n\n-- Define the actions\naction measureMass {\n  input: Vehicle vehicle;\n  output: Real mass;\n  precondition: vehicle.mass >= 0;\n  postcondition: self.currentMass = vehicle.mass;\n}\n\n-- Define the MassVerificationUnit operations\noperation checkMass {\n  result: Boolean;\n  precondition: self.currentMass",
    "-- Define the system\nmodel TransportationSystem {\n  -- Define the context\n  Context Context {\n    Requirement r1 \"The system is designed to provide end users with a convenient and efficient mode of transportation.\";\n    Requirement r2 \"The system is capable of supporting a driver and up to four passengers sharing a vehicle.\";\n    Requirement r3 \"Users can freely enter and exit the vehicle.\";\n    Requirement r4 \"The system should ensure that the process of entering and exiting the vehicle is simple and smooth.\";\n    Requirement r5 \"The system should fully consider and integrate surrounding environmental factors to ensure the safety and sustainability of the entire journey.\";\n    Requirement r6 \"The system should be compatible with related infrastructure such as gas stations.\";\n    Requirement r7 \"The system’s operation should be centered on human needs.\";\n    Requirement r8 \"The system has a focus on ride experience and various conveniences.\";\n    Requirement r9 \"The system should assist passengers and drivers in smoothly completing all kinds of daily transportation tasks.\";\n  }\n\n  -- Define the system\n  Block TransportationSystem {\n    name \"TransportationSystem\";\n",
    "-- Define the context\ncontext Context {\n  -- Define the required packages\n  import \"SysML/UML/Statemachines/1.0/SysML.statemachines\"\n  import \"SysML/UML/Actions/1.0/SysML.actions\"\n  import \"SysML/UML/Classes/1.0/SysML.classes\"\n  import \"SysML/UML/Interactions/1.0/SysML.interactions\"\n  import \"SysML/UML/SequentialFlow/1.0/SysML.activityfinalstates\"\n  import \"SysML/UML/SequentialFlow/1.0/SysML.activitygraphs\"\n  import \"SysML/UML/SequentialFlow/1.0/SysML.activitynodes\"\n  import \"SysML/UML/SequentialFlow/1.0/SysML.controlnodes\"\n  import \"SysML/UML/SequentialFlow/1.0/SysML.flowfinalstates\"\n  import \"SysML/UML/SequentialFlow/1.0/Sys",
    "-- Define the base types\n\ntype EngineType {\n  name: String;\n  cylinderCount: Integer;\n  cylinderDiameter: DiameterType;\n}\n\ntype DiameterType {\n  name: String;\n  diameter: Real;\n}\n\ntype TransmissionType {\n  name: String;\n}\n\n-- Define the vehicle class\n\nclass Vehicle {\n  name: String;\n  engine: Engine;\n  transmission: Transmission;\n}\n\n-- Define the engine class\n\nclass Engine {\n  EngineType: EngineType;\n}\n\n-- Define the transmission class\n\nclass Transmission {\n  TransmissionType: TransmissionType;\n}\n\n-- Define the constraints\n\nconstraint Engine_Transmission {\n  Engine.EngineType.cylinderCount = 4 -> Vehicle.transmission.TransmissionType.name = \"Manual\";\n  Engine.EngineType.cylinderCount = 6 -> Vehicle.transmission.TransmissionType.name = \"Automatic\";\n  Engine.EngineType.cylinderCount <> 4 & Engine",
    "-- Define the abstract base engine block\nModel EngineModel\n\nBlock Engine {\n    -- Define the properties common to all engine variants\n    property int numCylinders;\n    property boolean isFourCylinder;\n\n    -- Define the common interface for all engine variants\n    Operation runEngine();\n\n    -- Define the abstract base block for cylinders\n    Block Cylinder {\n        property int diameter;\n        property boolean is70mm;\n    }\n\n    -- Define the collection of cylinders for the engine\n    Collection<Cylinder> cylinders;\n\n    -- Define the relationship between engine and cylinders\n    relationship Engine_has_Cylinder(engine : Engine, cylinder : Cylinder) {\n        engine.cylinders->add(cylinder);\n    }\n\n    -- Define the four-cylinder engine variant\n    Block FourCylinderEngine < Engine {\n        isFourCylinder = true;\n        numCylinders = 4;\n    }\n\n    -- Define the six-cylinder engine variant\n",
    "-- Define the types for engines and transmissions\n\ntype Engine {\n  - cylinderCount: Integer (min: 4, max: 6);\n  - cylinderDiameter: Integer (min: 70, max: 100);\n}\n\ntype Transmission {\n  - type: String (manual | automatic);\n}\n\n-- Define the vehicle as a Block with internal parts\n\nBlock Vehicle {\n  -- Define the internal parts\n  Engine engine;\n  Transmission transmission;\n\n  -- Define the constraints\n  constraint engine_transmission {\n    engine.cylinderCount = 4 -> transmission.type = \"manual\";\n    engine.cylinderCount = 6 -> transmission.type = \"automatic\";\n  }\n}\n```",
    "\n```vbnet\n-- Define the system\nmodel MySystem\n\n-- Define the system assembly\nAssembly MySystemAssembly {\n  Part MyComputerSubsystem {\n    Property.capability UtilizeSoftwareFunctions\n    Property.capability IntegrateSoftwareFunctions\n  }\n\n  Part MyStorageSubsystem {\n    Property.compatibility MessageFormat\n    Property.compatibility DataFormat\n  }\n}\n\n-- Define the computer subsystem\nBlock MyComputer {\n  Port.provided UtilizeSoftwareFunctions : Operation UtilizeFunction\n  Port.required IntegrateSoftwareFunctions : Operation IntegrateFunction\n}\n\n-- Define the storage subsystem\nBlock MyStorage {\n  Port.required MessageFormat : DataMessage\n  Port.required DataFormat : DataStore\n}\n\n-- Define the software design\nBlock MySoftwareDesign {\n  Operation UtilizeFunction {\n    Parameter message : DataMessage\n    Parameter data : DataStore\n  }\n\n  Operation IntegrateFunction {\n    Parameter message : DataMessage\n    Parameter data : DataStore\n  }\n\n  DataMessage MessageFormat {\n    Attribute formatVersion : String = \"1.0",
    "-- Define the system\nmodel PowertrainSystem\n\n-- Define the Logical Layer\npackage LogicalLayer\n\n-- Define the Logical Components\ncomponent LogicalPowerProvider {\n  provided Power: Real;\n}\n\ncomponent LogicalTorqueGenerator {\n  provided Power: Real;\n  provided Torque: Real;\n}\n\n-- Define the TorqueGenerator\ncomponent LogicalTorqueGenerator {\n  provided Power: Real;\n  provided Torque: Real;\n}\n\n-- Define the mapping relationship between Logical and Physical Layers\nrelationship LogicalToPhysicalMapping {\n  source LogicalPowerProvider;\n  target PhysicalPowerUnit: component in PhysicalLayer::PowerUnit;\n}\n\nrelationship LogicalTorqueGeneratorToPhysicalPowerUnit {\n  source LogicalTorqueGenerator;\n  target PhysicalPowerUnit: component in PhysicalLayer::PowerUnit;\n}\n\n-- Define the Physical Layer\npackage PhysicalLayer\n\n-- Define the Physical Components\ncomponent PowerUnit {\n  provided Power: Real;\n  provided Torque: Real;\n}\n```",
    "-- Define the system\nmodel PowerTransmissionSystem\n\n-- Define the context\ncontext Context\n  requires PowerOutput: real;\nendContext Context\n\n-- Define the logical model\npackage LogicalModel\n  extend Context\n\n  -- Define the system\n  System PowerTransmissionSystem\n    -- Define the capability\n    Capability PowerGeneration\n      -- Define the provided interface\n      Provided Interface PowerInterface\n        -- Define the power output\n        attribute PowerOutput: real;\n\n      -- Define the required interface\n      Required Interface TorqueInterface\n        -- Define the torque\n        attribute Torque: real;\n\n      -- Define the realization\n      Realization TorqueGeneration\n        -- Define the torque generator\n        Component TorqueGenerator\n          -- Define the generating torque action\n          Action GenerateTorque;\n\n  -- Define the allocation\n  Allocation Allocation_TorqueGenerator_Engine\n    source TorqueGenerator;\n    target Powertrain.Engine;\nendPackage LogicalModel\n\n-- Define the physical model\npackage PhysicalModel\n  extend LogicalModel\n\n  -- Define the powertrain\n  Component Powertrain\n",
    "-- Define the top-level system\nmodel VehicleFeatureAnnotationSystem {\n  -- Define the two main assemblies\n  Assembly Interior {\n    -- Define the components within the interior assembly\n    Component SeatBelts {\n      property SafetyFunction;\n    }\n\n    Component FrontSeats {\n      property SafetyFunction;\n    }\n\n    Component DriverAirbag {\n      property SafetyFunction;\n    }\n\n    Component AlarmSystem {\n      property SecurityFunction;\n    }\n  }\n\n  Assembly BodyAssembly {\n    -- Define the components within the body assembly\n    Component BodyShell {\n      property ProtectionFunction;\n    }\n\n    Component Bumpers {\n      property ProtectionFunction;\n    }\n\n    Component KeylessEntryDevice {\n      property SecurityFunction;\n    }\n  }\n\n  -- Connect the assemblies to the top-level system\n  VehicleFeatureAnnotationSystem -> Interior : aggregation;\n  VehicleFeatureAnnotationSystem -> BodyAssembly : aggregation;\n}\n```",
    "-- Define the system\nmodel VehicleSimulationSystem\n\n-- Define the context\ncontext VehicleSimulationContext\n\n-- Define the vehicle block\nblock Vehicle\n    extends ModelElement\n\n    -- Define the properties\n    property InitialVelocity : Real(isInitial = true)\n    property InitialPosition : Real(isInitial = true)\n    property Acceleration : Real\n    property TimeStep : Real(isInitial = true)\n\n-- Define the ModelCenter block\nblock ModelCenter\n    extends ModelElement\n\n-- Define the connection between Vehicle and ModelCenter\nconnection VehicleToModelCenter\n    source Vehicle\n    target ModelCenter\n    end\n\n-- Define the simulation operation\noperation Simulate\n    input Vehicle : Vehicle\n    input ModelCenter : ModelCenter\n    output Velocity : Real\n    output Position : Real\n\n    -- Define the precondition\n    precondition\n        Vehicle.InitialVelocity != null and\n        Vehicle.InitialPosition != null and\n        ModelCenter != null and\n        Vehicle.Acceleration != null and\n        Vehicle.TimeStep > 0\n\n    --",
    "-- Package for all safety-related components\npackage SafetyFeatures {\n  -- Define the stereotype for safety-related components\n  stereotype @Safety {\n    property isMandatory : Boolean = false\n  }\n\n  -- Define the driver's seat with two mandatory seat belts\n  class DriverSeat {\n    property numSeatBelts : Integer = 2\n  }\n\n  -- Define the car body with a mandatory bumper\n  class CarBody {\n    property hasBumper : Component { stereotype @Safety and isMandatory = true }\n  }\n\n  -- Define the wheel assembly with two wheels and an optional ABS\n  class WheelAssembly {\n    property numWheels : Integer = 2\n    property hasABS : Component { stereotype @Safety }\n  }\n}\n\n-- Package for mandatory safety components\npackage MandatorySafetyFeatures {\n  -- Define the stereotype for mandatory safety components\n  stereotype @Safety and isMandatory = true {\n  }\n\n  -- Define the driver's seat with two mandatory seat bel",
    "-- Define the system context\nmodel VehicleSafetyComplianceSystem\n\n-- Define the vehicle package\npackage Vehicle {\n    -- Define the vehicle class\n    class Vehicle {\n        -- Define the mandatory seat belts\n        property SeatBelts : Set(SeatBelt) { (mandatory = true) }\n\n        -- Define the driver's airbag as an optional safety feature\n        property DriverAirbag : Option(Airbag) { (mandatory = false) }\n\n        -- Define the vehicle body package\n        package VehicleBody {\n            -- Define the bumper as a mandatory safety component\n            class Bumper { (mandatory = true) }\n\n            -- Define the keyless entry system as a non-mandatory configuration\n            class KeylessEntrySystem { (mandatory = false) }\n        }\n\n        -- Define the chassis package\n        package Chassis {\n            -- Define the number of tires as a fixed property\n            property NumberOfTires : int { (isPattern = false) } = 4\n\n            -- Define the anti-lock braking system (ABS",
    "// Define the Block defining the System\nmodel RiskManagementSystem\n\n// Define the Block defining the Context\ncontext Context\n\n// Define the Block defining the Requirement\nrequirement RiskManagement\n  this.description = 'The system is designed for modeling and managing risks and failures.'\n  this.visibility = Public\n\n// Define the Block defining the Function\nfunction IdentifySituations()\n  this.description = 'Identify and describe various possible situations.'\n  this.visibility = Public\n\nfunction AnalyzeCausalRelationships()\n  this.description = 'Establish causal relationships among different situations.'\n  this.visibility = Public\n\nfunction EvaluateRisks()\n  this.description = 'Record the probability of each cause and the severity level of each failure.'\n  this.visibility = Public\n\n// Define the Block defining the NonFunctionalRequirement\nnonFunctionalRequirement ProbabilityAndSeverity\n  this.description = 'The system should support recording the probability of each cause and the severity level of each failure.'\n  this.visibility = Public\n\n// Define the",
    "// Define the System\nmodel RiskManagementSystem\n\n// Define the Block defining the System\nBlock System\n    name \"RiskManagementSystem\"\n\n// Define the Block defining the Scenario\nBlock Scenario\n    name \"Scenario\"\n    properties {\n        data ScenarioID : String\n        data ScenarioName : String\n    }\n\n// Define the Block defining the Cause\nBlock Cause\n    name \"Cause\"\n    properties {\n        data CauseID : String\n        data CauseName : String\n        data Probability : Real\n    }\n\n// Define the Block defining the Failure\nBlock Failure\n    name \"Failure\"\n    properties {\n        data FailureID : String\n        data FailureName : String\n        data SeverityLevel : Integer\n    }\n\n// Define the Association between Scenario and Cause\nAssociation Scenario_Cause\n    source Scenario\n    target Cause\n    end\n\n// Define the Association between Scenario and Failure\nAssociation Scenario_Failure\n    source Scenario\n    target Failure\n    end\n\n// Define the Association",
    "-- Define the system context\nmodel EquipmentRiskAnalysis\n\n-- Define the system\npackage Equipment {\n    -- Define the equipment block\n    Block Equipment {\n        -- Define the battery component\n        Component Battery {\n            property float BatteryLevel;\n            property boolean IsCharging;\n            property boolean IsFailed;\n            property float FailureProbability;\n            property float MinimumBatteryLevel;\n            property float MaximumBatteryLevel;\n            property float ShutdownThreshold;\n            property float SeverityLevel;\n\n            -- Define the battery aging behavior\n            behavior BatteryAging {\n                signal BatteryAgingDetected;\n                signal BatteryFailure;\n\n                transition BatteryAging -> BatteryFailure / FailureProbability > 0.5;\n            }\n\n            -- Define the low battery behavior\n            behavior LowBattery {\n                signal LowBatteryDetected;\n                signal DeviceShutdown;\n\n                transition BatteryLevel < MinimumBatteryLevel -> LowBatteryDetected;\n                transition LowBatteryDetected *",
    "\n```vbnet\n-- Define the top-level system\nmodel MySystem\n\n-- Define the structural hierarchy\nsubsystem Subsystem1 {\n  -- Define internal components\n  component Component1 {\n    -- Define internal ports and their types\n    port InputPort1 : InputType;\n    port OutputPort1 : OutputType;\n  }\n\n  component Component2 {\n    -- Define internal ports and their types\n    port InputPort2 : InputType;\n    port OutputPort2 : OutputType;\n  }\n}\n\nsubsystem Subsystem2 {\n  -- Define internal components\n  component Component3 {\n    -- Define internal ports and their types\n    port InputPort3 : InputType;\n    port OutputPort3 : OutputType;\n  }\n\n  component Component4 {\n    -- Define internal ports and their types\n    port InputPort4 : InputType;\n    port OutputPort4 : OutputType;\n  }\n}\n\n-- Connect components through interfaces\ninterface Interface1 {\n  port InputPort1 : InputType;\n  port OutputPort1 : OutputType;\n}\n\ninterface Interface2 {\n  port Input",
    "// Define the root system\nmodel AutomotiveSystemArchitecture {\n  // Define the root component\n  Component root {\n    name \"Automotive System\"\n  }\n\n  // Define the safety profile for components\n  profile SafetyProfile {\n    note \"Safety-related components\"\n    taggedValue safety \"true\"\n  }\n\n  // Define mandatory safety components\n  Component seatBelts {\n    name \"Seat Belts\"\n    extends root\n    taggedValue mandatory \"true\"\n    profile SafetyProfile\n  }\n\n  Component bumpers {\n    name \"Bumpers\"\n    extends root\n    taggedValue mandatory \"true\"\n    profile SafetyProfile\n  }\n\n  // Define optional safety components\n  Component driverAirbag {\n    name \"Driver Airbag\"\n    extends root\n    taggedValue mandatory \"false\"\n    profile SafetyProfile\n  }\n\n  Component abs {\n    name \"ABS\"\n    extends root\n    taggedValue mandatory \"false\"\n    profile SafetyProfile\n  }\n\n  // Define non-safety components\n ",
    "// 1. Define the package for the automotive domain model\npackage AutomotiveDomainModel {\n\n  // 2. Define the alias for the core component \"汽车 (Car)\"\n  alias Car = \"汽车\";\n\n  // 3. Define the core component \"汽车 (Car)\"\n  component Car {\n    // 3.1 Define the properties of the car\n    property Torque: Real;\n  }\n\n  // 4. Define the annotation for explanatory comments\n  annotation Annotation {\n    name := 'comment';\n  }\n\n  // 5. Define the note for explanatory comments\n  note AutomotiveExplanation {\n    noteText := 'This system model aims to provide standardized definitions and annotations for fundamental concepts and elements in the automotive domain.';\n    location := Car;\n    annotations := [Annotation];\n  }\n}\n```",
    "-- Profile for Automobile Domain\nprofile AutomobileProfile {\n  profile ApplicationComponent {\n    applicationAutomobileDocumentManagementSystem {\n      applicationName \"Automobile Document Management System\";\n    }\n  }\n\n  profile Document {\n    Document {\n      attribute documentID String;\n      attribute documentName String;\n      attribute documentType String;\n    }\n\n    AutomobileDocument {\n      extends Document;\n      attribute automobileID String;\n    }\n\n    CarDocument {\n      extends Document;\n      alias \"Car\";\n    }\n  }\n\n  profile Quantity {\n    Quantity {\n      attribute quantityID String;\n      attribute quantityName String;\n      attribute quantityUnit String;\n    }\n\n    TorqueValue {\n      extends Quantity;\n      attribute standard \"ISQ\";\n    }\n  }\n\n  Automobile {\n    name \"Automobile\";\n    attribute automobileID String;\n\n    -- Associations\n    association automobileDocument {\n      end Automobile;\n      end AutomobileDocument;\n      navigability Automobile_0..*;\n      navigability",
    "-- Define Automobile class\nclass Automobile {\n    -- Define alias for Automobile\n    alias Car;\n\n    -- Define TorqueValue property\n    property TorqueValue : Real;\n\n    -- Define Torque alias for TorqueValue\n    alias Torque : TorqueValue;\n}\n\n-- Define TorqueValue class\nclass TorqueValue {\n    -- Define the name of the class\n    name TorqueValue;\n}\n```",
    "-- Define the abstract base class for the vehicle\nmodel VehicleModel\n\nabstract class Vehicle {\n    -- Define the attribute for vehicle size\n    attribute size : Integer;\n}\n\n-- Define the class for the basic vehicle\nclass BasicVehicle extends Vehicle {\n}\n\n-- Define the class for the engine\nclass Engine {\n    -- Define the attribute for the number of cylinders\n    attribute numCylinders : Integer;\n\n    -- Define the constraint for the minimum number of cylinders for small vehicles\n    constraint minCylindersForSmallVehicles {\n        self.numCylinders >= 4\n    }\n\n    -- Define the constraint for the maximum number of cylinders for large vehicles\n    constraint maxCylindersForLargeVehicles {\n        self.numCylinders <= 6\n    }\n}\n\n-- Define the relationship between the vehicle and the engine\nrelationship hasEngine {\n    source Vehicle;\n    target Engine;\n}\n\n-- Define the constraint for the engine configuration based on the vehicle size\nconstraint engineConfiguration {\n    vehicle : V",
    "\n```vbnet\n// Define Blocks\nBlock FuelTank {\n  Property fuelLevel : Real;\n  Port fuelIn : Input Fuel;\n  Port fuelOut : Output Fuel;\n}\n\nBlock Engine {\n  Property engineTemp : Real;\n  Port fuelIn : Input Fuel;\n  Port fuelOut : Output Fuel;\n}\n\nBlock FuelInterface {\n  Port fuelIn : Input Fuel;\n  Port fuelOut : Output Fuel;\n}\n\n// Define Requirements\nRequirement R1 {\n  Source FuelTank;\n  Target FuelInterface;\n  Property fuelLevel;\n  Stereotype \"<<manage>>\";\n}\n\nRequirement R2 {\n  Source FuelInterface;\n  Target FuelTank;\n  Property fuelLevel;\n  Stereotype \"<<monitor>>\";\n}\n\nRequirement R3 {\n  Source FuelTank;\n  Target Engine;\n  Property fuelLevel;\n  Stereotype \"<<support>>\";\n}\n\nRequirement R4 {\n  Source Engine;\n  Target FuelInterface;\n",
    "-- Define the Vehicle type with mass attribute\ntype Vehicle {\n  attribute mass: Real;\n}\n\n-- Define the AxleAssembly type\ntype AxleAssembly {\n  attribute numberOfWheels: Int;\n}\n\n-- Define the FrontAxle type, extending AxleAssembly and adding a steeringAngle parameter\ntype FrontAxle <| extend AxleAssembly |> {\n  attribute steeringAngle: Real;\n}\n\n-- Define the RearAxle type, extending AxleAssembly\ntype RearAxle <| extend AxleAssembly |> {\n}\n\n-- Define the Wheel type\ntype Wheel {\n  attribute name: String;\n}\n\n-- Define the Vehicle type with AxleAssembly components\ntype Vehicle {\n  component frontAxle: FrontAxle;\n  component rearAxle: RearAxle;\n  component axleAssemblies: AxleAssembly {\n    (frontAxle, rearAxle);\n  }\n}\n\n-- Define the FrontAxle type with two sequentially arranged Wheels\ntype"
]