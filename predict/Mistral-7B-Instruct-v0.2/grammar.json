[
    "\n\nBlock vehicle\n    Property vehicleMass: Real\n    Property currentStatus: String\n    InternalBlock engine\n        Property engineMass: Real\n        Property engineType: String\n    Association driver : Person\nendBlock vehicle\n\nBlock engine\n    Property engineMass: Real\n    Property engineType: String\nendBlock Person\n\nBlock Person\nendBlock Person",
    "\n\nModel M\n\nBlock vehicle\n\nBlock manuallyOperatedVehicle\n    Extension vehicle\n    Attribute numberOfWheels : Integer (1..4)\n    Attribute driver : Personnel\n\nBlock poweredVehicle\n    Extension vehicle\n    Attribute numberOfWheels : Integer (1..4)\n    Attribute engine : Engine\n\nBlock manuallyOperatedPoweredVehicle\n    Extension vehicle\n    Attribute numberOfWheels : Integer (1..4)\n    Attribute driver : Personnel\n    Attribute engine : Engine\n\nBlock Personnel\n\nBlock Engine\n\nRelation drives\n    Source vehicle\n    Target Personnel\n\nRelation powers\n    Source Engine\n    Target vehicle\n\nRelation hasEngine\n    Source manuallyOperatedPoweredVehicle\n    Target Engine\n\nRelation hasDriver\n    Source manuallyOperatedVehicle\n    Target Personnel\n    Source poweredVehicle\n    Target Personnel\n\nRelation hasManualDriver\n    Source manuallyOperatedVehicle\n    Target Personnel\n\nRelation hasPoweredEngine\n    Source poweredVehicle\n    Target Engine\n\nRelation hasManualEngineAndPower\n    Source manuallyOperatedPoweredV",
    "\n\n// Define Vehicle and Component Abstract Classes\n\nModel VehicleModel\n\nAbstract class Vehicle {\n    - name: String\n}\n\nAbstract class VehicleComponent {\n    - name: String\n}\n\n// Define Engine, Transmission, and Wheel Components\n\nClass Engine {\n    - isSubtypeOf VehicleComponent\n}\n\nClass Transmission {\n    - isSubtypeOf VehicleComponent\n}\n\nClass Wheel {\n    - isSubtypeOf VehicleComponent\n    - quantity: Integer (0..*)\n}\n\n// Define Vehicle with Compositional Relationships\n\nClass Vehicle {\n    - isSubtypeOf VehicleModel\n    - engine: Engine (1)\n    - transmission: Transmission (1)\n    - wheels: Wheel (4)\n}\n\n// Define Extensibility for Vehicle and Component Types\n\nModel ExtensibleVehicleModel\n\nExtends VehicleModel\n\nClass VehicleExtension {\n    - isSubtypeOf VehicleModel\n}\n\nClass ComponentExtension {\n    - isSubtypeOf VehicleComponent\n}\n\nClass Vehicle",
    "\n\nBlock vehicle\n    Feature vehicleType (String)\n    Block smallVehicle < vehicle\n        Feature smallVehicleType (String)\n        Block smallEngine < smallVehicle\n            Feature engineType (String)\n            Feature numCylinders (Integer) = 4\n            Block engineSubsystem < smallEngine\n                Feature cylinders (Integer)\n            EndBlock\n        EndBlock\n    EndBlock\n\n    Block largeVehicle < vehicle\n        Feature largeVehicleType (String)\n        Block largeEngine < largeVehicle\n            Feature engineType (String)\n            Feature numCylinders (Integer) = 6\n            Block engineSubsystem < largeEngine\n                Feature cylinders (Integer)\n            EndBlock\n        EndBlock\n    EndBlock\nEndBlock\n\nBlock engine\n    Feature engineType (String)\n    Feature numCylinders (Integer)\n    Block engineSubsystem\n        Feature cylinders (Integer)\n    EndBlock\nEndBlock",
    "\n\nBlock trafficSignalSystem\n    Block trafficSignal\n        Property color : String\n        Enumeration green, yellow, red\n        State greenState : State\n            Initial greenState\n            Transition onEntry: (self.color = 'green')\n            Transition onExit: (self.color <> 'green')\n        State yellowState : State\n            Initial yellowState\n            Transition onEntry: (self.color = 'yellow')\n            Transition onExit: (self.color <> 'yellow')\n        State redState : State\n            Initial redState\n            Transition onEntry: (self.color = 'red')\n            Transition onExit: (self.color <> 'red')\n        State currentState : State\n            Initial currentState\n            Transition onEntry: (self.color = (trafficSignal.color))\n            Transition onExit: (self.color <> (trafficSignal.color))\n    EndBlock\n\n    Block greenLight\n        Block greenLightComponent\n            Property name : String\n            Initial name = 'Green Light'\n            Extension trafficSignal\n        EndBlock\n    EndBlock\nEndBlock",
    "\n\nModel Information {\n  name \"Information Classification Management System\";\n  description \"A system for managing the classification of information based on the traffic light principle.\";\n}\n\nBlock InformationClassificationSystem {\n  name \"InformationClassificationSystem\";\n  isSpecification true;\n\n  Block UnclassifiedInformation {\n    name \"UnclassifiedInformation\";\n    isSpecification true;\n\n    Block Unclassified {\n      name \"Unclassified\";\n      isSpecification true;\n      property code \"uncl\";\n      property color \"green\";\n    }\n  }\n\n  Block ConfidentialInformation {\n    name \"ConfidentialInformation\";\n    isSpecification true;\n\n    Block Confidential {\n      name \"Confidential\";\n      isSpecification true;\n      property code \"conf\";\n      property color \"yellow\";\n    }\n  }\n\n  Block SecretInformation {\n    name \"SecretInformation\";\n    isSpecification true;\n\n    Block Secret {\n      name \"Secret\";\n      isSpecification true;\n      property code \"secr\";\n      property color \"red\";\n    }\n  }\n",
    "\n\nModel M1 {\n  // Define the types\n  Type EngineType {\n    property int numCylinders;\n  }\n\n  Type VehicleType {\n    property Engine engine;\n  }\n\n  // Define the classes\n  Class SmallVehicle {\n    extension EngineType {\n      numCylinders = 4;\n    }\n  }\n\n  Class LargeVehicle {\n    extension EngineType {\n      numCylinders = 6;\n    }\n  }\n\n  Class Engine {\n    property int numCylinders;\n    association engineCylinders : Cylinder;\n  }\n\n  Class Cylinder {\n  }\n\n  // Define the relationships\n  SmallVehicle <-- \"has engine\" Engine\n  LargeVehicle <-- \"has engine\" Engine\n  Engine \"has\" Cylinder * numCylinders;\n}",
    "\n\nModel VehicleModel\n\n// Definition of Vehicle\nBlock Vehicle\n    Feature driverInfo : DriverInformation\n    Feature fuelTank : FuelTank\n    Feature qualityAttributes : QualityAttributes\n\n// Definition of DriverInformation\nBlock DriverInformation\n    Attribute name : String\n    Attribute age : Integer\n\n// Definition of FuelTank\nBlock FuelTank\n    Feature fuelType : Fuel\n    Attribute capacity : Real\n\n// Definition of Fuel\nBlock Fuel\n    Attribute type : String\n\n// Definition of QualityAttributes\nBlock QualityAttributes\n    Attribute acceleration : Real\n    Attribute topSpeed : Real\n    Attribute fuelEfficiency : Real\n\n// Association between Vehicle and DriverInformation\nAssociation Vehicle_DriverInfo\n    End vehicle : Vehicle\n    End driverInfo : DriverInformation\n\n// Association between Vehicle and FuelTank\nAssociation Vehicle_FuelTank\n    End vehicle : Vehicle\n    End fuelTank : FuelTank\n\n// Association between FuelTank and Fuel\nAssociation FuelTank_Fuel\n    End fuelTank : FuelTank\n    End",
    "\n\nModel wheelAssemblyModel\nextends SysML.Block\n\nBlock wheelBearingUnit\nextends SysML.Block\nname wheelBearingUnit\n\nBlock tire\nextends SysML.Block\nname tire\n\nBlock bead\nextends SysML.Block\nname bead\n\nBlock hub\nextends SysML.Block\nname hub\n\nBlock rim\nextends SysML.Block\nname rim\n\nBlock boltMountingHole\nextends SysML.Block\nname boltMountingHole\n\nBlock threadedHole\nextends SysML.Block\nname threadedHole\n\nBlock boltConnection\nextends SysML.Block\nname boltConnection\n\nRelation pressFit\nextends SysML.Connection\nsource tire\ntarget rim\n\nRelation seal\nextends SysML.Connection\nsource tire\ntarget rim\n\nRelation fasten\nextends SysML.Connection\nsource tire\ntarget hub\n\nRelation connectMountingHoleToThreadedHole\nextends SysML.Connection\nsource boltMountingHole\ntarget threadedHole\n\nRel",
    "\n\nBlock fuelTankAssembly {\n  Port fuelPort {\n    DataFlow fuelFlow_Out {\n      End fuelTankEnd;\n      End engineEnd;\n    }\n    DataFlow fuelReturnFlow_In {\n      End engineEnd;\n      End fuelTankEnd;\n    }\n    DataFlow temperatureDataFlow {\n      End fuelTankEnd;\n      End engineEnd;\n    }\n  }\n\n  Block engine {\n    Port enginePort {\n      DataFlow fuelFlow_In {\n        End fuelTankEnd;\n        End engineEnd;\n      }\n      DataFlow fuelReturnFlow_Out {\n        End engineEnd;\n        End fuelTankEnd;\n      }\n      DataFlow temperatureDataFlow_In {\n        End engineEnd;\n        End fuelTankEnd;\n      }\n    }\n  }\n\n  Connection fuelFlow_Connection {\n    Source fuelTankAssembly.fuelPort.fuelFlow_Out;\n    Target engine.enginePort.fuelFlow_In;\n  }\n\n  Connection fuelReturnFlow_Connection {\n    Source engine.enginePort.f",
    "\n\nModel VehicleModel\n\nBlock Vehicle [\n    name : \"Vehicle\";\n    attribute mass {\n        initialValue 1750;\n    };\n];\n\nBlock FrontAxle [\n    name : \"FrontAxle\";\n    attribute mass {\n        inheritedFrom Vehicle;\n    };\n];\n\nBlock RearAxle [\n    name : \"RearAxle\";\n    attribute mass {\n        inheritedFrom Vehicle;\n    };\n];\n\nBlock Tire [\n    name : \"Tire\";\n    attribute mass {\n        inheritedFrom Vehicle;\n    };\n];\n\nBlock Vehicle1_c1 [\n    name : \"vehicle1_c1\";\n    extension Vehicle [\n        attribute mass {\n            value 2000;\n        };\n    };\n    Block FrontAxle_c1 [\n        name : \"FrontAxle_c1\";\n        extension FrontAxle [\n            attribute mass {\n                value 500;\n            };\n            attribute steeringAngle {\n                initialValue 30;",
    "\n\n// Model for the Coupling System between a Vehicle and a Trailer\n\nmodel CouplingSystem\n\n// Define the Vehicle Block\nblock Vehicle {\n    // Define the Hitch Component\n    component Hitch {\n        // Define the Ball Reference\n        reference Ball;\n    }\n}\n\n// Define the Trailer Block\nblock Trailer {\n    // Define the Connector Component\n    component Connector {\n        // Define the Ball Reference\n        reference Ball;\n    }\n}\n\n// Define the Coupling Mechanism\nblock CouplingMechanism {\n    // Define the Hitch Component\n    component Hitch {\n        // Define the Ball\n        property Ball: BallType;\n    }\n\n    // Define the Connector Component\n    component Connector {\n        // Define the Ball\n        property Ball: BallType;\n    }\n\n    // Define the Connection Relationship between Hitch and Connector\n    connection Connection {\n        source Hitch.Ball;\n        target Connector.Ball;\n    }\n}\n\n// Define the Ball Type\ntype BallType {\n    // Define the Compatible Ball Sh",
    "\n\nModel vehiclePowerTransmissionSystem\n\nBlock engine\n    Port fuelCommand: FuelCommandPort\n    Port power: PowerPort\n    Port clutch: ClutchPort\n    InternalBlock internalEngineComponents\nEnd\n\nBlock transmission\n    Port powerIn: PowerPort\n    Port clutchIn: ClutchPort\n    Port powerOut: PowerPort\n    InternalBlock internalTransmissionComponents\nEnd\n\nBlock clutch\n    Port engine: ClutchPort\n    Port transmission: ClutchPort\nEnd\n\nBlock driveshaft\n    Port powerIn: PowerPort\n    Port powerOut: PowerPort\nEnd\n\nBlock rearAxleAssembly\n    Port powerIn: PowerPort\n    Port leftHalfShaft: HalfShaftPort\n    Port rightHalfShaft: HalfShaftPort\n    InternalBlock internalRearAxleComponents\nEnd\n\nBlock differential\n    Port leftHalfShaft: HalfShaftPort\n    Port rightHalfShaft: HalfShaftPort\nEnd\n\nBlock leftHalfShaft\n    Port powerIn: PowerPort\n    Port wheel: WheelPort\nEnd\n\nBlock rightHalfShaft\n    Port power",
    "\n\nBlock b11 {\n    Port pb : Signal;\n    Component c1 {\n        Port pc : Signal;\n        Port pe : Signal;\n        SignalConnection sc1 : (pc -> pe);\n    }\n    Component c2 {\n        Port pd : Signal;\n        Port pe : Signal;\n        SignalConnection sc2 : (pd -> pe);\n    }\n}\n\nBlock b12 {\n    Port pd : Signal;\n    Component c3 {\n        Port pc : Signal;\n        Port pf : Signal;\n        SignalConnection sc3 : (pc -> pf);\n    }\n    Component c4 {\n        Port pd : Signal;\n        Port pf : Signal;\n        SignalConnection sc4 : (pd -> pf);\n    }\n}\n\nBlock b21 {\n    Import b11;\n    Component c1_ref : Component {\n        Port pc : Signal;\n        Port pe : Signal;\n    } = b11.c1;\n    Component c2_ref : Component {\n        Port pd :",
    "\n\nBlock diagram_AutomobilePowertrain {\n  Block engine {\n    Port fuelCommandPort {\n      DataType FuelCommand\n    }\n\n    InternalBlock ignitionSystem {\n      Port ignitionCommandPort {\n        DataType IgnitionCommand\n      }\n\n      Action igniteEngine {\n        Precondition ignitionCommandPort.received(IgnitionCommand::START)\n        Postcondition engine.hasProperty(Engine::RUNNING)\n      }\n    }\n\n    InternalBlock torqueAmplifier {\n      Port engineTorquePort {\n        DataType EngineTorque\n      }\n\n      Port transmissionTorquePort {\n        DataType TransmissionTorque\n      }\n\n      Action amplifyTorque {\n        Precondition engineTorquePort.received(EngineTorque::TORQUE)\n        Postcondition transmissionTorquePort.transmitted(TransmissionTorque::TORQUE)\n      }\n    }\n\n    InternalBlock powerDistribution {\n      Port transmissionTorquePort {\n        DataType TransmissionTorque\n      }\n\n      Port leftWheelTorquePort {\n        DataType LeftWheel",
    "\n\nmodel PowertrainControlSystem\n\nrequirement FuelCommandReceived {\n    input FuelCommand: Command\n}\n\nrequirement EngineStart {\n    operation EngineStart(FuelCommand: Command)\n    pre EngineStartPreconditions(FuelCommand: Command)\n    post EngineStartPostconditions(FuelCommand: Command)\n}\n\nrequirement EngineTorqueGeneration {\n    operation EngineTorqueGeneration(Engine: Engine)\n    pre EngineTorqueGenerationPreconditions(Engine: Engine)\n    post EngineTorqueGenerationPostconditions(Engine: Engine)\n}\n\nrequirement TorqueAmplification {\n    operation TorqueAmplification(Torque: Real)\n    pre TorqueAmplificationPreconditions(Torque: Real)\n    post TorqueAmplificationPostconditions(Torque: Real)\n}\n\nrequirement TorqueTransmission {\n    operation TorqueTransmission(Torque: Real, Transmission: Transmission)\n    pre TorqueTransmissionPreconditions(Torque: Real, Transmission: Transmission)\n    post TorqueTransmissionPostconditions(Torque: Real, Transmission: Transmission)\n}",
    "\n\nBlock engine\n    Property fuelCommand : Real\n    Property engineTorque : Real\n    Property engineOutput : Real\n    Property engineStartSignal : Boolean\n    Property engineShutdownSignal : Boolean\n\nBlock fuelCommand\n    Property fuelInput : Real\n\nBlock transmission\n    Property engineTorque : Real\n    Property transmissionTorque : Real\n    Property transmissionGear : String\n\nBlock wheel\n    Property wheelTorque : Real\n\nBlock powertrainControl\n    Property engine : BlockEngine\n    Property fuelCommand : BlockFuelCommand\n    Property transmission : BlockTransmission\n    Property wheel : BlockWheel\n\n    Operation startEngine(input : Boolean) : Boolean\n        Precondition engineShutdownSignal = false\n        Postcondition engineStartSignal = input\n        Context engine\n        Action engine.engineStartSignal := input\n\n    Operation stopEngine(input : Boolean) : Boolean\n        Precondition engineStartSignal = true\n        Postcondition engineShutdownSignal = input\n        Context engine\n        Action engine.engineShutdownSignal := input\n\n    Operation generateTorque(input : Real) : Real\n        Precondition engineStartSignal = true\n        Postcondition engineTor",
    "\n\nBlock vehicle {\n  Port vehiclePowerIn {\n    DataType power\n  }\n\n  Port vehiclePowerOut {\n    DataType power\n  }\n\n  Block hitch {\n    Port hitchBall {\n      DataType hitchBallShape\n    }\n\n    Port hitchCoupler {\n      DataType hitchCouplerShape\n    }\n\n    Connection hitchConnection {\n      Role hitchRole_vehicle {\n        IsSource vehicle\n        IsTarget hitch\n      }\n      Role hitchRole_trailer {\n        IsSource hitch\n        IsTarget trailer\n      }\n    }\n  }\n\n  Block structuralFrame {\n    Property structuralStrength {\n      Type double\n      Initial 10000.0\n    }\n  }\n\n  Block independentFrame {\n    Extends structuralFrame\n  }\n\n  Block powerConnection {\n    Action powerConnect {\n      Precondition hitchConnection.hitchRole_vehicle.isConnected\n      Postcondition vehiclePowerIn.power > 0\n    }\n\n    Action powerDisconnect {\n",
    "\n\nBlock vehicle {\n    Property chassis;\n    Property towBall;\n\n    Relation connectionTo {\n        End vehicleEnd;\n        End trailerEnd;\n        Navigation vehicleEnd -> towBall;\n        Navigation trailerEnd -> coupler;\n    }\n}\n\nBlock trailer {\n    Property coupler;\n    Property trailerFrame;\n\n    Relation connectionTo {\n        End vehicleEnd;\n        End trailerEnd;\n        Navigation vehicleEnd -> towBall;\n        Navigation trailerEnd -> coupler;\n    }\n}\n\nBlock chassis {\n    Property vehicle;\n}\n\nBlock towBall {\n    Property vehicle;\n}\n\nBlock coupler {\n    Property trailer;\n}\n\nBlock trailerFrame {\n    Property trailer;\n}\n\nBlock User {\n    Property system;\n}\n\nRelation connectsTo {\n    End vehicleEnd;\n    End trailerEnd;\n}\n\nRelation disconnectsFrom {\n    End vehicleEnd;\n    End trailerEnd;\n}\n\nBlock System {\n    Property vehicle;\n    Property trailer;\n   ",
    "\n\nBlock vehicle [\n    Property towBall [\n        Type TowBallDevice;\n    ];\n];\n\nBlock trailer [\n    Property coupler [\n        Type CouplerMechanism;\n    ];\n];\n\nBlock TowBallDevice [\n    Operation engage [\n        Parameter connection [\n            Type ConnectionReference;\n        ];\n    ];\n];\n\nBlock CouplerMechanism [\n    Operation latch [\n        Parameter connection [\n            Type ConnectionReference;\n        ];\n    ];\n\n    Operation disengage [\n        Parameter connection [\n            Type ConnectionReference;\n        ];\n    ];\n];\n\nBlock ConnectionReference [\n    Property connectedTo [\n        Type ConnectionEnd;\n    ];\n\n    Property connectingTo [\n        Type ConnectionEnd;\n    ];\n];\n\nBlock ConnectionEnd [\n    Property owner [\n        Type Block;\n    ];\n];\n\nRelation Connection [\n    Source vehicle.towBall;\n    Target trailer.coupler;\n];\n\nRelation Connection_latch [\n    Source trailer.coupler;\n    Target vehicle.towBall;\n];",
    "\n\nBlock FuelSystem {\n  Port fuelSupplyPort {\n    Type Fuel\n  }\n\n  Port fuelReturnPort {\n    Type Fuel\n  }\n\n  InternalBlock fuelTankAssembly {\n    Port fuelInPort {\n      Connection fuelSupplyPort -> fuelInPort\n    }\n\n    Port fuelOutPort {\n      Connection fuelOutPort -> fuelReturnPort\n    }\n\n    InternalBlock engine {\n      Port engineFuelInPort {\n        Connection fuelInPort -> engineFuelInPort\n      }\n\n      Port engineFuelOutPort {\n        Connection fuelOutPort -> engineFuelOutPort\n      }\n\n      InternalBlock fuelMonitor {\n        Property temperature {\n          Type Real\n          Initial 25.0\n        }\n      }\n    }\n  }\n\n  InternalBlock fuelSupplyRoute {\n    Connection fuelTankAssembly.fuelOutPort -> engine.engineFuelInPort\n  }\n\n  InternalBlock fuelReturnRoute {\n    Connection engine.engineFuelOutPort -> fuelTankAssembly.fuelInPort\n  }\n\n  Connection fuelSupply",
    "\n\nBlock fuelSystem\n    Requirement fuelDeliveryEfficiency {\n        description \"This system is designed to provide vehicles with efficient fuel delivery services.\";\n    }\n\n    Block storageTank\n        Requirement initialFuelReservoir {\n            description \"The system includes a storage tank as the initial fuel reservoir.\";\n        }\n        Port fuelInlet {\n            description \"Output from the storage tank.\";\n        }\n        InternalFlow fuelFlowToFuelPump {\n            description \"Flow path of the fuel is clear and controllable.\";\n        }\n        Block fuelPump\n            Requirement fuelExtraction {\n                description \"From which fuel is extracted and delivered to vehicles via a fuel pump.\";\n            }\n            Port fuelOutlet {\n                description \"Output from the fuel pump.\";\n            }\n            InternalFlow fuelFlowToVehicleFuelTank {\n                description \"Flow path of the fuel is clear and controllable.\";\n            }\n        EndBlock\n    EndBlock\n\n    Block vehicleFuelTank\n        Requirement fuelReceptionAndStorage {\n            description \"Inside the vehicle, there is a",
    "\n\nBlock Gearbox {\n  Port InputGearbox {\n    Type GearboxType\n  }\n\n  Port OutputGearbox {\n    Type VehicleAssembly\n  }\n\n  InternalFeature gearboxState {\n    Type GearboxState\n  }\n\n  Block Engine {\n    Port InputEngine {\n      Type VehicleAssembly\n    }\n\n    Port OutputEngine {\n      Type VehicleAssembly\n    }\n\n    InternalFeature engineState {\n      Type EngineState\n    }\n  }\n\n  Relation GearboxToEngine {\n    Source Gearbox.OutputGearbox\n    Target Engine.InputEngine\n  }\n\n  Block VehicleAssembly {\n    Port InputVehicleAssembly {\n      Type VehicleAssembly\n    }\n\n    Port OutputVehicleAssembly {\n      Type Vehicle\n    }\n\n    InternalFeature vehicleState {\n      Type VehicleState\n    }\n\n    Relation GearboxToVehicleAssembly {\n      Source Gearbox.OutputGearbox\n      Target VehicleAssembly.InputVehicleAssembly\n    }\n\n    Relation EngineToVehicle",
    "\n\nBlock VehicleA {\n    Property temperature : Real;\n\n    State Off {\n        Transition PressBrakeAndStartSignal -> Starting;\n    }\n\n    State Starting {\n        Transition VehicleOnSignal -> Running;\n    }\n\n    State Running {\n        Action SelfChecks();\n        Action PowerSupply();\n        Action ApplyParkingBrake();\n\n        Transition OverTemperatureSignal -> Degraded;\n    }\n\n    State Degraded {\n        Transition RestoreToNormalSignal -> Running;\n    }\n\n    State Maintenance {\n        // Optional\n    }\n\n    State HealthManagement {\n        Action TemperatureDetection();\n    }\n\n    InternalBlock VehicleController {\n        Property vehicleControlState : String;\n\n        State Idle {\n            Transition StartUpSignal -> RunningControlState;\n            Transition ShutDownSignal -> IdleControlState;\n        }\n\n        State RunningControlState {\n            // Optional\n        }\n\n        State IdleControlState {\n            // Optional\n        }\n    }\n}",
    "\n\nModel Vehicle_System\n\n// Vehicle Component\nBlock Vehicle\n    Property Fuel: Real\n    Property Maintenance_Interval: Real\n    Property Temperature_Threshold: Real\n\n    Operation Startup(Brake_Pedal_Pressed: Boolean, Start_Signal_Received: Boolean)\n        Precondition Brake_Pedal_Pressed and Start_Signal_Received\n        Postcondition Self_Inspection and Power_Supply\n\n    Signal Overheating_Detected\n\n    Transition Overheating(Temperature: Real)\n        Guard Temperature > Temperature_Threshold\n        Action Warning_Signal and Degraded_Mode\n\n    Transition Shutdown\n\n    // Health Management\n    Operation Maintenance\n        Postcondition Timely_Maintenance\n\n    Operation Fault_Recovery\n        Postcondition Restoration_From_Abnormal_State\n\n    // Vehicle Controller Interface\n    Port Controller_Interface\n        Signal Control_Signal\n        Signal Status_Signal\n\nEnd Vehicle\n\n// Vehicle Controller Component\nBlock Vehicle_Controller\n    Operation Control_Operations",
    "\n\nBlock vehicle\n    Property mass: Real(initial: 0.0, isDerived: false)\n    Property position: Point(x: Real(initial: 0.0, isDerived: false), y: Real(initial: 0.0, isDerived: false))\n    Property velocity: Vector(x: Real(initial: 0.0, isDerived: false), y: Real(initial: 0.0, isDerived: false))\n    Property acceleration: Vector(x: Real(initial: 0.0, isDerived: false), y: Real(initial: 0.0, isDerived: false))\n    Property on: Boolean(initial: true, isDerived: false)\n\nBlock road\n    Property slopeAngle: Real(initial: 0.0, isDerived: false)\n    Property surfaceFrictionCoefficient: Real(initial: 0.0, isDerived: false)\n\nBlock Simulation\n    Block vehicleSystem\n        Part vehicle: vehicle\n        Part road: road\n\n    Action initialize\n        Input: vehicle: vehicle\n        Input: road:",
    "\n\nBlock automobile {\n  Block subsystemA {\n    Block configOption1 {\n      Component component1;\n      Component component2;\n    }\n    Block configOption2 {\n      Component component2;\n      Component component3;\n    }\n    Block currentConfiguration;\n    currentConfiguration -> configOption1 [1];\n    currentConfiguration -> configOption2 [0];\n  }\n  Block subsystemB {\n    Block configOption1 {\n      Component component4;\n      Component component5;\n    }\n    Block configOption2 {\n      Component component5;\n      Component component6;\n    }\n    Block currentConfiguration;\n    currentConfiguration -> configOption1 [1];\n    currentConfiguration -> configOption2 [0];\n  }\n  Block constraint {\n    Block subsystemACondition {\n      Block secondConfiguration;\n      secondConfiguration -> configOption2 [1];\n    }\n    Block subsystemBCondition {\n      Block thirdConfiguration;\n      thirdConfiguration -> configOption1 [0] or thirdConfiguration -> configOption2 [1];\n    }\n    Block andOperator {\n      Block leftOperand;\n      left",
    "\n\nBlock diagram\nmodel MyModel\n\n// Define abstract subsystems\nSubsystem A {\n abstract feature Quantity {\n integer min = 1;\n integer max = 10;\n }\n abstract feature Type {\n String value = \"TypeA\";\n }\n abstract port p1 {\n dataType PartDataType;\n }\n}\n\nSubsystem B {\n abstract feature Quantity {\n integer min = 1;\n integer max = 5;\n }\n abstract feature Type {\n String value = \"TypeB\";\n }\n abstract port p2 {\n dataType PartDataType;\n behavioralVariants {\n Variant1 {\n behavior behavior1();\n }\n Variant2 {\n behavior behavior2();\n }\n }\n}\n}\n\n// Define components\nComponent part1 {\n feature ports {\n Port p1 {\n type p1PortType;\n }\n }\n}\n\nComponent part2 {\n feature ports {\n Port p1 {\n type p1PortType;\n }\n }\n}\n\nComponent part3 {\n feature ports {\n Port p1 {\n type p1PortType;\n }\n }\n behavioralVari",
    "\n\nBlock vehicleSystem {\n    Block engine {\n        Block 4CylinderEngine {\n            property performance = 120;\n            property transmission = manual;\n            property wheel = narrow;\n        }\n        Block 6CylinderEngine {\n            property performance = 180;\n            property transmission = automatic;\n            property wheel = wide;\n        }\n    }\n    Block transmission {\n        Block manual {\n            property name = \"Manual\";\n        }\n        Block automatic {\n            property name = \"Automatic\";\n        }\n    }\n    Block wheel {\n        Block narrow {\n            property name = \"Narrow\";\n        }\n        Block wide {\n            property name = \"Wide\";\n        }\n    }\n    Block configurationConstraint {\n        Block performanceConstraint {\n            property name = \"Performance\";\n            property minPerformance = 120;\n            property maxPerformance = 180;\n        }\n        Block compatibilityConstraint {\n            property name = \"Compatibility\";\n            property engine = engine;\n            property transmission = transmission;\n            property wheel = wheel;",
    "\n\n// Automobile System Model\n\npackage automobile_system\n\n// Define Vehicle\n\nclass Vehicle {\n    +mass: Real\n    +fuelStatus: FuelStatus\n    -engine: Engine\n    -transmission: Transmission\n}\n\n// Define Engine\n\nclass Engine {\n    +powerDelivery: PowerDelivery\n}\n\n// Define Transmission\n\nclass Transmission {}\n\n// Define FuelStatus\n\nclass FuelStatus {\n    +massGrade: MassGrade\n}\n\n// Define MassGrade\n\nclass MassGrade {\n    +maxMass: Real\n}\n\n// Define PowerDelivery\n\ninterface PowerDelivery {\n    -engine: Engine\n    -transmission: Transmission\n}\n\n// Define Interfaces\n\ninterface DriveInterface {\n    -engine: Engine\n    -transmission: Transmission\n}\n\n// Define Reliability\n\ninterface Reliability {\n    +performance: Performance\n    +durability: Durability\n}\n\n// Define Performance\n\nclass Performance {}\n\n// Define Durability\n\nclass Durability {}",
    "\n\nBlock vehicleTestingSystem {\n    Feature massCompliance {\n        Value massLimit = 2500.0 kg;\n    }\n\n    Block vehicle {\n        Feature mass {\n            Value actualMass;\n        }\n    }\n\n    Block weighingEquipment {\n        Block testOperator {\n            Operation measureMass(vehicle: vehicle);\n        }\n    }\n\n    Block testResult {\n        Feature compliant {\n            Value value = false;\n        }\n    }\n\n    Block testSequence {\n        Operation testVehicle(vehicle: vehicle): testResult {\n            Sequence {\n                Call testOperator->measureMass(vehicle);\n                If (vehicle.mass.actualMass > massLimit) {\n                    testResult->compliant = false;\n                } else {\n                    testResult->compliant = true;\n                }\n            }\n        }\n    }\n}",
    "\n\nBlock SpigotBank {\n    Port Spigot {\n        DataType Water\n        Flow hotWater, coldWater\n    }\n\n    Block Spigot {\n        Port spigotPort {\n            DataType Water\n            Flow hotWater, coldWater\n        }\n\n        InternalBlock HotWaterTank {\n            DataType Water\n            Flow hotWater\n        }\n\n        InternalBlock ColdWaterTank {\n            DataType Water\n            Flow coldWater\n        }\n\n        Connection hotWaterConnection : hotWater -> hotWater\n        Connection coldWaterConnection : coldWater -> coldWater\n\n        InternalConnection hotWaterToSpigot : hotWaterConnection -> spigotPort.hotWater\n        InternalConnection coldWaterToSpigot : coldWaterConnection -> spigotPort.coldWater\n    }\n\n    Block Faucet {\n        Port faucetPort {\n            DataType Water\n            Flow hotWater, coldWater\n        }\n\n        InternalBlock FaucetInletHot {\n            Port inletPort {\n                DataType Water\n                Flow hotWater\n            }\n\n            Connection hotWaterConnection",
    "\n\nBlock vehicle\n\nBlock engine\n    Attribute mass Real 0..1\n\nBlock transmission\n    Attribute mass Real 0..1\n\nBlock frontAxleAssembly\n    Attribute mass Real 0..1\n\nBlock rearAxleAssembly\n    Attribute mass Real 0..1\n\nBlock vehicleQualityAnalysis\n    Block qualityData\n        Attribute data Real 0..*\n    Block analysisRequirements\n        Attribute objective String 0..*\n    Block analysisUseCases\n        Attribute useCase String 0..*\n    Block analysisTasks\n        Block task\n            Attribute name String 1..1\n            Attribute description String 0..*\n            Attribute objectiveRef AnalysisRequirements : AnalysisRequirements\n            Attribute precondition String 0..*\n            Attribute postcondition String 0..*\n            Attribute priority Real 0..1\n        EndBlock\n    EndBlock\n    Block analysisPlans\n        Block plan\n            Attribute name String 1..1\n            Attribute description String 0..*\n            Attribute startDate Date 0..1\n            Attribute endDate Date 0..1\n            Attribute tasks Task : AnalysisTasks 0..*\n        End",
    "\n\nModel EngineSystem\n\nModel EngineSystem_Performance\n\nModel EngineSystem_Performance.Power\nModel EngineSystem_Performance.Mass\nModel EngineSystem_Performance.Efficiency\nModel EngineSystem_Performance.Reliability\nModel EngineSystem_Performance.Cost\n\nModel Engine\n\nModel Engine.EngineType\nModel Engine.Cylinders\nModel Engine.Pistons\nModel Engine.ConnectingRods\nModel Engine.Crankshaft\n\nModel Engine.EngineType_FourCylinder\nModel Engine.EngineType_SixCylinder\n\nModel Engine.Cylinders_Cylinder\nModel Engine.Cylinders_Number\n\nModel Engine.Pistons_Piston\nModel Engine.Pistons_Number\n\nModel Engine.ConnectingRods_ConnectingRod\nModel Engine.ConnectingRods_Number\n\nModel Engine.Crankshaft\n\nModel EvaluationModel\nModel EvaluationModel.EvaluationMethod\nModel EvaluationModel.EvaluationResults\n\nModel EvaluationModel.EvaluationMethod_MultiAttributeTradeoff\n\nModel EvaluationModel",
    "\n\nBlock Vehicle\n\nFeature FuelEconomy\n    Property MinUrbanFuelEconomy : Real(25)\n    Property MinHighwayFuelEconomy : Real(30)\n\nBlock Powertrain\n    Generalization powertrain_of Vehicle\n\nBlock Load\n    Generalization load_of Vehicle\n    Property AdditionalLoad : Real(1000)\n\nBlock UrbanDriving\n    Generalization urban_driving_of Vehicle\n    Property UrbanDrivingScenario : String\n\nBlock HighwayDriving\n    Generalization highway_driving_of Vehicle\n    Property HighwayDrivingScenario : String\n\nBlock FuelConsumptionAssessment\n    Generalization fuel_consumption_assessment_of Vehicle\n    Property Vehicle : Block(Vehicle)\n    Property Powertrain : Block(Powertrain)\n    Property Load : Block(Load)\n    Property UrbanDriving : Block(UrbanDriving)\n    Property HighwayDriving : Block(HighwayDriving)\n\nBlock UrbanFuelEconomyTest\n    Generalization urban_fuel_economy_test_of Fuel",
    "\n\nBlock vehicle\n    Property vehicleMass: Real(10, -2)\n    Property initialPosition: Real(10, 2)\n    Property initialVelocity: Real(10, 2)\n    Property timeStep: Real(10, -3)\n    Property powerData: Sequence(Real(10, -2))\n\nBlock Simulator\n    Operation calculateAcceleration(Real time, Real vehicleMass, Real initialPosition, Real initialVelocity, Real timeStep, Real[] powerData): Real\n    Operation calculateVelocity(Real time, Real vehicleMass, Real initialPosition, Real initialVelocity, Real timeStep, Real[] powerData): Real\n    Operation calculatePosition(Real time, Real vehicleMass, Real initialPosition, Real initialVelocity, Real timeStep, Real[] powerData): Real\n\n    Association vehicleToSimulator\n        End vehicle\n        End Simulator\n        Navigable vehicleMass: vehicleMass\n        Navigable initialPosition: initialPosition\n        Navigable initialVelocity: initialVelocity\n        Navigable timeStep: timeStep\n        Navigable powerData: powerData\n\nBlock UserInterface",
    "\n\nModel car\n\nBlock car\n\nProperty car.mass 2500 kg\n\nBlock frontAxle\n\nBlock frontWheel1\n\nBlock frontWheel2\n\nProperty frontAxle.mass 150 kg\n\nProperty frontAxle.steeringAngle\n\nBlock frontAxle.frontAxle\n\nProperty frontAxle.frontAxle.mass\n\nBlock rearAxle\n\nBlock rearWheel1\n\nBlock rearWheel2\n\nProperty rearAxle.mass 250\n\nProperty frontAxle.frontWheel1.mass\n\nProperty frontAxle.frontWheel2.mass\n\nProperty rearAxle.rearWheel1.mass\n\nProperty rearAxle.rearWheel2.mass",
    "\n\n// Vehicle System Model\n\npackage vehicle_system\n\n// Define Vehicle System Block\nBlock vehicle_system {\n    // Define Vehicle Block\n    Block vehicle {\n        // Define Mandatory Safety Features\n        Block mandatory_safety_features {\n            Property isMandatory : Boolean = true\n            Block seat_belts {\n                Property name : String = \"Seat Belts\"\n            }\n            Block bumpers {\n                Property name : String = \"Bumpers\"\n            }\n        }\n\n        // Define Optional Safety Features\n        Block optional_safety_features {\n            Property isMandatory : Boolean = false\n            Block airbags {\n                Property name : String = \"Airbags\"\n            }\n            Block anti_lock_braking_system {\n                Property name : String = \"Anti-Lock Braking System\"\n            }\n        }\n\n        // Define Security Features\n        Block security_features {\n            Property isMandatory : Boolean = false\n            Block alarms {\n                Property name : String = \"Alarms\"\n            }\n            Block",
    "\n\nModel M1 {\n  // Define the system\n  Block system {\n    Name \"MySystem\";\n\n    // Define the layers\n    Block applicationLayer {\n      Name \"ApplicationLayer\";\n      Requires serviceLayer;\n      Provides applicationInterface;\n    }\n\n    Block serviceLayer {\n      Name \"ServiceLayer\";\n      Requires dataLayer;\n      Provides serviceInterface;\n    }\n\n    Block dataLayer {\n      Name \"DataLayer\";\n    }\n\n    // Define the interfaces\n    Interface applicationInterface {\n      // No attributes or operations defined\n    }\n\n    Interface serviceInterface {\n      // No attributes or operations defined\n    }\n\n    // Define the core attributes\n    Attribute x {\n      Name \"x\";\n      IsPublic true;\n    }\n\n    Attribute y {\n      Name \"y\";\n      IsPublic true;\n    }\n\n    Attribute z {\n      Name \"z\";\n      IsPublic true;\n      InitialValue \"0\";\n      Feature x {\n        Type relationship;\n        RoleSource role_x;\n      }\n\n      Feature y {\n",
    "\n\nBlock torqueSystem {\n  Requirement r1 {\n    name \"The system is designed to realize the torque generation function within the powertrain system.\";\n    annotation \"requirement\" \"Torque Generation Function\";\n  }\n\n  Block engine {\n    name \"Engine\";\n    Provided torque: Real (lower = 0.0);\n    Provided power: Real (lower = 0.0);\n  }\n\n  Block transmission {\n    name \"Transmission\";\n  }\n\n  Block differential {\n    name \"Differential\";\n  }\n\n  Block wheel {\n    name \"Wheel\";\n  }\n\n  Block logicLayer {\n    name \"Logic Layer\";\n    Provided torqueGenFunction: Operation;\n  }\n\n  Block physicalLayer {\n    name \"Physical Layer\";\n    Owned engine;\n    Owned transmission;\n    Owned differential;\n    Owned wheel;\n  }\n\n  Block torqueGenerator {\n    name \"Torque Generator\";\n    Provided torque: Real (lower = 0.0);\n    Prov",
    "\n\nBlock TorqueGenerator {\n  Requirement r1 : capability (\n    powerTransmission : PowerPort {\n      provided: true,\n      required: true\n    },\n    torqueGeneration : PowerPort {\n      provided: true\n    }\n  );\n\n  Requirement r2 : logicalFunction (\n    name: \"Torque Generation\",\n    providedInterface: TorqueGeneratorInterface\n  );\n\n  Requirement r3 : allocation (\n    target: Powertrain,\n    source: r2\n  );\n\n  Block Engine {\n    Requirement r4 : interfaceRealization (\n      interface: TorqueGeneratorInterface,\n      providedEnd: r2.providedInterface\n    );\n\n    Requirement r5 : powerPort (\n      name: \"EnginePowerPort\",\n      provided: true,\n      required: true\n    );\n\n    Requirement r6 : powerPort (\n      name: \"EngineTorquePort\",\n      provided: true\n    );\n\n    Block Crankshaft {\n      Requirement r7 : powerPort (\n        name: \"CrankshaftPowerPort\",\n        provided: true",
    "\n\n// Vehicle System Model\n\npackage vehicle\n\n// Safety Components\n\nModel SafetyComponent {\n    property name : String\n    property mandatory : Boolean\n    property safetyFunction : String\n}\n\n// Anti-theft Components\n\nModel AntiTheftComponent {\n    property name : String\n    property mandatory : Boolean\n    property antiTheftFunction : String\n}\n\n// Components affecting both safety and anti-theft\n\nModel BothComponent {\n    extends SafetyComponent\n    extends AntiTheftComponent\n}\n\n// Vehicle Configuration\n\nModel Vehicle {\n    extends Block\n\n    // Safety Components\n    compartment SafetyComponents {\n        SafetyComponent safetyComponent1\n        SafetyComponent safetyComponent2\n        // ...\n    }\n\n    // Anti-theft Components\n    compartment AntiTheftComponents {\n        AntiTheftComponent antiTheftComponent1\n        AntiTheftComponent antiTheftComponent2\n        // ...\n    }\n\n    // Components affecting both safety and anti-theft\n    compartment BothComponents {\n        BothComponent bothComponent1\n        BothComponent bothComponent2\n        // ...\n",
    "\n\nBlock FuelSystem {\n  Port fuelIn {\n    DataType FuelFlowRate;\n    DataType FuelTemperature;\n  };\n  Port fuelOut {\n    DataType FuelFlowRate;\n    DataType FuelTemperature;\n  };\n  InternalBlock FuelTankAssembly {\n    Port fuelTankIn {\n      DataType FuelFlowRate;\n      DataType FuelTemperature;\n    };\n    InternalBlock FuelTank {\n      Property fuelCapacity: Real(liters);\n    };\n    InternalBlock FuelPump {\n      Property maxPressure: Real(psi);\n      Property minPressure: Real(psi);\n      Port pumpIn {\n        DataType FuelFlowRate;\n        DataType FuelTemperature;\n      };\n      Port pumpOut {\n        DataType FuelFlowRate;\n        DataType FuelTemperature;\n      };\n      Flow fuelFlow {\n        source: fuelTankIn;\n        target: pumpOut;\n      };\n    };\n    InternalBlock FuelReturnLine {\n      Port returnLineIn {\n        DataType",
    "\n\nBlock vehicle\n\nBlock cockpit\n  Property mandatorySafetyFeature: Boolean false\n  Block airbag\n    Property mandatory: Boolean false\n  Endairbag\nEndcockpit\n\nBlock interior\n  Block seatBelts\n    Multiplicity 2\n    Property mandatorySafetyFeature: Boolean true\n  EndseatBelts\nEndinterior\n\nBlock vehicleBody\n  Block bumper\n    Property mandatorySafetyComponent: Boolean true\n  Endbumper\n  Block keylessEntrySystem\n    Property mandatorySecurityComponent: Boolean true\n  EndkeylessEntrySystem\nEndvehicleBody\n\nBlock chassis\n  Multiplicity 2 wheel\n  Multiplicity 2 antiLockBrakingSystem\n    Property mandatory: Boolean false\n  EndantiLockBrakingSystem\nEndchassis\n\nBlock antiTheftAlarmDevice\n  Property mandatorySecurityComponent: Boolean true\nEndantiTheftAlarmDevice\n\nBlock system\n  Block safetyAndSecurityComponents\n    Block seatBelts\n    Block airbag\n    Block antiTheftAlarmDevice\n    Block bumper\n    Block keylessEntrySystem\n    Block antiLockBrakingSystem\n ",
    "\n\nBlock vehicleSafetyAndSecurity\n\nBlock interior\n    Block alarmSystem\n    Block seatBelts\n    Block frontRowSeats\n    Block driverAirbag\n\nBlock bodyAssembly\n    Block vehicleBody\n    Block bumper\n    Block keylessEntrySystem\n\nRelation safetyFunction_interior (interior, alarmSystem, seatBelts, frontRowSeats, driverAirbag) : safetyFunction\nRelation safetyFunction_bodyAssembly (bodyAssembly, vehicleBody, bumper, keylessEntrySystem) : safetyFunction\n\nBlock safetyFunction\n\nBlock antiTheft\nRelation antiTheft_alarmSystem (alarmSystem, antiTheft) : trigger\nRelation antiTheft_keylessEntrySystem (keylessEntrySystem, antiTheft) : trigger\n\nBlock userExperience\nRelation userExperience_interior (interior, userExperience) : enhances\nRelation userExperience_security (security, userExperience) : enhances\n\nBlock security\nBlock convenientAccess\nRelation security_alarmSystem (alarmSystem, security) : realizes\nRelation security_keylessEntrySystem (keylessEntrySystem",
    "\n\nBlock mySystem\n    Feature security\n        Property classification\n            data type String\n            initialValue \"Unclassified\"\n\nBlock Component\n    Feature security\n        Property classification\n            data type String\n            initialValue \"Unclassified\"\n\nRelation Component_has_Security_Classification : Component -> SecurityClassification\n    Property classification\n        end1.security : Component\n        end2.securityClassification : SecurityClassification\n\nBlock SecurityClassification\n    Enumeration Unclassified Confidential Secret\n\nBlock ConfidentialComponent\n    Extends Component\n    Feature security\n        Property classification\n            data type String\n            initialValue \"Confidential\"\n\nRelation Component_is_Confidential : Component -> ConfidentialComponent\n\nBlock Document\n    Feature security\n        Property classification\n            data type String\n            initialValue \"Unclassified\"\n\nRelation Document_has_Security_Classification : Document -> SecurityClassification\n\nRelation Component_has_Document : Component -> Document\n\nBlock SystemOperator\n    Feature security\n        Property clearanceLevel\n            data type String\n            initialValue \"Unclassified\"\n\nRelation SystemOperator_has_Component",
    "\n\nModel M1 {\n  // Define the main blocks\n  Block VCU {\n    Property name = \"Vehicle Control Unit\";\n    Port p1 {\n      Property name = \"CAN_BusIF\";\n      Type CAN_BusIF;\n    }\n  }\n\n  Block ECU {\n    Property name = \"Engine Control Unit\";\n    Port p1 {\n      Property name = \"CAN_BusIF\";\n      Type CAN_BusIF;\n    }\n  }\n\n  Block CAN_Bus {\n    Property name = \"Controller Area Network Bus\";\n  }\n\n  Block CAN_BusIF {\n    Property name = \"CAN Bus Interface\";\n    Type Interface;\n  }\n\n  // Define the connections\n  Connect vcu_canif <---> can_busif_vcu;\n  Connect ecui_canif <---> can_busif_ecu;\n  Connect can_bus <.ports[0] --> vcu_canif;\n  Connect can_bus <.ports[1] --> ecui_canif;\n}\n\n// Define the types\nType CAN_Bus",
    "\n\nBlock Diagram\n----------------\n\nBloodGlucoseMeter_System\n------------------------\n\n+ Requirement: HighReliabilityAndSafety\n+ Requirement: BatteryStatusDetection\n+ Requirement: UserAlert\n+ Requirement: PreventiveMeasures\n+ Requirement: AlarmMechanism\n+ Requirement: EmergencyResponse\n+ Requirement: RigorousApproval\n+ Requirement: ManagementMeasures\n\nBlock BloodGlucoseMeter_System\n\nBlock Battery\n------------\n\n+ Requirement: BatteryStatusDetection\n+ Requirement: PreventiveMeasures\n\nBlock UserInterface\n------------------\n\n+ Requirement: UserAlert\n\nBlock MeasurementFunction\n------------------------\n\n+ Requirement: AlarmMechanism\n+ Requirement: EmergencyResponse\n\nBlock PreventiveMeasures\n------------------------\n\n+ Requirement: PreventiveMeasures\n\nBlock AlarmMechanism\n--------------------\n\n+ Requirement: AlarmMechanism\n\nBlock EmergencyResponse\n-----------------------\n\n+ Requirement: EmergencyResponse\n\nRelationships\n------------\n\nBloodGl",
    "\n\nBlock 'System' {\n    Feature 'MathematicalConstants' {\n        Property 'e' {\n            dataType IntegerLiteral(value = 2.71828182845904513536028747135266249775724709369995)\n            annotation 'http://www.omg.org/spec/SysML/20110701/MOF-annotation/1.0/SysML.annotation' {\n                name = 'ConstantName'\n                value = 'EulerNumber'\n            }\n        }\n        Property 'pi' {\n            dataType RealLiteral(value = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986",
    "\n\nModel tireModel\n\nBlock tire\n    Property manufacturer : String\n    Property rimDiameter : Real\n    Property width : Integer\n\nBlock TireInstance\n    Extends tire\n    Property brand : String\n\nModel TireLibrary\n    Package tirePackage\n        Import tireModel\n        Instance tireInstance1 : TireInstance\n            {\n                manufacturer = \"Michelin\";\n                rimDiameter = 18.0;\n                width = 245;\n                brand = \"French\";\n            }\n        Instance tireInstance2 : TireInstance\n            {\n                manufacturer = \"Goodyear\";\n                rimDiameter = 17.0;\n                width = 255;\n                brand = \"American\";\n            }\n        Instance tireInstance3 : TireInstance\n            {\n                manufacturer = \"Continental\";\n                rimDiameter = 19.0;\n                width = 275;\n                brand = \"German\";\n            }\n    End_Package\nEnd_Model",
    "\n\nModel automotiveComponentModel\n\nBlock vehicle\n    Property mass\n        Type Real\n        Initial 1200.0\n        LowerBound 0.0\n        UpperBound 10000.0\n        Unit kg_m2\n        Derived\n        EndProperty\n\n    Property length\n        Type Real\n        Initial 4.82\n        LowerBound 0.0\n        UpperBound 10000.0\n        Unit m_m\n        Derived\n        EndProperty\n\n    Block leftWheel\n        Property hubDiameter\n            Type Real\n            Initial 0.488\n            LowerBound 0.0\n            UpperBound 10.0\n            Unit m_m\n            EndProperty\n\n        Property tireHeight\n            Type Real\n            Initial 0.254\n            LowerBound 0.0\n            UpperBound 10.0\n            Unit m_m\n            EndProperty\n\n        Property outerDiameter\n            Type Real\n            DerivedExpression \"self.hubDiameter + 2 * self.tireHeight\"\n            EndProperty\n\n       ",
    "\n\nModel Powertrain_Model\n\n// Define the types of engines\ntype EngineType {\n name: String\n}\n\nEngineType FourCylinderEngine = EngineType {\n name = 'FourCylinderEngine'\n}\n\nEngineType SixCylinderEngine = EngineType {\n name = 'SixCylinderEngine'\n}\n\n// Define the types of transmissions\ntype TransmissionType {\n name: String\n}\n\nTransmissionType ManualTransmission = TransmissionType {\n name = 'ManualTransmission'\n}\n\nTransmissionType AutomaticTransmission = TransmissionType {\n name = 'AutomaticTransmission'\n}\n\n// Define the powertrain configuration block\nBlock PowertrainConfiguration {\n // Define the powertrain configuration requirements\n requirement FourCylinderEngine_or_SixCylinderEngine {\n constraint engineType: EngineType\n} requirement ManualTransmission_or_AutomaticTransmission {\n constraint transmissionType: TransmissionType\n} requirement HighPerformance_implies_SixCylinderEngine {\n constraint engineType: EngineType\n constraint performanceLevel: Boolean\n} requirement OnlyFourC",
    "\n\nModel automotiveSystem\n\nBlock automotiveVehicle\n    property mass: Real(1200)\n    property length: Real(4.82)\n\nBlock wheelAssembly\n    property diameter: Real\n\nBlock wheel\n    Block rim\n        property diameter: Real(18)\n    Block tire\n        property width: Real(245)\n        property height: Real(45)\n        property outerDiameter: Real\n        property treadDepth: Real(6.0)\n        constraint treadDepth_min: (treadDepth >= 3.5)\n\n    end Wheel\n\nend Wheel\n\nBlock brakeDiscAssembly\n    property radius: Real(95)\n    property diameter: Real\n    constraint diameter_max: (diameter <= outerDiameter)\n\nend BrakeDiscAssembly\n\nRelation hasWheelAssembly\n    source wheelAssembly: WheelAssembly(1)\n    target vehicle: AutomotiveVehicle(1)\n\nRelation hasWheel\n    source wheel: Wheel(1)\n    target wheelAssembly: WheelAssembly(1)\n\nend",
    "\n\nModel M1 {\n  // Define the system\n  Block system {\n    name \"Automotive Fuel System\";\n\n    // Define the external interfaces\n    Interface outlet {\n      name \"Fuel Outlet\";\n      port fuel {\n        name \"Fuel\";\n        type Fuel;\n      }\n      port returnFuel {\n        name \"Returned Fuel\";\n        type Fuel;\n      }\n    }\n\n    Interface temperatureSensor {\n      name \"Temperature Sensor\";\n      port temperature {\n        name \"Temperature\";\n        type Real;\n      }\n    }\n\n    // Define the internal blocks\n    Block fuelTankAssembly {\n      name \"Fuel Tank Assembly\";\n      port fuelIn {\n        name \"Fuel In\";\n        type Fuel;\n      }\n      port fuelOut {\n        name \"Fuel Out\";\n        type Fuel;\n      }\n      port returnFuelIn {\n        name \"Returned Fuel In\";\n        type Fuel;\n      }\n      port temperatureOut {\n        name \"Temperature Out\";\n",
    "\n\nModel M\n\nBlock System\n\nBlock System_Block System\n\nBlock System_Name \"System\"\n\nBlock System_Requirement requirement1\n\nBlock System_Requirement requirement2\n\nBlock System_Requirement requirement3\n\nBlock System_Requirement requirement4\n\nBlock System_Requirement requirement5\n\nBlock System_Requirement requirement6\n\nBlock System_Requirement requirement7\n\nBlock System_Requirement requirement8\n\nBlock System_Requirement requirement9\n\nBlock System_Requirement requirement10\n\nBlock System_Requirement requirement11\n\nBlock System_Requirement requirement12\n\nBlock System_Requirement requirement13\n\nBlock System_Requirement requirement14\n\nBlock System_Requirement requirement15\n\nBlock System_Requirement requirement16\n\nBlock System_Requirement requirement17\n\nBlock System_Requirement requirement18\n\nBlock System_Requirement requirement19\n\nBlock System_Requirement requirement20\n\nBlock System_Requirement requirement21\n\nBlock System_Requirement requirement22\n\nBlock System_Requirement requirement23\n\nBlock System_Requirement requirement24\n",
    "\n\nBlock diagram:\n\nModel _ \"UnitConversionSystem\" {\n  Package _ \"ISQ\" {\n    Class _ \"ISQUnit\" {\n      Attribute _ \"name\" : String;\n      Attribute _ \"symbol\" : String;\n      Attribute _ \"baseUnit\" : ISQUnit;\n      Operation _ \"convertTo\"(unit : ISQUnit) : Real;\n    }\n  }\n\n  Package _ \"USCustomaryUnits\" {\n    Class _ \"USCustomaryUnit\" {\n      Attribute _ \"name\" : String;\n      Attribute _ \"symbol\" : String;\n      Attribute _ \"correspondingISQUnit\" : ISQUnit;\n      Operation _ \"convertTo\"(unit : USCustomaryUnit) : Real;\n    }\n  }\n\n  Package _ \"Converter\" {\n    Class _ \"Converter\" {\n      Attribute _ \"inputUnit\" : ISQUnit;\n      Attribute _ \"outputUnit\" : ISQUnit;\n      Operation _ \"convert\"() : Real;\n    }\n  }\n\n  Package _ \"UserInterface\" {\n    Class _ \"UserInterface\" {",
    "\n\nBlock car_headlamp\n\nFeature tilt_angle : Real(min = 50.0, max = 80.0)\n\nendcar_headlamp\n\nBlock headlamp_system\n\nBlock car_headlamp : 1\n\nendheadlamp_system\n\nBlock SI_unit_converter\n\nFeature degree : String(value = \"degree\")\n\nendSI_unit_converter\n\nBlock tilt_angle_checker\n\nBlock SI_unit_converter : 1\n\nBlock car_headlamp : 1\n\nOperation check_tilt_angle() : Boolean\n\nParameter tilt_angle : Real\n\nendtilt_angle_checker\n\nendheadlamp_system\n\nOperation convert_tilt_angle_to_degrees(self : headlamp_system, tilt_angle : Real) : Real\n\nParameter tilt_angle : Real\n\nendconvert_tilt_angle_to_degrees\n\nOperation check_tilt_angle_within_range(self : tilt_angle_checker, tilt_angle : Real) : Boolean\n\nend",
    "\n\nBlock Diagram:\n\nModel _ \"CoreDataTypesModel\" {\n  Package coreDataTypes {\n    Block unsignedInteger {\n      DataType unsignedInt;\n      Property lowerBound;\n      Property upperBound;\n      Property isSigned;\n      Property dataTypeName \"unsignedInteger\";\n    }\n\n    Block unsignedFloatingPointNumber {\n      DataType unsignedFloat;\n      Property lowerBound;\n      Property upperBound;\n      Property isSigned;\n      Property dataTypeName \"unsignedFloatingPointNumber\";\n    }\n\n    Block dateTime {\n      DataType dateTime;\n      Property dataTypeName \"dateTime\";\n    }\n\n    Block string {\n      DataType string;\n      Property dataTypeName \"string\";\n    }\n\n    Block boolean {\n      DataType boolean;\n      Property dataTypeName \"boolean\";\n    }\n\n    Block status {\n      DataType status;\n      Property dataTypeName \"status\";\n      Property redLevel;\n      Property yellowLevel;\n      Property greenLevel;\n      Property redColor;\n      Property yellowColor;\n      Property greenColor;\n",
    "\n\nModel MysModel\n\n// Top level package\npackage MysModel\n\n// Define types\ntype Person {\n  name : String\n}\n\n// Define collections\ntype Bag {\n  parts : Set[SparePart]\n}\ntype SparePart {\n  id : Integer\n  name : String\n}\ntype ListInt {\n  values : OrderedSet[Integer]\n}\ntype ListPerson {\n  members : Set[Person]\n}\ntype SetString {\n  elements : OrderedSet[String]\n}\ntype OrderedSetPerson {\n  elements : OrderedSet[Person]\n}\ntype ArrayReal4 {\n  values : Array[Real] { length = 4 }\n}\n\n// Define relationships\nBag -> \"hasParts:\" SparePart\nListInt -> \"hasValues:\" Integer\nListPerson -> \"hasMembers:\" Person\nSetString -> \"hasElements:\" String\nOrderedSetPerson -> \"hasMembers:\" Person\nArrayReal4 -> \"hasValues:\" Real\n\n// Define associations\nBag \"manages\": ListPerson\nListPerson \"belongsTo\": Bag\nListPerson \"contains\": SetString\n",
    "\n\nModel tireSystem\n\nBlock tireSystem\n\nBlock manufacturer\nproperty name : String\nendBlock manufacturer\n\nBlock tire\nproperty name : String\nproperty rimDiameter : Real\nproperty tireWidth : Real\nproperty installationPosition : Vector[3]\nendBlock tire\n\nBlock Tire\nextends tire\nendBlock Tire\n\nBlock TireEntry\nblock tire : 1..* tire\nendBlock TireEntry\n\nBlock TireDatabase\nblock TireEntry : 1..* TireEntry\nendBlock TireDatabase\n\nModel tireSystemModel\n\nBlock tireSystemModel\nextends Block\nendBlock tireSystemModel\n\nBlock tireSystem\nproperty tires : 1..* TireDatabase\nendBlock tireSystem\n\nBlock TireDatabase\nendBlock TireDatabase",
    "\n\nBlock diagram\n----------------\n\nmodel AscentSystem\n\nrequirement \"The system is required to sample and record the trajectory of the spacecraft during the ascent phase.\" as req_sample_trajectory;\nrequirement \"The system should use the mission liftoff time as the reference time zero, measured in seconds, and be able to take the UTC liftoff time of the mission as the reference time.\" as req_use_liftoff_time;\nrequirement \"The system should collect key parameters including the position and velocity of the spacecraft at different time points.\" as req_collect_position_velocity;\nrequirement \"Each set of sampled data must associate a specific time point with the corresponding position and velocity data.\" as req_associate_time_data;\nrequirement \"Both the three-dimensional position and velocity should be described in a Cartesian coordinate system, with units of meters and meters per second, respectively.\" as req_cartesian_coordinate;\nrequirement \"The system should record multiple sampling points during the ascent phase, with each sampling point containing explicit information on time, position, and velocity, in order to provide accurate data support for subsequent trajectory analysis",
    "\n\nModel metalsModel\n  Extends Block\n\n  Feature atomicMass : Real\n\nModel substanceModel\n  Extends Block\n\n  Feature name : String\n  Feature atomicMass : Real\n\nModel materialModel\n  Extends Block\n  IsA substanceModel\n\nModel alloyModel\n  Extends Block\n\n  Feature name : String\n  Feature tensileStrength : Real\n\n  Association alloyComponents\n    Role alloy : alloyModel (1)\n    Role component : materialModel (0..*)\n    Feature massFraction : Real\n\nModel metalModel\n  Extends materialModel\n\nModel alloyInstanceModel\n  Extends Block\n  IsA alloyModel\n\n  Feature name : String\n  Feature ironMassFraction : Real\n  Feature carbonMassFraction : Real\n  Feature manganeseMassFraction : Real\n  Feature tensileStrength : Real\n\nModel commonMetalModel\n  Extends metalModel\n  Feature name : String\n\nModel typicalAlloyModel\n  Extends alloyModel\n  Feature name : String\n\nModel unitModel\n  Extends Block\n\n  Feature name",
    "\n\nBlock Steel_Material_Database\n\nBlock Engineering_Material\n\nProperty atomicMass : Real\nProperty compositionalInformation : String\n\nBlock Metal\nBlock Alloy\n\nBlock Constituent_Material\nProperty name : String\nProperty massFraction : Real\n\nBlock Metal_Alloy\nExtension Metal\nExtension Alloy\n\nMetal.allInstances -> (metal : Metal |\n  metal.name = 'Metal'\n  metal.compartment.name = 'Material'\n)\n\nAlloy.allInstances -> (alloy : Alloy |\n  alloy.name = 'Alloy'\n  alloy.compartment.name = 'Material'\n)\n\nMetal_Alloy.allInstances -> (metalAlloy : Metal_Alloy |\n  metalAlloy.name = 'Steel_980'\n  Metal.occurrences -> (metal : Metal |\n    metal.name = 'Metal'\n    metal.compartment.name = 'Material'\n    metal.isSpecializedBy metalAlloy\n  )\n  Alloy.occurrences -> (all",
    "\n\nModel M1 {\n  // Define the system context\n  Package context {\n    Model M0 {\n      // Define the system\n      Block system {\n        // Define the Pub-Sub server\n        Block pubSubServer {\n          // Define the message topic\n          Block messageTopic {\n            Property name : String;\n            Property messages : Set(Message);\n          }\n\n          // Define the message\n          Class Message {\n            Property topic : MessageTopic;\n            Property content : String;\n          }\n\n          // Define the message producer\n          Class MessageProducer {\n            Property name : String;\n            Property topics : Set(MessageTopic);\n            Operation publish(msg : Message);\n          }\n\n          // Define the message consumer\n          Class MessageConsumer {\n            Property name : String;\n            Property topics : Set(MessageTopic);\n            Operation subscribe();\n            Operation unsubscribe();\n            Operation receiveMessage(msg : Message);\n          }\n\n          // Define the relationship between message producer and topic\n          Relation publishes {\n            Source MessageProducer;\n            Target MessageTopic;\n          }\n\n          // Define the relationship",
    "\n\nBlock fuelSystem {\n  Port fuelIn {\n    DataType fuelType = Temperature;\n    Flow fuelFlow;\n  }\n\n  Port fuelOut {\n    DataType fuelType = Temperature;\n    Flow fuelFlow;\n  }\n\n  InternalBlock fuelTankAssembly {\n    Port fuelIn_tank {\n      Flow fuelFlow;\n    }\n\n    Port fuelOut_tank {\n      Flow fuelFlow;\n    }\n\n    InternalBlock engine {\n      Port fuelIn_engine {\n        Flow fuelFlow;\n      }\n\n      Port fuelOut_engine {\n        Flow fuelFlow;\n      }\n\n      InternalBlock fuelLines {\n        Flow fuelFlow;\n      }\n\n      InternalBlock fuelMonitoring {\n        Signal fuelTemperature;\n      }\n    }\n\n    InternalBlock fuelRecycling {\n      Port fuelIn_recycling {\n        Flow fuelFlow;\n      }\n\n      Port fuelOut_recycling {\n        Flow fuelFlow;\n      }\n    }\n\n    InternalBlock fuelSupply {\n      Flow fuelFlow;\n",
    "\n\nModel publishSubscribeSystem {\n  // Define the main participants\n  Block producer {\n    Property name : String;\n  }\n\n  Block server {\n    Property name : String;\n    InternalBlock topic {\n      Property name : String;\n      Set subscribers : Consumer[1:*];\n      Operation receiveMessage(msg : Message) : void;\n    }\n    Set producers : Producer[1:*];\n  }\n\n  Block consumer {\n    Property name : String;\n    InternalBlock subscription {\n      Property topicName : String;\n      Operation sendSubscriptionRequest() : void;\n    }\n    Operation receiveMessage(msg : Message) : void;\n  }\n\n  // Define the messages\n  Message topicMessage {\n    Property topicName : String;\n    Property messageData : String;\n  }\n\n  // Define the relationships\n  Relation producerToServer {\n    Source producer : Producer;\n    Target server : Server;\n  }\n\n  Relation serverToTopic {\n    Source server : Server;\n    Target topic : InternalBlock[server.topic];\n  }\n\n ",
    "\n\nBlock diagram\n\nmodel TransportationSystem\n\n// Define blocks\n\nBlock Driver\nBlock Passenger\nBlock Vehicle\nBlock GasStation\n\n// Define relationships\n\nDriver_has Vehicle : Vehicle\nVehicle_has Passenger 4 : Passenger\nVehicle_has GasStation : GasStation\n\n// Define properties\n\nProperty MaxFuelCapacity of Vehicle\nProperty FuelLevel of Vehicle\nProperty Capacity of Vehicle\nProperty EnvironmentalFactors of Vehicle\n\n// Define operations\n\nOperation Boarding(passenger : Passenger) of Vehicle\nOperation Refueling(gasStation : GasStation) of Vehicle\nOperation Alighting(passenger : Passenger) of Vehicle\n\n// Define constraints\n\nConstraint FuelLevel_Constraint of Vehicle\nConstraint Capacity_Constraint of Vehicle\n\n// Constraint: FuelLevel_Constraint\ncontext Vehicle\ninvariant (self.FuelLevel <= self.MaxFuelCapacity)\n\n// Constraint: Capacity_Constraint\ncontext Vehicle\ninvariant (self.FuelLevel < 0.1 * self.MaxFuelCapacity implies self.EnvironmentalFactors.",
    "\n\nBlock fuelTankAssembly {\n  Port fuelPort {\n    DataType fuelTemperatureDataType;\n    Attribute fuelTemperature {\n      dataType fuelTemperatureDataType;\n      lowerValue -50.0;\n      upperValue 150.0;\n    }\n  }\n\n  Port fuelReturnPort;\n\n  InternalBlock fuelTank {\n    // Implementation details of fuel tank\n  }\n\n  InternalBlock fuelOutlet {\n    Flow fuelFlow;\n\n    Connection fuelOutletToFuelPort {\n      Role fuelOutletRole;\n      Flow fuelFlow;\n    }\n\n    Connection fuelOutletToFuelInterface {\n      Role fuelOutletRole;\n      Flow fuelFlow;\n    }\n  }\n\n  InternalBlock fuelInterface {\n    Flow fuelFlow;\n\n    Connection fuelInterfaceToFuelTank {\n      Role fuelInterfaceRole;\n      Flow fuelFlow;\n    }\n\n    Connection fuelInterfaceToEngine {\n      Role fuelInterfaceRole;\n      Flow fuelFlow;\n    }\n  }\n\n  InternalBlock engineUnit {\n    Port engineFuelPort",
    "\n\nModel fuelSystemModel\nextends Block\n\n// Fuel Tank Assembly\nBlock fuelTankAssembly\nextends Block\n\nProperty fuelLevel : Real\n\nPort fuelSupplyPort\ntype FuelInterface\nendport\n\n// FuelInterface\nInterface FuelInterface\n\nProperty fuelTemperature : Real\nendinterface\n\n// Engine\nBlock engine\nextends Block\n\nPort fuelReturnPort\ntype FuelInterface\nendport\n\n// Connection between Fuel Tank Assembly and Engine\nConnection fuelConnection\nsource fuelTankAssembly.fuelSupplyPort\ntarget engine.fuelReturnPort\nendconnection\n\n// Reliability, Safety, and Monitoring Requirements\nRequirement requirementReliability\nname \"Reliability\"\nendrequirement\n\nRequirement requirementSafety\nname \"Safety\"\nendrequirement\n\nRequirement requirementMonitoring\nname \"Monitoring of fuel delivery during normal vehicle operation\"\nendrequirement\n\nModel fuelSystemModel\nsatisfies requirementReliability\nsatisfies requirementSafety\nsatisfies requirementMonitoring",
    "\n\nBlock diagram\n----------------\n\nSystem\n     |-- UserInterface\n     |-- SceneSelection\n     |-- SceneFocusing\n     |-- ImageProcessing\n     |-- Camera\n     |-- OutputPhoto\n\nSceneSelection\n     |-- Input: UserRequest\n     |-- Output: SelectedScene\n\nSceneFocusing\n     |-- Input: SelectedScene\n     |-- Output: FocusedScene\n     |-- Internal: FocusingAlgorithm\n\nImageProcessing\n     |-- Input: FocusedScene\n     |-- Output: IntermediateImage\n     |-- Internal: ImageProcessingAlgorithm\n\nCamera\n     |-- Input: IntermediateImage\n     |-- Output: FinalImage\n\nUserInterface\n     |-- Input: FinalImage\n     |-- Output: DisplayedImage\n\nUserRequest\n     |-- name: String\n     |-- scene: Scene\n\nScene\n     |-- name: String\n\nFocusingAlgorithm\n     |-- Input: Scene\n     |-- Output: FocusedScene\n\nImageProcessingAlgorithm\n     |-- Input: Image\n     |-- Output: Image\n\n-- End of SysML v2 code --",
    "\n\nBlock 'PhotographySystem' {\n    Feature 'SceneSelection' {\n        Port 'SceneInput': Input {\n            DataType 'Scene'\n        }\n    }\n\n    Feature 'Focusing' {\n        Block 'FocusingModule' {\n            Port 'Scene': Input {\n                DataType 'Scene'\n            }\n            Port 'FocusedScene': Output {\n                DataType 'FocusedScene'\n            }\n            InternalBlock 'FocusingLogic' {\n                // Focusing logic implementation\n            }\n        }\n\n        Port 'FocusedSceneOutput': Output {\n            DataType 'FocusedScene'\n        }\n    }\n\n    Feature 'Shooting' {\n        Block 'ShootingModule' {\n            Port 'FocusedSceneInput': Input {\n                DataType 'FocusedScene'\n            }\n            Port 'FinalImageOutput': Output {\n                DataType 'Image'\n            }\n            InternalBlock 'ShootingLogic' {\n                // Shooting logic implementation\n            }\n        }\n\n        Port 'FinalImageInput': Input {\n",
    "\n\nBlock diagram\n----------------\n\nSystem_Photography\n\nBlock Photography_Camera\n\nBlock Scene_Selector\n\nBlock Focusing_Process\n\nBlock Shooting_Process\n\nRelationships\n------------\n\nAssociation Scene_Selector_System_Photography\n{\n\tend1 : Scene_Selector;\n\tend2 : System_Photography;\n\tnavigability : Scene_Selector -> System_Photography;\n}\n\nAssociation Focusing_Process_System_Photography\n{\n\tend1 : Focusing_Process;\n\tend2 : System_Photography;\n\tnavigability : Focusing_Process -> System_Photography;\n}\n\nAssociation Shooting_Process_System_Photography\n{\n\tend1 : Shooting_Process;\n\tend2 : System_Photography;\n\tnavigability : Shooting_Process -> System_Photography;\n}\n\nAssociation Photography_Camera_Focusing_Process\n{\n\tend1 : Photography_Camera;\n\tend2 : Focusing_Process;\n",
    "\n\nBlock diagram\n----------------\n\nModel _MyCameraSystem_\n\nBlock _CameraBlock_\n    Feature _FocusProcessing_\n    Feature _ShootingOperation_\n\nBlock _FocusProcessingBlock_\n    Feature _ImageProcessing_\n\nBlock _ShootingOperationBlock_\n\nBlock _UserInterfaceBlock_\n\nRelationship _CameraBlock_ --|> _FocusProcessingBlock_\nRelationship _CameraBlock_ --|> _ShootingOperationBlock_\nRelationship _FocusProcessingBlock_ --|> _ImageProcessing_\nRelationship _CameraBlock_ <-- _UserInterfaceBlock_\n\nFeature _FocusProcessing_\n    DataType _Image_\n    DataType _FocusedImage_\n\nFeature _ImageProcessing_\n    DataType _FocusedImage_\n    DataType _Photograph_\n\nFeature _ShootingOperation_\n    DataType _Photograph_\n\nFeature _UserInterface_\n    DataType _Scene_\n\n-- End of Model _MyCameraSystem_ --\n\n--–––––––––––––––––––––––––––––",
    "\n\nModel PhotographyWorkflow\n\nBlock PhotographyWorkflow\n\nBlock User\nBlock Scene\nBlock Image\nBlock Focus\nBlock Shoot\nBlock Picture\n\nRelation User_interacts_with > User : PhotographyWorkflow\nRelation User_interacts_with > Scene : PhotographyWorkflow\nRelation Scene_has > Image : Focus\nRelation Image_has_operation > Image : Focus\nRelation Image_has_operation > Image : Shoot\nRelation Focus_performs > Focus : Image\nRelation Shoot_performs > Shoot : Image\nRelation Shoot_produces > Shoot : Picture\nRelation Picture_is_produced_by > Picture : PhotographyWorkflow\n\nAttribute User.name : String\nAttribute Scene.location : String\nAttribute Image.resolution : Integer\nAttribute Focus.focalLength : Real\nAttribute Shoot.shutterSpeed : Real\nAttribute Shoot.aperture : Real\nAttribute Picture.size : Integer\nAttribute Picture.quality : String\n\nOperation Focus_operation(self: Image)\nOperation Shoot_operation(self: Image)\n\nOperation Focus_operation()",
    "\n\nBlock diagram\n----------------\n\nModel _MyCamera_\n{\n  Block _CameraBody_\n  {\n    Property _name_ : String = \"Camera Body\";\n  }\n\n  Block _Lens_\n  {\n    Property _name_ : String = \"Lens\";\n    Block _FocusingSystem_\n    {\n      Property _name_ : String = \"Focusing System\";\n      Block _Autofocus_\n      {\n        Property _name_ : String = \"Autofocus\";\n        Block _Sensor_\n        {\n          Property _name_ : String = \"Sensor\";\n          Block _FocusSensor_\n          {\n            Property _name_ : String = \"Focus Sensor\";\n          }\n        }\n        Block _Motor_\n        {\n          Property _name_ : String = \"Motor\";\n        }\n      }\n    }\n  }\n\n  Block _ImageSensor_\n  {\n    Property _name_ : String = \"Image Sensor\";\n  }\n\n  Block _ImageProcessor_\n  {\n    Property _name_ : String = \"Image Processor\";",
    "\n\nBlock diagram\n----------------\n\nmodel PhotographySystem\n\ncontext SysML::Block\n\nrequirement \"This system is designed to support users in a workflow for capturing high-quality photographs.\" as req_PhotographyWorkflow;\nrequirement \"Users can select a scene.\" as req_SceneSelection;\nrequirement \"The system first performs focusing on the scene.\" as req_Focusing;\nrequirement \"Generates an image that is then evaluated for focus quality.\" as req_FocusEvaluation;\nrequirement \"If the image is determined to be well-focused, the system proceeds with the shooting operation.\" as req_Shooting;\nrequirement \"Converting the focused image into a photograph and ultimately producing the final photo required by the user.\" as req_PhotoProduction;\nrequirement \"The entire shooting process is automatically linked from scene input to photo output.\" as req_AutomaticLinking;\n\nBlock sceneInput\nextends SysML::Block\n\nBlock scene\nextends SysML::Block\n\nBlock focusEvaluation\nextends SysML::Block\n\nBlock camera\nextends SysML::Block\n\nBlock shooting\n",
    "\n\nBlock 'Camera' {\n    Feature 'FocusFunction' {\n        Operation 'acquireScene' {\n            Input 'currentScene' : Real\n        }\n        Operation 'performFocusing' {\n            Output 'focusedImage' : Image\n        }\n    }\n\n    Feature 'ShootingFunction' {\n        Operation 'takePhoto' {\n            Input 'focusedImage' : Image\n            Output 'photograph' : Image\n        }\n    }\n\n    Feature 'DisplayFunction' {\n        Operation 'displayPhoto' {\n            Input 'photograph' : Image\n        }\n    }\n\n    Flow 'PhotographyWorkflow' {\n        Source 'takePhoto'\n        Target 'displayPhoto'\n\n        Node 'acquireScene' {\n            Source 'takePhoto'\n            Target 'FocusFunction.acquireScene'\n        }\n\n        Node 'performFocusing' {\n            Source 'FocusFunction.acquireScene'\n            Target 'FocusFunction.performFocusing'\n        }\n\n        Node 'shooting' {\n            Source 'FocusFunction.performFocusing'\n            Target '",
    "\n\nBlock vehicle\n\nBlock brakingControlSystem\n\nBlock automaticBrakeControl\n\nRelation_end vehicle (owns) automaticBrakeControl\nRelation_end automaticBrakeControl (provides) brakingControlSystem\nRelation_end brakingControlSystem (provides) vehicle\n\nBlock brakePedalSensor\nBlock tractionSensor\n\nRelation_end brakePedalSensor (provides) automaticBrakeControl\nRelation_end tractionSensor (provides) automaticBrakeControl\n\nBlock brakePressureController\nBlock modulationFrequencyController\n\nRelation_end brakePressureController (provides) automaticBrakeControl\nRelation_end modulationFrequencyController (provides) automaticBrakeControl\n\nBlock brakePressureActuator\n\nRelation_end brakePressureController (controls) brakePressureActuator\n\nBlock roadAdhesionModel\n\nRelation_end tractionSensor (observes) roadAdhesionModel\n\nBlock brakeControlAlgorithm\n\nRelation_end brakePressureController (uses) brakeControlAlgorithm\nRelation_end tractionSensor",
    "\n\nBlock BatteryChargingControlSystem {\n  Port chargingPort {\n    DataType BatteryLevel: real;\n  };\n\n  InternalBlock batteryCapacityMonitor {\n    DataFlow batteryLevelDataFlow: BatteryLevel -> BatteryCapacityMonitor: monitoredBatteryLevel;\n    Operation monitorBatteryLevel {\n      Precondition: monitoredBatteryLevel < 100%;\n      Postcondition: batteryStatus = \"Charging\";\n      Input: monitoredBatteryLevel;\n      Output: batteryStatus;\n    };\n  };\n\n  InternalBlock automaticCharger {\n    DataFlow chargingRequestDataFlow: batteryStatus -> automaticCharger: chargingRequest;\n    Operation startCharging {\n      Precondition: chargingRequest = \"Charging\";\n      Postcondition: batteryStatus = \"Charging\";\n      Input: chargingRequest;\n      Output: batteryStatus;\n    };\n  };\n\n  InternalBlock chargingTerminationControl {\n    DataFlow batteryStatusDataFlow: batteryStatus -> chargingTerminationControl: controlledBatteryStatus;\n    Operation checkBatteryLevel {\n      Precondition: controlled",
    "\n\nBlock chargingSystem\n\nFeature chargingProcess\n    Operation startCharging\n        Input batteryLevel\n        Output chargingStatus\n    Operation monitorBatteryLevel\n        Input chargingStatus\n        Output batteryLevel\n    Operation chargeBattery\n        Input batteryLevel\n        Output batteryLevel\n    Operation terminateCharging\n        Input batteryLevel\nEnd chargingSystem\n\nBlock battery\n    Feature batteryLevel\n        InitialValue 0.0\n        Derivation self.monitorBatteryLevel.output\nEnd battery\n\nBlock charger\n    Feature chargingStatus\n        InitialValue false\nEnd charger\n\nRelation chargingConnection\n    Source chargingSystem\n    Target battery\nEnd chargingConnection\n\nOperation startCharging\n    Precondition chargingStatus = false\n    Postcondition chargingStatus = true\nEnd startCharging\n\nOperation monitorBatteryLevel\n    Precondition chargingStatus = true\n    Postcondition batteryLevel > 100.0 -> chargingStatus = false\n    Postcondition batteryLevel <= 100.0 -> batteryLevel = batteryLevel + 1.0\nEnd monitorBatteryLevel\n\nOperation chargeBattery\n    Precondition batteryLevel < 10",
    "\n\nBlock diagram [CameraSystem] {\n  // Camera System\n  Block [Camera] {\n    // Camera\n    Property [name = \"Name\"] { value = \"Camera\" };\n    Block [AutofocusSubsystem] {\n      // Autofocus Subsystem\n      Property [name = \"Name\"] { value = \"Autofocus Subsystem\" };\n      Block [FocusSensor] {\n        // Focus Sensor\n        Property [name = \"Name\"] { value = \"Focus Sensor\" };\n      }\n      Block [Motor] {\n        // Motor\n        Property [name = \"Name\"] { value = \"Motor\" };\n      }\n      Relation [name = \"Provides\"] {\n        source = AutofocusSubsystem;\n        target = FocusSensor;\n      };\n      Relation [name = \"Provides\"] {\n        source = AutofocusSubsystem;\n        target = Motor;\n      };\n    }\n    Block [ImagingSubsystem] {\n      // Imaging Subsystem\n      Property [name = \"Name\"] { value = \"Imaging Subsystem\" };\n      Block [Image",
    "\n\nBlock diagram\n\nmodel CameraSystem {\n  // Camera System\n  Block Camera {\n    Port viewfinder {\n      DataType Image\n    }\n\n    Block ImagingModule {\n      Port imageOutput {\n        DataType Image\n      }\n\n      Block Sensor {\n        Port lightSensor {\n          DataType LightIntensity\n        }\n      }\n\n      Block FocusingModule {\n        Port sceneSelection {\n          DataType Scene\n        }\n\n        Port focusOutput {\n          DataType FocusStatus\n        }\n\n        Block Autofocus {\n          Port focusInput {\n            DataType FocusStatus\n          }\n\n          Port focusOutput {\n            DataType FocusStatus\n          }\n        }\n      }\n\n      Block ImageProcessingModule {\n        Port imageInput {\n          DataType Image\n        }\n\n        Port imageOutput {\n          DataType Image\n        }\n      }\n\n      Block Shutter {\n        Port triggerInput {\n          DataType Trigger\n        }\n\n        Port imageOutput {\n          DataType Image\n        }\n      }\n\n      Block PowerManagement {\n        Port",
    "\n\nBlock vehicle\n    Property mass: Real(10, 2)\n    Property initialPosition: Real(10, 2)\n    Property initialVelocity: Real(10, 2)\n    Property timeInterval: Real(1, 3)\n    Property powerInput: Sequence{Real(1, 3)}\n\n    Operation calculateSpeed(Real time)\n        Return Real\n        Pre: time >= 0\n        Post: self.speed = (self.powerInput[time / self.timeInterval] - self.vehicle.mass * 9.81) / self.mass\n\n    Operation calculatePosition(Real time)\n        Return Real\n        Pre: time >= 0\n        Post: self.position = self.initialPosition + self.initialVelocity * time + 0.5 * (self.powerInput[time / self.timeInterval] - self.mass * 9.81) * time / self.mass\n\n    End\n\nBlock Simulator\n    Property vehicle: vehicle\n\n    Operation simulate(Real startTime, Real endTime, Real timeStep)\n        Pre: startTime >= ",
    "\n\nBlock diagram\n----------------\n\nModel _MyCameraSystem_\n\nfeature _UserInput_\n    feature _SceneProcessing_\n    feature _Focusing_\n    feature _ImageGeneration_\n    feature _PhotoDisplay_\n\nBlock _Camera_\n    feature _SceneProcessing_\n    feature _Focusing_\n    feature _ImageGeneration_\n    feature _PhotoDisplay_\n\nBlock _Display_\n    feature _PhotoDisplay_\n\nRelation _UserInput_ : _Camera_\n    end\n\nRelation _ImageGeneration_ : _Camera_\n    end\n\nRelation _PhotoDisplay_ : _Display_\n    end\n\nRelation _SceneProcessing_ : _Focusing_\n    end\n\nRelation _Focusing_ : _ImageGeneration_\n    end\n\nRelation _ImageGeneration_ : _PhotoDisplay_\n    end\n\n// Focusing process\n\nActivity _Focusing_\n    node _Camera_\n    node _Scene_\n    node _FocusedScene_\n\n    transition _Scene_ -> _Camera_ : _SceneProcessing_\n    transition _Camera_ -> _FocusedScene_ : _Focusing_\n",
    "\n\nBlock diagram [\n  System [\n    Port {\n      viewPort : Input Image;\n      displayPort : Output Picture;\n    }\n    InternalBlock [\n      ImageProcessing [\n        Focus [\n          Input viewPort : Image;\n          Output focusImage : Image;\n        ];\n        Capture [\n          Input focusImage : Image;\n          Output Picture;\n        ];\n      ];\n    ];\n  ];\n]\n\nBlock Image [\n  Attribute [\n    name : String \"Image\";\n  ];\n];\n\nBlock Picture [\n  Attribute [\n    name : String \"Picture\";\n  ];\n];\n\nBlock Focus [\n  Port [\n    Input viewPort : Image;\n    Output focusImage : Image;\n  ];\n];\n\nBlock Capture [\n  Port [\n    Input focusImage : Image;\n    Output Picture;\n  ];\n];",
    "\n\nModel SensorSystem\n  Extends Block\n\n  Feature Sensors [\n    - multiplicity (1..*) Sensor\n    - property IsReady [\n      - type Boolean\n      - initialValue false\n    ]\n  ]\n\n  Operation UpdateSensor [\n    - parameter Sensor sensor\n    - precondition IsReady(sensor)\n    - postcondition IsReady(sensor) := true\n  ]\n\n  Action PerformUpdate [\n    - trigger IsReady(self.Sensors[*])\n    - effect UpdateSensor(self.Sensors[*])\n  ]\n\n  Action TraverseSensors [\n    - precondition true\n    - effect PerformUpdate\n  ]\n\n  Operation RegisterSensor [\n    - parameter Sensor sensor\n    - postcondition Sensors->add(sensor)\n  ]\n\nModel Sensor\n  Extends Block\n\n  Feature Status [\n    - type String\n    - initialValue \"NotReady\"\n  ]\n\n  Operation Ready [\n    - precondition true\n    - postcondition Status := \"Ready\"\n  }\n\n  Operation DetectReady [\n    - precondition",
    "\n\nModel vehicle_system\n\nBlock vehicle\n\nBlock off_state\n\nBlock starting_state\n\nBlock on_state\n\nBlock shutdown_state\n\nRelation InitialState\n\nInitialState > vehicle : initialState\nInitialState > off_state : initialState\n\nBlock vehicle_control\n\nBlock vehicle_start_signal\nBlock vehicle_power_on_signal\nBlock vehicle_shutdown_signal\n\nRelation ControlSignal\n\nControlSignal > vehicle_control : controlSignal\nControlSignal > vehicle_start_signal : startSignal\nControlSignal > vehicle_power_on_signal : powerOnSignal\nControlSignal > vehicle_shutdown_signal : shutdownSignal\n\nBlock vehicle_state_machine\n\nBlock vehicle_state\n\nBlock off\nBlock starting\nBlock on\nBlock shutdown\n\nRelation StateTransition\n\nStateTransition > vehicle_state_machine : stateMachine\nStateTransition > off > starting : startTransition\nStateTransition > starting > on : powerOnTransition\nStateTransition > on > shutdown : shutdownTransition\nStateTransition > shutdown > off : shutdownTransitionBack\n\nBlock vehicle_state_machine_control\n\nRelation",
    "\n\nBlock vehicle\n\nBlock automotiveSystem\n  Extends vehicle\n\nBlock stateMachine\n  Extends automotiveSystem\n\nBlock offState\n  State offState\n  Initial\n\nBlock startingState\n  State startingState\n  Transition (offState, startingState)\n    [guard: VehicleStartSignal]\n\nBlock onState\n  State onState\n  Transition (startingState, onState)\n\nBlock offSignal\n  Signal offSignal\n\nBlock vehicleStartSignal\n  Signal vehicleStartSignal\n\nBlock vehicleOnSignal\n  Signal vehicleOnSignal\n\nBlock vehicleOffSignal\n  Signal vehicleOffSignal\n\nTransition (onState, offState)\n  [guard: VehicleOffSignal]\n\nTransition (offState, startingState)\n  [guard: VehicleStartSignal]\n\nTransition (startingState, onState)\n  [guard: VehicleOnSignal]",
    "\n\nBlock vehiclePowerManagementSystem {\n  Requirement vehicleStartCommand {\n    Input vehicleStartCommand_in: Signal;\n  }\n\n  Requirement vehicleStartedSignal {\n    Output vehicleStartedSignal_out: Signal;\n  }\n\n  Requirement vehicleShutdownCommand {\n    Input vehicleShutdownCommand_in: Signal;\n  }\n\n  Requirement safetyOperations {\n    Output parkingBrakeEngaged_out: Signal;\n  }\n\n  Block vehiclePowerUnit {\n    Property powerStatus: String;\n\n    Transition offState -> startPhase {\n      Trigger vehicleStartCommand_in;\n      Action powerStatus = 'off';\n    }\n\n    Transition startPhase -> poweredOnState {\n      Trigger vehicleStartedSignal_out;\n      Action powerStatus = 'poweredOn';\n    }\n\n    Transition poweredOnState -> selfDiagnosis {\n      Guard powerStatus = 'poweredOn';\n      Action selfDiagnosis();\n    }\n\n    Transition selfDiagnosis -> poweredOnState {\n      Guard powerStatus = 'poweredOn';\n      Action power",
    "\n\nBlock vehicle\n\nBlock startUpProcess\n    Action startUp\n        Input startSignal\n        Output runningSignal\n    Transition startUpTransition\n        Source shutdown\n        Target startUp\n        Trigger startSignal\n        Guard vehicleIsShutdown\n\nBlock operationProcess\n    Action runEngine\n        Output runningSignal\n\nBlock shutDownProcess\n    Action shutDown\n        Input shutdownSignal\n        Output shutdownSignal\n    Transition shutDownTransition\n        Source running\n        Target shutdown\n        Trigger shutdownSignal\n        Guard vehicleIsRunning\n\nBlock vehicleControl\n    Block userInterface\n        Input startSignal\n        Input shutdownSignal\n    Block controlLogic\n        Output runningSignal\n        Output shutdownSignal\n    InternalConnection userInterfaceToControlLogic\n        Source startSignal\n        Target controlLogic.startSignal\n    InternalConnection controlLogicToStartUpProcess\n        Source controlLogic.runningSignal\n        Target startUpProcess.startSignal\n    InternalConnection startUpProcessToControlLogic\n        Source startUpProcess.runningSignal\n        Target controlLogic.runningSignal\n    InternalConnection controlLogicToOperationProcess\n        Source control",
    "\n\nBlock vehicle\n\nBlock powerManagementSystem\n\nBlock offState\nBlock startState\nBlock onState\nBlock healthStateManagement\n\nRelation powerManagementSystem_offState <-- offState: initialState\nRelation powerManagementSystem_startState <-- startState: transition(startSignal)\nRelation powerManagementSystem_onState <-- onState: transition(onSignal)\nRelation powerManagementSystem_healthStateManagement <-- healthStateManagement: extension\n\nBlock user\n\nBlock startSignal\nBlock onSignal\nBlock offSignal\n\nRelation user_startSignal: output\nRelation user_onSignal: output\nRelation user_offSignal: output\n\nRelation powerManagementSystem_user_startSignal: input\nRelation powerManagementSystem_user_onSignal: input\nRelation powerManagementSystem_user_offSignal: input\n\nBlock vehicleBattery\n\nRelation vehicle_vehicleBattery: internal\n\nBlock vehicleEngine\n\nRelation vehicle_vehicleEngine: internal\n\nBlock vehicleControlUnit\n\nBlock vehicleControlUnit_powerManagementSystem: port\nBlock vehicleControlUnit_vehicleBattery: port\nBlock vehicleControlUnit_veh",
    "\n\nBlock vehicle\n\nBlock controller\n\nBlock healthStatus\n\nBlock overTempWarning\n\nBlock maintenanceStatus\n\nRelation vehicle_has > controller : Controls\nRelation controller_has > healthStatus : Monitors\nRelation healthStatus_has > overTempWarning : Triggers\nRelation healthStatus_has > maintenanceStatus : Transitions\n\nAttribute vehicle\nname \"Vehicle\"\n\nAttribute controller\nname \"Controller\"\n\nAttribute healthStatus\nname \"Health Status\"\n\nAttribute overTempWarning\nname \"Over-temperature Warning\"\n\nAttribute maintenanceStatus\nname \"Maintenance Status\"\n\nAttribute healthStatus\nmaxTemp 35.0\n\nAttribute healthStatus\nstatus \"Normal\"\n\nAttribute overTempWarning\nstatus \"Not triggered\"\n\nAttribute maintenanceStatus\nstatus \"Normal\"\n\nAttribute maintenanceStatus\nnextMaintenanceTime 0.0\n\nEvent overTemp\ntrigger healthStatus.status = \"Degraded\"\naction healthStatus.status = \"Degraded\"\naction overTempWarning.status = \"Triggered\"\n\nEvent maintenance\ntrigger healthStatus.status = \"Degraded\" and maintenanceStatus.",
    "\n\nBlock server\n\nFeature localClock : Clock\nFeature requestPort : InternalPort\n    Operation start : Trigger\n    Operation receiveRequest : Event\nFeature powerState : InternalProperty\n    InitialValue: off\n\nBlock serverControl\n\nFeature controlClock : Clock\nFeature controlPort : ExternalPort\n    Operation sendStart : Trigger\n    Operation sendRequest : Trigger\n\nRelationship_end server.requestPort -> serverControl.controlPort\n\nState off\n    Transition start -> waiting\n    Transition 11:59:00 -> off\n\nState waiting\n    Transition receiveRequest -> response\n    Transition 5min -> waiting\n\nState response\n    Transition 5min -> waiting\n\nTransition start -> waiting / 11:59:00 -> off\n\nState machine server\n\nBlock server\n    Feature localClock\n    Feature requestPort\n    Feature powerState\n\nBlock serverControl\n    Feature controlClock\n    Feature controlPort\n\nRelationship_end server.requestPort -> serverControl.controlPort\n\nState off\n    Transition start -> waiting\n    Transition 11:59:00",
    "\n\nModel MBSE_StartStop\n\nBlock vehicle\n    Property initialState : String = \"off\"\n\n    Block startProcess\n        Property state : String = \"idle\"\n        Transition startTransition\n            Guard condition : String = \"startSignal && brakeDetected\"\n            Action action : String = \"sendPowerOnSignal()\"\n            Trigger startSignalEvent\n        Transition endTransition\n            Guard condition : String = \"stopSignal\"\n            Action action : String = \"applyParkingBrake()\"\n            Trigger stopSignalEvent\n\n        InternalFlow startFlow\n            Activity startActivity\n                Node enterStartProcess\n                    Action action : String = \"vehicle.state = 'starting'\"\n                Node performSelfCheck\n                    Action action : String = \"vehicle.performSelfCheck()\"\n                Node exitStartProcess\n                    Action action : String = \"vehicle.state = 'operating'\"\n        InternalFlow endFlow\n            Activity endActivity\n                Node exitOperatingState\n                    Action action : String = \"vehicle.state = 'shuttingDown'\"\n                Node applyParking",
    "\n\nBlock vehicleSystem\n    Feature startStopControl\n        Operation startUp\n            Precondition offState\n            Postcondition startedState\n            Input vehicleStartSignal\n        Operation selfCheck\n            Precondition startedState\n            Postcondition selfCheckedState\n        Operation shutDown\n            Precondition startedState\n            Postcondition offState\n            Input shutdownSignal\n            Action applyParkingBrake\n                Precondition startedState\n                Postcondition parkingBrakeApplied\n\nBlock driver\n    Feature vehicleControl\n        Operation prepareToStart\n            Postcondition vehicleStartSignal\n\nBlock vehicleController\n    Feature startControl\n        Input startControlSignal\n\nBlock safetySystem\n    Feature parkingBrake\n        Action apply\n            Precondition offState\n            Postcondition parkingBrakeApplied\n\nBlock vehicle\n    Feature state\n        InitialValue offState\n        Operation enterStartedState\n            Precondition offState\n            Postcondition startedState\n            Input startControlSignal\n\nBlock system\n    Feature vehicle\n        Part vehicle: vehicle\n    Feature driver\n        Part driver: driver\n    Feature vehicleController\n        Part vehicleController: vehicleController\n    Feature safetySystem\n        Part safetySystem:",
    "\n\nBlock cruiseControlSystem {\n  Port driverPort {\n    DataType int speed;\n    Event activateCruise {\n      DataType int setSpeed;\n    }\n  }\n\n  Port speedometerPort {\n    DataType int actualSpeed;\n    Event sendActualSpeed {\n      DataType int actualSpeed;\n    }\n  }\n\n  Port enginePort {\n    DataType int fuelControl;\n    Event receiveFuelControl {\n      DataType int fuelControl;\n    }\n  }\n\n  InternalBlock cruiseController {\n    DataFlow activateCruise_to_cruiseController: activateCruise -> cruiseController.receiveSetSpeed;\n    DataFlow receiveSetSpeed_to_cruiseController: driverPort.activateCruise -> cruiseController.receiveSetSpeed;\n    DataFlow receiveActualSpeed_to_cruiseController: speedometerPort.sendActualSpeed -> cruiseController.receiveActualSpeed;\n    DataFlow receiveActualSpeed_to_engine: speedometerPort.sendActualSpeed -> enginePort.receiveActualSpeed;\n    DataFlow receiveSet",
    "\n\nBlock vehicle\n    Feature speedometer : Sensor\n    Feature cruiseController : Control\n    Feature engineSystem : Subsystem\n\n    Operation setSpeed(speed: Real)\n        Input speed\n        Output throttleCommand: Real\n\n    Control cruiseController\n        InternalFeature actualSpeed : Real\n        InternalFeature setSpeed : Real\n        InternalFeature throttleCommand : Real\n\n        Transition receiveSetSpeed(speed: Real)\n            When setSpeed = speed\n            Then actualSpeed = (this.speedometer.getSpeed())\n            Then throttleCommand = (this.calculateThrottleCommand())\n\n        Operation calculateThrottleCommand() returns Real\n            Precondition actualSpeed != 0\n            Postcondition result != 0\n            Body result = (this.setSpeed - this.actualSpeed)\n\n    Subsystem engineSystem\n        Feature throttle : Actuator\n\n    Transition adjustPowerOutput(throttleCommand: Real)\n        When throttleCommand != 0\n        Then throttle.setThrottleLevel(throttleCommand)",
    "\n\nBlock diagram [\n  System [\n    name \"CruiseControlSystem\";\n    Port [\n      port \"DriverInputPort\": Input {\n        name \"DriverInputPort\";\n      };\n      port \"EngineOutputPort\": Output {\n        name \"EngineOutputPort\";\n      };\n    ];\n    InternalBlock [\n      Block [\n        name \"DriverInterface\";\n      ];\n      Block [\n        name \"Speedometer\";\n      ];\n      Block [\n        name \"CruiseController\";\n        InternalBlock [\n          Block [\n            name \"SpeedSensor\";\n          ];\n          Block [\n            name \"ThrottleController\";\n          ];\n        ];\n      ];\n      Block [\n        name \"Engine\";\n      ];\n    ];\n    Connection [\n      source \"DriverInputPort.DriverInputPort\" target \"DriverInterface\";\n      source \"DriverInterface.SpeedSensorInputPort\" target \"SpeedSensor\";\n      source \"SpeedSensor.SpeedOutputPort\" target \"CruiseController.SpeedInputPort\";\n      source \"CruiseController.ThrottleOutputPort\" target \"ThrottleController.Throttle",
    "\n\nBlock CruiseControlSystem {\n    Feature SpeedControl {\n        Port driverInput {\n            DataType Integer\n            Operation setSpeed(speed:Integer)\n        }\n        Port engineOutput {\n            DataType Real\n            Operation receiveSpeed() : Real\n        }\n        InternalBlock CruiseController {\n            Port driverInputPort {\n                Connection driverInput -> driverInputPort\n            }\n            Port engineOutputPort {\n                Connection engineOutputPort -> engineOutput\n            }\n            InternalBlock SpeedSensor {\n                Port engineOutputPort {\n                    Connection engineOutputPort -> engineOutputPort\n                }\n                Port speedometerOutput {\n                    DataType Real\n                    Operation getSpeed() : Real\n                }\n                InternalBlock ThrottleController {\n                    Port engineOutputPort {\n                        Connection engineOutputPort -> engineOutputPort\n                    }\n                    Port speedometerInput {\n                        Connection speedometerOutput -> speedometerInput\n                    }\n                    Operation calculateThrottle(speed:Real) : Real\n                }\n            }\n        }\n    }\n}\n\nBlock Engine {",
    "\n\nBlock cruiseControlSystem {\n  Port speedPort {\n    DataType speedDataType {\n      attribute minValue real 0.0\n      attribute maxValue real 150.0\n      attribute initialValue real 0.0\n    }\n    DataType controlDataType {\n      attribute minValue real -100.0\n      attribute maxValue real 100.0\n      attribute initialValue real 0.0\n    }\n  }\n\n  Port controlPort {\n    DataType controlDataType {\n      attribute minValue real -100.0\n      attribute maxValue real 100.0\n      attribute initialValue real 0.0\n    }\n  }\n\n  InternalBlock cruiseController {\n    Port inputPort {\n      DataType speedDataType\n    }\n\n    Port outputPort {\n      DataType controlDataType\n    }\n\n    InternalBlock speedSensor {\n      Port speedSensorPort {\n        DataType speedDataType\n      }\n    }\n\n    InternalBlock engine {\n      Port fuelControlPort {\n        DataType controlDataType\n      }\n    }\n\n    InternalBlock driverInterface {",
    "\n\nmodel CruiseControlSystem\n\nrequirement SetSpeedCommand {\n    description \"Drivers can send set speed commands\"\n}\n\nrequirement ProcessSetSpeedCommand {\n    description \"Cruise controller processes set speed commands\"\n}\n\nrequirement ReadActualSpeed {\n    description \"Cruise controller reads real-time speed information\"\n}\n\nrequirement CalculateFuelControlCommand {\n    description \"Cruise controller calculates and generates fuel control command\"\n}\n\nrequirement TransmitFuelControlCommand {\n    description \"Fuel control command is transmitted to engine controller\"\n}\n\nrequirement ProcessFuelControlCommand {\n    description \"Engine controller processes fuel control command\"\n}\n\nrequirement ForwardFuelControlCommand {\n    description \"Engine controller forwards fuel control command to engine\"\n}\n\nrequirement ControlFuelFlow {\n    description \"Engine controls fuel flow based on fuel control command\"\n}\n\nBlock CruiseController {\n    requirement ProcessSetSpeedCommand\n    requirement ReadActualSpeed\n    requirement CalculateFuelControlCommand\n\n    Port input SetSpeedCommandPort {\n        requirement Set",
    "\n\nBlock vehicle\n\nBlock assemblyPlant\n\nBlock delivery\n\nBlock owner\n\nBlock driver\n\nBlock ownershipTransfer\n\nBlock endOfUse\n\nBlock lifecycleEvent\n\nBlock lifecyclePhase\n\nBlock lifecycleRecord\n\nBlock traceabilityLink\n\nBlock vehicle:\n    name \"vehicle\";\n    feature deliveryDate: Sequence{Real};\n\nBlock assemblyPlant:\n    name \"assemblyPlant\";\n\nBlock delivery:\n    name \"delivery\";\n    operation recordDelivery(vehicle: in Vehicle): LifecycleEvent;\n\nBlock owner:\n    name \"owner\";\n    feature ownerName: String;\n\nBlock driver:\n    name \"driver\";\n    feature driverName: String;\n\nBlock ownershipTransfer:\n    name \"ownershipTransfer\";\n    operation transferOwnership(vehicle: in Vehicle, newOwner: in Owner): LifecycleEvent;\n\nBlock endOfUse:\n    name \"endOfUse\";\n    operation recordEndOfUse(vehicle: in Vehicle): LifecycleEvent;\n\nBlock lifecycleEvent:\n    name \"lifecycleEvent\";\n   ",
    "\n\nModel vehicle_model\n\nBlock vehicle\n    Attribute.mass: Real(initial: 1500.0)\n    Attribute.operationalStatus: String(initial: \"Idle\")\n    Attribute.gearSetting: String(initial: \"Neutral\")\n    Attribute.acceleratorPedalPosition: Real(initial: 0.0)\n\n    Reference driver: External\n\n    Block engine\n        PartOf vehicle\n    EndBlock\n\n    Block driver\n        External\n    EndBlock\n\n    Block leftFrontWheel\n        PartOf vehicle\n        TimeObservation leftFrontWheel_time\n    EndBlock\n\n    Block rightFrontWheel\n        PartOf vehicle\n        TimeObservation rightFrontWheel_time\n    EndBlock\n\n    TimeObservation vehicle_time\n\n    TimeObservation leftFrontWheel_time\n        ObservedValue leftFrontWheel_value\n\n    TimeObservation rightFrontWheel_time\n        ObservedValue rightFrontWheel_value\n\n    ObservedValue vehicle_1_leftFrontWheel_value\n        Value leftFrontWheel_value\n       ",
    "\n\nModel VehicleSystem\n\n// Define the types\ntype Vehicle {\n    mass: Real\n    state {\n        gear: Int\n        acceleratorPosition: Real\n    }\n}\n\n// Define the components\nComponent Vehicle_1 {\n    type: Vehicle\n    initialMass: 2000.0\n    initialState {\n        initialGear: 0\n        initialAcceleratorPosition: 0.0\n    }\n    nextState {\n        nextMass: 1500.0\n        nextState_state {\n            nextGear: 2\n            nextAcceleratorPosition: 0.5\n        }\n    }\n}\n\n// Define the relationships\nVehicle_1 --vehicle: Vehicle\n\n// Define the flows\nFlow vehicleFlow\n    source: Vehicle_1\n    target: Environment\n    annotation: \"This flow represents the vehicle's interaction with the environment.\"\n\n// Define the time\nTime initialTime\nTime nextTime\n\n// Define the time events\nEvent initialEvent\nEvent nextEvent\n\n// Define the time nodes\nNode initialNode\nNode nextNode",
    "\n\nModel VehicleModel\n\nBlock Vehicle\n    Property mass: Real(initial: 2000.0, changeable: true)\n    Property currentState\n        Property gear: Integer(initial: 0, changeable: true)\n        Property throttle: Real(initial: 0.0, changeable: true)\n    EndProperty\n    Block Engine\n    EndBlock\n    Association driver : Driver\n    EndAssociation\nEndBlock\n\nBlock Driver\n    Attribute name: String\nEndBlock\n\nBlock Alice\n    Extends Driver\nEndBlock\n\nBlock Bob\n    Extends Driver\nEndBlock\n\nSequenceDiagram Vehicle_Driver_Sequence\n    Participant Vehicle\n    Participant Alice\n    Participant Bob\n\n    Message m1: send Alice to Vehicle: assignDriver(Alice)\n    Message m2: send Vehicle to Alice: setDriver(Alice)\n\n    Message m3: send Vehicle to Vehicle: changeMass(1500.0)\n    Message m4: send Vehicle to Vehicle: changeGear(2)\n    Message m5: send Vehicle to",
    "\n\nModel VehicleMassModel\n\n// Define the Vehicle and Component types\ntype Vehicle {\n    name: String;\n    mass: Real;\n    components: Set(Component);\n}\n\ntype Component {\n    name: String;\n    mass: Real;\n    parent: Vehicle | Component;\n}\n\n// Define the CoreComponents type\ntype CoreComponent <| extends Component |> {\n    isCore: Boolean;\n}\n\n// Define the Engine and Transmission components\ntype Engine <| extends CoreComponent |> {\n}\n\ntype Transmission <| extends CoreComponent |> {}\n\n// Define the relationship between Vehicle and Component\nrelationship hasComponent {\n    source: Vehicle;\n    target: Component;\n    lower: 1;\n    upper: *;\n}\n\n// Define the relationship between Component and CoreComponent\nrelationship isCoreComponent {\n    source: Component;\n    target: CoreComponent;\n    lower: 1;\n    upper: 1;\n}\n\n// Define the relationship between Vehicle and Engine, and between Vehicle and Transmission\nrelationship hasCoreComponent {\n",
    "\n\nModel VehicleManagementSystem\n\n// Definition of Vehicle and Component Blocks\nBlock Vehicle\n    Property mass: Real\n    Feature serialNumber: String\nEndBlock Vehicle\n\nBlock Component\n    Property mass: Real\n    Feature serialNumber: String\nEndBlock Component\n\n// Definition of Engine and Transmission Blocks\nBlock Engine\n    Extends Component\nEndBlock Engine\n\nBlock Transmission\n    Extends Component\nEndBlock Transmission\n\n// Definition of Vehicle Block with VIN and recursive composition\nBlock Vehicle\n    Property VIN: String\n    Feature components: Set(Component) = { }\n    Operation addComponent(component: Component): Vehicle\n    Operation getTotalMass(): Real\nEndBlock Vehicle\n\n// Definition of the relationship between Vehicle and Component\nRelation hasComponent\n    Source Vehicle\n    Target Component\nEndRelation hasComponent\n\n// Definition of the mass filtering operation\nOperation filterComponents(vehicle: Vehicle, threshold: Real): Set(Component)\n    Precondition vehicle.components.notEmpty()\n    Postcondition result.notEmpty()\nEndOperation filterComponents\n\nOperation filterComponents(vehicle",
    "\n\nModel M\n\nBlock simpleThing\n    Property simpleMass: Real\nEndBlock\n\nBlock compositeThing\n    Property totalMass: Real\n    Property subComponents: Set(Block)\nEndBlock\n\nBlock system\n    Property totalMass: Real\n    Block compositeThing_1\n        Property simpleMass: Real\n        Set subComponents\n            Block simpleThing_1\n                Property simpleMass: Real\n            EndBlock\n            Block compositeThing_2\n                Property totalMass: Real\n                Set subComponents\n                    Block simpleThing_3\n                        Property simpleMass: Real\n                    EndBlock\n                    Block compositeThing_3\n                        Property totalMass: Real\n                        Set subComponents\n                            Block simpleThing_4\n                                Property simpleMass: Real\n                            EndBlock\n                        EndBlock\n                    EndSet\n                EndBlock\n            EndSet\n        EndBlock\n    EndSet\nEndBlock\n\nEndModel",
    "\n\nModel massSystem\n\nBlock massSystem\n\nProperty massSystem.mass : Real (1) = 0.0\n\nBlock object\n\nProperty object.mass : Real (1) = 0.0\n\nBlock subComponent\n\nProperty subComponent.mass : Real (1) = 0.0\n\nRelation aggregation\n\nObject object (source) -- aggregation --> SubComponent subComponent (target)\n\nOperation calculateTotalMass\n\nBlock massSystem\n\nOperation calculateTotalMass (massSystem : MassSystem) : Real\n\nOperation calculateTotalMass\n\nOperation calculateTotalMass (mass : Real, subComponents : Set(SubComponent)) : Real\n\nOperation calculateTotalMass\n\nOperation calculateTotalMass (mass : Real, subComponents : Set(SubComponent), minMass : Real) : Real\n\nOperation calculateTotalMass\n\nOperation calculateTotalMass (mass : Real, subComponents : Set(SubComponent), minMass : Real) : Real\n\nOperation calculateTotalMass\n\nOperation calculateTotalMass (mass : Real, subComponents : Set(SubComponent), minMass : Real)\n\nOperation calculateTotalMass\n\nOperation calculateTotalMass (mass : Real",
    "\n\nModel Vehicle_System\n\n// Define the main blocks\nBlock Vehicle\n    Property wheelPower : Real\n    Property aerodynamicDragCoefficient : Real\n    Property frictionCoefficient : Real\n    Property mass : Real\n    Property speed : Real\n    Property position : Real\n\n    Operation calculatePower() : Real\n    Operation calculateAcceleration() : Real\n    Operation calculateSpeed() : Real\n    Operation calculatePosition() : Real\n\nBlock Engine\n    Property effectivePower : Real\n\nBlock Aerodynamics\n    Property aerodynamicDrag : Real\n\nBlock Friction\n    Property frictionalForce : Real\n\n// Define the relationships\nRelation Power_Engine (Engine.effectivePower -> Vehicle.wheelPower)\nRelation Drag_Aerodynamics (Vehicle.aerodynamicDragCoefficient -> Aerodynamics.aerodynamicDrag)\nRelation Friction_Friction (Vehicle.frictionCoefficient -> Friction.frictionalForce)\n\n// Define the operations\nOperation Vehicle_calculatePower()\n    Input wheelPower : Real\n    Input aerodynamic",
    "\n\nBlock vehicle\n\nFeature speed {real}\nFeature position {real}\nFeature mass {real}\nFeature aerodynamicDragCoefficient {real}\nFeature rollingResistanceCoefficient {real}\nFeature timeStep {real}\nFeature wheelEndOutputPower {real}\n\nBlock AccelerationCalculator\n\nPort inputSpeed {real}\nPort inputPosition {real}\nPort inputMass {real}\nPort inputAerodynamicDragCoefficient {real}\nPort inputRollingResistanceCoefficient {real}\nPort inputWheelEndOutputPower {real}\nPort inputTimeStep {real}\n\nBlock AvailableDrivingPower\n\nPort inputMass {real}\nPort inputAerodynamicDragCoefficient {real}\nPort inputRollingResistanceCoefficient {real}\n\nBlock Acceleration\n\nPort inputAvailableDrivingPower {real}\nPort inputMass {real}\n\nBlock NewSpeed\n\nPort inputAcceleration {real}\nPort inputSpeed {real}\n\nBlock NewPosition\n\nPort inputNewSpeed {real}\nPort inputPosition {real}\n\n",
    "\n\nBlock vehicle\n    Property vehicleMass real 1..1\n    Property wheelPower real 1..1\n    Property aerodynamicDragCoefficient real 1..1\n    Property rollingResistanceCoefficient real 1..1\n    Property initialSpeed real 1..1\n    Property initialPosition real 1..1\n\n    InternalBlock automaticCalculator\n        Operation calculateDynamics(vehicle: Vehicle, timeStep: real) returns DynamicStates: DynamicStates\n        Parameter vehicle: Vehicle 1..1\n        Parameter timeStep: real 1..1\n\n        InternalBlock airResistance\n            Property airDensity real 1..1\n            Property crossSectionalArea real 1..1\n            Property velocity real 1..vehicle.initialSpeed..*\n            Property dragForce real 1..0\n\n            Operation calculateAirResistance() returns dragForce: real\n            Precondition velocity > 0\n            Postcondition dragForce = 0.5 * airDensity * crossSectionalArea * vehicleMass * pow(velocity, 2)\n\n        InternalBlock frictionalResistance\n            Property fr",
    "\n\nBlock vehicle\n    Property initialPosition : Real\n    Property initialVelocity : Real\n    Property mass : Real\n    Property wheelEndDrivePower : Real\n    Property timeInterval : Real\n\nBlock AirResistance\n    Property vehicle : Block\n    Property dragCoefficient : Real\n\nBlock FrictionalResistance\n    Property vehicle : Block\n    Property frictionCoefficient : Real\n\nBlock Acceleration\n    Property vehicle : Block\n    Property time : Real\n    Property airResistance : Block\n    Property frictionalResistance : Block\n    Derivation acceleration = (wheelEndDrivePower - (airResistance.dragCoefficient * vehicle.velocity * vehicle.velocity) - (frictionalResistance.frictionCoefficient * vehicle.mass)) / vehicle.mass\n\nBlock Velocity\n    Property vehicle : Block\n    Property time : Real\n    Property acceleration : Block\n    Derivation velocity = velocity_old + acceleration.acceleration\n\nBlock Position\n    Property vehicle : Block\n    Property time : Real\n    Property initialPosition : Real\n    Property initialVelocity :",
    "\n\nBlock chassis {\n    Parameter mass_chassis : Real;\n}\n\nBlock engine {\n    Parameter mass_engine : Real;\n}\n\nBlock gearbox {\n    Parameter mass_gearbox : Real;\n}\n\nBlock system {\n    Parameter max_mass : Real = 2500;\n    Block chassis;\n    Block engine;\n    Block gearbox;\n    Real total_mass;\n\n    Operation calculate_total_mass() {\n        total_mass = (self.chassis.mass_chassis + self.engine.mass_engine + self.gearbox.mass_gearbox);\n    }\n\n    Transition overweight {\n        when (total_mass > max_mass) {\n            self.issue_warning();\n        }\n    }\n\n    Operation issue_warning() {\n        // Code to issue warning\n    }\n\n    InitialNode initial {\n        self.calculate_total_mass();\n    }\n}",
    "\n\nModel M1 {\n  // Define the system\n  Block system {\n    name \"Vehicle Mass Management System\";\n\n    // Define the mass constraints\n    Requirement r1 {\n      name \"Total mass should not exceed 2500 kg\";\n      annotation \"requirement\" \"Total mass of the vehicle should not exceed 2500 kg.\";\n    }\n\n    Requirement r2 {\n      name \"Engine mass should not exceed 500 kg\";\n      annotation \"requirement\" \"Engine mass should not exceed 500 kg.\";\n    }\n\n    Requirement r3 {\n      name \"Transmission mass should not exceed 400 kg\";\n      annotation \"requirement\" \"Transmission mass should not exceed 400 kg.\";\n    }\n\n    // Define the components\n    Block chassis {\n      name \"Chassis\";\n      property mass: Real;\n    }\n\n    Block engine {\n      name \"Engine\";\n      property mass: Real;\n    }\n\n    Block transmission {\n      name \"Transmission\";\n      property mass: Real;\n    }",
    "\n\nBlock chassis {\n    property mass : Real(2) [\n        initialValue = 0.0,\n        lowerBound = 0.0,\n        upperBound = 2500.0\n    ];\n}\n\nBlock engine {\n    property mass : Real(2) [\n        initialValue = 0.0,\n        lowerBound = 0.0,\n        upperBound = 2500.0\n    ];\n}\n\nBlock transmission {\n    property mass : Real(2) [\n        initialValue = 0.0,\n        lowerBound = 0.0,\n        upperBound = 2500.0\n    ];\n}\n\nBlock vehicle {\n    property totalMass : Real(2) [\n        initialValue = 0.0,\n        lowerBound = 0.0,\n        upperBound = 2500.0\n    ];\n\n    Relation massConstraint {\n        source : vehicle,\n        target : (chassis, engine, transmission),\n        constraint : totalMass = (mass.chassis + mass.engine + mass.",
    "\n\nBlock Chassis {\n    property weight : Real;\n}\n\nBlock Engine {\n    property weight : Real;\n}\n\nBlock Transmission {\n    property weight : Real;\n}\n\nBlock System {\n    Block Chassis chassis;\n    Block Engine engine;\n    Block Transmission transmission;\n\n    Operation calculateTotalWeight() {\n        Real totalWeight = chassis.weight + engine.weight + transmission.weight;\n        if (totalWeight > 2500) then {\n            // Provide warning or impose restrictions\n        }\n    }\n\n    Input Chassis_Weight : Real;\n    Input Engine_Weight : Real;\n    Input Transmission_Weight : Real;\n\n    Output Total_Weight : Real;\n}",
    "\n\nBlock chassis {\n    attribute.mass(value = 500)\n}\n\nBlock engine {\n    attribute.mass(value = 1000)\n}\n\nBlock transmission {\n    attribute.mass(value = 1000)\n}\n\nBlock vehicle {\n    Block chassis as part;\n    Block engine as part;\n    Block transmission as part;\n\n    constraint {\n        invariant totalMass(sum(self.part.mass)) <= 2500;\n    }\n\n    constraint {\n        invariant self.mass > 0;\n    }\n\n    Action dynamicBehavior {\n        input InitialVelocity: Real;\n        input FinalVelocity: Real;\n        input Mass: Real;\n        input Force: Real;\n        input Time: Real;\n\n        precondition {\n            self.mass > 0;\n        }\n\n        postcondition {\n            self.mass = Mass;\n            self.velocity = (self.velocity + (Force / Mass) * Time);\n        }\n    }\n}",
    "\n\nModel MBSE_VehicleManagementSystem\n\n// Define Blocks\nBlock Vehicle\n    Property nextMaintenanceTime : Time\n    Property maintenanceInterval : Time\n    Property maxAllowedTemperature : Real\n    Property status : String\n\nBlock Maintenance\n    Property startTime : Time\n    Property duration : Time\n\n// Define Relationships\nRelationship Vehicle_Maintenance\n    Source Vehicle\n    Target Maintenance\n    Property occurs : Time\n\nRelationship Maintenance_Vehicle\n    Source Maintenance\n    Target Vehicle\n\n// Define Transitions\nTransition Vehicle_Maintenance_Scheduled\n    Source Vehicle\n    Target Vehicle\n    Guard (nextMaintenanceTime <= now)\n\nTransition Vehicle_Maintenance_Started\n    Source Vehicle\n    Target Maintenance\n    Guard (status = 'healthy' and (now - lastHealthyState) <= 2s)\n\nTransition Maintenance_Completed\n    Source Maintenance\n    Target Vehicle\n    Guard (duration <= 48h)\n\n// Define Activities\nActivity Vehicle_Maintenance_Scheduling\n    Node Vehicle_Maintenance_S",
    "\n\nBlock vehicle\n    Property totalMass: Real\n    Property fuelMass: Real constraint fuelMass > 0\n    Property maxMassLimit: Real\n\n    Block engine\n        Property torque: Real\n        Block speedCurve\n            Property speed: Real\n            Property torqueValue: Real\n        EndspeedCurve\n        Action generateTorque(speed: Real)\n            Precondition speed >= 0\n            Effect torque = speedCurve.torqueValue\n        EndgenerateTorque\n\n    Block transmission\n        Property clutchInterface: Interface\n\n    Block clutch\n        Property engaged: Boolean\n        Interface engine\n        Interface transmission\n        Action engage()\n            Effect engaged = true\n        Endengage\n        Action disengage()\n            Effect engaged = false\n        Enddisengage\n\n    Block vehicleDriveSystem\n        Property power: Real\n        Block engine\n        Block transmission\n        Connection engine.clutchInterface -> transmission.clutchInterface\n\n    Constraint totalMass <= maxMassLimit\n    Constraint totalMass = fuelMass + vehicleDriveSystem.power / 1000.0\n\n    Block system\n        Property vehicle: vehicle",
    "\n\nBlock vehicle\n    Requirement massControl {\n        Property maxMassFull [0..1] : real;\n        Property maxMassEmpty [0..1] : real;\n        Requirement massControl_1 {\n            invariant [\n                (self.mass.value <= 2000) and\n                (self.fuelMass.value <= (2000 - self.dryMass.value))\n            ] when (self.fuelTankLevel = FULL)\n        }\n        Requirement massControl_2 {\n            invariant [\n                (self.mass.value <= 1500) and\n                (self.fuelMass.value <= (1500 - self.dryMass.value))\n            ] when (self.fuelTankLevel = EMPTY)\n        }\n    }\n\n    Block engine\n    Requirement enginePerformance {\n        Requirement clutchInterface {\n            Property clutch [0..1] : Interface;\n            Requirement engine_clutch {\n                invariant [\n                    (self.clutch.occurrences->forAll",
    "\n\nModel Vehicle_Model\n\nBlock Vehicle\n    Property mass_empty: Real(min=0, max=1500)\n    Property mass_full: Real(min=0, max=2000)\n\nBlock Engine\n    Property torque: Real(min=0)\n\nBlock Clutch_Interface\n    Property engine: Engine\n    Property transmission: Transmission\n\nBlock Transmission\n\nBlock Performance_Table\n    Property engine: Engine\n    Property torque_vs_speed: Sequence(\n        Data(name=\"Speed\", type=Real),\n        Data(name=\"Torque\", type=Real)\n    )\n\nBlock Engine_Performance_Table_Specification\n    Property performance_table: Performance_Table\n\nRelation Engine_Mass_Constraint(vehicle: Vehicle, engine: Engine)\n    Constraint mass_constraint(vehicle.mass_full > engine.mass)\n\nRelation Engine_Clutch_Interface(engine: Engine, clutch_interface: Clutch_Interface)\n    Constraint clutch_interface_engine(engine.engine == clutch_interface.engine)\n\nRelation Engine",
    "\n\nBlock vehicle\n    Property curbMass real 1200 kg\n    Property fuelMass real\n    Property totalMass real\n\n    Transition fullFuel\n        Source vehicle\n        Target vehicle\n        Guard (fuelMass = curbMass + 500 kg)\n\n    Transition emptyFuel\n        Source vehicle\n        Target vehicle\n        Guard (fuelMass = curbMass)\n\n    Property maxTotalMass real 2000 kg\n\n    Invariant (totalMass <= maxTotalMass)\n\n    Block engine\n        Property torqueCharacteristics real\n        Property clutchInterface\n\n        Transition operatingCondition\n            Source engine\n            Target engine\n            Guard (clutchInterface.isEngaged = true)\n\n        Property maxTorque real 250 Nm\n\n        Invariant (torqueCharacteristics.value >= maxTorque)\n\nBlock fuelTank\n    Property fuelMass real\n\nBlock clutchInterface\n    Property isEngaged boolean\n\nBlock gearbox\n\nBlock safetyStandards\n    Property designStandard real\n    Property safetyStandard real\n\nBlock designAndSafety\n    Property vehicle :",
    "\n\nBlock vehicle\n\nFeature curbWeight\nType Real\nEndFeature\n\nFeature payload\nType Real\nEndFeature\n\nFeature wheelDiameter\nType Real\nEndFeature\n\nFeature transmissionEfficiency\nType Real\nEndFeature\n\nFeature fuelEconomyUrban\nType Real\nEndFeature\n\nFeature fuelEconomyHighway\nType Real\nEndFeature\n\nBlock engine\n\nFeature powerOutput\nType Real\nEndFeature\n\nBlock drivingCycle\n\nFeature timeStampedPosition\nType Real\nEndFeature\n\nFeature timeStampedSpeed\nType Real\nEndFeature\n\nBlock performanceAnalysis\n\nBlock requiredPower\n\nFeature engine\nType Engine\nEndFeature\n\nFeature curbWeight\nType Real\nEndFeature\n\nFeature payload\nType Real\nEndFeature\n\nFeature wheelDiameter\nType Real\nEndFeature\n\nFeature transmissionEfficiency\nType Real\nEndFeature\n\nFeature fuelEconomyUrban\nType Real\nEndFeature\n\nFeature fuelEconomyHighway\nType Real\nEndFeature\n\nBlock acceleration\n\nFeature requiredPower\nType RequiredPower\nEndFeature\n\nFeature timeStampedPosition\nType Real",
    "\n\nModel Vehicle_System {\n  // Define the Vehicle Package\n  Package Vehicle {\n    // Define the Vehicle Class\n    Class Vehicle {\n      +name: String;\n      +curbWeight: Real;\n      +load: Real;\n      +wheelDiameter: Real;\n      +transmissionEfficiency: Real;\n      +requiredPower: Real;\n      +acceleration: Real;\n      +energyConsumption: Real;\n      +enginePowerDemand: Real;\n      +fuelConsumption: Real;\n      +fuelEconomy: Real;\n\n      // Define the Vehicle Dynamics Relationship\n      Relation vehicleDynamics {\n        source Vehicle;\n        target Acceleration;\n        navigability requiredPower, energyConsumption;\n      }\n\n      // Define the Engine Power Demand Relationship\n      Relation enginePowerDemand {\n        source Vehicle;\n        target EnginePower;\n        navigability requiredPower;\n      }\n\n      // Define the Fuel Consumption Relationship\n      Relation fuelConsumption {\n        source Vehicle;\n",
    "\n\nModel engineSystem\n  Extends Block\n\n  Feature engineType {\n    DataType int\n    Multiplicity (1..*) engine\n  }\n\n  Feature power {\n    DataType Real\n    Multiplicity (1..*) engine\n  }\n\n  Feature mass {\n    DataType Real\n    Multiplicity (1..*) engine\n  }\n\n  Feature efficiency {\n    DataType Real\n    Multiplicity (1..*) engine\n  }\n\n  Feature cost {\n    DataType Real\n    Multiplicity (1..*) engine\n  }\n\n  Operation evaluateEngine {\n    Input engine: Engine\n    Output result: EvaluationResult\n\n    Parameter evaluationFunction: EvaluationFunction\n\n    Precondition engineType <> null\n\n    Body\n      result.performance := (power->sum() + efficiency->sum()) / (mass->sum() + cost->sum())\n      result.economicEfficiency := (1 / (mass->sum() + cost->sum()))\n      result.recommendation :=\n        if (evaluationFunction.evaluate(engine) > evaluationFunction.threshold) then engine else null\n ",
    "\n\nModel VehicleSystem\n\n// Define the Vehicle block\nBlock Vehicle\n    Property weight: Real\n\n    Operation collectData\n        Input: Self\n        Output: Self\n\n    Operation processData\n        Input: Self\n        Output: Self\n\n    Operation evaluate\n        Input: Self\n        Output: Boolean\n\n    Transition qualified\n        Source: Self\n        Guard: evaluate -> true\n\n    Transition unqualified\n        Source: Self\n        Guard: evaluate -> false\nEnd_Block Vehicle\n\n// Define the Context block\nBlock Context\n    Property maxWeight: Real = 2500\nEnd_Block Context\n\n// Define the VehicleSystem block\nBlock VehicleSystem\n    Extends Context\n\n    Part Vehicle1: Vehicle\n    Part Vehicle2: Vehicle\n\n    Connection weightConnection1: weight -> Vehicle1.weight\n    Connection weightConnection2: weight -> Vehicle2.weight\n\n    SequenceFlow dataFlow\n        Source: Vehicle1.collectData\n        Target: Vehicle1.processData\n\n    SequenceFlow dataFlow2\n        Source: Vehicle2.collect",
    "\n\nBlock vehicle\n    Property mass: Real(min: 0.0, max: 2500.0)\nEndBlock\n\nBlock weighingEquipment\nEndBlock\n\nBlock massVerificationUnit\n    Operation checkMass(vehicle: vehicle): Boolean\n        Precondition mass >= 0.0\n        Postcondition result = (mass <= 2500.0)\nEndOperation\nEndBlock\n\nBlock System\n    Association massVerificationProcess(vehicle: vehicle, massVerificationUnit: massVerificationUnit)\n        Navigability vehicle -> mass\n        Navigability massVerificationUnit -> checkMass\nEndAssociation\n\n    Part vehicles: Set(vehicle)\n    Part weighingEquipment: Part(weighingEquipment)\n    Part massVerificationUnit: Part(massVerificationUnit)\nEndBlock",
    "\n\nBlock diagram\n\nmodel MyModel\n\nrequirement Requirement1\nrequirement Requirement2\nrequirement Requirement3\nrequirement Requirement4\nrequirement Requirement5\nrequirement Requirement6\nrequirement Requirement7\nrequirement Requirement8\n\nBlock Vehicle\n\nfeature Driver\nfeature Passenger (num: 1..4)\n\nBlock UserInterface\n\nBlock Door\nfeature Open\nfeature Close\n\nBlock SafetySystem\n\nBlock EnvironmentalIntegration\nfeature GasStation\nfeature SurroundingFactors\n\nBlock ComfortSystem\nfeature RideExperience\nfeature Convenience\n\nBlock TransportationTaskAssistance\n\nBlock HumanCenteredDesign\n\nBlock System\n\nextends Vehicle\nextends UserInterface\nextends SafetySystem\nextends EnvironmentalIntegration\nextends ComfortSystem\nextends TransportationTaskAssistance\nextends HumanCenteredDesign\n\nrelationship --requires--> Requirement1 : requirement\nrelationship --requires--> Requirement2 : requirement\nrelationship --requires--> Requirement3 : requirement\nrelationship --requires--> Requirement4 : requirement\nrelationship --requires--> Requirement5 : requirement",
    "\n\nBlock diagram\n\nmodel TransportationSystem\n\n// Define the blocks\n\nBlock Driver\nBlock Passenger\nBlock Vehicle\nBlock GasStation\nBlock StartingPoint\nBlock Destination\n\n// Define the relationships\n\nDriver_operates Vehicle\nVehicle_is_composed_of Engine\nEngine_has_Port FuelPort\nFuelPort_is_connected_to GasStation_Port FuelPort\nGasStation_has_Port FuelPort\n\n// Define the properties\n\nProperty int MaxPassengers = 5\n\nBlock Driver {\nProperty String Name\n}\n\nBlock Passenger {\nProperty String Name\n}\n\nBlock Vehicle {\nProperty String Name\nProperty int CurrentPassengerCount\nProperty int MaxPassengerCapacity = MaxPassengers\nProperty bool IsFueled\nProperty Engine Engine\n}\n\nBlock Engine {\nProperty String Name\nProperty float FuelLevel\nProperty float MaxFuelCapacity\nProperty Port FuelPort\n}\n\nBlock GasStation {\nProperty String Name\nProperty Port FuelPort\n}\n\nBlock StartingPoint {\nProperty String Name\n}\n\nBlock Destination {\nProperty String Name\n}",
    "\n\nModel Vehicle_System\n\n// Vehicle System\n\nBlock Vehicle_System\n    Feature vehicleFeature;\n\n    Block Engine\n        Feature engineFeature;\n        Parameter cylinderDiameter : Integer;\n        Parameter numCylinders : Integer;\n        Block Four_Cylinder_Engine\n            Feature fourCylinderEngineFeature;\n            Parameter cylinderDiameter_4Cylinder : Integer = 70;\n            Parameter numCylinders_4Cylinder : Integer = 4;\n        End_Block Four_Cylinder_Engine\n        Block Six_Cylinder_Engine\n            Feature sixCylinderEngineFeature;\n            Parameter cylinderDiameter_6Cylinder : Integer = 100;\n            Parameter numCylinders_6Cylinder : Integer = 6;\n        End_Block Six_Cylinder_Engine\n        Generalization\n            Four_Cylinder_Engine < Engine\n            Six_Cylinder_Engine < Engine\n        End_Generalization\n    End_Block Engine\n\n    Block Transmission\n        Feature transmissionFeature;\n        Parameter transmission",
    "\n\nBlock engine {\n    Feature configurable {\n        Value 1..* engineVariant\n    }\n\n    Block cylinder [\n        Feature cylinderCount {\n            Value 4..6\n        }\n\n        Feature diameter [\n            Enum {\n                Small {\n                    Value 70\n                },\n                Large {\n                    Value 100\n                }\n            }\n        ]\n    ]\n\n    Block fourCylinderEngine < engineVariant {\n        Extension engineVariant_fourCylinder {\n            Feature cylinderCount {\n                Value 4\n            }\n        }\n    }\n\n    Block sixCylinderEngine < engineVariant {\n        Extension engineVariant_sixCylinder {\n            Feature cylinderCount {\n                Value 6\n            }\n        }\n    }\n\n    Relation engineToCylinder [\n        Source engine,\n        Target cylinder,\n        Navigation cylinder_in_engine\n    ]\n\n    Relation engineVariant_to_engine [\n        Source engineVariant,\n        Target engine,\n        Navigation engine_in",
    "\n\nBlock engine {\n    property int numCylinders;\n    property String engineType;\n    property String transmissionType;\n\n    operation selectEngine(int numCylinders, String engineType) {\n        self.numCylinders = numCylinders;\n        self.engineType = engineType;\n    }\n\n    operation selectTransmission(String transmissionType) {\n        self.transmissionType = transmissionType;\n    }\n\n    constraint if (self.numCylinders = 4) then self.transmissionType = 'manual';\n    constraint if (self.numCylinders = 6) then self.transmissionType = 'automatic';\n}\n\nBlock transmission {\n    property String transmissionType;\n}\n\nBlock cylinder {\n    property int diameter;\n}\n\nBlock 4cylinderEngine {\n    extends engine;\n    property int numCylinders = 4;\n}\n\nBlock 6cylinderEngine {\n    extends engine;\n    property int numCylinders = 6;\n}\n\nBlock manualTransmission {",
    "\n\nModel M1 {\n  // Define the system\n  System System_Name {\n    Requirement r1 {\n      text \"This system must be composed of a system assembly, which includes a computer subsystem and a storage subsystem.\";\n    }\n\n    // Define the system assembly\n    Assembly System_Assembly {\n      name \"System_Assembly\";\n      ownedEnds System_Name.allParts;\n\n      // Define the computer subsystem\n      Part Computer_Subsystem {\n        name \"Computer_Subsystem\";\n        ownedEnds System_Assembly.allParts;\n\n        // Define the software design section\n        Requirement Software_Design {\n          text \"The software design section should define the message format and data format.\";\n          ownedEnds Computer_Subsystem.allRequirements;\n\n          // Define the message format\n          Block Message_Format {\n            name \"Message_Format\";\n            ownedEnds Software_Design.allParts;\n          }\n\n          // Define the data format\n          Block Data_Format {\n            name \"Data_Format\";\n            ownedEnds Software_Design.allParts;\n          }\n        }",
    "\n\nBlock powertrainSystem {\n    Requirement req_PowerPerformance {\n        name \"Power Performance\"\n    }\n\n    Block logicalLayer {\n        Requirement req_LogicalPower {\n            name \"Logical Power\"\n        }\n        Requirement req_LogicalTorque {\n            name \"Logical Torque\"\n        }\n\n        Block torqueGenerator {\n            Requirement req_ConvertPowerToTorque {\n                name \"Convert Power to Torque\"\n            }\n            Port powerInput {\n                name \"Power Input\"\n                type Power\n            }\n            Port torqueOutput {\n                name \"Torque Output\"\n                type Torque\n            }\n        }\n\n        Block logicalComponent {\n            name \"Logical Component\"\n            Port powerInput {\n                name \"Power Input\"\n                type Power\n            }\n            Port torqueOutput {\n                name \"Torque Output\"\n                type Torque\n            }\n        }\n\n        Relation mapping {\n            source torqueGenerator\n            target logicalComponent\n            name \"Mapping\"\n        }\n   ",
    "\n\nBlock torqueGenerator\n    Requirement powerTransmissionSystem_ProvidePowerAndGenerateTorque : String = \"The system requires the power transmission system to provide power and generate torque.\";\n\n    Capability deliverPower : PowerDelivery;\n    Capability generateTorque : TorqueGeneration;\n\n    PowerDelivery deliverPower_Realization : deliverPower ^ generateTorque;\n\n    TorqueGeneration generateTorque_Operation : generateTorque;\n\n    Component engine : Powertrain;\n\n    Powertrain powertrain : Powertrain;\n\n    Allocation torqueGenerator_AllocationToPowertrain : torqueGenerator -> powertrain;\n    Allocation engine_AllocationToTorqueGeneration : engine -> generateTorque;\n\nBlock Powertrain\n    Requirement powertrain_PerformsFunction : String = \"The powertrain includes the engine as a component, and the engine actually performs the function of generating torque.\";\n\nBlock PowerDelivery\n    Feature power : Power;\n\nBlock TorqueGeneration\n    Feature torque : Torque;\n\nBlock Engine\n    Feature engine_GeneratesTorque : Boolean = true;\n\nBlock Power\n\nBlock Tor",
    "\n\nBlock vehicle\n\nBlock interior\n  Block seatBelts\n  Block frontSeats\n  Block driverAirbag\n  Block alarmSystem\n\nBlock bodyAssembly\n  Block bodyShell\n  Block bumpers\n  Block keylessEntryDevice\n\nRelation hasPart\n  interior -> seatBelts\n  interior -> frontSeats\n  interior -> driverAirbag\n  interior -> alarmSystem\n  bodyAssembly -> bodyShell\n  bodyAssembly -> bumpers\n  bodyAssembly -> keylessEntryDevice\n\nProperty safetyFunction\n  seatBelts : String = \"Restrain occupants during a collision\"\n  frontSeats : String = \"Provide a comfortable and adjustable seating position for the driver\"\n  driverAirbag : String = \"Protect the driver from frontal collisions\"\n  alarmSystem : String = \"Detect unauthorized access or intrusion and alert the driver\"\n  bodyShell : String = \"Protect the vehicle's occupants and structure from external impacts\"\n  bumpers : String = \"Absorb the energy of an impact and protect the vehicle from damage\"\n  keylessEntryDevice : String = \"Allow authorized users to enter and start",
    "\n\nModel MBSEModel\n{\n  Requirement r1;\n  Block vehicle;\n  Block simulationEngine;\n  Block modelCenter;\n  Relation r1_vehicle;\n  Relation r1_simulationEngine;\n  Relation r1_modelCenter;\n\n  Block vehicle_Body\n  {\n    Property velocity;\n    Property position;\n  }\n\n  Block simulationEngine_Control\n  {\n    Property initialVelocity;\n    Property initialPosition;\n    Property acceleration;\n    Property timeStep;\n  }\n\n  Block simulationEngine_Physics\n  {\n    Property model;\n  }\n\n  Block modelCenter\n  {\n    Property input;\n    Property output;\n  }\n\n  Block simulationEngine\n  {\n    Port inputPort;\n    Port outputPort;\n    InternalBlock control;\n    InternalBlock physics;\n    Relation control_physics;\n\n    control <- control_physics -> physics;\n  }\n\n  Block vehicle\n  {\n    Port inputPort;\n    Port outputPort;\n    InternalBlock body;\n\n    body <",
    "\n\nModel carSafetyModel\n\nBlock car\n\ncar.isMandatory = true\n\nPackage SafetyFeatures\n\nBlock Interior\n\nInterior.isMandatory = true\n\nBlock SeatBelts\n\nSeatBelts.isMandatory = true\nSeatBelts.number = 2\nSeatBelts.isSafety = true\n\nBlock DriverAirbag\n\nDriverAirbag.isSafety = true\nDriverAirbag.isMandatory = false\n\nBlock Bumper\n\nBumper.isMandatory = true\nBumper.isSafety = true\n\nPackage MandatorySafetyFeatures\n\nBlock MandatorySeatBelts\n\nMandatorySeatBelts.isMandatory = true\nMandatorySeatBelts.isSafety = true\nMandatorySeatBelts <-- SeatBelts\n\nBlock MandatoryBumper\n\nMandatoryBumper.isMandatory = true\nMandatoryBumper.isSafety = true\nMandatoryBumper <-- Bumper\n\nBlock WheelAssembly\n\nWheel",
    "\n\nBlock vehicle\n\nBlock vehicleInterior\n    Requirement r1: seatBelts(2)\n    Requirement r2: safetyFeatures(mandatory: seatBelts)\n\nBlock driverSeat\n    Block seatBelt(2)\n\nBlock chassis\n    Requirement r3: tires(fixed: #)\n    Requirement r4: safetyFeatures(mandatory: bumper)\n    Requirement r5: safetyFeatures(optional: ABS)\n\nBlock vehicleBody\n    Requirement r6: safetyFeatures(mandatory: bumper)\n\nBlock safetySystem\n    Requirement r7: managesSafetyParts\n    Requirement r8: categorizesSafetyComponents\n    Requirement r9: mandatoryComponents(mandatory: seatBelts, bumper)\n    Requirement r10: nonMandatoryComponents(optional: ABS)\n\nBlock safetyComponent\n    Block mandatoryComponent\n        Requirement m1: mandatory\n    Block nonMandatoryComponent\n        Requirement m2: nonMandatory\n\nBlock mandatoryComponent_seatBelts\n    Requirement m3: seatBelts\n\nBlock",
    "\n\nBlock diagram\n\nrequirement \"Risk and Failure Management System\" {\n  property label = \"RFMS\";\n  property description = \"This system is designed for modeling and managing risks and failures.\";\n\n  Block riskModelingEngine {\n    property label = \"Risk Modeling Engine\";\n    property description = \"Capable of identifying and describing various possible situations, the causes leading to their occurrence, and the potential failures that may result.\";\n\n    Block situation {\n      property label = \"Situation\";\n      property description = \"Represents a possible situation.\";\n\n      Block cause {\n        property label = \"Cause\";\n        property description = \"Represents the reason for a situation.\";\n\n        property probability;\n      }\n\n      Block failure {\n        property label = \"Failure\";\n        property description = \"Represents a potential failure.\";\n\n        property severityLevel;\n      }\n\n      Relation causality {\n        property label = \"Causality\";\n        source cause;\n        target situation;\n      }\n    }\n\n    Block riskScenario {\n      property label = \"Risk Scenario\";\n     ",
    "\n\nBlock diagram\n\nrequirement \"Systematic Risk Metadata Modeling and Management\" {\n  description \"This system is designed for systematic risk metadata modeling and management across various scenarios, causes, and failures.\"\n\n  Block scenario {\n    property label = \"Scenario\";\n    property multiplicity = (1..*) ;\n\n    Block cause {\n      property label = \"Cause\";\n      property multiplicity = (1..*) ;\n\n      property probability : Real;\n\n      Block failure {\n        property label = \"Failure\";\n        property multiplicity = (1..*) ;\n\n        property severityLevel : String;\n      }\n    }\n\n    Association causalRelationship {\n      property label = \"Causal Relationship\";\n      property end1 : cause;\n      property end2 : cause;\n    }\n\n    Association scenarioComposition {\n      property label = \"Scenario Composition\";\n      property end1 : scenario;\n      property end2 : scenario;\n    }\n\n    Block user {\n      property label = \"User\";\n    }\n\n    Association userScenario {\n      property label = \"User",
    "\n\nBlock Equipment {\n    Property MinBatteryLevel : Real;\n    Property CriticalBatteryLevel : Real;\n    Property SeverityLevel : Integer;\n\n    Block Battery {\n        Property Level : Real;\n        Property Age : Real;\n\n        Transition BatteryAging {\n            Source Battery;\n            Target Battery;\n            Guard Level < MinBatteryLevel;\n            Action Level := Level - 0.01;\n        };\n\n        Transition LowBattery {\n            Source Battery;\n            Target Equipment;\n            Guard Level < CriticalBatteryLevel;\n            Action Equipment.SeverityLevel := 1;\n        };\n\n        Transition DeviceShutdown {\n            Source Equipment;\n            Target Battery;\n            Guard Equipment.SeverityLevel > 0;\n            Action Equipment.SeverityLevel := Equipment.SeverityLevel + 1;\n            Action Battery.Level := 0;\n        };\n    };\n\n    Transition BatteryFailure {\n        Source Equipment;\n        Target Equipment;\n        Guard Equipment.SeverityLevel > 0;\n        Action",
    "\n\nModel M\n\nBlock system\n\n-- Top-level System\n\nBlock subsystem1\n\nBlock subsystem2\n\nBlock component1\n\nBlock component2\n\nBlock interface1 : interface I1\n\nBlock interface2 : interface I2\n\nInterface I1\n\nInterface I2\n\nRelation connection1 : connection\n\nconnection.source = interface1\n\nconnection.target = component1\n\nconnection.name = 'Interface Connection 1'\n\nRelation connection2 : connection\n\nconnection.source = interface2\n\nconnection.target = component2\n\nconnection.name = 'Interface Connection 2'\n\n-- End of Model M --",
    "\n\nBlock diagram [\n  Node [\n    name: \"RootComponent\";\n    stereotype: <subsystem>;\n  ];\n\n  Node [\n    name: \"FunctionalSubsystem\";\n    stereotype: <subsystem>;\n    ownedRelation [\n      source: RootComponent;\n      target: FunctionalSubsystem;\n      relation: partOf;\n    ];\n  ];\n\n  Node [\n    name: \"SafetySubsystem\";\n    stereotype: <subsystem>;\n    ownedRelation [\n      source: RootComponent;\n      target: SafetySubsystem;\n      relation: partOf;\n    ];\n  ];\n\n  Node [\n    name: \"Component1\";\n    stereotype: <component>;\n    ownedAttribute [\n      name: \"Functionality\";\n      type: String;\n    ];\n    ownedAttribute [\n      name: \"SafetyAttribute\";\n      type: Boolean;\n      defaultValue: false;\n    ];\n    ownedRelation [\n      source: FunctionalSubsystem;\n      target: Component1;\n      relation: partOf;\n    ];\n  ];",
    "\n\nmodel AutomotiveDomain\nextends SysML::BlockDefinition\n\n// Core Component: Car\nCar alias \"汽车 (Car)\"\nextends SysML::Block\n\n// Comprehensive comments\n// This component represents a car in the automotive domain.\n// It is a core component in the model and is used as a base for various application scenarios.\n\n// Associated Physical Quantity: Torque\nTorque\nextends SysML::ValueSpecification\n\n// Comprehensive comments\n// This value specification represents the torque quantity in the automotive domain.\n// It is associated with the car component to ensure standardized and consistent expression of automotive characteristics.\nendAutomotiveDomain",
    "\n\nBlock automobile\n    Property name : String\n    Property model : String\n    Property type : String\n    Property alias : String\n    Property description : String\n\n    Block Car\n        AliasFor Automobile\n\n    Block Document\n        Property documentType : String\n        Property documentContent : String\n        Property documentDescription : String\n\n    Block TorqueValue\n        Property value : Real\n        Property unit : String\n        AliasFor Torque\n\n    Relation Document_has_Automobile\n        Source Document\n        Target Automobile\n\n    Relation Document_has_Car\n        Source Document\n        Target Car\n\n    Relation Automobile_has_TorqueValue\n        Source Automobile\n        Target TorqueValue\n\n    Relation Car_is_Alias_of_Automobile\n        Source Car\n        Target Automobile\n\n    Annotation (name=\"Documentation\", source=Automobile)\n        Property description : String\n\n    Annotation (name=\"Documentation\", source=Car)\n        Property description : String\n\n    Annotation (name=\"Documentation\", source=TorqueValue)\n        Property description : String",
    "\n\nModel automobile_model\n\n// Define Automobile Block\nBlock Automobile {\n  // Define Alias\n  alias Car;\n\n  // Define Property for Automobile Object\n  Property torqueValue : Real;\n\n  // Define Alias for TorqueValue\n  alias Torque : Real;\n\n  // Define Imported Block for TorqueValue\n  Import TorqueValue_block : Block {\n    // Define Property for TorqueValue Object\n    Property torque : Real;\n  }\n}\n\n// Define TorqueValue Block\nBlock TorqueValue_block {\n  // Define Property for TorqueValue Object\n  Property value : Real;\n}",
    "\n\nBlock vehicle\n    Property size : Integer (min: 0)\n\nBlock engine\n    Property vehicle : vehicle (opposite: hasEngine)\n    Property numCylinders : Integer (min: 4, max: 6)\n\nBlock cylinder\n    Property engine : engine (opposite: hasCylinder)\n\nBlock smallVehicle\n    Extends vehicle\n\nBlock largeVehicle\n    Extends vehicle\n\nBlock standardEngine\n    Extends engine\n    Operation configure()\n        Prepostcondition: self.vehicle.size >= 0\n        Postcondition: self.numCylinders = (self.vehicle.size < 5 ? 4 : 6)\n\nBlock smallEngine\n    Extends engine\n    Operation configure()\n        Prepostcondition: self.vehicle.size >= 0\n        Postcondition: self.numCylinders = 4\n\nBlock largeEngine\n    Extends engine\n    Operation configure()\n        Prepostcondition: self.vehicle.size >= 0\n        Postcondition: self.numCylinders = 6\n\nBlock vehicleConfiguration\n    Property vehicles :",
    "\n\nModel M1 {\n  // Define the system\n  Block system {\n    Name \"System\";\n\n    // Define the fuel interfaces\n    Interface fuelInterface1 {\n      Name \"FuelInterface1\";\n      Port fuelPort1 {\n        Name \"FuelPort1\";\n        Type FuelType;\n      }\n    }\n\n    Interface fuelInterface2 {\n      Name \"FuelInterface2\";\n      Port fuelPort2 {\n        Name \"FuelPort2\";\n        Type FuelType;\n      }\n    }\n\n    // Define the fuel tank\n    Block fuelTank {\n      Name \"FuelTank\";\n      Extends Block {\n        Requirement r1 {\n          Name \"EnsureFuelFlow\";\n          Source system;\n          Target fuelTank;\n          Body \"The system shall manage fuel flow, ensuring that fuel can be delivered from the fuel tank to the engine and supporting fuel return.\";\n        }\n\n        Requirement r2 {\n          Name \"MonitorFuelTemperature\";\n          Source system;\n          Target fuelTank;\n          Body \"During operation, the system",
    "\n\nModel VehicleArchitecture\n\n// Vehicle\nBlock Vehicle\n    property float mass;\n\n// Axle Assembly\nBlock AxleAssembly\n    feature -1..1 AxleType axleType;\n\n    Block FrontAxle : AxleAssembly {\n        property bool hasSteering;\n        feature -1..2 Wheel wheel;\n    }\n\n    Block RearAxle : AxleAssembly {\n        feature -1..2 Wheel wheel;\n    }\n\n// Vehicle Structure\nBlock VehicleStructure\n    feature -1..1 Vehicle vehicle;\n    feature -1..1 FrontAxle frontAxle;\n    feature -1..1 RearAxle rearAxle;\n\n// Wheel\nBlock Wheel\n    property float diameter;\n\n// Axle\nBlock Axle\n    feature -1..1 Wheel wheel;\n\n// Axle Type\nBlock AxleType\n    property float steeringAngle;\n\n// Vehicle Configuration\nBlock VehicleConfiguration\n    feature VehicleStructure vehicleStructure;\n\n// Vehicle Configurations\nBlock FrontWheelConfiguration : V"
]