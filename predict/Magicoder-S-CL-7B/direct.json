[
    "#include <iostream>\n    #include <string>\n    #include <vector>\n\n    using namespace std;\n\n    class Vehicle {\n    private:\n        string vehicleName;\n        double vehicleMass;\n        string currentStatus;\n        Engine engine;\n        Driver driver;\n\n    public:\n        Vehicle(string name, double mass, string status) {\n            vehicleName = name;\n            vehicleMass = mass;\n            currentStatus = status;\n        }\n\n        void setEngine(Engine engine) {\n            this->engine = engine;\n        }\n\n        void setDriver(Driver driver) {\n            this->driver = driver;\n        }\n\n        void updateStatus(string status) {\n            currentStatus = status;\n        }\n\n        void updateMass(double mass) {\n            vehicleMass = mass;\n        }\n\n        void displayVehicleInfo() {\n            cout << \"Vehicle Name: \" << vehicleName << endl;\n            cout << \"Vehicle Mass: \" << vehicleMass << \" kg\" << endl;\n            cout",
    "# SysML v2 Model\n\n    # Entities\n    Entity Personnel {\n        property name : String;\n        property age : Integer;\n    }\n\n    Entity Vehicle {\n        property type : String;\n        property driver : Personnel;\n    }\n\n    Entity Engine {\n        property power : Integer;\n    }\n\n    # Relationships\n    Vehicle includes Driver : Personnel;\n    Vehicle includes Engine : Engine;\n\n    # PoweredVehicle extends Vehicle\n    PoweredVehicle extends Vehicle {\n        property engine : Engine;\n    }\n\n    # ManuallyOperatedVehicle extends Vehicle\n    ManuallyOperatedVehicle extends Vehicle {\n        property driver : Personnel;\n    }\n\n    # ManuallyOperatedPoweredVehicle extends ManuallyOperatedVehicle and PoweredVehicle\n    ManuallyOperatedPoweredVehicle extends ManuallyOperatedVehicle and PoweredVehicle {\n        property driver : Personnel;\n        property engine : Engine;\n    }",
    "# SysML v2 Textual Model\n\n    ## Vehicle Structure\n\n    Vehicle is a Class\n    ------------------\n    Vehicle has the following properties:\n    - name : String\n    - components : Component[]\n\n    Component is a Class\n    --------------------\n    Component has the following properties:\n    - name : String\n    - quantity : Integer\n\n    Engine is a Class, subclass of Component\n    -----------------------------------------\n    Engine has the following properties:\n    - horsepower : Integer\n\n    Transmission is a Class, subclass of Component\n    -----------------------------------------------\n    Transmission has the following properties:\n    - gears : Integer\n\n    Wheel is a Class, subclass of Component\n    ----------------------------------------\n    Wheel has the following properties:\n    - size : String\n\n    ## Relationships\n\n    A vehicle has exactly 1 engine, 1 transmission, and 4 wheels.\n\n    ## Extensibility\n\n    Vehicle, Component, Engine, Transmission, and Wheel are all extensible. This means that new vehicle types, component types,",
    "# SysML v2 Model\n\n    ## Vehicle Classes\n\n    Vehicle << Class >> {\n        name : String;\n        engine : Engine;\n    }\n\n    SmallVehicle << Vehicle >> {\n        engine : SmallEngine;\n    }\n\n    LargeVehicle << Vehicle >> {\n        engine : LargeEngine;\n    }\n\n    ## Engine Classes\n\n    Engine << Class >> {\n        cylinders : Integer;\n    }\n\n    SmallEngine << Engine >> {\n        cylinders : 4;\n    }\n\n    LargeEngine << Engine >> {\n        cylinders : 6;\n    }\n\n    ## Component Classes\n\n    Component << Class >> {\n        name : String;\n    }\n\n    EngineComponent << Component >> {\n        engine : Engine;\n    }\n\n    ## Relationships\n\n    Vehicle.engine -> EngineComponent.engine;\n\n    ## Validation\n\n    Validate that each Vehicle has an Engine and each Engine has a specific number of cylinders.",
    "# SysML v2\n    #\n    # Traffic Signal System\n    #\n    # Traffic Signal Component\n    #\n    # Properties:\n    #   - color: green, yellow, or red\n    #   - state: go\n    #\n    # Specific Traffic Signal Component\n    #\n    # Properties:\n    #   - color: green\n    #   - state: go\n    #\n    #\n    # Connections:\n    #   - Specific Traffic Signal Component -> Traffic Signal Component\n    #\n    #\n    # End\n\nThis is a simple representation of the problem in SysML v2. The properties of the Traffic Signal Component and the Specific Traffic Signal Component are defined with their respective attributes. The Specific Traffic Signal Component is connected to the Traffic Signal Component.",
    "# SysML v2 Textual Model\n\n    Class Diagram:\n\n    Class: Information\n    - id: integer\n    - code: string\n    - grade: string\n    - color: string\n\n    Class: TrafficLight\n    - level: string\n    - code: string\n    - color: string\n\n    Class: Grade\n    - level: string\n    - points: float\n\n    Relationships:\n\n    Information <-- TrafficLight: 1:1\n    Information <-- Grade: 1:1\n\n    Class: InformationManagementSystem\n    - informationList: list of Information\n\n    Use Case:\n\n    As an Information Management System, I want to implement an information classification management mechanism based on the \"traffic light\" principle.\n\n    Steps:\n\n    1. Define the three levels of information classification: \"Unclassified,\" \"Confidential,\" and \"Secret.\"\n    2. Assign each level a unique code and a color.\n    3. Define the grade levels: A, B, C, D, and F, each corresponding to a specific point value.\n    4",
    "# SysML v2 Model\n\n    # Classes\n\n    Class Vehicle {\n        VehicleID : Integer\n        VehicleType : VehicleTypeEnum\n        Engine : Engine\n    }\n\n    Class VehicleType {\n        VehicleTypeID : Integer\n        Name : String\n    }\n\n    Class Engine {\n        EngineID : Integer\n        Cylinders : Cylinder\n    }\n\n    Class Cylinder {\n        CylinderID : Integer\n        # No properties as it is a fundamental component\n    }\n\n    # Enumerations\n\n    Enum VehicleTypeEnum {\n        SmallVehicle\n        LargeVehicle\n    }\n\n    # Associations\n\n    Vehicle 0..* -- VehicleType : VehicleTypeEnum\n    Vehicle 1 -- Engine : EngineID\n    Engine 1 -- Cylinders : CylinderID\n\n    # Properties\n\n    VehicleType.Name : \"Small Vehicle\"\n    VehicleType.Name : \"Large Veh",
    "# SysML v2 Model\n\n    ## Vehicle Class\n    Class Vehicle {\n        - quality attributes\n        - driver information\n        - fuel tank\n        - fuel type\n        - basic information (fuel and personnel)\n    }\n\n    ## Fuel Tank Class\n    Class FuelTank {\n        - fuel type\n        - capacity\n    }\n\n    ## Driver Information Class\n    Class DriverInformation {\n        - name\n        - age\n        - license type\n    }\n\n    ## Basic Information Class\n    Class BasicInformation {\n        - fuel\n        - personnel\n    }\n\n    ## Relationships\n    Vehicle <<-->> FuelTank\n    Vehicle <<-->> DriverInformation\n    Vehicle <<-->> BasicInformation\n\n    ## Associations\n    Vehicle.fuelTank = FuelTank\n    Vehicle.driverInformation = DriverInformation\n    Vehicle.basicInformation = BasicInformation\n\n    ## Validation\n    Validate that the fuel tank is independent and can be used with any vehicle.\n    Validate that the fuel tank can store",
    "# SysML v2 Model\n\n    ## Wheel Assembly System\n\n    ### Components\n\n    * Wheel Bearing Unit\n    * Tire\n    * Bead\n    * Hub\n    * Rim\n    * Bolt Mounting Hole\n    * Hub\n    * Threaded Hole\n    * Bolt Connection\n\n    ### Relationships\n\n    * Tire is sealed and fastened by pressing its two beads onto the two rims of the hub.\n    * Multiple mounting holes are provided on the hub, which are connected to the threaded holes on the hub using bolts.\n    * The bolt connection ensures a reliable connection between the hub and the tire assembly.\n\n    ## Conclusion\n\n    This model provides a detailed description of the specific relationships and connection methods between each component, thus offering structural-level support for the design, assembly, and maintenance of the wheel assembly and further helping to ensure the structural strength and safety of the wheel.",
    "# SysML v2 Textual Model\n\n    # Fuel Tank Assembly\n    FuelTankAssembly {\n        property fuelType : string;\n        property capacity : float;\n        property temperature : float;\n        operation supplyFuel(fuel : string) : void;\n        operation returnFuel(fuel : string) : void;\n    }\n\n    # Engine\n    Engine {\n        property fuelType : string;\n        property fuelConsumption : float;\n        property temperature : float;\n        operation start() : void;\n        operation stop() : void;\n    }\n\n    # Interface\n    Interface {\n        property temperature : float;\n        operation transmitTemperature() : void;\n    }\n\n    # Fuel Flow System\n    FuelFlowSystem {\n        property fuelTank : FuelTankAssembly;\n        property engine : Engine;\n        property interface : Interface;\n        operation monitorFuelFlow() : void;\n        operation controlFuelFlow() : void;\n    }\n\n    # User Interface\n    UserInterface {\n        operation displayData() : void;\n        operation control",
    "# SysML v2 Model\n\n    ## Vehicle Configuration\n    Vehicle Configuration is a Class that represents a configuration of a vehicle.\n\n    Class Vehicle Configuration {\n        Vehicle Mass : Number <<attribute>>\n        Front Axle : Axle <<inherited>>\n        Rear Axle : Axle <<inherited>>\n    }\n\n    ## Axle\n    Axle is a Class that represents an axle of a vehicle.\n\n    Class Axle {\n        Tire : Tire <<inherited>>\n    }\n\n    ## Tire\n    Tire is a Class that represents a tire of a vehicle.\n\n    Class Tire {\n        Steering Angle : Number <<attribute>>\n    }\n\n    ## Variant\n    Variant is a Class that represents a variant of a vehicle configuration.\n\n    Class Variant {\n        Vehicle Configuration : Vehicle Configuration <<inherited>>\n        Vehicle Mass : Number <<override>>\n        Front Axle : Axle <<override>>\n        Rear Axle : Axle <<override>>\n    }",
    "#include \"Vehicle.h\"\n    #include \"Trailer.h\"\n    #include \"CouplingHitch.h\"\n\n    class CouplingSystem {\n    public:\n        Vehicle* vehicle;\n        Trailer* trailer;\n        CouplingHitch* hitch;\n\n        CouplingSystem(Vehicle* v, Trailer* t, CouplingHitch* h) {\n            vehicle = v;\n            trailer = t;\n            hitch = h;\n        }\n\n        void Connect() {\n            hitch->Connect(vehicle);\n            hitch->Connect(trailer);\n        }\n\n        void Disconnect() {\n            hitch->Disconnect(vehicle);\n            hitch->Disconnect(trailer);\n        }\n    };\n\n    class Vehicle {\n    public:\n        void Connect(CouplingHitch* hitch) {\n            // Connect vehicle to hitch\n        }\n    };\n\n    class Trailer {\n    public:\n        void Connect(CouplingHitch* hitch) {",
    "# SysML v2 Model\n\n    # Vehicle Power Transmission System\n    VehiclePowerTransmissionSystem << System\n    {\n        # Engine\n        Engine << Component\n        {\n            Ports = [ FuelCommandPort, PowerPort, ClutchPort ]\n        }\n\n        # Transmission\n        Transmission << Component\n        {\n            Ports = [ PowerPort, ClutchPort ]\n        }\n\n        # Clutch\n        Clutch << Component\n        {\n            Ports = [ PowerPort ]\n        }\n\n        # Driveshaft\n        Driveshaft << Component\n        {\n            Ports = [ PowerPort ]\n        }\n\n        # Rear Axle Assembly\n        RearAxleAssembly << Component\n        {\n            # Differential\n            Differential << Component\n            {\n                Ports = [ PowerPort ]\n            }\n\n            # LeftHalfShaft\n            LeftHalfShaft << Component\n            {\n                Ports = [ PowerPort ]\n            }\n\n            # RightHalfShaft\n            RightHalfShaft <<",
    "# SysML v2 Model\n\n    # Named Views\n    view1:\n        # Components\n        c1:\n            # Ports\n            p1:\n                # Connections\n                connectedTo: [pe]\n        c2:\n            # Ports\n            p2:\n                # Connections\n                connectedTo: [pe]\n        c3:\n            # Ports\n            p3:\n                # Connections\n                connectedTo: [pf]\n        c4:\n            # Ports\n            p4:\n                # Connections\n                connectedTo: [pf]\n        # Interfaces\n        pe:\n            # Ports\n            pb:\n                # Connections\n                connectedTo: [c1.p1]\n        pf:\n            # Ports\n            pd:\n                # Connections\n                connectedTo: [c3.p3]\n\n    view2:\n        # Components\n        c1:\n            # Ports\n            p1:\n                # Connections\n                connectedTo: [pe]\n        c2",
    "# SysML v2 Textual Model\n\n    # Classes\n    class Vehicle {\n        <<attributes>>\n        <<operations>>\n    }\n\n    class Engine {\n        <<attributes>>\n        <<operations>>\n    }\n\n    class Transmission {\n        <<attributes>>\n        <<operations>>\n    }\n\n    class Driveshaft {\n        <<attributes>>\n        <<operations>>\n    }\n\n    class Wheel {\n        <<attributes>>\n        <<operations>>\n    }\n\n    # Associations\n    Vehicle <-- Engine\n    Vehicle <-- Transmission\n    Vehicle <-- Driveshaft\n    Vehicle <-- Wheel\n\n    # Operations\n    Vehicle.start()\n    Vehicle.stop()\n    Vehicle.setFuelCommand(fuelCommand)\n    Vehicle.getTorque()\n\n    Engine.ignite()\n    Engine.shutdown()\n    Engine.setFuelCommand(fuelCommand)\n    Engine.getTorque()\n\n    Trans",
    "# SysML v2 Textual Model\n\n    # Classes\n    class AutomotivePowertrain {\n        <<operatesOn>> PowertrainComponent\n        <<trigger>> FuelControlCommand\n        <<trigger>> StallSignal\n        <<trigger>> EngineStartCommand\n        <<trigger>> EngineShutdownCommand\n        <<trigger>> Transmission\n        <<trigger>> DriveWheels\n        <<trigger>> TorqueGenerator\n        <<trigger>> PowerAmplifier\n        <<trigger>> PowerTransmitter\n        <<trigger>> PowerDistributor\n\n    }\n\n    class PowertrainComponent {\n        <<hasPart>> Engine\n        <<hasPart>> Transmission\n        <<hasPart>> DriveWheels\n        <<hasPart>> TorqueGenerator\n        <<hasPart>> PowerAmplifier\n        <<hasPart>> PowerTransmitter\n        <<hasPart>> PowerDistributor\n    }\n\n    class Engine {\n        <<activates>> TorqueGenerator\n        <<activates>> PowerTransmitter\n        <<activates>> PowerDistributor\n    }\n\n    class Transmission {\n        <<activates",
    "# SysML v2 Model\n\n    # Classes\n    class Vehicle {\n        <<attributes>>\n        <<operations>>\n    }\n\n    class Powertrain {\n        <<attributes>>\n        <<operations>>\n    }\n\n    class Transmission {\n        <<attributes>>\n        <<operations>>\n    }\n\n    class Wheel {\n        <<attributes>>\n        <<operations>>\n    }\n\n    # Associations\n    Vehicle <-- Powertrain\n    Powertrain <-- Transmission\n    Transmission <-- Wheel\n\n    # Operations\n    Powertrain.generateTorque(fuelCommand) : Torque\n    Transmission.amplifyTorque(Torque) : AmplifiedTorque\n    Transmission.transmitTorque(AmplifiedTorque) : TransmittedTorque\n    Wheel.distributeTorque(TransmittedTorque) : None\n\n    Powertrain.shutdown() : None\n\n    # Attributes\n    Vehicle.driver : Driver\n    Pow",
    "#include \"SysML.h\"\n\n    class Vehicle {\n    public:\n        Vehicle();\n        void ConnectTrailer();\n        void DisconnectTrailer();\n    private:\n        bool isConnected;\n    };\n\n    class Trailer {\n    public:\n        Trailer();\n        void ConnectVehicle();\n        void DisconnectVehicle();\n    private:\n        bool isConnected;\n    };\n\n    class PowerConnectionSystem {\n    public:\n        PowerConnectionSystem();\n        void Connect(Vehicle* vehicle, Trailer* trailer);\n        void Disconnect(Vehicle* vehicle, Trailer* trailer);\n    private:\n        bool isConnected;\n    };\n\n    Vehicle::Vehicle() : isConnected(false) {}\n    Trailer::Trailer() : isConnected(false) {}\n\n    void Vehicle::ConnectTrailer() {\n        if (!isConnected) {\n            isConnected = true;\n            std::cout << \"Vehicle and trailer are connected.\" << std::",
    "#include \"Vehicle.h\"\n    #include \"Trailer.h\"\n    #include \"ConnectionSystem.h\"\n\n    class Vehicle {\n    public:\n        Vehicle();\n        ~Vehicle();\n        void connectToTrailer(Trailer* trailer);\n        void disconnectFromTrailer(Trailer* trailer);\n    private:\n        Chassis* chassis;\n        TowBall* towBall;\n    };\n\n    class Trailer {\n    public:\n        Trailer();\n        ~Trailer();\n        void connectToVehicle(Vehicle* vehicle);\n        void disconnectFromVehicle(Vehicle* vehicle);\n    private:\n        Coupler* coupler;\n        TrailerFrame* trailerFrame;\n    };\n\n    class ConnectionSystem {\n    public:\n        ConnectionSystem();\n        ~ConnectionSystem();\n        void connect(Vehicle* vehicle, Trailer* trailer);\n        void disconnect(Vehicle* vehicle, Trailer* trailer);\n    private:\n        Connection*",
    "#include <iostream>\n    #include <string>\n    #include <vector>\n\n    class Vehicle {\n    public:\n        Vehicle() : towBallDevice(nullptr) {}\n        void setTowBallDevice(TowBallDevice* device) {\n            towBallDevice = device;\n        }\n        void hitchTrailer(Trailer* trailer) {\n            if (towBallDevice!= nullptr) {\n                trailer->setCouplerMechanism(towBallDevice->getCouplerMechanism());\n                trailer->setVehicle(this);\n            } else {\n                std::cout << \"Cannot hitch trailer. No tow ball device.\" << std::endl;\n            }\n        }\n        void unhitchTrailer(Trailer* trailer) {\n            if (trailer->getCouplerMechanism()!= nullptr) {\n                trailer->getCouplerMechanism()->disconnect();\n                trailer->setVehicle(nullptr);\n            } else {",
    "#include \"FuelSystem.h\"\n\n    class FuelSystem {\n    public:\n        FuelSystem();\n        ~FuelSystem();\n\n        void supplyFuel(float amount);\n        void returnFuel(float amount);\n        void monitorTemperature();\n\n    private:\n        float fuelTankLevel;\n        float engineFuelLevel;\n        float temperature;\n    };\n\n    FuelSystem::FuelSystem() : fuelTankLevel(0), engineFuelLevel(0), temperature(0) {}\n\n    FuelSystem::~FuelSystem() {}\n\n    void FuelSystem::supplyFuel(float amount) {\n        fuelTankLevel += amount;\n    }\n\n    void FuelSystem::returnFuel(float amount) {\n        engineFuelLevel += amount;\n    }\n\n    void FuelSystem::monitorTemperature() {\n        // Code to monitor temperature goes here\n    }",
    "# SysML v2 Model\n\n    # Classes\n    class Vehicle {\n        - fuelTank\n    }\n\n    class FuelTank {\n        - capacity\n        - currentLevel\n        - fuel\n    }\n\n    class StorageTank {\n        - fuel\n    }\n\n    class FuelPump {\n        - flowRate\n    }\n\n    # Associations\n    Vehicle <-- FuelTank\n    StorageTank --> FuelPump --> FuelTank\n\n    # Operations\n    Vehicle.getFuel()\n    Vehicle.refuel()\n    FuelTank.addFuel()\n    FuelTank.removeFuel()\n    FuelPump.pumpFuel()\n\n    # Properties\n    Vehicle.fuelTank\n    FuelTank.capacity\n    FuelTank.currentLevel\n    FuelTank.fuel\n    StorageTank.fuel\n    FuelPump.flowRate\n\n    # Initial State\n    Vehicle.fuelTank = new",
    "# SysML v2 Model\n    \n    # Named Views\n    View: AutomobileAssemblyProcess {\n        Description: \"This view represents the automobile assembly process.\"\n        Element: Vehicle {\n            Description: \"This is the main vehicle element.\"\n            Stereotype: <<omg.org/SysML/20131001/SysML#_0024model>>\n            Owner: null\n            Visibility: Public\n            isAssembled: false\n            gearbox: Gearbox {\n                Description: \"This is the gearbox component.\"\n                Stereotype: <<omg.org/SysML/20131001/SysML#_0024model>>\n                Owner: Vehicle\n                Visibility: Public\n                isAssembled: false\n                engine: Engine {\n                    Description: \"This is the engine component.\"\n                    Stereotype: <<omg.org/SysML/20131001/SysML#_0024model>>",
    "# SysML v2 Textual Model\n\n    VehicleA is a Vehicle.\n\n    VehicleA has a Statechart named VehicleStatechart.\n\n    VehicleStatechart has States:\n\n    Off is a State of VehicleStatechart.\n\n    Starting is a State of VehicleStatechart.\n\n    Running is a State of VehicleStatechart.\n\n    HealthManagement is a State of VehicleStatechart.\n\n    Maintenance is a State of VehicleStatechart.\n\n    Degraded is a State of VehicleStatechart.\n\n    Normal is a State of VehicleStatechart.\n\n    Off --> Starting : on receipt of a start signal.\n\n    Starting --> Running : on receipt of a vehicle-on signal.\n\n    Running --> HealthManagement : when the temperature exceeds a safety threshold.\n\n    Running --> Maintenance : on receipt of a signal to enter maintenance mode.\n\n    Running --> Degraded : on receipt of a signal to enter degraded mode.\n\n    HealthManagement --> Normal",
    "# SysML v2 Model\n\n    # Vehicle Component\n    Vehicle << System\n    Vehicle.name = \"Vehicle\"\n    Vehicle.description = \"The core component of the system responsible for vehicle behavior.\"\n\n    # Vehicle Controller Component\n    VehicleController << Component\n    VehicleController.name = \"Vehicle Controller\"\n    VehicleController.description = \"The component responsible for controlling the vehicle.\"\n\n    # Vehicle Behavior\n    VehicleBehavior << Behavior\n    VehicleBehavior.name = \"Vehicle Behavior\"\n    VehicleBehavior.description = \"The behavior of the vehicle.\"\n\n    # Vehicle Status\n    VehicleStatus << State\n    VehicleStatus.name = \"Vehicle Status\"\n    VehicleStatus.description = \"The status of the vehicle.\"\n\n    # Temperature Sensor\n    TemperatureSensor << Sensor\n    TemperatureSensor.name = \"Temperature Sensor\"\n    TemperatureSensor.description = \"The sensor responsible for",
    "# SysML v2 Textual Model\n\n    # Classes\n    class Vehicle {\n        id: integer;\n        mass: real;\n        position: Point;\n        velocity: Vector;\n        acceleration: Vector;\n    }\n\n    class Road {\n        slope: real;\n        surfaceFrictionCoefficient: real;\n    }\n\n    class Point {\n        x: real;\n        y: real;\n    }\n\n    class Vector {\n        magnitude: real;\n        direction: real;\n    }\n\n    class Simulation {\n        id: integer;\n        startTime: time;\n        endTime: time;\n        vehicles: set of Vehicle;\n        roads: set of Road;\n    }\n\n    # Associations\n    Vehicle.position -> Point;\n    Vehicle.velocity -> Vector;\n    Vehicle.acceleration -> Vector;\n    Vehicle.simulation -> Simulation;\n\n    Road.simulation -> Simulation;\n\n    # Operations\n    class Operation {\n        name: string;\n        parameters",
    "# SysML v2 Model\n\n    # Classes\n\n    class Vehicle {\n        configuration: Configuration\n    }\n\n    class Configuration {\n        subsystemA: SubsystemA\n        subsystemB: SubsystemB\n    }\n\n    class SubsystemA {\n        component: Component\n    }\n\n    class SubsystemB {\n        component: Component\n    }\n\n    class Component {\n        name: String\n    }\n\n    # Associations\n\n    Vehicle <-- Configuration --> SubsystemA\n    Vehicle <-- Configuration --> SubsystemB\n    SubsystemA --> Component\n    SubsystemB --> Component\n\n    # Properties\n\n    Vehicle.configuration: Configuration\n    Configuration.subsystemA: SubsystemA\n    Configuration.subsystemB: SubsystemB\n    SubsystemA.component: Component\n    SubsystemB.component: Component\n    Component.name: String\n\n    # Initialization\n\n    Vehicle.configuration = Configuration(subsystemA=SubsystemA(component=Component(name=\"Component 1\")), subsystemB=SubsystemB(component",
    "# SysML v2 Model\n\n    # Abstract Classes\n    Abstract Class Component {\n        property port : Port\n        property behavior : Behavior\n    }\n\n    Abstract Class Subsystem {\n        property components : Set{Component}\n    }\n\n    Abstract Class VehicleConfig {\n        property subsystems : Set{Subsystem}\n    }\n\n    # Concrete Classes\n    Class Part1 extends Component {\n        property port : Port1\n    }\n\n    Class Part2 extends Component {\n        property port : Port2\n    }\n\n    Class Part3 extends Component {\n        property port : Port1\n    }\n\n    Class Part4 extends Component {\n        property port : Port2\n    }\n\n    Class Part5 extends Component {\n        property port : Port2\n    }\n\n    Class Part6 extends Component {\n        property port : Port1\n    }\n\n    Class SubsystemA extends Subsystem {\n        property components : {Part1, Part2, Part3}\n    }\n\n    Class SubsystemB extends Subsystem {\n        property components : {Part4, Part5,",
    "# SysML v2 Model\n\n    # Classes\n    Class Vehicle {\n        property name : String;\n        property engine : Engine;\n        property transmission : Transmission;\n        property wheel : Wheel;\n    }\n\n    Class Engine {\n        property type : String;\n        property cylinders : Integer;\n    }\n\n    Class Transmission {\n        property type : String;\n    }\n\n    Class Wheel {\n        property type : String;\n    }\n\n    # Associations\n    Vehicle.engine -> Engine : \"has\"\n    Vehicle.transmission -> Transmission : \"has\"\n    Vehicle.wheel -> Wheel : \"has\"\n\n    # Properties\n    Vehicle.name : \"Vehicle Name\"\n    Engine.type : \"Engine Type\"\n    Engine.cylinders : \"Number of Cylinders\"\n    Transmission.type : \"Transmission Type\"\n    Wheel.type : \"Wheel Type\"\n\n    # Initialization\n    Vehicle.name = \"Vehicle Name\"\n    Engine",
    "#include <sys/types.h>\n    #include <sys/stat.h>\n    #include <unistd.h>\n    #include <stdio.h>\n    #include <stdlib.h>\n    #include <string.h>\n    #include <ctype.h>\n\n    typedef struct Vehicle {\n        char name[100];\n        int mass;\n        int fuelStatus;\n        struct Engine engine;\n        struct Transmission transmission;\n    } Vehicle;\n\n    typedef struct Engine {\n        int torque;\n    } Engine;\n\n    typedef struct Transmission {\n        int gearRatio;\n    } Transmission;\n\n    int main() {\n        Vehicle car1;\n        strcpy(car1.name, \"Car1\");\n        car1.mass = 2000;\n        car1.fuelStatus = 1;\n        car1.engine.torque = 150;\n        car1.transmission.gearRatio = 3;\n\n        Vehicle car2;",
    "#include \"SysML_v2.h\"\n\n    class Vehicle {\n    private:\n        double actualMass;\n        double maxPermissibleMass;\n\n    public:\n        Vehicle(double actualMass, double maxPermissibleMass) {\n            this->actualMass = actualMass;\n            this->maxPermissibleMass = maxPermissibleMass;\n        }\n\n        bool isCompliant() {\n            return actualMass <= maxPermissibleMass;\n        }\n    };\n\n    class VehicleTestSystem {\n    private:\n        Vehicle* vehicles;\n        int numVehicles;\n\n    public:\n        VehicleTestSystem(Vehicle* vehicles, int numVehicles) {\n            this->vehicles = vehicles;\n            this->numVehicles = numVehicles;\n        }\n\n        bool isAllCompliant() {\n            for (int i = 0; i < numVehicles; i++) {\n                if (!vehicles[i].is",
    "# SysML v2 Textual Model\n\n    # Classes\n    Class SpigotBank {\n        - mainSupplyPipe : MainSupplyPipe\n    }\n\n    Class MainSupplyPipe {\n        - hotWaterOutlet : HotWaterOutlet\n        - coldWaterOutlet : ColdWaterOutlet\n    }\n\n    Class HotWaterOutlet {\n        - water : Water\n    }\n\n    Class ColdWaterOutlet {\n        - water : Water\n    }\n\n    Class Faucet {\n        - hotWaterInlet : HotWaterInlet\n        - coldWaterInlet : ColdWaterInlet\n    }\n\n    Class HotWaterInlet {\n        - water : Water\n    }\n\n    Class ColdWaterInlet {\n        - water : Water\n    }\n\n    Class FaucetInlet {\n        - water : Water\n    }\n\n    Class Water {\n        - temperature : Temperature\n    }\n\n    Class Temperature {\n        - value : double\n    }\n\n    # Associations\n    Spig",
    "#include <iostream>\n    #include <string>\n    #include <vector>\n    #include <map>\n\n    using namespace std;\n\n    class Vehicle {\n    public:\n        string name;\n        map<string, Component> components;\n\n        Vehicle(string name) : name(name) {}\n\n        void addComponent(string componentName, Component component) {\n            components[componentName] = component;\n        }\n\n        double calculateTotalMass() {\n            double totalMass = 0;\n            for(auto& component : components) {\n                totalMass += component.second.mass;\n            }\n            return totalMass;\n        }\n    };\n\n    class Component {\n    public:\n        string name;\n        double mass;\n\n        Component(string name, double mass) : name(name), mass(mass) {}\n    };\n\n    class QualityAnalysis {\n    public:\n        string name;\n        vector<string> requirements;\n\n        QualityAnalysis(string name) : name(name) {}\n\n        void",
    "# SysML v2 Model\n\n    # Classes\n    class Vehicle {\n        name : String\n        powertrain : Powertrain\n    }\n\n    class Powertrain {\n        engine : Engine\n    }\n\n    class Engine {\n        structure : String\n        cylinders : Integer\n        pistons : Integer\n        connectingRods : Integer\n        crankshafts : Integer\n        power : Float\n        mass : Float\n        efficiency : Float\n        reliability : Float\n        cost : Float\n    }\n\n    # Associations\n    Vehicle.powertrain -> Powertrain.engine\n\n    # Multiplicity\n    Vehicle.powertrain : 1..1\n    Powertrain.engine : 1..1\n\n    # Operations\n    Engine.evaluate() : Evaluation\n    Evaluation.explain() : String\n\n    # Data\n    Engine.structure : [ \"Four-cylinder\", \"Six-cylinder\", \"Eight-cylinder\",... ]\n\n    # Methods\n    Engine.evalu",
    "#include \"SysML.h\"\n\n    class VehicleFuelEconomySystem : public System {\n    public:\n        VehicleFuelEconomySystem() : System(\"Vehicle Fuel Economy System\") {}\n\n        void addRequirement(double minUrban, double minHighway) {\n            Requirement requirement(\"Vehicle Fuel Economy Requirement\");\n            requirement.addTest(\"Urban Driving\", \"Fuel Economy\", minUrban);\n            requirement.addTest(\"Highway Driving\", \"Fuel Economy\", minHighway);\n            addRequirement(requirement);\n        }\n\n        void addTest(string drivingCondition, string parameter, double value) {\n            Test test(drivingCondition + \" \" + parameter);\n            test.addParameter(\"Fuel Economy\", value);\n            addTest(test);\n        }\n\n        void addParameter(string parameter, double value) {\n            Parameter parameter(parameter);\n            parameter.setValue(value);\n            addParameter(parameter);\n        }",
    "# SysML v2 Textual Model\n\n    # Classes\n    class Vehicle {\n        property mass : Real;\n        property initialPosition : Position;\n        property initialVelocity : Velocity;\n        property powerData : List of Power;\n        operation calculateMotion(timeStep : Real) : List of Motion;\n    }\n\n    class Position {\n        property x : Real;\n        property y : Real;\n    }\n\n    class Velocity {\n        property value : Real;\n    }\n\n    class Power {\n        property value : Real;\n    }\n\n    class Motion {\n        property acceleration : Acceleration;\n        property velocity : Velocity;\n        property position : Position;\n    }\n\n    class Acceleration {\n        property value : Real;\n    }\n\n    # Associations\n    Vehicle.powerData -> Power (many)\n    Vehicle.calculateMotion -> Motion (many)\n    Motion.acceleration -> Acceleration (one)\n    Motion.velocity -> Velocity (one)\n    Mot",
    "# SysML v2 Model\n    \n    # Vehicle System Model\n    VehicleSystem << System {\n        name : \"Vehicle System Model\";\n        mass : 2500;\n    }\n    \n    # Front Axle Assembly\n    FrontAxleAssembly << Component {\n        name : \"Front Axle Assembly\";\n        mass : 150;\n    }\n    \n    # Rear Axle Assembly\n    RearAxleAssembly << Component {\n        name : \"Rear Axle Assembly\";\n        mass : 250;\n    }\n    \n    # Relationships\n    VehicleSystem includes FrontAxleAssembly;\n    VehicleSystem includes RearAxleAssembly;\n    \n    # Attributes\n    FrontAxleAssembly includes {\n        wheel1 : Wheel {\n            name : \"Front Wheel 1\";\n        }\n        wheel2 : Wheel {\n            name : \"Front Wheel 2\";\n        }\n        axle : Axle {\n            name : \"Front Axle\";\n        }\n    }",
    "# SysML v2 Model\n\n    # Classes\n    class Vehicle {\n        name : String\n        components : Component[]\n    }\n\n    class Component {\n        name : String\n        features : Feature[]\n    }\n\n    class Feature {\n        name : String\n        isMandatory : Boolean\n    }\n\n    # Associations\n    Vehicle <--* Component\n    Component *-- Feature\n\n    # Instances\n    vehicle : Vehicle = new Vehicle(\"Vehicle\", [\n        new Component(\"Seat Belts\", [\n            new Feature(\"Seat Belt\", true),\n            new Feature(\"Bumper\", true)\n        ]),\n        new Component(\"Airbags\", [\n            new Feature(\"Airbag\", false),\n            new Feature(\"Anti-lock Braking System\", false)\n        ]),\n        new Component(\"Alarm Devices\", [\n            new Feature(\"Alarm\", false),\n            new Feature(\"Keyless Entry System\", false)\n        ])\n    ])\n\n    # Valid",
    "# SysML v2 Model\n\n    # Named Views\n    View: System\n    View: ApplicationLayer\n    View: ServiceLayer\n    View: DataLayer\n\n    # Elements\n    System: System\n    Service: ServiceLayer\n    Application: ApplicationLayer\n    Data: DataLayer\n\n    # Associations\n    System -[ HAS_PART ]-> Application\n    System -[ HAS_PART ]-> Service\n    System -[ HAS_PART ]-> Data\n    Application -[ DEPENDS_ON ]-> Service\n    Service -[ DEPENDS_ON ]-> Data\n\n    # Attributes\n    System: x, y, z\n    Application: x, y\n    Service: x, y\n    Data: x, y, z\n\n    # Constraints\n    z = f(x, y)\n\n    # Dependencies\n    ServiceLayer -[ DEPENDS_ON ]-> DataLayer\n    ApplicationLayer -[ DEPENDS_ON ]-> ServiceLayer\n\n    # Notes\n    This model represents a layered architecture where the application layer uses the functionalities provided by",
    "# SysML v2 Model\n\n    # Classes\n    class PowertrainSystem {\n        <<attributes>>\n        <<operations>>\n    }\n\n    class Engine {\n        <<attributes>>\n        <<operations>>\n    }\n\n    class LogicLayer {\n        <<attributes>>\n        <<operations>>\n    }\n\n    # Associations\n    PowertrainSystem --* Engine\n    PowertrainSystem --* LogicLayer\n\n    # Operations\n    PowertrainSystem.initialize() {\n        <<implementation>>\n    }\n\n    PowertrainSystem.generateTorque() {\n        <<implementation>>\n    }\n\n    Engine.initialize() {\n        <<implementation>>\n    }\n\n    Engine.generateTorque() {\n        <<implementation>>\n    }\n\n    LogicLayer.initialize() {\n        <<implementation>>\n    }\n\n    LogicLayer.generateTorque() {\n        <<implementation>>\n    }\n\n    # Attributes\n    PowertrainSystem.engine : Engine\n    PowertrainSystem.logicLayer : LogicLayer",
    "# SysML v2 Textual Model\n\n    # System\n    System \"PowerSystem\" {\n        # Component\n        Component \"TorqueGenerator\" {\n            # Operation\n            Operation \"generateTorque\" {\n                # Input\n                Input \"powerInput\" {\n                    # Parameter\n                    Parameter \"power\" {\n                        Type \"float\";\n                    }\n                }\n                # Output\n                Output \"torqueOutput\" {\n                    # Parameter\n                    Parameter \"torque\" {\n                        Type \"float\";\n                    }\n                }\n            }\n        }\n        # Component\n        Component \"Powertrain\" {\n            # Component\n            Component \"Engine\" {\n                # Operation\n                Operation \"generatePower\" {\n                    # Input\n                    Input \"torqueInput\" {\n                        # Parameter\n                        Parameter \"torque\" {\n                            Type \"float\";\n                        }\n                    }\n                    # Output\n                    Output \"powerOutput\" {\n                        # Parameter\n                        Parameter \"power\" {\n                            Type \"float\";",
    "# SysML v2 Model\n\n    # Vehicle Safety and Anti-theft Function Catalogue\n\n    # Catalogue Description\n    This is a Vehicle Safety and Anti-theft Function Catalogue. It is intended to standardize the basic configuration requirements for key vehicle components in terms of safety and anti-theft performance.\n\n    # Catalogue Components\n    ## Safety Components\n    - Front seat belts\n    - Bumpers\n    - Driver's airbag\n    - Anti-lock braking system\n    ## Security Components\n    - Alarm system\n    - Keyless entry system\n\n    # Catalogue Regulations\n    ## Safety Regulations\n    - Basic safety components must be installed on the body and interior to ensure the fundamental personal safety of occupants.\n    - Certain components, such as the driver's airbag and anti-lock braking system, are characterized as safety features but may or may not be mandatory depending on specific configurations.\n    ## Security Regulations\n    - The vehicle should also be equipped with security components such as an alarm system and a keyless entry system, so as to enhance the overall security",
    "# SysML v2 Model\n\n    # Classes\n    Class: Vehicle\n    Class: FuelTankAssembly\n    Class: FuelPump\n    Class: FuelConsumingUnit\n    Class: FuelReturnLine\n\n    # Attributes\n    Vehicle.fuelSystem: FuelTankAssembly\n    FuelTankAssembly.fuelPump: FuelPump\n    FuelTankAssembly.fuelTank: FuelTank\n    FuelPump.fuelTank: FuelTank\n    FuelPump.returnLine: FuelReturnLine\n    FuelConsumingUnit.fuelPump: FuelPump\n    FuelReturnLine.fuelPump: FuelPump\n\n    # Associations\n    Vehicle.contains > FuelTankAssembly\n    FuelTankAssembly.contains > FuelPump\n    FuelTankAssembly.contains > FuelTank\n    FuelPump.contains > FuelTank\n    FuelPump.contains > FuelReturnLine\n    FuelConsumingUnit.contains",
    "# SysML v2 Textual Model\n\n    # Classes\n    class Vehicle {\n        <<identifies>>\n        interior : SeatBelt*2\n        airbag : Airbag?\n        alarm : AntiTheftAlarm\n        body : Bumper\n        entry : KeylessEntrySystem\n        chassis : Wheel*2, AntiLockBrakingSystem*2\n    }\n\n    class SeatBelt {\n        <<has>>\n        mandatory : Boolean\n    }\n\n    class Airbag {\n        <<has>>\n        mandatory : Boolean\n    }\n\n    class AntiTheftAlarm {\n        <<has>>\n        mandatory : Boolean\n    }\n\n    class Bumper {\n        <<has>>\n        mandatory : Boolean\n    }\n\n    class KeylessEntrySystem {\n        <<has>>\n        mandatory : Boolean\n    }\n\n    class Wheel {\n        <<has>>\n        mandatory : Boolean\n    }\n\n    class AntiLockBrakingSystem {\n        <<has>>\n        mandatory : Boolean\n    }",
    "# SysML v2 Textual Model\n\n    # Vehicle Safety and Security Component System\n    VehicleSafetySecuritySystem << System, id=\"VSSCS\" {\n        name = \"Vehicle Safety and Security Component System\"\n        description = \"The vehicle safety and security component system mainly includes the vehicle’s interior and body assembly parts. The interior is equipped with an alarm system, seat belts, front row seats, and a driver’s airbag, while the body assembly comprises the vehicle body, bumper, and keyless entry system. The safety features are primarily reflected in the configuration of seat belts, airbags, and bumpers, which enhance the protection of the driver and passengers during driving. The security features are realized through the installation of an onboard alarm and a keyless entry system, providing support for anti-theft and convenient access for users. The system integrates safety and security functions, aiming to offer users comprehensive safety protection and a convenient user experience.\"\n    }\n\n    # Interior\n    Interior << Component, id=\"Interior\" {\n        name = \"Interior\"\n        description =",
    "# SysML v2 Textual Model\n\n    Class Diagram:\n\n    Component:\n    - id: integer\n    - name: string\n    - security_classification: string (enum: \"Unclassified\", \"Confidential\", \"Secret\")\n\n    Security_Classification:\n    - id: integer\n    - level: string\n\n    Relationship:\n    Component.security_classification --> Security_Classification.level\n\n    Use Case:\n    - Title: \"Classify and label components\"\n    - Actors: \"System\"\n    - Description: \"The system should be able to classify and label each component to meet information security management requirements.\"\n    - Steps:\n        - \"The system receives a new component.\"\n        - \"The system assigns a security classification level to the component.\"\n        - \"The system displays the classification level of the component.\"\n\n    - Title: \"Recognize and display classification attribute\"\n    - Actors: \"System\"\n    - Description: \"When a component is marked as 'Confidential', the system should be able to recognize and display its corresponding classification attribute.\"",
    "# SysML v2 Model\n\n    # Named View: ECU Communication and Control Model\n\n    # ECU Communication and Control Model\n    # Description: This system is designed to implement a typical automotive Electronic Control Unit (ECU) communication and control model.\n\n    # Vehicle Control Unit (VCU)\n    VCU << ECU\n    VCU.type = \"Vehicle Control Unit\"\n    VCU.description = \"Controls the vehicle's operation.\"\n\n    # Engine Control Unit (ECU)\n    ECU << ECU\n    ECU.type = \"Engine Control Unit\"\n    ECU.description = \"Controls the engine's operation.\"\n\n    # CAN Bus\n    CAN_Bus << Bus\n    CAN_Bus.type = \"CAN Bus\"\n    CAN_Bus.description = \"Communication bus for the ECU's.\"\n\n    # Bus Interface\n    Bus_Interface << Bus_Interface\n    Bus_Interface.type = \"Bus Interface\"\n    Bus_Interface.description = \"Connects ECU's to the C",
    "#include \"BloodGlucoseMeter.h\"\n\n    class BloodGlucoseMeter {\n    private:\n        bool batteryStatus;\n        bool batteryCharge;\n        bool glucoseMeasurement;\n\n    public:\n        BloodGlucoseMeter() {\n            batteryStatus = true;\n            batteryCharge = true;\n            glucoseMeasurement = true;\n        }\n\n        void checkBatteryStatus() {\n            if (batteryCharge == false) {\n                batteryStatus = false;\n                alertUser();\n            }\n        }\n\n        void alertUser() {\n            // Code to alert user about the battery status\n        }\n\n        void checkGlucoseMeasurement() {\n            if (glucoseMeasurement == false) {\n                // Code to handle the failure scenario\n            }\n        }\n    };\n\n    int main() {\n        BloodGlucoseMeter meter;\n        meter.checkBatteryStatus();\n        meter.checkGlucoseMeasurement();\n        return",
    "# SysML v2 Model\n\n    # Constants\n\n    ## Mathematical Constants\n    e = 2.71828182845904523536028747135266249775724709369995\n    pi = 3.1415926535897932384626433832795028841971693993751\n\n    ## Physical Constants\n    speed_of_light = 299792458 m/s\n    fine_structure_constant = 1.23498735e-6\n    electron_to_proton_mass_ratio = 1.67262192e-27\n\n    ## Scenario-Based Constants\n    standard_gravitational_acceleration_on_Earth = 9.80665 m/",
    "# SysML v2 Textual Model\n\n    ## Tire Class\n    Class Tire {\n        manufacturer: String\n        diameter: Real\n        width: Integer\n    }\n\n    ## French Tire Class\n    Class FrenchTire extends Tire {\n        // No additional attributes for French tires\n    }\n\n    ## Instantiate Tire\n    tire1 = new Tire(\"Michelin\", 18.0, 245)\n\n    ## Instantiate French Tire\n    frenchTire1 = new FrenchTire(\"Michelin\", 18.0, 245)\n\n    ## Check Tire Type\n    print(tire1 instanceof Tire) // true\n    print(frenchTire1 instanceof FrenchTire) // true\n    print(frenchTire1 instanceof Tire) // true\n\n    ## Check Tire Attributes\n    print(tire1.manufacturer) // Michelin\n    print(tire1.diameter) // 18.0\n    print(tire1.width) // 245",
    "# SysML v2 Model\n\n    ## Vehicle\n    Vehicle is a component with properties:\n    - mass: 1200 kg\n    - length: 4.82 m\n\n    ## Wheel\n    Wheel is a component with properties:\n    - hub diameter: 18 inches\n    - width: 245 mm\n    - outer diameter: computed from hub diameter and tire height\n    - tire: a component\n\n    ## Tire\n    Tire is a component with properties:\n    - diameter: computed from wheel's hub diameter and width\n\n    ## Conversion\n    Conversion from SI to Imperial units:\n    - 1 meter = 3.28084 feet\n    - 1 kilogram = 2.20462 pounds\n    - 1 inch = 0.0254 meters\n    - 1 millimeter = 0.001 inches\n\n    ## Relationships\n    Each Vehicle has exactly 2 Wheel(s)\n    Each Wheel has exactly 1 Tire\n\n    ## Validation",
    "# SysML v2 Model\n\n    # Classes\n    class Vehicle {\n        property engine : Engine\n        property transmission : Transmission\n    }\n\n    class Engine {\n        property cylinderCount : int\n    }\n\n    class Transmission {\n        property type : string\n    }\n\n    # Associations\n    Vehicle <-- Engine : contains\n    Vehicle <-- Transmission : contains\n\n    # Constraints\n    constraint highPerformanceVehicle {\n        if (Vehicle.engine.cylinderCount == 6) then\n            Vehicle.engine.cylinderCount = 6\n        else\n            Vehicle.engine.cylinderCount = 4\n        endif\n    }\n\n    constraint validPowertrain {\n        if (Vehicle.engine.cylinderCount == 4 and Vehicle.transmission.type == \"manual\") or (Vehicle.engine.cylinderCount == 6 and Vehicle.transmission.type == \"automatic\") then\n            Vehicle.engine.cylinderCount",
    "# SysML v2 Model\n\n    # Classes\n\n    Class: Vehicle\n    - Attributes:\n        - total_mass: 1200 kg\n        - length: 4.82 m\n        - wheel_assemblies: Set of WheelAssembly\n\n    Class: WheelAssembly\n    - Attributes:\n        - tire: Tire\n        - brake_disc: BrakeDisc\n\n    Class: Tire\n    - Attributes:\n        - width: 245 mm\n        - height: 45 mm\n        - tread_depth: 6.0 mm\n\n    Class: BrakeDisc\n    - Attributes:\n        - radius: 95 mm\n\n    # Constraints\n\n    Constraint: The tread depth of the tire must not be less than 3.5 mm\n    - If: Tire.tread_depth < 3.5\n    - Then: Error: Tread depth is too low\n\n    Constraint: The brake disc diameter must be less than the outer diameter of the wheel",
    "# SysML v2 Textual Model\n\n    # Classes\n    Class: FuelTankAssembly {\n        attribute: fuelTank\n        operation: outletInterface(fuel)\n        operation: returnFuel(fuel)\n    }\n\n    Class: FuelPump {\n        attribute: fuelTank\n        operation: pumpFuel(fuel)\n        operation: receiveReturnedFuel(fuel)\n    }\n\n    Class: FuelSystem {\n        attribute: fuelTankAssembly\n        attribute: fuelPump\n        operation: monitorFuelTemperature()\n        operation: transmitFuelTemperatureInfo()\n    }\n\n    # Associations\n    fuelTankAssembly -- outletInterface --> fuel\n    fuelTankAssembly -- returnFuel --> fuel\n    fuelPump -- pumpFuel --> fuel\n    fuelPump -- receiveReturnedFuel --> fuel\n    fuelSystem -- fuelTankAssembly --> fuelTankAssembly\n    fuelSystem -- fuelPump --> fuelPump\n\n    # Notes\n    This model assumes that the fuel system is a part of a larger system",
    "#include <iostream>\n    #include <string>\n    #include <map>\n    #include <vector>\n\n    using namespace std;\n\n    class PhysicalQuantity {\n    public:\n        string name;\n        string unit;\n        double value;\n\n        PhysicalQuantity(string name, string unit, double value) {\n            this->name = name;\n            this->unit = unit;\n            this->value = value;\n        }\n\n        void print() {\n            cout << \"Name: \" << name << \", Unit: \" << unit << \", Value: \" << value << endl;\n        }\n    };\n\n    class PhysicalQuantitySystem {\n    private:\n        map<string, PhysicalQuantity> quantities;\n\n    public:\n        void addQuantity(PhysicalQuantity pq) {\n            quantities[pq.name] = pq;\n        }\n\n        void printQuantities() {\n            for(auto& pq : quantities) {\n                pq.second.print();\n            }\n        }\n    };\n\n    int main()",
    "#include <iostream>\n    #include <string>\n    #include <map>\n\n    using namespace std;\n\n    class Unit {\n    public:\n        string name;\n        string symbol;\n        double conversionFactor;\n\n        Unit(string n, string s, double cf) {\n            name = n;\n            symbol = s;\n            conversionFactor = cf;\n        }\n    };\n\n    class UnitSystem {\n    public:\n        map<string, Unit> units;\n\n        UnitSystem() {\n            // Define the units\n            units[\"meter\"] = Unit(\"meter\", \"m\", 1.0);\n            units[\"kilometer\"] = Unit(\"kilometer\", \"km\", 1000.0);\n            units[\"foot\"] = Unit(\"foot\", \"ft\", 0.3048);\n            units[\"mile\"] = Unit(\"mile\", \"mi\", 1609.34);\n            units[\"inch\"] = Unit(\"inch\", \"in\", 0.0254);\n            units[\"yard\"] = Unit(\"yard\", \"yd\",",
    "# SysML v2 Model\n\n    # Classes\n    class CarHeadlampTiltAdjustmentKnob {\n        property tiltAngle : Real;\n    }\n\n    class HeadlampBeam {\n        property angle : Real;\n    }\n\n    # Associations\n    CarHeadlampTiltAdjustmentKnob <--* HeadlampBeam {\n        direction : \"has\"\n    }\n\n    # Operations\n    class Operations {\n        function validateTiltAngle(tiltAngle : Real) : Boolean {\n            if (tiltAngle < 50 || tiltAngle > 80) {\n                return false;\n            }\n            return true;\n        }\n    }\n\n    # Initialization\n    carHeadlampTiltAdjustmentKnob = new CarHeadlampTiltAdjustmentKnob();\n    headlampBeam = new HeadlampBeam();\n    operations = new Operations();\n\n    # Behavior\n    carHeadlampTiltAdjustmentKnob.tiltAngle = headl",
    "#include <iostream>\n    #include <string>\n    #include <map>\n\n    enum class Color { Red, Yellow, Green };\n\n    struct Dimension {\n        std::string name;\n        int value;\n    };\n\n    struct Status {\n        std::string name;\n        Color color;\n    };\n\n    struct DataType {\n        std::string name;\n        std::string type;\n        bool isUnsigned;\n        bool isFloatingPoint;\n        bool isDateTime;\n        bool isString;\n        bool isBoolean;\n        bool isDimension;\n        bool isStatus;\n        std::map<std::string, Color> colorMap;\n        std::map<std::string, Dimension> dimensionMap;\n        std::map<std::string, Status> statusMap;\n    };\n\n    int main() {\n        DataType unsignedInt = { \"Unsigned Integer\", \"int\", true, false, false, false, false, false, false, { { \"Red\", Color::Red }, { \"Yellow\", Color::Yellow }, { \"Green\", Color",
    "```\n    <SysML>\n        <Class name=\"SparePart\">\n            <Attribute name=\"id\" type=\"integer\"/>\n            <Attribute name=\"name\" type=\"string\"/>\n            <Attribute name=\"archive\" type=\"boolean\"/>\n        </Class>\n        <Class name=\"Personnel\">\n            <Attribute name=\"id\" type=\"integer\"/>\n            <Attribute name=\"name\" type=\"string\"/>\n            <Attribute name=\"role\" type=\"string\"/>\n        </Class>\n        <Class name=\"Bag\">\n            <Attribute name=\"id\" type=\"integer\"/>\n            <Attribute name=\"spareParts\" type=\"List<SparePart>\"/>\n        </Class>\n        <Class name=\"Set\">\n            <Attribute name=\"id\" type=\"integer\"/>\n            <Attribute name=\"persons\" type=\"OrderedSet<Personnel>\"/>\n        </Class>\n        <Class name=\"List\">\n            <Attribute name=\"id\" type=\"integer\"/>\n            <Attribute name=\"integers\" type=\"List<integer>\"/>\n        </Class>\n        <Class name=\"Real\">\n            <Attribute name=\"id",
    "# SysML v2 Textual Model\n\n    Tire {\n        manufacturer : String\n        rimDiameter : Real\n        tireWidth : Real\n        installationPosition : CoordinateVector\n    }\n\n    CoordinateVector {\n        x : Real\n        y : Real\n        z : Real\n    }\n\n    Manufacturer {\n        name : String\n        tire : Tire\n    }\n\n    Real : Number\n\n    String : Text\n\n    CoordinateVector : {\n        x : Real\n        y : Real\n        z : Real\n    }\n\n    Tire : {\n        manufacturer : String\n        rimDiameter : Real\n        tireWidth : Real\n        installationPosition : CoordinateVector\n    }\n\n    Manufacturer : {\n        name : String\n        tire : Tire\n    }\n\n    Real : Number\n\n    String : Text\n\n    CoordinateVector : {\n        x : Real\n        y : Real\n        z : Real\n    }\n\n    Tire : {\n        manufacturer : String\n        rimDiameter : Real",
    "#include <iostream>\n    #include <vector>\n    #include <string>\n    #include <ctime>\n\n    struct Position {\n        double x, y, z;\n    };\n\n    struct Velocity {\n        double x, y, z;\n    };\n\n    struct SampledData {\n        time_t time;\n        Position position;\n        Velocity velocity;\n    };\n\n    class SpacecraftTrajectory {\n    public:\n        std::vector<SampledData> trajectory;\n\n        void addSampledData(time_t time, Position position, Velocity velocity) {\n            SampledData data;\n            data.time = time;\n            data.position = position;\n            data.velocity = velocity;\n            trajectory.push_back(data);\n        }\n\n        void printTrajectory() {\n            for (const auto& data : trajectory) {\n                std::cout << \"Time: \" << ctime(&data.time) << \" Position: (\" << data.position.x << \", \" << data.position.y << \", \" << data",
    "#include <iostream>\n    #include <string>\n    #include <map>\n    #include <vector>\n\n    using namespace std;\n\n    class Metal {\n    public:\n        string name;\n        double atomic_mass;\n        double tensile_strength;\n        Metal(string name, double atomic_mass, double tensile_strength) {\n            this->name = name;\n            this->atomic_mass = atomic_mass;\n            this->tensile_strength = tensile_strength;\n        }\n    };\n\n    class Alloy {\n    public:\n        string name;\n        map<string, double> components;\n        double tensile_strength;\n        Alloy(string name, map<string, double> components, double tensile_strength) {\n            this->name = name;\n            this->components = components;\n            this->tensile_strength = tensile_strength;\n        }\n    };\n\n    int main() {\n        map<string, Metal> metals = {\n            {\"Iron\", Metal(\"Iron",
    "#include <iostream>\n    #include <map>\n    #include <string>\n    #include <vector>\n\n    using namespace std;\n\n    class Material {\n    public:\n        string name;\n        map<string, double> composition;\n        double tensileStrength;\n\n        Material(string name, map<string, double> composition, double tensileStrength) {\n            this->name = name;\n            this->composition = composition;\n            this->tensileStrength = tensileStrength;\n        }\n\n        void printDetails() {\n            cout << \"Material Name: \" << name << endl;\n            cout << \"Composition: \";\n            for(auto const& i : composition) {\n                cout << i.first << \": \" << i.second << \", \";\n            }\n            cout << endl;\n            cout << \"Tensile Strength: \" << tensileStrength << \" N/mm^2\" << endl;\n        }\n    };\n\n    class EngineeringMaterialsDatabase {\n    private:\n        map<string, Material> materials;\n\n    public",
    "# SysML v2 Textual Model\n\n    # Classes\n    class Publisher {\n        - name\n        - topic\n        - message\n        - server\n\n        function publish() {\n            server.receive(self)\n        }\n    }\n\n    class Subscriber {\n        - name\n        - topic\n        - server\n\n        function subscribe() {\n            server.addSubscriber(self)\n        }\n\n        function receive(message) {\n            print(message)\n        }\n    }\n\n    class Server {\n        - publishers\n        - subscribers\n\n        function receive(publisher) {\n            for subscriber in subscribers {\n                if subscriber.topic == publisher.topic {\n                    subscriber.receive(publisher.message)\n                }\n            }\n        }\n\n        function addSubscriber(subscriber) {\n            subscribers.append(subscriber)\n        }\n    }\n\n    # Initialization\n    server = Server()\n    publisher = Publisher(name=\"Publisher1\", topic=\"Top",
    "# SysML v2 Model\n\n    ## Vehicle Fuel System\n\n    VehicleFuelSystem is a Class {\n        fuelTank : FuelTank\n        engine : Engine\n        fuelLines : FuelLines\n        fuelTemperatureSensor : FuelTemperatureSensor\n    }\n\n    ## FuelTank\n\n    FuelTank is a Class {\n        fuelCapacity : integer\n        fuelLevel : integer\n        fuelSupply : Operation\n        fuelReturn : Operation\n    }\n\n    ## FuelLines\n\n    FuelLines is a Class {\n        fuelTank : FuelTank\n        engine : Engine\n    }\n\n    ## Engine\n\n    Engine is a Class {\n        fuelConsumption : Operation\n        fuelReturn : Operation\n    }\n\n    ## FuelTemperatureSensor\n\n    FuelTemperatureSensor is a Class {\n        fuelSystem : VehicleFuelSystem\n        monitorFuelTemperature : Operation\n        transmitFuelTemperature : Operation\n    }\n\n    ## Operation\n\n    Operation is a",
    "# SysML v2 Textual Model\n\n    # Named View: System\n    # Description: This system represents the entire system architecture.\n    # Participants: Producers, Server, Consumers\n\n    # Named View: Producers\n    # Description: This view represents the producers of the system.\n    # Participants: Producers\n\n    # Named View: Server\n    # Description: This view represents the server of the system.\n    # Participants: Server\n\n    # Named View: Consumers\n    # Description: This view represents the consumers of the system.\n    # Participants: Consumers\n\n    # Named View: Publish-Subscribe\n    # Description: This view represents the publish-subscribe mechanism of the system.\n    # Participants: Producers, Server, Consumers\n\n    # Use Case: Publish Message\n    # Description: This use case describes the process of a producer publishing a message to the server.\n    # Includes: Producers, Server\n\n    # Use Case: Subscribe to Topic\n    # Description: This use case describes the process",
    "# SysML v2 Textual Model\n\n    # Classes\n    class Vehicle {\n        - fuelLevel: float\n        - maxTankCapacity: float\n        - driver: Driver\n        - passengers: Passenger[0..4]\n    }\n\n    class Driver {\n        - vehicle: Vehicle\n    }\n\n    class Passenger {\n        - vehicle: Vehicle\n    }\n\n    class GasStation {\n        - fuelLevel: float\n    }\n\n    # Associations\n    Vehicle <-- Driver\n    Vehicle <-- Passenger[0..4]\n    Vehicle -- GasStation[0..1]\n\n    # Operations\n    Vehicle.use() {\n        if (vehicle.fuelLevel < 0.1 * vehicle.maxTankCapacity) {\n            vehicle.driver.goToGasStation()\n        }\n        // Travel tasks\n    }\n\n    Driver.goToGasStation() {\n        // Travel to gas station\n        // Fill up fuel\n        gasStation.fuelLevel =",
    "# SysML v2 Model\n    \n    # Named View: System\n    # Description: This system is designed to provide fuel supply and return management functions for vehicles.\n    \n    # Class: Vehicle\n    # Description: The vehicle system is composed of a fuel tank assembly and an engine unit.\n    \n    # Class: FuelTank\n    # Description: The fuel tank supplies fuel to the engine through a fuel outlet port that connects to the engine’s fuel inlet port.\n    \n    # Class: Engine\n    # Description: The engine receives fuel from the fuel tank through a fuel inlet port.\n    \n    # Class: FuelInterface\n    # Description: The fuel tank and engine are connected via fuel interfaces, enabling both forward flow (supply) and reverse flow (return) of fuel.\n    \n    # Class: FuelPort\n    # Description: A fuel port is a point of connection between the fuel tank and engine.\n    \n    # Class: FuelReturn\n    # Description: Fuel return from the engine to the fuel tank.\n    \n    # Class: FuelSupply\n    # Description:",
    "# SysML v2 Textual Model\n\n    # Classes\n\n    Class: Vehicle\n    - Attributes:\n        - VehicleID\n        - VehicleType\n        - CurrentFuelLevel\n        - CurrentTemperature\n        - FuelTankAssembly\n        - Engine\n\n    Class: FuelTankAssembly\n    - Attributes:\n        - TankID\n        - CurrentFuelLevel\n        - CurrentTemperature\n        - FuelSupplyPort\n        - FuelReturnPort\n\n    Class: FuelSupplyPort\n    - Attributes:\n        - SupplyPortID\n        - CurrentFuelLevel\n        - CurrentTemperature\n\n    Class: FuelReturnPort\n    - Attributes:\n        - ReturnPortID\n        - CurrentFuelLevel\n        - CurrentTemperature\n\n    Class: Engine\n    - Attributes:\n        - EngineID\n        - CurrentFuelLevel\n        - CurrentTemperature\n        - FuelReturnPort\n\n    # Associations\n\n    Vehicle 1--* FuelTankAssembly\n    F",
    "#include \"SysML_v2.h\"\n\n    class Scene {\n    public:\n        Scene(string name) {\n            this->name = name;\n        }\n\n        void focus() {\n            // Code to focus on the scene\n        }\n\n        void capture() {\n            // Code to capture the scene\n        }\n\n        string getName() {\n            return this->name;\n        }\n\n    private:\n        string name;\n    };\n\n    class Photo {\n    public:\n        Photo(string name) {\n            this->name = name;\n        }\n\n        void save() {\n            // Code to save the photo\n        }\n\n        string getName() {\n            return this->name;\n        }\n\n    private:\n        string name;\n    };\n\n    class AutomatedPhotoCaptureSystem {\n    public:\n        AutomatedPhotoCaptureSystem() {\n            scenes = new vector<Scene*>;\n        }\n\n        void addScene(Scene* scene) {\n            scenes->push_back(scene);\n        }",
    "# SysML v2 Model\n\n    # Classes\n    class Scene {\n        id: int\n        name: string\n        location: string\n    }\n\n    class Camera {\n        id: int\n        name: string\n        focusing_system: FocusingSystem\n        shooting_system: ShootingSystem\n    }\n\n    class FocusingSystem {\n        id: int\n        name: string\n        focusing_algorithm: FocusingAlgorithm\n    }\n\n    class FocusingAlgorithm {\n        id: int\n        name: string\n        focus_distance: int\n    }\n\n    class ShootingSystem {\n        id: int\n        name: string\n        shooting_algorithm: ShootingAlgorithm\n    }\n\n    class ShootingAlgorithm {\n        id: int\n        name: string\n        shooting_speed: int\n    }\n\n    # Associations\n    Scene <---> Camera : { focusing_system, shooting_system }\n    Camera <---> FocusingSystem : { focusing_algorithm }\n    FocusingSystem <---> Focusing",
    "#include \"SysML_v2.h\"\n\n    class PhotographySystem : public System {\n    public:\n        PhotographySystem() {\n            // Define the system's components\n            Component focusingProcess;\n            Component shootingProcess;\n\n            // Define the system's interactions\n            Interaction selectScene;\n            Interaction focusOnScene;\n            Interaction shootScene;\n\n            // Define the system's workflow\n            Workflow photographyWorkflow;\n            photographyWorkflow.add(selectScene);\n            photographyWorkflow.add(focusOnScene);\n            photographyWorkflow.add(shootScene);\n\n            // Define the system's properties\n            Property sceneSelection;\n            Property focusedImage;\n            Property finalPhotograph;\n\n            // Define the system's dataflows\n            Dataflow dataflow1;\n            dataflow1.add(sceneSelection);\n            dataflow1.add(focusedImage);\n            dataflow1.add(finalPhotograph);\n\n            // Add components, interactions, and workflows to the system\n            add(focusing",
    "# SysML v2 Model\n\n    ## System\n    System: Automated Photography System\n\n    ## Components\n    Component: User Interface\n    Component: Focus Processing Unit\n    Component: Shooting Unit\n\n    ## Interactions\n    Interaction: User Interface -> Focus Processing Unit\n    Interaction: Focus Processing Unit -> Shooting Unit\n    Interaction: User Interface -> Shooting Unit\n\n    ## Use Cases\n    Use Case: User Provides Shooting Scene\n    Use Case: Focus Processing Unit Processes Scene\n    Use Case: Shooting Unit Shoots Scene\n\n    ## Use Case Diagrams\n    Use Case Diagram: User Provides Shooting Scene\n    Use Case Diagram: Focus Processing Unit Processes Scene\n    Use Case Diagram: Shooting Unit Shoots Scene\n\n    ## Activity Diagrams\n    Activity Diagram: User Interface -> Focus Processing Unit\n    Activity Diagram: Focus Processing Unit -> Shooting Unit\n    Activity Diagram: User Interface -> Shooting Unit\n\n    ## Interaction Diagrams\n    Interaction Di",
    "# SysML v2\n    #\n    # The PhotographyWorkflow system\n    #\n    # The system consists of the following components:\n    #\n    # 1. User Interface (UI)\n    # 2. Focus Component\n    # 3. Shoot Component\n    # 4. Image Component\n    # 5. Picture Component\n    #\n    # The User Interface (UI) is the interface through which users can input the desired scene to be photographed.\n    #\n    # The Focus Component is responsible for focusing on the captured scene to generate a frame of image.\n    #\n    # The Shoot Component is responsible for performing a shooting operation on the focused image to produce a photograph.\n    #\n    # The Image Component is responsible for storing the frame of image generated by the Focus Component.\n    #\n    # The Picture Component is responsible for storing the final photograph produced by the Shoot Component.\n    #\n    # The UI communicates with the Focus Component, Image Component, and Shoot Component to initiate the photography process.\n    #\n    # The Focus Component receives the input from the UI",
    "#include \"SysML.h\"\n\n    class PhotographySystem : public System {\n    public:\n        PhotographySystem() {\n            // Define the components\n            Component sceneSelection;\n            Component cameraFocus;\n            Component cameraShooting;\n\n            // Define the interactions\n            Interaction focusScene;\n            Interaction shootPhoto;\n\n            // Define the relationships\n            sceneSelection.add(cameraFocus);\n            cameraFocus.add(cameraShooting);\n            cameraShooting.add(sceneSelection);\n\n            // Define the sequence\n            focusScene.add(sceneSelection);\n            focusScene.add(cameraFocus);\n            shootPhoto.add(cameraShooting);\n\n            // Define the use case\n            UseCase oneClickShooting;\n            oneClickShooting.add(focusScene);\n            oneClickShooting.add(shootPhoto);\n\n            // Define the system\n            System photographySystem;\n            photographySystem.add(oneClickShooting);\n        }\n    };\n\n    int main() {\n        PhotographySystem system;\n        system",
    "# SysML v2 Model\n\n    # Classes\n    class Scene {\n        id: int\n        name: string\n        focusQuality: FocusQuality\n    }\n\n    class FocusQuality {\n        id: int\n        name: string\n        focusValue: int\n    }\n\n    class Photo {\n        id: int\n        name: string\n        quality: Quality\n    }\n\n    class Quality {\n        id: int\n        name: string\n        qualityValue: int\n    }\n\n    # Associations\n    Scene --> FocusQuality : focusQuality\n    FocusQuality --> Photo : quality\n\n    # Operations\n    Scene.shootPhoto() : Photo\n        pre: Scene.focusQuality.focusValue > 0\n        post: Photo.quality.qualityValue > 0\n\n    # Initialization\n    Scene.focusQuality = FocusQuality.new(1, \"Good\", 100)\n    FocusQuality.quality = Quality.new(1, \"Excellent\",",
    "# SysML v2 Model\n    #\n    # This is a textual model of a photography workflow system.\n    #\n    # The system is designed to implement a complete photography workflow.\n    # The user only needs to trigger the \"take photo\" operation once, and the system will automatically complete all subsequent steps.\n    # First, the system acquires the current shooting scene and inputs it into the focus function, automatically performing the focusing process to generate an image.\n    # Then, based on the obtained image, the system executes the shooting operation to produce the final photograph.\n    # After the shooting is finished, the system immediately displays the resulting photo, enabling the user to intuitively view the shooting result.\n    # The entire process is seamlessly integrated by the system, without requiring manual intervention from the user at each step, greatly improving the convenience and smoothness of photography.\n    \n    # System Interactions\n    #\n    # The system consists of the following components:\n    # 1. User Interface (UI)\n    # 2. Focus Function\n    # 3. Shooting Function\n    # 4. Display Function",
    "#include \"SysML_v2.h\"\n\n    class Vehicle {\n    public:\n        Vehicle();\n        void start();\n        void stop();\n        void monitorBrakePedal();\n        void evaluateTraction();\n        void adjustBrakePressure();\n        void adjustModulationFrequency();\n    };\n\n    Vehicle::Vehicle() {\n        // Initialize the vehicle\n    }\n\n    void Vehicle::start() {\n        // Activate the vehicle\n    }\n\n    void Vehicle::stop() {\n        // Deactivate the vehicle\n    }\n\n    void Vehicle::monitorBrakePedal() {\n        // Monitor the status of the brake pedal\n    }\n\n    void Vehicle::evaluateTraction() {\n        // Evaluate traction variations under different road conditions\n    }\n\n    void Vehicle::adjustBrakePressure() {\n        // Adjust the brake pressure based on the detected brake pedal pressure\n    }\n\n    void Vehicle::adjustModulation",
    "# SysML v2 Textual Model\n    \n    # Classes\n    Class: BatteryChargingSystem\n    Class: Battery\n    Class: ChargingProcess\n    Class: ChargingController\n    \n    # Properties\n    BatteryChargingSystem.battery : Battery\n    BatteryChargingSystem.chargingProcess : ChargingProcess\n    Battery.capacity : integer\n    ChargingProcess.isCharging : boolean\n    ChargingProcess.currentLevel : integer\n    \n    # Associations\n    BatteryChargingSystem <> Battery : composition\n    BatteryChargingSystem <> ChargingProcess : composition\n    Battery <> ChargingProcess : aggregation\n    \n    # Operations\n    BatteryChargingSystem.startCharging() : ChargingProcess\n    BatteryChargingSystem.stopCharging() : ChargingProcess\n    BatteryChargingSystem.monitorBatteryLevel() : ChargingProcess\n    ChargingProcess.chargeB",
    "#include \"Battery.h\"\n    #include \"Charger.h\"\n    #include \"Monitor.h\"\n\n    class Battery {\n    private:\n        int batteryLevel;\n    public:\n        Battery() : batteryLevel(100) {}\n        int getBatteryLevel() { return batteryLevel; }\n        void setBatteryLevel(int level) { batteryLevel = level; }\n    };\n\n    class Charger {\n    private:\n        Battery* battery;\n    public:\n        Charger(Battery* b) : battery(b) {}\n        void startCharging() {\n            while(battery->getBatteryLevel() < 100) {\n                battery->setBatteryLevel(battery->getBatteryLevel() + 1);\n            }\n        }\n    };\n\n    class Monitor {\n    private:\n        Battery* battery;\n    public:\n        Monitor(Battery* b) : battery(b) {}\n        void monitorBatteryLevel",
    "#include \"SysML_v2.h\"\n\n    class CameraSystem {\n    public:\n        void setScene(string scene) {\n            // Implementation of setting the scene\n        }\n\n        void takePhoto() {\n            // Implementation of taking a photo\n        }\n\n        void savePhoto(string photo) {\n            // Implementation of saving the photo\n        }\n\n    private:\n        AutofocusSubsystem autofocus;\n        ImagingSubsystem imaging;\n        PhotoRecorder photoRecorder;\n    };\n\n    class AutofocusSubsystem {\n    public:\n        void focusOnObject(string object) {\n            // Implementation of focusing on an object\n        }\n    };\n\n    class ImagingSubsystem {\n    public:\n        void captureImage() {\n            // Implementation of capturing an image\n        }\n    };\n\n    class PhotoRecorder {\n    public:\n        void recordPhoto(string photo) {\n            // Implementation of recording a photo\n        }\n    };\n\n    int main() {\n        CameraSystem camera",
    "# SysML v2 Textual Model\n\n    # Classes\n    class DigitalCamera {\n        operation shoot() {\n            precondition: user has selected a shooting scene\n            postcondition: a high-quality photo is produced\n        }\n    }\n\n    class User {\n        operation selectShootingScene() {\n            precondition: user is viewing the shooting scene\n            postcondition: user has selected a shooting scene\n        }\n    }\n\n    class FocusModule {\n        operation autoFocus() {\n            precondition: user has selected a shooting scene\n            postcondition: camera is focused on the selected scene\n        }\n    }\n\n    class ImagingModule {\n        operation captureImage() {\n            precondition: camera is focused on the selected scene\n            postcondition: a high-quality photo is produced\n        }\n    }\n\n    # Associations\n    DigitalCamera <>-- User : initiates shooting process\n    DigitalCamera <>-- FocusModule : focuses on shooting scene\n    DigitalCamera <>-- ImagingModule : captures image\n    User <>-- FocusModule : selects shooting scene\n    User <>-- Im",
    "# SysML v2 Model\n\n    # Classes\n    class Vehicle {\n        property mass : Real;\n        property initialPosition : Real;\n        property initialVelocity : Real;\n        property timeInterval : Real;\n        property powerInput : List of Real;\n\n        operation calculateSpeed(time : Real) : Real {\n            return (initialVelocity + powerInput[time] * timeInterval) / mass;\n        }\n\n        operation calculatePosition(time : Real) : Real {\n            return initialPosition + calculateSpeed(time) * time;\n        }\n\n        operation simulateMotion() : List of Real {\n            let trajectory : List of Real := [];\n            for time in 0..(length of powerInput) {\n                let position : Real := calculatePosition(time);\n                add position to trajectory;\n            }\n            return trajectory;\n        }\n    }\n\n    # Initialization\n    let vehicle : Vehicle := new Vehicle(mass, initialPosition, initialVelocity, timeInterval, powerInput);\n\n    # Simulation\n    let trajectory :",
    "#include <iostream>\n    #include <string>\n    #include <opencv2/opencv.hpp>\n\n    using namespace std;\n    using namespace cv;\n\n    class CameraSystem {\n    public:\n        Mat frame;\n        Mat image;\n\n        void focusOnScene(string scene) {\n            // Implement focusing process\n        }\n\n        void captureImage() {\n            // Implement image capturing process\n        }\n\n        void displayPhoto() {\n            // Implement photo display process\n        }\n    };\n\n    int main() {\n        CameraSystem cameraSystem;\n        string scene;\n        cout << \"Enter the scene: \";\n        cin >> scene;\n        cameraSystem.focusOnScene(scene);\n        cameraSystem.captureImage();\n        cameraSystem.displayPhoto();\n        return 0;\n    }",
    "#SysML v2\n    #Class: CameraSystem\n    #<<operatesOn>>\n    #<<hasPart>>\n    #<<hasTrigger>>\n    #<<hasSignal>>\n    #<<hasPort>>\n    #<<hasOperation>>\n    \n    #Class: ViewPort\n    #<<operatesOn>>\n    #<<hasPart>>\n    #<<hasTrigger>>\n    #<<hasSignal>>\n    #<<hasPort>>\n    #<<hasOperation>>\n    \n    #Class: Image\n    #<<operatesOn>>\n    #<<hasPart>>\n    #<<hasTrigger>>\n    #<<hasSignal>>\n    #<<hasPort>>\n    #<<hasOperation>>\n    \n    #Class: Picture\n    #<<operatesOn>>\n    #<<hasPart>>\n    #<<hasTrigger>>\n    #<<hasSignal>>\n    #<<hasPort>>\n    #<<hasOperation>>\n    \n    #Class: DisplayPort\n    #<<operatesOn>>\n    #<<hasPart>>\n    #<<hasTrigger>>\n    #<<hasSignal>>",
    "#include <iostream>\n    #include <vector>\n    #include <algorithm>\n\n    class Sensor {\n    public:\n        bool isReady;\n        // other sensor properties\n    };\n\n    class SensorSystem {\n    private:\n        std::vector<Sensor> sensors;\n\n    public:\n        void addSensor(Sensor s) {\n            sensors.push_back(s);\n        }\n\n        void checkSensors() {\n            for (auto& sensor : sensors) {\n                if (sensor.isReady) {\n                    updateSensor(sensor);\n                }\n            }\n        }\n\n        void updateSensor(Sensor& s) {\n            // update sensor logic\n            std::cout << \"Sensor updated\\n\";\n        }\n    };\n\n    int main() {\n        SensorSystem ss;\n        ss.addSensor(Sensor());\n        ss.checkSensors();\n        return 0;\n    }\n\nThis is a simple C++ program that represents the system you described. It includes a S",
    "#include \"sysml.h\"\n\n    class VehicleState {\n    public:\n        enum State {\n            OFF,\n            STARTING,\n            ON\n        };\n\n        VehicleState() : state(OFF) {}\n\n        void start() {\n            if (state == OFF) {\n                state = STARTING;\n            }\n        }\n\n        void powerOn() {\n            if (state == STARTING) {\n                state = ON;\n            }\n        }\n\n        void shutdown() {\n            state = OFF;\n        }\n\n        State getState() const {\n            return state;\n        }\n\n    private:\n        State state;\n    };\n\n    class VehicleSystem {\n    public:\n        VehicleSystem() : vehicle(VehicleState()) {}\n\n        void start() {\n            vehicle.start();\n        }\n\n        void powerOn() {\n            vehicle.powerOn();\n        }\n\n        void shutdown() {\n            vehicle.shutdown();\n        }\n\n        Veh",
    "# SysML v2 Textual Model\n\n    # Classes\n    class Vehicle {\n        VehicleStatus : VehicleStatusEnum;\n        VehicleStartSignal : VehicleStartSignal;\n        VehicleOnSignal : VehicleOnSignal;\n        VehicleOffSignal : VehicleOffSignal;\n    }\n\n    class VehicleStatusEnum {\n        off : VehicleStatusEnum;\n        starting : VehicleStatusEnum;\n        on : VehicleStatusEnum;\n    }\n\n    class Signal {\n        VehicleStartSignal : VehicleStartSignal;\n        VehicleOnSignal : VehicleOnSignal;\n        VehicleOffSignal : VehicleOffSignal;\n    }\n\n    # Associations\n    Vehicle.VehicleStatus <<-->> VehicleStatusEnum.off;\n    Vehicle.VehicleStatus <<-->> VehicleStatusEnum.starting;\n    Vehicle.VehicleStatus <<-->> VehicleStatusEnum",
    "#include \"VehiclePowerManagementSystem.sysml\"\n\n    VehiclePowerManagementSystem {\n        powerStatus : StateMachine {\n            states : [\n                Off,\n                StartPhase,\n                PoweredOn,\n                Shutdown\n            ];\n            transitions : [\n                Off -> StartPhase : \"User starts the vehicle\",\n                StartPhase -> PoweredOn : \"Vehicle started signal received\",\n                PoweredOn -> Off : \"User shuts down the vehicle\",\n                Off -> Shutdown : \"Vehicle shutdown signal received\"\n            ];\n            operations : [\n                \"Perform self-diagnosis\",\n                \"Supply power to various functional units\",\n                \"Engage parking brake\"\n            ];\n            safetyOperations : [\n                \"Ensure safety by cutting off the power supply\"\n            ];\n        };\n    };\n\n    class VehiclePowerManagementSystem {\n        powerStatus : State;\n\n        function startVehicle() {\n            powerStatus.transitionTo(StartPhase);\n            performSelfDiagnosis();",
    "#include <iostream>\n    #include <string>\n\n    enum class VehicleState {\n        Shutdown,\n        Startup,\n        Running\n    };\n\n    class Vehicle {\n    private:\n        VehicleState state;\n\n    public:\n        Vehicle() : state(VehicleState::Shutdown) {}\n\n        void start() {\n            if (state == VehicleState::Shutdown) {\n                state = VehicleState::Startup;\n                std::cout << \"Vehicle started.\" << std::endl;\n            } else {\n                std::cout << \"Vehicle is already running.\" << std::endl;\n            }\n        }\n\n        void stop() {\n            if (state == VehicleState::Running) {\n                state = VehicleState::Shutdown;\n                std::cout << \"Vehicle stopped.\" << std::endl;\n            } else {\n                std::cout << \"Vehicle is already shutdown.\" << std::endl;\n            }\n        }\n\n        void run() {",
    "#include \"PowerManagementSystem.h\"\n\n    class Vehicle {\n    private:\n        enum State {OFF, START, ON};\n        State currentState;\n\n    public:\n        Vehicle() : currentState(OFF) {}\n\n        void start() {\n            if (currentState == OFF) {\n                // Startup process\n                currentState = START;\n            }\n        }\n\n        void on() {\n            if (currentState == START) {\n                // Switch to ON state\n                currentState = ON;\n            }\n        }\n\n        void off() {\n            if (currentState == ON) {\n                // Switch to OFF state\n                currentState = OFF;\n            }\n        }\n    };\n\n    class HealthManagementSystem {\n    private:\n        // Health management system implementation\n    };\n\n    class PowerManagementSystem {\n    private:\n        Vehicle vehicle;\n        HealthManagementSystem healthManagementSystem;\n\n    public:\n        PowerManagementSystem() : vehicle(), healthManagementSystem() {}\n\n        void start() {\n            vehicle",
    "#include \"SysML_v2.h\"\n\n    class VehicleHealthSystem : public System {\n    public:\n        VehicleHealthSystem() : System(\"Vehicle Health System\") {\n            addRequirement(new TemperatureSensor(\"Temperature Sensor\"));\n            addRequirement(new VehicleController(\"Vehicle Controller\"));\n            addRequirement(new MaintenanceSchedule(\"Maintenance Schedule\"));\n        }\n\n        void monitorTemperature() {\n            double currentTemperature = getTemperatureSensor().getTemperature();\n            double maxAllowableTemperature = getTemperatureSensor().getMaxAllowableTemperature();\n\n            if (currentTemperature > maxAllowableTemperature) {\n                getVehicleController().sendOverTemperatureWarning();\n                setStatus(\"degraded\");\n            } else {\n                setStatus(\"normal\");\n            }\n        }\n\n        void performMaintenance() {\n            getVehicleController().performMaintenance();\n            getMaintenance",
    "#include \"sysml.h\"\n\n    class Server {\n    private:\n        Clock localClock;\n        Port requestPort;\n        State off, waiting, response;\n        Timer timer;\n\n    public:\n        Server() : localClock(), requestPort(), off(\"off\"), waiting(\"waiting\"), response(\"response\"), timer() {\n            // Configure the server\n            timer.setInterval(300); // 5 minutes\n            requestPort.setServer(this);\n\n            // Connect the states\n            off.setNextState(waiting);\n            waiting.setNextState(response);\n            response.setNextState(waiting);\n\n            // Connect the timer with the off state\n            timer.setOnTimeout(off);\n\n            // Connect the request port with the waiting state\n            requestPort.setOnReceive(waiting);\n\n            // Set the initial state\n            setCurrentState(off);\n        }\n\n        void setCurrentState(State* state) {\n            currentState = state;\n        }\n\n        void run() {\n            while(true) {\n                current",
    "#include \"VehicleStartStopSystem.h\"\n\n    VehicleStartStopSystem::VehicleStartStopSystem()\n    {\n        // Initial state is off\n        state = \"off\";\n    }\n\n    void VehicleStartStopSystem::start()\n    {\n        // Check if brake pedal is depressed\n        if (brakePedalDepressed())\n        {\n            // If brake pedal is depressed, start the system\n            state = \"starting\";\n            sendStartSignal();\n        }\n    }\n\n    void VehicleStartStopSystem::stop()\n    {\n        // If the system is in the starting state, stop it\n        if (state == \"starting\")\n        {\n            state = \"off\";\n            sendStopSignal();\n        }\n    }\n\n    bool VehicleStartStopSystem::brakePedalDepressed()\n    {\n        // Simulate brake pedal depression\n        return true;\n    }\n\n    void VehicleStartStopSystem::sendStartSignal()\n    {\n        //",
    "#include \"SysML_v2.h\"\n\n    class VehicleStartStopSystem : public System {\n    public:\n        VehicleStartStopSystem() {\n            addRequirement(new State(\"off\"));\n            addRequirement(new State(\"starting\"));\n            addRequirement(new State(\"started\"));\n            addRequirement(new State(\"stopping\"));\n            addRequirement(new State(\"off\"));\n\n            addTransition(new Transition(\"off\", \"starting\", \"start signal received\"));\n            addTransition(new Transition(\"starting\", \"started\", \"vehicle controller signals start\"));\n            addTransition(new Transition(\"started\", \"starting\", \"brake pedal depressed and vehicle-on signal received\"));\n            addTransition(new Transition(\"started\", \"stopping\", \"shutdown signal received\"));\n            addTransition(new Transition(\"stopping\", \"off\", \"vehicle controller signals stop\"));\n            addTransition(new Transition(\"stopping\", \"starting\", \"vehicle controller signals start\"));",
    "#include \"sysml.h\"\n\n    class Driver {\n    public:\n        Driver(CruiseController& cc, Vehicle& v) : cc(cc), v(v) {}\n        void setDesiredSpeed(double speed) {\n            cc.setDesiredSpeed(speed);\n        }\n    private:\n        CruiseController& cc;\n        Vehicle& v;\n    };\n\n    class CruiseController {\n    public:\n        CruiseController(Speedometer& s, Engine& e) : s(s), e(e) {}\n        void setDesiredSpeed(double speed) {\n            s.setDesiredSpeed(speed);\n        }\n        void getActualSpeed(double speed) {\n            e.setActualSpeed(speed);\n        }\n    private:\n        Speedometer& s;\n        Engine& e;\n    };\n\n    class Speedometer {\n    public:\n        Speedometer(CruiseController& cc) : cc(cc) {}\n        void setDesiredSpeed(double speed) {\n            cc.setDesiredSpeed(speed",
    "#include \"CruiseController.h\"\n\n    class CruiseController {\n    public:\n        CruiseController(Speedometer* speedometer, Engine* engine);\n        void setSpeed(float speed);\n        float getActualSpeed();\n        void update();\n\n    private:\n        Speedometer* speedometer;\n        Engine* engine;\n        float setSpeed;\n        float actualSpeed;\n    };\n\n    CruiseController::CruiseController(Speedometer* speedometer, Engine* engine) : speedometer(speedometer), engine(engine), setSpeed(0), actualSpeed(0) {}\n\n    void CruiseController::setSpeed(float speed) {\n        setSpeed = speed;\n    }\n\n    float CruiseController::getActualSpeed() {\n        return actualSpeed;\n    }\n\n    void CruiseController::update() {\n        actualSpeed = speedometer->getSpeed();\n        float throttle = actualSpeed - setSpeed;\n        engine->setThrottle(throttle);\n    }\n\n    class Speedometer {\n    public:\n        float getSpeed();",
    "#include \"CruiseControl.h\"\n\n    class CruiseControl {\n    private:\n        float setSpeed;\n        float currentSpeed;\n        float difference;\n        float throttleCommand;\n\n    public:\n        CruiseControl(float setSpeed) {\n            this->setSpeed = setSpeed;\n        }\n\n        void setCurrentSpeed(float currentSpeed) {\n            this->currentSpeed = currentSpeed;\n            calculateDifference();\n            generateThrottleCommand();\n        }\n\n        void calculateDifference() {\n            difference = setSpeed - currentSpeed;\n        }\n\n        void generateThrottleCommand() {\n            if (difference > 0) {\n                throttleCommand = difference * 100; // Assuming 100% throttle for positive difference\n            } else {\n                throttleCommand = 0; // No throttle for negative difference\n            }\n        }\n\n        float getThrottleCommand() {\n            return throttleCommand;\n        }\n    };\n\n    int main() {\n        CruiseControl cc",
    "# SysML v2\n    \n    # Necessary Classes\n    class Vehicle {\n        property speed : Real;\n        operation setSpeed(desiredSpeed : Real) : void {\n            # Promptly collects and transmits the driver's speed setting request\n            # Sends the command to the cruise controller\n            # The cruise controller calculates and sends appropriate throttle control instructions to the engine\n            # The engine adjusts its throttle to maintain the vehicle at the set cruising speed\n        }\n    }\n    \n    class CruiseController {\n        property vehicle : Vehicle;\n        operation setSpeed(desiredSpeed : Real) : void {\n            # Real-time senses and feedback of the vehicle speed\n            # Intelligently adjusts the throttle of the vehicle\n            # The vehicle adjusts its speed to maintain the set cruising speed\n        }\n    }\n    \n    class Speedometer {\n        operation getSpeed() : Real {\n            # Returns the current speed of the vehicle\n        }\n    }\n    \n    class Engine {\n        operation adjustThrottle",
    "#include <iostream>\n    #include <string>\n    #include <vector>\n    #include <algorithm>\n\n    using namespace std;\n\n    class Vehicle {\n    public:\n        string name;\n        string model;\n        string year;\n        string engineType;\n        string fuelType;\n        int speed;\n        int targetSpeed;\n        bool cruiseControl;\n\n        Vehicle(string n, string m, string y, string e, string f, int s, int ts, bool cc) {\n            name = n;\n            model = m;\n            year = y;\n            engineType = e;\n            fuelType = f;\n            speed = s;\n            targetSpeed = ts;\n            cruiseControl = cc;\n        }\n\n        void setTargetSpeed(int ts) {\n            targetSpeed = ts;\n        }\n\n        int getTargetSpeed() {\n            return targetSpeed;\n        }\n\n        void setSpeed(int s) {\n            speed = s;\n        }\n\n        int getSpeed() {\n            return speed;\n        }",
    "#include <iostream>\n    #include <string>\n    #include <vector>\n\n    class Vehicle {\n    public:\n        Vehicle(std::string name) : name(name) {}\n        void setSpeed(int speed) {\n            std::cout << \"Vehicle \" << name << \" set speed to \" << speed << std::endl;\n        }\n        void getSpeed(int speed) {\n            std::cout << \"Vehicle \" << name << \" actual speed is \" << speed << std::endl;\n        }\n    private:\n        std::string name;\n    };\n\n    class CruiseControl {\n    public:\n        CruiseControl(Vehicle& vehicle) : vehicle(vehicle) {}\n        void setSpeed(int speed) {\n            vehicle.setSpeed(speed);\n            std::cout << \"Cruise Control set speed to \" << speed << std::endl;\n        }\n        void getSpeed(int speed) {\n            vehicle.getSpeed(speed);\n            std::cout << \"Cruise Control actual speed is \" << speed << std",
    "# SysML v2 Model\n\n    # Classes\n    class Vehicle {\n        id: integer\n        assemblyDate: date\n        deliveryDate: date\n        currentOwner: Owner\n        previousOwners: Owner[]\n        scrappingDate: date\n    }\n\n    class Owner {\n        id: integer\n        name: string\n        vehicles: Vehicle[]\n    }\n\n    class Driver {\n        id: integer\n        name: string\n        drivingOperations: DrivingOperation[]\n    }\n\n    class DrivingOperation {\n        id: integer\n        vehicle: Vehicle\n        driver: Driver\n        startDate: date\n        endDate: date\n    }\n\n    # Associations\n    Vehicle <-- 0..1 : 1..* Owner\n    Owner <-- 0..1 : 1..* Vehicle\n    Vehicle <-- 0..1 : 0..* DrivingOperation\n    DrivingOperation <-- 0..1 : 1..* Vehicle\n    DrivingOperation <--",
    "# SysML v2 Model\n\n    # Vehicle Class\n    Vehicle << Class>> {\n        - mass : Real\n        - operationalStatus : OperationalStatus\n        - engine : Engine\n        - driver : Driver\n        - wheels : Set{Wheel}\n    }\n\n    # OperationalStatus Class\n    OperationalStatus << Class>> {\n        - gearSetting : GearSetting\n        - acceleratorPedalPosition : AcceleratorPedalPosition\n    }\n\n    # Engine Class\n    Engine << Class>> {\n        # engine attributes\n    }\n\n    # Driver Class\n    Driver << Class>> {\n        # driver attributes\n    }\n\n    # Wheel Class\n    Wheel << Class>> {\n        - wheelID : String\n        - vehicle : Vehicle\n    }\n\n    # GearSetting Class\n    GearSetting << Enumeration>> {\n        - gear1, gear2, gear3, gear4, gear5, gear6\n    }\n\n    # AcceleratorPedalPosition Class\n    AcceleratorP",
    "# SysML v2 Model\n\n    # Classes\n    Class Vehicle {\n        attribute mass : Real;\n        attribute gear : Integer;\n        attribute accelerator : Real;\n    }\n\n    Class Engine {\n        // Define attributes and operations as needed\n    }\n\n    Class Driver {\n        // Define attributes and operations as needed\n    }\n\n    # Instances\n    Instance Vehicle_1 : Vehicle {\n        Vehicle_1.mass = 2000 kg at t1;\n        Vehicle_1.gear = 0 at t1;\n        Vehicle_1.accelerator = 0.0 at t1;\n\n        Vehicle_1.mass = 1500 kg at t2;\n        Vehicle_1.gear = 2 at t2;\n        Vehicle_1.accelerator = 0.5 at t2;\n    }\n\n    # Relationships\n    Vehicle_1 is composed of Engine_1;\n    Vehicle_1 is driven by Driver",
    "# SysML v2 Model\n\n    ## Vehicle Class\n    Class Vehicle {\n        - mass : double\n        - gear : GearPosition\n        - throttle : double\n        - driver : Driver\n        - engine : Engine\n    }\n\n    ## GearPosition Enumeration\n    Enumeration GearPosition {\n        - neutral\n        - first\n        - second\n        - third\n        - fourth\n        - fifth\n    }\n\n    ## Driver Class\n    Class Driver {\n        - name : string\n    }\n\n    ## Engine Class\n    Class Engine {\n        - power : double\n    }\n\n    ## TimeSlice Class\n    Class TimeSlice {\n        - vehicle : Vehicle\n        - driver : Driver\n    }\n\n    ## VehicleState Class\n    Class VehicleState {\n        - timeSlice : TimeSlice\n        - mass : double\n        - gear : GearPosition\n        - throttle : double\n    }\n\n    ## VehicleTransition Class\n    Class VehicleTransition {\n        - from",
    "# SysML v2 Model\n\n    ## Vehicle Mass Calculation System\n\n    This system is designed to perform hierarchical modeling and aggregation of the quality (mass) information of vehicles and their components, facilitating automatic calculation and management of the total vehicle mass.\n\n    ### Objects\n\n    - Vehicle: The top-level object representing a vehicle.\n    - Component: A component is an object with a quantifiable mass. It can either be a simple component or a composite object assembled from other components.\n    - Subcomponent: A component that is part of another component.\n\n    ### Attributes\n\n    - Vehicle:\n        - VehicleID: A unique identifier for the vehicle.\n        - TotalMass: The total mass of the vehicle including all its components.\n\n    - Component:\n        - ComponentID: A unique identifier for the component.\n        - Mass: The mass of the component.\n        - Subcomponents: A list of subcomponents that are part of the component.\n\n    ### Associations\n\n    - Vehicle:\n        - 1:N: Component",
    "# SysML v2 Model\n\n    ## Vehicle Component\n    Class VehicleComponent {\n        - serialNumber : String\n        - mass : Real\n    }\n\n    ## Vehicle\n    Class Vehicle {\n        - VIN : String\n        - components : Set{0,1} of VehicleComponent\n        - totalMass : Real\n\n        operation calculateTotalMass() : Real {\n            let totalMass = 0.0\n            for each component in components {\n                totalMass = totalMass + component.mass\n            }\n            return totalMass\n        }\n    }\n\n    ## Engine\n    Class Engine extends VehicleComponent {\n        - horsepower : Integer\n    }\n\n    ## Transmission\n    Class Transmission extends VehicleComponent {\n        - gears : Integer\n    }\n\n    ## Recursive Component\n    Class RecursiveComponent extends VehicleComponent {\n        - components : Set{0,1} of VehicleComponent\n    }\n\n    ## Filtered Component\n    Class FilteredComponent extends VehicleComponent {",
    "# SysML v2 Textual Model\n\n    Profile: \"Quality Aggregation Management\"\n\n    Package: \"Mass Management\"\n\n    Class: \"Object\"\n\n    Attributes:\n    - basicMass: integer\n    - totalMass: integer\n\n    Class: \"CompositeObject\"\n\n    Inherits: \"Object\"\n\n    Attributes:\n    - subcomponents: list of Objects\n\n    Operation: \"calculateTotalMass\"\n\n    Precondition: \"subcomponents\" is not empty\n\n    Postcondition: \"totalMass\" is updated with the sum of the basic mass of the composite object and the total mass of all its subcomponents\n\n    Operation: \"aggregateMass\"\n\n    Precondition: \"subcomponents\" is not empty\n\n    Postcondition: \"totalMass\" is updated with the sum of the total mass of all its subcomponents\n\n    Class: \"SimpleObject\"\n\n    Inherits: \"Object\"\n\n    Attributes:\n    - basicMass: integer\n\n    Operation: \"calculateTotalMass\"",
    "# SysML v2 Textual Model\n\n    Profile: \"SysML v2\"\n    Package: \"MassManagementSystem\"\n    NamedElement: \"MassManagementSystem\"\n    {\n        Generalization: \"System\"\n    }\n\n    NamedElement: \"Object\"\n    {\n        Generalization: \"Class\"\n    }\n\n    NamedElement: \"BasicMass\"\n    {\n        Generalization: \"Property\"\n        Type: \"Double\"\n    }\n\n    NamedElement: \"Subcomponent\"\n    {\n        Generalization: \"Class\"\n    }\n\n    NamedElement: \"Mass\"\n    {\n        Generalization: \"Property\"\n        Type: \"Double\"\n    }\n\n    NamedElement: \"MassThreshold\"\n    {\n        Generalization: \"Property\"\n        Type: \"Double\"\n    }\n\n    NamedElement: \"TotalMass\"\n    {\n        Generalization: \"Property\"\n        Type: \"Double\"\n    }\n\n    NamedElement: \"AggregateMass\"",
    "#include <iostream>\n    #include <cmath>\n\n    class Vehicle {\n    private:\n        double power;\n        double dragCoefficient;\n        double frictionCoefficient;\n        double mass;\n        double speed;\n\n    public:\n        Vehicle(double power, double dragCoefficient, double frictionCoefficient, double mass, double speed) {\n            this->power = power;\n            this->dragCoefficient = dragCoefficient;\n            this->frictionCoefficient = frictionCoefficient;\n            this->mass = mass;\n            this->speed = speed;\n        }\n\n        double calculatePowerOutput() {\n            return this->power;\n        }\n\n        double calculateAcceleration(double effectivePower) {\n            return (effectivePower / this->mass) - (this->dragCoefficient * this->speed * this->speed) - (this->frictionCoefficient * this->speed);\n        }\n\n        double calculateSpeed(double acceleration, double time) {\n            return this->speed + (acceleration *",
    "# SysML v2 Model\n\n    # Classes\n    Vehicle {\n        - acceleration [1] : Real\n        - speed [1] : Real\n        - position [1] : Real\n        - timeStep [1] : Real\n        - dragCoefficient [1] : Real\n        - rollingResistanceCoefficient [1] : Real\n        - wheelEndOutputPower [1] : Real\n        - totalVehicleMass [1] : Real\n    }\n\n    # Initialization\n    Vehicle.acceleration = 0\n    Vehicle.speed = 0\n    Vehicle.position = 0\n    Vehicle.timeStep = 0.1\n    Vehicle.dragCoefficient = 0.5\n    Vehicle.rollingResistanceCoefficient = 0.1\n    Vehicle.wheelEndOutputPower = 100\n    Vehicle.totalVehicleMass = 2000\n\n    # Operations\n    calculateAvailableDrivingPower() is operation Vehicle {\n        let available",
    "# SysML v2 Model\n\n    # Classes\n    class Vehicle {\n        vehicleMass : float\n        wheelPower : float\n        aerodynamicDragCoefficient : float\n        rollingResistanceCoefficient : float\n        initialSpeed : float\n        initialPosition : float\n        speed : float\n        position : float\n    }\n\n    class Environment {\n        airTemperature : float\n        airDensity : float\n    }\n\n    # Associations\n    Vehicle - Environment : vehicleMass, aerodynamicDragCoefficient, rollingResistanceCoefficient\n\n    # Operations\n    Vehicle.update(timeStep : float) : void {\n        airResistance = 0.5 * airDensity * vehicleMass * (aerodynamicDragCoefficient * speed^2 + rollingResistanceCoefficient * speed)\n        acceleration = (wheelPower - airResistance) / vehicleMass\n        speed = speed + acceleration * timeStep\n        position = position + speed * timeStep\n    }\n\n    # Initialization\n    vehicle = new Veh",
    "# SysML v2 Model\n\n    # Classes\n    class Vehicle {\n        position: Real;\n        velocity: Real;\n        mass: Real;\n        power: Real;\n        dragCoefficient: Real;\n        frictionCoefficient: Real;\n        timeInterval: Real;\n\n        # Operations\n        def __init__(self, position, velocity, mass, power, dragCoefficient, frictionCoefficient, timeInterval):\n            self.position = position\n            self.velocity = velocity\n            self.mass = mass\n            self.power = power\n            self.dragCoefficient = dragCoefficient\n            self.frictionCoefficient = frictionCoefficient\n            self.timeInterval = timeInterval\n\n        def calculateAcceleration(self):\n            acceleration = self.power / (self.mass * self.dragCoefficient)\n            return acceleration\n\n        def calculateFinalVelocity(self):\n            acceleration = self.calculateAcceleration()\n            finalVelocity = self.velocity + acceleration * self.timeInterval\n            return finalV",
    "# SysML v2 Model\n\n    ## Vehicle System\n    VehicleSystem << System\n    VehicleSystem.name = \"Vehicle System\"\n    VehicleSystem.description = \"This system is designed to restrict and manage the vehicle’s total mass, ensuring that the overall vehicle weight does not exceed the maximum permitted limit of 2,500 kilograms.\"\n\n    ## Vehicle Components\n    Chassis << Component\n    Chassis.name = \"Chassis\"\n    Chassis.description = \"The vehicle's chassis.\"\n\n    Engine << Component\n    Engine.name = \"Engine\"\n    Engine.description = \"The vehicle's engine.\"\n\n    Gearbox << Component\n    Gearbox.name = \"Gearbox\"\n    Gearbox.description = \"The vehicle's gearbox.\"\n\n    ## Mass Parameters\n    ChassisMass << Parameter\n    ChassisMass.name = \"Chassis Mass\"\n    ChassisMass.description = \"The mass of the chassis.\"",
    "# SysML v2 Model\n\n    ## Vehicle Design\n    Vehicle Design is a Class\n    -------------------------\n    <<attributes>>\n    - VehicleID: integer\n    - MassLimit: real\n    - ComponentMasses: list of real\n    - ComponentIDs: list of integer\n\n    ## Component\n    Component is a Class\n    -------------------\n    <<attributes>>\n    - ComponentID: integer\n    - ComponentName: string\n    - ComponentMass: real\n\n    ## System\n    System is a Class\n    ----------------\n    <<operations>>\n    - addComponent(Component): void\n    - removeComponent(ComponentID): void\n    - updateComponentMass(ComponentID, newMass): void\n    - calculateTotalMass(): real\n    - checkMassLimit(): boolean\n\n    ## System Operations\n    -------------------\n    - addComponent(Component): void\n        - if Component.ComponentID not in ComponentIDs:\n            - ComponentIDs.append(Component.ComponentID)\n            - ComponentMasses.append(Component.ComponentMass)",
    "#include \"SysML_v2.h\"\n\n    class Vehicle {\n    private:\n        double chassisMass;\n        double engineMass;\n        double transmissionMass;\n\n    public:\n        Vehicle(double chassisMass, double engineMass, double transmissionMass) {\n            this->chassisMass = chassisMass;\n            this->engineMass = engineMass;\n            this->transmissionMass = transmissionMass;\n        }\n\n        bool isVehicleMassCompliant() {\n            return (chassisMass + engineMass + transmissionMass) <= 2500;\n        }\n    };\n\n    class VehicleManagementSystem {\n    private:\n        Vehicle vehicle;\n\n    public:\n        VehicleManagementSystem(double chassisMass, double engineMass, double transmissionMass) {\n            this->vehicle = Vehicle(chassisMass, engineMass, transmissionMass);\n        }\n\n        bool isVeh",
    "# SysML v2 Model\n\n    ## System: Vehicle Weight Management System\n\n    ### Requirements:\n\n    - The system must be able to accurately record and manage the weight of each component.\n    - The weight data for the chassis, engine, and transmission all required as inputs.\n    - The system should automatically sum the weights of these components.\n    - When the total weight exceeds the specified limit (2,500 kilograms), the system must provide a warning or impose restrictions.\n    - The system must ensure that the designed vehicle’s total weight complies with relevant regulatory requirements.\n    - The system must be able to provide product legality, compliance, and safety.\n\n    ## Components:\n\n    - Vehicle: The main entity that contains the chassis, engine, and transmission.\n    - Chassis: The part of the vehicle that carries the wheels and other moving parts.\n    - Engine: The part of the vehicle that produces the power to move the vehicle.\n    - Transmission: The part of the vehicle that changes the power of the engine into motion.",
    "# SysML v2 Model\n\n    # Vehicle Components\n    Class Vehicle {\n        VehicleID : String\n        Chassis : Chassis\n        Engine : Engine\n        Transmission : Transmission\n    }\n\n    Class Chassis {\n        Mass : Real\n    }\n\n    Class Engine {\n        Mass : Real\n    }\n\n    Class Transmission {\n        Mass : Real\n    }\n\n    # Dynamic Behavior\n    Class VehicleBehavior {\n        Vehicle : Vehicle\n        InitialVelocity : Real\n        FinalVelocity : Real\n        Force : Real\n        Time : Real\n\n        # Constraints\n        Constraint1 : Force > 0\n        Constraint2 : Time > 0\n        Constraint3 : ChangeInVelocity = Force * Time / Mass\n        Constraint4 : TotalMass = Chassis.Mass + Engine.Mass + Transmission.Mass\n        Constraint5 : TotalMass <= 2500\n    }\n\n    # Functions\n    Function Calcul",
    "#include <iostream>\n    #include <ctime>\n    #include <cstdlib>\n\n    using namespace std;\n\n    class Vehicle {\n    private:\n        string vehicleId;\n        time_t nextMaintenanceTime;\n        time_t maintenanceInterval;\n        int maxAllowedTemperature;\n        bool isUnderMaintenance;\n        time_t maintenanceStartTime;\n\n    public:\n        Vehicle(string id, time_t nextMaintenance, time_t maintenanceInterval, int maxTemp) {\n            vehicleId = id;\n            nextMaintenanceTime = nextMaintenance;\n            this->maintenanceInterval = maintenanceInterval;\n            maxAllowedTemperature = maxTemp;\n            isUnderMaintenance = false;\n            maintenanceStartTime = 0;\n        }\n\n        void setMaintenanceTime(time_t time) {\n            nextMaintenanceTime = time;\n        }\n\n        void setMaintenanceInterval(time_t interval) {\n            maintenanceInterval = interval;\n        }\n\n        void setMax",
    "# SysML v2 Textual Model\n\n    ## Vehicle System\n    VehicleSystem << System\n    VehicleSystem.name = \"Vehicle System\"\n    VehicleSystem.description = \"This is the main system for the vehicle.\"\n\n    ## Vehicle\n    Vehicle << VehicleSystem\n    Vehicle.name = \"Vehicle\"\n    Vehicle.description = \"This is the main vehicle.\"\n\n    ## CurbWeight\n    CurbWeight << Vehicle\n    CurbWeight.name = \"CurbWeight\"\n    CurbWeight.description = \"This is the curb weight of the vehicle.\"\n\n    ## FuelMass\n    FuelMass << Vehicle\n    FuelMass.name = \"FuelMass\"\n    FuelMass.description = \"This is the fuel mass of the vehicle.\"\n\n    ## Engine\n    Engine << Vehicle\n    Engine.name = \"Engine\"\n    Engine.description = \"This is the engine of the vehicle.\"\n\n    ## Torque\n    Torque << Engine",
    "# SysML v2 Model\n\n    # Vehicle\n    Vehicle << System\n    Vehicle.name = \"Vehicle\"\n    Vehicle.description = \"The main vehicle system.\"\n\n    # Vehicle Components\n    FuelTank << Component\n    FuelTank.name = \"Fuel Tank\"\n    FuelTank.description = \"The fuel tank of the vehicle.\"\n    Vehicle.contains << FuelTank\n\n    Engine << Component\n    Engine.name = \"Engine\"\n    Engine.description = \"The engine of the vehicle.\"\n    Vehicle.contains << Engine\n\n    Transmission << Component\n    Transmission.name = \"Transmission\"\n    Transmission.description = \"The transmission of the vehicle.\"\n    Vehicle.contains << Transmission\n\n    Clutch << Component\n    Clutch.name = \"Clutch\"\n    Clutch.description = \"The clutch of the vehicle.\"\n    Vehicle.contains << Clutch\n\n    # Vehicle Properties\n    Vehicle.total_mass = << operation >>",
    "# SysML v2 Model\n\n    ## Vehicle\n    Vehicle is a system that has a total mass of not more than 2000 kilograms when fully fueled and not more than 1500 kilograms when empty.\n\n    ## Engine\n    Engine is a component that can effectively transmit its generated torque to the transmission system through a clutch interface.\n\n    ## Performance Table\n    The following performance table specifies the torque generated by the engine at different speeds:\n\n    | Speed (km/h) | Torque (Nm) |\n    |--------------|-------------|\n    | 0 - 500       | 100 - 150   |\n    | 501 - 1000    | 150 - 200   |\n    | 1001 - 1500   | 200 - 250   |\n    | 1501 - 2000   | 250 - 300   |\n\n    ## Vehicle-Engine Interface",
    "# SysML v2 Textual Model\n\n    ## Vehicle Class\n    Class: Vehicle\n    - Attributes:\n        - curbMass: double\n        - fuelMass: double\n        - engineTorque: TorqueCharacteristics\n        - gearbox: Gearbox\n        - fuelTank: FuelTank\n    - Operations:\n        - calculateTotalMass(): double\n        - checkFuelTankCondition(): boolean\n        - checkEngineTorque(): boolean\n\n    ## FuelTank Class\n    Class: FuelTank\n    - Attributes:\n        - fuelLevel: double\n    - Operations:\n        - isFull(): boolean\n        - isEmpty(): boolean\n\n    ## Gearbox Class\n    Class: Gearbox\n    - Attributes:\n        - clutchInterface: ClutchInterface\n    - Operations:\n        - checkClutchInterface(): boolean\n\n    ## ClutchInterface Class\n    Class: ClutchInterface\n    - Attributes:\n        - torque: Torque\n    - Operations:\n        - checkTorque",
    "# SysML v2 Model\n\n    # Classes\n    class Vehicle {\n        curbWeight : double;\n        payload : double;\n        wheelDiameter : double;\n        transmissionEfficiency : double;\n        fuelEconomy : double;\n    }\n\n    class DrivingCycle {\n        timeStampedPosition : List<Position>;\n        speed : List<double>;\n    }\n\n    class Position {\n        x : double;\n        y : double;\n    }\n\n    # Associations\n    Vehicle <---> DrivingCycle : \"has driving cycle\"\n\n    # Operations\n    function calculatePowerDemand(Vehicle v, DrivingCycle dc) : double {\n        // Implementation\n    }\n\n    function calculateAcceleration(Vehicle v, DrivingCycle dc) : double {\n        // Implementation\n    }\n\n    function calculateSpeed(Vehicle v, DrivingCycle dc) : List<double> {\n        // Implementation\n    }\n\n    function calculate",
    "# SysML v2 Model\n\n    # Classes\n    class Vehicle {\n        curbWeight : double;\n        load : double;\n        wheelDiameter : double;\n        transmissionEfficiency : double;\n        // other vehicle parameters\n    }\n\n    class DrivingScenario {\n        urban : boolean;\n        highway : boolean;\n    }\n\n    class FuelEconomy {\n        milesPerGallon : double;\n    }\n\n    # Associations\n    Vehicle <--->* DrivingScenario\n    Vehicle <--->* FuelEconomy\n\n    # Operations\n    function calculatePower(Vehicle v, DrivingScenario ds) : double {\n        // calculate wheel power based on vehicle parameters and driving scenario\n    }\n\n    function calculateAcceleration(Vehicle v, DrivingScenario ds) : double {\n        // calculate acceleration based on vehicle parameters and driving scenario\n    }\n\n    function calculateEnergyConsumption(Vehicle v, DrivingScenario ds) : double {\n        //",
    "# SysML v2 Model\n\n    # Classes\n    class Engine {\n        id: integer;\n        type: string;\n        power: real;\n        mass: real;\n        efficiency: real;\n        cost: real;\n    }\n\n    class SelectionAnalysisSystem {\n        engines: set of Engine;\n        evaluationFunction: function;\n    }\n\n    # Functions\n    function addEngine(engine: Engine) is\n        engines.add(engine);\n    end function;\n\n    function calculateKeyPerformanceIndicators() is\n        for each engine in engines do\n            engine.power = calculatePower(engine);\n            engine.mass = calculateMass(engine);\n            engine.efficiency = calculateEfficiency(engine);\n            engine.cost = calculateCost(engine);\n        end for;\n    end function;\n\n    function calculatePower(engine: Engine) is\n        # Implementation of power calculation\n    end function;\n\n    function calculateMass(engine: Engine) is\n        # Implementation of mass calculation\n    end function;\n\n    function calculateEfficiency(",
    "# SysML v2 Model\n\n    # Named View: System\n    # Description: This is the main view of the system.\n\n    # Class: Vehicle\n    # Description: This class represents a vehicle.\n    Vehicle << Class\n    {\n        # Property: CurbWeight\n        # Description: This property represents the curb weight of the vehicle.\n        CurbWeight : Integer [0..*]\n        {\n            # Constraint: CurbWeight <= 2500\n            Constraint << Derived\n            {\n                body << \"constraint CurbWeight <= 2500\"\n            }\n        }\n    }\n\n    # Class: VehicleQualityEvaluation\n    # Description: This class represents the evaluation of the vehicle's quality.\n    VehicleQualityEvaluation << Class\n    {\n        # Property: EvaluationResult\n        # Description: This property represents the result of the evaluation.\n        EvaluationResult : Boolean [0..1]\n        {\n            # Constraint: EvaluationResult = True or EvaluationResult",
    "# SysML v2 Textual Model\n\n    # Classes\n    Class: Vehicle\n    - Attributes: ID, Type, Mass\n    Class: Weighing_Equipment\n    - Attributes: ID, Model, Calibration_Status\n    Class: Mass_Verification_Unit\n    - Attributes: ID, Model, Calibration_Status\n\n    # Associations\n    Vehicle <--weighs--> Weighing_Equipment\n    Weighing_Equipment <--verifies--> Mass_Verification_Unit\n\n    # Operations\n    Operation: Verify_Mass\n    - Parameters: Vehicle, Weighing_Equipment, Mass_Verification_Unit\n    - Preconditions: Vehicle is not null, Weighing_Equipment is not null, Mass_Verification_Unit is not null\n    - Postconditions: If Vehicle's mass is less than or equal to 2,500 kilograms, it is qualified; if it exceeds this value, it is unqualified.\n\n    # Use Cases",
    "#include <iostream>\n    #include <string>\n    #include <vector>\n    #include <map>\n\n    using namespace std;\n\n    class Vehicle {\n    public:\n        string type;\n        int capacity;\n        bool is_electric;\n        bool is_hybrid;\n        bool is_automatic;\n        bool is_automated;\n        bool is_connected;\n        bool is_sustainable;\n        bool is_compatible;\n        bool is_driver_assist;\n        bool is_passenger_comfort;\n        bool is_environment_considered;\n\n        Vehicle(string type, int capacity, bool is_electric, bool is_hybrid, bool is_automatic, bool is_automated, bool is_connected, bool is_sustainable, bool is_compatible, bool is_driver_assist, bool is_passenger_comfort, bool is_environment_considered) {\n            this->type = type;\n            this->capacity = capacity;\n            this->is_electric = is_elect",
    "# SysML v2 Textual Model\n\n    # Classes\n    class Vehicle {\n        - name : String\n        - driver : Driver\n        - passengers : [Passenger]\n        - fuel : Float\n        - startPoint : Point\n        - destination : Point\n    }\n\n    class Driver {\n        - name : String\n        - vehicle : Vehicle\n        - fuel : Float\n    }\n\n    class Passenger {\n        - name : String\n        - vehicle : Vehicle\n    }\n\n    class Point {\n        - latitude : Float\n        - longitude : Float\n    }\n\n    # Associations\n    Vehicle <-- Driver : DRIVES\n    Vehicle <-- Passenger : CARRIES\n    Driver <-- Vehicle : DRIVES\n    Passenger <-- Vehicle : CARRIES\n\n    # Operations\n    Vehicle.start(startPoint : Point) : Void\n    Vehicle.end(destination : Point) : Void\n    Vehicle.refuel(fuel : Float) : Void\n    Driver.",
    "# SysML v2 Model\n\n    # Classes\n\n    class Vehicle {\n        property engine : Engine;\n        property transmission : Transmission;\n    }\n\n    class Engine {\n        property cylinders : Cylinder;\n    }\n\n    class Transmission {\n        property type : TransmissionType;\n    }\n\n    class Cylinder {\n        property diameter : Diameter;\n    }\n\n    class TransmissionType {\n        property type : TransmissionType;\n    }\n\n    class Diameter {\n        property value : Value;\n    }\n\n    class Value {\n        property value : int;\n    }\n\n    # Associations\n\n    Vehicle <-- Engine\n    Vehicle <-- Transmission\n    Engine <-- Cylinder\n    Transmission <-- TransmissionType\n    Cylinder <-- Diameter\n    Diameter <-- Value\n\n    # Constraints\n\n    TransmissionType.type = \"manual\" implies Engine.cylinders = 4;\n    TransmissionType.type = \"automatic\" implies Engine.cyl",
    "# SysML v2 Textual Model\n\n    # Classes\n    class Engine {\n        cylinderCount : integer [4, 6]\n        cylinderDiameter : integer [70, 100]\n    }\n\n    class FourCylinderEngine extends Engine {\n        cylinderCount = 4\n    }\n\n    class SixCylinderEngine extends Engine {\n        cylinderCount = 6\n    }\n\n    # Associations\n    FourCylinderEngine.cylinderDiameter = 70\n    SixCylinderEngine.cylinderDiameter = 70\n\n    FourCylinderEngine.cylinderDiameter = 100\n    SixCylinderEngine.cylinderDiameter = 100\n\n    # Composition\n    class System {\n        engine : Engine\n    }\n\n    # Instances\n    system = new System()\n    system.engine = new FourCylinderEngine()\n\n    # Validation\n    if (system.engine.cylinderCount == 4) {\n        system.engine",
    "# SysML v2 Model\n\n    ## Vehicle Configuration Space\n\n    Vehicle {\n        name : String\n        engine : Engine\n        transmission : Transmission\n    }\n\n    Engine {\n        type : String\n        cylinders : Integer\n        cylinderDiameter : String\n    }\n\n    Transmission {\n        type : String\n    }\n\n    ## Constraints\n\n    Constraint {\n        name : String\n        description : String\n        condition : String\n    }\n\n    ## Constants\n\n    Constants {\n        engine4 : Engine\n        engine6 : Engine\n        transmissionManual : Transmission\n        transmissionAutomatic : Transmission\n    }\n\n    ## Rules\n\n    Rule {\n        name : String\n        description : String\n        condition : String\n    }\n\n    ## Initial Configuration\n\n    InitialConfiguration {\n        name : String\n        vehicle : Vehicle\n    }\n\n    ## Functions\n\n    Function {\n        name : String\n        description : String\n        parameters : String\n        returnType : String\n    }",
    "# SysML v2 Model\n\n    # System Assembly\n    SystemAssembly << System\n    {\n        name = \"System Assembly\"\n    }\n\n    # Computer Subsystem\n    ComputerSubsystem << Component\n    {\n        name = \"Computer Subsystem\"\n    }\n    SystemAssembly.ownedComponent << ComputerSubsystem\n\n    # Storage Subsystem\n    StorageSubsystem << Component\n    {\n        name = \"Storage Subsystem\"\n    }\n    SystemAssembly.ownedComponent << StorageSubsystem\n\n    # Software Design Section\n    SoftwareDesignSection << Section\n    {\n        name = \"Software Design Section\"\n    }\n    SystemAssembly.section << SoftwareDesignSection\n\n    # Message Format\n    MessageFormat << DataFormat\n    {\n        name = \"Message Format\"\n    }\n    SoftwareDesignSection.ownedAttribute << MessageFormat\n\n    # Data Format\n    DataFormat << DataFormat\n    {\n        name = \"Data Format\"\n    }\n    SoftwareDesignSection.ownedAttribute << DataFormat\n\n    # Computer Subsystem Interfacing\n    ComputerSubsystem.interface << MessageFormat",
    "# SysML v2 Textual Model\n\n    # Powertrain System\n    PowertrainSystem << System\n    PowertrainSystem.name = \"Powertrain System\"\n    PowertrainSystem.description = \"System designed to efficiently allocate and manage the powertrain system.\"\n\n    # Logical Layer\n    LogicalLayer << Component\n    LogicalLayer.name = \"Logical Layer\"\n    LogicalLayer.description = \"Layer responsible for providing power and generating torque.\"\n    PowertrainSystem.contains = LogicalLayer\n\n    # TorqueGenerator\n    TorqueGenerator << Component\n    TorqueGenerator.name = \"Torque Generator\"\n    TorqueGenerator.description = \"Component responsible for converting power into torque.\"\n    LogicalLayer.contains = TorqueGenerator\n\n    # Physical Layer\n    PhysicalLayer << Component\n    PhysicalLayer.name = \"Physical Layer\"\n    PhysicalLayer.description = \"Layer where physical components integrate these functions.\"\n    PowertrainSystem.contains = PhysicalLayer\n\n    # PowerUnit\n    PowerUnit << Component",
    "# SysML v2 Model\n\n    # Classes\n    class PowerTransmissionSystem {\n        attributes:\n            power : float\n            torque : float\n\n        operations:\n            generatePower()\n            generateTorque()\n    }\n\n    class TorqueGenerator {\n        attributes:\n            power : float\n            torque : float\n\n        operations:\n            generateTorque()\n    }\n\n    class Engine {\n        attributes:\n            torque : float\n\n        operations:\n            generateTorque()\n    }\n\n    class Powertrain {\n        attributes:\n            engine : Engine\n\n        operations:\n            generatePower()\n            generateTorque()\n    }\n\n    # Associations\n    PowerTransmissionSystem -- TorqueGenerator : contains\n    TorqueGenerator -- Engine : contains\n    Powertrain -- Engine : contains\n\n    # Collaborations\n    PowerTransmissionSystem --* Powertrain : uses\n\n    # Use Cases\n    Use Case: System Operation\n    Actor: Driver\n    Description: The driver starts the vehicle and the system starts to operate.",
    "# SysML v2 Model\n\n    # Vehicle Feature Annotation System\n    VehicleFeatureAnnotationSystem = System()\n\n    # Interior Assembly\n    InteriorAssembly = VehicleFeatureAnnotationSystem.addAssembly()\n    InteriorAssembly.name = \"Interior Assembly\"\n\n    # Seat Belts\n    SeatBelts = InteriorAssembly.addComponent()\n    SeatBelts.name = \"Seat Belts\"\n    SeatBelts.addFeature(\"Safety Function\", \"Seat belts are designed to prevent occupants from moving during a crash, thus reducing injuries\")\n\n    # Front Seats\n    FrontSeats = InteriorAssembly.addComponent()\n    FrontSeats.name = \"Front Seats\"\n    FrontSeats.addFeature(\"Safety Function\", \"Provides additional protection for the driver and passengers\")\n\n    # Driver Airbag\n    DriverAirbag = InteriorAssembly.addComponent()\n    DriverAirbag.name = \"Driver Airbag\"\n    DriverAirbag.addFeature(\"Safety Function\", \"Deploys in",
    "#include <iostream>\n    #include <vector>\n    #include <cmath>\n\n    using namespace std;\n\n    class Vehicle {\n    private:\n        double initialVelocity;\n        double initialPosition;\n        double acceleration;\n        double timeStep;\n\n    public:\n        Vehicle(double initialVelocity, double initialPosition, double acceleration, double timeStep) {\n            this->initialVelocity = initialVelocity;\n            this->initialPosition = initialPosition;\n            this->acceleration = acceleration;\n            this->timeStep = timeStep;\n        }\n\n        void simulate() {\n            double velocity = initialVelocity;\n            double position = initialPosition;\n\n            for (double t = 0; t <= timeStep; t += timeStep) {\n                velocity = velocity + acceleration * timeStep;\n                position = position + velocity * timeStep;\n            }\n\n            cout << \"Vehicle's velocity after \" << timeStep << \" seconds: \" << velocity << endl;\n            cout << \"Vehicle's position after \" <<",
    "# SysML v2 Model\n    \n    # Package Definition\n    Package Car {\n        # Class Definition\n        Class SafetyCompliance {\n            # Property Definition\n            Property interior_seatbelts : integer [2] {\n                # Description\n                The number of mandatory seat belts in the interior of the car.\n            }\n            Property driver_airbag : boolean {\n                # Description\n                Whether the driver's airbag is a mandatory safety feature.\n            }\n            Property bumper : boolean {\n                # Description\n                Whether the bumper is a mandatory safety device.\n            }\n            Property keyless_entry : boolean {\n                # Description\n                Whether the keyless entry system is a mandatory safety feature.\n            }\n            Property wheel_assemblies : integer [2] {\n                # Description\n                The number of wheels in the car.\n            }\n            Property ABS : boolean {\n                # Description\n                Whether the anti-lock braking system (ABS) is an optional safety feature.\n            }\n        }\n        Class SafetyFeatures {\n            # Description",
    "# SysML v2 Model\n\n    # Vehicle Safety Compliance System\n    VehicleSafetyComplianceSystem << System\n    {\n        name = \"Vehicle Safety Compliance System\"\n    }\n\n    # Vehicle Components\n    VehicleComponents << Component\n    {\n        name = \"Vehicle Components\"\n    }\n\n    VehicleSafetyComplianceSystem includes VehicleComponents\n\n    # Seat Belts\n    SeatBelts << Component\n    {\n        name = \"Seat Belts\"\n        isMandatory = true\n    }\n\n    VehicleComponents includes SeatBelts\n\n    # Driver's Airbag\n    DriverAirbag << Component\n    {\n        name = \"Driver's Airbag\"\n        isMandatory = false\n    }\n\n    VehicleComponents includes DriverAirbag\n\n    # Bumper\n    Bumper << Component\n    {\n        name = \"Bumper\"\n        isMandatory = true\n    }\n\n    VehicleComponents includes",
    "# SysML v2 Model\n\n    # Description\n    This system is designed for modeling and managing risks and failures. It is capable of identifying and describing various possible situations, the causes leading to their occurrence, and the potential failures that may result. The system should be able to record the probability of each cause and the severity level of each failure. By establishing causal relationships, it analyzes the sequence and impact mechanisms among different situations. In addition, the system should support comprehensive modeling of different risk scenarios, enabling users to evaluate and manage potential risks and failures in an all-round manner. This provides a basis for risk control and decision-making.\n\n    # Classes\n    Class: System\n    Class: Risk\n    Class: Cause\n    Class: Failure\n    Class: Probability\n    Class: Severity\n\n    # Associations\n    System is associated with Risk\n    Risk is associated with Cause\n    Risk is associated with Failure\n    Failure is associated with Probability\n    Failure is associated with Severity\n\n    # Attributes\n    System: Name, Description",
    "# SysML v2 Model\n\n    # Description\n    This system is designed for systematic risk metadata modeling and management across various scenarios, causes, and failures. Users can identify and describe different scenarios that may occur within the system. For each scenario, the specific causes and their probabilities of occurrence can be detailed, and possible failure types along with their severity levels can be associated. Furthermore, the system supports the description and tracking of causal relationships between scenarios, facilitating the understanding and analysis of risk propagation chains. On this basis, users can also combine a set of interrelated scenarios, causes, and failures to form complete risk scenarios, supporting risk analysis and decision-making. The system metadata is compatible with standard modeling languages, making it easy to integrate into larger systems engineering environments and enhancing the systematic capabilities of risk identification, analysis, and management.\n\n    # Model Elements\n\n    # Scenario\n    Scenario is a fundamental element of the system. It describes a potential event or a set of events that could occur within the system. It includes a description of the scenario, its causes, and the possible failure types.\n\n    # Cause\n    Cause is",
    "# SysML v2 Model\n\n    # Named View: System\n    # Description: This system is designed to identify and analyze potential risks and failure scenarios that may occur in the equipment.\n    # Purpose: To design a system that can monitor the battery level and detect potential risks.\n\n    # Named View: Battery Monitoring System\n    # Description: This system is designed to monitor the battery level of the equipment.\n    # Purpose: To ensure the reliability of the equipment by detecting potential risks.\n\n    # Named View: Battery Aging Risk\n    # Description: This risk is associated with the aging of the battery.\n    # Purpose: To identify potential situations where the battery level may decrease due to aging.\n\n    # Named View: Low Battery Level Risk\n    # Description: This risk is associated with the low battery level.\n    # Purpose: To identify potential situations where the battery level is below the set minimum threshold.\n\n    # Named View: Device Shutdown Risk\n    # Description: This risk is associated with the automatic shutdown of the device when",
    "# SysML v2 Model\n\n    # System Description\n    System: SystemName\n    Description: \"The system must possess a clear capability for structural decomposition, namely, the ability to explicitly present a top-down hierarchical structure, dividing the system into multiple subsystems and components, and ensuring that the functions and capabilities of each level are fully covered. The interfaces between system components should be well defined, so that each component can be independently understood and analyzed while also collaborating effectively within the overall system. Furthermore, system engineers and parties involved in Independent Verification and Validation (IV&V) must be able to use this structural view to comprehend and verify the system’s integrity and modular design, thereby ensuring that the system's various functional and performance requirements are met.\"\n\n    # System Components\n    Component: Component1\n    Description: \"This component is responsible for handling the system's top-level functionalities and interfaces with other components.\"\n\n    Component: Component2\n    Description: \"This component is responsible for handling the system's lower-level functionalities and interfaces with other components.\"\n\n    # Interfaces\n    Interface: Interface",
    "# SysML v2 Model\n\n    # Root Component\n    Component \"Automotive System\" {\n        # Subsystems\n        Subsystem \"Chassis\" {\n            # Components\n            Component \"Seat Belt\" {\n                # Safety Attribute\n                SafetyAttribute \"Mandatory\"\n            }\n            Component \"Bumper\" {\n                # Safety Attribute\n                SafetyAttribute \"Mandatory\"\n            }\n        }\n        Subsystem \"Interior\" {\n            # Components\n            Component \"Airbag\" {\n                # Safety Attribute\n                SafetyAttribute \"Optional\"\n            }\n            Component \"Anti-Lock Braking System\" {\n                # Safety Attribute\n                SafetyAttribute \"Mandatory\"\n            }\n        }\n    }\n\n    # Hierarchical Structure\n    Automotive System\n    |- Chassis\n    |  |- Seat Belt (Mandatory)\n    |  |- Bumper (Mandatory)\n    |- Interior\n    |  |- Airbag (Optional)\n    |",
    "# SysML v2 Model\n\n    # Define the core component \"汽车\" (Car)\n    Component Car {\n        # Define the attribute \"扭矩\" (Torque)\n        Attribute Torque : PhysicalQuantity;\n    }\n\n    # Define the physical quantity \"扭矩\" (Torque)\n    PhysicalQuantity Torque {\n        # Define the unit of measure \"牛顿·米\" (N·m)\n        UnitOfMeasure Nm;\n    }\n\n    # Define the unit of measure \"牛顿·米\" (N·m)\n    UnitOfMeasure Nm {\n        # Define the conversion factor to SI unit \"牛顿·米\" (N·m)\n        ConversionFactorToSI Nm;\n    }\n\n    # Define the conversion factor to SI unit \"牛顿·米\" (N·m)\n    ConversionFactorToSI Nm {\n        # Define the conversion factor to SI unit \"�����",
    "# SysML v2 Model\n\n    # Named Views\n    View: Automobile\n    View: Car\n\n    # Classes\n    Class: Automobile\n    Class: Car\n\n    # Properties\n    Automobile.alias: Car\n    Automobile.standardPhysicalQuantitySystem: ISQ\n    Automobile.explanatoryDocument: Document\n\n    # Associations\n    Automobile -[documents]-> Document\n\n    # Documents\n    Document: Document\n\n    # Classes\n    Class: Document\n\n    # Properties\n    Document.content: Text\n    Document.automobile: Automobile\n\n    # Connections\n    Document.automobile -> Automobile\n\n    # End Named Views\n    EndView;\n\n    # End Classes\n    EndClass;\n\n    # End Properties\n    EndProperty;\n\n    # End Associations\n    EndAssociation;\n\n    # End Documents\n    EndClass;\n\n    # End Classes\n    EndClass;\n\n    # End Properties\n    EndProperty;\n\n    # End Associations\n    EndAssociation;",
    "#include <iostream>\n    #include <string>\n    #include <map>\n\n    using namespace std;\n\n    class Car {\n    public:\n        string make;\n        string model;\n        int year;\n        double torque;\n\n        Car(string make, string model, int year, double torque) {\n            this->make = make;\n            this->model = model;\n            this->year = year;\n            this->torque = torque;\n        }\n\n        void setTorque(double torque) {\n            this->torque = torque;\n        }\n\n        double getTorque() {\n            return this->torque;\n        }\n    };\n\n    class TorqueValue {\n    public:\n        double value;\n\n        TorqueValue(double value) {\n            this->value = value;\n        }\n\n        void setValue(double value) {\n            this->value = value;\n        }\n\n        double getValue() {\n            return this->value;\n        }\n    };\n\n    class SysMLv",
    "# SysML v2 Textual Model\n\n    ## Vehicle Class\n    Class Vehicle {\n        property name : String;\n        property size : String;\n        property engine : Engine;\n    }\n\n    ## Engine Class\n    Class Engine {\n        property cylinders : Integer;\n    }\n\n    ## Basic Vehicle Class\n    Class BasicVehicle extends Vehicle {\n        operation configureEngine() {\n            if (self.size == \"small\") {\n                self.engine = new Engine(4);\n            } else if (self.size == \"large\") {\n                self.engine = new Engine(6);\n            }\n        }\n    }\n\n    ## Small Vehicle Class\n    Class SmallVehicle extends Vehicle {\n        override operation configureEngine() {\n            self.engine = new Engine(4);\n        }\n    }\n\n    ## Large Vehicle Class\n    Class LargeVehicle extends Vehicle {\n        override operation configureEngine() {\n            self.engine = new Engine(6);\n        }\n    }\n\n    ##",
    "#include \"FuelTank.h\"\n    #include \"FuelInterface.h\"\n    #include \"Engine.h\"\n\n    class FuelSystem {\n    public:\n        FuelTank fuelTank;\n        FuelInterface fuelInterface;\n        Engine engine;\n\n        void manageFuelFlow() {\n            fuelTank.getFuel();\n            fuelInterface.deliverFuel(fuelTank.fuel);\n            engine.receiveFuel(fuelInterface.fuel);\n            engine.monitorTemperature();\n            fuelInterface.returnFuel(engine.usedFuel);\n        }\n    };\n\n    class FuelTank {\n    public:\n        float fuel;\n\n        void getFuel() {\n            // get fuel from storage\n            fuel = 100.0; // placeholder value\n        }\n    };\n\n    class FuelInterface {\n    public:\n        float fuel;\n\n        void deliverFuel(float fuel) {\n            // deliver fuel to engine\n            this->fuel = fuel;\n        }",
    "# SysML v2 Model\n\n    # Vehicle Structural Architecture\n    Vehicle {\n        attribute mass : Real;\n        component FrontAxle {\n            attribute steeringAngle : Optional<Real>;\n            component Wheel {\n            }\n            component Wheel {\n            }\n        }\n        component RearAxle {\n            component Wheel {\n            }\n            component Wheel {\n            }\n        }\n    }\n\n    # Vehicle Configuration\n    VehicleConfiguration {\n        Vehicle : Vehicle;\n        FrontAxle : FrontAxle;\n        RearAxle : RearAxle;\n    }\n\n    # Wheel Configuration\n    WheelConfiguration {\n        Wheel : Wheel;\n    }\n\n    # Vehicle Component Configuration\n    VehicleComponentConfiguration {\n        Vehicle : Vehicle;\n        Component : Component;\n    }\n\n    # Vehicle Configuration\n    VehicleConfiguration {\n        Vehicle : Vehicle;\n        FrontAxle : FrontAxle;"
]