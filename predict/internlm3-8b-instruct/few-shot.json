[
    "package 'VehicleManagement' {\n\tattribute def VehicleMass;\n\tattribute def VehicleStatus;\n\tattribute def Engine;\n\tattribute def Driver;\n\tport def VehicleStatusPort {\n\t\tout vehicleStatus: VehicleStatus;\n\t}\n\tport def EnginePort {\n\t\tout engine: Engine;\n\t}\n\tport def DriverPort {\n\t\tout driver: Driver;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport vehicleStatusPort: VehicleStatusPort;\n\t\t\tport enginePort: EnginePort;\n\t\t\tport driverPort: DriverPort;\n\t\t\tperform manageVehicle.receiveVehicleStatus {\n\t\t\t\tin vehicleStatus = vehicleStatusPort.vehicleStatus;\n\t\t\t}\n\t\t\tperform manageEngine.receiveEngine {\n\t\t\t\tin engine = enginePort.engine;\n\t\t\t}\n\t\t\tperform manageDriver.receiveDriver {\n\t\t\t\tin driver = driverPort.driver;\n\t\t\t}\n\t\t}\n\t\tinterface vehicleToSystem connect vehicle.vehicleStatusPort to system.vehicleStatusPort {\n\t\t\tref flow references manageVehicle.vehicleStatusFlow\n\t\t\t\tfrom source.",
    "package 'Vehicles' {\n\tclass Vehicle {\n\t\tgeneralization Vehicle {\n\t\t\tclass ManuallyOperatedVehicle {\n\t\t\t\tgeneralization ManuallyOperatedVehicle {\n\t\t\t\t\tclass ManuallyOperatedPoweredVehicle {\n\t\t\t\t\t\tgeneralization ManuallyOperatedPoweredVehicle {\n\t\t\t\t\t\t\tclass PoweredVehicle {\n\t\t\t\t\t\t\t\tclass Engine {\n\t\t\t\t\t\t\t\t\tclass Personnel {\n\t\t\t\t\t\t\t\t\t\tclass Driver {\n\t\t\t\t\t\t\t\t\t\t\tclass Personnel {\n\t\t\t\t\t\t\t\t\t\t\t\tclass Engine {\n\t\t\t\t\t\t\t\t\t\t\t\t\tclass Vehicle {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclass Vehicle {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclass Vehicle {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclass Vehicle {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t",
    "package 'VehicleStructure' {\n\tclass Vehicle {\n\t\tproperty componentCount: Integer;\n\t\tproperty engine: VehicleComponent;\n\t\tproperty transmission: VehicleComponent;\n\t\tproperty wheels: VehicleComponent[4];\n\t}\n\tclass VehicleComponent {\n\t\tproperty name: String;\n\t\tproperty type: String;\n\t}\n\tclass Engine extends VehicleComponent {\n\t\tproperty type: \"Engine\";\n\t}\n\tclass Transmission extends VehicleComponent {\n\t\tproperty type: \"Transmission\";\n\t}\n\tclass Wheel extends VehicleComponent {\n\t\tproperty type: \"Wheel\";\n\t}\n\tclass VehicleConfiguration {\n\t\tproperty vehicle: Vehicle;\n\t\tproperty components: VehicleComponent[];\n\t}\n\tclass VehicleComponentType {\n\t\tproperty name: String;\n\t\tproperty type: String;\n\t}\n\tclass VehicleComponentSubtype extends VehicleComponentType {\n\t\tproperty type: String;\n\t}\n\tclass VehicleComponentSubtypeInstance {\n\t\tproperty component: VehicleComponent;\n\t\tproperty componentType: VehicleComponentType;\n\t\tproperty quantity: Integer;\n\t}\n\tclass VehicleComponentSubtypeInstances {\n\t\tproperty instances",
    "package 'VehicleSystem' {\n\tclass Vehicle {\n\t\tparameter type: VehicleType;\n\t\tparameter engine: Engine;\n\t}\n\tclass Engine {\n\t\tparameter cylinders: int;\n\t}\n\tclass SmallVehicle extends Vehicle {\n\t\tparameter engine: SmallEngine;\n\t}\n\tclass LargeVehicle extends Vehicle {\n\t\tparameter engine: LargeEngine;\n\t}\n\tclass SmallEngine extends Engine {\n\t\tparameter cylinders: 4;\n\t}\n\tclass LargeEngine extends Engine {\n\t\tparameter cylinders: 6;\n\t}\n\tpart context {\n\t\tpart vehicleFactory {\n\t\t\tport vehicleType: VehicleType;\n\t\t\tport engineType: EngineType;\n\t\t\tperform createVehicle {\n\t\t\t\tin vehicleType = vehicleType;\n\t\t\t\tin engineType = engineType;\n\t\t\t\tout vehicle: Vehicle;\n\t\t\t}\n\t\t}\n\t\tpart vehicle {\n\t\t\tport type: VehicleType;\n\t\t\tport engine: Engine;\n\t\t\tperform operateVehicle {\n\t\t\t\tin type = type;\n\t\t\t\tin engine = engine;\n\t\t",
    "package 'TrafficSignalSystem' {\n\tattribute def currentColorState;\n\tattribute def greenState;\n\tport def currentColorStatePort {\n\t\tout currentColorState: currentColorState;\n\t}\n\tport def greenStatePort {\n\t\tout greenState: greenState;\n\t}\n\tpart context {\n\t\tpart trafficSignal {\n\t\t\tport currentColorStatePort: currentColorStatePort;\n\t\t\tperform indicateColorState {\n\t\t\t\tout currentColorState = currentColorStatePort.currentColorState;\n\t\t\t}\n\t\t}\n\t\tpart greenSignal {\n\t\t\tport greenStatePort: greenStatePort;\n\t\t\tperform indicateGreenState {\n\t\t\t\tout greenState = greenStatePort.greenState;\n\t\t\t}\n\t\t}\n\t\tinterface trafficSignalToGreenSignal connect trafficSignal.currentColorStatePort to greenSignal.currentColorStatePort {\n\t\t\tref flow references indicateColorStateFlow\n\t\t\t\tfrom source.currentColorState to target.currentColorState;\n\t\t\t}\n\t}\n\taction indicateColorState {\n\t\taction sendCurrentColorState { out currentColorState: currentColorState; }\n\t\tsuccession flow currentColorState",
    "package 'InformationClassificationManagement' {\n\tattribute def InformationLevel;\n\tattribute def GradeLevel;\n\tattribute def ClassificationCode;\n\tattribute def Color;\n\tport def InformationLevelPort {\n\t\tout informationLevel: InformationLevel;\n\t}\n\tport def GradeLevelPort {\n\t\tout gradeLevel: GradeLevel;\n\t}\n\tport def ClassificationCodePort {\n\t\tout classificationCode: ClassificationCode;\n\t}\n\tport def ColorPort {\n\t\tout color: Color;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport informationLevelPort: InformationLevelPort;\n\t\t\tport gradeLevelPort: GradeLevelPort;\n\t\t\tport classificationCodePort: ClassificationCodePort;\n\t\t\tport colorPort: ColorPort;\n\t\t\tperform classifyInformation.sendInformationLevel {\n\t\t\t\tout informationLevel = informationLevelPort.informationLevel;\n\t\t\t}\n\t\t\tperform classifyInformation.sendGradeLevel {\n\t",
    "package 'VehicleEngine' {\n\tattribute def VehicleType;\n\tattribute def CylinderCount;\n\tport def EnginePort {\n\t\tout engine: Engine;\n\t}\n\tport def CylinderPort {\n\t\tout cylinder: Cylinder;\n\t}\n\tpart context {\n\t\tpart smallVehicle {\n\t\t\tport enginePort: EnginePort;\n\t\t\tperform powerOutput.receiveEngine {\n\t\t\t\tin engine = enginePort.engine;\n\t\t\t}\n\t\t\tport cylinderPort: CylinderPort;\n\t\t\tperform powerOutput.powerOutput {\n\t\t\t\tin engine = enginePort.engine;\n\t\t\t\tout power: Power;\n\t\t\t}\n\t\t}\n\t\tpart largeVehicle {\n\t\t\tport enginePort: EnginePort;\n\t\t\tperform powerOutput.receiveEngine {\n\t\t\t\tin engine = enginePort.engine;\n\t\t\t}\n\t\t\tport cylinderPort: CylinderPort;\n\t\t\tperform powerOutput.powerOutput {\n\t\t\t\tin engine = enginePort.engine;\n\t\t\t\tout power: Power;\n\t\t\t}\n\t\t}\n\t\tpart engine {\n\t\t\tport cylinder",
    "package 'VehicleModeling' {\n\tattribute def VehicleQualityAttributes;\n\tattribute def DriverInfo;\n\tattribute def FuelType;\n\tattribute def FuelTank;\n\tattribute def FuelInfo;\n\tattribute def PersonnelInfo;\n\tport def VehicleInfoPort {\n\t\tout vehicleInfo: VehicleQualityAttributes;\n\t\tout driverInfo: DriverInfo;\n\t\tout fuelInfo: FuelInfo;\n\t\tout tankInfo: FuelTank;\n\t}\n\tport def FuelInfoPort {\n\t\tout fuel: FuelType;\n\t}\n\tport def PersonnelInfoPort {\n\t\tout personnel: PersonnelInfo;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport vehicleInfoPort: VehicleInfoPort;\n\t\t\tperform defineVehicle.receiveVehicleInfo {\n\t\t\t\tin vehicleInfo = vehicleInfoPort.vehicleInfo;\n\t\t\t\tin driverInfo = vehicleInfoPort.driverInfo;\n\t\t\t\tin tankInfo = vehicleInfoPort.tankInfo;\n\t\t\t}\n\t\t\tport tankInfo: FuelInfoPort;\n\t\t\tperform manageFuel.receiveFuelInfo {\n\t\t\t\tin",
    "package 'WheelAssembly' {\n\tattribute def WheelBearingUnit;\n\tattribute def Tire;\n\tattribute def Hub;\n\tattribute def Rim;\n\tattribute def BoltMountingHole;\n\tattribute def ThreadedHole;\n\tattribute def BoltConnection;\n\tport def WheelBearingUnitPort {\n\t\tout wheelBearingUnit: WheelBearingUnit;\n\t}\n\tport def TirePort {\n\t\tout tire: Tire;\n\t}\n\tport def HubPort {\n\t\tout hub: Hub;\n\t}\n\tport def RimPort {\n\t\tout rim: Rim;\n\t}\n\tport def BoltMountingHolePort {\n\t\tout boltMountingHole: BoltMountingHole;\n\t}\n\tport def ThreadedHolePort {\n\t\tout threadedHole: ThreadedHole;\n\t}\n\tport def BoltConnectionPort {\n\t\tout boltConnection: BoltConnection;\n\t}\n\tpart context {\n\t\tpart wheelBearingUnit {\n\t\t\tport wheelBearingUnitPort: WheelBearingUnitPort;\n",
    "package 'FuelFlowManagement' {\n\tattribute def FuelSupply;\n\tattribute def FuelReturn;\n\tattribute def TemperatureInfo;\n\tport def FuelSupplyPort {\n\t\tout fuelSupply: FuelSupply;\n\t}\n\tport def FuelReturnPort {\n\t\tin fuelReturn: FuelReturn;\n\t}\n\tport def TemperatureInfoPort {\n\t\tout temperatureInfo: TemperatureInfo;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport FuelSupplyPort: FuelSupplyPort;\n\t\t\tport FuelReturnPort: FuelReturnPort;\n\t\t\tport TemperatureInfoPort: TemperatureInfoPort;\n\t\t\tperform monitorFuelFlow.receiveFuelSupply {\n\t\t\t\tin fuelSupply = FuelSupplyPort.fuelSupply;\n\t\t\t}\n\t\t\tperform monitorFuelFlow.receiveFuelReturn {\n\t\t\t\tin fuelReturn = FuelReturnPort.fuelReturn;\n\t\t\t}\n\t\t\tperform monitorFuelFlow.receiveTemperatureInfo {\n\t\t\t\tin temperatureInfo = TemperatureInfoPort.temperatureInfo;\n\t\t\t}\n\t\t\tinterface userToFuelSystem",
    "package 'VehicleConfiguration' {\n\tattribute def VehicleMass;\n\tattribute def FrontAxle;\n\tattribute def RearAxle;\n\tattribute def Tires;\n\tport def VehicleMassPort {\n\t\tout vehicleMass: VehicleMass;\n\t}\n\tport def FrontAxlePort {\n\t\tout frontAxle: FrontAxle;\n\t}\n\tport def RearAxlePort {\n\t\tout rearAxle: RearAxle;\n\t}\n\tport def TiresPort {\n\t\tout tires: Tires;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport vehicleMassPort: VehicleMassPort;\n\t\t\tport frontAxlePort: FrontAxlePort;\n\t\t\tport rearAxlePort: RearAxlePort;\n\t",
    "package 'VehicleTrailerCoupling' {\n\tattribute def Vehicle;\n\tattribute def Trailer;\n\tport def VehiclePort {\n\t\tout vehicle: Vehicle;\n\t}\n\tport def TrailerPort {\n\t\tout trailer: Trailer;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport vehiclePort: VehiclePort;\n\t\t\tperform connectToTrailer.sendVehicle {\n\t\t\t\tout vehicle = vehiclePort.vehicle;\n\t\t\t}\n\t\t\tport hitch: Hitch;\n\t\t}\n\t\tpart trailer {\n\t\t\tport trailerPort: TrailerPort;\n\t\t\tperform connectToVehicle.sendTrailer {\n\t\t\t\tout trailer = trailerPort.trailer;\n\t\t\t}\n\t\t\tport hitch: ~Hitch;\n\t\t}\n\t\tpart hitch {\n\t\t\tport vehiclePort: ~VehiclePort;\n",
    "package 'VehiclePowerTransmission' {\n\tattribute def FuelCommand;\n\tattribute def Power;\n\tattribute def ClutchCommand;\n\tattribute def Clutch;\n\tport def FuelCommandPort {\n\t\tout fuelCommand: FuelCommand;\n\t}\n\tport def PowerPort {\n\t\tout power: Power;\n\t}\n\tport def ClutchPort {\n\t\tout clutchCommand: ClutchCommand;\n\t}\n\tport def ClutchInterface {\n\t\tout clutch: Clutch;\n\t}\n\tport def DriveShaft",
    "package 'MultiArchitectureSystem' {\n\tdecomposition b11 {\n\t\tcomponent c1 {\n\t\t\tport pb: ~pe;\n\t\t\tport pd: ~pb;\n\t\t\tport pc: ~pd;\n\t\t}\n\t\tcomponent c2 {\n\t\t\tport pc: ~pc;\n\t\t\tport pd: ~pd;\n\t\t}\n\t\tinterface pe {\n\t\t\tref flow references b11.c1.pb to b11",
    "package 'Powertrain' {\n\tattribute def FuelCommand;\n\tattribute def EngineStartStopCmd;\n\tattribute def Torque;\n\tattribute def DrivingForce;\n\tattribute def DriveShaft;\n\tattribute def LeftWheel;\n\tattribute def RightWheel;\n\t\t\n\tport def FuelCmdPort {\n\t\tout fuelCmd: FuelCommand;\n\t}\n\tport def EngineStartStopPort {\n\t\tout engineStartStopCmd: EngineStartStopCmd;\n\t}\n\tport def TorquePort {\n\t\tout torque: Torque;\n\t}\n\tport def DriveShaftPort {\n\t\tout driveShaft: DriveShaft;\n\t}\n\tport def WheelPort {\n\t\tout leftWheel: LeftWheel;\n\t\tout rightWheel: RightWheel;\n\t}\n\t\n\tpart context {\n\t\tpart user {\n\t\t\tport FuelCmdPort: FuelCmdPort;\n\t\t\tport EngineStartStopPort: EngineStartStopPort;\n\t\t\tperform controlPowertrain.sendFuelCmd {\n\t\t\t",
    "package 'PowertrainControl' {\n\tattribute def FuelControlCmd;\n\tattribute def Torque;\n\tattribute def StallSignal;\n\tattribute def DriveWheelTorque;\n\tport def FuelControlCmdPort {\n\t\tout fuelControlCmd: FuelControlCmd;\n\t}\n\tport def TorquePort {\n\t\tout torque: Torque;\n\t}\n\tport def StallSignalPort {\n\t\tin stallSignal: StallSignal;\n\t}\n\tport def DriveWheelTorquePort {\n\t\tout driveWheelTorque: DriveWheelTorque;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport FuelControlCmdPort: FuelControlCmdPort;\n\t\t\tperform startEngine.sendFuelControlCmd {\n\t\t\t\tout fuelControlCmd = fuelControlCmdPort.fuelControlCmd;\n\t\t\t}\n\t\t\tport TorquePort: TorquePort;\n\t\t\tperform generateTorque.receiveTorque {\n\t\t\t\tin torque = torquePort.torque;\n\t\t\t}\n\t\t\tport StallSignalPort: StallSignalPort;\n\t\t\tperform detectStall.receive",
    "package 'VehiclePowertrainManagement' {\n\tattribute def FuelInputCmd;\n\tattribute def EngineOutputTorque;\n\tattribute def TransmissionOutputTorque;\n\tattribute def WheelTorque;\n\tattribute def EngineStartCmd;\n\tattribute def EngineShutdownCmd;\n\tport def FuelInputCmdPort {\n\t\tout fuelInputCmd: FuelInputCmd;\n\t}\n\tport def EngineOutputTorquePort {\n\t\tout engineOutputTorque: EngineOutputTorque;\n\t}\n\tport def TransmissionOutputTorquePort {\n\t\tout transmissionOutputTorque: TransmissionOutputTorque;\n\t}\n\tport def WheelTorquePort {\n\t\tout wheelTorque: WheelTorque;\n\t}\n\tpart context {\n\t\tpart driver {\n\t\t\tport fuelInputCmdPort: FuelInputCmdPort;\n\t\t\tperform managePowertrain.sendFuelInputCmd {\n\t\t\t\tout fuelInputCmd = fuelInputCmdPort.fuelInputCmd;\n\t\t\t}\n\t\t\tinterface driverToPowertrain connect driver.fuelInputCmdPort to powertrain.fuelInputCmdPort {\n\t\t\t\tref flow references managePowertrain.fuelInputFlow\n\t\t\t",
    "package 'VehicleTrailerConnection' {\n\tattribute def VehicleFrame;\n\tattribute def TrailerFrame;\n\tattribute def HitchBall;\n\tattribute def TrailerCoupler;\n\tport def VehicleFramePort {\n\t\tout vehicleFrame: VehicleFrame;\n\t}\n\tport def TrailerFramePort {\n\t\tout trailerFrame: TrailerFrame;\n\t}\n\tport def HitchBallPort {\n\t\tout hitchBall: HitchBall;\n\t}\n\tport def TrailerCouplerPort {\n\t\tout trailerCoupler: TrailerCoupler;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport vehicleFramePort: VehicleFramePort;\n\t\t\tport hitchBallPort: HitchBallPort;\n\t\t\tperform connectDisconnect.connectVehicle;\n\t\t\tperform connectDisconnect.disconnectVehicle;\n\t\t}\n\t\tpart trailer {\n\t\t\tport trailerFramePort: TrailerFramePort;\n\t\t\tport trailerCouplerPort: TrailerCouplerPort;\n\t\t\tperform connectDisconnect.connectTrailer;\n\t\t\tperform connectDisconnect.disconnectTrailer;\n\t",
    "package 'VehicleTrailerConnection' {\n\tattribute def Vehicle;\n\tattribute def Trailer;\n\tport def VehiclePort {\n\t\tout vehicle: Vehicle;\n\t}\n\tport def TrailerPort {\n\t\tout trailer: Trailer;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport vehiclePort: VehiclePort;\n\t\t\tperform connectDisconnect.sendVehicleCommand {\n\t\t\t\tout vehicle = vehiclePort.vehicle;\n\t\t\t}\n\t\t}\n\t\tpart trailer {\n\t\t\tport trailerPort: TrailerPort;\n\t\t\tperform connectDisconnect.receiveTrailerCommand {\n\t\t\t\tin trailer = trailerPort.trailer;\n\t\t\t}\n\t\t}\n\t\tinterface vehicleToTrailer connect vehicle.vehiclePort to trailer.trailerPort {\n\t\t\tref flow references connectDisconnect.vehicleCommandFlow\n\t\t\t\tfrom source.vehicle to target.trailer;\n\t\t\tref flow references connectDisconnect",
    "package 'VehicleAndTrailerConnection' {\n\tattribute def Vehicle;\n\tattribute def Trailer;\n\tport def VehiclePort {\n\t\tout vehicle: Vehicle;\n\t}\n\tport def TrailerPort {\n\t\tout trailer: Trailer;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport vehiclePort: VehiclePort;\n\t\t\tperform connectTrailer.sendVehicle {\n\t\t\t\tout vehicle = vehiclePort.vehicle;\n\t\t\t}\n\t\t\tport vehicleChassis: Chassis;\n\t\t\tport towBallDevice: TowBallDevice;\n\t\t}\n\t\tpart trailer {\n\t\t\tport trailerPort: TrailerPort;\n\t\t\tperform disconnectTrailer.sendTrailer {\n\t\t\t\tout trailer = trailerPort.trailer;\n\t\t\t}\n\t\t\tport trailerChassis: TrailerChassis;\n\t\t\tport couplerMechanism: CouplerMechanism;\n\t\t}\n\t\tinterface vehicleToTrailer connect vehicle.vehiclePort to trailer.trailerPort {\n\t\t\tref flow references",
    "package 'FuelSystem' {\n\tattribute def FuelSupply;\n\tattribute def FuelReturn;\n\tattribute def TemperatureMonitoring;\n\tport def FuelSupplyPort {\n\t\tout fuelSupply: FuelSupply;\n\t}\n\tport def FuelReturnPort {\n\t\tin fuelReturn: FuelReturn;\n\t}\n\tpart context {\n\t\tpart fuelTank {\n\t\t\tport fuelSupplyPort: FuelSupplyPort;\n\t\t\tperform supplyFuel.sendFuelSupply {\n\t\t\t\tout fuelSupply = fuelSupplyPort.fuelSupply;\n\t\t\t}\n\t\t\tport fuelReturnPort: FuelReturnPort;\n\t\t\tperform returnFuel.receiveFuelReturn {\n\t\t\t\tin fuelReturn = fuelReturnPort.fuelReturn;\n\t\t\t}\n\t\t}\n\t\tpart engine {\n\t\t\tport fuelSupplyPort: ~FuelSupplyPort;\n\t\t\tperform consumeFuel.consumeFuel {\n\t\t\t\tin fuelSupply = fuelSupplyPort.fuelSupply;\n\t\t\t}\n\t\t\tport fuelReturnPort: ~FuelReturnPort;\n\t\t\t",
    "package 'FuelDeliverySystem' {\n\tattribute def storageTank;\n\tattribute def fuelPump;\n\tattribute def vehicleFuelTank;\n\tattribute def fuelLevel;\n\tattribute def fuelQuantity;\n\tport def storageTankPort {\n\t\tout fuel: Fuel;\n\t}\n\tport def fuelPumpPort {\n\t\tin fuel: Fuel;\n\t\tout fuel: Fuel;\n\t}\n\tport def vehicleFuelTankPort {\n\t\tin fuel: Fuel;\n\t\tout fuel: Fuel;\n\t}\n\tpart context {\n\t\tpart storageTank {\n\t\t\tport storageTankPort: ~StorageTankPort;\n\t\t\tperform extractFuel.extractFuel {\n\t\t\t\tout fuel = storageTankPort.fuel;\n\t\t\t}\n\t\t}\n\t\tpart fuelPump {\n\t\t\tport fuelPumpPort: ~FuelPumpPort;\n\t\t\tperform deliverFuel.deliverFuel {\n\t\t\t\tin fuel = fuelPumpPort",
    "package 'AutomobileAssemblyProcess' {\n\tattribute def VehicleAssembly;\n\tattribute def GearboxAssembly;\n\tattribute def EngineAssembly;\n\tport def VehicleAssemblyPort {\n\t\tout vehicleAssembly: VehicleAssembly;\n\t}\n\tport def GearboxAssemblyPort {\n\t\tout gearboxAssembly: GearboxAssembly;\n\t}\n\tport def EngineAssemblyPort {\n\t\tout engineAssembly: EngineAssembly;\n\t}\n\tpart context {\n\t\tpart assemblyLine {\n\t\t\tport vehicleAssemblyPort: VehicleAssemblyPort;\n\t\t\tperform installGearbox.sendVehicleAssembly {\n\t\t\t\tout vehicleAssembly = vehicleAssemblyPort.vehicleAssembly;\n\t\t\t}\n\t\t\tport gearboxAssemblyPort: GearboxAssemblyPort;\n\t\t\tperform installEngine.sendGearboxAssembly {\n\t\t\t\tout gearboxAssembly = gearboxAssemblyPort.gearboxAssembly;\n\t\t\t}\n\t\t\tport engineAssemblyPort: EngineAssemblyPort;\n",
    "package 'VehicleControlSystem' {\n\tattribute def VehicleState;\n\tattribute def BrakeSignal;\n\tattribute def StartSignal;\n\tattribute def VehicleOnSignal;\n\tattribute def ParkingBrakeSignal;\n\tattribute def Temperature;\n\tattribute def SafetyThreshold;\n\tattribute def RestoreSignal;\n\tport def VehicleStatePort {\n\t\tout vehicleState: VehicleState;\n\t}\n\tport def BrakeSignal",
    "package 'VehicleAutomation' {\n\tattribute def Vehicle;\n\tattribute def VehicleController;\n\tport def VehiclePort {\n\t\tin brakePedalPressed: Boolean;\n\t\tin startSignal: Boolean;\n\t\tout vehicleStatus: VehicleStatus;\n\t}\n\tport def VehicleControllerPort {\n\t\tin vehicleStatus: VehicleStatus;\n\t\tout controlSignal: ControlSignal;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport VehiclePort: VehiclePort;\n\t\t\tperform startupProcess {\n\t\t\t\tin brakePedalPressed = VehiclePort.brakePedalPressed;\n\t\t\t\tin startSignal = VehiclePort.startSignal;\n\t\t\t\tout vehicleStatus =",
    "package 'VehicleDynamicsSimulation' {\n\tattribute def VehicleState;\n\tattribute def RoadState;\n\tattribute def SimulationTime;\n\tattribute def VehicleParameters;\n\tattribute def RoadParameters;\n\tattribute def Snapshots;\n\tport def VehicleStatePort {\n\t\tout vehicleState: VehicleState;\n\t}\n\tport def RoadStatePort {\n\t\tout roadState: RoadState;\n\t}\n\tport def SimulationTimePort {\n\t\tout simulationTime: SimulationTime;\n\t}\n\tport def VehicleParametersPort {\n\t\tout vehicleParameters: VehicleParameters;\n\t}\n\tport def RoadParametersPort {\n\t\tin roadParameters: RoadParameters;\n\t}\n\tport def SnapshotsPort {\n\t\tout snapshots: Snapshots;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport VehicleStatePort: VehicleStatePort;\n\t\t\tport RoadStatePort: RoadStatePort;\n\t\t\tport SimulationTimePort: SimulationTimePort;\n\t\t\tport VehicleParametersPort: VehicleParametersPort;\n\t\t\tport RoadParametersPort: RoadParametersPort;\n\t\t\tport Snaps",
    "package 'VehicleConfiguration' {\n\tattribute def SubsystemA;\n\tattribute def SubsystemB;\n\tport def SubsystemAPort {\n\t\tout subSystemA: SubsystemA;\n\t}\n\tport def SubsystemBPort {\n\t\tout subSystemB: SubsystemB;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport SubsystemAPort: SubsystemAPort;\n\t\t\tperform select",
    "package 'VehiclePlatform' {\n\tattribute def Components;\n\tattribute def Subsystems;\n\tattribute def Configurations;\n\tport def ComponentPort {\n\t\tout components: Components;\n\t}\n\tport def SubsystemPort {\n\t\tout subsystems: Subsystems;\n\t}\n\tport def ConfigurationPort {\n\t\tout configurations: Configurations;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport componentPort: ComponentPort;\n\t\t\tperform allocateComponents.sendComponents {\n\t\t\t\tout components = componentPort.components;\n\t\t\t}\n\t\t}\n\t\tinterface userToVehiclePlatform connect",
    "package 'VehicleConfigSystem' {\n\tattribute def PerformanceRequirement;\n\tattribute def EngineType;\n\tattribute def TransmissionType;\n\t\tattribute def CylinderCount;\n\t\tattribute def TransmissionType;\n\t\t\tattribute def Type;\n\t\tattribute def WheelType;\n\t\t\tattribute def RimSize;\n\t\tattribute def VehicleModel;\n\t\t\tattribute def Variant;\n\t\tattribute def CompatibilityConstraints;\n\t\t\tattribute def EngineType;\n\t\t\tattribute def TransmissionType;\n\t\t\tattribute def WheelType;\n\t\t\tattribute def PerformanceRequirement;\n\t\t\tattribute def VehicleModel;\n\t\t\tattribute def Variant;\n\t\t\tattribute def CompatibilityConstraints;\n\t\t\tattribute def EngineType;\n\t\t\tattribute def TransmissionType;\n\t\t\tattribute def WheelType;\n\t\t\tattribute def PerformanceRequirement;\n\t\t\tattribute def VehicleModel;\n\t\t\tattribute def Variant",
    "package 'VehicleManagement' {\n\tattribute def VehicleMass;\n\tattribute def FuelStatus;\n\tattribute def Powertrain;\n\tattribute def Reliability;\n\tport def VehicleMassPort {\n\t\tout vehicleMass: VehicleMass;\n\t}\n\tport def FuelStatusPort {\n\t\tout fuelStatus: FuelStatus;\n\t}\n\tport def PowertrainPort {\n\t\tout powertrain: Powertrain;\n\t}\n\tport def ReliabilityPort {\n\t\tout reliability: Reliability;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport VehicleMassPort: Ve",
    "package 'VehicleMassCompliance' {\n\tattribute def maxPermissibleMass: 2500 kg;\n\tattribute def vehicleMass: kg;\n\tport def vehicleMassMeasuringEquipmentPort {\n\t\tin vehicleMass: vehicleMass;\n\t}\n\tport def complianceCheckPort {\n\t\tin vehicleMass: vehicleMass;\n\t\tout complianceStatus: Boolean;\n\t}\n\tpart context {\n\t\tpart testOperator {\n\t\t\tport vehicleMassMeasuringEquipmentPort: vehicleMassMeasuringEquipmentPort;\n\t\t\tperform measureVehicleMass.receiveVehicleMass {\n\t\t\t\tin vehicleMass = vehicleMassMeasuringEquipmentPort.vehicleMass;\n\t\t\t}\n\t\t\tport complianceCheckPort: complianceCheckPort;\n\t\t\tperform checkCompliance.sendVehicleMass {\n\t\t\t\tin vehicleMass = vehicleMassMeasuringEquipmentPort.vehicleMass;\n\t\t\t}\n\t\t}\n\t\tpart vehicleMassComplianceSystem {\n\t\t\tport vehicleMassMeasuringEquipmentPort: ~vehicleMassMeasuringEquipmentPort;\n",
    "package 'WaterSupplyNetwork' {\n\tattribute def SpigotBank;\n\tattribute def Spigot;\n\tattribute def Faucet;\n\tattribute def FaucetInlet;\n\tport def SpigotBankPort {\n\t\tout hotWater: HotWater;\n\t\tout coldWater: ColdWater;\n\t}\n\tport def SpigotPort {\n\t\tin hotWater: HotWater;\n\t\tin coldWater: ColdWater;\n\t}\n\tport def FaucetPort {\n\t\tin hotWater: HotWater;\n\t\tin coldWater: ColdWater;\n\t}\n\tpart context {\n\t\tpart SpigotBank {\n\t\t\tport SpigotBankPort: SpigotBankPort;\n\t\t\tperform distributeWater.produceHotWater {\n\t\t\t\tout hotWater = SpigotBankPort.hotWater;\n\t\t\t}\n\t\t\tperform distributeWater.produceColdWater {\n\t\t\t\tout coldWater = SpigotBankPort.coldWater;\n\t\t\t}\n\t\t}\n\t\tpart Spigot {\n\t\t\tport SpigotPort: SpigotPort;\n\t\t\tperform distributeWater.receiveHotWater {\n\t\t\t\tin hotWater",
    "package 'VehicleQualityManagement' {\n\tattribute def Vehicle;\n\tattribute def Engine;\n\tattribute def Transmission;\n\tattribute def FrontAxleAssembly;\n\tattribute def RearAxleAssembly;\n\tattribute def QualityData;\n\tattribute def AnalysisRequirements;\n\tattribute def AnalysisTasks;\n\tattribute def AnalysisPlans;\n\tattribute def EvaluationResults;\n\tport def InputQualityData {\n\t\tin qualityData: QualityData;\n\t}\n\tport def OutputEvaluationResults {\n\t\tout evaluationResults: EvaluationResults;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport inputQualityData: InputQualityData;\n\t\t\tperform inputData.inputQualityData {\n\t\t\t\tin qualityData = inputQualityData.qualityData;\n\t\t\t}\n\t\t\tport outputEvaluationResults: OutputEvaluationResults;\n\t\t\tperform outputData.outputEvaluationResults {\n\t\t\t\tout evaluationResults = evaluationResults;\n\t\t\t}\n\t\t}\n\t\tpart vehicle {\n\t\t\tport inputQualityData: ~InputQualityData;\n\t\t\tport outputEvaluationResults",
    "package 'VehiclePowertrainOptimization' {\n\tattribute def EngineType;\n\tattribute def PerformanceIndicators;\n\tattribute def Components;\n\tport def EngineTypePort {\n\t\tout engineType: EngineType;\n\t}\n\tport def PerformanceIndicatorsPort {\n\t\tout performanceIndicators: PerformanceIndicators;\n\t}\n\tport def ComponentsPort {\n\t\tout components: Components;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport engineTypePort: EngineTypePort;\n\t\t\tport performanceIndicatorsPort: PerformanceIndicatorsPort;\n\t\t\tport componentsPort: ComponentsPort;\n\t\t\tperform selectEngineConfiguration.receiveEngineType {\n\t\t\t\tin engineType = engineTypePort.engineType;\n\t\t\t}\n\t\t\tperform selectEngineConfiguration.receivePerformanceIndicators {\n\t\t\t\tin performanceIndicators = performanceIndicatorsPort.",
    "package 'VehicleFuelEconomy' {\n\tattribute def UrbanRangePerGallon;\n\tattribute def HighwayRangePerGallon;\n\tattribute def Load;\n\tattribute def OperatingConditions;\n\tport def UrbanRangePerGallonPort {\n\t\tout urbanRangePerGallon: UrbanRangePerGallon;\n\t}\n\tport def HighwayRangePerGallonPort {\n\t\tout highwayRangePerGallon: HighwayRangePerGallon;\n\t}\n\tport def LoadPort {\n\t\tout load: Load;\n\t}\n\tport def OperatingConditionsPort {\n\t\tout operatingConditions: OperatingConditions;\n\t}\n\tpart context {\n\t\tpart regulatoryRequirements {\n\t\t\tport UrbanRangePerGallonPort: UrbanRangePerGallonPort;\n\t\t\tport HighwayRangePerGallonPort: HighwayRangePerGallonPort;\n\t\t\tport LoadPort: LoadPort;\n\t\t\tport OperatingConditionsPort: OperatingConditions",
    "package 'VehicleDynamicsSimulation' {\n\tattribute def vehicleMass;\n\tattribute def initialPosition;\n\tattribute def initialVelocity;\n\tattribute def powerOutputData;\n\tattribute def timeStep;\n\tport def inputDataPort {\n\t\tin vehicleMass: vehicleMass;\n\t\tin initialPosition: initialPosition;\n\t\tin initialVelocity: initialVelocity;\n\t\tin powerOutputData: powerOutputData;\n\t}\n\tport def outputDataPort {\n\t\tout accelerationSequence: accelerationSequence;\n\t\tout velocityVariationSequence: velocityVariationSequence;\n\t\tout displacementSequence: displacementSequence;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport inputDataPort: inputDataPort;\n\t\t\tperform simulateVehicleMotion.receiveInputData {\n\t\t\t\tin vehicleMass = inputDataPort.vehicleMass;\n\t\t\t\tin initialPosition = inputDataPort.initialPosition;\n\t\t\t\tin initialVelocity = inputDataPort.initialVelocity;\n\t\t\t\tin powerOutputData = inputDataPort.powerOutputData;\n\t\t\t}\n\t\t\tinterface userToSimulation connect user.inputDataPort to simulation.inputDataPort {\n\t\t\t\tref flow",
    "package 'VehicleSystemModel' {\n\tattribute def totalMass: 2500 kg;\n\tattribute def frontAxleAssembly: 150 kg;\n\tattribute def rearAxleAssembly: 250 kg;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport def vehicleMass: 2500 kg;\n\t\t\tpart frontAxleAssembly {\n\t\t\t\tport def frontAxleAssemblyMass: 150 kg;\n\t\t\t\tpart frontWheels: 2;\n\t\t\t\tpart frontAxle {\n\t\t\t\t\tport def frontAxleMass: 150 kg;\n\t\t\t\t\tport def steeringAngle: 0 deg;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart rearAxleAssembly {\n\t\t\t\tport def rearAxleAssemblyMass: 250 kg;\n\t\t\t\tpart rearWheels: 2;\n\t\t\t\tpart rearAxle {\n\t\t\t\t\tport def rearAxleMass: 2",
    "package 'VehicleSafetyAndSecurity' {\n\tattribute def SafetyFeatures;\n\tattribute def SecurityFeatures;\n\tport def SafetyFeaturesPort {\n\t\tout safetyFeatures: SafetyFeatures;\n\t}\n\tport def SecurityFeaturesPort {\n\t\tout securityFeatures: SecurityFeatures;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport SafetyFeaturesPort: SafetyFeaturesPort;\n\t\t\tperform displaySafetyAndSecurityFeatures.sendSafetyFeatures {\n\t\t\t\tout safetyFeatures = SafetyFeaturesPort.safetyFeatures;\n\t\t\t}\n\t\t}\n\t\tinterface userToVehicle connect user.SafetyFeaturesPort to vehicle.SafetyFeaturesPort {\n\t\t\tref flow references displaySafetyAndSecurityFeatures.safetyFeaturesFlow\n\t\t\t\tfrom source.safety",
    "package 'LayeredSystem' {\n\tattribute def x;\n\tattribute def y;\n\tattribute def z;\n\tport def appLayer {\n\t\tout appLayerData: Data;\n\t}\n\tport def serviceLayer {\n\t\tout serviceLayerData: Data;\n\t\tin serviceLayerData: Data;\n\t}\n\tport def dataLayer {\n\t\tout dataLayerData: Data;\n\t\tin dataLayerData: Data;\n\t}\n\tpart context {\n\t\tpart appLayer {\n\t\t\tport appLayerData: appLayer.appLayerData;\n\t\t\tperform useServiceLayer.sendAppData {\n\t\t\t\tout appLayerData = appLayer.appLayerData;\n\t\t\t}\n\t\t\tinterface appLayerToServiceLayer connect appLayer.appLayerData to serviceLayer.serviceLayerData {\n\t\t\t\tref flow references sendAppDataFlow\n\t\t\t\t\tfrom source.appLayerData to target.serviceLayerData;\n\t\t\t}\n\t\t}\n\t\tpart serviceLayer {\n\t\t\tport serviceLayerData: serviceLayer.serviceLayerData;\n\t\t\tperform retrieveData.sendServiceData {\n\t\t\t\tout serviceLayerData = serviceLayer.serviceLayerData",
    "package 'PowertrainTorqueGeneration' {\n\tattribute def TorqueGenerationLogic;\n\tattribute def TorqueOutput;\n\tport def TorqueGenerationLogicPort {\n\t\tout torqueGenerationLogic: TorqueGenerationLogic;\n\t}\n\tport def TorqueOutputPort {\n\t\tout torqueOutput: TorqueOutput;\n\t}\n\tpart context {\n\t\tpart logicLayer {\n\t\t\tport TorqueGenerationLogicPort: TorqueGenerationLogicPort;\n\t\t\tperform torqueGeneration.sendTorqueGenerationLogic {\n\t\t\t\tout torqueGenerationLogic = TorqueGenerationLogicPort.torqueGenerationLogic;\n\t\t\t}\n\t\t}\n\t\tpart physicalLayer {\n\t\t\tport TorqueOutputPort: TorqueOutputPort;\n\t\t\tperform torqueGeneration.generateTorque {\n\t\t\t\tin torqueGenerationLogic = TorqueGenerationLogicPort.torqueGenerationLogic;\n\t\t\t\tout torqueOutput = TorqueOutputPort.torqueOutput;\n\t\t\t}\n\t\t}\n\t\tinterface logicLayerToPhysicalLayer connect logicLayer.TorqueGenerationLogicPort to physicalLayer.TorqueOutputPort {\n\t\t\tref flow references torqueGener",
    "package 'PowerSystem' {\n\tattribute def PowerTransmission;\n\tattribute def TorqueGeneration;\n\tport def PowerTransmissionPort {\n\t\tout power: PowerTransmission;\n\t}\n\tport def TorqueGenerationPort {\n\t\tout torque: TorqueGeneration;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport PowerTransmissionPort: PowerTransmissionPort;\n\t\t\tperform powerTransmission.sendPower {\n\t\t\t\tout power = PowerTransmissionPort.power;\n\t\t\t}\n\t\t\tport TorqueGenerationPort: TorqueGenerationPort;\n\t\t\tperform torqueGeneration.sendTorque {\n\t\t\t\tout torque = TorqueGenerationPort.torque;\n\t\t\t}\n\t\t}\n\t\tinterface userToPowerSystem connect user.PowerTransmissionPort to powerSystem.PowerTransmissionPort {\n\t\t\tref flow references powerFlow\n\t\t\t\tfrom source.power to target.power;\n\t\t\t}\n\t\t\tinterface userToPowerSystem connect user.TorqueGenerationPort to powerSystem.TorqueGenerationPort {\n\t\t\t\tref flow references torqueFlow\n\t\t\t\t\tfrom source.",
    "package 'VehicleSafetyAndAntiTheftFunctionCatalogue' {\n\tattribute def SafetyFeatures;\n\tattribute def AntiTheftFeatures;\n\tattribute def BothSafetyAndAntiTheftFeatures;\n\tattribute def MandatorySafetyFeatures;\n\tport def SafetyFeaturesPort {\n\t\tout safetyFeatures: SafetyFeatures;\n\t}\n\tport def AntiTheftFeaturesPort {\n\t\tout antiTheftFeatures: AntiTheftFeatures;\n\t}\n\tport def BothSafetyAndAntiTheftFeaturesPort {\n\t\tout bothSafetyAndAntiTheftFeatures: BothSafetyAndAntiTheftFeatures;\n\t}\n\tport def MandatorySafetyFeaturesPort {\n\t\tout",
    "package 'FuelSupplyAndReturnManagement' {\n\tattribute def FuelSupplyAndReturnManagement;\n\tattribute def FuelTankAssembly;\n\tattribute def FuelPump;\n\tattribute def FuelReturnLine;\n\tattribute def FuelTemperatureSensor;\n\tport def FuelSupplyAndReturnManagementPort {\n\t\tout fuelSupplyAndReturnManagement: FuelSupplyAndReturnManagement;\n\t}\n\tport def FuelTankAssemblyPort {\n\t\tout fuelTankAssembly: FuelTankAssembly;\n\t}\n\tport def FuelPumpPort {\n\t\tout fuelPump: FuelPump;\n\t}\n\tport def FuelReturnLinePort {\n\t\tout fuelReturnLine: FuelReturnLine;\n\t}\n\tport def FuelTemperatureSensorPort {\n\t\tout fuelTemperatureSensor: FuelTemperatureSensor;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport FuelSupplyAndReturnManagementPort: FuelSupplyAndReturnManagementPort;\n\t\t\tport FuelTankAssemblyPort: FuelTankAssemblyPort;\n\t\t\tport FuelPumpPort: FuelPumpPort;\n",
    "package 'VehicleSafetyAndSecurity' {\n\tattribute def SeatBelts;\n\tattribute def Airbag;\n\tattribute def AntiTheftAlarm;\n\tattribute def Bumper;\n\tattribute def KeylessEntry;\n\tattribute def AntiLockBrakingSystems;\n\tattribute def SafetyAndSecurityComponents;\n\tport def SeatBeltsPort {\n\t\tout seatBelts: SeatBelts;\n\t}\n\tport def AirbagPort {\n\t\tout airbag: Airbag;\n\t}\n\tport def AntiTheftAlarmPort {\n\t\tout antiTheftAlarm: AntiTheftAlarm;\n\t}\n\tport def BumperPort {\n\t\tout bumper: Bumper;\n\t}\n\tport def KeylessEntryPort {\n\t\tout keylessEntry: KeylessEntry;\n\t}\n\tport def AntiLockBrakingSystemsPort {\n\t\tout antiLockBraking",
    "package 'VehicleSafetyAndSecurity' {\n\tattribute def Interior;\n\tattribute def BodyAssembly;\n\tport def InteriorPort {\n\t\tout interior: Interior;\n\t}\n\tport def BodyAssemblyPort {\n\t\tout bodyAssembly: BodyAssembly;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport InteriorPort: InteriorPort;\n\t\t\tperform accessAndProtect.sendUserRequest {\n\t\t\t\tout userRequest: Interior;\n\t\t\t}\n\t\t}\n\t\tinterface userToVehicle connect user.InteriorPort to vehicle.InteriorPort {\n\t\t\tref flow references accessAndProtect.userRequestFlow\n\t\t\t\tfrom source.userRequest to target.userRequest;\n\t\t\t}\n\t\tpart vehicle {\n\t\t\t\tport InteriorPort: ~InteriorPort;\n\t\t\t\tport BodyAssemblyPort: ~BodyAssemblyPort;\n\t\t\t\tperform accessAndProtect.receiveUserRequest {\n\t\t\t\t\tin userRequest: Interior;\n\t\t\t\t\tout response: BodyAssembly;\n\t\t\t\t}\n\t\t\t",
    "package 'InformationSecurityManagement' {\n\tattribute def SecurityClassification;\n\tport def SecurityClassificationPort {\n\t\tout securityClassification: SecurityClassification;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport SecurityClassificationPort: SecurityClassificationPort;\n\t\t\tperform assignSecurityClassification {\n\t\t\t\tout securityClassification = SecurityClassificationPort.securityClassification;\n\t\t\t}\n\t\t}\n\t\tpart system {\n\t\t\tport SecurityClassificationPort: ~SecurityClassificationPort;\n\t\t\tperform recognizeSecurityClassification {\n\t\t\t\tin securityClassification = SecurityClassificationPort.securityClassification;\n\t\t\t}\n\t\t}\n\t\tpart component {\n\t\t\tport SecurityClassificationPort: ~SecurityClassificationPort;\n\t\t\tperform displaySecurityClassification {\n\t\t\t\tin securityClassification = SecurityClassificationPort.securityClassification;\n\t\t\t}\n\t\t}\n\t}\n\taction assignSecurityClassification {\n\t\taction assignSecurityLevel { out securityClassification: SecurityClassification; }\n\t\tsuccession flow assignFlow from assignSecurityLevel.securityClassification to recognizeSecurityClassification.securityClassification;\n\t\taction recognizeSecurityClassification {\n\t\t\taction displaySecurityLevel { out securityClassification: SecurityClassification; }\n\t\t\tsuccession flow displayFlow from display",
    "package 'AutomotiveECU' {\n\tattribute def VehicleControlUnit;\n\tattribute def EngineControlUnit;\n\tattribute def CANBus;\n\tport def BusIF {\n\t\tout busData: CANBus;\n\t\tin busData: CANBus;\n\t}\n\tport def SensorData {\n\t\tout sensorData: SensorData;\n\t\tin sensorData: SensorData;\n\t}\n\tpart context {\n\t\tpart VehicleControlUnit {\n\t\t\tport BusIF: ~BusIF;\n\t\t\tport SensorData: ~SensorData;\n\t\t\tperform monitorAndControlVehicle {\n\t\t\t\tin busData = BusIF.busData;\n\t\t\t\tout sensorData = SensorData.sensorData;\n\t\t\t}\n\t\t}\n\t\tpart EngineControlUnit {\n\t\t\tport BusIF: ~BusIF;\n\t\t\tport SensorData: ~SensorData;\n\t\t\tperform monitorAndControlEngine {\n\t\t\t\tin busData = BusIF.busData;\n\t\t\t\tout sensorData = SensorData.sensorData",
    "package 'BloodGlucoseMeter' {\n\tattribute def BatteryStatus;\n\tattribute def Alert;\n\tport def BatteryStatusPort {\n\t\tout batteryStatus: BatteryStatus;\n\t}\n\tport def AlertPort {\n\t\tout alert: Alert;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport BatteryStatusPort: BatteryStatusPort;\n\t\t\tperform checkBatteryStatus.sendBatteryStatus {\n\t\t\t\tout batteryStatus = BatteryStatusPort.batteryStatus;\n\t\t\t}\n\t\t\tport AlertPort: AlertPort;\n\t\t\tperform alertUser.sendAlert {\n\t\t\t\tout alert = AlertPort.alert;\n\t\t\t}\n\t\t}\n\t\tpart meter {\n\t\t\tport BatteryStatusPort: ~BatteryStatusPort;\n\t\t\tperform checkBatteryStatus.checkBattery {\n\t\t\t\tin batteryStatus = BatteryStatusPort.batteryStatus;\n\t\t\t\tout batteryStatus = BatteryStatusPort.bat",
    "package 'ScientificConstants' {\n\tattribute def MathematicalConstants;\n\tattribute def PhysicalConstants;\n\tattribute def ScenarioConstants;\n\tport def ConstantsAccess;\n\tport def ConstantsStorage;\n\tpart context {\n\t\tpart user {\n\t\t\tport ConstantsAccess: ConstantsAccess;\n\t\t\tperform accessConstants.sendRequest {\n\t\t\t\tout request: Request;\n\t\t\t}\n\t\t}\n\t\tinterface userToSystem connect user.ConstantsAccess to system.ConstantsAccess {\n\t\t\tref flow references accessConstants.requestFlow\n\t\t\t\tfrom source.request to target.request;\n\t\t}\n\t\tpart system {\n\t\t\tport ConstantsAccess: ~ConstantsAccess;\n\t\t\tport ConstantsStorage: ~ConstantsStorage;\n\t\t\tpart constantsRepository {\n\t\t\t\tport ConstantsStorage: ConstantsStorage;\n\t\t\t\tperform accessConstants.storeConstants {\n\t\t\t\t\tin request: Request;\n\t\t\t\t\tout constants: Constants;\n\t\t\t\t}\n\t\t\t\tpart",
    "package 'TireSpecification' {\n\tattribute def ManufacturerName;\n\tattribute def RimDiameter;\n\tattribute def Width;\n\tport def TireData {\n\t\tout manufacturerName: ManufacturerName;\n\t\tout rimDiameter: RimDiameter;\n\t\tout width: Width;\n\t}\n\tpart context {\n\t\tpart tire {\n\t\t\tport tireData: TireData;\n\t\t\tperform instantiateTire.receiveTireData {\n\t\t\t\tin manufacturerName = tireData.manufacturerName;\n\t\t\t\tin rimDiameter = tireData.rimDiameter;\n\t\t\t\tin width = tireData.width;\n\t\t\t}\n\t\t}\n\t\tinterface tireToTireData connect tire.tireData to tireData.TireData {\n\t\t\tref flow references instantiateTire.tireDataFlow\n\t\t\t\tfrom source.tireData to target.tireData;\n\t\t\t}\n\t\t",
    "package 'AutomotiveComponentModel' {\n\tattribute def VehicleMass;\n\tattribute def VehicleLength;\n\tattribute def WheelHubDiameter;\n\tattribute def WheelWidth;\n\tattribute def TireHeight;\n\tattribute def OuterWheelDiameter;\n\tport def Vehicle {\n\t\tin mass: VehicleMass;\n\t\tin length: VehicleLength;\n\t\tout leftFrontWheel: Wheel;\n\t\tout rightFrontWheel: Wheel;\n\t}\n\tport def Wheel {\n\t\tin hubDiameter: WheelHubDiameter;\n\t\tin width: WheelWidth;\n\t\tin tireHeight: TireHeight;\n\t\tout outerDiameter: OuterWheelDiameter;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport Vehicle: Vehicle;\n\t\t\tperform defineVehicle {\n\t\t\t\tin mass = Vehicle.mass;\n\t\t\t\tin length = Vehicle.length;\n\t\t\t\tout leftFrontWheel = Vehicle.leftFrontWheel;\n\t",
    "package 'VehiclePowertrain' {\n\tattribute def EngineType;\n\tattribute def TransmissionType;\n\tport def EngineTypePort {\n\t\tout engineType: EngineType;\n\t}\n\tport def TransmissionTypePort {\n\t\tout transmissionType: TransmissionType;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport EngineTypePort: EngineTypePort;\n\t\t\tport TransmissionTypePort: TransmissionTypePort;\n\t\t\tperform configurePowertrain {\n\t\t\t\tin engineType = EngineTypePort.engineType;\n\t\t\t\tin transmissionType = TransmissionTypePort.transmissionType;\n\t\t\t}\n\t\t}\n\t\tpart engine {\n\t\t\tport EngineTypePort: ~EngineTypePort;\n\t\t\tperform selectEngine {\n\t\t\t\tin engineType = EngineTypePort.engineType;\n\t\t\t}\n\t\t}\n\t\tpart transmission {\n\t\t\tport TransmissionTypePort: ~TransmissionTypePort;\n\t\t\tperform selectTransmission {\n\t\t\t\tin transmissionType = TransmissionTypePort.transmissionType;\n\t\t\t}\n\t\t}\n\t\tpart highPerformanceVehicle {\n\t\t\tport EngineTypePort:",
    "package 'AutomotiveComponentConstraints' {\n\tattribute def totalMass: Real;\n\tattribute def totalLength: Real;\n\tattribute def wheelAssemblyCount: Integer;\n\tattribute def wheelAssembly: WheelAssembly;\n\tport def wheelAssemblyPort {\n\t\tout wheelAssembly: WheelAssembly;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport wheelAssemblyPort: wheelAssemblyPort;\n\t\t\tperform calculateWheelAssemblyConstraints {\n\t\t\t\tin wheelAssembly = wheelAssemblyPort.wheelAssembly;\n\t\t\t}\n\t\t}\n\t\tpart wheelAssembly {\n\t\t",
    "package 'AutomotiveFuelSystem' {\n\tattribute def FuelTankAssembly;\n\tattribute def FuelPump;\n\tattribute def FuelTemperature;\n\tport def FuelTankAssemblyPort {\n\t\tout fuel: Fuel;\n\t\tin fuelReturn: Fuel;\n\t}\n\tport def FuelPumpPort {\n\t\tout fuel: Fuel;\n\t\tin fuelReturn: Fuel;\n\t}\n\tpart context {\n\t\tpart fuelTankAssembly {\n\t\t\tport FuelTankAssemblyPort: FuelTankAssemblyPort;\n\t\t\tperform fuelDelivery.deliverFuel {\n\t\t\t\tout fuel = FuelTankAssemblyPort.fuel;\n\t\t\t\tin fuelReturn = FuelTankAssemblyPort.fuelReturn;\n\t\t\t}\n\t\t}\n\t\tpart fuelPump {\n\t\t\tport FuelPumpPort: FuelPumpPort;\n\t\t\tperform fuelDelivery.pumpFuel {\n\t\t\t\tout fuel = FuelPumpPort.fuel;\n\t\t\t\tin fuelReturn = FuelPumpPort.fuelReturn",
    "package 'PhysicalQuantitySystem' {\n\tattribute def ISQ;\n\tattribute def supportedQuantities;\n\tattribute def supportedUnits;\n\tport def ISQPort {\n\t\tout isq: ISQ;\n\t}\n\tport def QuantityPort {\n\t\tout quantity: Quantity;\n\t}\n\tport def UnitPort {\n\t\tout unit: Unit;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport isqPort: ISQPort;\n\t\t\tperform manageQuantities.sendISQ {\n\t\t\t\tout isq = isqPort.isq;\n\t\t\t}\n\t\t\tport quantityPort: QuantityPort;\n\t\t\tperform manageQuantities.sendQuantity {\n\t\t\t\tout quantity = quantityPort.quantity;\n\t\t\t}\n\t\t\tport unitPort: UnitPort;\n\t\t\tperform manageQuantities.sendUnit {\n\t\t\t\tout unit = unitPort.unit;\n\t\t\t}\n\t\t}\n\t\tinterface userToSystem connect user.isqPort to system.isqPort {\n\t\t\tref flow references manageQuantities.isqFlow\n\t\t\t\tfrom source.isq to target.isq",
    "package 'UnitSystemLibrary' {\n\tattribute def ISQ;\n\tattribute def USCustomaryUnits;\n\tport def ISQPort {\n\t\tout isq: ISQ;\n\t}\n\tport def USCustomaryUnitsPort {\n\t\tout usc: USCustomaryUnits;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport isqPort: ISQPort;\n\t\t\tport uscPort: USCustomaryUnitsPort;\n\t\t\tperform manageUnits.sendISQ;\n\t\t\tperform manageUnits.sendUSC;\n\t\t}\n\t\tpart library {\n\t\t\tport isqPort: ~ISQPort;\n\t\t\tport uscPort: ~USCustomaryUnitsPort;\n\t\t\tperform manageUnits.convertUnits;\n\t\t}\n\t\tinterface userToLibrary connect user.isqPort to library.isqPort {\n\t\t\tref flow references manageUnits.isqFlow\n\t\t\t\tfrom source.isq to target.isq;\n\t\t\tref flow references manageUnits.usFlow\n\t\t\t\tfrom source.usc to target.usc;\n\t\t}\n\t\tpart",
    "package 'HeadlampTiltAdjustment' {\n\tattribute def TiltAngle;\n\tattribute def SafeTiltRange;\n\tattribute def StandardUnits;\n\tattribute def StandardConstants;\n\tport def TiltAnglePort {\n\t\tin tiltAngle: TiltAngle;\n\t}\n\tport def SafeTiltRangePort {\n\t\tout safeTiltRange: SafeTiltRange;\n\t}\n\tport def StandardUnitsPort {\n\t\tout standardUnits: StandardUnits;\n\t}\n\tport def StandardConstantsPort {\n\t\tout standardConstants: StandardConstants;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport tiltAnglePort: TiltAnglePort;\n\t\t\tperform verifyTiltAngle.receiveTiltAngle {\n\t\t\t\tin tiltAngle = tiltAnglePort.tiltAngle;\n\t\t\t}\n\t\t\tport safeTiltRangePort: SafeTiltRangePort;\n\t\t\tperform verifyTiltAngle.checkTiltRange {\n\t\t\t\tout safeTiltRange = safeTiltRangePort.safeTiltRange;\n\t\t\t}\n\t\t\tport standardUnitsPort: StandardUnitsPort;\n",
    "package 'DataTypeManagement' {\n\tattribute def UnsignedInteger;\n\tattribute def UnsignedFloatingPoint;\n\tattribute def DateTime;\n\tattribute def String;\n\tattribute def Boolean;\n\tattribute def Color;\n\tport def DataTypeManager {\n\t\tout dataTypes: DataType;\n\t}\n\tport def ColorLabeler {\n\t\tout colorLabel: Color;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport dataTypes: DataTypeManager;\n\t\t\tport colorLabeler: ColorLabeler;\n\t\t\tperform manageDataTypes.sendDataTypes {\n\t\t\t\tout dataTypes = dataTypes.dataTypes;\n\t\t\t}\n\t\t}\n\t\tinterface userToSystem connect user.dataTypes to system.dataTypes {\n\t\t\tref flow references manageDataTypes.dataTypesFlow\n\t\t\t\tfrom source.dataTypes to target.dataTypes",
    "package 'CollectionManagementSystem' {\n\tattribute def SparePart;\n\tattribute def Integer;\n\tattribute def String;\n\tattribute def Person;\n\tattribute def Real;\n\tport def SparePartPort {\n\t\tout sparePart: SparePart;\n\t}\n\tport def IntegerPort {\n\t\tout integer: Integer;\n\t}\n\tport def StringPort {\n\t\tout string: String;\n\t}\n\tport def PersonPort {\n\t\tout person: Person;\n\t}\n\tport def RealPort {\n\t\tout real: Real;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport SparePartPort: SparePartPort;\n\t\t\tperform manageSpareParts.sendSpareParts {\n\t\t\t\tout spareParts = sparePartPort.sparePart;\n\t\t\t}\n\t\t\tport IntegerPort: IntegerPort;\n\t\t\tperform manageIntegers.sendIntegers {\n\t\t\t\tout integers = integerPort.",
    "package 'TireInformation' {\n\tattribute def ManufacturerName;\n\tattribute def RimDiameter;\n\tattribute def TireWidth;\n\tattribute def InstallationPosition;\n\tport def TireEntry {\n\t\tout manufacturerName: ManufacturerName;\n\t\tout rimDiameter: RimDiameter;\n\t\tout tireWidth: TireWidth;\n\t\tout installationPosition: InstallationPosition;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport tireEntry: TireEntry;\n\t\t\tperform addTireEntry.sendTireEntry {\n\t\t\t\tout manufacturerName = tireEntry.manufacturerName;\n\t\t\t\tout rimDiameter = tireEntry.rimDiameter;\n\t\t\t\tout tireWidth = tireEntry.tireWidth;\n\t\t\t\tout installationPosition = tireEntry.installationPosition;\n\t\t\t}\n\t\t}\n\t\tinterface userToSystem connect user.tireEntry to system.tireEntry {\n\t\t\tref flow references add",
    "package 'SpacecraftAscentTrajectoryRecorder' {\n\tattribute def MissionLiftoffTime;\n\tattribute def SampledPoints;\n\tport def MissionLiftoffTimePort {\n\t\tin missionLiftoffTime: MissionLiftoffTime;\n\t}\n\tport def SampledPointsPort {\n\t\tout sampledPoints: SampledPoints;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport missionLiftoffTimePort: MissionLiftoffTimePort;\n\t\t\tperform recordTrajectory.sendMissionLiftoffTime {\n\t\t\t\tin missionLiftoffTime = missionLiftoffTimePort.missionLiftoffTime;\n\t\t\t}\n\t\t}\n\t\tinterface userToSystem connect user.missionLiftoffTimePort to system.missionLiftoffTimePort {\n\t\t\tref flow references recordTrajectory.missionLiftoffTimeFlow\n\t\t\t\t",
    "package 'AlloyProperties' {\n\tattribute def Material;\n\tattribute def Metal;\n\tattribute def Alloy;\n\tattribute def MassFraction;\n\tattribute def TensileStrength;\n\tattribute def Unit;\n\tattribute def Value;\n\tport def MaterialPort {\n\t\tout material: Material;\n\t}\n\tport def MetalPort {\n\t\tout metal: Metal;\n\t}\n\tport def AlloyPort {\n\t\tout alloy: Alloy;\n\t}\n\tport def MassFractionPort {\n\t\tout massFraction: MassFraction;\n\t}\n\tport def TensileStrengthPort {\n\t\tout tensileStrength: TensileStrength;\n\t}\n\tport def UnitPort {\n\t\t",
    "package 'EngineeringMaterialsDB' {\n\tattribute def MaterialType;\n\tattribute def Composition;\n\tattribute def MechanicalProperties;\n\tport def MaterialTypePort {\n\t\tout materialType: MaterialType;\n\t}\n\tport def CompositionPort {\n\t\tout composition: Composition;\n\t}\n\tport def MechanicalPropertiesPort {\n\t\tout mechanicalProperties: MechanicalProperties;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport MaterialTypePort: MaterialTypePort;\n\t\t\tport CompositionPort: CompositionPort;\n\t\t\tport MechanicalPropertiesPort: MechanicalPropertiesPort;\n\t\t\tperform manageMaterials.receiveMaterialType {\n\t\t\t\tin materialType = MaterialTypePort.materialType;\n\t\t\t}\n\t\t",
    "package 'PubSubSystem' {\n\tattribute def Topic;\n\tattribute def Message;\n\tport def TopicSubscriber {\n\t\tout subscriber: TopicSubscriber;\n\t}\n\tport def MessagePublisher {\n\t\tout message: Message;\n\t}\n\tport def MessageBroker {\n\t\tout message: Message;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport topicSubscriber: TopicSubscriber;\n\t\t\tperform subscribeTopics.sendSubscription {\n\t\t\t\tout subscriber = topicSubscriber.subscriber;\n\t\t\t}\n\t\t\tport messagePublisher: MessagePublisher;\n\t\t\tperform publishMessage.sendMessage {\n\t\t\t\tout message = messagePublisher.message;\n\t\t\t}\n\t\t}\n\t\tpart server {\n\t\t\tport messageBroker: MessageBroker;\n\t\t\tperform manageMessageFlows.receiveMessage {\n\t\t\t\tin message = messageBroker.message;\n\t\t\t\tout message: Message;\n\t\t\t}\n\t\t\tport topicSubscriber",
    "package 'VehicleFuelSystem' {\n\tattribute def FuelTankAssembly;\n\tattribute def Engine;\n\tport def FuelSupplyPort {\n\t\tout fuelSupply: Fuel;\n\t}\n\tport def FuelReturnPort {\n\t\tin fuelReturn: Fuel;\n\t}\n\tport def FuelTemperatureSensor {\n\t\tin fuelTemperature: Temperature;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport FuelSupplyPort: FuelSupplyPort;\n\t\t\tport FuelReturnPort: FuelReturnPort;\n\t\t\tport FuelTemperatureSensor: FuelTemperatureSensor;\n\t\t}\n\t\tpart fuelTankAssembly {\n\t\t\tport FuelSupplyPort: ~FuelSupplyPort;\n\t\t\tport FuelReturnPort: ~FuelReturnPort;\n\t\t\tport FuelTemperatureSensor: ~FuelTemperatureSensor;\n\t\t\tperform supplyFuel {\n\t\t\t\tin fuelReturn = fuelReturnPort.fuelReturn;\n\t\t\t\tout fuelSupply = fuelSupplyPort.fuelSupply;\n\t\t\t}\n\t\t}\n\t\tpart",
    "package 'PublishSubscribeSystem' {\n\tattribute def Topic;\n\tattribute def Message;\n\tport def TopicSubscription {\n\t\tout subscription: TopicSubscription;\n\t}\n\tport def MessagePublish {\n\t\tout message: Message;\n\t}\n\tport def MessageDelivery {\n\t\tin message: Message;\n\t}\n\tpart context {\n\t\tpart producer {\n\t\t\tport messagePublish: MessagePublish;\n\t\t\tperform publishMessage.sendMessage {\n\t\t\t\tout message = messagePublish.message;\n\t\t\t}\n\t\t\tport topicSubscription: TopicSubscription;\n\t\t\tperform subscribeToTopic.sendSubscriptionRequest {\n\t\t\t\tout subscription = topicSubscription.subscription;\n\t\t\t}\n\t\t}\n\t\tpart server {\n\t\t\tport messagePublish: ~MessagePublish;\n\t\t\tport messageDelivery: MessageDelivery;\n\t\t\tperform manageMessageFlow.receiveMessage {\n\t\t\t\tin message = messagePublish.message;\n\t\t\t}\n\t\t\tperform manageSubscription.",
    "package 'TransportationService' {\n\tattribute def UserCount;\n\tattribute def FuelLevel;\n\tport def UserEntryPort {\n\t\tin userCount: UserCount;\n\t\tout fuelLevel: FuelLevel;\n\t}\n\tport def VehicleOperationPort {\n\t\tin fuelLevel: FuelLevel;\n\t\tout vehicleStatus: VehicleStatus;\n\t}\n\tport def RefuelingPort {\n\t\tin fuelLevel: FuelLevel;\n\t\tout refuelingStatus: RefuelingStatus;\n\t}\n\tport def SafetyCheckPort {\n\t\tin vehicleStatus: VehicleStatus;\n\t\tout safetyStatus: SafetyStatus;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport userEntry: UserEntryPort;\n\t\t\tperform boarding.receiveUserCount {\n\t\t\t\tin userCount = userEntry.userCount;\n\t\t\t}\n\t\t\tport vehicleOperation: VehicleOperationPort;\n\t\t\tperform drive.sendFuelLevel {\n\t\t\t\tin fuelLevel = vehicleOperation.fuelLevel;\n\t\t\t}\n\t\t\tport refueling:",
    "package 'FuelSupplyAndReturnManagement' {\n\tattribute def FuelSupplyAndReturn;\n\tattribute def FuelTemperature;\n\tport def FuelSupplyPort {\n\t\tout fuelSupply: FuelSupplyAndReturn;\n\t\tin fuelReturn: FuelSupplyAndReturn;\n\t\tin fuelTemperature: FuelTemperature;\n\t}\n\tport def EngineFuelInletPort {\n\t\tin fuelSupply: FuelSupplyAndReturn;\n\t\tout fuelReturn: FuelSupplyAndReturn;\n\t\tin fuelTemperature: FuelTemperature;\n\t}\n\tpart context {\n\t\tpart fuelTankAssembly {\n\t\t\tport FuelSupplyPort: FuelSupplyPort;\n\t\t\tperform supplyFuel {\n\t\t\t\tin fuelSupply = FuelSupplyPort.fuelSupply;\n\t\t\t\tout fuelSupply = FuelSupplyPort.fuelSupply;\n\t\t\t}\n",
    "package 'VehicleFuelSystem' {\n\tattribute def FuelSupply;\n\tattribute def FuelReturn;\n\tattribute def FuelTemperature;\n\tport def FuelSupplyPort {\n\t\tout fuelSupply: FuelSupply;\n\t}\n\tport def FuelReturnPort {\n\t\tin fuelReturn: FuelReturn;\n\t}\n\tport def FuelTemperaturePort {\n\t\tout fuelTemperature: FuelTemperature;\n\t}\n\tpart context {\n\t\tpart FuelTankAssembly {\n\t\t\tport FuelSupplyPort: FuelSupplyPort;\n\t\t\tport FuelReturnPort: FuelReturnPort;\n\t\t\tport FuelTemperaturePort: FuelTemperaturePort;\n\t\t\tperform supplyFuel.supplyFuel {\n\t\t\t\tin fuelSupply = FuelSupplyPort.fuelSupply;\n\t\t\t\tout fuelSupply = FuelSupplyPort.fuelSupply;\n\t\t\t}\n\t\t\tperform returnFuel.returnFuel {\n\t\t\t\tin fuelReturn = FuelReturnPort.fuelReturn;\n\t\t\t\tout fuelReturn = FuelReturnPort",
    "package 'PhotoCaptureSystem' {\n\tattribute def SceneSelection;\n\tattribute def FocusedImage;\n\tattribute def FinalPhoto;\n\tport def SceneSelectionPort {\n\t\tin sceneSelection: SceneSelection;\n\t}\n\tport def FocusedImagePort {\n\t\tout focusedImage: FocusedImage;\n\t}\n\tport def FinalPhotoPort {\n\t\tout finalPhoto: FinalPhoto;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport sceneSelectionPort: SceneSelectionPort;\n\t\t\tperform selectScene.receiveSceneSelection {\n\t\t\t\tin sceneSelection = sceneSelectionPort.sceneSelection;\n\t\t\t}\n\t\t\tport finalPhotoPort: FinalPhotoPort;\n\t\t\tperform obtainPhoto.sendFinalPhoto {\n\t\t\t\tout finalPhoto = finalPhotoPort.finalPhoto;\n\t\t\t}\n\t\t\tinterface userToSystem connect user.sceneSelectionPort to system.sceneSelectionPort {\n\t\t\t\tref flow references selectScene.sceneSelectionFlow\n\t\t\t\t\tfrom source.sceneSelection to target.sceneSelection;\n\t\t\t}\n\t\t\tinterface userToSystem connect user.finalPhotoPort to system.finalPhotoPort {\n",
    "package 'PhotographyWorkflow' {\n\tattribute def Scene;\n\tattribute def FocusedImage;\n\tattribute def FinalImage;\n\tport def ScenePort {\n\t\tin scene: Scene;\n\t}\n\tport def FocusedImagePort {\n\t\tout focusedImage: FocusedImage;\n\t}\n\tport def ShootingPort {\n\t\tout finalImage: FinalImage;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport scenePort: ScenePort;\n\t\t\tperform selectScene.receiveScene {\n\t\t\t\tin scene = scenePort.scene;\n\t\t\t}\n\t\t\tport shootingPort: ShootingPort;\n\t\t\tperform shooting.sendFinalImage {\n\t\t\t\tout finalImage = shootingPort.finalImage;\n\t\t\t}\n\t\t\tinterface userToSystem connect user.scenePort to system.scenePort {\n\t\t\t\tref flow references selectScene.sceneFlow\n\t\t\t\t\tfrom source.scene to target.scene;\n\t\t\t\t}\n\t\t\t\tinterface userToSystem connect user.shootingPort to system.shootingPort {\n\t\t",
    "package 'PhotographyWorkflow' {\n\tattribute def SceneSelection;\n\tattribute def FocusedImage;\n\tattribute def FinalPhotograph;\n\tport def SceneSelectionPort {\n\t\tin sceneSelection: SceneSelection;\n\t}\n\tport def FocusedImagePort {\n\t\tout focusedImage: FocusedImage;\n\t}\n\tport def FinalPhotographPort {\n\t\tout finalPhotograph: FinalPhotograph;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport sceneSelectionPort: SceneSelectionPort;\n\t\t\tperform selectScene.receiveSceneSelection {\n\t\t\t\tin sceneSelection = sceneSelectionPort.sceneSelection;\n\t\t\t}\n\t\t\tport focusedImagePort: FocusedImagePort;\n\t\t\tperform focusScene.sendFocusedImage {\n\t\t\t\tout focusedImage = focusedImagePort.focusedImage;\n\t\t\t}\n\t\t\tport finalPhotographPort: FinalPhotographPort;\n\t\t\tperform capturePhoto.sendFinalPhoto {\n\t\t\t\tout finalPhotograph = finalPhotographPort.finalPhotograph;\n\t\t\t}\n\t\t}\n\t\tinterface userToSystem connect user.sceneSelectionPort to system.",
    "package 'PhotographyAutomation' {\n\tattribute def ShootingScene;\n\tattribute def FocusedImage;\n\tattribute def Photograph;\n\tport def ShootingScenePort {\n\t\tin shootingScene: ShootingScene;\n\t}\n\tport def FocusedImagePort {\n\t\tout focusedImage: FocusedImage;\n\t}\n\tport def PhotographPort {\n\t\tout photograph: Photograph;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport shootingScenePort: ShootingScenePort;\n\t\t\tperform captureScene.receiveShootingScene {\n\t\t\t\tin shootingScene = shootingScenePort.shootingScene;\n\t\t\t}\n\t\t\tinterface userToSystem connect user.shootingScenePort to system.shootingScenePort {\n\t\t\t\tref flow references captureScene.shootingSceneFlow\n\t\t\t\t\tfrom source.shootingScene to target.shootingScene;\n\t\t\t}\n\t\t}\n\t\tpart system {\n\t\t\tport shootingScenePort: ~ShootingScenePort;\n\t\t\tport focusedImagePort: FocusedImagePort;\n\t\t\tport photograph",
    "package 'PhotographyWorkflow' {\n\tattribute def Scene;\n\tattribute def Image;\n\tattribute def Picture;\n\tport def ScenePort {\n\t\tin scene: Scene;\n\t}\n\tport def ImagePort {\n\t\tout image: Image;\n\t}\n\tport def PicturePort {\n\t\tout picture: Picture;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport ScenePort: ScenePort;\n\t\t\tperform takePhoto.inputScene {\n\t\t\t\tin scene = ScenePort.scene;\n\t\t\t}\n\t\t\tinterface userToWorkflow connect user.ScenePort to workflow.ScenePort {\n\t\t\t\tref flow references takePhoto.sceneFlow\n\t\t\t\t\tfrom source.scene to target.scene;\n\t\t\t}\n\t\t}\n\t\tpart workflow {\n\t\t\tport ScenePort: ~ScenePort;\n\t\t\tport ImagePort: ~ImagePort;\n\t\t\tport PicturePort: ~PicturePort;\n\t\t\tperform takePhoto.focusScene {\n\t\t\t\tin scene = ScenePort.scene;\n\t\t\t\tout image = ImagePort.image;\n\t\t\t}\n\t",
    "package 'PhotographyWorkflow' {\n\tattribute def SceneSelection;\n\tattribute def FocusedScene;\n\tattribute def Photo;\n\tport def SceneSelectionPort {\n\t\tin sceneSelection: SceneSelection;\n\t}\n\tport def FocusedScenePort {\n\t\tout focusedScene: FocusedScene;\n\t}\n\tport def PhotoPort {\n\t\tout photo: Photo;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport sceneSelectionPort: SceneSelectionPort;\n\t\t\tperform selectScene.sendSceneSelection {\n\t\t\t\tin sceneSelection = sceneSelectionPort.sceneSelection;\n\t\t\t}\n\t\t}\n\t\tinterface userToCamera connect user.sceneSelectionPort to camera.sceneSelectionPort {\n\t\t\tref flow references selectScene.sceneFlow\n\t\t\t\tfrom source.sceneSelection to target.sceneSelection;\n\t\t\t}\n\t\tpart camera {\n\t\t\tport sceneSelectionPort: ~SceneSelectionPort;\n\t\t\tport focusedScenePort: FocusedScenePort;\n\t\t\tport photoPort: PhotoPort;\n\t\t\tperform selectScene.focusScene {\n\t\t\t\tin sceneSelection = sceneSelectionPort.scene",
    "package 'PhotographyWorkflow' {\n\tattribute def Scene;\n\tattribute def FocusQuality;\n\tattribute def Image;\n\tattribute def Photo;\n\tport def ScenePort {\n\t\tin scene: Scene;\n\t}\n\tport def FocusQualityPort {\n\t\tout focusQuality: FocusQuality;\n\t}\n\tport def ImagePort {\n\t\tout image: Image;\n\t}\n\tport def PhotoPort {\n\t\tout photo: Photo;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport ScenePort: ScenePort;\n\t\t\tperform selectScene.receiveScene {\n\t\t\t\tin scene = ScenePort.scene;\n\t\t\t}\n\t\t\tport FocusQualityPort: FocusQualityPort;\n\t\t\tperform evaluateFocus.receiveFocusQuality {\n\t\t\t\tin focusQuality = FocusQualityPort.focusQuality;\n\t\t\t}\n\t\t\tport ImagePort: ImagePort;\n\t\t\tperform captureImage.receiveImage {\n\t\t\t\tin image = ImagePort.image;\n\t\t\t}\n\t\t\tport PhotoPort: PhotoPort;\n\t\t\tperform producePhoto.receive",
    "package 'PhotographyWorkflow' {\n\tattribute def takePhotoCmd;\n\tattribute def shootingScene;\n\tattribute def focusFunction;\n\tattribute def image;\n\tattribute def photo;\n\tport def takePhotoCmdPort {\n\t\tout takePhotoCmd : takePhotoCmd;\n\t}\n\tport def shootingScenePort {\n\t\tin shootingScene : shootingScene;\n\t}\n\tport def focusFunctionPort {\n\t\tin focusFunction : focusFunction;\n\t}\n\tport def imagePort {\n\t\tout image: Image;\n\t}\n\tport def photoPort {\n\t\tout photo: Photo;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport takePhotoCmdPort: takePhotoCmdPort;\n\t\t\tperform takePhoto.sendTakePhotoCmd {\n\t\t\t\tout takePhotoCmd = takePhotoCmdPort.takePhotoCmd;\n\t\t\t}\n\t\t\tport shootingScenePort: shootingScenePort;\n\t\t\tport focusFunctionPort: focusFunctionPort;\n\t\t\tport imagePort: imagePort;\n\t\t\tport photoPort: photoPort;\n\t\t\tinterface userToSystem connect",
    "package 'AutomaticBrakingControl' {\n\tattribute def KeyPosition;\n\tattribute def BrakePressure;\n\tattribute def TractionInfo;\n\tattribute def BrakeModulation;\n\tport def KeyPositionPort {\n\t\tout keyPosition: KeyPosition;\n\t}\n\tport def BrakePressurePort {\n\t\tin brakePressure: BrakePressure;\n\t}\n\tport def TractionInfoPort {\n\t\tin tractionInfo: TractionInfo;\n\t}\n\tport def BrakeModulationPort {\n\t\tout brakeModulation: BrakeModulation;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport keyPositionPort: KeyPositionPort;\n\t\t\tperform startSystem.sendKeyPosition {\n\t\t\t\tout keyPosition = keyPositionPort.keyPosition;\n\t\t\t}\n\t\t\tport brakePressurePort: BrakePressurePort;\n\t\t\tport tractionInfoPort: TractionInfoPort;\n\t\t\tperform monitorBrakeStatus.sendBrakePressure {\n\t\t\t\tin brakePressure = brakePressurePort.brakePressure;\n",
    "package 'BatteryChargingControlSystem' {\n\tattribute def BatteryLevel;\n\tattribute def ChargingStatus;\n\tport def BatteryLevelPort {\n\t\tin batteryLevel: BatteryLevel;\n\t}\n\tport def ChargingStatusPort {\n\t\tout chargingStatus: ChargingStatus;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport BatteryLevelPort: BatteryLevelPort;\n\t\t\tperform monitorBatteryLevel.receiveBatteryLevel {\n\t\t\t\tin batteryLevel = BatteryLevelPort.batteryLevel;\n\t\t\t}\n\t\t\tport ChargingStatusPort: ChargingStatusPort;\n\t\t\tperform controlCharging.sendChargingStatus {\n\t\t\t\tout chargingStatus = ChargingStatusPort.chargingStatus;\n\t\t\t}\n\t\t}\n\t\tpart battery {\n\t\t\tport BatteryLevelPort: ~BatteryLevelPort;\n\t\t\tperform monitorBatteryLevel.monitorBatteryLevel {\n\t\t\t\tin batteryLevel = BatteryLevelPort.batteryLevel;\n\t\t\t\tout batteryLevel = BatteryLevel;\n\t\t\t}\n\t\t\tport ChargingStatus",
    "package 'BatteryChargingSystem' {\n\tattribute def BatteryLevel;\n\tattribute def ChargingStatus;\n\tport def BatteryLevelPort {\n\t\tout batteryLevel: BatteryLevel;\n\t}\n\tport def ChargingStatusPort {\n\t\tout chargingStatus: ChargingStatus;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport BatteryLevelPort: ~BatteryLevelPort;\n\t\t\tperform monitorBatteryLevel.receiveBatteryLevel {\n\t\t\t\tin batteryLevel = BatteryLevelPort.batteryLevel;\n\t\t\t}\n\t\t\tport ChargingStatusPort: ~ChargingStatusPort;\n\t\t\tperform controlCharging.sendChargingStatus {\n\t\t\t\tout chargingStatus = ChargingStatusPort.chargingStatus;\n\t\t\t}\n\t\t}\n\t\tpart chargingSystem {\n\t\t\tport BatteryLevelPort: ~BatteryLevelPort;\n\t\t\tport ChargingStatusPort: ~ChargingStatusPort;\n\t\t\tperform monitorBatteryLevel.monitorBatteryLevel {\n\t\t\t\tin batteryLevel = BatteryLevelPort.batteryLevel;\n\t\t\t\tout",
    "package 'CameraFunction' {\n\tattribute def SceneSelection;\n\tattribute def AutoFocus;\n\tattribute def Imaging;\n\tattribute def PhotoRecording;\n\tport def SceneSelectionPort {\n\t\tin sceneSelection: SceneSelection;\n\t}\n\tport def AutoFocusPort {\n\t\tout autoFocus: AutoFocus;\n\t}\n\tport def ImagingPort {\n\t\tin imaging: Imaging;\n\t}\n\tport def PhotoRecordingPort {\n\t\tout photo: PhotoRecording;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport sceneSelectionPort: SceneSelectionPort;\n\t\t\tperform selectScene.sendSceneSelection {\n\t\t\t\tin sceneSelection = sceneSelectionPort.sceneSelection;\n\t\t\t}\n\t\t}\n\t\tinterface userToCamera connect user.sceneSelectionPort to camera.sceneSelectionPort {\n\t\t\tref flow references selectScene.sceneSelectionFlow\n\t\t\t\tfrom source.sceneSelection to target.sceneSelection;\n\t\t\t}\n\t\tpart camera {\n\t\t\t\tport sceneSelectionPort: ~SceneSelectionPort;\n\t\t\t\tport autoFocusPort: AutoFocusPort;\n\t\t\t\tport imagingPort: ImagingPort;\n\t\t\t\t",
    "package 'DigitalCamera' {\n\tattribute def SceneSelection;\n\tattribute def Focus;\n\tattribute def Image;\n\tport def SceneSelectionPort {\n\t\tin sceneSelection: SceneSelection;\n\t}\n\tport def FocusPort {\n\t\tout focus: Focus;\n\t}\n\tport def ImagePort {\n\t\tout image: Image;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport sceneSelectionPort: SceneSelectionPort;\n\t\t\tperform selectScene.receiveSceneSelection {\n\t\t\t\tin sceneSelection = sceneSelectionPort.sceneSelection;\n\t\t\t}\n\t\t}\n\t\tinterface userToCamera connect user.sceneSelectionPort to camera.sceneSelectionPort {\n\t\t\tref flow references selectScene.sceneFlow\n\t\t\t\tfrom source.sceneSelection to target.sceneSelection;\n\t\t\t}\n\t\tpart camera {\n\t\t\tport sceneSelectionPort: ~SceneSelectionPort;\n\t\t\tport focusPort: FocusPort;\n\t\t\tport imagePort: ImagePort;\n\t\t\tperform selectScene.processScene {\n\t\t\t\tin sceneSelection = sceneSelectionPort.sceneSelection;\n\t\t\t\tout focus = focusPort.focus",
    "package 'VehicleSimulation' {\n\tattribute def Mass;\n\tattribute def InitialPosition;\n\tattribute def InitialVelocity;\n\tattribute def TimeStep;\n\tattribute def PowerInput;\n\tport def PowerInputPort {\n\t\tin powerInput: PowerInput;\n\t}\n\tport def PositionPort {\n\t\tout position: Position;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport PowerInputPort: PowerInputPort;\n\t\t\tperform simulateVehicle.receivePowerInput {\n\t\t\t\tin powerInput = PowerInputPort.powerInput;\n\t\t\t}\n\t\t\tport PositionPort: PositionPort;\n\t\t\tperform simulateVehicle.outputTrajectory {\n\t\t\t\tout position = PositionPort.position;\n\t\t\t}\n\t\t}\n\t\tpart vehicle {\n\t\t\tport PowerInputPort: ~PowerInputPort;\n\t\t\tport PositionPort: ~PositionPort;\n\t\t\tperform simulateVehicle.calculateSpeedAndPosition {\n\t\t\t\tin powerInput = PowerInputPort.powerInput;\n\t\t\t\tout position = PositionPort.position;\n\t\t\t}\n\t\t}\n\t\tpart trajectory {\n\t\t\tport position: ~Position;\n\t\t\t",
    "package 'CameraSystem' {\n\tattribute def shootingMode;\n\tattribute def scene;\n\tattribute def image;\n\tattribute def photo;\n\tport def shootingModePort {\n\t\tout shootingMode: shootingMode;\n\t}\n\tport def scenePort {\n\t\tin scene: scene;\n\t}\n\tport def imagePort {\n\t\tout image: image;\n\t}\n\tport def photoPort {\n\t\tout photo: photo;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport scenePort: scenePort;\n\t\t\tperform shooting.inputScene {\n\t\t\t\tin scene = scenePort.scene;\n\t\t\t}\n\t\t\tport shootingModePort: shootingModePort;\n\t\t\tperform shooting.setShootingMode {\n\t\t\t\tout shootingMode = shootingModePort.shootingMode;\n\t\t\t}\n\t\t}\n\t\tpart camera {\n\t\t\tport scenePort: ~scenePort;\n\t\t\tport shootingModePort: ~shootingModePort;\n\t\t\tperform shooting.focusScene {\n\t\t\t\tin scene = scenePort.scene;\n\t\t\t\tout image = imagePort.image;\n",
    "package 'CameraInformationProcessingWorkflow' {\n\tattribute def SceneSelection;\n\tattribute def FocusedImage;\n\tattribute def Photograph;\n\tport def viewPort {\n\t\tin sceneSelection: SceneSelection;\n\t}\n\tport def displayPort {\n\t\tout picture: Photograph;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport viewPort: viewPort;\n\t\t\tperform selectScene.sendSceneSelection {\n\t\t\t\tin sceneSelection = viewPort.sceneSelection;\n\t\t\t}\n\t\t}\n\t\tpart camera {\n\t\t\tport viewPort: ~viewPort;\n\t\t\tport displayPort: ~displayPort;\n\t\t\tperform captureImage.receiveSceneSelection {\n\t\t\t\tin sceneSelection = viewPort.sceneSelection;\n\t\t\t\tout focusedImage = FocusedImage;\n\t\t\t}\n\t\t\tperform displayPhotograph.sendPhotograph {\n\t\t\t\tin picture = displayPort.picture;\n\t\t\t}\n\t\t}\n\t\tpart display {\n\t\t\tport displayPort: ~displayPort;\n\t\t\tperform displayPhotograph.receivePhotograph {\n\t\t\t\tin picture = displayPort.picture;\n\t",
    "package 'SensorManagementSystem' {\n\tattribute def Sensors;\n\tattribute def SensorStatus;\n\tport def SensorStatusPort {\n\t\tout sensorStatus: SensorStatus;\n\t}\n\tport def SensorUpdatePort {\n\t\tin updateRequest: SensorStatus;\n\t}\n\tpart context {\n\t\tpart system {\n\t\t\tport sensorStatusPort: SensorStatusPort;\n\t\t\tperform monitorSensors.sendSensorStatus {\n\t\t\t\tout sensorStatus = sensorStatusPort.sensorStatus;\n\t\t\t}\n\t\t\tport sensorUpdatePort: SensorUpdatePort;\n\t\t\tperform updateSensors.receiveUpdateRequest {\n\t\t\t\tin updateRequest = sensorUpdatePort.updateRequest;\n\t\t\t}\n\t\t}\n\t\tinterface systemToSensors connect system.sensorStatusPort to sensors.sensorStatusPort {\n\t\t\tref flow references monitorSensors.sensorStatusFlow\n\t\t\t\tfrom source.sensorStatus to target.sensorStatus;\n\t\t\t}\n\t\t\tinterface systemToSensors connect system.sensorUpdatePort to sensors.sensorUpdatePort {\n\t\t\t\tref flow references updateSensors.updateRequestFlow\n\t\t\t\t\tfrom source.updateRequest to target",
    "package 'VehicleManagement' {\n\tattribute def VehicleState;\n\tattribute def StartSignal;\n\tattribute def PowerOnSignal;\n\tattribute def ShutdownSignal;\n\tport def VehicleStatePort {\n\t\tout vehicleState: VehicleState;\n\t}\n\tport def SignalPort {\n\t\tin startSignal: StartSignal;\n\t\tin powerOnSignal: PowerOnSignal;\n\t\tin shutdownSignal: ShutdownSignal;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport signalPort: SignalPort;\n\t\t\tperform manageVehicleState.receiveSignals {\n\t\t\t\tin startSignal = signalPort.startSignal;\n\t\t\t\tin powerOnSignal = signalPort.powerOnSignal;\n\t\t\t\tin shutdownSignal = signalPort.shutdownSignal;\n\t\t\t}\n\t\t\tinterface userToSystem connect user.signalPort to system.signalPort {\n\t\t\t\tref flow references manageVehicleState.signalFlow\n\t\t\t\t\tfrom source.signals to target.signals;\n\t\t\t}\n\t\t}\n\t\tpart system {\n\t\t\tport signalPort: ~SignalPort;\n\t\t\tperform manageVe",
    "package 'VehicleStatusManagement' {\n\tattribute def VehicleStartSignal;\n\tattribute def VehicleOnSignal;\n\tattribute def VehicleOffSignal;\n\tattribute def defVehicleState;\n\tport def VehicleStatePort {\n\t\tout vehicleState: defVehicleState;\n\t}\n\tport def ControlSignalPort {\n\t\tin controlSignal: VehicleStartSignal | VehicleOnSignal | VehicleOffSignal;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport ControlSignalPort: ControlSignalPort;\n\t\t\tperform manageVehicleStatus.receiveControlSignal {\n\t\t\t\tin controlSignal = ControlSignalPort.controlSignal;\n\t\t\t}\n\t\t}\n\t\tpart vehicle {\n\t\t\tport VehicleStatePort: VehicleStatePort;\n\t\t\tperform manageVehicleStatus.updateVehicleState {\n\t\t\t\tin controlSignal = ControlSignalPort.controlSignal;\n\t\t\t\tout vehicleState = VehicleStatePort.vehicleState;\n\t\t\t}\n\t\t}\n\t\tinterface userToVehicle connect user.ControlSignalPort to vehicle.ControlSignalPort",
    "package 'VehiclePowerManagement' {\n\tattribute def VehicleStartCmd;\n\tattribute def VehicleStartedSignal;\n\tattribute def VehicleShutdownCmd;\n\tattribute def VehiclePoweredOnState;\n\tattribute def VehicleOffState;\n\tattribute def VehiclePoweredOffState;\n\tattribute def VehicleStartPhase;\n\tport def VehicleStartCmdPort {\n\t\tout vehicleStartCmd: VehicleStartCmd;\n\t}\n\tport def VehicleStartedSignalPort {\n\t\tin vehicleStartedSignal: VehicleStartedSignal;\n\t}\n\tport def VehicleShutdownCmdPort {\n\t\tout vehicleShutdownCmd: VehicleShutdownCmd;\n\t}\n\tport def VehicleStatePort {\n\t\tout vehicleState: VehicleState;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport VehicleStartCmdPort: VehicleStartCmdPort;\n\t\t\tperform switchVehicleState.sendVehicleStartCmd {\n\t\t\t\tout vehicleStartCmd = VehicleStartCmdPort.vehicleStart",
    "package 'VehicleControl' {\n\tattribute def StartSignal;\n\tattribute def ShutdownSignal;\n\tattribute def VehicleStatus;\n\tport def StartSignalPort {\n\t\tout startSignal: StartSignal;\n\t}\n\tport def ShutdownSignalPort {\n\t\tout shutdownSignal: ShutdownSignal;\n\t}\n\tport def VehicleStatusPort {\n\t\tout vehicleStatus: VehicleStatus;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport startSignalPort: StartSignalPort;\n\t\t\tperform manageVehicleState.sendStartSignal {\n\t\t\t\tout startSignal = startSignalPort.startSignal;\n\t\t\t}\n\t\t\tport shutdownSignalPort: ShutdownSignalPort;\n\t\t\tperform manageVehicleState.sendShutdownSignal {\n\t\t\t\tout shutdownSignal = shutdownSignalPort.shutdownSignal;\n\t\t\t}\n\t\t}\n\t\tpart vehicle {\n\t\t\tport startSignalPort: ~StartSignalPort;\n\t\t\tport shutdownSignalPort: ~ShutdownSignalPort;\n\t\t\tport vehicleStatusPort: ~VehicleStatusPort;\n\t\t\tperform manageVehicleState.receiveStartSignal",
    "package 'VehiclePowerManagement' {\n\tattribute def OffState;\n\tattribute def StartState;\n\tattribute def OnState;\n\tport def userSignal;\n\tport def vehicleState;\n\tport def healthState;\n\tpart context {\n\t\tpart user {\n\t\t\tport userSignal: userSignal;\n\t\t\tperform switchState.sendUserSignal {\n\t\t\t\tout userSignal = userSignal;\n\t\t\t}\n\t\t}\n\t\tpart vehicle {\n\t\t\tport vehicleState: vehicleState;\n\t\t\tport healthState: healthState;\n\t\t\tperform switchState.receiveUserSignal {\n\t\t\t\tin userSignal;\n\t\t\t\tout vehicleState;\n\t\t\t}\n\t\t}\n\t\tpart healthMonitor {\n\t\t\tport healthState: healthState;\n\t\t\tperform healthStateManagement.monitorHealth {\n\t\t\t\tin healthState;\n\t\t\t}\n\t\t}\n\t\tinterface userToVehicle connect user.userSignal to vehicle.vehicleState {\n\t\t\tref flow references switchState.userSignal",
    "package 'VehicleHealthMonitoring' {\n\tattribute def currentTemperature;\n\tattribute def maxAllowableTemperature;\n\tattribute def vehicleHealthStatus;\n\tattribute def maintenanceSchedule;\n\tattribute def maintenanceCycleTime;\n\tport def temperatureSensor {\n\t\tin temperature: Real;\n\t}\n\tport def vehicleController {\n\t\tout warning: String;\n\t}\n\tport def maintenanceStatus {\n\t\tout status: String;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport temperatureSensor: temperatureSensor;\n\t\t\tport vehicleController: vehicleController;\n\t\t\tport maintenanceStatus: maintenanceStatus;\n\t\t\tperform monitorVehicleHealth {\n\t\t\t\tin temperature = temperatureSensor.temperature;\n\t\t\t\tout vehicleHealthStatus =",
    "package 'Server' {\n\tattribute def clock;\n\tattribute def requestPort;\n\tattribute def state;\n\tport def requestPort {\n\t\tin request: Request;\n\t}\n\tport def statePort {\n\t\tout state: State;\n\t}\n\tpart context {\n\t\tpart server {\n\t\t\tport requestPort: ~requestPort;\n\t\t\tport statePort: ~statePort;\n\t\t\tstate state = Off;\n\t\t\tperform startServer.onStartup {\n\t\t\t\tstate = Waiting;\n\t\t\t}\n\t\t\tstate state = Waiting;\n\t\t\tperform receiveRequest.onRequest {\n\t\t\t\tstate = Response;\n\t\t\t}\n\t\t\tstate state = Response;\n\t\t\tperform waitResponse.onTimeout {\n\t\t\t\tstate = Waiting;\n\t\t\t}\n\t\t\tstate state = Waiting;\n\t\t\tperform autoShutdown.onTime {\n\t\t\t\tstate = Off;\n\t\t\t}\n\t\t}\n\t}\n\taction startServer {\n\t\taction onStartup { state = Waiting",
    "package 'VehicleStartStop' {\n\tattribute def StartSignal;\n\tattribute def PowerOnSignal;\n\tattribute def BrakePedalDepressed;\n\tattribute def StopSignal;\n\tattribute def OperatingState;\n\tattribute def ParkingBrakeApplied;\n\tport def StartSignalPort {\n\t\tout startSignal: StartSignal;\n\t}\n\tport def PowerOnSignalPort {\n\t\tout powerOnSignal: PowerOnSignal;\n\t}\n\tport def BrakePedalDepressedPort {\n\t\tout brakePedalDepressed: BrakePedalDepressed;\n\t}\n\tport def StopSignalPort {\n\t\tout stopSignal: StopSignal;\n\t}\n\tport def OperatingStatePort {\n\t\tout operatingState: OperatingState;\n\t}\n\tport def ParkingBrakeAppliedPort {\n\t\tout parkingBrakeApplied: ParkingBrakeApplied;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport startSignalPort: StartSignalPort;\n\t\t\tperform startProcess.sendStartSignal {\n\t\t\t\tout",
    "package 'VehicleControlSystem' {\n\tattribute def VehicleStartSignal;\n\tattribute def BrakePedalSignal;\n\tattribute def VehicleOnSignal;\n\tattribute def ParkingBrakeSignal;\n\tattribute def VehicleState;\n\tport def VehicleStartSignalPort {\n\t\tout vehicleStartSignal: VehicleStartSignal;\n\t}\n\tport def BrakePedalSignalPort {\n\t\tout brakePedalSignal: BrakePedalSignal;\n\t}\n\tport def VehicleOnSignalPort {\n\t\tout vehicleOnSignal: VehicleOnSignal;\n\t}\n\tport def ParkingBrakeSignalPort {\n\t\tout parkingBrakeSignal: ParkingBrakeSignal;\n\t}\n\tport def VehicleStatePort {\n\t\tout vehicleState: VehicleState;\n\t}\n\tpart context {\n\t\tpart driver {\n\t\t",
    "package 'CruiseControlSystem' {\n\tattribute def Driver;\n\tattribute def CruiseController;\n\tattribute def Speedometer;\n\tattribute def Engine;\n\tattribute def Vehicle;\n\tport def DriverCmdPort {\n\t\tout setSpeedCmd: Command;\n\t}\n\tport def SpeedometerPort {\n\t\tout vehicleSpeed: Speed;\n\t}\n\tport def EnginePort {\n\t\tout fuelControlCmd: Command;\n\t}\n\tpart context {\n\t\tpart Driver {\n\t\t\tport DriverCmdPort: DriverCmdPort;\n\t\t\tperform setSpeed.sendSetSpeedCmd {\n\t\t\t\tout setSpeedCmd = DriverCmdPort.setSpeedCmd;\n\t\t\t}\n\t\t}\n\t\tpart CruiseController {\n\t\t\tport CruiseControllerCmdPort {\n\t\t\t\tout fuelControlCmd: Command;\n\t\t\t}\n\t\t\tport SpeedometerPort: SpeedometerPort;\n\t\t\tperform setSpeed.receiveSpeedCmd {\n\t\t\t\tin vehicleSpeed = SpeedometerPort.vehicleSpeed;\n\t\t\t}\n\t\t",
    "package 'CruiseControl' {\n\tattribute def setSpeedCmd;\n\tattribute def vehicleSpeed;\n\tport def setSpeedCmdPort {\n\t\tin setSpeedCmd: setSpeedCmd;\n\t}\n\tport def vehicleSpeedPort {\n\t\tin vehicleSpeed: vehicleSpeed;\n\t}\n\tpart context {\n\t\tpart driver {\n\t\t\tport setSpeedCmdPort: setSpeedCmdPort;\n\t\t\tperform setSpeed.sendSetSpeedCmd {\n\t\t\t\tin setSpeedCmd = setSpeedCmdPort.setSpeedCmd;\n\t\t\t}\n\t\t\tport vehicleSpeedPort: vehicleSpeedPort;\n\t\t}\n\t\tpart cruiseController {\n\t\t\tport setSpeedCmdPort: ~setSpeedCmdPort;\n\t\t\tport vehicleSpeedPort: ~vehicleSpeedPort;\n\t\t\tperform setSpeed.calculateThrottleCmd {\n\t\t\t\tin setSpeedCmd = setSpeedCmdPort.setSpeedCmd;\n\t\t\t\tin vehicleSpeed = vehicleSpeedPort.vehicleSpeed;\n\t\t\t\tout throttleCmd: ThrottleCmd;\n\t\t\t}\n\t\t\tport throttleCmdPort: ThrottleCmdPort;\n\t\t\tperform setSpeed.sendThr",
    "package 'AutomotiveCruiseControl' {\n\tattribute def setSpeedCmd;\n\tattribute def currentSpeed;\n\tattribute def throttleCmd;\n\tport def setSpeedCmdPort {\n\t\tin setSpeedCmd: setSpeedCmd;\n\t}\n\tport def currentSpeedPort {\n\t\tout currentSpeed: currentSpeed;\n\t}\n\tport def throttleCmdPort {\n\t\tout throttleCmd: throttleCmd;\n\t}\n\tpart context {\n\t\tpart driver {\n\t\t\tport setSpeedCmdPort: setSpeedCmdPort;\n\t\t\tperform setSpeed.sendSetSpeedCmd {\n\t\t\t\tin setSpeedCmd = setSpeedCmdPort.setSpeedCmd;\n\t\t\t}\n\t\t\tport currentSpeedPort: currentSpeedPort;\n\t\t\tperform setSpeed.receiveCurrentSpeed {\n\t\t\t\tout currentSpeed = currentSpeedPort.currentSpeed;\n\t\t\t}\n\t\t}\n\t\tpart cruiseController {\n\t\t\tport setSpeedCmdPort: ~setSpeedCmdPort;\n\t\t\tport currentSpeedPort:",
    "package 'AutoCruiseControl' {\n\tattribute def SpeedSettingCmd;\n\tattribute def VehicleSpeed;\n\tattribute def ThrottleControlCmd;\n\tport def SpeedSettingCmdPort {\n\t\tout speedSettingCmd: SpeedSettingCmd;\n\t}\n\tport def VehicleSpeedPort {\n\t\tin vehicleSpeed: VehicleSpeed;\n\t}\n\tport def ThrottleControlPort {\n\t\tout throttleControlCmd: ThrottleControlCmd;\n\t}\n\tpart context {\n\t\tpart driver {\n\t\t\tport speedSettingCmdPort: SpeedSettingCmdPort;\n\t\t\tperform setCruisingSpeed.sendSpeedSettingCmd {\n\t\t\t\tout speedSettingCmd = speedSettingCmdPort.speedSettingCmd;\n\t\t\t}\n\t\t\tport vehicleSpeedPort: VehicleSpeedPort;\n\t\t\tperform setCruisingSpeed.receiveVehicleSpeed {\n\t\t\t\tin vehicleSpeed = vehicleSpeedPort.vehicleSpeed;\n\t\t\t}\n\t\t}\n\t\tpart cruiseController {\n\t\t\tport speed",
    "package 'AutomotiveCruiseControl' {\n\tattribute def TargetSpeed;\n\tattribute def ActualSpeed;\n\tattribute def FuelControlCmd;\n\tport def TargetSpeedPort {\n\t\tout targetSpeed: TargetSpeed;\n\t}\n\tport def ActualSpeedPort {\n\t\tin actualSpeed: ActualSpeed;\n\t}\n\tport def FuelControlCmdPort {\n\t\tout fuelControlCmd: FuelControlCmd;\n\t}\n\tpart context {\n\t\tpart driver {\n\t\t\tport targetSpeedPort: TargetSpeedPort;\n\t\t\tperform setTargetSpeed.sendTargetSpeedCmd {\n\t\t\t\tout targetSpeed = targetSpeedPort.targetSpeed;\n\t\t\t}\n\t\t\tport actualSpeedPort: ActualSpeedPort;\n\t\t\tperform getSpeed.receiveActualSpeed {\n\t\t\t\tin actualSpeed = actualSpeedPort.actual",
    "package 'CruiseControlSystem' {\n\tattribute def SetSpeedCmd;\n\tattribute def ActualSpeed;\n\tattribute def FuelControlCmd;\n\tport def SetSpeedCmdPort {\n\t\tout setSpeedCmd: SetSpeedCmd;\n\t}\n\tport def SpeedSensorPort {\n\t\tin actualSpeed: ActualSpeed;\n\t}\n\tport def FuelControlCmdPort {\n\t\tout fuelControlCmd: FuelControlCmd;\n\t}\n\tpart context {\n\t\tpart driver {\n\t\t\tport setSpeedCmdPort: SetSpeedCmdPort;\n\t\t\tperform sendSetSpeedCmd {\n\t\t\t\tout setSpeedCmd = setSpeedCmdPort.setSpeedCmd;\n\t\t\t}\n\t\t}\n\t\tpart cruiseController {\n\t\t\tport setSpeedCmdPort: ~SetSpeedCmdPort;\n\t\t\tport speedSensorPort: ~SpeedSensorPort;\n\t\t\tport fuelControlCmdPort: ~FuelControlCmdPort;\n\t\t\tperform processSetSpeedCmd {\n\t\t\t\tin setSpeedCmd = setSpeedCmdPort.setSpeedCmd;\n\t\t\t\tin",
    "package 'VehicleLifecycleManagement' {\n\tattribute def VehicleID;\n\tattribute def DeliveryDate;\n\tattribute def OwnerID;\n\tattribute def DriverID;\n\tattribute def VehicleStatus;\n\tattribute def OwnershipHistory;\n\tattribute def DrivingHistory;\n\tattribute def ScrappingInfo;\n\tport def VehicleInfoPort {\n\t\tout vehicleInfo: VehicleInfo;\n\t}\n\tport def OwnerInfoPort {\n\t\tout ownerInfo: OwnerInfo;\n\t}\n\tport def DriverInfoPort {\n\t\tout driverInfo: DriverInfo;\n\t}\n\tport def LifecycleEventPort {\n\t\tout lifecycleEvent: LifecycleEvent;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport vehicleInfoPort: VehicleInfoPort;\n\t\t\tperform manageVehicleLifecycle {\n\t\t\t\tin vehicleInfo = vehicleInfoPort.vehicleInfo;\n\t\t\t}\n\t\t}\n\t\tpart owner {\n\t\t\t",
    "package 'Vehicle' {\n\tattribute def mass;\n\tattribute def operationalStatus;\n\tattribute def gearSetting;\n\tattribute def acceleratorPedalPosition;\n\tpart context {\n\t\tpart vehicle_1 {\n\t\t\tport def operationalStatusPort {\n\t\t\t\tout operationalStatus: operationalStatus;\n\t\t\t}\n\t\t\tport def gearSettingPort {\n\t\t\t\tout gearSetting: gearSetting;\n\t\t\t}\n\t\t\tport def acceleratorPedalPositionPort {\n\t\t\t\tout acceleratorPedalPosition: acceleratorPedalPosition;\n\t\t\t}\n\t\t\tpart engine {\n\t\t\t\tport def operationalStatusPort {\n\t\t\t\t\tout operationalStatus: operationalStatus;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart driver {\n\t\t\t\tport def operationalStatusPort {\n\t\t\t\t\tout operationalStatus: operationalStatus;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart leftFrontWheel {\n\t\t\t\tport def operationalStatusPort {\n\t\t\t\t\tout operationalStatus: operationalStatus;\n\t\t\t\t}\n\t\t\t\tport def wheel",
    "package 'VehicleSystem' {\n\tattribute def Vehicle;\n\tattribute def Engine;\n\tattribute def Driver;\n\tattribute def Mass;\n\tattribute def GearSetting;\n\tattribute def AcceleratorPosition;\n\tattribute def TimePoint;\n\tport def VehiclePort {\n\t\tout vehicle: Vehicle;\n\t}\n\tport def EnginePort {\n\t\tout engine: Engine;\n\t}\n\tport def DriverPort {\n\t\tout driver: Driver;\n\t}\n\tpart context {\n\t\tpart vehicleInstance {\n\t\t\tport vehiclePort: VehiclePort;\n\t\t\tperform vehicleStateUpdate.updateVehicleState {\n\t\t\t\tin timePoint = TimePoint.timePoint;\n\t\t\t\tout vehicle = vehiclePort.vehicle;\n\t\t\t}\n\t\t}\n\t\tpart vehicle {\n\t\t\tport vehiclePort: ~VehiclePort;\n\t\t\tport massPort: Mass;\n\t\t\tport gearSettingPort: GearSetting;\n\t\t\tport acceleratorPositionPort: AcceleratorPosition;\n\t\t",
    "package 'Vehicle' {\n\tattribute def mass: Real;\n\tattribute def gearPosition: GearPosition;\n\tattribute def throttlePedalPosition: Real;\n\tattribute def driver: Driver;\n\tport def vehicleStatePort {\n\t\tout vehicleState: VehicleState;\n\t}\n\tport def driverAssignmentPort {\n\t\tout driverAssignment: DriverAssignment;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport vehicleStatePort: vehicleStatePort;\n\t\t\tport driverAssignmentPort: driverAssignmentPort;\n\t\t\tperform updateVehicleState {\n\t\t\t\tin vehicleState = vehicleStatePort.vehicleState;\n\t\t\t\tout mass = mass;\n\t\t\t\tout gearPosition = gearPosition;\n\t\t\t\tout throttlePedalPosition = throttlePedalPosition;\n\t\t\t\tout driver = driver;\n\t\t\t}\n\t\t}\n\t\tpart",
    "package 'VehicleMassCalculation' {\n\tattribute def Vehicle;\n\tattribute def Component;\n\tport def VehiclePort {\n\t\tout vehicle: Vehicle;\n\t}\n\tport def ComponentPort {\n\t\tout component: Component;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport vehiclePort: VehiclePort;\n\t\t\tperform calculateTotalMass {\n\t\t\t\tout totalMass: Mass;\n\t\t\t}\n\t\t\tport componentPort: ComponentPort;\n\t\t}\n\t\tpart component {\n\t\t\tport componentPort: ComponentPort;\n\t\t\tperform calculateMass {\n\t\t\t\tout mass: Mass;\n\t\t\t}\n\t\t}\n\t\tpart subComponent {\n\t\t\tport componentPort: ComponentPort;\n\t\t\tperform calculateMass {\n\t\t\t\tout mass: Mass;\n\t\t\t}\n\t\t}\n\t\tpart subComponentList {\n\t\t\tport componentPort: ComponentPort;\n\t\t",
    "package 'VehicleMassManagement' {\n\tattribute def Vehicle;\n\tattribute def Component;\n\tattribute def Mass;\n\tattribute def SerialNumber;\n\tattribute def VIN;\n\tport def VehiclePort {\n\t\tout vehicle: Vehicle;\n\t}\n\tport def ComponentPort {\n\t\tout component: Component;\n\t}\n\tport def MassPort {\n\t\tout mass: Mass;\n\t}\n\tport def SerialNumberPort {\n\t\tout serialNumber: SerialNumber;\n\t}\n\tport def VINPort {\n\t\tout vin: VIN;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport vehiclePort: VehiclePort;\n\t\t\tperform inputVehicleData.sendVehicleData {\n\t\t\t\tout vehicle = vehiclePort.vehicle;\n\t\t\t}\n\t\t\tport componentPort: ComponentPort;\n\t\t\tperform inputComponentData.sendComponentData {\n\t\t\t\tout component = componentPort.component;\n\t",
    "package 'MassAggregationManagement' {\n\tattribute def simpleMass;\n\tattribute def totalMass;\n\tport def massCalculation;\n\tport def massReporting;\n\tpart context {\n\t\tpart simpleThing {\n\t\t\tport simpleMass: simpleMass;\n\t\t\tport totalMass: totalMass;\n\t\t\tport massCalculation: massCalculation;\n\t\t\tport massReporting: massReporting;\n\t\t\tperform calculateTotalMass {\n\t\t\t\tin simpleMass = simpleMass;\n\t\t\t\tout totalMass = totalMass;\n\t\t\t}\n\t\t}\n\t\tpart compositeThing {\n\t\t\tport simpleMass: simpleMass;\n\t\t\tport totalMass: totalMass;\n\t\t\tport massCalculation: massCalculation;\n\t\t\tport massReporting: massReporting;\n\t\t\tperform calculateTotalMass {\n\t\t\t\tin simpleMass = simpleMass;\n\t\t\t\tin subComponentTotalMass: totalMass;\n\t\t\t\tout totalMass = totalMass;\n\t\t\t}\n\t\t\tpart subComponent {\n\t\t\t\tport simpleMass: simpleMass;\n\t\t\t\tport totalMass: totalMass;\n\t",
    "package 'MassAggregator' {\n\tattribute def Object;\n\tattribute def SubComponent;\n\tattribute def TotalMass;\n\tattribute def MinimumMassThreshold;\n\tport def ObjectPort {\n\t\tout object: Object;\n\t}\n\tport def SubComponentPort {\n\t\tout subComponent: SubComponent;\n\t}\n\tport def TotalMassPort {\n\t\tout totalMass: TotalMass;\n\t}\n\tport def ThresholdPort {\n\t\tout threshold: MinimumMassThreshold;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport objectPort: ObjectPort;\n\t\t\tperform aggregateMass.sendObject {\n\t\t\t\tout object = objectPort.object;\n\t\t\t}\n\t\t\tport subComponentPort: SubComponentPort;\n\t\t\tperform aggregateMass.sendSubComponent {\n\t\t\t\tout subComponent = subComponentPort.subComponent;\n\t\t\t}\n\t\t\tport thresholdPort: ThresholdPort;\n\t\t\t",
    "package 'VehicleDynamicsSystem' {\n\tattribute def PowerOutput;\n\tattribute def Acceleration;\n\tattribute def Speed;\n\tattribute def Position;\n\tattribute def WheelPower;\n\tattribute def AerodynamicDragCoefficient;\n\tattribute def FrictionCoefficient;\n\tattribute def VehicleMass;\n\tport def PowerOutputPort {\n\t\tout powerOutput: PowerOutput;\n\t}\n\tport def AccelerationPort {\n\t\tout acceleration: Acceleration;\n\t}\n\tport def SpeedPort {\n\t\tout speed: Speed;\n\t}\n\tport def PositionPort {\n\t\tout position: Position;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport PowerOutputPort: PowerOutputPort;\n\t\t\tport AccelerationPort: AccelerationPort;\n\t\t\tport SpeedPort: SpeedPort;\n\t\t\tport PositionPort: PositionPort;\n\t\t\tperform calculateDynamics.sendInputs {\n\t\t\t\tin wheelPower = wheelPower;\n\t\t\t\tin aerodynamicDragCoefficient",
    "package 'VehicleDynamicsSimulation' {\n\tattribute def initialSpeed;\n\tattribute def initialPosition;\n\tattribute def timeStep;\n\tattribute def aerodynamicDragCoefficient;\n\tattribute def rollingResistanceCoefficient;\n\tattribute def vehicleMass;\n\tattribute def wheelEndOutputPower;\n\tport def vehicleDynamicsPort {\n\t\tin initialSpeed: initialSpeed;\n\t\tin initialPosition: initialPosition;\n\t\tin timeStep: timeStep;\n\t\tin aerodynamicDragCoefficient: aerodynamicDragCoefficient;\n\t\tin rollingResistanceCoefficient: rollingResistanceCoefficient;\n\t\tin vehicleMass: vehicleMass;\n\t\tin wheelEndOutputPower: wheelEndOutputPower;\n\t\tout acceleration: Acceleration;\n\t\tout speed: Speed;\n\t\tout position: Position;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport vehicleDynamicsPort: vehicleDynamicsPort;\n\t\t\tperform simulateVehicleDynamics {\n\t\t\t\tin initialSpeed = vehicleDynamicsPort.initialSpeed;\n\t\t\t",
    "package 'VehicleDynamics' {\n\tattribute def vehicleMass;\n\tattribute def wheelPower;\n\tattribute def aerodynamicDragCoefficient;\n\tattribute def rollingResistanceCoefficient;\n\tattribute def initialSpeed;\n\tattribute def initialPosition;\n\tport def vehicleDynamicsPort {\n\t\tin vehicleMass: vehicleMass;\n\t\tin wheelPower: wheelPower;\n\t\tin aerodynamicDragCoefficient: aerodynamicDragCoefficient;\n\t\tin rollingResistanceCoefficient: rollingResistanceCoefficient;\n\t\tin initialSpeed: initialSpeed;\n\t\tin initialPosition: initialPosition;\n\t\tout vehicleSpeed: vehicleSpeed;\n\t\tout vehiclePosition: vehiclePosition;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport vehicleDynamicsPort: vehicleDynamicsPort;\n\t\t\tperform updateVehicleDynamics.receiveInputs {\n\t\t\t\tin vehicleMass = vehicleDynamicsPort.vehicleMass;\n\t\t\t\tin wheelPower = vehicleDynamicsPort.wheelPower;\n\t\t\t\tin aerodynamicDragCoefficient = vehicleDynamicsPort.aerodynamicDragCoefficient;\n\t\t\t\tin rollingResistanceCoefficient = vehicleDynamicsPort.rollingResistanceCoefficient;\n\t\t\t\tin initialSpeed = vehicle",
    "package 'VehicleDynamics' {\n\tattribute def InitialPosition;\n\tattribute def InitialVelocity;\n\tattribute def VehicleMass;\n\tattribute def WheelEndDrivePower;\n\tattribute def TimeInterval;\n\tattribute def DragCoefficient;\n\tattribute def FrictionCoefficient;\n\tattribute def FinalVelocity;\n\tattribute def FinalPosition;\n\tattribute def Acceleration;\n\tport def InputData {\n\t\tin initialPosition: InitialPosition;\n\t\tin initialVelocity: InitialVelocity;\n\t\tin vehicleMass: VehicleMass;\n\t\tin wheelEndDrivePower: WheelEndDrivePower;\n\t\tin timeInterval: TimeInterval;\n\t\tin dragCoefficient: DragCoefficient;\n\t\tin frictionCoefficient: FrictionCoefficient;\n\t}\n\tport def OutputData {\n\t\tout finalVelocity: FinalVelocity;\n\t\tout finalPosition: FinalPosition;\n\t\tout acceleration: Acceleration;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport inputData: InputData;\n\t\t\tperform calculateDynamics.receiveInputData",
    "package 'VehicleMassManagement' {\n\tattribute def chassisMass;\n\tattribute def engineMass;\n\tattribute def gearboxMass;\n\tport def massCheckPort {\n\t\tin totalMass: Real;\n\t}\n\tport def warningPort {\n\t\tout warning: Boolean;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport massCheckPort: massCheckPort;\n\t\t\tport warningPort: warningPort;\n\t\t\tperform checkTotalMass.receiveTotalMass {\n\t\t\t\tin totalMass = massCheckPort.totalMass;\n\t\t\t}\n\t\t\tperform issueWarning.sendWarning {\n\t\t\t\tout warning = warningPort.warning;\n\t\t\t}\n\t\t\tinterface vehicleToSystem connect vehicle.massCheckPort to system.massCheckPort {\n\t\t\t\tref flow references checkTotalMass.totalMassFlow\n\t\t\t\t\tfrom source.totalMass to target.totalMass;\n\t\t\t}\n\t\t\tinterface vehicleToSystem connect vehicle.warningPort to system.warningPort {\n\t\t\t\tref flow references issueWarning.warningFlow\n\t\t\t\t\tfrom source.warning to target.",
    "package 'VehicleMassConstraint' {\n\tattribute def totalMassLimit: Real;\n\tattribute def componentMasses: Map<String, Real>;\n\tport def massInputPort {\n\t\tin mass: Real;\n\t\tout componentName: String;\n\t}\n\tport def massSumPort {\n\t\tin sum: Real;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport massInputPort: massInputPort;\n\t\t\tperform calculateTotalMass {\n\t\t\t\tin mass = massInputPort.mass;\n\t\t\t\tout componentName = massInputPort.componentName;\n\t\t\t}\n\t\t\tinterface userToSystem connect user.massInputPort to system.massInputPort {\n\t\t\t\tref flow references calculateTotalMassFlow\n\t\t\t\t\tfrom source.mass to target.mass;\n\t\t\t}\n\t\t}\n\t\tpart system {\n\t\t\tport massInputPort: ~massInputPort;\n\t\t\tport massSumPort: massSumPort;\n\t\t\tperform calculateTotalMass {\n",
    "package 'VehicleMassCompliance' {\n\tattribute def chassisMass;\n\tattribute def engineMass;\n\tattribute def transmissionMass;\n\tattribute def maxVehicleMass;\n\tport def massDataIn {\n\t\tin chassisMass: Mass;\n\t\tin engineMass: Mass;\n\t\tin transmissionMass: Mass;\n\t}\n\tport def complianceCheckOut {\n\t\tout complianceResult: Boolean;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport massDataIn: massDataIn;\n\t\t\tperform verifyVehicleMass {\n\t\t\t\tin chassisMass = massDataIn.chassisMass;\n\t\t\t\tin engineMass = massDataIn.engineMass;\n\t\t\t\tin transmissionMass = massDataIn.transmissionMass;\n\t\t\t\tout complianceResult = complianceCheckOut.complianceResult;\n\t\t\t}\n\t\t}\n\t\tpart chassis {\n\t\t\tport massDataIn: massDataIn;\n\t\t\tperform provideChassisMass {\n\t\t\t\tin chassisMass =",
    "package 'VehicleWeightManagement' {\n\tattribute def chassisWeight;\n\tattribute def engineWeight;\n\tattribute def transmissionWeight;\n\tattribute def maxWeightLimit;\n\tport def weightDataInput {\n\t\tin chassisWeight: chassisWeight;\n\t\tin engineWeight: engineWeight;\n\t\tin transmissionWeight: transmissionWeight;\n\t}\n\tport def weightSum {\n\t\tout totalWeight: Real;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport weightDataInput: weightDataInput;\n\t\t\tperform calculateTotalWeight {\n\t\t\t\tin chassisWeight = weightDataInput.chassisWeight;\n\t\t\t\tin engineWeight = weightDataInput.engineWeight;\n\t\t\t\tin transmissionWeight = weightDataInput.transmissionWeight;\n\t\t\t\tout totalWeight = weightSum.totalWeight;\n\t\t\t}\n\t\t\tport weightSum: weightSum;\n\t\t}\n\t\tpart regulatoryCompliance {\n\t\t\tport weightSum: ~weightSum;\n\t\t\tperform checkCompliance {\n\t\t\t\tin totalWeight = weightSum.totalWeight;\n\t\t\t\tout complianceStatus: Boolean;\n\t\t\t}\n",
    "package 'VehicleMassConstraints' {\n\tattribute def chassisMass;\n\tattribute def engineMass;\n\tattribute def transmissionMass;\n\tattribute def totalMass;\n\tport def massConstraintsPort {\n\t\tin chassisMass: chassisMass;\n\t\tin engineMass: engineMass;\n\t\tin transmissionMass: transmissionMass;\n\t\tout totalMass: totalMass;\n\t}\n\tport def dynamicConstraintsPort {\n\t\tin initialVelocity: InitialVelocity;\n\t\tin finalVelocity: FinalVelocity;\n\t\tin mass: Mass;\n\t\tin force: Force;\n\t\tin time: Time;\n\t\tout changeInVelocity: ChangeInVelocity;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport massConstraintsPort: massConstraintsPort;\n\t\t\tport dynamicConstraintsPort: dynamicConstraintsPort;\n\t\t\tperform verifyMassAndDynamics {\n\t\t\t\tin chassisMass = massConstraintsPort.chassisMass;\n\t\t\t\tin engineMass = massConstraintsPort.engineMass;\n\t\t\t\tin transmissionMass =",
    "package 'VehicleMaintenanceSystem' {\n\tattribute def VehicleID;\n\tattribute def MaintenanceTime;\n\tattribute def MaintenanceInterval;\n\tattribute def MaxTemperature;\n\tattribute def CurrentStatus;\n\tport def VehicleStatusPort {\n\t\tout vehicleStatus: VehicleStatus;\n\t}\n\tport def MaintenanceSchedulePort {\n\t\tout maintenanceSchedule: MaintenanceSchedule;\n\t}\n\tport def TemperatureSensorPort {\n\t\tin temperature: Temperature;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport VehicleStatusPort: VehicleStatusPort;\n\t\t\tperform setMaintenanceSchedule.sendVehicleStatus {\n\t\t\t\tout vehicleStatus = vehicleStatusPort.vehicleStatus;\n\t\t\t}\n\t\t\tinterface userToSystem connect user.VehicleStatusPort to system.VehicleStatusPort {\n\t\t\t\tref flow references setMaintenanceSchedule.vehicleStatusFlow\n\t",
    "package 'VehicleMassAndTorque' {\n\tattribute def maxMassLimit;\n\tattribute def curbWeight;\n\tattribute def fuelMass;\n\tattribute def engineTorque;\n\tattribute def transmissionTorque;\n\tport def massLimitCheck {\n\t\tin curbWeight: Real;\n\t\tin fuelMass: Real;\n\t\tout isWithinLimit: Boolean;\n\t}\n\tport def torqueTransmission {\n\t\tin engineTorque: Real;\n\t\tout transmissionTorque: Real;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport massLimitCheck: massLimitCheck;\n\t\t\tport torqueTransmission: torqueTransmission;\n\t\t\tperform checkMassAndTransmitTorque {\n\t\t\t\tin curbWeight, fuelMass, engineTorque;\n\t\t\t\tout isWithinLimit, transmissionTorque;\n\t\t\t}\n\t\t}\n\t}\n\taction checkMassAndTransmitTorque {\n\t\taction calculateTotalMass {\n\t\t\tin curbWeight, fuelMass;\n\t\t\tout totalMass: Real;\n\t\t}\n\t\taction checkMassLimit {\n\t\t\tin totalMass;\n\t\t\tout isWithinLimit;\n\t\t}\n\t\t",
    "package 'VehicleMassControl' {\n\tattribute def maxAllowedMassWithFullTank;\n\tattribute def maxAllowedMassWithEmptyTank;\n\tattribute def engineTorque;\n\tattribute def speedTorqueCurve;\n\tport def fuelTankMass;\n\tport def vehicleDryMass;\n\tport def engine;\n\tport def transmission;\n\tport def clutchInterface;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport fuelTankMass: ~fuelTankMass;\n\t\t\tport vehicleDryMass: ~vehicleDryMass;\n\t\t\tport engine: ~engine;\n\t\t\tport transmission: ~transmission;\n\t\t\tport clutchInterface: ~clutchInterface;\n\t\t\tperform massControl.calculateTotalMass {\n\t\t\t\tin fuelTankMass = fuelTankMass.mass;\n\t\t\t\tin vehicleDryMass = vehicleDryMass.mass;\n\t\t\t\tout totalMass = totalMass;\n\t\t\t}\n\t\t\tperform powertrainControl.transmitTorque {\n\t\t\t\tin engineTorque = engine.torque;\n\t\t\t\tout",
    "package 'VehicleSystem' {\n\tattribute def maxTotalMass;\n\tattribute def maxEmptyMass;\n\tattribute def engineTorque;\n\tport def massConstraints {\n\t\tin maxTotalMass: maxTotalMass;\n\t\tin maxEmptyMass: maxEmptyMass;\n\t}\n\tport def engineInterface {\n\t\tin engineTorque: engineTorque;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport massConstraints: massConstraints;\n\t\t\tport engineInterface: engineInterface;\n\t\t\tperform vehiclePerformance.checkMassConstraints {\n\t\t\t\tin maxTotalMass = massConstraints.maxTotalMass;\n\t\t\t\tin maxEmptyMass = massConstraints.maxEmptyMass;\n\t\t\t}\n\t\t\tperform vehiclePerformance.checkEngineInterface {\n\t\t\t\tin engineTorque = engineInterface.engineTorque;\n\t\t\t}\n\t\t}\n\t\tpart engine {\n\t\t\tport massConstraints: ~massConstraints;\n\t\t\tport engineInterface: ~engineInterface;\n\t\t\tperform enginePerformance.generateTorque {\n\t\t\t\tin maxTotalMass = massConstraints.maxTotalMass;\n\t\t\t\tin max",
    "package 'VehicleMassAndTorqueControl' {\n\tattribute def fuelTankFull;\n\tattribute def fuelTankEmpty;\n\tattribute def curbMass;\n\tattribute def fuelMass;\n\tattribute def totalVehicleMass;\n\tattribute def engineTorque;\n\tattribute def gearboxTorque;\n\tconstraint def vehicleMassLimit {\n\t\tif fuelTankFull then totalVehicleMass <= 2000 kg;\n\t\tif fuelTankEmpty then totalVehicleMass <= 1500 kg;\n\t}\n\tport def fuelTankFullPort {\n\t\tout fuelTankFull: fuelTankFull;\n\t}\n\tport def fuelTankEmptyPort {\n\t\tout fuelTankEmpty: fuelTankEmpty;\n\t}\n\tport def curbMassPort {\n\t\tout curbMass: curbMass;\n\t}\n\tport def fuelMassPort {\n\t\tout fuelMass: fuelMass;\n\t}\n\tport def totalVehicleMassPort {\n\t\tout totalVehicleMass: totalVehicleMass;\n\t}\n\tport def engineTorquePort {\n\t\tout engineTorque: engineTorque;\n\t}\n\tport def gearbox",
    "package 'VehicleDynamicsAnalyzer' {\n\tattribute def VehicleAttributes;\n\tattribute def DrivingCycle;\n\tattribute def PowerDemand;\n\tattribute def Acceleration;\n\tattribute def Speed;\n\tattribute def Position;\n\tattribute def FuelEconomy;\n\tattribute def EnergyConsumptionTarget;\n\tport def VehicleAttributesPort {\n\t\tout vehicleAttributes: VehicleAttributes;\n\t}\n\tport def DrivingCyclePort {\n\t\tout drivingCycle: DrivingCycle;\n\t}\n\tport def PowerDemandPort {\n\t\tout powerDemand: PowerDemand;\n\t}\n\tport def AccelerationPort {\n\t\tout acceleration: Acceleration;\n\t}\n\tport def SpeedPort {\n\t\t",
    "package 'VehicleFuelEconomySimulation' {\n\tattribute def UrbanScenario;\n\tattribute def HighwayScenario;\n\tattribute def VehicleParameters;\n\tattribute def DrivingTrajectory;\n\tattribute def SpeedVariation;\n\tattribute def FuelEconomy;\n\tport def UrbanScenarioPort {\n\t\tout urbanScenario: UrbanScenario;\n\t}\n\tport def HighwayScenarioPort {\n\t\tout highwayScenario: HighwayScenario;\n\t}\n\tport def VehicleParametersPort {\n\t\tout vehicleParameters: VehicleParameters;\n\t}\n\tport def DrivingTrajectoryPort {\n\t\tout drivingTrajectory: DrivingTrajectory;\n\t}\n\tport def SpeedVariationPort {\n\t\tout speedVariation: SpeedVariation;\n\t}\n\tport def FuelEconomyPort {\n\t\tout fuelEconomy: FuelEconomy;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport UrbanScenarioPort: UrbanScenario",
    "package 'EngineSelectionSystem' {\n\tattribute def EngineType;\n\tattribute def PerformanceIndicators;\n\tattribute def EvaluationFunction;\n\tattribute def RecommendedEngine;\n\tport def EngineTypePort {\n\t\tout engineType: EngineType;\n\t}\n\tport def PerformanceIndicatorsPort {\n\t\tout performanceIndicators: PerformanceIndicators;\n\t}\n\tport def EvaluationFunctionPort {\n\t\tout evaluationFunction: EvaluationFunction;\n\t}\n\tport def RecommendedEnginePort {\n\t\tout recommendedEngine: RecommendedEngine;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport EngineTypePort: EngineTypePort;\n\t\t\tperform selectEngine.receiveEngineType {\n\t\t\t\tout engineType = EngineTypePort.engineType;\n\t\t\t}\n\t\t\tport PerformanceIndicatorsPort: PerformanceIndicatorsPort;\n\t\t\tperform selectEngine.receivePerformanceIndicators {\n\t\t\t\tout performanceIndicators = PerformanceIndicatorsPort.performanceIndicators;\n\t\t\t}\n\t\t\tport EvaluationFunctionPort: EvaluationFunctionPort;\n\t\t\tperform selectEngine.receiveEvaluation",
    "package 'VehicleQualityCheck' {\n\tattribute def CurbWeightLimit;\n\tattribute def VehicleWeight;\n\tport def WeightDataCollectionPort {\n\t\tin weightData: VehicleWeight;\n\t}\n\tport def WeightProcessingPort {\n\t\tin processedData: VehicleWeight;\n\t}\n\tport def EvaluationPort {\n\t\tout evaluationResult: Boolean;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport weightDataCollectionPort: WeightDataCollectionPort;\n\t\t\tperform collectVehicleWeight.receiveWeightData {\n\t\t\t\tin weightData = weightDataCollectionPort.weightData;\n\t\t\t}\n\t\t}\n\t\tinterface userToSystem connect user.weightDataCollectionPort to system.weightDataCollectionPort {\n\t\t\tref flow references collectVehicleWeight.weightDataFlow\n\t\t\t\tfrom source.weightData to target.weightData;\n\t\t\t}\n\t\tpart system {\n\t\t\tport weightDataCollectionPort: ~WeightDataCollectionPort;\n\t\t\tport weightProcessingPort: WeightProcessingPort;\n\t\t\tport evaluationPort: EvaluationPort;\n\t\t\tperform checkVehicleQuality.processWeightData {\n\t\t\t",
    "package 'VehicleMassVerification' {\n\tattribute def Vehicle;\n\tattribute def WeighingEquipment;\n\tattribute def MassVerificationUnit;\n\tport def VehiclePort {\n\t\tin vehicle: Vehicle;\n\t}\n\tport def WeighingEquipmentPort {\n\t\tin vehicle: Vehicle;\n\t}\n\tport def MassVerificationUnitPort {\n\t\tin vehicle: Vehicle;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport vehiclePort: VehiclePort;\n\t\t\tperform inspectVehicle.receiveVehicle {\n\t\t\t\tin vehicle = vehiclePort.vehicle;\n\t\t\t}\n\t\t}\n\t\tpart weighingEquipment {\n\t\t\tport vehiclePort: ~VehiclePort;\n\t\t\tperform measureMass.measureVehicle {\n\t\t\t\tin vehicle = vehiclePort.vehicle;\n\t\t\t\tout mass: Mass;\n\t\t\t}\n\t\t\tport massPort: MassPort;\n\t\t}\n\t\t",
    "package 'VehicleTransportationSystem' {\n\tattribute def numPassengers;\n\tattribute def numDrivers;\n\tattribute def vehicleCapacity;\n\tattribute def environmentalFactors;\n\tattribute def infrastructureCompatibility;\n\tattribute def rideExperience;\n\tport def userInput {\n\t\tin userInput: UserInput;\n\t}\n\tport def vehicleState {\n\t\tout vehicleState: VehicleState;\n\t}\n\tport def environmentalSensors {\n\t\tin environmentalSensors: EnvironmentalSensors;\n\t}\n\tport def infrastructureInterface {\n\t\tout infrastructureCompatibility: InfrastructureCompatibility;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport userInput: UserInput;\n\t\t\tperform enterExitVehicle.receiveUserInput {\n\t\t\t\tin userInput = userInput;\n\t\t\t}\n\t\t\tport vehicleState: VehicleState;\n\t\t\tperform enterExitVehicle.updateVehicleState {\n\t\t\t\tout vehicleState = vehicleState;\n\t\t\t}\n\t\t}\n\t\tpart vehicle {\n\t\t\tport vehicleState",
    "package 'TransportationSystem' {\n\tattribute def numPassengers;\n\tattribute def numDrivers;\n\tattribute def vehicle;\n\tattribute def destination;\n\tattribute def startingPoint;\n\tattribute def environmentalConditions;\n\tattribute def fuelLevel;\n\tport def enterVehicle;\n\tport def operateVehicle;\n\tport def refuel;\n\tport def exitVehicle;\n\tport def safetyCheck;\n\tpart context {\n\t\tpart user {\n\t\t\tport enterVehicle: enterVehicle;\n\t\t\tport operateVehicle: operateVehicle;\n\t\t\tport exitVehicle: exitVehicle;\n\t\t\tport safetyCheck: safetyCheck;\n\t\t}\n\t\tpart vehicle {\n\t\t\tport enterVehicle: ~enterVehicle;\n\t\t\tport operateVehicle: ~operateVehicle;\n\t\t\tport refuel: ~refuel;\n\t\t\tport exitVehicle: ~exitVehicle;\n\t\t}\n\t\tpart environmentalConditions {\n\t\t\tport operateVehicle: ~operateVehicle;\n\t\t\tport safetyCheck: ~safetyCheck;\n\t\t}\n\t\tpart fuelStation {\n\t\t\tport refuel: ~",
    "package 'VehicleProductLineConfiguration' {\n\tattribute def EngineType;\n\tattribute def CylinderDiameter;\n\tattribute def TransmissionType;\n\tattribute def EngineTypeEnum {\n\t\tenumeration 'FourCylinder';\n\t\tenumeration 'SixCylinder';\n\t}\n\tattribute def CylinderDiameterEnum {\n\t\tenumeration 'Small';\n\t\tenumeration 'Large';\n\t}\n\tattribute def TransmissionTypeEnum {\n\t\tenumeration 'Manual';\n\t\tenumeration 'Automatic';\n\t}\n\tport def EngineTypePort {\n\t\tout engineType: EngineType;\n\t}\n\tport def CylinderDiameterPort {\n\t\tout cylinderDiameter: CylinderDiameter;\n\t}\n\tport def TransmissionTypePort {\n\t\tout transmissionType: TransmissionType;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport engineTypePort: EngineTypePort;\n\t\t\tport",
    "package 'EngineConfigurable' {\n\tattribute def CylinderQuantity;\n\tattribute def CylinderDiameter;\n\tport def CylinderQuantityPort {\n\t\tout cylinderQuantity: CylinderQuantity;\n\t}\n\tport def CylinderDiameterPort {\n\t\tout cylinderDiameter: CylinderDiameter;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport CylinderQuantityPort: CylinderQuantityPort;\n\t\t\tport CylinderDiameterPort: CylinderDiameterPort;\n\t\t\tperform configureEngine.sendCylinderQuantityAndDiameter {\n\t\t\t\tout cylinderQuantity = CylinderQuantityPort.cylinderQuantity;\n\t\t\t\tout cylinderDiameter = CylinderDiameterPort.cylinderDiameter;\n\t\t\t}\n\t\t}\n\t\tpart engine {\n\t\t\tport CylinderQuantityPort: ~CylinderQuantityPort;\n\t\t\tport CylinderDiameterPort: ~CylinderDiameterPort;\n\t\t\tperform configureEngine.configureEngine {\n\t\t\t\tin cylinderQuantity = CylinderQuantityPort.cylinderQuantity",
    "package 'AutomotiveConfigurationSpace' {\n\tattribute def EngineType;\n\tattribute def TransmissionType;\n\tattribute def CylinderDiameter;\n\tport def EngineTypePort {\n\t\tout engineType: EngineType;\n\t}\n\tport def TransmissionTypePort {\n\t\tout transmissionType: TransmissionType;\n\t}\n\tport def CylinderDiameterPort {\n\t\tout cylinderDiameter: CylinderDiameter;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport EngineTypePort: EngineTypePort;\n\t\t\tport TransmissionTypePort: TransmissionTypePort;\n\t\t\tport CylinderDiameterPort: CylinderDiameterPort;\n\t\t\tperform selectEngineAndTransmission.sendEngineTypeAndTransmission {\n\t\t\t\tout engineType = EngineTypePort.engineType;\n\t\t\t\tout transmissionType = TransmissionTypePort.transmissionType;\n\t\t\t\tout cylinderDiameter = CylinderDiameterPort",
    "package 'SystemAssembly' {\n\tattribute def ComputerSubsystem;\n\tattribute def StorageSubsystem;\n\tport def ComputerSubsystemPort {\n\t\tout message: Message;\n\t\tout data: Data;\n\t}\n\tport def StorageSubsystemPort {\n\t\tin message: Message;\n\t\tin data: Data;\n\t}\n\tpart context {\n\t\tpart software {\n\t\t\tport messagePort: MessagePort;\n\t\t\tport dataPort: DataPort;\n\t\t\tperform defineMessageFormat {\n\t\t\t\tout message: Message;\n\t\t\t}\n\t\t\tperform defineDataFormat {\n\t\t\t\tout data: Data;\n\t\t\t}\n\t\t}\n\t\tpart computerSubsystem {\n\t\t\tport messagePort: ~MessagePort;\n\t\t\tport dataPort: ~DataPort;\n\t\t\tperform processMessage {\n\t\t\t\tin message = messagePort.message;\n\t\t\t\tout processedMessage: Message;\n\t\t\t}\n\t\t\tperform processData {\n\t\t\t\tin data = dataPort.data;\n\t\t\t\tout processedData: Data;\n\t\t\t}\n\t\t}\n\t\tpart storageSubsystem {\n\t\t\tport messagePort: ~Message",
    "package 'PowertrainSystem' {\n\tattribute def Power;\n\tattribute def Torque;\n\tport def PowerPort {\n\t\tout power: Power;\n\t}\n\tport def TorquePort {\n\t\tout torque: Torque;\n\t}\n\tpart context {\n\t\tpart logicalLayer {\n\t\t\tport powerPort: PowerPort;\n\t\t\tport torquePort: TorquePort;\n\t\t\tperform generateTorque.receivePower {\n\t\t\t\tin power = powerPort.power;\n\t\t\t\tout torque = torquePort.torque;\n\t\t\t}\n\t\t}\n\t\tpart physicalLayer {\n\t\t\tport powerPort: ~PowerPort;\n\t\t\tport torquePort: ~TorquePort;\n\t\t\tperform integrateFunctions.receivePowerAndTorque {\n\t\t\t\tin power = powerPort.power;\n\t\t\t\tin torque = torquePort.torque;\n\t\t\t}\n\t\t}\n\t\tpart powerUnit {\n\t\t\tport powerPort: ~PowerPort;\n\t\t\tport torquePort: ~",
    "package 'PowerTransmissionSystem' {\n\tattribute def Power;\n\tattribute def Torque;\n\tport def PowerPort {\n\t\tout power: Power;\n\t}\n\tport def TorquePort {\n\t\tout torque: Torque;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport powerPort: PowerPort;\n\t\t\tport torquePort: TorquePort;\n\t\t\tperform powerAndTorque.receivePowerAndTorque {\n\t\t\t\tin power = powerPort.power;\n\t\t\t\tin torque = torquePort.torque;\n\t\t\t}\n\t\t}\n\t\tpart logicalTorqueGenerator {\n\t\t\tport powerPort: ~PowerPort;\n\t\t\tport torquePort: ~TorquePort;\n\t\t\tperform generateTorque.generateTorque {\n\t\t\t\tin power = powerPort.power;\n\t\t\t\tout torque = torquePort.torque;\n\t\t\t}\n\t\t}\n\t\tpart physicalPowertrain {\n\t\t\tport powerPort: ~PowerPort;\n\t\t\tport torquePort: ~TorquePort;\n\t\t",
    "package 'VehicleFeatureAnnotation' {\n\tattribute def SafetyFeatures;\n\tattribute def SecurityFeatures;\n\tport def SafetyFeaturesPort {\n\t\tout safetyFeatures: SafetyFeatures;\n\t}\n\tport def SecurityFeaturesPort {\n\t\tout securityFeatures: SecurityFeatures;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport safetyFeaturesPort: SafetyFeaturesPort;\n\t\t\tport securityFeaturesPort: SecurityFeaturesPort;\n\t\t\tperform identifyAndManageFeatures.receiveSafetyFeatures {\n\t\t\t\tin safetyFeatures = safetyFeaturesPort.safetyFeatures;\n\t\t\t}\n\t\t\tperform identifyAndManageFeatures.receiveSecurityFeatures {\n\t\t\t\tin securityFeatures = securityFeaturesPort.securityFeatures;\n\t\t\t}\n\t\t}\n\t\tinterface vehicleToSystem connect vehicle.safetyFeaturesPort to safetyFeaturesPort {\n\t\t\tref flow",
    "package 'VehicleDynamicsSimulation' {\n\tattribute def InitialVelocity;\n\tattribute def InitialPosition;\n\tattribute def Acceleration;\n\tattribute def TimeStep;\n\tattribute def ModelCenterIntegration;\n\tport def InputData {\n\t\tin initialVelocity: InitialVelocity;\n\t\tin initialPosition: InitialPosition;\n\t\tin acceleration: Acceleration;\n\t\tin timeStep: TimeStep;\n\t}\n\tport def OutputData {\n\t\tout velocity: Velocity;\n\t\tout position: Position;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport inputDataPort: InputData;\n\t\t\tperform inputData.sendInputData {\n\t\t\t\tin initialVelocity = inputDataPort.initialVelocity;\n\t\t\t\tin initialPosition = inputDataPort.initialPosition;\n\t\t\t\tin acceleration = inputDataPort.acceleration;\n\t\t\t\tin timeStep = inputDataPort.timeStep;\n\t\t\t}\n\t\t\tinterface userToSystem connect user.inputDataPort to system.inputDataPort {\n\t\t\t\tref flow references sendInputDataFlow\n\t\t\t\t\tfrom source.inputData to target.inputData;\n\t\t\t}\n\t\t",
    "package 'Car Safety Compliance' {\n\tattribute def SeatBelts;\n\tattribute def Airbag;\n\tattribute def Bumper;\n\tattribute def KeylessEntry;\n\tattribute def Wheels;\n\tattribute def ABS;\n\tattribute def SafetyFeatures;\n\tattribute def MandatorySafetyFeatures;\n\tport def SeatBeltsPort {\n\t\tout seatBelts: SeatBelts;\n\t}\n\tport def AirbagPort {\n\t\tout airbag: Airbag;\n\t}\n\tport def BumperPort {\n\t\tout bumper: Bumper;\n\t}\n\tport def KeylessEntryPort {\n\t\tout keylessEntry: KeylessEntry;\n\t}\n\tport def WheelsPort {\n\t\t",
    "package 'VehicleSafetyCompliance' {\n\tattribute def safetyFeatures;\n\tattribute def mandatoryFeatures;\n\tattribute def optionalFeatures;\n\tport def safetyFeaturesPort {\n\t\tout safetyFeatures: safetyFeatures;\n\t}\n\tport def mandatoryFeaturesPort {\n\t\tout mandatoryFeatures: mandatoryFeatures;\n\t}\n\tport def optionalFeaturesPort {\n\t\tout optionalFeatures: optionalFeatures;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport safetyFeaturesPort: safetyFeaturesPort;\n\t\t\tperform categorizeSafetyFeatures.sendSafetyFeatures {\n\t\t\t\tout safetyFeatures = safetyFeaturesPort.safetyFeatures;\n\t\t\t}\n\t\t\tport mandatoryFeaturesPort: mandatoryFeaturesPort;\n\t\t\tport optionalFeaturesPort: optionalFeaturesPort;\n\t\t}\n\t\tpart seatBelts {\n",
    "package 'RiskManagementSystem' {\n\tattribute def Risk;\n\tattribute def Failure;\n\tattribute def Cause;\n\tattribute def Probability;\n\tattribute def Severity;\n\tattribute def Impact;\n\tattribute def Scenario;\n\tport def RiskInput {\n\t\tin risk: Risk;\n\t\tin cause: Cause;\n\t\tin probability: Probability;\n\t\tin severity: Severity;\n\t\tin impact: Impact;\n\t\tin scenario: Scenario;\n\t}\n\tport def RiskOutput {\n\t\tout risk: Risk;\n\t\tout cause: Cause;\n\t\tout probability: Probability;\n\t\tout severity: Severity;\n\t\tout impact: Impact;\n\t\tout scenario: Scenario;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport riskInput: RiskInput;\n\t\t\tperform manageRisks.receiveRiskInput {\n\t\t\t\tin risk = riskInput.risk;\n\t\t\t\tin cause = riskInput.cause;\n\t\t\t\tin probability = riskInput.probability;\n\t\t\t\tin severity = riskInput.severity;\n\t\t\t\tin impact = riskInput.impact;\n\t\t\t\tin",
    "package 'RiskManagementSystem' {\n\tattribute def Scenario;\n\tattribute def Cause;\n\tattribute def Failure;\n\tattribute def Probability;\n\tattribute def Severity;\n\tattribute def RiskScenario;\n\tport def ScenarioPort {\n\t\tout scenario: Scenario;\n\t}\n\tport def CausePort {\n\t\tout cause: Cause;\n\t}\n\tport def FailurePort {\n\t\tout failure: Failure;\n\t}\n\tport def ProbabilityPort {\n\t\tout probability: Probability;\n\t}\n\tport def SeverityPort {\n\t\tout severity: Severity;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport ScenarioPort: ScenarioPort;\n\t\t\tperform identifyScenario.sendScenario {\n\t\t\t\tout scenario = ScenarioPort.scenario;\n\t\t\t}\n\t\t\tport CausePort: CausePort;\n\t\t\tperform identifyCause.sendCause {\n\t\t\t\tout cause = CausePort.cause;\n\t\t\t}\n\t",
    "package 'RiskAnalysisSystem' {\n\tattribute def BatteryLevel;\n\tattribute def FailureProbability;\n\tattribute def Threshold;\n\tattribute def SeverityLevel;\n\tattribute def ShutdownState;\n\tport def BatteryLevelPort {\n\t\tout batteryLevel: BatteryLevel;\n\t}\n\tport def FailureProbabilityPort {\n\t\tout failureProbability: FailureProbability;\n\t}\n\tport def ThresholdPort {\n\t\tout threshold: Threshold;\n\t}\n\tport def SeverityLevelPort {\n\t\tout severityLevel: SeverityLevel;\n\t}\n\tport def ShutdownStatePort {\n\t\tout shutdownState: ShutdownState;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport BatteryLevelPort: BatteryLevelPort;\n\t\t\tport",
    "package 'SystemStructure' {\n\tattribute def System;\n\tattribute def Subsystems;\n\tattribute def Components;\n\tport def SystemPort {\n\t\tout system: System;\n\t}\n\tport def SubsystemsPort {\n\t\tout subsystems: Subsystems;\n\t}\n\tport def ComponentsPort {\n\t\tout components: Components;\n\t}\n\tpart context {\n\t\tpart system {\n\t\t\tport systemPort: SystemPort;\n\t\t\tperform decomposeSystem {\n\t\t\t\tout subsystems = subsystemsPort.subsystems;\n\t\t\t}\n\t\t}\n\t\tpart subsystems {\n\t\t\tport subsystemsPort: SubsystemsPort;\n\t\t\tperform decomposeSubsystem {\n\t\t\t\tout components = componentsPort.components;\n\t\t\t}\n\t\t}\n\t\tpart components {\n\t\t\tport componentsPort: ComponentsPort;\n\t\t\tperform decomposeComponent {\n\t\t\t\tout component: Components;\n\t\t\t}\n\t\t}\n\t\tinterface systemToSubsystems connect system.systemPort to subsystems.subsystemsPort {\n\t\t\tref flow references decomposeSystemFlow",
    "package 'AutomotiveSystem' {\n\tpart rootComponent {\n\t\tname \"Vehicle\";\n\t\tattribute def safety: Boolean;\n\t\tport def systemInterface {\n\t\t\tout vehicleState: VehicleState;\n\t\t\tin controlSignal: ControlSignal;\n\t\t\tout safetySignal: SafetySignal;\n\t\t}\n\t\tpart context {\n\t\t\tpart subsystems {\n\t\t\t\tport def subsystemInterface {\n\t\t\t\t\tout subsystemState: SubsystemState;\n\t\t\t\t\tin controlSignal: ControlSignal;\n\t\t\t\t\tout safetySignal: Sa",
    "package 'AutomotiveDomain' {\n\tcomment \"This package provides standardized definitions and annotations for fundamental concepts and elements in the automotive domain.\"\n\talias '汽车' 'Car';\n\tattribute def Car {\n\t\tcomment \"Core component in the automotive domain, representing an automobile.\"\n\t}\n\tattribute def Torque {\n\t\tcomment \"Physical quantity representing the rotational force applied to a component, crucial for automotive performance.\"\n\t}\n\tpart context {\n\t\tpart Car {\n\t\t\tport def TorquePort {\n\t\t\t\tout torque: Torque;\n\t\t\t}\n\t\t}\n\t\tpart TorqueSensor {\n\t\t\tport def TorquePort {\n\t\t\t\tin torque: Torque;\n\t\t\t}\n\t\t}\n\t\tpart Engine {\n\t\t\tport def TorquePort {\n\t\t\t\tout torque: Torque;\n\t\t\t}\n\t\t}\n\t\tpart Transmission {\n\t\t\tport def TorquePort {\n\t\t\t\tin torque: Torque;\n\t\t\t}\n\t\t}\n\t\tpart Wheel {\n\t\t\tport def TorquePort {\n",
    "package 'DocumentManagementPlatform' {\n\tattribute def Automobile;\n\tattribute def Car;\n\tattribute def TorqueValue;\n\tattribute def ISQ;\n\tport def UserInterface {\n\t\tin userInput: Automobile;\n\t\tout userOutput: Automobile;\n\t}\n\tport def DataStorage {\n\t\tin dataInput: Automobile;\n\t\tout dataOutput: Automobile;\n\t}\n\tport def SearchInterface {\n\t\tin searchQuery: Automobile;\n\t\tout searchResult: Automobile;\n\t}\n\tport def DocumentationInterface {\n\t\tin documentInput: Automobile;\n\t\tout documentOutput: Automobile;\n\t\tout documentAnnotation: Annotation;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport userInterface: UserInterface;\n\t\t\tperform enterData.receiveUserInput {\n\t\t\t\tin userInput = userInterface.userInput;\n\t\t\t}\n\t\t\tport dataStorage:",
    "package 'VehicleTorqueManagement' {\n\tattribute def Car;\n\tattribute def TorqueValue;\n\tattribute def Torque;\n\tport def CarPort {\n\t\tout car: Car;\n\t}\n\tport def TorqueValuePort {\n\t\tout torqueValue: TorqueValue;\n\t}\n\tport def TorquePort {\n\t\tout torque: Torque;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport carPort: CarPort;\n\t\t\tperform manageVehicleData.sendCar {\n\t\t\t\tout car = carPort.car;\n\t\t\t}\n\t\t\tport torqueValuePort: TorqueValuePort;\n\t\t\tperform manageVehicleData.sendTorqueValue {\n\t\t\t\tout torqueValue = torqueValuePort.torqueValue;\n\t\t\t}\n\t\t\tport torquePort: TorquePort;\n\t\t\tperform manageVehicleData.sendTorque {\n\t\t\t\tout torque = torquePort.torque;\n\t\t\t}\n\t\t}\n\t\tinterface userToSystem connect user.carPort to system.carPort {\n\t\t\tref flow references manageVehicleData.carFlow\n\t\t\t\tfrom source.car to target",
    "package 'VehicleSystem' {\n\tattribute def VehicleSize;\n\tattribute def EngineCylinderCount;\n\tport def VehicleSizePort {\n\t\tout vehicleSize: VehicleSize;\n\t}\n\tport def EngineCylinderCountPort {\n\t\tout engineCylinderCount: EngineCylinderCount;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport vehicleSizePort: VehicleSizePort;\n\t\t\tperform configureEngineCylinders.sendVehicleSize {\n\t\t\t\tout vehicleSize = vehicleSizePort.vehicleSize;\n\t\t\t}\n\t\t\tport engineCylinderCountPort: EngineCylinderCountPort;\n\t\t}\n\t\tpart engine {\n\t\t\tport engineCylinderCountPort: ~EngineCylinderCountPort;\n\t\t\tperform configureEngineCylinders.configureEngineCylinders {\n\t\t\t\tin vehicleSize = vehicleSizePort.vehicleSize;\n\t\t\t\tout engineCylinderCount = engineCylinderCountPort.engineCylinderCount;\n\t\t\t}\n\t\t}\n\t\tpart cylinder {\n\t\t\tport engineCylinderCountPort: ~EngineCylinderCountPort",
    "package 'FuelManagementSystem' {\n\tattribute def FuelFlow;\n\tattribute def TemperatureMonitoring;\n\tport def FuelFlowPort {\n\t\tout fuelFlow: FuelFlow;\n\t}\n\tport def TemperatureMonitoringPort {\n\t\tin temperature: Temperature;\n\t}\n\tpart context {\n\t\tpart tank {\n\t\t\tport fuelFlowPort: FuelFlowPort;\n\t\t\tperform deliverFuel {\n\t\t\t\tout fuelFlow = fuelFlowPort.fuelFlow;\n\t\t\t}\n\t\t}\n\t\tpart engine {\n\t\t\tport fuelFlowPort: ~FuelFlowPort;\n\t\t\tport temperatureMonitoringPort: TemperatureMonitoringPort;\n\t\t\tperform consumeFuel {\n\t\t\t\tin fuelFlow = fuelFlowPort.fuelFlow;\n\t\t\t\tout temperature = temperatureMonitoringPort.temperature;\n\t\t\t}\n\t\t}\n\t\tpart fuelInterface {\n\t\t\tport fuelFlowPort: ~FuelFlowPort;\n\t\t\tport temperatureMonitoringPort: ~TemperatureMonitoringPort;\n\t\t\tperform manageFuelFlow {\n\t\t\t\tin fuelFlow = fuelFlowPort.fuelFlow",
    "package 'VehicleStructuralArchitecture' {\n\tattribute def VehicleMass;\n\tattribute def FrontAxleAssembly;\n\tattribute def RearAxleAssembly;\n\tattribute def FrontAxle;\n\tattribute def RearAxle;\n\tattribute def FrontWheel;\n\tattribute def RearWheel;\n\tattribute def SteeringAngle;\n\tport def VehiclePort {\n\t\tout vehicle: Vehicle;\n\t}\n\tport def AxleAssemblyPort {\n\t\tout axleAssembly: AxleAssembly;\n\t}\n\tport def AxlePort {\n\t\tout axle: Axle;\n\t}\n\tport def WheelPort {\n\t\tout wheel: Wheel;\n\t}\n\tport def SteeringAnglePort {\n\t\tout steeringAngle: SteeringAngle;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport vehiclePort: VehiclePort;\n\t\t\tperform defineVehicleMass {\n\t\t"
]