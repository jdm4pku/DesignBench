[
    "\n```sysml\n// Define the basic information of vehicles\nPackage VehiclePackage {\n    // Define the vehicle class\n    Class Vehicle {\n        // Define vehicle mass\n        Real vehicleMass;\n        // Define current status\n        String currentStatus;\n        // Define gear setting\n        String gearSetting;\n        // Define accelerator pedal position\n        Real acceleratorPedalPosition;\n        // Define engine component\n        Engine engine;\n        // Define driver\n        Driver driver;\n    }\n}\n\n// Define the engine component\nPackage EnginePackage {\n    // Define the engine class\n    Class Engine {\n        // Define engine type\n        String engineType;\n        // Define engine power\n        Real enginePower;\n    }\n}\n\n// Define the driver component\nPackage DriverPackage {\n    // Define the driver class\n    Class Driver {\n        // Define driver name\n        String driverName;\n        // Define driver license number\n        String driverLicenseNumber;\n    }\n}\n```\n\nThis SysML model defines the basic structure for vehicles, including their mass, current status, gear setting, accelerator pedal position, and the associated engine and driver components. It also separates the engine",
    "\n```sysml\n// Define the system\nSystem mySystem {\n  // Define the personnel entity\n  Entity Personnel {\n    // Define the properties of personnel\n    String name;\n    Integer age;\n  }\n\n  // Define the engine entity\n  Entity Engine {\n    // Define the properties of engine\n    String model;\n    Integer horsepower;\n  }\n\n  // Define the vehicle classifier\n  Classifier Vehicle {\n    // Define the properties of vehicle\n    String type;\n    String name;\n\n    // Define the relationships\n    Relates Personnel driver;\n    Relates Engine powerSource;\n  }\n\n  // Define the manually operated vehicle subclass\n  Classifier ManuallyOperatedVehicle extends Vehicle {\n    // Define the properties specific to manually operated vehicles\n    Boolean requiresDriver;\n  }\n\n  // Define the powered vehicle subclass\n  Classifier PoweredVehicle extends Vehicle {\n    // Define the properties specific to powered vehicles\n    Boolean hasEngine;\n  }\n\n  // Define the manually operated powered vehicle subclass\n  Classifier ManuallyOperatedPoweredVehicle extends Vehicle {\n    // Define the properties specific to manually operated powered vehicles\n   ",
    "\n```sysml\n// Define the Vehicle structure\n\n// Define the Vehicle component\nComponent Vehicle {\n  // Define the major components of the vehicle\n  Composition engine -> Engine\n  Composition transmission -> Transmission\n  Composition wheel1 -> Wheel\n  Composition wheel2 -> Wheel\n  Composition wheel3 -> Wheel\n  Composition wheel4 -> Wheel\n}\n\n// Define the Engine component\nComponent Engine {\n  // Define properties and behaviors of the Engine\n}\n\n// Define the Transmission component\nComponent Transmission {\n  // Define properties and behaviors of the Transmission\n}\n\n// Define the Wheel component\nComponent Wheel {\n  // Define properties and behaviors of the Wheel\n}\n```\n",
    "\n```sysml\n// Define the Vehicle class\nclass Vehicle {\n    // Define the Engine class\n    class Engine {\n        // Define the SmallEngine class, which extends Engine\n        class SmallEngine extends Engine {\n            // Define the number of cylinders\n            numCylinders = 4;\n        }\n        // Define the LargeEngine class, which extends Engine\n        class LargeEngine extends Engine {\n            // Define the number of cylinders\n            numCylinders = 6;\n        }\n    }\n}\n\n// Define the VehicleType enumeration\nenum VehicleType {\n    SmallVehicle,\n    LargeVehicle\n}\n\n// Define the VehicleCatalog class\nclass VehicleCatalog {\n    // Define a list to store vehicles\n    list<Vehicle> vehicles;\n\n    // Define a method to add a vehicle to the catalog\n    addVehicle(Vehicle vehicle) {\n        vehicles->add(vehicle);\n    }\n}\n\n// Define the Vehicle class\nclass Vehicle {\n    // Define the type of vehicle\n    VehicleType type;\n    // Define the engine of the vehicle\n    Engine engine;\n}\n\n// Define the SmallVehicle class, which extends Vehicle",
    "\n```sysml\n// Define the TrafficSignal component\ncomponent TrafficSignal\n{\n    // Define the possible states of the traffic signal\n    enum TrafficLightState\n    {\n        Green,\n        Yellow,\n        Red\n    }\n\n    // Define the current state of the traffic signal\n    TrafficLightState currentState\n\n    // Define the specific traffic signal component that is always in the \"go\" state\n    component AlwaysGreenTrafficSignal\n    {\n        currentState = TrafficLightState.Green\n    }\n}\n```",
    "\n```sysml\n// Define the classification enumeration\nclassification Classification {\n    Unclassified : uncl\n    Confidential : conf\n    Secret : secr\n}\n\n// Define the grade enumeration\nenumeration Grade {\n    A : 4.0\n    B : 3.0\n    C : 2.0\n    D : 1.0\n    F : 0.0\n}\n\n// Define the information element with classification and grade\nelement Information {\n    classification Classification\n    grade Grade\n}\n```",
    "\n```sysml\n// Define the system\nSystem mySystem\n{\n    // Define the small vehicle\n    Component smallVehicle\n    {\n        // Define the engine for the small vehicle\n        Component smallEngine\n        {\n            // Define the cylinders in the small engine\n            ComponentDef cylinder\n            {\n                // Define the number of cylinders in the small engine\n                Property cylinders : Integer = 4;\n            }\n        }\n    }\n\n    // Define the large vehicle\n    Component largeVehicle\n    {\n        // Define the engine for the large vehicle\n        Component largeEngine\n        {\n            // Define the cylinders in the large engine\n            ComponentDef cylinder\n            {\n                // Define the number of cylinders in the large engine\n                Property cylinders : Integer = 6;\n            }\n        }\n    }\n}\n```",
    "\n```sysml\n// Define the System\nSystem VehicleModelingSystem {\n    // Define the elements\n    Element Vehicle {\n        // Define attributes\n        Attribute driverInfo : Driver\n        Attribute fuelTank : FuelTank\n        Attribute personnelInfo : Personnel\n        Attribute fuelInfo : Fuel\n    }\n\n    Element Driver {\n        // Define attributes\n        Attribute name : String\n        Attribute license : String\n    }\n\n    Element FuelTank {\n        // Define attributes\n        Attribute capacity : Real\n        Attribute fuelType : String\n    }\n\n    Element Personnel {\n        // Define attributes\n        Attribute name : String\n        Attribute role : String\n    }\n\n    Element Fuel {\n        // Define attributes\n        Attribute type : String\n        Attribute quantity : Real\n    }\n\n    // Define the associations\n    Association Vehicle -- Vehicle.driverInfo : Driver\n    Association Vehicle -- Vehicle.fuelTank : FuelTank\n    Association Vehicle -- Vehicle.personnelInfo : Personnel\n    Association Vehicle -- Vehicle.fuelInfo : Fuel\n}\n```",
    "\n```sysml\n// Define the system\nSystem mySystem {\n    // Define the components\n    Component wheelAssembly {\n        // Define the components of the wheel assembly\n        Component wheelBearingUnit {\n            // Additional properties and relationships can be defined here\n        }\n        Component tire {\n            // Additional properties and relationships can be defined here\n        }\n        Component bead {\n            // Additional properties and relationships can be defined here\n        }\n        Component hub {\n            // Define the components of the hub\n            Component rim {\n                // Additional properties and relationships can be defined here\n            }\n            Component boltMountingHole {\n                // Additional properties and relationships can be defined here\n            }\n            Component threadedHole {\n                // Additional properties and relationships can be defined here\n            }\n            Component boltConnection {\n                // Additional properties and relationships can be defined here\n            }\n        }\n    }\n\n    // Define the relationships between components\n    // Example: Relationship between tire and hub\n    Relationship tireToHub {\n        source wheelAssembly.tire\n        target wheelAssembly.hub\n        description \"Sealed and fastened by pressing its two beads onto the two",
    "\n```sysml\n// Define the system\nSystem mySystem {\n    // Define the components\n    Component fuelTankAssembly;\n    Component engine;\n\n    // Define the ports\n    Port fuelSupplyPort {\n        direction = Output;\n        type = Flow;\n    }\n    Port fuelReturnPort {\n        direction = Input;\n        type = Flow;\n    }\n    Port temperaturePort {\n        direction = Output;\n        type = Temperature;\n    }\n\n    // Define the connections\n    Connection fuelTransfer {\n        source = fuelTankAssembly.fuelSupplyPort;\n        target = engine.fuelSupplyPort;\n    }\n    Connection temperatureTransmission {\n        source = fuelTankAssembly.temperaturePort;\n        target = this.temperaturePort;\n    }\n\n    // Define the interactions\n    Interaction fuelManagementInteraction {\n        participant fuelTankAssembly;\n        participant engine;\n        useCase obtainRealTimeData {\n            // Define the interactions within the use case\n        }\n    }\n}\n```",
    "\n```sysml\n// Define the system\nSystem mySystem {\n    name \"Vehicle Configuration Model\"\n    description \"This system is designed for modeling configuration variants of vehicles.\"\n}\n\n// Define the vehicle component\nComponent myVehicle {\n    name \"Vehicle\"\n    description \"The core components include the complete vehicle, front and rear axles, and tires.\"\n    mass 1750 kg\n}\n\n// Define the front axle component\nComponent myFrontAxle {\n    name \"Front Axle\"\n    description \"A front axle with two ordered tires.\"\n    mass 100 kg\n    myVehicle.parts myFrontAxle\n}\n\n// Define the rear axle component\nComponent myRearAxle {\n    name \"Rear Axle\"\n    description \"A rear axle with two ordered tires.\"\n    mass 100 kg\n    myVehicle.parts myRearAxle\n}\n\n// Define the tire component\nComponent myTire {\n    name \"Tire\"\n    description \"A tire for the vehicle.\"\n    mass 5 kg\n    myFrontAxle.parts myTire\n    myRearAxle",
    "\n```sysml\n// Define the system\nSystem mySystem {\n    // Define the vehicle\n    Component vehicle {\n        // Define the coupling mechanism\n        Component hitch {\n            // Define the coupling ball\n            Component couplingBall {\n                // Define the trailer\n                Component trailer {\n                    // Define the connector in the hitch\n                    Component connector {\n                        // Define the reference to the coupling ball\n                        Reference couplingBallReference : couplingBall;\n                    }\n                }\n            }\n        }\n    }\n}\n```\n",
    "\n```sysml\n// Define the system\nSystem VehiclePowerTransmissionSystem {\n    // Define the components\n    Component Engine {\n        Port FuelCommandPort : CommandPort;\n        Port PowerPort : PowerPort;\n        Port ClutchPort : ClutchPort;\n    }\n\n    Component Transmission {\n        Port PowerPort : PowerPort;\n        Port ClutchPort : ClutchPort;\n    }\n\n    Component Clutch {\n        Port PowerPort : PowerPort;\n    }\n\n    Component Driveshaft {\n        Port PowerPort : PowerPort;\n    }\n\n    Component RearAxleAssembly {\n        Component Differential;\n        Component LeftHalfShaft;\n        Component RightHalfShaft;\n        Port PowerPort : PowerPort;\n    }\n\n    Component Wheels {\n        Port PowerPort : PowerPort;\n    }\n\n    // Define the interfaces\n    Interface PowerPort {\n        // Define the power flow\n    }\n\n    Interface ClutchPort {\n        // Define the clutch control\n    }\n\n    Interface CommandPort {\n        // Define the command signals\n    }\n\n    // Define the relationships\n",
    "\n```sysml\nsystem MySystem\n{\n  // Define subsystems\n  subsystem b11\n  {\n    component c1\n    {\n      port pb\n    }\n    component c2\n    {\n      port pe\n    }\n  }\n  subsystem b12\n  {\n    component c3\n    {\n      port pd\n    }\n    component c4\n    {\n      port pf\n    }\n  }\n\n  // Define connections between subsystems\n  connection c1.pb -> c2.pe\n  connection c3.pd -> c4.pf\n\n  // Define modules\n  module b21\n  {\n    uses c1 from b11.c1\n    uses c2 from b11.c2\n    uses c3 from b12.c3\n    uses c4 from b12.c4\n  }\n  module b22\n  {\n    uses c1 from b11.c1\n    uses c2 from b11.c2\n    uses c3 from b12.c3\n    uses c4 from b12.c4\n ",
    "\n```sysml\n// Define the system\nSystem mySystem {\n    // Define the components\n    Component fuelCommands {\n        // Define the properties\n        Property fuelCommandType : String;\n    }\n\n    Component engineStartStopControl {\n        // Define the properties\n        Property engineState : String;\n    }\n\n    Component powerTransmissionDistribution {\n        // Define the properties\n        Property transmissionRatio : Real;\n    }\n\n    Component powerOutputControl {\n        // Define the properties\n        Property powerOutput : Real;\n    }\n\n    // Define the connectors\n    Connector fuelCommandConnector : fuelCommands.fuelCommandType -> powerOutputControl.fuelCommandType;\n    Connector engineStateConnector : engineStartStopControl.engineState -> powerOutputControl.engineState;\n    Connector transmissionRatioConnector : powerTransmissionDistribution.transmissionRatio -> powerOutputControl.transmissionRatio;\n    Connector powerOutputConnector : powerOutputControl.powerOutput -> powerTransmissionDistribution.powerInput;\n    Connector powerDistributionConnector : powerTransmissionDistribution.powerOutput -> leftWheel.powerInput;\n    Connector powerDistributionConnector : powerTransmissionDistribution.powerOutput -> rightWheel.power",
    "\n```sysml\nsystem PowertrainControlSystem\n{\n    // Define the main components of the system\n    components\n    {\n        Engine engine;\n        Transmission transmission;\n        Differential differential;\n        DriveWheels driveWheels;\n        FuelControlModule fuelControlModule;\n        StallDetectionModule stallDetectionModule;\n    }\n\n    // Define the interactions and flows between components\n    interactions\n    {\n        // Fuel control command received from fuelControlModule\n        fuelControlModule -> engine : fuelControlCommand;\n\n        // Engine starts and generates torque\n        engine -> transmission : torqueGenerated;\n\n        // Torque is amplified, transmitted, and distributed\n        transmission -> differential : torqueTransmitted;\n        differential -> driveWheels : torqueDistributed;\n\n        // Stall signal detection\n        stallDetectionModule -> engine : stallSignal;\n        stallDetectionModule -> transmission : stallSignal;\n        stallDetectionModule -> differential : stallSignal;\n        stallDetectionModule -> driveWheels : stallSignal;\n\n        // Halt relevant operational processes\n        stallSignal -> engine : halt;\n        stallSignal -> transmission : halt;\n        stallSignal -> differential : halt;\n",
    "\n```sysml\nSystem {\n    name: \"Vehicle Powertrain Management System\"\n    ownedElement [\n        Engine {\n            name: \"Vehicle Engine\"\n            ownedAttribute [\n                FuelCommand {\n                    name: \"Fuel Command\"\n                    type: Integer\n                }\n            ]\n            ownedOperation [\n                GenerateOutputTorque {\n                    name: \"Generate Output Torque\"\n                    inParameter: FuelCommand\n                    return: OutputTorque\n                }\n            ]\n        }\n        Transmission {\n            name: \"Vehicle Transmission\"\n            ownedOperation [\n                AmplifyAndTransmitTorque {\n                    name: \"Amplify And Transmit Torque\"\n                    inParameter: OutputTorque\n                    return: AmplifiedTorque\n                }\n            ]\n        }\n        Wheel {\n            name: \"Vehicle Wheels\"\n            ownedElement [\n                TorqueDistribution {\n                    name: \"Torque Distribution\"\n                    ownedOperation [\n                        DistributeTorque {\n                            name: \"Distribute Torque\"\n                            inParameter: AmplifiedTorque\n                        }\n                    ]\n                }\n            ]\n        }\n       ",
    "\n```sysml\nsystem PowerConnectionSystem\n{\n    // Define the vehicle and trailer\n    part Vehicle\n    {\n        // Define the structural frame of the vehicle\n        part VehicleFrame\n    {\n        // Define the hitch ball on the vehicle frame\n        part HitchBall\n    }\n    }\n\n    part Trailer\n    {\n        // Define the structural frame of the trailer\n        part TrailerFrame\n    {\n        // Define the trailer coupler on the trailer frame\n        part TrailerCoupler\n    }\n    }\n\n    // Define the connection mechanism\n    part ConnectionMechanism\n    {\n        // Define the hitching mechanism\n        part HitchingMechanism\n    }\n\n    // Define the power connection and disconnection behavior\n    behavior PowerConnectionBehavior\n    {\n        // Define the connect action\n        action Connect\n        {\n            // Connect the hitch ball to the trailer coupler\n            // This action is performed by the hitching mechanism\n            call HitchingMechanism.Connect(HitchBall, TrailerCoupler)\n        }\n\n        // Define the disconnect action\n        action Disconnect\n        {\n            // Disconnect the hitch ball from",
    "\n```sysml\nsystem VehicleTrailerManagementSystem\n{\n    // Define the components of the system\n    components\n    {\n        Vehicle\n        {\n            chassis\n            towBall\n        }\n        Trailer\n        {\n            trailerFrame\n            coupler\n        }\n    }\n\n    // Define the interactions between components\n    interactions\n    {\n        connect\n        {\n            source Vehicle.towBall\n            target Trailer.coupler\n            trigger Vehicle.connectButton\n            effect Vehicle.connected = true\n        }\n        disconnect\n        {\n            source Vehicle.towBall\n            target Trailer.coupler\n            trigger Vehicle.disconnectButton\n            effect Vehicle.connected = false\n        }\n    }\n}\n```",
    "\n```sysml\n// Define the system\nSystem mySystem {\n    // Define the vehicle section\n    Component vehicle {\n        // Define the chassis\n        Component chassis {\n            // Define the tow ball device\n            Component towBallDevice;\n        }\n    }\n\n    // Define the trailer section\n    Component trailer {\n        // Define the trailer chassis\n        Component trailerChassis;\n        // Define the coupler mechanism\n        Component couplerMechanism {\n            // Define the engagement/disengagement behavior\n            Behavior engageDisconnect {\n                // Define the states for engagement and disengagement\n                State engaged {\n                    // Define the transition from disengaged to engaged\n                    Transition toEngaged {\n                        source: disengaged;\n                        target: engaged;\n                    }\n                }\n                State disengaged {\n                    // Define the transition from engaged to disengaged\n                    Transition toDisengaged {\n                        source: engaged;\n                        target: disengaged;\n                    }\n                }\n            }\n        }\n    }\n\n    // Define the connection between the vehicle and the trailer\n    Connector connectTrailer {\n        // Define the connection points\n        PartConnector vehicleTowBall",
    "\n```sysml\n// Define the system\nSystem {\n    name: \"Fuel System\"\n    description: \"This system describes the fuel system of motor vehicles.\"\n\n    // Define the components\n    Component {\n        name: \"Fuel Tank\"\n        description: \"The fuel tank provides fuel to the engine and returns a portion of the fuel to the fuel tank.\"\n\n        // Define the ports\n        Port {\n            name: \"Fuel Supply\"\n            type: \"Fuel\"\n            direction: \"Out\"\n        }\n        Port {\n            name: \"Fuel Return\"\n            type: \"Fuel\"\n            direction: \"In\"\n        }\n\n        // Define the properties\n        Property {\n            name: \"Temperature\"\n            type: \"Temperature\"\n            value: \"20 C\"\n        }\n    }\n\n    Component {\n        name: \"Engine\"\n        description: \"The engine can return a portion of the fuel to the fuel tank.\"\n\n        // Define the ports\n        Port {\n            name: \"Fuel Return\"\n            type: \"Fuel\"\n            direction: \"Out\"",
    "\n```sysml\n// Define the system\nSystem {\n    name: \"Fuel Delivery System\"\n    description: \"This system provides vehicles with efficient fuel delivery services.\"\n\n    // Define the components\n    Component {\n        name: \"Storage Tank\"\n        description: \"Initial fuel reservoir.\"\n        type: \"Fuel Tank\"\n\n        // Define the ports\n        Port {\n            name: \"Fuel Output\"\n            type: \"Fuel Flow\"\n        }\n    }\n\n    Component {\n        name: \"Fuel Pump\"\n        description: \"Delivers fuel from storage tank to vehicle's fuel tank.\"\n        type: \"Fuel Pump\"\n\n        // Define the ports\n        Port {\n            name: \"Fuel Input\"\n            type: \"Fuel Flow\"\n        }\n        Port {\n            name: \"Fuel Output\"\n            type: \"Fuel Flow\"\n        }\n    }\n\n    Component {\n        name: \"Vehicle Fuel Tank\"\n        description: \"Receives and stores delivered fuel, monitors fuel level.\"\n        type: \"Fuel Tank\"\n\n        // Define the ports",
    "\n```sysml\n// Define the system\nSystem mySystem {\n    // Define the components\n    Component vehicleAssembly;\n    Component gearbox;\n    Component engine;\n\n    // Define the relationships\n    // Initial state: vehicleAssembly without gearbox and engine\n    vehicleAssembly -> gearbox -> engine;\n\n    // Define the flows\n    // Flow from vehicleAssembly to gearbox\n    Flow vehicleToGearbox {\n        source vehicleAssembly;\n        target gearbox;\n    }\n\n    // Flow from gearbox to engine\n    Flow gearboxToEngine {\n        source gearbox;\n        target engine;\n    }\n\n    // Define the interactions\n    // Interaction for vehicleAssembly to gearbox\n    Interaction vehicleAssemblyToGearbox {\n        participant vehicleAssembly;\n        participant gearbox;\n        using vehicleToGearbox;\n    }\n\n    // Interaction for gearbox to engine\n    Interaction gearboxToEngine {\n        participant gearbox;\n        participant engine;\n        using gearboxToEngine;\n    }\n}\n```",
    "\n```sysml\nsystem VehicleA\n{\n    // Define states\n    state Off;\n    state Starting;\n    state Running;\n    state HealthManagement;\n    state Maintenance;\n    state Degraded;\n    state Normal;\n\n    // Define transitions\n    transition startUp\n    {\n        from Off;\n        to Starting when brakePedalPressed and startSignalReceived;\n    }\n\n    transition startRunning\n    {\n        from Starting;\n        to Running when vehicleOnSignalReceived;\n    }\n\n    transition performSelfChecks\n    {\n        from Running;\n        to HealthManagement;\n    }\n\n    transition switchToMaintenance\n    {\n        from Running;\n        to Maintenance;\n    }\n\n    transition switchToDegraded\n    {\n        from Running when temperatureExceedsThreshold;\n        to Degraded;\n    }\n\n    transition switchToNormal\n    {\n        from Degraded;\n        to Normal when restoreToNormalSignalReceived;\n    }\n\n    // Define behaviors\n    behavior startUp\n    {\n        invoke startUp;\n    }\n\n    behavior startRunning",
    "\n```sysml\n// Define the system\nSystem {\n    name: \"Vehicle Autonomy System\"\n    description: \"This system enables automated modeling of vehicle behavior.\"\n\n    // Define the components\n    Component vehicle {\n        name: \"Vehicle\"\n        description: \"The vehicle is capable of autonomously managing its operation and health status.\"\n\n        // Define the states\n        State shutdown {\n            name: \"Shutdown\"\n            description: \"The vehicle is in the shutdown state.\"\n        }\n\n        State operational {\n            name: \"Operational\"\n            description: \"The vehicle is in the operational state.\"\n        }\n\n        State degraded {\n            name: \"Degraded\"\n            description: \"The vehicle is in the degraded mode due to overheating.\"\n        }\n\n        // Define the transitions\n        Transition start {\n            name: \"Start\"\n            description: \"The vehicle initiates the startup process from the shutdown state when both the brake pedal is pressed and a start signal is received.\"\n            from: shutdown\n            to: operational\n            guard: brakePedalPressed and startSignalReceived\n            action: performSelfInspection and powerSupplyProcedure",
    "\n```sysml\n// Define the system\nSystem {\n    Name: \"Spatio-Temporal Vehicle Simulation System\"\n    Description: \"This system is designed for spatiotemporal simulation of the dynamic behavior of vehicles on roads at different moments. Users can define parameters such as the vehicle’s mass, position, velocity, and acceleration, and, combined with the road’s slope (angle) and surface friction coefficient, depict the state of the vehicle and the road at specific time points. The system supports snapshot recording at multiple moments within the simulation time series, enabling tracking of the vehicle’s state transitions from start-up (on state), through the driving process, to shutdown (off state). This provides detailed data to support vehicle dynamics analysis and road adaptability assessment, helping users predict vehicle performance under specific road and time conditions in a virtual environment.\"\n\n    // Define the vehicle\n    Component {\n        Name: \"Vehicle\"\n        Description: \"The vehicle to be simulated.\"\n\n        // Define vehicle parameters\n        Property {\n            Name: \"Mass\"\n            Type: Real\n            Description: \"The mass of the vehicle.\"\n        }\n        Property {\n            Name: \"Position\"\n            Type:",
    "\n```sysml\nimport \"http://www.omg.org/spec/SysML/20160301\";\n\n// Define the system\nSystem mySystem {\n    // Define subsystems\n    SubSystem SubsystemA {\n        // Define configuration options for Subsystem A\n        Configuration myConfigurationA {\n            // Define components for Configuration A\n            Component Component1;\n            Component Component2;\n        }\n        Configuration myConfigurationB {\n            // Define components for Configuration B\n            Component Component2;\n            Component Component3;\n        }\n    }\n    SubSystem SubsystemB {\n        // Define configuration options for Subsystem B\n        Configuration myConfigurationC {\n            // Define components for Configuration C\n            Component Component4;\n            Component Component5;\n        }\n        Configuration myConfigurationD {\n            // Define components for Configuration D\n            Component Component5;\n            Component Component6;\n        }\n    }\n}\n\n// Define constraints\nConstraint constraint1 {\n    // Define the condition for constraint1\n    Condition {\n        SubsystemA.myConfigurationB -> SubsystemB.myConfigurationD;\n    }\n    SubsystemA.myConfigurationA ->",
    "\n```sysml\n// Define the system\nSystem mySystem {\n  // Define components and subsystems\n  Component part1;\n  Component part2;\n  Component part3 {\n    Port p1;\n  }\n  Component part4;\n  Component part5 {\n    Port p2;\n    BehaviorVariant variant1;\n    BehaviorVariant variant2;\n  }\n  Component part6;\n  Subsystem SubsystemA {\n    Component part7;\n    Component part8;\n    Port portA1;\n    Port portA2;\n  }\n  Subsystem SubsystemB {\n    Component part9;\n    Component part10;\n    Port portB1;\n    Port portB2;\n  }\n\n  // Define configuration schemes\n  ConfigurationScheme VehicleConfigA {\n    Parameter paramA1;\n    Parameter paramA2;\n    // Define how parts are assigned to subsystems in VehicleConfigA\n    Assignment assignmentA1 {\n      part1 -> SubsystemA;\n      part2 -> SubsystemA;\n      part3 -> SubsystemA;\n      part4 -> SubsystemB;\n      part5 -> SubsystemB;\n      part6 -> Subsystem",
    "\n```sysml\nSystem mySystem\n{\n    // Define the system properties, functions, and constraints\n    // ...\n}\n\n// Define the components of the system\n// Components: Engine, Transmission, Wheels\n\n// Define the properties and constraints for each component\n// ...\n\n// Define the relationships and constraints between components\n// ...\n\n// Define the system behavior and interactions\n// ...\n}\n```\n\n```sysml\n// Define the Engine component\nComponent Engine\n{\n    // Properties: CylinderCount, Type\n    Property CylinderCount\n    {\n        Range 4, 6\n    }\n    Property Type\n    {\n        Type Enum { \"4-cylinder\", \"6-cylinder\" }\n    }\n\n    // Constraints: Compatibility with Transmission and Wheels\n    Constraint compatibleWithTransmissionAndWheels\n    {\n        // Ensure compatibility based on CylinderCount\n        // ...\n    }\n}\n\n// Define the Transmission component\nComponent Transmission\n{\n    // Properties: Type\n    Property Type\n    {\n        Type Enum { \"Manual\", \"Automatic\" }\n    }\n\n    // Constraints: Compatibility with Engine and",
    "\n```sysml\n// Define the system\nSystem mySystem {\n    // Define the components\n    Component Vehicle {\n        // Define properties\n        Property vehicleMass : Integer;\n        Property fuelStatus : String;\n        Property powertrain : String;\n        Property reliability : String;\n    }\n\n    Component Engine {\n        // Define properties\n        Property outputTorque : Integer;\n        Property driveInterface : String;\n    }\n\n    Component Transmission {\n        // Define properties\n        Property powerDelivery : String;\n    }\n\n    // Define the relationships\n    Relationship connects {\n        source Vehicle;\n        target Engine;\n    }\n\n    Relationship manages {\n        source Vehicle;\n        target Transmission;\n    }\n\n    // Define the requirements\n    Requirement vehicleMassRequirement {\n        target Vehicle;\n        description \"Define and manage vehicle mass specifications\";\n        condition \"Each vehicle reflects its actual mass and complies with the corresponding maximum mass limitations to prevent overloading.\";\n    }\n\n    Requirement fuelStatusRequirement {\n        target Vehicle;\n        description \"Regulate fuel status\";\n        condition \"Some vehicles must meet mass requirements when fully fueled",
    "\n```sysml\nsystem VehicleMassVerificationSystem\n{\n  // Define the system properties, functions, and other relevant aspects\n  // Add necessary components, ports, and interactions\n}\n```\n\n```sysml\npackage VehicleMassVerificationPackage\n{\n  // Define the package properties, functions, and other relevant aspects\n  // Add necessary components, ports, and interactions\n}\n```\n\n```sysml\npackage VehicleMassVerificationPackage\n{\n  // Define the package properties, functions, and other relevant aspects\n  // Add necessary components, ports, and interactions\n}\n```\n\n```sysml\npackage VehicleMassVerificationPackage\n{\n  // Define the package properties, functions, and other relevant aspects\n  // Add necessary components, ports, and interactions\n}\n```\n\n```sysml\npackage VehicleMassVerificationPackage\n{\n  // Define the package properties, functions, and other relevant aspects\n  // Add necessary components, ports, and interactions\n}\n```\n\n```sysml\npackage VehicleMassVerificationPackage\n{\n  // Define the package properties, functions, and other relevant aspects\n  // Add necessary components, ports, and interactions\n}\n```\n\n```sysml",
    "\n```sysml\nlibrary WaterSupplyNetwork\n\nsystem WaterSupplySystem\n  extends System\n  uses Interface SpigotBank\n  uses Interface Spigot\n  uses Interface Faucet\n  uses Interface FaucetInlet\n\n  SpigotBank -> Spigot : supplies\n  Spigot -> Faucet : supplies\n  Faucet -> FaucetInlet : receives\n\nend WaterSupplySystem\n```\n",
    "\n```sysml\n// Define the system\nSystem mySystem {\n    // Define the components\n    Component vehicle {\n        // Define the subcomponents\n        Subcomponent engine;\n        Subcomponent transmission;\n        Subcomponent frontAxleAssembly;\n        Subcomponent rearAxleAssembly;\n\n        // Define the properties\n        Property totalMass;\n\n        // Define the connectors\n        Connector inputConnector {\n            Source: engine;\n            Target: vehicle;\n        }\n        Connector inputConnector2 {\n            Source: transmission;\n            Target: vehicle;\n        }\n        Connector inputConnector3 {\n            Source: frontAxleAssembly;\n            Target: vehicle;\n        }\n        Connector inputConnector4 {\n            Source: rearAxleAssembly;\n            Target: vehicle;\n        }\n\n        // Define the operations\n        Operation calculateTotalMass() {\n            // Calculate the total mass of the vehicle\n            totalMass = engine.mass + transmission.mass + frontAxleAssembly.mass + rearAxleAssembly.mass;\n        }\n    }\n\n    // Define the requirements\n    Requirement analysisRequirements {\n        // Define the analysis use cases\n",
    "\n```sysml\nSystem {\n    Name : \"Vehicle Powertrain Configuration System\"\n    Description : \"This system aims to provide optimal solutions for vehicle powertrain configuration, focusing primarily on the trade-off analysis of engine types to select the engine configuration that performs best across multiple key performance indicators, including power, mass, efficiency, reliability, and cost.\"\n    Components {\n        EngineConfiguration {\n            Name : \"Engine Configuration\"\n            Description : \"Modeling of various engine structures and related components\"\n            Components {\n                Cylinder {\n                    Name : \"Cylinder\"\n                    Description : \"Part of the engine structure\"\n                }\n                Pistons {\n                    Name : \"Pistons\"\n                    Description : \"Part of the engine structure\"\n                }\n                ConnectingRod {\n                    Name : \"Connecting Rod\"\n                    Description : \"Part of the engine structure\"\n                }\n                Crankshaft {\n                    Name : \"Crankshaft\"\n                    Description : \"Part of the engine structure\"\n                }\n            }\n        }\n        TradeOffAnalysis {\n            Name : \"Trade-off Analysis\"\n            Description : \"Multi-attribute trade-",
    "\n```sysml\nimport \"http://www.omg.org/spec/SysML/20160301\";\n\nPackage System {\n    Property fuelEconomyMeetsRequirements : Boolean;\n    Property urbanFuelEconomy : Real;\n    Property highwayFuelEconomy : Real;\n    Property vehicleLoad : Real;\n    Property vehiclePowertrain : Powertrain;\n    Property operatingConditions : OperatingConditions;\n}\n\nPackage Powertrain {\n    Property fuelConsumption : Real;\n}\n\nPackage OperatingConditions {\n    Property scenario : Scenario;\n}\n\nPackage Scenario {\n    Property type : String;\n    Property load : Real;\n}\n\nPackage Requirement {\n    Property urbanFuelEconomyRequirement : Real = 25;\n    Property highwayFuelEconomyRequirement : Real = 30;\n}\n\nPackage Constraint {\n    Property vehicleLoadConstraint : Real = 1000;\n}\n\nPackage Association {\n    System -> Powertrain;\n    System -> OperatingConditions;\n    System -> Requirement;\n    System -> Constraint;\n}\n```",
    "\n```sysml\n// Define the system\nSystem mySystem\n{\n    // Define the vehicle dynamics model\n    Component vehicleDynamicsModel\n    {\n        // Define the inputs\n        Port vehicleMass\n        {\n            Type Integer\n        }\n        Port initialPosition\n        {\n            Type Real\n        }\n        Port initialVelocity\n        {\n            Type Real\n        }\n        Port powerOutputData\n        {\n            Type Sequence(Real)\n        }\n\n        // Define the outputs\n        Port acceleration\n        {\n            Type Real\n        }\n        Port velocity\n        {\n            Type Real\n        }\n        Port position\n        {\n            Type Real\n        }\n\n        // Define the behavior\n        Behavior calculateVehicleMotion\n        {\n            // Define the steps\n            Step calculateAcceleration\n            {\n                // Calculate acceleration based on power output and vehicle mass\n                acceleration = powerOutputData / vehicleMass\n            }\n            Step updateVelocity\n            {\n                // Update velocity based on acceleration and time step\n                velocity = previous(velocity) + acceleration * timeStep\n            }\n            Step updatePosition\n            {\n                // Update position",
    "\n```sysml\n// Define the vehicle system\nSystem Vehicle\n{\n    // Define the front axle assembly\n    Component FrontAxleAssembly\n    {\n        // Define the front wheels\n        Component FrontWheels\n        {\n            // Define the front axle\n            Component FrontAxle\n            {\n                Mass : 75 kg\n                SteerAngle : 0 to 30 degrees\n            }\n        }\n        Mass : 150 kg\n    }\n\n    // Define the rear axle assembly\n    Component RearAxleAssembly\n    {\n        // Define the rear wheels\n        Component RearWheels\n        {\n            // Define the rear axle\n            Component RearAxle\n            {\n                Mass : 250 kg\n            }\n        }\n        Mass : 250 kg\n    }\n\n    // Define the total mass of the vehicle\n    Mass : 2500 kg\n}\n```",
    "\n```sysml\n// Define the system\nSystem mySystem {\n    name = \"Vehicle Management System\"\n    description = \"Manages and displays vehicle safety and security features and components.\"\n}\n\n// Define the system's components\nComponent myVehicle {\n    name = \"Vehicle\"\n    description = \"The main vehicle entity.\"\n    system = mySystem\n}\n\n// Define mandatory safety features\nComponent seatBelts {\n    name = \"Seat Belts\"\n    description = \"Mandatory safety feature.\"\n    parent = myVehicle\n}\n\nComponent bumpers {\n    name = \"Bumpers\"\n    description = \"Mandatory safety feature.\"\n    parent = myVehicle\n}\n\n// Define optional safety features\nComponent airbags {\n    name = \"Airbags\"\n    description = \"Optional safety feature.\"\n    parent = myVehicle\n}\n\nComponent antiLockBrakingSystem {\n    name = \"Anti-Lock Braking System\"\n    description = \"Optional safety feature.\"\n    parent = myVehicle\n}\n\n// Define security features\nComponent alarms {\n    name = \"Alarms\"\n    description = \"Security feature.\"\n   ",
    "\n```sysml\nSystem {\n    name: \"LayeredSystem\"\n    layers : {\n        ApplicationLayer {\n            name: \"ApplicationLayer\"\n            services : {\n                ServiceLayer {\n                    name: \"ServiceLayer\"\n                    data : {\n                        DataLayer {\n                            name: \"DataLayer\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n    attributes : {\n        Attribute {\n            name: \"x\"\n        }\n        Attribute {\n            name: \"y\"\n        }\n        Attribute {\n            name: \"z\"\n            dependencies: [Attribute \"x\", Attribute \"y\"]\n        }\n    }\n}\n```",
    "\n```sysml\nSystem {\n    name: \"Torque Generation System\"\n    description: \"This system is designed to realize the torque generation function within the powertrain system.\"\n    components [\n        Component {\n            name: \"Torque Generator\"\n            description: \"Component capable of generating torque.\"\n            requirements [\n                Requirement {\n                    description: \"The torque produced during operation must be greater than zero newton-meters to ensure driving capability.\"\n                }\n            ]\n        }\n    ]\n    connectors [\n        Connector {\n            name: \"Torque Transmission\"\n            description: \"Ensures the actual generation and transmission of torque to meet the overall vehicle power output requirements.\"\n            source: \"Torque Generator\"\n            target: \"Powertrain\"\n        }\n    ]\n}\n\nPowertrain {\n    name: \"Vehicle Powertrain\"\n    description: \"Includes actual components such as the engine.\"\n    components [\n        Component {\n            name: \"Engine\"\n            description: \"Generates power to drive the vehicle.\"\n        }\n    ]\n}\n```",
    "\n```sysml\nsystem PowerTransmissionSystem\n{\n  // Define components\n  component Powertrain\n  {\n    // Define subcomponents\n    component Engine\n    {\n      // Define properties\n      property TorqueGenerator torqueGenerator\n    }\n    component TorqueGenerator\n    {\n      // Define properties\n      property PowerOutput powerOutput\n    }\n    component PowerOutput\n    {\n      // Define properties\n      property TorqueOutput torqueOutput\n    }\n  }\n\n  // Define relationships\n  relationship Powertrain hasEngine Engine\n  relationship Engine hasTorqueGenerator TorqueGenerator\n  relationship TorqueGenerator hasPowerOutput PowerOutput\n  relationship PowerOutput hasTorqueOutput TorqueOutput\n}\n```",
    "\n```sysml\n// Define the Vehicle Safety and Anti-theft Function Catalogue\n\n// Define the Vehicle class\nClass Vehicle {\n    // Define the safety features\n    Set<Feature> safetyFeatures;\n    // Define the anti-theft features\n    Set<Feature> antiTheftFeatures;\n    // Define the mandatory safety components\n    Set<Component> mandatorySafetyComponents;\n}\n\n// Define the Feature class\nClass Feature {\n    // Define the name of the feature\n    String name;\n    // Define if the feature is mandatory\n    Boolean isMandatory;\n    // Define the category of the feature (safety or anti-theft)\n    String category;\n}\n\n// Define the Component class\nClass Component {\n    // Define the name of the component\n    String name;\n    // Define the category of the component (safety, anti-theft, or both)\n    String category;\n}\n\n// Define the relationships between Vehicle, Feature, and Component\n// Vehicle has many safety features\nVehicle “has” safetyFeatures : Feature;\n// Vehicle has many anti-theft features\nVehicle “has” antiTheftFeatures : Feature;\n",
    "\n```sysml\n// Define the system\nSystem mySystem {\n    // Define the components\n    Component fuelTankAssembly {\n        // Define the properties\n        Property fuelPump {\n            Type Pump\n        }\n        Property fuelTank {\n            Type Tank\n        }\n    }\n    Component returnLine {\n        // Define the properties\n        Property returnFuel {\n            Type Fuel\n        }\n    }\n    Component fuelConsumingUnits {\n        // Define the properties\n        Property fuelUsage {\n            Type FuelUsage\n        }\n    }\n    // Define the interactions\n    Interaction fuelFlow {\n        Source fuelTankAssembly.fuelPump\n        Target fuelTankAssembly.fuelPump\n        Target returnLine.returnFuel\n        Target fuelConsumingUnits.fuelUsage\n    }\n    Interaction fuelTemperatureMonitoring {\n        Source fuelTankAssembly.fuelTank\n        Target fuelTemperatureSensor {\n            Type Sensor\n        }\n        Target vehicleControlUnit {\n            Type ControlUnit\n        }\n    }\n}\n```",
    "\n```sysml\nSystem {\n    name: \"Vehicle Safety and Security Configuration\"\n    components : [\n        SeatBelt {\n            name: \"Seat Belt 1\"\n            required: true\n        }\n        SeatBelt {\n            name: \"Seat Belt 2\"\n            required: true\n        }\n        Airbag {\n            name: \"Cockpit Airbag\"\n            required: false\n        }\n        AntiTheftAlarm {\n            name: \"Interior Anti-Theft Alarm\"\n            required: true\n        }\n        Bumper {\n            name: \"Vehicle Bumper\"\n            required: true\n        }\n        KeylessEntrySystem {\n            name: \"Keyless Entry System\"\n            required: true\n        }\n        Wheel {\n            name: \"Wheel 1\"\n            required: true\n        }\n        Wheel {\n            name: \"Wheel 2\"\n            required: true\n        }\n        AntiLockBrakingSystem {\n            name: \"Anti-Lock Braking System 1\"\n            required: false\n        }\n        AntiLockBrakingSystem {\n            name: \"",
    "\n```sysml\nSystem {\n    name VehicleSafetyAndSecurity\n    includes VehicleInterior, VehicleBodyAssembly\n    VehicleInterior {\n        includes AlarmSystem, SeatBelts, FrontRowSeats, DriversAirbag\n        AlarmSystem {\n            name VehicleAlarmSystem\n        }\n        SeatBelts {\n            name VehicleSeatBelts\n        }\n        FrontRowSeats {\n            name VehicleFrontRowSeats\n        }\n        DriversAirbag {\n            name VehicleDriversAirbag\n        }\n    }\n    VehicleBodyAssembly {\n        includes VehicleBody, Bumper, KeylessEntrySystem\n        VehicleBody {\n            name VehicleBody\n        }\n        Bumper {\n            name VehicleBumper\n        }\n        KeylessEntrySystem {\n            name VehicleKeylessEntrySystem\n        }\n    }\n}\n```",
    "\n```sysml\n// Define the system and its components\nsystem System\n{\n    // Define the components of the system\n    components\n    {\n        // Component for classification and labeling\n        component ClassificationComponent\n        {\n            // Define the classification attribute\n            attribute Classification : String[1]\n            {\n                // Define possible values for classification\n                values\n                {\n                    \"Unclassified\", \"Confidential\", \"Secret\"\n                }\n            }\n        }\n    }\n}\n```",
    "\n```sysml\nSystem mySystem\n{\n    // Define the main components\n    Component VCU\n    {\n        // Define Bus Interface for VCU\n        Interface BusIF_VCU\n        {\n            // Define the protocol used\n            Protocol CAN\n        }\n    }\n\n    Component ECU\n    {\n        // Define Bus Interface for ECU\n        Interface BusIF_ECU\n        {\n            // Define the protocol used\n            Protocol CAN\n        }\n    }\n\n    // Define the relationship between VCU and ECU via the CAN bus\n    Relationship connects\n    {\n        Source VCU.BusIF_VCU\n        Target ECU.BusIF_ECU\n        Via CAN\n    }\n\n    // Define the sensor data interfaces for future expansion\n    Interface SensorDataIF\n    {\n        // Define the protocol used\n        Protocol SensorProtocol\n    }\n}\n```",
    "\n```sysml\nSystem {\n    Name: \"Blood Glucose Meter Safety System\"\n    Description: \"This system ensures high reliability and safety of the blood glucose meter during use.\"\n\n    Component {\n        Name: \"Battery Management Unit\"\n        Description: \"Automatically detects battery status and alerts the user when the battery is depleted or cannot be charged.\"\n\n        Property {\n            Name: \"BatteryStatusDetection\"\n            Description: \"Detects the status of the battery.\"\n            Type: Boolean\n        }\n\n        Property {\n            Name: \"BatteryAlert\"\n            Description: \"Alerts the user when the battery is depleted or cannot be charged.\"\n            Type: Boolean\n        }\n\n        Requirement {\n            Name: \"Ensure High Reliability and Safety\"\n            Description: \"Ensures high reliability and safety of the blood glucose meter during use.\"\n\n            Requirement {\n                Name: \"Battery Status Detection\"\n                Description: \"Automatically detects the status of the battery.\"\n                Condition: \"BatteryStatusDetection\"\n            }\n\n            Requirement {\n                Name: \"Battery Alert\"\n                Description: \"Alerts the user when the battery is",
    "\n```sysml\nlibrary: SysMLConstants\n\npackage: Constants\n{\n    constant: EulerNumber\n    {\n        value: 2.71828182845904523536\n        unit: none\n    }\n\n    constant: Pi\n    {\n        value: 3.14159265358979323846\n        unit: none\n    }\n\n    constant: SpeedOfLight\n    {\n        value: 299792458\n        unit: m/s\n    }\n\n    constant: FineStructureConstant\n    {\n        value: 7.2973525693e-3\n        unit: none\n    }\n\n    constant: ElectronProtonMassRatio\n    {\n        value: 5.4461702178e-4\n        unit: none\n    }\n\n    constant: StandardGravitationalAccelerationEarth\n    {\n        value: 9.80665\n        unit: m/s^2\n",
    "\n```sysml\n/* Define the system and its components */\nSystem mySystem {\n    // Define the components of the system\n    Component Tire {\n        // Define attributes for the tire\n        Attribute manufacturer : String;\n        Attribute rimDiameter : Real;\n        Attribute width : Integer;\n    }\n}\n\n/* Define instances of the tire component */\nInstance myTire1 : Tire {\n    manufacturer = \"Michelin\";\n    rimDiameter = 18.0;\n    width = 245;\n}\n\nInstance myTire2 : Tire {\n    manufacturer = \"Pirelli\";\n    rimDiameter = 17.5;\n    width = 235;\n}\n```\n",
    "\n```sysml\nlibrary AutomotiveComponents\n\nimport this::Units;\n\n// Define the vehicle\n{\n    // Define the vehicle properties\n    Class Vehicle\n    {\n        mass : Mass = 1200.0 * kg;\n        length : Length = 4.82 * m;\n\n        // Define the front wheels\n        FrontWheels : Set(FrontWheel) = {};\n    }\n\n    // Define the front wheel\n    Class FrontWheel\n    {\n        // Define the wheel properties\n        hubDiameter : Length = 18.0 * in;\n        width : Length = 245.0 * mm;\n        outerDiameter : Length = hubDiameter + 2 * (tireHeight);\n\n        // Define the tire\n        Tire : Tire = {};\n    }\n\n    // Define the tire\n    Class Tire\n    {\n        // Tire properties can be defined here\n    }\n}\n```\n\nNote: The tire height is not defined in the requirements, so it's assumed to be a placeholder for the actual tire height. You can replace it with the actual value or a reference to a property that",
    "\n```sysml\n// Define the Powertrain Configuration Package\npackage PowertrainConfiguration {\n    // Define the Powertrain Configuration Class\n    class PowertrainConfiguration {\n        // Define the EngineType enumeration\n        enum EngineType {\n            FourCylinder,\n            SixCylinder\n        }\n\n        // Define the TransmissionType enumeration\n        enum TransmissionType {\n            Manual,\n            Automatic\n        }\n\n        // Define the PowertrainCombination enumeration\n        enum PowertrainCombination {\n            FourCylinderManual,\n            SixCylinderAutomatic\n        }\n\n        // Define the Engine property\n        property EngineType engineType;\n\n        // Define the Transmission property\n        property TransmissionType transmissionType;\n\n        // Define the PowertrainCombination property\n        property PowertrainCombination powertrainCombination;\n\n        // Define the PowertrainConfiguration constructor\n        PowertrainConfiguration() {\n            // Set default values\n            this.engineType = EngineType.FourCylinder;\n            this.transmissionType = TransmissionType.Manual;\n            this.powertrainCombination = PowertrainCombination.FourCylinder",
    "\n```sysml\nlibrary CarModeling\n\nsystem Car\n{\n    // Define the total mass of the car\n    mass 1200 kilograms\n\n    // Define the length of the car\n    length 4.82 meters\n\n    // Define the wheel assemblies\n    parts WheelAssembly\n    {\n        // Define the number of wheel assemblies\n        quantity 4\n\n        // Define each wheel assembly\n        each WheelAssembly\n        {\n            // Define the components of each wheel assembly\n            parts Rim, Tire, BrakeDisc\n            {\n                // Define the rim diameter\n                property Rim.diameter 18 inches\n\n                // Define the tire width\n                property Tire.width 245 millimeters\n\n                // Define the tire height\n                property Tire.height 45 millimeters\n\n                // Calculate the outer diameter of the tire\n                property Tire.outerDiameter = Tire.width * 2 + Tire.height * 2\n\n                // Define the default tread depth of the tire\n                property Tire.treadDepth 6.0 millimeters\n\n                // Ensure the tread depth is not less than 3.5 millimeters\n",
    "\n```sysml\n// Define the system\nSystem AutomotiveFuelSystem {\n    // Define the components\n    Component FuelTankAssembly {\n        // Define interfaces\n        Interface Outlet {\n            // Define the operation for delivering fuel\n            void DeliverFuel();\n        }\n        Interface Return {\n            // Define the operation for returning fuel\n            void ReturnFuel();\n        }\n    }\n    Component FuelPump {\n        // Define interfaces\n        Interface Pump {\n            // Define the operation for pumping fuel\n            void PumpFuel();\n        }\n        Interface Return {\n            // Define the operation for receiving returned fuel\n            void ReceiveReturnedFuel();\n        }\n    }\n    Component FuelTank {\n        // Define properties\n        Property FuelTemperature : Real;\n    }\n\n    // Define the relationships\n    Relationship connects {\n        Source -> FuelTankAssembly.Outlet -> Engine;\n        Source -> FuelTankAssembly.Return -> FuelTank;\n        Source -> FuelPump.Pump -> FuelTank;\n        Source -> FuelPump.Return -> FuelTankAssembly;\n        Source -> FuelTank.Fuel",
    "\n```sysml\nimport \"http://www.omg.org/spec/SysML/2/0/20110701/SysML.xmi\" as sysml;\n\n// Define the PhysicalQuantity class\nclass PhysicalQuantity extends sysml::Element {\n    // Attributes to represent the value and unit\n    value : Real;\n    unit : Unit;\n}\n\n// Define the Unit class\nclass Unit extends sysml::Element {\n    // Attributes to represent the name and conversion factor\n    name : String;\n    conversionFactor : Real;\n}\n\n// Define the PhysicalQuantitySystem class\nclass PhysicalQuantitySystem extends sysml::Element {\n    // List of supported physical quantities\n    supportedQuantities : PhysicalQuantity[0..*] := {};\n    \n    // Method to add a new physical quantity\n    addPhysicalQuantity(newQuantity : PhysicalQuantity) {\n        supportedQuantities += newQuantity;\n    }\n    \n    // Method to convert a physical quantity from one unit to another\n    convert(quantity : PhysicalQuantity, targetUnit : Unit) : PhysicalQuantity {\n        // Implementation of conversion logic\n    }\n}\n```\n",
    "\n```sysml\nlibrary StandardUnitSystemLibrary\n{\n    // Define the main components and relationships\n    // Define the types of units supported\n    // Define the conversion between different units\n    // Define the interfaces for managing and applying units\n}\n```\n\n```sysml\nimport this::StandardUnitSystemLibrary;\n\n// Define the main components and relationships\nStandardUnitSystemLibrary\n{\n    // Define the types of units supported\n    type UnitType : DataType\n    {\n        // Define the properties of the unit types\n        name : String;\n        symbol : String;\n        description : String;\n    }\n\n    // Define the conversion between different units\n    type UnitConversion : Property\n    {\n        fromUnit : UnitType;\n        toUnit : UnitType;\n        conversionFactor : Real;\n    }\n\n    // Define the interfaces for managing and applying units\n    interface UnitManager\n    {\n        addUnit(unit : UnitType);\n        removeUnit(unit : UnitType);\n        getUnit(name : String) : UnitType;\n        convert(value : Real, fromUnit : UnitType, toUnit : UnitType) : Real;",
    "\n```sysml\nsystem HeadlampVerificationSystem\n{\n  // Define the range of acceptable tilt angles\n  property HeadlampTiltAngleRange : Real {\n    min = 50.0\n    max = 80.0\n  }\n\n  // Define the headlamp tilt adjustment knob\n  part HeadlampTiltAdjustmentKnob\n  {\n    // Define the current tilt angle of the knob\n    property CurrentTiltAngle : Real\n    {\n      min = 0.0\n      max = 180.0\n    }\n\n    // Ensure the current tilt angle is within the acceptable range\n    constraint ValidTiltAngle {\n      self.CurrentTiltAngle >= HeadlampTiltAngleRange.min and\n      self.CurrentTiltAngle <= HeadlampTiltAngleRange.max\n    }\n  }\n}\n```",
    "\n```sysml\nlibrary CoreDataTypes\n\nimport this::datatypes::*;\n\n// Define core data types\n\n// Unsigned integers and unsigned floating-point numbers\nproperty NonNegativeInteger extends Integer {\n    min := 0;\n}\n\nproperty NonNegativeFloat extends Float {\n    min := 0.0;\n}\n\n// Date-time, string, and boolean values\nproperty DateTime extends DateTime;\nproperty String extends String;\nproperty Boolean extends Boolean;\n\n// Color labeling for status conditions\nproperty StatusColor extends Enumeration {\n    values := {\"red\", \"yellow\", \"green\"};\n}\n\nproperty StatusLevel extends Enumeration {\n    values := {\"critical\", \"warning\", \"normal\"};\n}\n\n// Association between status levels and colors\nrelationship StatusAssociation : StatusLevel -> StatusColor {\n    max 1 : *;\n}\n\n// Physical dimensions with diameter parameter\nproperty PhysicalDimension extends Enumeration {\n    values := {\"Small (60 mm)\", \"Medium (70 mm)\", \"Large (80 mm)\"};\n}\n\nproperty Diameter extends Property {\n    defaultValue := \"Small (60 mm)\";",
    "\n```sysml\n/* Define the types and structures needed for the system */\n\n/* Define the Bag type for spare parts */\ntype Bag {\n    elements : Set<Part>\n}\n\n/* Define the Part type for spare parts */\ntype Part {\n    // Define properties of a part\n}\n\n/* Define the List type for integers */\ntype List {\n    elements : Sequence<Integer>\n}\n\n/* Define the Set type for strings */\ntype Set {\n    elements : Set<String>\n}\n\n/* Define the OrderedSet type for personnel */\ntype OrderedSet {\n    elements : OrderedSet<Person>\n}\n\n/* Define the Person type */\ntype Person {\n    // Define properties of a person\n}\n\n/* Define the Real type for real numbers */\ntype Real {\n    elements : Array<4, Real>\n}\n\n/* Define the nested collection types */\ntype NestedCollection {\n    elements : Sequence<OrderedSet<Person>>\n}\n\n/* Define the integration and interaction with other business functions */\ninteraction IntegrationAndInteraction {\n    // Define interactions here\n}\n```",
    "\n```sysml\n// Define the System\nSystem mySystem\n{\n    // Define the Tires\n    Tires tires\n    {\n        // Define a tire entry\n        TireEntry tireEntry\n        {\n            // Define the manufacturer name\n            manufacturerName = \"Michelin\"\n            \n            // Define the rim diameter\n            rimDiameter = 18\n            \n            // Define the tire width\n            tireWidth = 245\n            \n            // Define the installation position (optional)\n            installationPosition = {0, 0, 0}\n        }\n    }\n}\n```\n\n```sysml\n// Define the TireEntry class\nClass TireEntry\n{\n    // Define the manufacturer name\n    String manufacturerName\n    \n    // Define the rim diameter\n    Integer rimDiameter\n    \n    // Define the tire width\n    Integer tireWidth\n    \n    // Define the installation position (optional)\n    Tuple3 installationPosition\n}\n```",
    "\n```sysml\nSystem {\n    name: \"Spacecraft Trajectory Sampling System\"\n    ownedElement [\n        Requirement {\n            name: \"Record Trajectory Data\"\n            description: \"The system shall sample and record the trajectory of the spacecraft during the ascent phase.\"\n            appliesTo: \"Spacecraft\"\n            mustSatisfy [\n                Requirement {\n                    name: \"Reference Time Zero\"\n                    description: \"The system shall use the mission liftoff time as the reference time zero, measured in seconds.\"\n                }\n                Requirement {\n                    name: \"Reference Time UTC\"\n                    description: \"The system shall be able to take the UTC liftoff time of the mission for example 22:42:32.924534 on August 23, 2020 as the reference time.\"\n                }\n                Requirement {\n                    name: \"Collect Key Parameters\"\n                    description: \"The system shall collect key parameters including the position and velocity of the spacecraft at different time points.\"\n                    mustSatisfy [\n                        Requirement {\n                            name: \"Position and Velocity Data\"\n                            description:",
    "\n```sysml\nimport \"http://www.omg.org/spec/SysML/20160601\";\n\n// Define the system\nSystemDefinition AlloyPropertiesSystem\n{\n    // Define the system's features\n    Feature AlloyComposition\n    {\n        // Define the properties of the alloy composition\n        Property AtomicMass : Real;\n        Property MassFraction : Real;\n        Property TensileStrength : Real;\n    }\n\n    // Define the system's instances\n    Instance CommonMetals\n    {\n        // Define the common metals\n        Instance Iron : AlloyComposition;\n        Instance Carbon : AlloyComposition;\n        Instance Manganese : AlloyComposition;\n    }\n\n    // Define the system's instances\n    Instance TypicalAlloys\n    {\n        // Define the typical alloys\n        Instance Steel980 : AlloyComposition;\n    }\n}\n```",
    "\n```sysml\nlibrary EngineeringMaterials\n\n// Define the System\nsystem EngineeringMaterialsSystem\n{\n    // Define the Material Class\n    class Material\n    {\n        name : String\n        atomicMass : Real\n        compositionalInfo : Dictionary(String, Real)\n        mechanicalProperties : Dictionary(String, Real)\n    }\n\n    // Define the Metal Class as a subclass of Material\n    class Metal : Material\n    {\n        // Define the Alloy Class as a subclass of Metal\n        class Alloy : Metal\n        {\n            // Define the Steel_980 Class as a specific instance of Alloy\n            class Steel_980 : Alloy\n            {\n                compositionalInfo = { \"iron\" -> 0.98, \"carbon\" -> 0.02, \"manganese\" -> 0.005 }\n                mechanicalProperties = { \"tensileStrength\" -> 980 }\n            }\n        }\n    }\n}\n```",
    "\n```sysml\n/* Define the system */\nSystem mySystem\n{\n    /* Define the components */\n    Component myPublisher\n    {\n        /* Define the interfaces */\n        Interface publishMessage\n        {\n            /* Define the operations */\n            Operation publish(message : Message)\n            {\n                /* Publish the message to the server */\n            }\n        }\n    }\n\n    Component myConsumer\n    {\n        /* Define the interfaces */\n        Interface subscribeTopic\n        {\n            /* Define the operations */\n            Operation subscribe(topic : Topic)\n            {\n                /* Subscribe to the topic through the server */\n            }\n        }\n\n        Interface receiveMessage\n        {\n            /* Define the operations */\n            Operation receive(message : Message)\n            {\n                /* Receive the message from the server */\n            }\n        }\n    }\n\n    Component myServer\n    {\n        /* Define the interfaces */\n        Interface manageSubscriptions\n        {\n            /* Define the operations */\n            Operation addSubscription(consumer : myConsumer, topic : Topic)\n            {\n                /* Add a subscription for the consumer to a specific topic */\n",
    "\n```sysml\n// Define the system\nSystem {\n    name: VehicleFuelSystem\n    // Define the components\n    Component {\n        name: FuelTankAssembly\n        // Define the connectors\n        Connector {\n            name: FuelSupply\n            type: FuelLine\n        }\n        Connector {\n            name: FuelReturn\n            type: FuelLine\n        }\n        // Define the properties\n        Property {\n            name: FuelTemperature\n            type: Temperature\n        }\n    }\n    Component {\n        name: Engine\n        // Define the connectors\n        Connector {\n            name: FuelSupplyToEngine\n            type: FuelLine\n        }\n        Connector {\n            name: FuelReturnFromEngine\n            type: FuelLine\n        }\n    }\n    // Define the connections\n    Connection {\n        source: FuelTankAssembly.FuelSupply -> Engine.FuelSupplyToEngine\n        target: Engine.FuelReturnFromEngine -> FuelTankAssembly.FuelReturn\n    }\n    // Define the interactions\n    Interaction {\n        name: MonitorFuelTemperature\n        // Define the participants\n        Participant {\n            role: Fuel",
    "\n```sysml\n// Define the system\nSystem mySystem {\n    // Define the components\n    Component producer {\n        // Define the ports\n        Port publishPort {\n            Direction = Output;\n            Type = TopicMessage;\n        }\n    }\n\n    Component server {\n        // Define the ports\n        Port subscribePort {\n            Direction = Input;\n            Type = SubscriptionRequest;\n        }\n        Port publishPort {\n            Direction = Input;\n            Type = TopicMessage;\n        }\n        Port deliverPort {\n            Direction = Output;\n            Type = DeliveredMessage;\n        }\n    }\n\n    Component consumer {\n        // Define the ports\n        Port subscribePort {\n            Direction = Output;\n            Type = SubscriptionRequest;\n        }\n        Port receivePort {\n            Direction = Input;\n            Type = DeliveredMessage;\n        }\n    }\n\n    // Define the interactions\n    Interaction publishMessageInteraction {\n        Participant producer;\n        Participant server;\n        send publishPort.Message to server.publishPort;\n    }\n\n    Interaction subscribeInteraction {\n        Participant consumer;\n        Particip",
    "\n```sysml\nSystem {\n    Name = \"Transportation System\"\n    Description = \"This system provides transportation services for users, focusing on user boarding, timely refueling, and safe alighting.\"\n\n    Component {\n        Name = \"Vehicle\"\n        Description = \"The vehicle provides transportation services for users.\"\n\n        Port {\n            Name = \"Driver\"\n            Description = \"The driver is responsible for operating the vehicle.\"\n            Type = \"Human\"\n        }\n\n        Port {\n            Name = \"Passenger\"\n            Description = \"Up to four passengers can enter the vehicle.\"\n            Type = \"Human\"\n            Multiplicity = \"1..4\"\n        }\n\n        Property {\n            Name = \"FuelLevel\"\n            Description = \"The current fuel level of the vehicle.\"\n            Type = \"Percentage\"\n        }\n\n        Requirement {\n            Name = \"RefuelRequired\"\n            Description = \"The driver may go to a gas station to refuel if the fuel level falls below 10% of the maximum tank capacity.\"\n            Condition = \"FuelLevel < 10%\"\n        }\n    }\n",
    "\n```sysml\n// Define the system\nSystem mySystem {\n    // Define the components\n    Component fuelTankAssembly {\n        // Define the ports\n        Port fuelOutletPort {\n            Attribute fuelTemperature : Real\n        }\n        Port fuelInletPort {\n            Attribute fuelTemperature : Real\n        }\n    }\n    Component engineUnit {\n        // Define the ports\n        Port fuelOutletPort {\n            Attribute fuelTemperature : Real\n        }\n        Port fuelInletPort {\n            Attribute fuelTemperature : Real\n        }\n    }\n    // Define the connections\n    Connection fuelSupplyConnection {\n        sourcePort fuelOutletPort from fuelTankAssembly\n        targetPort fuelInletPort to engineUnit\n    }\n    Connection fuelReturnConnection {\n        sourcePort fuelInletPort from engineUnit\n        targetPort fuelOutletPort to fuelTankAssembly\n    }\n}\n```",
    "\n```sysml\nSystem mySystem\n{\n    // Define the components\n    Component FuelTankAssembly\n    {\n        // Define the properties\n        Property fuelTemperature : Real\n    }\n\n    Component Engine\n    {\n        // Define the properties\n        Property fuelTemperature : Real\n    }\n\n    // Define the connectors\n    Connector fuelSupplyPort\n    {\n        source : FuelTankAssembly.fuelPort\n        target : Engine.fuelPort\n    }\n\n    Connector fuelReturnPort\n    {\n        source : Engine.fuelPort\n        target : FuelTankAssembly.fuelPort\n    }\n\n    // Define the interactions\n    Interaction fuelFlowInteraction\n    {\n        ParticipatingConnector fuelSupplyPort\n        ParticipatingConnector fuelReturnPort\n    }\n}\n```\n\n```sysml\nSystem mySystem\n{\n    // Define the components\n    Component FuelTankAssembly\n    {\n        // Define the properties\n        Property fuelTemperature : Real\n    }\n\n    Component Engine\n    {\n        // Define the properties\n        Property fuelTemperature : Real\n    }\n\n    // Define the connectors\n    Connector fuelSupplyPort\n",
    "\n```sysml\n// Define the system\nSystem mySystem {\n    // Define the required components\n    Component photoCaptureSystem {\n        // Define the focusing component\n        Component autoFocus {\n            // Define the input for the focusing component\n            Port focusInput {\n                DataType FocusInputType\n            }\n            // Define the output for the focusing component\n            Port focusedImage {\n                DataType FocusedImageType\n            }\n        }\n        // Define the capturing component\n        Component capturePhoto {\n            // Define the input for the capturing component\n            Port captureInput {\n                DataType CapturedImageType\n            }\n            // Define the output for the capturing component\n            Port finalPhoto {\n                DataType FinalPhotoType\n            }\n        }\n    }\n    // Define the required interactions\n    Interaction captureProcess {\n        // Define the sequence of interactions\n        Participant user {\n            // Define the interactions with the user\n        }\n        Participant system {\n            // Define the interactions with the system\n        }\n        // Define the sequence of interactions\n        Sequence {\n            // User selects a scene\n            send user.selectScene to system.sceneSelected\n            //",
    "\n```sysml\nlibrary PhotographyWorkflow\n\nsystem PhotographySystem\n{\n    // Define the two main steps in the workflow\n    flow FocusingStep\n    {\n        // Define the input for the focusing step\n        input FocusingInput\n        {\n            // Define the scene to be focused on\n            Scene scene\n        }\n\n        // Define the output from the focusing step\n        output FocusedImage\n        {\n            // Define the focused image\n            Image focusedImage\n        }\n    }\n\n    flow ShootingStep\n    {\n        // Define the input for the shooting step\n        input ShootingInput\n        {\n            // Define the focused image to be shot\n            FocusedImage focusedImage\n        }\n\n        // Define the output from the shooting step\n        output FinalImage\n        {\n            // Define the final photograph\n            Image finalImage\n        }\n    }\n\n    // Define the sequence of steps in the workflow\n    sequence WorkflowSequence\n    {\n        // Sequence the focusing step followed by the shooting step\n        FocusingStep -> ShootingStep\n    }\n}\n```",
    "\n```sysml\nSystem {\n    Name : \"Photography Workflow System\"\n    Description : \"Supports photography workflows, allowing users to frame and capture a scene.\"\n    Components {\n        Component {\n            Name : \"User Interface\"\n            Description : \"Allows user to select a specific scene.\"\n            Ports {\n                InPort {\n                    Name : \"Scene Selection\"\n                    Type : \"Scene\"\n                }\n            }\n        }\n        Component {\n            Name : \"Focusing Module\"\n            Description : \"Performs focusing process on the selected scene to generate an image.\"\n            Ports {\n                InPort {\n                    Name : \"Selected Scene\"\n                    Type : \"Scene\"\n                }\n                OutPort {\n                    Name : \"Focused Image\"\n                    Type : \"Image\"\n                }\n            }\n        }\n        Component {\n            Name : \"Shooting Module\"\n            Description : \"Carries out the shooting process to produce a final photograph.\"\n            Ports {\n                InPort {\n                    Name : \"Focused Image\"\n                    Type : \"Image\"\n                }\n                OutPort {\n                    Name : \"Final Photograph\"\n",
    "\n```sysml\nSystem {\n    name: \"Photography Automation System\"\n    description: \"This system automates the photography process, requiring minimal user intervention.\"\n\n    Component {\n        name: \"Focus Processing Module\"\n        description: \"Performs focus processing on the scene to generate an image suitable for shooting.\"\n    }\n\n    Component {\n        name: \"Shooting Module\"\n        description: \"Converts the processed image into a photograph through a shooting operation.\"\n    }\n\n    Component {\n        name: \"User Interface\"\n        description: \"Allows users to input the shooting scene.\"\n    }\n\n    Component {\n        name: \"Photograph Storage\"\n        description: \"Stores the final photograph.\"\n    }\n\n    Component {\n        name: \"System Control\"\n        description: \"Integrates the focus processing module, shooting module, and user interface.\"\n    }\n\n    Interaction {\n        source: \"User Interface\"\n        target: \"System Control\"\n        description: \"Allows users to input the shooting scene.\"\n    }\n\n    Interaction {\n        source: \"System Control\"\n        target: \"",
    "\n```sysml\n// Define the system\nSystem PhotographyWorkflow {\n  // Define the required elements\n  Requirement {\n    // Define the focus operation\n    Operation Focus {\n      // Define the input and output\n      Input Scene;\n      Output FocusedImage;\n    }\n    // Define the shoot operation\n    Operation Shoot {\n      // Define the input and output\n      Input FocusedImage;\n      Output Picture;\n    }\n  }\n  // Define the interactions\n  Interaction PhotographyProcess {\n    // Define the sequence of operations\n    Participant User;\n    Participant PhotographyWorkflow;\n    Sequence {\n      User -> PhotographyWorkflow : Input Scene;\n      PhotographyWorkflow -> Focus : Focus(Scene);\n      PhotographyWorkflow -> Shoot : Shoot(FocusedImage);\n      PhotographyWorkflow -> User : Output Picture;\n    }\n  }\n}\n```",
    "\n```sysml\n// Define the system\nSystem mySystem {\n    // Define the system's components\n    Component myCamera {\n        // Define the camera's features\n        Feature focus {\n            // Define the focus behavior\n            Behavior focusBehavior {\n                // Define the focus sequence\n                Sequence focusSequence {\n                    // Define the focus steps\n                    Step focusStep1 {\n                        // Define the focus action\n                        Action focusAction {\n                            // Define the focus operation\n                            Operation focusOperation {\n                                // Define the focus precondition\n                                Precondition focusPrecondition {\n                                    // Define the focus condition\n                                    Condition focusCondition {\n                                        // Define the focus target\n                                        Target focusTarget {\n                                            // Define the focus target type\n                                            Type is \"Scene\"\n                                        }\n                                        // Define the focus target state\n                                        State is \"Selected\"\n                                    }\n                                }\n                                // Define the focus postcondition\n                                Postcondition focusPostcondition {\n                                    // Define the focus result\n                                    Result focusResult {\n                                        // Define the focus status\n                                        Status is \"Clear\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    // Define the shoot step\n",
    "\n```sysml\n// Define the system\nSystem mySystem {\n    // Define the components\n    Component camera {\n        // Define the connectors\n        Connector focusComponent {\n            Port focusPort;\n        }\n        Connector imageEvaluationComponent {\n            Port imageEvaluationPort;\n        }\n        Connector shootingComponent {\n            Port shootingPort;\n        }\n        Connector photoOutputComponent {\n            Port photoOutputPort;\n        }\n    }\n    Component userInterface {\n        // Define the connectors\n        Connector sceneSelectionComponent {\n            Port sceneSelectionPort;\n        }\n    }\n\n    // Define the interactions\n    Interaction shootProcessInteraction {\n        Participant camera;\n        Participant userInterface;\n        Interaction shootProcess {\n            Call focusProcess;\n            Call evaluateImage;\n            Condition focusCondition {\n                Test focusPort.isFocused;\n            }\n            Branch focusCondition {\n                TrueCall shootProcess;\n                FalseCall photoOutputProcess;\n            }\n        }\n        Interaction focusProcess {\n            Call focusComponent.focusPort;\n        }\n        Interaction evaluateImage {\n            Call imageEvaluationComponent.imageEvaluationPort;\n",
    "\n```sysml\nSystem {\n    name \"Photography Workflow System\"\n    ownedAttribute [\n        name \"currentScene\"\n        type \"Scene\"\n    ]\n    ownedOperation [\n        name \"takePhoto\"\n        returnType \"Photo\"\n        body [\n            \"acquire currentScene\"\n            \"focus\"\n            \"capture\"\n            \"displayPhoto\"\n        ]\n    ]\n}\n\nScene {\n    // Define the properties of a scene\n}\n\nPhoto {\n    // Define the properties of a photo\n}\n```\n",
    "\n```sysml\nSystem {\n    name: \"Automatic Braking Control System\"\n    ownedAttribute: [\n        Attribute {\n            name: \"System Activated\"\n            type: Boolean\n            defaultValue: false\n        }\n    ]\n    composedOf: [\n        Component {\n            name: \"Brake Pedal Sensor\"\n            provides: [\n                Interface {\n                    name: \"Brake Pedal Status\"\n                    provides: [\n                        Property {\n                            name: \"Brake Pressure\"\n                            type: Real\n                        }\n                    ]\n                }\n            ]\n        }\n        Component {\n            name: \"Traction Sensor\"\n            provides: [\n                Interface {\n                    name: \"Traction Information\"\n                    provides: [\n                        Property {\n                            name: \"Road Adhesion\"\n                            type: Real\n                        }\n                    ]\n                }\n            ]\n        }\n        Component {\n            name: \"Brake Pressure Modulator\"\n            requires: [\n                Interface {\n                    name: \"Brake Pedal Status\"\n                    requires: [\n                        Property {\n                            name: \"Brake Pressure\"\n",
    "\n```sysml\nSystem {\n    name: BatteryChargingControlSystem\n    extends: System\n    ownedAttribute {\n        name: BatteryLevel\n        type: Real\n        range: [0.0, 100.0]\n        defaultValue: 0.0\n    }\n    ownedOperation {\n        name: MonitorBatteryLevel\n        body: \"if BatteryLevel < 100.0 then\n                    SupplyCharge()\n               end if\"\n    }\n    ownedOperation {\n        name: SupplyCharge\n        body: \"// Code to supply charge\"\n    }\n    ownedOperation {\n        name: TerminateCharging\n        body: \"if BatteryLevel >= 100.0 then\n                    StopCharge()\n               end if\"\n    }\n    ownedOperation {\n        name: StopCharge\n        body: \"// Code to stop charging\"\n    }\n}\n```",
    "\n```sysml\nSystem mySystem\n{\n    // Define the system behavior\n    Behavior myBehavior\n    {\n        // Define the state machine for charging process\n        StateMachine chargingProcess\n        {\n            // Define the initial state\n            InitialState startState\n            {\n                // Define the transition to the next state\n                Transition toMonitoring\n                {\n                    // Define the trigger for the transition\n                    Trigger batteryLevelBelow100\n                    {\n                        // Define the condition for the trigger\n                        Condition batteryLevel < 100\n                    }\n                    // Define the target state\n                    TargetState monitorState\n                }\n            }\n            // Define the monitoring state\n            State monitorState\n            {\n                // Define the transition to the next state\n                Transition toCharging\n                {\n                    // Define the trigger for the transition\n                    Trigger batteryLevelAtOrAbove100\n                    {\n                        // Define the condition for the trigger\n                        Condition batteryLevel >= 100\n                    }\n                    // Define the target state\n                    TargetState endState\n                }\n            }\n            // Define the end state\n            FinalState endState\n        }\n   ",
    "\n```sysml\n// Define the system\nSystem mySystem {\n    // Define the camera function\n    Function myFunction {\n        // Define the autofocus subsystem\n        SubSystem autofocusSubsystem {\n            // Define the focusing function\n            Function autofocusFunction {\n                // Define the input for the autofocus subsystem\n                InputParameter focusInput {\n                    // Define the type of the input parameter\n                    Type = FocusInputType;\n                }\n                // Define the output for the autofocus subsystem\n                OutputParameter focusOutput {\n                    // Define the type of the output parameter\n                    Type = FocusOutputType;\n                }\n            }\n        }\n        // Define the imaging subsystem\n        SubSystem imagingSubsystem {\n            // Define the imaging function\n            Function imagingFunction {\n                // Define the input for the imaging subsystem\n                InputParameter imageInput {\n                    // Define the type of the input parameter\n                    Type = ImageInputType;\n                }\n                // Define the output for the imaging subsystem\n                OutputParameter imageOutput {\n                    // Define the type of the output parameter\n                    Type = ImageOutputType;\n                }\n            }\n        }\n    }\n",
    "\n```sysml\nSystem {\n    name: \"Digital Camera\"\n    components {\n        Component {\n            name: \"Viewfinding Module\"\n            // Description of the viewfinding module\n        }\n        Component {\n            name: \"Focusing Module\"\n            // Description of the focusing module\n        }\n        Component {\n            name: \"Imaging Module\"\n            // Description of the imaging module\n        }\n        Component {\n            name: \"Shooting Scene Selection\"\n            // Description of the shooting scene selection\n        }\n    }\n    interactions {\n        Interaction {\n            name: \"Shooting Process\"\n            participants: [\n                \"Viewfinding Module\",\n                \"Focusing Module\",\n                \"Imaging Module\",\n                \"Shooting Scene Selection\"\n            ]\n            sequence {\n                Lifeline {\n                    name: \"User\"\n                    interactions {\n                        Call {\n                            name: \"Select Scene\"\n                            target: \"Shooting Scene Selection\"\n                        }\n                        Return {\n                            name: \"Scene Selected\"\n                            source: \"Shooting Scene Selection\"\n                        }\n                    }\n                }\n                Lifeline {",
    "\n```sysml\n// Define the system\nSystem VehicleSimulationSystem\n{\n    // Define the vehicle simulation model\n    ModelElement VehicleSimulationModel\n    {\n        // Define the vehicle properties\n        Property VehicleMass : Real\n        Property InitialPosition : Real\n        Property InitialVelocity : Real\n        Property TimeInterval : Real\n        Property PowerInput : Sequence(Real)\n\n        // Define the vehicle state variables\n        Variable VehicleSpeed : Real\n        Variable VehiclePosition : Real\n\n        // Define the simulation steps\n        Step CalculateVehicleState\n        {\n            // Define the input parameters\n            InputParameter VehicleMass : Real\n            InputParameter InitialPosition : Real\n            InputParameter InitialVelocity : Real\n            InputParameter TimeInterval : Real\n            InputParameter PowerInput : Sequence(Real)\n\n            // Define the output parameters\n            OutputParameter VehicleSpeed : Real\n            OutputParameter VehiclePosition : Real\n\n            // Define the simulation logic\n            Body\n            {\n                // Initialize the vehicle state\n                VehicleSpeed = InitialVelocity\n                VehiclePosition = InitialPosition\n\n                // Calculate the vehicle state at each time step\n                for (i in 1..Length(PowerInput))\n               ",
    "\n```sysml\n/*\n * System: Camera System\n * Author: [Your Name]\n * Date: [Current Date]\n */\n\n/* Define the system */\nSystem CameraSystem {\n    /* Define the components */\n    Component UserInput {\n        /* Define the properties */\n        Property sceneDescription : String;\n    }\n\n    Component FocusingProcess {\n        /* Define the properties */\n        Property focusedImage : Image;\n    }\n\n    Component ImageCapture {\n        /* Define the properties */\n        Property capturedImage : Image;\n    }\n\n    Component Display {\n        /* Define the properties */\n        Property displayedImage : Image;\n    }\n\n    /* Define the interactions */\n    Interaction shootProcess {\n        /* Define the sequence of interactions */\n        Participant UserInput;\n        Participant FocusingProcess;\n        Participant ImageCapture;\n        Participant Display;\n\n        Sequence {\n            UserInput -> FocusingProcess : \"Input scene\";\n            FocusingProcess -> ImageCapture : \"Focus and obtain image\";\n            ImageCapture -> Display : \"Capture and display image\";\n        }\n    }\n}\n```",
    "\n```sysml\nSystem mySystem\n{\n    // Define the system components\n    Component camera\n    {\n        // Define the camera's ports\n        Port viewPort;\n        Port displayPort;\n    }\n\n    // Define the system's behaviors\n    Behavior processBehavior\n    {\n        // Define the process steps\n        Sequence focusSequence\n        {\n            // Focus on the scene\n            Call focus();\n        }\n\n        Sequence captureSequence\n        {\n            // Capture the image\n            Call capture();\n        }\n\n        Sequence displaySequence\n        {\n            // Display the photograph\n            Call display();\n        }\n    }\n\n    // Define the system's interactions\n    Interaction userInteraction\n    {\n        Participant user;\n\n        // Define the interaction steps\n        Sequence selectScene\n        {\n            // User selects a scene\n            Send viewPort.selectedScene;\n        }\n\n        Sequence processScene\n        {\n            // System processes the scene\n            Receive viewPort.selectedScene;\n            Call processBehavior.focusSequence;\n            Call processBehavior.captureSequence;\n            Call processBehavior.displaySequence;",
    "\n```sysml\n// Define the system\nSystem mySystem {\n    // Define the sensors\n    Set<Sensor> sensors;\n\n    // Define the operations\n    Operation updateSensor {\n        input Sensor sensor;\n        // Perform the update operation on the sensor\n    }\n\n    // Define the flow\n    Flow updateAllSensors {\n        input Port updateSensorInput;\n        call updateSensor(updateSensorInput.sensor);\n    }\n\n    // Define the behavior\n    Behavior updateSensorsBehavior {\n        trigger SensorReadyEvent;\n        call updateAllSensors();\n    }\n}\n\n// Define the sensor\nClass Sensor {\n    // Define the sensor status\n    Property sensorStatus;\n\n    // Define the sensor ready event\n    Event SensorReadyEvent;\n}\n```\n",
    "\n```sysml\nimport \"http://www.omg.org/spec/SysML/20160301\";\n\n// Define the system\nSystem mySystem {\n    // Define the states\n    State offState;\n    State startingState;\n    State onState;\n\n    // Define the transitions\n    Transition startVehicle {\n        sourceState offState;\n        targetState startingState;\n        trigger \"vehicle start signal\";\n    }\n\n    Transition powerOnVehicle {\n        sourceState startingState;\n        targetState onState;\n        trigger \"vehicle power-on signal\";\n    }\n\n    Transition shutdownVehicle {\n        sourceState onState;\n        targetState offState;\n        trigger \"vehicle shutdown signal\";\n    }\n}\n```",
    "\n```sysml\nsystem VehicleSystem\n{\n    // Define states\n    state off;\n    state starting;\n    state on;\n\n    // Define signals\n    signal VehicleStartSignal;\n    signal VehicleOnSignal;\n    signal VehicleOffSignal;\n\n    // Define initial state\n    initialState off;\n\n    // Define state transitions\n    off -> starting : received VehicleStartSignal;\n    starting -> on : received VehicleOnSignal;\n    on -> off : received VehicleOffSignal;\n}\n```",
    "\n```sysml\nSystem mySystem\n{\n    // Define the states\n    State offState;\n    State startPhase;\n    State poweredOn;\n    State off;\n\n    // Define the transitions\n    Transition startVehicle;\n    Transition vehicleStarted;\n    Transition shutdownVehicle;\n\n    // Define the behaviors\n    Behavior selfDiagnosis;\n    Behavior powerSupply;\n    Behavior safetyOperations;\n\n    // Define the system components\n    Component vehicleControlUnit;\n    Component powerManagementUnit;\n    Component diagnosticUnit;\n    Component safetyUnit;\n\n    // Define the system interfaces\n    Interface vehicleStartCommand;\n    Interface vehicleStartedSignal;\n    Interface vehicleShutdownCommand;\n\n    // Define the system ports\n    Port vehicleStartPort;\n    Port vehicleStartedPort;\n    Port vehicleShutdownPort;\n\n    // Define the system properties\n    Property vehiclePowerStatus;\n\n    // Define the system constraints\n    Constraint vehiclePowerConstraint;\n\n    // Define the system requirements\n    Requirement vehicleStartRequirement;\n    Requirement vehicleStartedRequirement;\n    Requirement vehicleShutdownRequirement;\n\n    // Define the system flows\n    Flow self",
    "\n```sysml\n// Define the states\nState startUp;\nState operational;\nState shutdown;\n\n// Define the transitions\nTransition startVehicle;\nTransition stopVehicle;\nTransition startOperation;\n\n// Define the system behavior\nBehavior vehicleBehavior = [\n    initialState = shutdown,\n    states = {startUp, operational, shutdown},\n    transitions = {\n        startVehicle -> shutdown | startUp when vehicleStartSignal,\n        startOperation -> operational when vehicleStartedSignal,\n        stopVehicle -> operational | shutdown when vehicleShutdownSignal\n    }\n];\n\n// Define the signals\nSignal vehicleStartSignal;\nSignal vehicleStartedSignal;\nSignal vehicleShutdownSignal;\n\n// Define the system\nSystem vehicleSystem = [\n    behaviors = {vehicleBehavior},\n    signals = {vehicleStartSignal, vehicleStartedSignal, vehicleShutdownSignal}\n];\n```",
    "\n```sysml\n// Define the system\nSystem mySystem {\n    // Define the states\n    State Off;\n    State Start;\n    State On;\n\n    // Define the transitions\n    Transition startTransition {\n        source Off;\n        target Start;\n        trigger startSignal;\n    }\n\n    Transition onTransition {\n        source Start;\n        target On;\n        trigger onSignal;\n    }\n\n    Transition offTransition {\n        source On;\n        target Off;\n        trigger offSignal;\n    }\n\n    // Define the behaviors\n    Behavior powerManagement {\n        stateMachine myStateMachine {\n            initialState Off;\n            state Off;\n            state Start;\n            state On;\n\n            transition startTransition;\n            transition onTransition;\n            transition offTransition;\n        }\n    }\n}\n```",
    "\n```sysml\nimport this::SysML::v2;\n\n// Define the system\nSystem mySystem {\n    // Define the system's properties\n    Property maxAllowableTemperature : Real = 100.0;\n    Property currentVehicleTemperature : Real;\n    Property vehicleHealthStatus : String = \"normal\";\n    Property maintenanceCycleTime : Time = 24.0 hours;\n    Property maintenanceStatus : Boolean = false;\n    Property overTemperatureWarning : Boolean = false;\n    Property overTemperatureDuration : Time;\n\n    // Define the system's behaviors\n    Behavior monitorTemperature {\n        // Sense the current vehicle temperature\n        currentVehicleTemperature = senseTemperature();\n\n        // Compare the current temperature with the maximum allowable temperature\n        if (currentVehicleTemperature > maxAllowableTemperature) {\n            // Send an over-temperature warning\n            overTemperatureWarning = true;\n            // Switch the vehicle health status to \"degraded\" mode\n            vehicleHealthStatus = \"degraded\";\n        } else {\n            // Clear the over-temperature warning\n            overTemperatureWarning = false;\n            // Revert the vehicle health status to normal\n            vehicleHealth",
    "\n```sysml\n/*\n * System: Server\n * Author: [Your Name]\n * Date: [Date]\n */\n\n/*\n * Define the system\n */\nsystem Server\n{\n    // Define the components\n    components\n    {\n        LocalClock : Clock\n        RequestPort : Port\n        ResponsePort : Port\n    }\n\n    // Define the interactions\n    interactions\n    {\n        // Define the initial state\n        initialState Off\n        {\n            // Define the transitions\n            transitions\n            {\n                to Waiting : when (StartCommand) from Off\n            }\n        }\n\n        // Define the waiting state\n        state Waiting\n        {\n            // Define the transitions\n            transitions\n            {\n                to Response : when (RequestMessage) from Waiting\n            }\n        }\n\n        // Define the response state\n        state Response\n        {\n            // Define the timed behavior\n            timedBehavior\n            {\n                wait 5 minutes : when (Timer) from Response\n            }\n\n            // Define the transitions\n            transitions\n            {\n                to Waiting : when (Timer) from Response\n            }\n        }\n\n",
    "\n```sysml\nsystem ControlSystem\n{\n    // Define the states\n    state Off;\n    state Start;\n    state Operating;\n\n    // Define the transitions\n    transition StartSignal to Start\n    {\n        trigger \"start signal\";\n        effect {\n            enter Start;\n        }\n    }\n\n    transition PowerOnToStart from Off to Start\n    {\n        trigger \"power-on signal\";\n        guard \"brake pedal depressed\";\n        effect {\n            send \"start signal\" to Controller;\n            enter Start;\n        }\n    }\n\n    transition SelfCheckComplete from Start to Operating\n    {\n        trigger \"self-check complete\";\n        effect {\n            enter Operating;\n            continuously \"supply power to vehicle\";\n        }\n    }\n\n    transition StopSignal to Off from Operating\n    {\n        trigger \"stop signal\";\n        effect {\n            enter Off;\n            apply \"parking brake\";\n        }\n    }\n}\n```",
    "\n```sysml\nsystem ControlSystem\n{\n    // Define states\n    state Off;\n    state StartUp;\n    state Started;\n    state Shutdown;\n\n    // Define transitions\n    transition StartVehicle;\n    transition VehicleStart;\n    transition SelfCheck;\n    transition ShutdownVehicle;\n\n    // Define events\n    event VehicleStartSignal;\n    event BrakePedalDepressed;\n    event VehicleOnSignal;\n    event ShutdownSignal;\n\n    // Define behaviors\n    behavior Initialize {\n        entry Off;\n        on VehicleStartSignal do StartUp;\n    }\n\n    behavior StartUpProcess {\n        entry StartUp;\n        on BrakePedalDepressed and VehicleOnSignal do StartVehicle;\n    }\n\n    behavior VehicleStartControl {\n        entry Started;\n        on SelfCheck do VehicleStart;\n    }\n\n    behavior ShutdownProcess {\n        entry Shutdown;\n        on ShutdownSignal do ShutdownVehicle;\n    }\n\n    // Define interactions\n    interaction StartVehicleControl {\n        send VehicleStartControlSignal to VehicleController;\n        trigger BrakePedalDepressed and VehicleOnSignal;\n    }\n\n    interaction",
    "\n```sysml\nSystem mySystem\n{\n    // Define the components of the system\n    Component driver\n    {\n        // Define the properties or behaviors of the driver\n    }\n\n    Component cruiseController\n    {\n        // Define the properties or behaviors of the cruise controller\n    }\n\n    Component speedometer\n    {\n        // Define the properties or behaviors of the speedometer\n    }\n\n    Component engine\n    {\n        // Define the properties or behaviors of the engine\n    }\n\n    Component vehicle\n    {\n        // Define the properties or behaviors of the vehicle\n    }\n\n    // Define the interactions between the components\n    Interaction cruiseControlInteraction\n    {\n        Participant driver, cruiseController, speedometer, engine, vehicle\n        {\n            send SetSpeedCommand to cruiseController\n            send GetVehicleSpeed to speedometer\n            send FuelControlCommand to engine\n            receive VehicleSpeed from speedometer\n            receive AdjustEngineOutput from engine\n        }\n    }\n}\n```",
    "\n```sysml\nimport \"http://www.omg.org/spec/SysML/20160301\";\n\n// Define the system\nSystemDefinition CruiseControlSystem\n{\n    // Define the components\n    ComponentDefinition CruiseController\n    {\n        // Define the ports\n        Port SpeedPort : RealPort;\n        Port SetSpeedPort : RealPort;\n        Port ThrottleCommandPort : RealPort;\n\n        // Define the operations\n        Operation GenerateThrottleCommand\n        {\n            input SetSpeed : Real;\n            input CurrentSpeed : Real;\n            output ThrottleCommand : Real;\n        }\n    }\n\n    // Define the connectors\n    Connector ConnectSpeedToController : PortSpeedPort -> CruiseController.SpeedPort;\n    Connector ConnectSetSpeedToController : PortSetSpeedPort -> CruiseController.SetSpeedPort;\n    Connector ConnectCommandToEngine : CruiseController.ThrottleCommandPort -> EngineSystem.ThrottleInputPort;\n}\n\n// Define the engine system\nComponentDefinition EngineSystem\n{\n    // Define the ports\n    Port ThrottleInputPort : RealPort;\n\n    // Define the operations\n    Operation Adjust",
    "\n```sysml\nsystem CruiseControlSystem\n{\n    // Define components\n    component DriverInterface\n    component SpeedSensor\n    component CruiseController\n    component Engine\n\n    // Define relationships\n    relationship DriverInterface to CruiseController\n    relationship CruiseController to SpeedSensor\n    relationship CruiseController to Engine\n\n    // Define interactions\n    interaction SetSpeedCommand\n    {\n        participant DriverInterface\n        participant CruiseController\n        send SetSpeed\n        receive CurrentSpeed\n        send ThrottleControlCommand\n    }\n\n    interaction MaintainSpeed\n    {\n        participant CruiseController\n        participant Engine\n        send ThrottleControlCommand\n        receive EngineOutput\n    }\n}\n```",
    "\n```sysml\nsystem CruiseControlSystem\n{\n  // Define the main components of the system\n  components\n  {\n    CruiseController\n    {\n      // Define the properties and behaviors of the cruise controller\n      properties\n      {\n        DesiredSpeed : Integer\n        CurrentSpeed : Integer\n      }\n      behaviors\n      {\n        CalculateThrottle()\n        {\n          // Calculate the throttle based on the desired speed and current speed\n        }\n      }\n    }\n    Speedometer\n    {\n      // Define the properties and behaviors of the speedometer\n      properties\n      {\n        VehicleSpeed : Integer\n      }\n    }\n    Engine\n    {\n      // Define the properties and behaviors of the engine\n      properties\n      {\n        ThrottlePosition : Integer\n      }\n      behaviors\n      {\n        AdjustThrottle(newPosition : Integer)\n        {\n          // Adjust the throttle position based on the new position\n        }\n      }\n    }\n  }\n\n  // Define the interactions between the components\n  interactions\n  {\n    DriverSetsSpeed\n    {\n      source : Driver\n      target : CruiseController\n",
    "\n```sysml\nSystem mySystem {\n    // Define the system elements\n    Component myCruiseControlInterface {\n        // Define the interface properties\n        Port setSpeedPort {\n            DataType Integer\n        }\n        Port actualSpeedPort {\n            DataType Integer\n        }\n        Port fuelControlPort {\n            DataType Integer\n        }\n    }\n\n    Component myCruiseController {\n        // Define the controller properties\n        Port setSpeedPort {\n            DataType Integer\n        }\n        Port actualSpeedPort {\n            DataType Integer\n        }\n        Port fuelControlPort {\n            DataType Integer\n        }\n    }\n\n    Component myVehicleSpeedSensor {\n        // Define the sensor properties\n        Port actualSpeedPort {\n            DataType Integer\n        }\n    }\n\n    Component myEngine {\n        // Define the engine properties\n        Port fuelControlPort {\n            DataType Integer\n        }\n    }\n\n    // Define the system relationships\n    myCruiseControlInterface -> myCruiseController : setSpeedPort\n    myCruiseControlInterface -> myCruiseController : actualSpeedPort\n    myCruiseControlInterface -> myCruiseController : fuel",
    "\n```sysml\n/*\n * System: Cruise Control System\n * Author: [Your Name]\n * Date: [Current Date]\n */\n\n/*\n * Component: Cruise Controller\n * Description: Processes set speed commands and generates fuel control commands based on the difference between set speed and actual speed.\n */\nComponent CruiseController {\n    // Ports\n    Port setSpeedCommandIn : SetSpeedCommand;\n    Port actualSpeedIn : ActualSpeed;\n    Port fuelControlCommandOut : FuelControlCommand;\n\n    // Operations\n    Operation processCommands() {\n        // Process set speed command\n        // Read actual speed from speed sensor\n        // Calculate fuel control command based on set speed and actual speed\n        // Send fuel control command to engine controller\n    }\n}\n\n/*\n * Component: Engine Controller\n * Description: Receives fuel control commands from the cruise controller and forwards them to the engine.\n */\nComponent EngineController {\n    // Ports\n    Port fuelControlCommandIn : FuelControlCommand;\n    Port engineOut : Engine;\n\n    // Operations\n    Operation controlEngine() {\n        // Receive fuel control command from cruise controller\n        // Forward fuel control command to",
    "\n```sysml\n// Define the system\nSystem mySystem {\n    // Define the vehicle lifecycle stages\n    LifecycleStage assemblyAndDelivery;\n    LifecycleStage ownershipTransfer;\n    LifecycleStage endOfUse;\n\n    // Define the vehicle lifecycle events\n    Event vehicleDelivered {\n        lifecycleStage = assemblyAndDelivery;\n        // Record the delivery date\n        Parameter deliveryDate;\n    }\n\n    Event ownershipChange {\n        lifecycleStage = ownershipTransfer;\n        // Record the owner's information\n        Parameter ownerInfo;\n    }\n\n    Event vehicleDriven {\n        lifecycleStage = ownershipTransfer;\n        // Record the driver's information\n        Parameter driverInfo;\n    }\n\n    Event vehicleScrapped {\n        lifecycleStage = endOfUse;\n        // Record the scrapping information\n        Parameter scrappingInfo;\n    }\n\n    // Define the vehicle lifecycle\n    Lifecycle vehicleLifecycle {\n        stages = { assemblyAndDelivery, ownershipTransfer, endOfUse };\n        events = { vehicleDelivered, ownershipChange, vehicleDriven, vehicleScrapped };\n    }\n}\n```",
    "\n```sysml\nsystem Vehicle\n{\n  attributes\n  {\n    Mass : Real;\n    OperationalStatus : String;\n  }\n  properties\n  {\n    GearSetting : String;\n    AcceleratorPedalPosition : Real;\n  }\n  composition\n  {\n    Engine : Engine;\n    Driver : ExternalSystem;\n    Wheels : Set(Wheel);\n  }\n  instances\n  {\n    vehicle_1 : Vehicle;\n  }\n  associations\n  {\n    vehicle_1.Wheels -> {leftFrontWheel, rightFrontWheel};\n  }\n  timeEvents\n  {\n    leftFrontWheel.TimeSnapshot;\n    rightFrontWheel.TimeSnapshot;\n  }\n}\n\nsystem Engine\n{\n  // Additional attributes, properties, and composition can be defined here\n}\n\nsystem Wheel\n{\n  // Attributes, properties, and composition can be defined here\n}\n```\n\nNote: The provided output is a simplified version of the SysML model. It includes the basic structure and elements as per the requirements. You may need to expand on the `Engine` and `Wheel` systems to fully meet the requirements",
    "\n```sysml\nsystem CompositeSystem\n{\n    // Define the system elements\n    system Vehicle\n    {\n        // Define attributes for Vehicle\n        attribute Mass type Integer\n        attribute State type String\n        {\n            // Define the possible values for State\n            values {\"Initial\", \"Updated\"}\n        }\n        attribute GearSetting type Integer\n        attribute AcceleratorPosition type Real\n    }\n\n    // Define the relationships among components\n    relationship Vehicle_1 is Vehicle\n    {\n        // Define initial attributes for Vehicle_1\n        Vehicle_1.Mass = 2000\n        Vehicle_1.State = \"Initial\"\n        Vehicle_1.GearSetting = 0\n        Vehicle_1.AcceleratorPosition = 0.0\n\n        // Define updated attributes for Vehicle_1\n        Vehicle_1.Mass = 1500\n        Vehicle_1.State = \"Updated\"\n        Vehicle_1.GearSetting = 2\n        Vehicle_1.AcceleratorPosition = 0.5\n    }\n}\n```",
    "\n```sysml\nsystem Vehicle\n{\n    attributes\n    {\n        Mass : Real := 2000.0;\n        CurrentState : String := \"Neutral\";\n        ThrottlePedalPosition : Real := 0.0;\n    }\n\n    components\n    {\n        Engine : Engine;\n        Driver : Person;\n    }\n\n    initialState InitialState\n    {\n        Vehicle.Mass = 2000.0;\n        Vehicle.CurrentState = \"Neutral\";\n        Vehicle.ThrottlePedalPosition = 0.0;\n        Vehicle.Driver = Alice;\n    }\n\n    state SecondState\n    {\n        Vehicle.Mass = 1500.0;\n        Vehicle.CurrentState = \"Second\";\n        Vehicle.ThrottlePedalPosition = 0.5;\n        Vehicle.Driver = Bob;\n    }\n}\n\nsystem Engine\n{\n    // Define properties of the engine if necessary\n}\n\nsystem Person\n{\n    properties\n    {\n        Name : String;\n    }\n\n    instances\n    {\n        Alice : Person { Name =",
    "\n```sysml\n// Define the system\nSystem mySystem {\n    // Define the components\n    Component vehicle {\n        // Define the properties\n        Property mass : Real;\n        // Define the subcomponents\n        Subcomponent partList : List(Component) {\n            // Define the elements\n            Element engine : Component {\n                Property mass : Real;\n            }\n            Element transmission : Component {\n                Property mass : Real;\n            }\n            // Define the subcomponents\n            Subcomponent subparts : List(Component) {\n                // Define the elements\n                Element subpart1 : Component {\n                    Property mass : Real;\n                }\n                Element subpart2 : Component {\n                    Property mass : Real;\n                }\n            }\n        }\n    }\n}\n```\n\n```sysml\n// Define the system\nSystem mySystem {\n    // Define the components\n    Component vehicle {\n        // Define the properties\n        Property mass : Real;\n        // Define the subcomponents\n        Subcomponent partList : List(Component) {\n            // Define the elements\n            Element engine : Component {\n                Property mass : Real;\n            }\n           ",
    "\n```sysml\n// Define the Vehicle component\nComponent Vehicle\n{\n    // Define the VIN attribute for the Vehicle\n    Attribute VIN : String;\n\n    // Define the mass attribute for the Vehicle\n    Attribute mass : Real;\n\n    // Define the components relationship\n    Relationship components : Set(Component) = {};\n\n    // Define the addComponent operation to add components to the vehicle\n    Operation addComponent(component : Component)\n    {\n        // Add the component to the components set\n        components->add(component);\n    }\n\n    // Define the calculateTotalMass operation to calculate the total mass of the vehicle\n    Operation calculateTotalMass() : Real\n    {\n        // Initialize the total mass to the mass of the vehicle itself\n        Real totalMass = mass;\n\n        // Iterate over each component in the components set\n        foreach component in components\n        {\n            // Add the mass of the component to the total mass\n            totalMass = totalMass + component.mass;\n        }\n\n        // Return the total mass\n        return totalMass;\n    }\n}\n\n// Define the Component base class\nClass Component\n{\n    // Define",
    "\n```sysml\nimport \"http://www.omg.org/spec/SysML/20160601\";\n\n// Define the system\nSystemDefinition System {\n    // Define the objects\n    ObjectDefinition simpleThing {\n        Attribute simpleMass : Real;\n        Attribute totalMass : Real;\n    }\n\n    ObjectDefinition compositeThing {\n        Attribute simpleMass : Real;\n        Attribute totalMass : Real;\n        Reference subcomponents : Set(Object) = {};\n    }\n\n    // Define the relationships\n    Object compositeThing.subcomponents -> simpleThing;\n\n    // Define the behavior\n    BehaviorDefinition calculateTotalMass {\n        InputParameter object : Object;\n        OutputParameter totalMass : Real;\n\n        Behavior object.calculateTotalMass() {\n            if (object instanceOf simpleThing) {\n                object.totalMass = object.simpleMass;\n            } else if (object instanceOf compositeThing) {\n                object.totalMass = object.simpleMass;\n                foreach (subcomponent in object.subcomponents) {\n                    object.totalMass = object.totalMass + subcomponent.calculateTotalMass();\n                }",
    "\n```sysml\n// Define the system\nSystem mySystem {\n    // Define the system's properties\n    properties {\n        // Define the basic mass property\n        Property basicMass;\n        // Define the subcomponents property\n        Property subcomponents;\n        // Define the minimum mass threshold property\n        Property minMassThreshold;\n    }\n\n    // Define the system's behaviors\n    behaviors {\n        // Define the behavior to calculate the total mass\n        Behavior calculateTotalMass {\n            // Define the behavior's parameters\n            parameters {\n                // Define the basic mass parameter\n                Parameter basicMassParam = mySystem.basicMass;\n                // Define the subcomponents parameter\n                Parameter subcomponentsParam = mySystem.subcomponents;\n                // Define the minMassThreshold parameter\n                Parameter minMassThresholdParam = mySystem.minMassThreshold;\n            }\n            // Define the behavior's implementation\n            implementation {\n                // Calculate the total mass\n                totalMass = basicMass + sum(subcomponents.mass where subcomponents.mass >= minMassThreshold);\n            }\n        }\n    }\n}\n\n// Define the object with mass attributes\nObject objectWith",
    "\n```sysml\nSystem {\n    Name = \"Vehicle Dynamics Calculator\"\n    Description = \"A system capable of calculating vehicle dynamics parameters.\"\n\n    Component {\n        Name = \"Power Output Calculator\"\n        Description = \"Calculates the vehicle's power output.\"\n\n        Parameter {\n            Name = \"Wheel Power\"\n            Type = Real\n        }\n        Parameter {\n            Name = \"Aerodynamic Drag Coefficient\"\n            Type = Real\n        }\n        Parameter {\n            Name = \"Friction Coefficient\"\n            Type = Real\n        }\n        Parameter {\n            Name = \"Vehicle Mass\"\n            Type = Real\n        }\n        Parameter {\n            Name = \"Speed\"\n            Type = Real\n        }\n        Operation {\n            Name = \"Calculate Power Output\"\n            Description = \"Calculates the actual available power output.\"\n            Input = [Wheel Power, Aerodynamic Drag Coefficient, Friction Coefficient, Vehicle Mass, Speed]\n            Output = [Power Output]\n            Algorithm = \"Power Output = Wheel Power - (Aerodynamic Drag Coefficient * Speed^2) - (Friction Coefficient * Vehicle Mass * 9.",
    "\n```sysml\n// Define the system\nSystem mySystem {\n    // Define the vehicle model\n    Component vehicleModel {\n        // Define the properties of the vehicle\n        Property vehicleMass as Real (unit = \"kg\");\n        Property rollingResistanceCoefficient as Real (unit = \"dimensionless\");\n        Property aerodynamicDragCoefficient as Real (unit = \"dimensionless\");\n        Property wheelEndOutputPower as Real (unit = \"W\");\n\n        // Define the initial conditions\n        Property initialSpeed as Real (unit = \"m/s\");\n        Property initialPosition as Real (unit = \"m\");\n\n        // Define the time step\n        Property timeStep as Real (unit = \"s\");\n\n        // Define the derived properties\n        Property availableDrivingPower as Real (unit = \"W\");\n        Property acceleration as Real (unit = \"m/s^2\");\n        Property speed as Real (unit = \"m/s\");\n        Property position as Real (unit = \"m\");\n\n        // Define the behavior of the vehicle\n        Behavior calculateVehicleBehavior {\n            // Calculate the available driving power\n            Action calculateAvailableDrivingPower {\n                input wheel",
    "\n```sysml\nSystem mySystem\n{\n    // Define the system elements\n    Component vehicleModel\n    {\n        // Define the vehicle's properties\n        Property vehicleMass as Real (unit = \"kg\")\n        Property wheelPower as Real (unit = \"W\")\n        Property aerodynamicDragCoefficient as Real (unit = \"Cd\")\n        Property rollingResistanceCoefficient as Real (unit = \"Cr\")\n        Property initialSpeed as Real (unit = \"m/s\")\n        Property initialPosition as Real (unit = \"m\")\n    }\n\n    // Define the vehicle's dynamics calculation\n    Component dynamicsCalculator\n    {\n        // Define the input parameters\n        Property vehicleMass as Real (unit = \"kg\")\n        Property wheelPower as Real (unit = \"W\")\n        Property aerodynamicDragCoefficient as Real (unit = \"Cd\")\n        Property rollingResistanceCoefficient as Real (unit = \"Cr\")\n        Property initialSpeed as Real (unit = \"m/s\")\n        Property initialPosition as Real (unit = \"m\")\n\n        // Define the output parameters\n        Property currentSpeed as Real (unit = \"m/",
    "\n```sysml\n// Define the system\nSystem VehicleDynamicSystem\n{\n    // Define the system's components\n    Component Vehicle\n    {\n        // Define the vehicle's properties\n        Property initialPosition : Real\n        Property initialVelocity : Real\n        Property vehicleMass : Real\n        Property wheelDrivePower : Real\n        Property timeInterval : Time\n        Property dragCoefficient : Real\n        Property frictionCoefficient : Real\n\n        // Define the vehicle's behavior\n        Behavior calculateVehicleState\n        {\n            // Define the behavior's parameters\n            Parameter currentTime : Time\n            Parameter currentPosition : Real\n            Parameter currentVelocity : Real\n            Parameter currentAcceleration : Real\n\n            // Define the behavior's actions\n            Action calculateAcceleration\n            {\n                // Calculate the acceleration based on the given parameters\n                currentAcceleration = (wheelDrivePower - dragCoefficient * currentVelocity^2 - frictionCoefficient * vehicleMass * 9.81) / vehicleMass\n            }\n\n            Action calculateFinalVelocity\n            {\n                // Calculate the final velocity based on the acceleration\n                currentVelocity = currentVelocity + currentAcceleration * timeInterval\n           ",
    "\n```sysml\nimport \"http://www.omg.org/spec/SysML/20160301\";\n\n// Define the system\nSystemDefinition VehicleSystem\n{\n    // Define the components\n    ComponentDefinition Vehicle\n    {\n        // Define the parts\n        ComponentDefinition Chassis\n        {\n            MassProperty ChassisMass;\n        }\n        ComponentDefinition Engine\n        {\n            MassProperty EngineMass;\n        }\n        ComponentDefinition Gearbox\n        {\n            MassProperty GearboxMass;\n        }\n\n        // Define the total mass calculation\n        Property TotalMass = ChassisMass + EngineMass + GearboxMass;\n\n        // Define the constraint\n        Constraint VehicleWeightConstraint\n        {\n            Description = \"Ensure the total mass does not exceed 2,500 kilograms.\";\n            Check = TotalMass <= 2500;\n            Failure = \"Overweight warning issued.\";\n        }\n    }\n}\n```",
    "\n```sysml\nSystem {\n    name: \"Vehicle Mass Budgeting System\"\n    ownedAttribute: [\n        Attribute {\n            name: \"MassLimit\"\n            type: Integer {\n                value: 2500\n            }\n        }\n    ]\n    ownedElement: [\n        Component {\n            name: \"Vehicle\"\n            ownedAttribute: [\n                Attribute {\n                    name: \"TotalMass\"\n                    type: Integer {}\n                }\n            ]\n            ownedConnector: [\n                Connector {\n                    name: \"MassMeasurement\"\n                    end: [\n                        Part {\n                            name: \"ComponentMass\"\n                            type: Integer {}\n                        }\n                    ]\n                }\n            ]\n        }\n        Component {\n            name: \"Engine\"\n            ownedAttribute: [\n                Attribute {\n                    name: \"Mass\"\n                    type: Integer {}\n                }\n            ]\n        }\n        Component {\n            name: \"Transmission\"\n            ownedAttribute: [\n                Attribute {\n                    name: \"Mass\"\n                    type: Integer {}\n                }\n            ]\n        }\n    ]\n}\n",
    "\n```sysml\nimport this::SysML::v2;\n\n// Define the system\nSystem mySystem {\n    // Define the vehicle\n    Part vehicle {\n        // Define the chassis\n        Part chassis {\n            // Define the mass property\n            Property mass as Real (\n                min = 0.0,\n                max = 10000.0,\n                units = \"kilogram\"\n            );\n        }\n\n        // Define the engine\n        Part engine {\n            // Define the mass property\n            Property mass as Real (\n                min = 0.0,\n                max = 10000.0,\n                units = \"kilogram\"\n            );\n        }\n\n        // Define the transmission\n        Part transmission {\n            // Define the mass property\n            Property mass as Real (\n                min = 0.0,\n                max = 10000.0,\n                units = \"kilogram\"\n            );\n        }\n\n        // Define the total mass property\n        Property totalMass as Real (\n            min = 0.0,\n            max = 1000",
    "\n```sysml\nSystem {\n    Name = \"Vehicle Weight Management System\"\n    Component {\n        Name = \"Main Vehicle Components\"\n        Component {\n            Name = \"Chassis\"\n            Property {\n                Name = \"Weight\"\n                Type = Real\n                DefaultValue = 0.0\n            }\n        }\n        Component {\n            Name = \"Engine\"\n            Property {\n                Name = \"Weight\"\n                Type = Real\n                DefaultValue = 0.0\n            }\n        }\n        Component {\n            Name = \"Transmission\"\n            Property {\n                Name = \"Weight\"\n                Type = Real\n                DefaultValue = 0.0\n            }\n        }\n    }\n    Property {\n        Name = \"Total Weight\"\n        Type = Real\n        DefaultValue = 0.0\n    }\n    Property {\n        Name = \"Weight Limit\"\n        Type = Real\n        DefaultValue = 2500.0\n    }\n    Property {\n        Name = \"Exceeded\"\n        Type = Boolean\n        DefaultValue = false\n    }\n    Interaction {\n        Name =",
    "\n```sysml\nsystem Vehicle\n{\n  // Define the main components of the vehicle\n  components\n  {\n    Chassis\n    {\n      mass : Real\n    }\n    Engine\n    {\n      mass : Real\n    }\n    Transmission\n    {\n      mass : Real\n    }\n  }\n\n  // Define the total mass constraint\n  constraints\n  {\n    TotalMassConstraint : Real\n    {\n      value : Chassis.mass + Engine.mass + Transmission.mass <= 2500\n    }\n  }\n\n  // Define the dynamic behavior constraints\n  constraints\n  {\n    DynamicBehaviorConstraint : Real\n    {\n      value : (Chassis.mass > 0) and (Engine.mass > 0) and (Transmission.mass > 0)\n    }\n    ForceVelocityConstraint : Real\n    {\n      value : (Chassis.mass * (finalVelocity - initialVelocity)) / time = appliedForce\n    }\n  }\n}\n```",
    "\n```sysml\nimport this::SysML::v2;\n\n// Define the system\nSystem mySystem {\n    // Define the vehicles\n    Set<Vehicle> vehicles;\n\n    // Define the maintenance schedule for each vehicle\n    Set<MaintenanceSchedule> maintenanceSchedules;\n\n    // Define the vehicle status\n    Set<VehicleStatus> vehicleStatuses;\n\n    // Define the maintenance start time\n    Set<MaintenanceStartTime> maintenanceStartTimes;\n\n    // Define the maintenance end time\n    Set<MaintenanceEndTime> maintenanceEndTimes;\n\n    // Define the actual maintenance start time\n    Set<ActualMaintenanceStartTime> actualMaintenanceStartTimes;\n\n    // Define the actual maintenance end time\n    Set<ActualMaintenanceEndTime> actualMaintenanceEndTimes;\n\n    // Define the maximum allowed temperature\n    Set<MaxAllowedTemperature> maxAllowedTemperatures;\n\n    // Define the vehicle health status\n    Set<VehicleHealthStatus> vehicleHealthStatuses;\n}\n\n// Define the vehicle class\nClass Vehicle {\n    // Define the vehicle ID\n    String vehicleID;\n\n    // Define the next maintenance time\n    Time nextMaintenanceTime;\n",
    "\n```sysml\n// Define the system boundary\nSystem mySystem {\n    // Define the vehicle component\n    Component vehicle {\n        // Define the mass properties\n        Property maxMassLimit (type = Integer)\n        Property totalMass (type = Real)\n        Property fuelMass (type = Real)\n\n        // Define the engine component\n        Component engine {\n            // Define the engine properties\n            Property speed (type = Real)\n            Property torque (type = Real)\n\n            // Define the clutch interface\n            Interface clutchInterface {\n                // Define the torque transmission property\n                Property transmittedTorque (type = Real)\n            }\n        }\n\n        // Define the transmission component\n        Component transmission {\n            // Define the torque property\n            Property torque (type = Real)\n        }\n\n        // Define the drive system component\n        Component driveSystem {\n            // Define the power property\n            Property power (type = Real)\n        }\n\n        // Define the constraints\n        Constraint massConstraint {\n            // Ensure total mass does not exceed max mass limit\n            expr totalMass <= maxMassLimit\n            // Ensure fuel mass is positive\n            expr fuelMass >",
    "\n```sysml\nSystem mySystem\n{\n    Component myVehicle\n    {\n        Property maxMassFullTank = 2000 kg\n        Property maxMassEmptyTank = 1500 kg\n        Component myEngine\n        {\n            Property torqueRequired = Table1\n            Interface myClutchInterface\n            {\n                Requirement myTorqueTransmission\n                {\n                    Target myEngine\n                    Target myTransmission\n                }\n            }\n        }\n        Component myTransmission\n        {\n            Interface myClutchInterface\n        }\n    }\n}\n```",
    "\n```sysml\nSystem mySystem {\n    // Define the vehicle and its engine\n    Component vehicle {\n        // Define the engine within the vehicle\n        Component engine {\n            // Define the clutch interface for the engine\n            Interface clutchInterface {\n                // Define the required properties for the clutch interface\n                Property maxTorque : Real (min = 0, max = 1000) {\n                    // Define the relationship between engine speed and torque\n                    Table performanceTable {\n                        Row {\n                            speed : Real (min = 0, max = 10000)\n                            torque : Real (min = 0, max = 1000)\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // Define the mass properties for the vehicle\n    Property vehicleMass : Real (min = 0, max = 2000)\n    Property emptyVehicleMass : Real (min = 0, max = 1500)\n}\n```",
    "\n```sysml\nSystem mySystem\n{\n    // Define the vehicle mass constraint\n    Requirement vehicleMassConstraint\n    {\n        Name = \"Vehicle Mass Constraint\"\n        Description = \"The actual mass of the vehicle must not exceed the specified limit.\"\n        Condition = \"vehicleMass <= specifiedLimit\"\n    }\n\n    // Define the operating conditions for vehicle mass\n    Requirement fullFuelTankCondition\n    {\n        Name = \"Full Fuel Tank Condition\"\n        Description = \"When the fuel tank is full, the total vehicle mass must not exceed 2000 kg.\"\n        Condition = \"vehicleMass <= 2000\"\n    }\n\n    Requirement emptyFuelTankCondition\n    {\n        Name = \"Empty Fuel Tank Condition\"\n        Description = \"When the fuel tank is empty, the total vehicle mass must not exceed 1500 kg.\"\n        Condition = \"vehicleMass <= 1500\"\n    }\n\n    // Define the vehicle mass calculation\n    Property vehicleMass\n    {\n        Name = \"Vehicle Mass\"\n        Description = \"The sum of the vehicle’s curb mass and the fuel mass",
    "\n```sysml\n// Define the system\nSystem {\n    Name: VehiclePerformanceAnalyzer\n    Description: \"This system is designed to analyze the dynamic performance of vehicles, focusing primarily on modeling and calculating the power demand, acceleration, speed, and position variations over time during straight-line driving.\"\n\n    // Define the vehicle attributes\n    Class VehicleAttributes {\n        CurbWeight : Real\n        Payload : Real\n        WheelDiameter : Real\n        TransmissionEfficiency : Real\n        FuelEconomyUrban : Real\n        FuelEconomyHighway : Real\n    }\n\n    // Define the driving cycle\n    Class DrivingCycle {\n        TimeStampedPositions : Sequence(Time, Position)\n        TimeStampedSpeeds : Sequence(Time, Speed)\n    }\n\n    // Define the vehicle performance parameters\n    Class VehiclePerformanceParameters {\n        RequiredEnginePower : Real\n        Acceleration : Real\n        Speed : Real\n        Position : Real\n    }\n\n    // Define the system behavior\n    Behavior {\n        // Define the behavior to calculate vehicle performance\n        Operation CalculateVehiclePerformance {\n            Description: \"This operation calculates the required engine power, acceleration, and other dynamic parameters",
    "\n```sysml\n// Define the system\nSystem {\n    Name: \"Vehicle Fuel Economy Simulation\"\n    Description: \"This system performs simulation analysis on vehicle fuel economy.\"\n\n    // Define the system elements\n    Component {\n        Name: \"Vehicle\"\n        Description: \"The vehicle under simulation.\"\n\n        // Define vehicle parameters\n        Parameter {\n            Name: \"Curb Weight\"\n            Description: \"The weight of the vehicle when it is on the ground.\"\n            Type: Real\n            Value: 0\n        }\n        Parameter {\n            Name: \"Load\"\n            Description: \"The weight added to the vehicle by passengers or cargo.\"\n            Type: Real\n            Value: 0\n        }\n        Parameter {\n            Name: \"Wheel Diameter\"\n            Description: \"The diameter of the wheels.\"\n            Type: Real\n            Value: 0\n        }\n        Parameter {\n            Name: \"Transmission Efficiency\"\n            Description: \"The efficiency of the vehicle's transmission system.\"\n            Type: Real\n            Value: 0\n        }\n\n        // Define vehicle dynamics\n        Requirement {\n            Name: \"Required",
    "\n```sysml\n// Define the system\nSystem {\n    name: \"Engine Selection Analysis System\"\n    description: \"Conducts a comprehensive selection analysis for various types of engines, including four-cylinder and six-cylinder engines.\"\n\n    // Define the components\n    Component {\n        name: \"Engine Selection Analysis\"\n        description: \"Conducts a comprehensive selection analysis for various types of engines, including four-cylinder and six-cylinder engines.\"\n\n        // Define the properties\n        Property {\n            name: \"Power\"\n            type: Real\n            description: \"Key performance indicator for engine power.\"\n        }\n        Property {\n            name: \"Mass\"\n            type: Real\n            description: \"Key performance indicator for engine mass.\"\n        }\n        Property {\n            name: \"Efficiency\"\n            type: Real\n            description: \"Key performance indicator for engine efficiency.\"\n        }\n        Property {\n            name: \"Cost\"\n            type: Real\n            description: \"Key performance indicator for engine cost.\"\n        }\n\n        // Define the operations\n        Operation {\n            name: \"Aggregate and Calculate Indicators\"\n            description:",
    "\n```sysml\n// Define the System\nSystem mySystem\n{\n    // Define the Requirements\n    Requirement myRequirement\n    {\n        // Define the Description\n        Description = \"To ensure that the quality of vehicles meets relevant requirements, the system needs to check the curb weight of each vehicle. The curb weight of each vehicle must be less than or equal to 2,500 kilograms.\";\n\n        // Define the Test Requirements\n        TestRequirement myTestRequirement\n        {\n            // Define the Test Description\n            Description = \"Collecting the actual weight data of the vehicle, processing the collected data, and using the processed data as the basis to determine whether the vehicle's weight meets the specified standards, ultimately producing a qualified or unqualified evaluation result.\";\n\n            // Define the Test Steps\n            TestStep myTestStep1\n            {\n                // Define the Step Description\n                Description = \"Collect the actual weight data of the vehicle.\";\n            }\n\n            TestStep myTestStep2\n            {\n                // Define the Step Description\n                Description = \"Process the collected data.\";\n            }\n\n            TestStep myTestStep3\n            {\n                // Define the Step Description",
    "\n```sysml\n// Define the system\nSystem {\n    name: \"Mass Verification System\"\n    // Define the components\n    Component {\n        name: \"Vehicle\"\n        // Define the properties\n        Property {\n            name: \"mass\"\n            type: Integer\n        }\n    }\n    Component {\n        name: \"Weighing Equipment\"\n        // Define the properties\n        Property {\n            name: \"measuredMass\"\n            type: Integer\n        }\n    }\n    Component {\n        name: \"Mass Verification Unit\"\n        // Define the properties\n        Property {\n            name: \"verificationResult\"\n            type: String\n        }\n    }\n    // Define the interactions\n    Interaction {\n        name: \"Verify Mass\"\n        // Define the flow\n        Flow {\n            source: \"Weighing Equipment.measuredMass\"\n            target: \"Mass Verification Unit.measuredMass\"\n        }\n        Flow {\n            source: \"Mass Verification Unit.measuredMass\"\n            target: \"Vehicle.mass\"\n        }\n        Flow {\n            source: \"Vehicle.mass\"\n            target: \"Mass Verification Unit",
    "\n```sysml\nSystem {\n    Name = \"Transportation System\"\n    Description = \"The system is designed to provide end users with a convenient and efficient mode of transportation.\"\n\n    // Define the system's capabilities\n    Capabilities {\n        Capability {\n            Name = \"Transportation\"\n            Description = \"Supports a driver and up to four passengers sharing a vehicle, enabling them to travel safely and comfortably from the starting point to the destination.\"\n\n            // Define the system's features\n            Features {\n                Feature {\n                    Name = \"Free Entry and Exit\"\n                    Description = \"Users can freely enter and exit the vehicle.\"\n                }\n                Feature {\n                    Name = \"Smooth Entry and Exit\"\n                    Description = \"The system ensures that this process is simple and smooth.\"\n                }\n                Feature {\n                    Name = \"Environmental Integration\"\n                    Description = \"Fully considers and integrates surrounding environmental factors to ensure the safety and sustainability of the entire journey.\"\n                }\n                Feature {\n                    Name = \"Infrastructure Compatibility\"\n                    Description = \"Compatible with related infrastructure such as gas stations.\"\n                }\n                Feature {\n                    Name = \"Focus on Ride Experience",
    "\n```sysml\nSystem {\n    Name = \"Transportation System\"\n    Description = \"This system supports comprehensive transportation scenarios, enabling a driver and up to four passengers to be safely transported from the starting point to the destination.\"\n\n    Component {\n        Name = \"Vehicle\"\n        Description = \"The vehicle supports comprehensive transportation scenarios, enabling a driver and up to four passengers to be safely transported from the starting point to the destination.\"\n\n        Port {\n            Name = \"Driver\"\n            Description = \"The driver operates the vehicle under the influence of environmental conditions.\"\n            Type = \"Driver\"\n        }\n\n        Port {\n            Name = \"Passengers\"\n            Description = \"Up to four passengers can be safely transported in the vehicle.\"\n            Type = \"Passenger[]\"\n            Multiplicity = \"1..5\"\n        }\n\n        Port {\n            Name = \"Starting Point\"\n            Description = \"The starting point where the transportation process begins.\"\n            Type = \"Location\"\n        }\n\n        Port {\n            Name = \"Destination\"\n            Description = \"The destination where the transportation process ends.\"\n            Type = \"Location\"\n        }\n\n",
    "\n```sysml\nimport \"http://www.omg.org/spec/SysML/2/0/20110701/SysML.xmi\" as sysml;\n\n// Define the system\nsystem VehicleProductLine {\n    // Define the components\n    components {\n        Engine {\n            properties {\n                sysml::String type;\n                sysml::Integer numberOfCylinders;\n                sysml::Real cylinderDiameter;\n            }\n        }\n        Transmission {\n            properties {\n                sysml::String type;\n            }\n        }\n        VehicleVariant {\n            properties {\n                sysml::String name;\n            }\n        }\n    }\n\n    // Define the relationships\n    relationships {\n        // Relationship between Engine and VehicleVariant\n        Engine -> VehicleVariant {\n            properties {\n                sysml::String variantName;\n            }\n        }\n        // Relationship between Transmission and VehicleVariant\n        Transmission -> VehicleVariant {\n            properties {\n                sysml::String variantName;\n            }\n        }\n    }\n\n    // Define constraints\n    constraints {\n        // Constraint for Engine",
    "\n```sysml\n// Define the Engine system\nSystem {\n    name: Engine\n\n    // Define the variants of the engine\n    Variants {\n        Variant {\n            name: \"FourCylinderEngine\"\n            properties {\n                property: CylinderQuantity {\n                    value: 4\n                }\n                property: CylinderDiameter {\n                    value: 70\n                }\n            }\n        }\n        Variant {\n            name: \"SixCylinderEngine\"\n            properties {\n                property: CylinderQuantity {\n                    value: 6\n                }\n                property: CylinderDiameter {\n                    value: 70\n                }\n            }\n        }\n        Variant {\n            name: \"FourCylinderEngine_LargeCylinders\"\n            properties {\n                property: CylinderQuantity {\n                    value: 4\n                }\n                property: CylinderDiameter {\n                    value: 100\n                }\n            }\n        }\n        Variant {\n            name: \"SixCylinderEngine_LargeCylinders\"\n            properties {\n                property: CylinderQuantity {\n                    value: 6",
    "\n```sysml\n// Define the system\nSystem mySystem {\n    // Define the components\n    Component Engine {\n        // Define the properties\n        Property engineType : String {\n            // Define the possible values\n            ValueSet {\n                Value \"4-cylinder\"\n                Value \"6-cylinder\"\n            }\n        }\n        Property cylinderDiameter : String {\n            // Define the possible values\n            ValueSet {\n                Value \"70mm\"\n                Value \"100mm\"\n            }\n        }\n    }\n    Component Transmission {\n        // Define the properties\n        Property transmissionType : String {\n            // Define the possible values\n            ValueSet {\n                Value \"Manual\"\n                Value \"Automatic\"\n            }\n        }\n    }\n    // Define the constraints\n    Constraint engineTransmissionConstraint {\n        // Define the condition\n        Condition {\n            (Engine.engineType == \"4-cylinder\" && Transmission.transmissionType == \"Manual\") ||\n            (Engine.engineType == \"6-cylinder\" && Transmission.transmissionType == \"Automatic\")\n        }\n    }\n}\n```",
    "\n```sysml\n// System Assembly\nsystem SystemAssembly\n{\n    // Composed of\n    composedOf ComputerSubsystem, StorageSubsystem;\n}\n\n// Computer Subsystem\nsystem ComputerSubsystem\n{\n    // Utilizes and integrates all functions specified in the software design\n    // Defines message format and data format\n    software SoftwareDesign\n    {\n        // Message format\n        // Data format\n    }\n}\n\n// Storage Subsystem\nsystem StorageSubsystem\n{\n    // Accesses and is compatible with the message and data formats defined by the software\n    // Defines message format and data format\n    software SoftwareDesign\n    {\n        // Message format\n        // Data format\n    }\n}\n```",
    "\n```sysml\nsystem PowertrainSystem\n{\n  // Define the logical layer\n  layer LogicalLayer\n  {\n    // Define the logical components\n    component TorqueGenerator\n    {\n      // Define the properties or behaviors of TorqueGenerator\n    }\n  }\n\n  // Define the physical layer\n  layer PhysicalLayer\n  {\n    // Define the physical components\n    component PowerUnit\n    {\n      // Define the properties or behaviors of PowerUnit\n    }\n  }\n\n  // Define the mapping relationship between logical and physical layers\n  relationship Mapping\n  {\n    source LogicalLayer.TorqueGenerator\n    target PhysicalLayer.PowerUnit\n  }\n}\n```",
    "\n```sysml\nsystem PowerTransmissionSystem\n{\n  // Define components\n  component TorqueGenerator\n  {\n    // Define capabilities\n    capability GenerateTorque\n  }\n\n  component Engine\n  {\n    // Define capabilities\n    capability GenerateTorque\n  }\n\n  // Define relationships\n  relationship Powertrain\n  {\n    // Define relationships within Powertrain\n    relationship Engine\n    {\n      // Allocate TorqueGenerator to Engine\n      allocate TorqueGenerator to Engine\n    }\n  }\n}\n```",
    "\n```sysml\n// Define the system\nSystem mySystem\n{\n    // Define the system's main assemblies\n    Assembly interior\n    {\n        // Define components within the interior assembly\n        Component seatBelts\n        {\n            // Define the function of seat belts\n            Function safetyFunction\n            {\n                Description \"Ensures driver and passenger safety by providing restraint.\"\n            }\n        }\n\n        Component frontSeats\n        {\n            // Define the function of front seats\n            Function comfortFunction\n            {\n                Description \"Provides comfort for the driver and front passenger.\"\n            }\n        }\n\n        Component driverAirbag\n        {\n            // Define the function of the driver airbag\n            Function protectionFunction\n            {\n                Description \"Protects the driver in the event of a collision.\"\n            }\n        }\n\n        Component alarmSystem\n        {\n            // Define the function of the alarm system\n            Function securityFunction\n            {\n                Description \"Monitors and alerts in case of unauthorized access or theft.\"\n            }\n        }\n    }\n\n    Assembly bodyAssembly\n    {\n        // Define components within the body assembly\n        Component",
    "\n```sysml\n// Define the system\nSystem mySystem\n{\n    // Define the system's components\n    Component vehicleModel\n    {\n        // Define the vehicle's properties\n        Property initialVelocity type Real\n        Property initialPosition type Real\n        Property accelerationAtMoment type Real\n        Property timeStep type Real\n\n        // Define the vehicle's behavior\n        Behavior calculateVehicleBehavior\n        {\n            // Define the behavior's actions\n            Action calculateVelocityAndPosition\n            {\n                // Define the action's inputs\n                Input initialVelocity type Real\n                Input initialPosition type Real\n                Input accelerationAtMoment type Real\n                Input timeStep type Real\n\n                // Define the action's outputs\n                Output calculatedVelocity type Real\n                Output calculatedPosition type Real\n\n                // Define the action's algorithm\n                Algorithm calculate\n                {\n                    // Perform the integration using the ModelCenter analysis tool\n                    calculatedVelocity = initialVelocity + accelerationAtMoment * timeStep;\n                    calculatedPosition = initialPosition + initialVelocity * timeStep + 0.5 * accelerationAtMoment * timeStep^2;\n                }\n            }\n        }\n    }\n}",
    "\n```sysml\n// Define the system package\nSystem mySystem {\n    // Define the packages for safety-related components and mandatory safety components\n    Package SafetyFeatures {\n        // Define the components in the safety-related components package\n        Component seatBelt1 @Safety {\n            isMandatory = true;\n        }\n        Component seatBelt2 @Safety {\n            isMandatory = true;\n        }\n        Component driverAirbag @Safety {\n            isMandatory = false;\n        }\n        Component bumper @Safety {\n            isMandatory = true;\n        }\n        Component keylessEntry @Safety {\n            isMandatory = false;\n        }\n    }\n\n    Package MandatorySafetyFeatures {\n        // Define the components in the mandatory safety components package\n        Component seatBelt1 @Safety {\n            isMandatory = true;\n        }\n        Component seatBelt2 @Safety {\n            isMandatory = true;\n        }\n        Component bumper @Safety {\n            isMandatory = true;\n        }\n    }\n\n    // Define the wheel assembly package\n    Package WheelAssembly {\n        Component wheel1 {\n            isMandatory = true;",
    "\n```sysml\n// Define the system\nSystem VehicleSafetyComplianceSystem\n{\n    // Define components\n    Component VehicleInterior\n    {\n        // Define mandatory safety features\n        Feature SeatBelt1\n        Feature SeatBelt2\n        {\n            Mandatory true\n        }\n        // Define optional safety features\n        Feature DriverAirbag\n        {\n            Mandatory false\n        }\n    }\n    Component VehicleBody\n    {\n        // Define mandatory safety components\n        Feature Bumper\n        {\n            Mandatory true\n        }\n        // Define non-mandatory configurations\n        Feature KeylessEntrySystem\n        {\n            Mandatory false\n        }\n    }\n    Component ChassisSystem\n    {\n        // Define fixed components\n        Feature Tires\n        {\n            Fixed true\n        }\n        // Define optional safety features\n        Feature ABS\n        {\n            Mandatory false\n        }\n    }\n}\n```",
    "\n```sysml\n// Define the system\nSystem mySystem {\n    // Define the elements\n    Element riskModeling {\n        // Define the properties\n        Property probability {\n            Type Integer\n        }\n        Property severityLevel {\n            Type Integer\n        }\n        // Define the relationships\n        Relationship causesSituations {\n            Type Association\n            End relationshipEnd1 {\n                Role situation\n                Type Situation\n            }\n            End relationshipEnd2 {\n                Role cause\n                Type Cause\n            }\n        }\n        Relationship leadsToFailures {\n            Type Association\n            End relationshipEnd1 {\n                Role situation\n                Type Situation\n            }\n            End relationshipEnd2 {\n                Role failure\n                Type Failure\n            }\n        }\n    }\n    Element situation {\n        // Define the properties\n        Property description {\n            Type String\n        }\n    }\n    Element cause {\n        // Define the properties\n        Property description {\n            Type String\n        }\n    }\n    Element failure {\n        // Define the properties\n        Property description {\n            Type String\n        }\n    }\n}\n```",
    "\n```sysml\n// Define the system\nSystem mySystem {\n    // Define the system's properties\n    properties {\n        // Define the system's metadata\n        metadata {\n            // Define the system's description\n            description \"This system is designed for systematic risk metadata modeling and management across various scenarios, causes, and failures. Users can identify and describe different scenarios that may occur within the system. For each scenario, the specific causes and their probabilities of occurrence can be detailed, and possible failure types along with their severity levels can be associated. Furthermore, the system supports the description and tracking of causal relationships between scenarios, facilitating the understanding and analysis of risk propagation chains. On this basis, users can also combine a set of interrelated scenarios, causes, and failures to form complete risk scenarios, supporting risk analysis and decision-making. The system metadata is compatible with standard modeling languages, making it easy to integrate into larger systems engineering environments and enhancing the systematic capabilities of risk identification, analysis, and management.\"\n        }\n    }\n\n    // Define the system's components\n    components {\n        // Define the scenario component\n        Component scenario {\n            // Define the scenario's properties\n            properties {\n                //",
    "\n```sysml\n// Define the system\nSystem mySystem {\n    // Define the components\n    Component batteryMonitor {\n        // Define the properties\n        Property batteryLevel : Real;\n        Property minThreshold : Real = 0.2; // 20% as an example\n        Property batteryAge : Real;\n        Property riskLevel : String;\n        Property failureSeverity : String;\n    }\n\n    // Define the interactions\n    Interaction monitorBattery {\n        // Define the triggers\n        Trigger trigger {\n            Condition batteryLevel < minThreshold;\n            Action setBatteryState(\"low battery\");\n        }\n\n        // Define the actions\n        Action setBatteryState(state : String) {\n            // Update the state of the battery\n            batteryMonitor.state = state;\n        }\n\n        // Define the conditions\n        Condition condition {\n            Condition batteryAge > agingThreshold;\n            Action analyzeRisk(\"battery aging\");\n        }\n\n        // Define the actions\n        Action analyzeRisk(risk : String) {\n            // Analyze the risk and set the risk level\n            batteryMonitor.riskLevel = risk;\n        }\n\n        // Define",
    "\n```sysml\nSystem mySystem\n{\n    // Define system components and their relationships\n    Component myComponent1\n    {\n        // Define properties, ports, and other relevant details\n    }\n\n    Component myComponent2\n    {\n        // Define properties, ports, and other relevant details\n    }\n\n    // Define relationships between components\n    myComponent1 -> myComponent2 : Composition\n    {\n        // Define properties, ports, and other relevant details\n    }\n\n    // Define subsystems and their relationships\n    Subsystem mySubsystem1\n    {\n        // Define properties, ports, and other relevant details\n        myComponent1 : Composition\n        {\n            // Define properties, ports, and other relevant details\n        }\n\n        myComponent2 : Composition\n        {\n            // Define properties, ports, and other relevant details\n        }\n    }\n\n    Subsystem mySubsystem2\n    {\n        // Define properties, ports, and other relevant details\n        myComponent1 : Composition\n        {\n            // Define properties, ports, and other relevant details\n        }\n\n        myComponent2 : Composition\n        {\n            // Define properties, ports",
    "\n```sysml\n// Define the root component\n{\n    name: \"Automotive System\"\n    type: System\n    // Define components and their relationships\n    components: [\n        {\n            name: \"Chassis\"\n            type: System\n            components: [\n                {\n                    name: \"Body\"\n                    type: System\n                    components: [\n                        {\n                            name: \"Doors\"\n                            type: System\n                            components: [\n                                {\n                                    name: \"Front Doors\"\n                                    type: System\n                                },\n                                {\n                                    name: \"Rear Doors\"\n                                    type: System\n                                }\n                            ]\n                        },\n                        {\n                            name: \"Seats\"\n                            type: System\n                            components: [\n                                {\n                                    name: \"Driver Seat\"\n                                    type: System\n                                },\n                                {\n                                    name: \"Passenger Seat\"\n                                    type: System\n                                }\n                            ]\n                        }\n                    ]\n                },\n                {\n                    name: \"Engine\"\n                    type: System\n                }\n            ]\n        },\n        {\n            name: \"Safety Systems\"\n            type",
    "\n```sysml\nlibrary AutomotiveModel\n\n// Define the core component \"汽车\" (automobile) with alias \"Car\"\n{\n    // Core component definition\n    Car : System {\n        // Aliases\n        Car alias \"汽车 (Car)\";\n\n        // Comments to help developers and users understand the meaning and application context\n        comment \"This system model aims to provide standardized definitions and annotations for fundamental concepts and elements in the automotive domain.\";\n        comment \"In the model, “汽车” (automobile) is designated as a core component, with the alias “汽车 (Car)” defined to facilitate communication and usage in various application scenarios.\";\n        comment \"The model also includes comprehensive explanatory comments to help developers and users better understand the meaning and application context of each element.\";\n        comment \"The model associates relevant physical quantities such as “扭矩 (Torque)” to ensure standardized and consistent expression of automotive characteristics.\";\n        comment \"The overall design emphasizes clarity and extensibility, enabling convenient development, integration, and maintenance of subsequent automotive-related systems.\";\n\n        // Physical quantities associated\n        Torque : PhysicalQuantity;\n    }\n}\n```",
    "\n```sysml\n// Define the core object 'Automobile'\nClass Automobile {\n    // Attributes\n    String name;\n    String description;\n    // Operations\n    void enterInformation(String info);\n    void queryInformation(String query);\n    void archiveInformation(String archive);\n}\n\n// Define an alias 'Car' for 'Automobile'\nAlias Car = Automobile;\n\n// Define a standard physical quantity system 'ISQ'\nClass ISQ {\n    // Attributes\n    String name = \"International System of Quantities\";\n    String description;\n    // Operations\n    void referencePhysicalQuantity(String quantity);\n}\n\n// Define a class to manage torque in the ISQ standard\nClass TorqueValue {\n    // Attributes\n    ISQ isq;\n    double value;\n    String unit;\n    // Operations\n    void setValue(double value, String unit);\n    double getValue();\n}\n\n// Define a class to add explanatory documents\nClass ExplanationDocument {\n    // Attributes\n    String title;\n    String content;\n    // Operations\n    void addDocument(String title, String content);\n    void view",
    "\n```sysml\nimport \"http://www.omg.org/spec/SysML/20131001\";\n\n// Define the System\nSystem AutomobileManagementSystem {\n    // Define the Automobile class\n    Class Automobile {\n        // Define properties\n        Property alias Car;\n        Property TorqueValue : Real;\n    }\n\n    // Define the Torque alias for TorqueValue\n    Property Torque = TorqueValue;\n}\n```\n\n```",
    "\n```sysml\n// Define the system\nSystem mySystem {\n    // Define the components\n    Component myEngine {\n        // Define the properties\n        Property cylinders : Integer {\n            // Define the allowable values\n            Range 4 to 6;\n        }\n    }\n\n    // Define the connectors\n    Connector myVehicleConnector {\n        // Define the source\n        Source : myEngine;\n        // Define the target\n        Target : myVehicle;\n    }\n\n    // Define the instances\n    Instance myVehicle {\n        // Define the properties\n        Property vehicleSize : String {\n            // Define the allowable values\n            Range \"small\", \"large\";\n        }\n    }\n}\n\n// Define the relationships\nRelationship myEngineRelationship {\n    // Define the source\n    Source : myVehicle;\n    // Define the target\n    Target : myEngine;\n    // Define the condition\n    Condition : if (myVehicle.vehicleSize == \"small\") {\n        myEngine.cylinders = 4;\n    } else if (myVehicle.vehicleSize == \"large\") {\n        myEngine.cylinders = 6;\n    }",
    "\n```sysml\n// Define the system\nSystem mySystem {\n    // Define the components\n    Component fuelTank\n    Component engine\n    Component fuelManagementSystem\n\n    // Define the interfaces\n    Interface fuelIn : FlowPort\n    Interface fuelOut : FlowPort\n    Interface fuelTemp : DataPort\n\n    // Define the relationships\n    connects fuelTank.fuelOut to engine.fuelIn via fuelIn\n    connects fuelTank.fuelTemp to fuelManagementSystem.fuelTemp\n    connects engine.fuelOut to fuelTank.fuelIn via fuelOut\n}\n```",
    "\n```sysml\n// Define the system\nSystem mySystem {\n    // Define the components\n    Component vehicle {\n        // Define attributes\n        Attribute mass : Real = 0.0;\n\n        // Define subcomponents\n        Subcomponent frontAxleAssembly : AxleAssembly;\n        Subcomponent rearAxleAssembly : AxleAssembly;\n\n        // Define connectors\n        Connector axleAssemblyConnector : AxleAssembly {\n            source frontAxleAssembly;\n            target rearAxleAssembly;\n        }\n    }\n\n    Component AxleAssembly {\n        // Define subcomponents\n        Subcomponent frontWheel : Wheel;\n        Subcomponent rearWheel : Wheel;\n\n        // Define connectors\n        Connector wheelConnector : Wheel {\n            source frontWheel;\n            target rearWheel;\n        }\n    }\n\n    Component Wheel {\n        // Define attributes\n        Attribute name : String;\n        Attribute specialType : String;\n        Attribute mass : Real = 0.0;\n        Attribute steeringAngle : Real = 0.0;\n    }\n}\n```\n\n```sysml\n// Define the system\nSystem mySystem {\n    // Define the"
]