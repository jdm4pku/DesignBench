[
    "package 'VehicleManagement' {\n\tattribute def VehicleMass;\n\tattribute def CurrentStatus;\n\tattribute def GearSetting;\n\tattribute def AcceleratorPedalPosition;\n\tport def VehicleMassPort {\n\t\tout vehicleMass: VehicleMass;\n\t}\n\tport def CurrentStatusPort {\n\t\tout currentStatus: CurrentStatus;\n\t}\n\tport def GearSettingPort {\n\t\tout gearSetting: GearSetting;\n\t}\n\tport def AcceleratorPedalPositionPort {\n\t\tout acceleratorPedalPosition: AcceleratorPedalPosition;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport vehicleMassPort: VehicleMassPort;\n\t\t\tport currentStatusPort: CurrentStatusPort;\n\t\t\tport gearSettingPort: GearSettingPort;\n\t\t\tport acceleratorPedalPositionPort: AcceleratorPedalPositionPort;\n\t\t\tpart engine {\n\t\t\t\tport enginePort: ~EnginePort;\n\t\t\t\tperform manageEngine.setEngineParameters {\n\t\t\t\t\tin vehicleMass = vehicleMassPort.vehicleMass;\n\t\t\t\t\tin currentStatus = currentStatusPort.currentStatus;\n\t\t\t\t\tin gearSetting = gearSettingPort.gearSetting;\n\t\t\t\t\tin accelerator",
    "package 'VehicleModel' {\n\tattribute def VehicleType;\n\tattribute def OperatedBy;\n\tattribute def PoweredBy;\n\tport def VehicleTypePort {\n\t\tout vehicleType : VehicleType;\n\t}\n\tport def OperatedByPort {\n\t\tout operatedBy: OperatedBy;\n\t}\n\tport def PoweredByPort {\n\t\tout poweredBy: PoweredBy;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport vehicleTypePort: VehicleTypePort;\n\t\t\tport operatedByPort: OperatedByPort;\n\t\t\tport poweredByPort: PoweredByPort;\n\t\t}\n\t\tpart personnel {\n\t\t\tport operatedByPort: OperatedByPort;\n\t\t\tperform operateVehicle.sendOperatedBy {\n\t\t\t\tout operatedBy = operatedByPort.operatedBy;\n\t\t\t}\n\t\t}\n\t\tinterface personnelToVehicle connect personnel.operatedByPort to vehicle.operatedByPort {\n\t\t\tref flow references operateVehicle.operatedByFlow\n\t\t\t\tfrom source.operatedBy to target.operatedBy; \n\t\t}\n\t\tpart engine {\n\t\t\tport poweredByPort: PoweredByPort;",
    "package 'VehicleStructure' {\n\tattribute def VehicleComponent;\n\tattribute def Vehicle;\n\tport def VehicleComponentPort {\n\t\tout vehicleComponent: VehicleComponent;\n\t}\n\tport def VehiclePort {\n\t\tout vehicle: Vehicle;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport vehicleComponentPort: VehicleComponentPort;\n\t\t\tperform assembleVehicle.sendVehicleComponent {\n\t\t\t\tout vehicleComponent = vehicleComponentPort.vehicleComponent;\n\t\t\t}\n\t\t}\n\t\tinterface vehicleToComponent connect vehicle.vehicleComponentPort to component.vehicleComponentPort {\n\t\t\tref flow references assembleVehicle.vehicleComponentFlow\n\t\t\t\tfrom source.vehicleComponent to target.vehicleComponent; \n\t\t}\n\t\tpart component {\n\t\t\tport vehicleComponentPort: ~VehicleComponentPort;\n\t\t\tperform assembleVehicle.receiveVehicleComponent {\n\t\t\t\tin vehicleComponent = vehicleComponentPort.vehicleComponent;\n\t\t\t}\n\t\t}\n\t}\n\taction assembleVehicle {\n\t\taction sendVehicleComponent { out vehicleComponent: VehicleComponent; }\n\t\tsuccession flow vehicleComponentFlow from sendVehicleComponent.vehicleComponent to receiveVehicleComponent.vehicleComponent;\n\t",
    "package 'VehicleSystem' {\n\tattribute def VehicleType;\n\tattribute def EngineType;\n\tattribute def CylinderCount;\n\tport def VehicleTypePort {\n\t\tout vehicleType : VehicleType;\n\t}\n\tport def EngineTypePort {\n\t\tout engineType : EngineType;\n\t}\n\tport def CylinderCountPort {\n\t\tout cylinderCount : CylinderCount;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport vehicleTypePort: VehicleTypePort;\n\t\t\tport engineTypePort: EngineTypePort;\n\t\t\tport cylinderCountPort: CylinderCountPort;\n\t\t\tperform defineVehicleType.sendVehicleType {\n\t\t\t\tout vehicleType = vehicleTypePort.vehicleType;\n\t\t\t}\n\t\t\tperform defineEngineType.sendEngineType {\n\t\t\t\tout engineType = engineTypePort.engineType;\n\t\t\t}\n\t\t\tperform defineCylinderCount.sendCylinderCount {\n\t\t\t\tout cylinderCount = cylinderCountPort.cylinderCount;\n\t\t\t}\n\t\t}\n\t\tinterface vehicleToEngine connect vehicle.vehicleTypePort to engine.vehicleTypePort\n\t\t\tand vehicle.engineTypePort to engine.engineType",
    "package 'TrafficSignal' {\n\tattribute def TrafficLightColor;\n\tattribute def AlwaysGreenSignal;\n\tport def TrafficLightColorPort {\n\t\tout trafficLightColor: TrafficLightColor;\n\t}\n\tport def AlwaysGreenSignalPort {\n\t\tout alwaysGreenSignal: AlwaysGreenSignal;\n\t}\n\tpart context {\n\t\tpart trafficSignal {\n\t\t\tport trafficLightColorPort: ~TrafficLightColorPort;\n\t\t\tperform manageTraffic.updateTrafficLight {\n\t\t\t\tin trafficLightColor = trafficLightColorPort.trafficLightColor;\n\t\t\t}\n\t\t}\n\t\tpart alwaysGreen {\n\t\t\tport alwaysGreenSignalPort: ~AlwaysGreenSignalPort;\n\t\t\tperform manageTraffic.maintainGreen {\n\t\t\t\tout alwaysGreenSignal = alwaysGreenSignalPort.alwaysGreenSignal;\n\t\t\t}\n\t\t}\n\t\tinterface trafficSignalToAlwaysGreen connect trafficSignal.trafficLightColorPort to alwaysGreen.alwaysGreenSignalPort {\n\t\t\tref flow references maintainGreen.alwaysGreenFlow\n\t\t\t\tfrom source.alwaysGreenSignal to target.alwaysGreenSignal; \n\t\t}\n\t\tpart manageTraffic {\n\t\t\taction updateTrafficLight { in trafficLight",
    "package 'InformationClassification' {\n\tattribute def Classification;\n\tattribute def Grade;\n\tport def ClassificationPort {\n\t\tout classification: Classification;\n\t}\n\tport def GradePort {\n\t\tout grade: Grade;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport classificationPort: ClassificationPort;\n\t\t\tperform classifyInformation.sendClassification {\n\t\t\t\tout classification = classificationPort.classification;\n\t\t\t}\n\t\t\tperform gradeInformation.sendGrade {\n\t\t\t\tout grade = gradePort.grade;\n\t\t\t}\n\t\t}\n\t\tinterface userToClassification connect user.classificationPort to classification.classificationPort {\n\t\t\tref flow references classifyInformation.classificationFlow\n\t\t\t\tfrom source.classification to target.classification; \n\t\t}\n\t\tinterface userToGrade connect user.gradePort to grade.gradePort {\n\t\t\tref flow references gradeInformation.gradeFlow\n\t\t\t\tfrom source.grade to target.grade; \n\t\t}\n\t\tpart",
    "package 'VehicleSystem' {\n\tattribute def EngineType;\n\tattribute def CylinderCount;\n\tport def EngineTypePort {\n\t\tout engineType : EngineType;\n\t}\n\tport def CylinderCountPort {\n\t\tout cylinderCount: CylinderCount;\n\t}\n\tpart context {\n\t\tpart smallVehicle {\n\t\t\tport engineTypePort: EngineTypePort;\n\t\t\tperform configureEngine.setEngineType {\n\t\t\t\tout engineType = engineTypePort.engineType;\n\t\t\t}\n\t\t}\n\t\tpart largeVehicle {\n\t\t\tport engineTypePort: EngineTypePort;\n\t\t\tperform configureEngine.setEngineType {\n\t\t\t\tout engineType = engineTypePort.engineType;\n\t\t\t}\n\t\t}\n\t\tinterface vehicleToEngine connect smallVehicle.engineTypePort to engine.engineTypePort {\n\t\t\tref flow references configureEngine.engineTypeFlow\n\t\t\t\tfrom source.engineType to target.engineType; \n\t\t}\n\t\tinterface vehicleToEngine connect largeVehicle.engineTypePort to engine.engineTypePort {\n\t\t\tref flow references configureEngine.engineTypeFlow\n\t\t\t\tfrom source.engineType",
    "package 'VehicleModeling' {\n\tattribute def QualityAttributes;\n\tattribute def DriverInfo;\n\tattribute def FuelType;\n\tattribute def PersonnelInfo;\n\tport def QualityAttributesPort {\n\t\tout qualityAttributes : QualityAttributes;\n\t}\n\tport def DriverInfoPort {\n\t\tout driverInfo : DriverInfo;\n\t}\n\tport def FuelTypePort {\n\t\tout fuelType : FuelType;\n\t}\n\tport def PersonnelInfoPort {\n\t\tout personnelInfo : PersonnelInfo;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport qualityAttributesPort: QualityAttributesPort;\n\t\t\tport driverInfoPort: DriverInfoPort;\n\t\t\tport fuelTypePort: FuelTypePort;\n\t\t\tport personnelInfoPort: PersonnelInfoPort;\n\t\t\tpart fuelTank {\n\t\t\t\tport fuelTypePort: ~FuelTypePort;\n\t\t\t\tperform manageFuel.storeFuel {\n\t\t\t\t\tin fuelType = fuelTypePort.fuelType;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tinterface vehicleToFuelTank connect vehicle.fuelTypePort to fuelTank.fuelTypePort {\n\t\t\tref flow",
    "package 'AutomobileWheelAssembly' {\n\tattribute def WheelBearingUnit;\n\tattribute def Tire;\n\tattribute def Bead;\n\tattribute def Hub;\n\tattribute def Rim;\n\tattribute def BoltMountingHole;\n\tattribute def ThreadedHole;\n\tattribute def BoltConnection;\n\tport def WheelBearingUnitPort {\n\t\tout wheelBearingUnit: WheelBearingUnit;\n\t}\n\tport def TirePort {\n\t\tout tire: Tire;\n\t}\n\tport def BeadPort {\n\t\tout bead: Bead;\n\t}\n\tport def HubPort {\n\t\tout hub: Hub;\n\t}\n\tport def RimPort {\n\t\tout rim: Rim;\n\t}\n\tport def BoltMountingHolePort {\n\t\tout boltMountingHole: BoltMountingHole;\n\t}\n\tport def ThreadedHolePort {\n\t\tout threadedHole: ThreadedHole;\n\t}\n\tport def BoltConnectionPort {\n\t\tout boltConnection: BoltConnection;\n\t}\n\tpart context {\n\t\tpart wheelBearingUnit {\n\t\t\tport wheelBearingUnitPort: WheelBearingUnitPort",
    "package 'FuelManagementSystem' {\n\tattribute def FuelFlow;\n\tattribute def Temperature;\n\tport def FuelFlowPort {\n\t\tin fuelFlow: FuelFlow;\n\t\tout fuelFlow: FuelFlow;\n\t}\n\tport def TemperaturePort {\n\t\tin temperature: Temperature;\n\t\tout temperature: Temperature;\n\t}\n\tpart context {\n\t\tpart fuelTank {\n\t\t\tport fuelFlowPort: FuelFlowPort;\n\t\t\tperform manageFuelFlow.supplyFuel {\n\t\t\t\tin fuelFlow = fuelFlowPort.fuelFlow;\n\t\t\t\tout fuelFlow = fuelFlowPort.fuelFlow;\n\t\t\t}\n\t\t\tperform manageFuelFlow.receiveExcessFuel {\n\t\t\t\tin fuelFlow = fuelFlowPort.fuelFlow;\n\t\t\t\tout fuelFlow = fuelFlowPort.fuelFlow;\n\t\t\t}\n\t\t}\n\t\tinterface fuelTankToEngine connect fuelTank.fuelFlowPort to engine.fuelFlowPort {\n\t\t\tref flow references supplyFuel.fuelFlowFlow\n\t\t\t\tfrom source.fuelFlow to target.fuelFlow;\n\t\t\tref flow references receiveExcessFuel.fuelFlowFlow\n\t\t\t\tfrom",
    "package 'VehicleConfiguration' {\n\tattribute def Mass;\n\tattribute def AxleType;\n\tattribute def TireType;\n\tattribute def SteeringAngle;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tattribute Mass = 1750;\n\t\t\tpart frontAxle {\n\t\t\t\tattribute AxleType = 'standard';\n\t\t\t\tpart frontLeftTire {\n\t\t\t\t\tattribute TireType = 'standard';\n\t\t\t\t}\n\t\t\t\tpart frontRightTire {\n\t\t\t\t\tattribute TireType = 'standard';\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart rearAxle {\n\t\t\t\tattribute AxleType = 'standard';\n\t\t\t\tpart rearLeftTire {\n\t\t\t\t\tattribute TireType = 'standard';\n\t\t\t\t}\n\t\t\t\tpart rearRightTire {\n\t\t\t\t\tattribute TireType = 'standard';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpart vehicle1_c1 {\n\t\t\tinherit",
    "package 'VehicleTrailerCoupling' {\n\tattribute def CouplingState;\n\tport def CouplingStatePort {\n\t\tout couplingState: CouplingState;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport couplingStatePort: ~CouplingStatePort;\n\t\t\tperform connectToTrailer.sendCouplingState {\n\t\t\t\tout couplingState = couplingStatePort.couplingState;\n\t\t\t}\n\t\t}\n\t\tinterface vehicleToTrailer connect vehicle.couplingStatePort to trailer.couplingStatePort {\n\t\t\tref flow references connectToTrailer.couplingStateFlow\n\t\t\t\tfrom source.couplingState to target.couplingState; \n\t\t}\n\t\tpart trailer {\n\t\t\tport couplingStatePort: ~CouplingStatePort;\n\t\t\tperform connectToVehicle.receiveCouplingState {\n\t\t\t\tin couplingState = couplingStatePort.couplingState;\n\t\t\t}\n\t\t}\n\t}\n\taction connectToTrailer {\n\t\taction sendCouplingState { out couplingState: CouplingState; }\n\t\tsuccession flow couplingStateFlow from sendCouplingState.",
    "package 'VehiclePowerTransmission' {\n\tattribute def FuelCommand;\n\tattribute def Power;\n\tport def FuelCommandPort {\n\t\tout fuelCommand: FuelCommand;\n\t}\n\tport def PowerPort {\n\t\tout power: Power;\n\t}\n\tpart context {\n\t\tpart engine {\n\t\t\tport fuelCommandPort: ~FuelCommandPort;\n\t\t\tperform transmitPower.receiveFuelCommand {\n\t\t\t\tin fuelCommand = fuelCommandPort.fuelCommand;\n\t\t\t}\n\t\t}\n\t\tpart transmission {\n\t\t\tport powerPort: ~PowerPort;\n\t\t\tperform transmitPower.sendPower {\n\t\t\t\tin power = powerPort.power;\n\t\t\t\tout",
    "package 'MultiArchitectureSystem' {\n\tpart context {\n\t\tpart b11 {\n\t\t\tpart c1 {\n\t\t\t\tport pb;\n\t\t\t}\n\t\t\tpart c2 {\n\t\t\t\tport pc;\n\t\t\t}\n\t\t\tinterface pe connect c1.pb to c2.pc;\n\t\t}\n\t\tpart b12 {\n\t\t\tpart c3 {\n\t\t\t\tport pd;\n\t\t\t}\n\t\t\tpart c4 {\n\t\t\t\tport pe;\n\t\t\t}\n\t\t\tinterface pf connect c3.pd to c4.pe;\n\t\t}\n\t\tpart b21 {\n\t\t\tpart c",
    "package 'AutomotivePowertrain' {\n\tattribute def FuelCommand;\n\tattribute def EngineStartStopCmd;\n\tattribute def PowerTransmissionCmd;\n\tattribute def EngineTorque;\n\tattribute def PowerDistributionCmd;\n\tattribute def DrivingForce;\n\tport def FuelCommandPort {\n\t\tout fuelCommand: FuelCommand;\n\t}\n\tport def EngineStartStopCmdPort {\n\t\tout engineStartStopCmd: EngineStartStopCmd;\n\t}\n\tport def PowerTransmissionCmdPort {\n\t\tout powerTransmissionCmd: PowerTransmissionCmd;\n\t}\n\tport def EngineTorquePort {\n\t\tout engineTorque: EngineTorque;\n\t}\n\tport def PowerDistributionCmdPort {\n\t\tout powerDistributionCmd: PowerDistributionCmd;\n\t}\n\tport def DrivingForcePort {\n\t\tout drivingForce: DrivingForce;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport fuelCommandPort: FuelCommandPort;\n\t\t\tport engineStartStopCmdPort: EngineStartStopCmdPort;\n\t\t\tperform controlEngine.sendFuelCommand {\n\t\t\t\tout fuelCommand = fuelCommandPort.fuelCommand;\n\t\t\t}",
    "package 'AutomotivePowertrain' {\n\tattribute def FuelControlCmd;\n\tattribute def EngineStartCmd;\n\tattribute def StallSignal;\n\tattribute def Torque;\n\tattribute def PowerTransmission;\n\tport def FuelControlCmdPort {\n\t\tout fuelControlCmd : FuelControlCmd;\n\t}\n\tport def EngineStartCmdPort {\n\t\tout engineStartCmd : EngineStartCmd;\n\t}\n\tport def StallSignalPort {\n\t\tout stallSignal : StallSignal;\n\t}\n\tport def TorquePort {\n\t\tout torque: Torque;\n\t}\n\tport def PowerTransmissionPort {\n\t\tout powerTransmission: PowerTransmission;\n\t}\n\tpart context {\n\t\tpart engine {\n\t\t\tport fuelControlCmdPort: ~FuelControlCmdPort;\n\t\t\tperform startEngine.receiveFuelControlCmd {\n\t\t\t\tin fuelControlCmd = fuelControlCmdPort.fuelControlCmd;\n\t\t\t}\n\t\t\tperform generateTorque.sendEngineStartCmd {\n\t\t\t\tout engineStartCmd = engineStartCmdPort.engineStartCmd;\n\t\t\t}\n\t\t}\n\t\tinterface engineToPowertrain connect engine.",
    "package 'VehiclePowertrainSystem' {\n\tattribute def FuelCommand;\n\tattribute def EngineOutputTorque;\n\tattribute def TransmissionOutputTorque;\n\tattribute def WheelTorque;\n\tattribute def EngineStartSignal;\n\tattribute def EngineShutdownSignal;\n\tport def FuelCommandPort {\n\t\tin fuelCommand: FuelCommand;\n\t}\n\tport def EngineOutputTorquePort {\n\t\tout engineOutputTorque: EngineOutputTorque;\n\t}\n\tport def TransmissionOutputTorquePort {\n\t\tout transmissionOutputTorque: TransmissionOutputTorque;\n\t}\n\tport def WheelTorquePort {\n\t\tout wheelTorque: WheelTorque;\n\t}\n\tport def EngineStartSignalPort {\n\t\tin engineStartSignal: EngineStartSignal;\n\t}\n\tport def EngineShutdownSignalPort {\n\t\tin engineShutdownSignal: EngineShutdownSignal;\n\t}\n\tpart context {\n\t\tpart driver {\n\t\t\tport fuelCommandPort: FuelCommandPort;\n\t\t\tperform generateEngineOutputTorque.receiveFuelCommand {\n\t\t\t\tin fuelCommand = fuelCommandPort.fuelCommand;\n\t\t\t}\n\t\t\tperform startEngine.sendEngine",
    "package 'VehicleTrailerConnection' {\n\tattribute def ConnectionState;\n\tport def ConnectionStatePort {\n\t\tout connectionState: ConnectionState;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport connectionStatePort: ConnectionStatePort;\n\t\t\tperform connectTrailer.sendConnectionState {\n\t\t\t\tout connectionState = connectionStatePort.connectionState;\n\t\t\t}\n\t\t}\n\t\tinterface vehicleToTrailer connect vehicle.connectionStatePort to trailer.connectionStatePort {\n\t\t\tref flow references connectTrailer.connectionStateFlow\n\t\t\t\tfrom source.connectionState to target.connectionState; \n\t\t}\n\t\tpart trailer {\n\t\t\tport connectionStatePort: ~ConnectionStatePort;\n\t\t\tperform connectTrailer.receiveConnectionState {\n\t\t\t\tin connectionState = connectionStatePort.connectionState;\n\t\t\t}\n\t\t}\n\t}\n\taction connectTrailer {\n\t\taction sendConnectionState { out connectionState: ConnectionState; }\n\t\tsuccession flow connectionStateFlow from sendConnectionState.connectionState to receiveConnectionState.connectionState;\n\t\taction receiveConnectionState { in connectionState: ConnectionState; }\n",
    "package 'VehicleTrailerManagement' {\n\tattribute def ConnectionStatus;\n\tport def ConnectionStatusPort {\n\t\tout connectionStatus: ConnectionStatus;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport connectionStatusPort: ConnectionStatusPort;\n\t\t\tperform connectOrDisconnect.sendConnectionStatus {\n\t\t\t\tout connectionStatus = connectionStatusPort.connectionStatus;\n\t\t\t}\n\t\t}\n\t\tinterface vehicleToTrailer connect vehicle.connectionStatusPort to trailer.connectionStatusPort {\n\t\t\tref flow references connectOrDisconnect.connectionStatusFlow\n\t\t\t\tfrom source.connectionStatus to target.connectionStatus; \n\t\t}\n\t\tpart trailer {\n\t\t\tport connectionStatusPort: ~ConnectionStatusPort;\n\t\t\tperform connectOrDisconnect.receiveConnectionStatus {\n\t\t\t\tin connectionStatus = connectionStatusPort.connectionStatus;\n\t\t\t}\n\t\t}\n\t}\n\taction connectOrDisconnect {\n\t\taction sendConnectionStatus { out connectionStatus: ConnectionStatus; }\n\t\tsuccession flow connectionStatusFlow from sendConnectionStatus.connectionStatus to receiveConnectionStatus.connectionStatus;\n\t\taction receiveConnectionStatus { in connectionStatus: ConnectionStatus; }\n",
    "package 'VehicleTrailerSystem' {\n\tattribute def ConnectionState;\n\tport def ConnectionStatePort {\n\t\tout connectionState: ConnectionState;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport connectionStatePort: ConnectionStatePort;\n\t\t\tperform hitchTrailer.sendConnectionState {\n\t\t\t\tout connectionState = connectionStatePort.connectionState;\n\t\t\t}\n\t\t}\n\t\tinterface vehicleToTrailer connect vehicle.connectionStatePort to trailer.connectionStatePort {\n\t\t\tref flow references hitchTrailer.connectionStateFlow\n\t\t\t\tfrom source.connectionState to target.connectionState; \n\t\t}\n\t\tpart trailer {\n\t\t\tport connectionStatePort: ~ConnectionStatePort;\n\t\t\tperform hitchTrailer.receiveConnectionState {\n\t\t\t\tin connectionState = connectionStatePort.connectionState;\n\t\t\t}\n\t\t}\n\t}\n\taction hitchTrailer {\n\t\taction sendConnectionState { out connectionState: ConnectionState; }\n\t\tsuccession flow connectionStateFlow from sendConnectionState.connectionState to receiveConnectionState.connectionState;\n\t\taction receiveConnectionState { in connectionState: ConnectionState; }\n",
    "package 'FuelSystem' {\n\tattribute def FuelFlow;\n\tattribute def FuelTemp;\n\tport def FuelFlowPort {\n\t\tout fuelFlow: FuelFlow;\n\t}\n\tport def FuelTempPort {\n\t\tout fuelTemp: FuelTemp;\n\t}\n\tpart context {\n\t\tpart fuelTank {\n\t\t\tport fuelFlowPort: FuelFlowPort;\n\t\t\tperform fuelPump.supplyFuel {\n\t\t\t\tout fuelFlow = fuelFlowPort.fuelFlow;\n\t\t\t}\n\t\t}\n\t\tinterface fuelTankToEngine connect fuelTank.fuelFlowPort to engine.fuelFlowPort {\n\t\t\tref flow references supplyFuel.fuelFlowFlow\n\t\t\t\tfrom source.fuelFlow to target.fuelFlow; \n\t\t}\n\t\tpart engine {\n\t\t\tport fuelFlowPort: ~FuelFlowPort;\n\t\t\tperform fuelPump.returnFuel {\n\t\t\t\tin fuelFlow = fuelFlowPort.fuelFlow;\n\t\t\t\tout fuelFlow = fuelFlowPort.fuelFlow;\n\t\t\t}\n\t\t\tport fuelTempPort: FuelTempPort;\n\t\t}\n\t\tpart fuelPump {\n\t\t",
    "package 'FuelDeliverySystem' {\n\tattribute def FuelLevel;\n\tattribute def MaxCapacity;\n\tport def FuelLevelPort {\n\t\tout fuelLevel: FuelLevel;\n\t}\n\tport def MaxCapacityPort {\n\t\tout maxCapacity: MaxCapacity;\n\t}\n\tpart context {\n\t\tpart storageTank {\n\t\t\tport fuelPort: ~FuelPort;\n\t\t\tperform fuelPump.extractFuel {\n\t\t\t\tout fuel = fuelPort.fuel;\n\t\t\t}\n\t\t}\n\t\tinterface storageToFuelPump connect storageTank.fuelPort to fuelPump.fuelPort {\n\t\t\tref flow references extractFuelFlow\n\t\t\t\tfrom source.fuel to target.fuel; \n\t\t}\n\t\tpart fuelPump {\n\t\t\tport fuelPort: ~FuelPort;\n\t\t\tperform vehicleFuelTank.receiveFuel {\n\t\t\t\tin fuel = fuelPort.fuel;\n\t\t\t}\n\t\t}\n\t\tinterface fuelPumpToVehicle connect fuelPump.fuelPort to vehicleFuelTank.fuelPort {\n\t\t\tref flow references receive",
    "package 'AutomobileAssembly' {\n\tattribute def GearboxInstalled;\n\tattribute def EngineInstalled;\n\tport def GearboxInstalledPort {\n\t\tout gearboxInstalled: GearboxInstalled;\n\t}\n\tport def EngineInstalledPort {\n\t\tout engineInstalled: EngineInstalled;\n\t}\n\tpart context {\n\t\tpart initialAssembly {\n\t\t\tport gearboxInstalledPort: ~GearboxInstalledPort;\n\t\t\tport engineInstalledPort: ~EngineInstalledPort;\n\t\t}\n\t\tpart finalAssembly {\n\t\t\tport gearboxInstalledPort: GearboxInstalledPort;\n\t\t\tport engineInstalledPort: EngineInstalledPort;\n\t\t\tperform assembleGearbox.installGearbox {\n\t\t\t\tout gearboxInstalled = true;\n\t\t\t}\n\t\t\tperform assembleEngine.installEngine {\n\t\t\t\tin gearboxInstalled = true;\n\t\t\t\tout engineInstalled = true;\n\t\t\t}\n\t\t}\n\t\tinterface initialToFinal connect initialAssembly.gearboxInstalledPort to finalAssembly.gearboxInstalledPort {\n\t\t\tref flow references assembleGearbox.gearboxFlow\n\t\t\t\tfrom source.gearboxInstalledPort to target.gearboxInstalledPort;",
    "package 'VehicleControlSystem' {\n\tattribute def VehicleState;\n\tattribute def BrakePedalStatus;\n\tattribute def StartSignal;\n\tattribute def VehicleOnSignal;\n\tattribute def Temperature;\n\tattribute def SafetyThreshold;\n\tattribute def OverTemperatureSignal;\n\tattribute def RestoreNormalSignal;\n\tport def VehicleStatePort {\n\t\tout vehicleState: VehicleState;\n\t}\n\tport def BrakePedalStatusPort {\n\t\tout brakePedalStatus: BrakePedalStatus;\n\t}\n\tport def StartSignalPort {\n\t\tout startSignal: StartSignal;\n\t}\n\tport def",
    "package 'VehicleSystem' {\n\tattribute def BrakePedalPressed;\n\tattribute def StartSignal;\n\tattribute def Overheating;\n\tattribute def WarningSignal;\n\tattribute def VehicleStatus;\n\tattribute def Temperature;\n\tport def BrakePedalPressedPort {\n\t\tin brakePedalPressed: BrakePedalPressed;\n\t}\n\tport def StartSignalPort {\n\t\tin startSignal: StartSignal;\n\t}\n\tport def OverheatingPort {\n\t\tin overheating: Overheating;\n\t}\n\tport def WarningSignalPort {\n\t\tout warningSignal: WarningSignal;\n\t}\n\tport def VehicleStatusPort {\n\t\tout vehicleStatus: VehicleStatus;\n\t}\n\tport def TemperaturePort {\n\t\tin temperature: Temperature;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport brakePedalPressedPort: BrakePedalPressedPort;\n\t\t\tport startSignalPort: StartSignalPort;\n\t\t\tport overheatingPort:",
    "package 'VehicleSimulation' {\n\tattribute def Mass;\n\tattribute def Position;\n\tattribute def Velocity;\n\tattribute def Acceleration;\n\tattribute def Slope;\n\tattribute def FrictionCoefficient;\n\tport def MassPort {\n\t\tout mass: Mass;\n\t}\n\tport def PositionPort {\n\t\tout position: Position;\n\t}\n\tport def VelocityPort {\n\t\tout velocity: Velocity;\n\t}\n\tport def AccelerationPort {\n\t\tout acceleration: Acceleration;\n\t}\n\tport def SlopePort {\n\t\tout slope: Slope;\n\t}\n\tport def FrictionCoefficientPort {\n\t\tout frictionCoefficient: FrictionCoefficient;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport massPort: MassPort;\n\t\t\tport positionPort: PositionPort;\n\t\t\tport velocityPort: VelocityPort;\n\t\t\tport accelerationPort: AccelerationPort;\n\t\t\tport slopePort: SlopePort;\n\t\t\tport frictionCoefficientPort: FrictionCoefficientPort;\n\t\t\tperform simulateVehicle.setParameters {\n\t\t\t\tout mass = massPort.mass;\n\t\t\t\tout",
    "package 'AutomotiveConfiguration' {\n\tattribute def SubsystemAConfig;\n\tattribute def SubsystemBConfig;\n\tport def SubsystemAConfigPort {\n\t\tout subsystemAConfig : SubsystemAConfig;\n\t}\n\tport def SubsystemBConfigPort {\n\t\tout subsystemBConfig : SubsystemBConfig;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport subsystemAConfigPort: SubsystemAConfigPort;\n\t\t\tport subsystemBConfigPort: SubsystemBConfigPort;\n\t\t\tperform configureSubsystems.sendSubsystemAConfig {\n\t\t\t\tout subsystemAConfig = subsystemAConfigPort.subsystemAConfig;",
    "package 'VehiclePlatform' {\n\tattribute def Configurations;\n\tattribute def Subsystems;\n\tattribute def Components;\n\tattribute def Ports;\n\tpart context {\n\t\tpart user {\n\t\t\tport configurations: Configurations;\n\t\t\tperform configureSystem.sendConfigurations {\n\t\t\t\tout configurations = configurations;\n\t\t\t}\n\t\t}\n\t\tinterface userToPlatform connect user.configurations to platform.configurationsPort {\n\t\t\tref flow references configureSystem.configurationFlow\n\t\t\t\tfrom source.configurations to target.configurations; \n\t\t}\n\t\tpart platform {\n\t\t\tport configurationsPort: ~Configurations;\n\t\t\tperform configureSystem.produceSubsystems {\n\t\t\t\tin configurations = configurationsPort.configurations;\n\t\t\t\tout subsystems = subsystems;\n\t\t\t}\n\t\t\tport subsystems: Subsystems;\n\t\t\tperform configureSystem.produceComponents {\n\t\t\t\tin subsystems",
    "package 'VehicleConfigurator' {\n\tattribute def PerformanceRequirements;\n\tattribute def UserPreferences;\n\tport def PerformanceRequirementsPort {\n\t\tout performanceRequirements: PerformanceRequirements;\n\t}\n\tport def UserPreferencesPort {\n\t\tout userPreferences: UserPreferences;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport performanceRequirementsPort: PerformanceRequirementsPort;\n\t\t\tport userPreferencesPort: UserPreferencesPort;\n\t\t\tperform configureVehicle.sendPerformanceRequirements {\n\t\t\t\tout performanceRequirements = performanceRequirementsPort.performanceRequirements;\n\t\t\t}\n\t\t\tperform configureVehicle.sendUserPreferences {\n\t\t\t\tout userPreferences = userPreferencesPort.userPreferences;\n\t\t\t}\n\t\t}\n\t\tinterface userToConfigurator connect user.performanceRequirementsPort to configurator.performanceRequirementsPort {\n\t\t\tref flow references configureVehicle.performanceRequirementsFlow\n\t\t\t\tfrom source.performanceRequirements to target.performanceRequirements; \n\t\t}\n\t\tinterface userToConfigurator connect user.userPreferencesPort to configurator.userPreferencesPort {\n\t\t\tref flow references configureVehicle.userPreferencesFlow\n\t\t\t\tfrom source.userPreferences to target",
    "package 'AutomobileSpecification' {\n\tattribute def VehicleMass;\n\tattribute def FuelStatus;\n\tattribute def Powertrain;\n\tattribute def Reliability;\n\tport def VehicleMassPort {\n\t\tout vehicleMass: VehicleMass;\n\t}\n\tport def FuelStatusPort {\n\t\tout fuelStatus: FuelStatus;\n\t}\n\tport def PowertrainPort {\n\t\tout powertrain: Powertrain;\n\t}\n\tport def ReliabilityPort {\n\t\tout reliability: Reliability;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport vehicleMassPort: VehicleMassPort;\n\t\t\tport fuelStatusPort: FuelStatusPort;\n\t\t\tport powertrainPort: PowertrainPort;\n\t\t\tport reliabilityPort: ReliabilityPort;\n",
    "package 'VehicleMassVerification' {\n\tattribute def MassMeasurement;\n\tattribute def ComplianceStatus;\n\tport def MassMeasurementPort {\n\t\tout massMeasurement: MassMeasurement;\n\t}\n\tport def ComplianceStatusPort {\n\t\tout complianceStatus: ComplianceStatus;\n\t}\n\tpart context {\n\t\tpart testOperator {\n\t\t\tport massMeasurementPort: MassMeasurementPort;\n\t\t\tperform measureVehicleMass.sendMassMeasurement {\n\t\t\t\tout massMeasurement = massMeasurementPort.massMeasurement;\n\t\t\t}\n\t\t}\n\t\tinterface testOperatorToSystem connect testOperator.massMeasurementPort to system.massMeasurementPort {\n\t\t\tref flow references verifyCompliance.massMeasurementFlow\n\t\t\t\tfrom source.massMeasurement to target.massMeasurement; \n\t\t}\n\t\tpart system {\n\t\t\tport massMeasurementPort: ~MassMeasurementPort;\n\t\t\tperform verifyCompliance.evaluateMass {\n\t\t\t\tin massMeasurement = massMeasurementPort.massMeasurement;\n\t\t\t\tout complianceStatus = complianceStatusPort.complianceStatus;\n\t\t\t}\n\t\t\tport complianceStatusPort: ComplianceStatusPort;\n\t\t}\n\t}\n\taction verifyCompliance {\n\t\taction evaluateMass",
    "package 'WaterSupplyNetwork' {\n\tattribute def HotWater;\n\tattribute def ColdWater;\n\tport def HotWaterPort {\n\t\tout hotWater: HotWater;\n\t}\n\tport def ColdWaterPort {\n\t\tout coldWater: ColdWater;\n\t}\n\tpart context {\n\t\tpart spigotBank {\n\t\t\tport hotWaterPort: HotWaterPort;\n\t\t\tport coldWaterPort: ColdWaterPort;\n\t\t}\n\t\tpart faucet {\n\t\t\tport hotWaterPort: ~HotWaterPort;\n\t\t\tport coldWaterPort: ~ColdWaterPort;\n\t\t\tpart faucetInlet {\n\t\t\t\tport hotWaterPort: ~HotWaterPort;\n\t\t\t\tport coldWaterPort: ~ColdWaterPort;\n\t\t\t}\n\t\t}\n\t\tinterface spigotBankToFaucet connect spigotBank.hotWaterPort to faucet.hotWaterPort {\n\t\t\tref flow references hotWaterFlow\n\t\t\t\tfrom source.hotWater to target.hotWater;\n\t\t}\n\t\tinterface spigotBankToFaucet connect spigotBank.coldWaterPort to faucet.coldWaterPort {\n\t\t",
    "package 'VehicleQualityModel' {\n\tattribute def QualityData;\n\tattribute def TotalMass;\n\tattribute def AnalysisRequirements;\n\tattribute def AnalysisTasks;\n\tattribute def AnalysisPlans;\n\tport def QualityDataPort {\n\t\tin qualityData: QualityData;\n\t}\n\tport def TotalMassPort {\n\t\tout totalMass: TotalMass;\n\t}\n\tport def AnalysisRequirementsPort {\n\t\tin analysisRequirements: AnalysisRequirements;\n\t}\n\tport def AnalysisTasksPort {\n\t\tout analysisTasks: AnalysisTasks;\n\t}\n\tport def AnalysisPlansPort {\n\t\tout analysisPlans: AnalysisPlans;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport qualityDataPort: QualityDataPort;\n\t\t\tperform aggregateMass.calculateTotalMass {\n\t\t\t\tin qualityData = qualityDataPort.qualityData;\n\t\t\t\tout totalMass = totalMassPort.totalMass;\n\t\t\t}\n\t\t}\n\t\tinterface vehicleToAnalysis connect vehicle.qualityDataPort to analysis.qualityDataPort {\n\t\t\tref flow references aggregateMass.massFlow\n\t\t\t\tfrom source.qualityData to target.qualityData;\n\t\t}\n",
    "package 'VehiclePowertrainConfiguration' {\n\tattribute def EngineType;\n\tattribute def PerformanceIndicators;\n\tport def EngineTypePort {\n\t\tout engineType: EngineType;\n\t}\n\tport def PerformanceIndicatorsPort {\n\t\tout performanceIndicators: PerformanceIndicators;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport engineTypePort: EngineTypePort;\n\t\t\tperform selectEngine.sendEngineType {\n\t\t\t\tout engineType = engineTypePort.engineType;\n\t\t\t}\n\t\t}\n\t\tinterface userToSystem connect user.engineTypePort to system.engineTypePort {\n\t\t\tref flow references selectEngine.engineTypeFlow\n\t\t\t\tfrom source.engineType to target.engineType; \n\t\t}\n\t\tpart system {\n\t\t\tport engineTypePort: ~EngineTypePort;\n\t\t\tperform selectEngine.evaluateEngine {\n\t\t\t\tin engineType = engineTypePort.engineType;\n\t\t\t\tout performanceIndicators = performanceIndicatorsPort.performanceIndicators;\n\t\t\t}\n",
    "package 'FuelEconomySystem' {\n\tattribute def UrbanMilesPerGallon;\n\tattribute def HighwayMilesPerGallon;\n\tport def UrbanMilesPerGallonPort {\n\t\tout urbanMilesPerGallon: UrbanMilesPerGallon;\n\t}\n\tport def HighwayMilesPerGallonPort {\n\t\tout highwayMilesPerGallon: HighwayMilesPerGallon;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport urbanMilesPerGallonPort: ~UrbanMilesPerGallonPort;\n\t\t\tport highwayMilesPerGallonPort: ~HighwayMilesPerGallonPort;\n\t\t\tperform measureFuelEconomy.calculateUrbanEconomy {\n\t\t\t\tin urbanMilesPerGallonPort.urbanMilesPerGallon;\n\t\t\t\tout urbanMilesPerGallon = urbanMilesPerGallon;\n\t\t\t}\n\t\t\tperform measureFuelEconomy.calculateHighwayEconomy {\n\t\t\t\tin highwayMilesPerGallonPort.highwayMilesPerGallon;\n\t\t\t\tout highwayMilesPerGallon = highwayMilesPer",
    "package 'VehicleSimulation' {\n\tattribute def VehicleMass;\n\tattribute def InitialPosition;\n\tattribute def InitialVelocity;\n\tattribute def PowerOutput;\n\tport def VehicleMassPort {\n\t\tout vehicleMass: VehicleMass;\n\t}\n\tport def InitialPositionPort {\n\t\tout initialPosition: InitialPosition;\n\t}\n\tport def InitialVelocityPort {\n\t\tout initialVelocity: InitialVelocity;\n\t}\n\tport def PowerOutputPort {\n\t\tout powerOutput: PowerOutput;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport vehicleMassPort: VehicleMassPort;\n\t\t\tport initialPositionPort: InitialPositionPort;\n\t\t\tport initialVelocityPort: InitialVelocityPort;\n\t\t\tport powerOutputPort: PowerOutputPort;\n\t\t\tperform simulateVehicleMotion.sendInputs {\n\t\t\t\tout vehicleMass = vehicleMassPort.vehicleMass;\n\t\t\t\tout initialPosition = initialPositionPort.initialPosition;\n\t\t\t\tout initialVelocity = initialVelocityPort.initialVelocity;\n\t\t\t\tout powerOutput = powerOutputPort.powerOutput;\n\t\t\t}\n\t\t}\n\t\tinterface userToSimulation connect user.vehicleMassPort to simulation.vehicleMass",
    "package 'VehicleSystem' {\n\tattribute def TotalMass;\n\tattribute def FrontAxleMass;\n\tattribute def RearAxleMass;\n\tattribute def FrontAxleSteeringAngle;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tattribute TotalMass = 2500;\n\t\t\tpart frontAxleAssembly {\n\t\t\t\tattribute FrontAxleMass = 150;\n\t\t\t\tpart frontWheels {\n\t\t\t\t\tattribute WheelMass = FrontAxleMass / 2;\n\t\t\t\t}\n\t\t\t\tpart frontAxle {\n\t\t\t\t\tattribute FrontAxleSteeringAngle;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart rearAxleAssembly {\n\t\t\t\tattribute RearAxleMass = 250;\n\t\t\t\tpart rearWheels {\n\t\t\t\t\tattribute WheelMass = RearAxleMass / 2;\n\t\t\t\t}\n\t\t\t\tpart rearAxle {\n\t\t\t\t\tattribute RearAxleMass;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}",
    "package 'VehicleManagementSystem' {\n\tattribute def SafetyFeatures;\n\tattribute def SecurityFeatures;\n\tport def SafetyFeaturesPort {\n\t\tout safetyFeatures: SafetyFeatures;\n\t}\n\tport def SecurityFeaturesPort {\n\t\tout securityFeatures: SecurityFeatures;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport safetyFeaturesPort: SafetyFeaturesPort;\n\t\t\tport securityFeaturesPort: SecurityFeaturesPort;\n\t\t\tperform displayFeatures.sendSafetyFeatures {\n\t\t\t\tout safetyFeatures = safetyFeaturesPort.safetyFeatures;\n\t\t\t}\n\t\t\tperform displayFeatures.sendSecurityFeatures {\n\t\t\t\tout securityFeatures = securityFeaturesPort.securityFeatures;\n\t\t\t}\n\t\t}\n\t\tinterface userToVehicle connect vehicle.safetyFeaturesPort to displayFeatures.safetyFeaturesFlow\n\t\t\tfrom source.safetyFeatures to target.safetyFeatures;\n\t\tinterface userToVehicle connect vehicle.securityFeaturesPort to displayFeatures.securityFeaturesFlow\n\t\t\tfrom source.securityFeatures to target.securityFeatures;\n\t\tpart displayFeatures {\n\t\t\taction sendSafetyFeatures {",
    "package 'LayeredSystem' {\n\tattribute def x;\n\tattribute def y;\n\tattribute def z;\n\tport def xPort;\n\tport def yPort;\n\tport def zPort;\n\tpart context {\n\t\tpart applicationLayer {\n\t\t\tport xPort: ~xPort;\n\t\t\tport yPort: ~yPort;\n\t\t\tperform useServices.callServiceLayer {\n\t\t\t\tin x = xPort.x;\n\t\t\t\tin y = yPort.y;\n\t\t\t\tout z = serviceLayer.z;\n\t\t\t}\n\t\t}\n\t\tpart serviceLayer {\n\t\t\tport xPort: ~xPort;\n\t\t\tport yPort: ~yPort;\n\t\t\tport zPort: ~zPort;\n\t\t\tperform retrieveStoreData.getData {\n\t\t\t\tin x = xPort.x;\n\t\t\t\tin y = yPort.y;\n\t\t\t\tout z = zPort.z;\n\t\t\t}\n\t\t}\n\t\tpart dataLayer {\n\t\t\tport zPort: ~zPort;\n\t\t\tperform retrieveStoreData.storeData {\n\t\t\t\tin z = zPort.z;\n\t\t\t}\n",
    "package 'PowertrainSystem' {\n\tattribute def Torque;\n\tport def TorquePort {\n\t\tout torque: Torque;\n\t}\n\tpart context {\n\t\tpart powertrain {\n\t\t\tport torquePort: TorquePort;\n\t\t\tperform generateTorque.produceTorque {\n\t\t\t\tout torque = torquePort.torque;\n\t\t\t}\n\t\t}\n\t\tinterface powertrainToLogic connect powertrain.torquePort to logic.torquePort {\n\t\t\tref flow references generateTorque.torqueFlow\n\t\t\t\tfrom source.torque to target.torque; \n\t\t}\n\t\tpart logic {\n\t\t\tport torquePort: ~TorquePort;\n\t\t\tperform allocateTorque.allocate {\n\t\t\t\tin torque = torquePort.torque;\n\t\t\t}\n\t\t}\n\t}\n\taction generateTorque {\n\t\taction produceTorque { out torque: Torque; }\n\t\tsuccession flow torqueFlow from produceTorque.torque to allocateTorque.torque;\n\t\taction allocateTorque { in torque: Torque; }\n\t}\n}",
    "package 'PowerTransmissionSystem' {\n\tattribute def Power;\n\tattribute def Torque;\n\tport def PowerPort {\n\t\tout power: Power;\n\t}\n\tport def TorquePort {\n\t\tout torque: Torque;\n\t}\n\tpart context {\n\t\tpart powertrain {\n\t\t\tpart engine {\n\t\t\t\tport powerPort: ~PowerPort;\n\t\t\t\tport torquePort: ~TorquePort;\n\t\t\t\tperform generateTorque.produceTorque {\n\t\t\t\t\tin power = powerPort.power;\n\t\t\t\t\tout torque = torquePort.torque;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tinterface powertrainToSystem connect powertrain.engine.powerPort to system.powerPort {\n\t\t\tref flow references generateTorque.torqueFlow\n\t\t\t\tfrom source.torque to target.torque; \n\t\t}\n\t\tpart system {\n\t\t\tport powerPort: ~PowerPort;\n\t\t\tport torquePort: ~TorquePort;\n\t\t\tperform generateTorque.consumeTorque {\n\t\t\t\tin torque = torquePort.torque;\n\t\t\t\tout power = powerPort.power;",
    "package 'VehicleSafetyAndAntiTheft' {\n\tattribute def SafetyFeatures;\n\tattribute def AntiTheftFeatures;\n\tport def SafetyFeaturesPort {\n\t\tout safetyFeatures: SafetyFeatures;\n\t}\n\tport def AntiTheftFeaturesPort {\n\t\tout antiTheftFeatures: AntiTheftFeatures;\n\t}\n\tpart context {\n\t\tpart body {\n\t\t\tport safetyFeaturesPort: SafetyFeaturesPort;\n\t\t\tperform safetyAndAntiTheft.ensureSafety {\n\t\t\t\tin safetyFeatures = safetyFeaturesPort.safetyFeatures;\n\t\t\t}\n\t\t}\n\t\tpart interior {\n\t\t\tport safetyFeaturesPort: SafetyFeaturesPort;\n\t\t\tperform safetyAndAntiTheft.ensureSafety {\n\t\t\t\tin safetyFeatures = safetyFeaturesPort.safetyFeatures;\n\t\t\t}\n\t\t}\n\t\tinterface safetyAndAntiTheft connect body.safetyFeaturesPort to safetyAndAntiTheft.safetyFeaturesPort\n\t\t\t",
    "package 'FuelSupplySystem' {\n\tattribute def FuelTemperature;\n\tport def FuelTemperaturePort {\n\t\tout fuelTemperature: FuelTemperature;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport fuelTemperaturePort: FuelTemperaturePort;\n\t\t\tperform monitorFuelTemperature.sendFuelTemperature {\n\t\t\t\tout fuelTemperature = fuelTemperaturePort.fuelTemperature;\n\t\t\t}\n\t\t}\n\t\tinterface vehicleToFuelSystem connect vehicle.fuelTemperaturePort to fuelSystem.fuelTemperaturePort {\n\t\t\tref flow references monitorFuelTemperature.fuelTemperatureFlow\n\t\t\t\tfrom source.fuelTemperature to target.fuelTemperature; \n\t\t}\n\t\tpart fuelSystem {\n\t\t\tport fuelTemperaturePort: ~FuelTemperaturePort;\n\t\t\tperform manageFuelFlow.monitorTemperature {\n\t\t\t\tin fuelTemperature = fuelTemperaturePort.fuelTemperature;\n\t\t\t}\n\t\t\tpart fuelPump {\n\t\t\t\tperform pressurizeFuel.pumpFuel {\n\t\t\t\t\tin fuelTemperature;\n\t\t\t\t}\n\t\t\t\tpart fuelTank {\n\t\t\t\t\tperform storeFuel.storeFuel {\n\t\t\t\t\t\tin fuelTemperature;\n\t\t\t\t\t}\n\t\t\t\t",
    "package 'VehicleSafetySecurity' {\n\tattribute def SeatBelt;\n\tattribute def Airbag;\n\tattribute def AntiTheftAlarm;\n\tattribute def Bumper;\n\tattribute def KeylessEntry;\n\tattribute def Wheels;\n\tattribute def AntiLockBrakingSystems;\n\tport def SeatBeltPort {\n\t\tout seatBelt: SeatBelt;\n\t}\n\tport def AirbagPort {\n\t\tout airbag: Airbag;\n\t}\n\tport def AntiTheftAlarmPort {\n\t\tout antiTheftAlarm: AntiTheftAlarm;\n\t}\n\tport def BumperPort {\n\t\tout bumper: Bumper;\n\t}\n\tport def KeylessEntryPort {\n\t\tout keylessEntry: KeylessEntry;\n\t}\n\tport def WheelsPort {\n\t\tout wheels: Wheels;\n\t}\n\tport def AntiLockBrakingSystemsPort {\n\t\tout antiLockBrakingSystems: AntiLockBrakingSystems;\n\t}\n\tpart context {\n\t\tpart safety {\n\t\t\tport seatBeltPort: SeatB",
    "package 'VehicleSafetySecurity' {\n\tattribute def AlarmSystem;\n\tattribute def SeatBelts;\n\tattribute def FrontRowSeats;\n\tattribute def DriverAirbag;\n\tattribute def VehicleBody;\n\tattribute def Bumper;\n\tattribute def KeylessEntrySystem;\n\tport def AlarmSystemPort {\n\t\tout alarmSystem: AlarmSystem;\n\t}\n\tport def SeatBeltsPort {\n\t\tout seatBelts: SeatBelts;\n\t}\n\tport def FrontRowSeatsPort {\n\t\tout frontRowSeats: FrontRowSeats;\n\t}\n\tport def DriverAirbagPort {\n\t\tout driverAirbag: DriverAirbag;\n\t}\n\tport def VehicleBodyPort {\n\t\tout vehicleBody: VehicleBody;\n\t}\n\tport def BumperPort {\n\t\tout bumper: Bumper;\n\t}\n\tport def KeylessEntrySystemPort {\n\t\tout keylessEntrySystem: KeylessEntrySystem;\n\t}\n\tpart context {\n\t\tpart interior {\n\t\t\tport alarmSystemPort: AlarmSystemPort;\n\t\t\tport seatBeltsPort: SeatBeltsPort;\n\t\t\tport frontRowSe",
    "package 'SecurityClassification' {\n\tattribute def Classification {\n\t\tenum { Unclassified, Confidential, Secret }\n\t}\n\tpart context {\n\t\tpart component {\n\t\t\tattribute classification: Classification;\n\t\t}\n\t\tinterface classifyComponent connect component to classificationSystem {\n\t\t\tref flow references classifyFlow\n\t\t\t\tfrom source.component to target.classification;\n\t\t}\n\t}\n\tinterface classificationSystem {\n\t\tport classify: Classification;\n\t}\n}",
    "package 'AutomotiveECU' {\n\tattribute def CANBus;\n\tattribute def ECUState;\n\tport def CANBusPort {\n\t\tout canBus: CANBus;\n\t}\n\tport def ECUStatePort {\n\t\tout ecuState: ECUState;\n\t}\n\tpart context {\n\t\tpart VCU {\n\t\t\tport canBusPort: ~CANBusPort;\n\t\t\tperform controlVehicle.sendCANMessages {\n\t\t\t\tin canBus = canBusPort.canBus;\n\t\t\t}\n\t\t\tperform controlVehicle.monitorEngineState {\n\t\t\t\tout ecuState = ecuStatePort.ecuState;\n\t\t\t}\n\t\t\tport ecuStatePort: ~ECUStatePort;\n\t\t}\n\t\tpart ECU {\n\t\t\tport canBusPort: ~CANBusPort;\n\t\t\tperform controlEngine.sendCANMessages {\n\t\t\t\tin canBus = canBusPort.canBus;\n\t\t\t}\n\t\t\tperform controlEngine.monitorVehicleState {\n\t\t\t\tout ecuState = ecuStatePort.ecuState;\n\t\t\t}\n\t\t\tport ecuStatePort: ~ECUStatePort;",
    "package 'BloodGlucoseMeter' {\n\tattribute def BatteryStatus;\n\tattribute def Alert;\n\tport def BatteryStatusPort {\n\t\tout batteryStatus: BatteryStatus;\n\t}\n\tport def AlertPort {\n\t\tout alert: Alert;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport batteryStatusPort: BatteryStatusPort;\n\t\t\tperform checkBatteryStatus.sendBatteryStatus {\n\t\t\t\tout batteryStatus = batteryStatusPort.batteryStatus;\n\t\t\t}\n\t\t\tperform alertUser.receiveAlert {\n\t\t\t\tin alert = alertPort.alert;\n\t\t\t}\n\t\t}\n\t\tinterface userToSystem connect user.batteryStatusPort to system.batteryStatusPort {\n\t\t\tref flow references checkBatteryStatus.batteryStatusFlow\n\t\t\t\tfrom source.batteryStatus to target.batteryStatus; \n\t\t}\n\t\tinterface systemToUser connect system.alertPort to user.alertPort {\n\t\t\tref flow references alertUser.alertFlow\n\t\t\t\tfrom source.alert to target.alert; \n\t\t}\n\t\tpart system {\n\t\t\tport batteryStatusPort: ~BatteryStatusPort;\n\t\t\tperform checkBatteryStatus",
    "package 'ScientificConstants' {\n\tattribute def MathematicalConstants;\n\tattribute def PhysicalConstants;\n\tattribute def ScenarioConstants;\n\tport def MathematicalConstantsPort {\n\t\tout mathematicalConstants: MathematicalConstants;\n\t}\n\tport def PhysicalConstantsPort {\n\t\tout physicalConstants: PhysicalConstants;\n\t}\n\tport def ScenarioConstantsPort {\n\t\tout scenarioConstants: ScenarioConstants;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport mathematicalConstantsPort: MathematicalConstantsPort;\n\t\t\tport physicalConstantsPort: PhysicalConstantsPort;\n\t\t\tport scenarioConstantsPort: ScenarioConstantsPort;\n\t\t\tperform accessConstants.retrieveConstants {\n\t\t\t\tout mathematicalConstants = mathematicalConstantsPort.mathematicalConstants;\n\t\t\t\tout physicalConstants = physicalConstantsPort.physicalConstants;\n\t\t\t\tout scenarioConstants = scenarioConstantsPort.scenarioConstants;\n\t\t\t}\n\t\t}\n\t\tinterface userToSystem connect user.mathematicalConstantsPort to system.mathematicalConstantsPort,\n\t\t\tuser.physicalConstantsPort to system.physicalConstantsPort,\n\t\t\tuser.scenarioConstantsPort to system.scenarioConstantsPort {",
    "package 'AutomotiveComponents' {\n\tattribute def Manufacturer;\n\tattribute def RimDiameter;\n\tattribute def Width;\n\tpart context {\n\t\tpart tire {\n\t\t\tattribute manufacturer: Manufacturer;\n\t\t\tattribute rimDiameter: RimDiameter;\n\t\t\tattribute width: Width;\n\t\t}\n\t}\n}",
    "package 'AutomotiveComponent' {\n\tattribute def Mass;\n\tattribute def Length;\n\tattribute def HubDiameter;\n\tattribute def WheelWidth;\n\tattribute def TireHeight;\n\tattribute def OuterDiameter;\n\tport def MassPort {\n\t\tout mass: Mass;\n\t}\n\tport def LengthPort {\n\t\tout length: Length;\n\t}\n\tport def HubDiameterPort {\n\t\tout hubDiameter: HubDiameter;\n\t}\n\tport def WheelWidthPort {\n\t\tout wheelWidth: WheelWidth;\n\t}\n\tport def TireHeightPort {\n\t\tout tireHeight: TireHeight;\n\t}\n\tport def OuterDiameterPort {\n\t\tout outerDiameter: OuterDiameter;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport massPort: MassPort;\n\t\t\tport lengthPort: LengthPort;\n\t\t\tpart leftFrontWheel {\n\t\t\t\tport hubDiameterPort: HubDiameterPort;\n\t\t\t\tport wheelWidthPort: WheelWidthPort;\n\t\t\t\tpart tire {\n\t\t\t\t\tport tireHeightPort: TireHeightPort;\n\t\t\t\t\tperform calculateOuterDiameter.calculate",
    "package 'VehiclePowertrain' {\n\tattribute def EngineType;\n\tattribute def TransmissionType;\n\tport def EngineTypePort {\n\t\tout engineType: EngineType;\n\t}\n\tport def TransmissionTypePort {\n\t\tout transmissionType: TransmissionType;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport engineTypePort: EngineTypePort;\n\t\t\tport transmissionTypePort: TransmissionTypePort;\n\t\t\tperform configurePowertrain.sendEngineType {\n\t\t\t\tout engineType = engineTypePort.engineType;\n\t\t\t}\n\t\t\tperform configurePowertrain.sendTransmissionType {\n\t\t\t\tout transmissionType = transmissionTypePort.transmissionType;\n\t\t\t}\n\t\t}\n\t\tinterface vehicleToPowertrain connect vehicle.engineTypePort to powertrain.engineTypePort {\n\t\t\tref flow references configurePowertrain.engineTypeFlow\n\t\t\t\tfrom source.engineType to target.engineType; \n\t\t}\n\t\tinterface vehicleToPowertrain connect vehicle.transmissionTypePort to powertrain.transmissionTypePort {\n\t\t\tref flow references configurePowertrain.transmissionTypeFlow\n\t\t\t\tfrom source",
    "package 'AutomotiveComponents' {\n\tattribute def TotalMass;\n\tattribute def Length;\n\tattribute def WheelAssembly;\n\tattribute def Wheel;\n\tattribute def Tire;\n\tattribute def Rim;\n\tattribute def BrakeDisc;\n\tattribute def TreadDepth;\n\tattribute def OuterDiameter;\n\tattribute def RimDiameter;\n\tattribute def TireWidth;\n\tattribute def TireHeight;\n\tattribute def BrakeDiscRadius;\n\tattribute def BrakeDiscDiameter;\n\tattribute def WheelAssemblyCount;\n\tattribute def WheelCount;\n\tattribute def TireCount;\n\tattribute def RimCount;\n\tattribute def BrakeDiscCount;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tattribute TotalMass = ",
    "package 'AutomotiveFuelSystem' {\n\tattribute def FuelTemperature;\n\tattribute def FuelFlow;\n\tport def FuelTemperaturePort {\n\t\tout fuelTemperature: FuelTemperature;\n\t}\n\tport def FuelFlowPort {\n\t\tout fuelFlow: FuelFlow;\n\t}\n\tpart context {\n\t\tpart fuelTankAssembly {\n\t\t\tport fuelOutlet: ~FuelFlowPort;\n\t\t\tport fuelReturn: ~FuelFlowPort;\n\t\t}\n\t\tpart fuelPump {\n\t\t\tport fuelInlet: ~FuelFlowPort;\n\t\t\tport fuelOutlet: ~FuelFlowPort;\n\t\t}\n\t\tpart fuelTank {\n\t\t\tport fuelInlet: ~FuelFlowPort;\n\t\t\tport fuelOutlet: ~FuelFlowPort;\n\t\t}\n\t\tinterface fuelTankAssemblyToFuelPump connect fuelTankAssembly.fuelOutlet to fuelPump.fuelInlet {\n\t\t\tref flow references fuelFlowFlow\n\t\t\t\tfrom source.fuelFlow to target.fuelFlow; \n\t\t}\n\t\tinterface fuelPumpToFuelTank connect fuelP",
    "package 'PhysicalQuantityManager' {\n\tattribute def Quantity;\n\tattribute def Unit;\n\tport def QuantityPort {\n\t\tout quantity : Quantity;\n\t}\n\tport def UnitPort {\n\t\tout unit : Unit;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport quantityPort: QuantityPort;\n\t\t\tperform manageQuantities.sendQuantity {\n\t\t\t\tout quantity = quantityPort.quantity;\n\t\t\t}\n\t\t}\n\t\tinterface userToManager connect user.quantityPort to manager.quantityPort {\n\t\t\tref flow references manageQuantities.quantityFlow\n\t\t\t\tfrom source.quantity to target.quantity; \n\t\t}\n\t\tpart manager {\n\t\t\tport quantityPort: ~QuantityPort;\n\t\t\tperform manageQuantities.processQuantity {\n\t\t\t\tin quantity = quantityPort.quantity;\n\t\t\t\tout unit = unitPort.unit;\n\t\t\t}\n\t\t\tport unitPort: UnitPort ;\n\t\t}\n\t\tpart unitConverter {\n\t\t\tport unitPort: ~UnitPort;\n\t\t\tperform manageQuantities.convertUnits {\n\t\t\t\tin unit = unitPort.unit;\n\t\t\t}\n\t\t}\n\t}",
    "package 'UnitSystemLibrary' {\n\tattribute def ISQUnits;\n\tattribute def USCustomaryUnits;\n\tport def ISQUnitsPort {\n\t\tout isqUnits: ISQUnits;\n\t}\n\tport def USCustomaryUnitsPort {\n\t\tout usCustomaryUnits: USCustomaryUnits;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport isqUnitsPort: ISQUnitsPort;\n\t\t\tport usCustomaryUnitsPort: USCustomaryUnitsPort;\n\t\t\tperform manageUnits.convertUnits {\n\t\t\t\tin isqUnits = isqUnitsPort.isqUnits;\n\t\t\t\tin usCustomaryUnits = usCustomaryUnitsPort.usCustomaryUnits;\n\t\t\t}\n\t\t}\n\t\tinterface userToLibrary connect user.isqUnitsPort to library.isqUnitsPort {\n\t\t\tref flow references convertUnits.isqUnitsFlow\n\t\t\t\tfrom source.isqUnits to target.isqUnits; \n\t\t}\n\t\tinterface userToLibrary2 connect user.usCustomaryUnitsPort to library.usCustomaryUnitsPort {\n\t\t\tref flow references convertUnits.usCustomaryUnits",
    "package 'CarHeadlampTiltAdjustment' {\n\tattribute def TiltAngle;\n\tattribute def MinTiltAngle = 50.0;\n\tattribute def MaxTiltAngle = 80.0;\n\tport def TiltAnglePort {\n\t\tout tiltAngle: TiltAngle;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport tiltAnglePort: TiltAnglePort;\n\t\t\tperform verifyTiltAngle.sendTiltAngle {\n\t\t\t\tout tiltAngle = tiltAnglePort.tiltAngle;\n\t\t\t}\n\t\t}\n\t\tinterface userToSystem connect user.tiltAnglePort to system.tiltAnglePort {\n\t\t\tref flow references verifyTiltAngle.tiltAngleFlow\n\t\t\t\tfrom source.tiltAngle to target.tiltAngle; \n\t\t}\n\t\tpart system {\n\t\t\tport tiltAnglePort: ~TiltAnglePort;\n\t\t\tperform verifyTiltAngle.receiveTiltAngle {\n\t\t\t\tin tiltAngle = tiltAnglePort.tiltAngle;\n\t\t\t}\n\t\t\tperform verifyTiltAngle.checkRange {\n\t\t\t\tin tiltAngle;\n\t\t\t",
    "package 'DataTypeManagement' {\n\tattribute def UInt;\n\tattribute def UFloat;\n\tattribute def DateTime;\n\tattribute def String;\n\tattribute def Boolean;\n\tattribute def Color;\n\tattribute def Diameter;\n\tport def UIntPort {\n\t\tout uint: UInt;\n\t}\n\tport def UFloatPort {\n\t\tout ufloat: UFloat;\n\t}\n\tport def DateTimePort {\n\t\tout dateTime: DateTime;\n\t}\n\tport def StringPort {\n\t\tout str: String;\n\t}\n\tport def BooleanPort {\n\t\tout bool: Boolean;\n\t}\n\tport def ColorPort {\n\t\tout color: Color;\n\t}\n\tport def DiameterPort {\n\t\tout diameter: Diameter;\n\t}\n\tpart context {\n\t\tpart dataTypes {\n\t\t\tport uintPort: UIntPort;\n\t\t\tport ufloatPort: UFloatPort",
    "package 'SystemManagement' {\n\tattribute def Bag;\n\tattribute def List;\n\tattribute def Set;\n\tattribute def OrderedSet;\n\tattribute def Array;\n\tport def BagPort {\n\t\tout bag : Bag;\n\t}\n\tport def ListPort {\n\t\tout list : List;\n\t}\n\tport def SetPort {\n\t\tout set : Set;\n\t}\n\tport def OrderedSetPort {\n\t\tout orderedSet : OrderedSet;\n\t}\n\tport def ArrayPort {\n\t\tout array : Array;\n\t}\n\tpart context {\n\t\tpart spareParts {\n\t\t\tport bagPort: BagPort;\n\t\t\tperform manageSpareParts.storeSpareParts {\n\t\t\t\tout bag = bagPort.bag;\n\t\t\t}\n\t\t}\n\t\tpart integers {\n\t\t\tport listPort: ListPort;\n\t\t\tperform manageIntegers.storeIntegers {\n\t\t\t\tout list = listPort.list;\n\t\t\t}\n\t\t}\n\t\tpart strings {\n\t\t\tport setPort: SetPort;\n\t\t",
    "package 'TireInformation' {\n\tattribute def ManufacturerName;\n\tattribute def RimDiameter;\n\tattribute def TireWidth;\n\tattribute def InstallationPosition;\n\tpart context {\n\t\tpart tireEntry {\n\t\t\tattribute manufacturerName: ManufacturerName;\n\t\t\tattribute rimDiameter: RimDiameter;\n\t\t\tattribute tireWidth: TireWidth;\n\t\t\tattribute installationPosition: InstallationPosition;\n\t\t}\n\t\tinterface tireEntryInterface connect tireEntry to tireDatabase {\n\t\t\tref flow references tireEntryFlow\n\t\t\t\tfrom source.tireEntry to target.tireEntry; \n\t\t}\n\t\tpart tireDatabase {\n\t\t\tport tireEntryPort: tireEntry;\n\t\t\tperform recordTireEntry.record {\n\t\t\t\tin tireEntry = tireEntryPort.tireEntry;\n\t\t\t}\n\t\t}\n\t}\n\taction recordTireEntry {\n\t\taction record { in tireEntry: TireEntry; }\n\t\tsuccession flow tireEntryFlow from record.tireEntry to record.tireEntry;\n\t}\n}",
    "package 'SpacecraftTrajectory' {\n\tattribute def LiftoffTime;\n\tattribute def UTC_LiftoffTime;\n\tattribute def Time;\n\tattribute def Position;\n\tattribute def Velocity;\n\tport def LiftoffTimePort {\n\t\tout liftoffTime: LiftoffTime;\n\t}\n\tport def UTC_LiftoffTimePort {\n\t\tout utcLiftoffTime: UTC_LiftoffTime;\n\t}\n\tport def TimePort {\n\t\tout time: Time;\n\t}\n\tport def PositionPort {\n\t\tout position: Position;\n\t}\n\tport def VelocityPort {\n\t\tout velocity: Velocity;\n\t}\n\tpart context {\n\t\tpart missionControl {\n\t\t\tport liftoffTimePort: LiftoffTimePort;\n\t\t\tport utcLiftoffTimePort: UTC_LiftoffTimePort;\n\t\t\tperform recordTrajectory.recordData {\n\t\t\t\tout liftoffTime = lif",
    "package 'MaterialsScience' {\n\tattribute def AtomicMass;\n\tattribute def MassFraction;\n\tattribute def TensileStrength;\n\tport def AtomicMassPort {\n\t\tout atomicMass: AtomicMass;\n\t}\n\tport def MassFractionPort {\n\t\tout massFraction: MassFraction;\n\t}\n\tport def TensileStrengthPort {\n\t\tout tensileStrength: TensileStrength;\n\t}\n\tpart context {\n\t\tpart substance {\n\t\t\tport atomicMassPort: AtomicMassPort;\n\t\t\tport massFractionPort: MassFractionPort;\n\t\t\tport tensileStrengthPort: TensileStrengthPort;\n\t\t}\n\t\tinterface substanceToMaterial connect substance.atomicMassPort to material.atomicMassPort\n\t\t\tsubstance.massFractionPort to material.massFractionPort\n\t\t",
    "package 'EngineeringMaterialsDB' {\n\tattribute def MaterialType;\n\tattribute def AtomicMass;\n\tattribute def CompositionalInfo;\n\tattribute def MechanicalProperties;\n\tport def MaterialTypePort {\n\t\tout materialType : MaterialType;\n\t}\n\tport def AtomicMassPort {\n\t\tout atomicMass : AtomicMass;\n\t}\n\tport def CompositionalInfoPort {\n\t\tout compositionalInfo : CompositionalInfo;\n\t}\n\tport def MechanicalPropertiesPort {\n\t\tout mechanicalProperties : MechanicalProperties;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport materialTypePort: MaterialTypePort;\n\t\t\tport atomicMassPort: AtomicMassPort;\n\t\t\tport compositionalInfoPort: CompositionalInfoPort;\n\t\t\tport mechanicalPropertiesPort: MechanicalPropertiesPort;\n\t\t\tperform defineMaterial.sendMaterialType",
    "package 'PubSubSystem' {\n\tattribute def Topic;\n\tattribute def Message;\n\tport def PublishCmd {\n\t\tout publishCmd: PublishCmd;\n\t}\n\tport def SubscribeCmd {\n\t\tout subscribeCmd: SubscribeCmd;\n\t}\n\tport def MessagePort {\n\t\tout message: Message;\n\t}\n\tpart context {\n\t\tpart producer {\n\t\t\tport publishCmdPort: PublishCmd;\n\t\t\tperform publishMessage.sendPublishCmd {\n\t\t\t\tout publishCmd = publishCmdPort.publishCmd;\n\t\t\t}\n\t\t}\n\t\tinterface producerToServer connect producer.publishCmdPort to server.publishCmdPort {\n\t\t\tref flow references publishMessage.publishCmdFlow\n\t\t\t\tfrom source.publishCmd to target.publishCmd; \n\t\t}\n\t\tpart server {\n\t\t\tport publishCmdPort: ~PublishCmd;\n\t\t\tport subscribeCmdPort: ~SubscribeCmd;\n\t\t\tperform distributeMessage.receivePublishCmd {\n\t\t\t\tin publishCmd = publishCmdPort.publishCmd;\n\t\t\t\tout message = messagePort.message;\n\t\t\t}\n\t\t\tperform distributeMessage.distributeSubscribedMessages {\n\t\t\t\tin",
    "package 'VehicleFuelSystem' {\n\tattribute def FuelTemperature;\n\tport def FuelTemperaturePort {\n\t\tout fuelTemperature: FuelTemperature;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport fuelTemperaturePort: FuelTemperaturePort;\n\t\t\tperform monitorFuelTemperature.sendFuelTemperature {\n\t\t\t\tout fuelTemperature = fuelTemperaturePort.fuelTemperature;\n\t\t\t}\n\t\t}\n\t\tinterface vehicleToFuelSystem connect vehicle.fuelTemperaturePort to fuelSystem.fuelTemperaturePort {\n\t\t\tref flow references monitorFuelTemperature.fuelTemperatureFlow\n\t\t\t\tfrom source.fuelTemperature to target.fuelTemperature; \n\t\t}\n\t\tpart fuelSystem {\n\t\t\tport fuelTemperaturePort: ~FuelTemperaturePort;\n\t\t\tperform ensureFuelSupply.supplyFuel {\n\t\t\t\tin fuelTemperature = fuelTemperaturePort.fuelTemperature;\n\t\t\t}\n\t\t\tperform ensureFuelRecycling.recycleFuel {\n\t\t\t\tin fuelTemperature = fuelTemperaturePort.fuelTemperature;\n\t\t\t}\n\t\t}\n\t\tpart engine {\n\t\t\tperform consumeFuel.useFuel {\n\t\t\t\tout fuelTemperature = fuelTemperaturePort",
    "package 'PublishSubscribe' {\n\tattribute def Topic;\n\tattribute def Message;\n\tport def TopicPort {\n\t\tout topic: Topic;\n\t}\n\tport def MessagePort {\n\t\tout message: Message;\n\t}\n\tpart context {\n\t\tpart producer {\n\t\t\tport topicPort: TopicPort;\n\t\t\tperform publishMessage.sendMessage {\n\t\t\t\tout topic = topicPort.topic;\n\t\t\t\tout message = messagePort.message;\n\t\t\t}\n\t\t\tport messagePort: ~MessagePort;\n\t\t}\n\t\tinterface producerToServer connect producer.topicPort to server.topicPort {\n\t\t\tref flow references publishMessage.topicFlow\n\t\t\t\tfrom source.topic to target.topic;\n\t\t\tref flow references publishMessage.messageFlow\n\t\t\t\tfrom source.message to target.message;\n\t\t}\n\t\tpart server {\n\t\t\tport topicPort: ~TopicPort;\n\t\t\tport messagePort: ~MessagePort;\n\t\t\tperform deliverMessage.receiveMessage {\n\t\t\t\tin topic = topicPort.topic;\n\t\t\t\tin message = messagePort.message;\n\t\t\t}\n\t\t\tperform notifySubscribers.sendNotification",
    "package 'TransportationSystem' {\n\tattribute def FuelLevel;\n\tattribute def UserCount;\n\tattribute def IsRefueling;\n\tport def FuelLevelPort {\n\t\tout fuelLevel: FuelLevel;\n\t}\n\tport def UserCountPort {\n\t\tout userCount: UserCount;\n\t}\n\tport def IsRefuelingPort {\n\t\tout isRefueling: IsRefueling;\n\t}\n\tpart context {\n\t\tpart driver {\n\t\t\tport fuelLevelPort: FuelLevelPort;\n\t\t\tport userCountPort: UserCountPort;\n\t\t\tperform refuel.checkFuelLevel {\n\t\t\t\tin fuelLevel = fuelLevelPort.fuelLevel;\n\t\t\t\tout isRefueling = isRefuelingPort.isRefueling;\n\t\t\t}\n\t\t}\n\t\tinterface driverToSystem connect driver.fuelLevelPort to system.fuelLevelPort\n\t\t\tdriver.userCountPort to system.userCountPort\n\t\t\tdriver.isRefuelingPort to system.isRefuelingPort {\n\t\t\tref flow references refuel.fuelLevelFlow\n\t\t\t\tfrom source.fuelLevel to target.fuelLevel;",
    "package 'FuelSupplySystem' {\n\tattribute def FuelTemperature;\n\tport def FuelTemperaturePort {\n\t\tout fuelTemperature: FuelTemperature;\n\t}\n\tpart context {\n\t\tpart fuelTank {\n\t\t\tport fuelOutletPort: FuelOutletPort;\n\t\t\tperform fuelSupply.sendFuel {\n\t\t\t\tout fuel = fuelOutletPort.fuel;\n\t\t\t}\n\t\t}\n\t\tinterface fuelTankToEngine connect fuelTank.fuelOutletPort to engine.fuelInletPort {\n\t\t\tref flow references fuelSupply.fuelFlow\n\t\t\t\tfrom source.fuel to target.fuel; \n\t\t}\n\t\tpart engine {\n\t\t\tport fuelInletPort: ~FuelOutletPort;\n\t\t\tperform fuelReturn.receiveFuel {\n\t\t\t\tin fuel = fuelInletPort.fuel;\n\t\t\t}\n\t\t}\n\t\tpart fuelReturn {\n\t\t\tport fuelReturnPort: ~FuelOutletPort;\n\t\t\tperform fuelSupply.receiveFuel {\n\t\t\t\tin fuel = fuelReturnPort.fuel;\n\t\t\t}\n",
    "package 'VehicleFuelSystem' {\n\tattribute def FuelFlowCmd;\n\tattribute def FuelTemp;\n\tport def FuelFlowCmdPort {\n\t\tout fuelFlowCmd : FuelFlowCmd;\n\t}\n\tport def FuelTempPort {\n\t\tout fuelTemp: FuelTemp;\n\t}\n\tpart context {\n\t\tpart fuelTank {\n\t\t\tport fuelFlowCmdPort: ~FuelFlowCmdPort;\n\t\t\tperform fuelSupply.receiveFuelFlowCmd {\n\t\t\t\tin fuelFlowCmd = fuelFlowCmdPort.fuelFlowCmd;\n\t\t\t}\n\t\t\tperform fuelReturn.sendFuelFlowCmd {\n\t\t\t\tout fuelFlowCmd = fuelFlowCmdPort.fuelFlowCmd;\n\t\t\t}\n\t\t}\n\t\tinterface fuelTankToEngine connect fuelTank.fuelFlowCmdPort to engine.fuelFlowCmdPort {\n\t\t\tref flow references fuelSupply.fuelFlowCmdFlow\n\t\t\t\tfrom source.fuelFlowCmd to target.fuelFlowCmd; \n\t\t}\n\t\tpart engine {\n\t\t\tport fuelFlowCmdPort: ~FuelFlowCmdPort;\n\t\t\tperform fuelSupply.sendFuelFlowCmd {\n\t\t\t",
    "package 'PhotoCaptureSystem' {\n\tattribute def FocusedImage;\n\tattribute def FinalPhoto;\n\tport def FocusedImagePort {\n\t\tout focusedImage: FocusedImage;\n\t}\n\tport def FinalPhotoPort {\n\t\tout finalPhoto: FinalPhoto;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport focusedImagePort: FocusedImagePort;\n\t\t\tperform capturePhoto.selectScene {\n\t\t\t\tout scene = selectedScene;\n\t\t\t}\n\t\t}\n\t\tinterface userToSystem connect user.focusedImagePort to system.focusedImagePort {\n\t\t\tref flow references capturePhoto.sceneFlow\n\t\t\t\tfrom source.scene to target.scene; \n\t\t}\n\t\tpart system {\n\t\t\tport focusedImagePort: ~FocusedImagePort;\n\t\t\tperform capturePhoto.performFocus {\n\t\t\t\tin scene = focusedImagePort.focusedImage;\n\t\t\t\tout focusedImage = focusedImagePort.focusedImage;\n\t\t\t}\n\t\t\tport finalPhotoPort: FinalPhotoPort;\n\t\t\tperform capturePhoto.generateFinalPhoto {\n\t\t\t\tin focusedImage = focusedImagePort.focusedImage;\n\t\t\t\tout finalPhoto =",
    "package 'PhotographyWorkflow' {\n\tattribute def SceneSelection;\n\tattribute def FocusedImage;\n\tattribute def FinalImage;\n\tport def SceneSelectionPort {\n\t\tout sceneSelection : SceneSelection;\n\t}\n\tport def FocusedImagePort {\n\t\tout focusedImage: FocusedImage;\n\t}\n\tport def FinalImagePort {\n\t\tout finalImage: FinalImage;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport sceneSelectionPort: SceneSelectionPort;\n\t\t\tperform focusScene.sendSceneSelection {\n\t\t\t\tout sceneSelection = sceneSelectionPort.sceneSelection;\n\t\t\t}\n\t\t}\n\t\tinterface userToSystem connect user.sceneSelectionPort to system.sceneSelectionPort {\n\t\t\tref flow references focusScene.sceneSelectionFlow\n\t\t\t\tfrom source.sceneSelection to target.sceneSelection; \n\t\t}\n\t\tpart system {\n\t\t\tport sceneSelectionPort: ~SceneSelectionPort;\n\t\t\tperform focusScene.receiveSceneSelection {\n\t\t\t\tin sceneSelection = sceneSelectionPort.sceneSelection;\n\t\t\t\tperform autoFocus.focusOnScene {\n\t\t\t\t\tin sceneSelection;\n\t\t\t\t\tout focusedImage",
    "package 'PhotographyWorkflow' {\n\tattribute def SceneSelection;\n\tattribute def FocusedImage;\n\tattribute def FinalPhoto;\n\tport def SceneSelectionPort {\n\t\tout sceneSelection : SceneSelection;\n\t}\n\tport def FocusedImagePort {\n\t\tout focusedImage: FocusedImage;\n\t}\n\tport def FinalPhotoPort {\n\t\tout finalPhoto: FinalPhoto;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport sceneSelectionPort: SceneSelectionPort;\n\t\t\tperform frameAndCapture.sendSceneSelection {\n\t\t\t\tout sceneSelection = sceneSelectionPort.sceneSelection;\n\t\t\t}\n\t\t}\n\t\tinterface userToSystem connect user.sceneSelectionPort to system.sceneSelectionPort {\n\t\t\tref flow references frameAndCapture.sceneSelectionFlow\n\t\t\t\tfrom source.sceneSelection to target.sceneSelection; \n\t\t}\n\t\tpart system {\n\t\t\tport sceneSelectionPort: ~SceneSelectionPort;\n\t\t\tperform frameAndCapture.performFocusing {\n\t\t\t\tin sceneSelection = sceneSelectionPort.sceneSelection;\n\t\t\t\tout focusedImage = focusingProcess.focusedImage;\n\t\t\t}\n\t\t\tport",
    "package 'PhotographyAutomation' {\n\tattribute def Scene;\n\tattribute def FocusedImage;\n\tattribute def Photograph;\n\tport def ScenePort {\n\t\tout scene: Scene;\n\t}\n\tport def FocusedImagePort {\n\t\tout focusedImage: FocusedImage;\n\t}\n\tport def PhotographPort {\n\t\tout photograph: Photograph;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport scenePort: ScenePort;\n\t\t\tperform focusScene.sendScene {\n\t\t\t\tout scene = scenePort.scene;\n\t\t\t}\n\t\t}\n\t\tinterface userToAutomation connect user.scenePort to automation.scenePort {\n\t\t\tref flow references focusScene.sceneFlow\n\t\t\t\tfrom source.scene to target.scene; \n\t\t}\n\t\tpart automation {\n\t\t\tport scenePort: ~ScenePort;\n\t\t\tperform focusScene.processFocus {\n\t\t\t\tin scene = scenePort.scene;\n\t\t\t\tout focusedImage = focusedImagePort.focusedImage;\n\t\t\t}\n\t\t\tport focusedImagePort: FocusedImagePort;\n\t\t\tperform shootPhoto.capturePhoto {\n\t\t\t\tin focusedImage = focusedImage",
    "package 'PhotographyWorkflow' {\n\tattribute def Focus;\n\tattribute def Scene;\n\tattribute def Image;\n\tattribute def Picture;\n\tport def FocusPort {\n\t\tout focus: Focus;\n\t}\n\tport def ScenePort {\n\t\tout scene: Scene;\n\t}\n\tport def ImagePort {\n\t\tout image: Image;\n\t}\n\tport def PicturePort {\n\t\tout picture: Picture;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport focusPort: FocusPort;\n\t\t\tport scenePort: ScenePort;\n\t\t\tperform captureImage.sendFocus {\n\t\t\t\tout focus = focusPort.focus;\n\t\t\t}\n\t\t\tperform captureImage.sendScene {\n\t\t\t\tout scene = scenePort.scene;\n\t\t\t}\n\t\t}\n\t\tinterface userToWorkflow connect user.focusPort to workflow.focusPort {\n\t\t\tref flow references captureImage.focusFlow\n\t\t\t\tfrom source.focus to target.focus; \n\t\t}\n\t\tinterface userToWorkflow connect user.scenePort to workflow.scenePort {\n\t\t\tref flow references captureImage.sceneFlow\n\t\t\t\tfrom source.scene",
    "package 'PhotographySystem' {\n\tattribute def SceneSelection;\n\tattribute def Focused;\n\tattribute def Photo;\n\tport def SceneSelectionPort {\n\t\tout sceneSelection : SceneSelection;\n\t}\n\tport def FocusedPort {\n\t\tout focused: Focused;\n\t}\n\tport def PhotoPort {\n\t\tout photo: Photo;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport sceneSelectionPort: SceneSelectionPort;\n\t\t\tperform captureImage.selectScene {\n\t\t\t\tout sceneSelection = sceneSelectionPort.sceneSelection;\n\t\t\t}\n\t\t}\n\t\tinterface userToCamera connect user.sceneSelectionPort to camera.sceneSelectionPort {\n\t\t\tref flow references selectScene.sceneSelectionFlow\n\t\t\t\tfrom source.sceneSelection to target.sceneSelection; \n\t\t}\n\t\tpart camera {\n\t\t\tport sceneSelectionPort: ~SceneSelectionPort;\n\t\t\tperform focusImage.focusScene {\n\t\t\t\tin sceneSelection = sceneSelectionPort.sceneSelection;\n\t\t\t\tout focused = focusedPort.focused;\n\t\t\t}\n\t\t\tport focusedPort: FocusedPort;\n\t\t\tperform captureImage.capture",
    "package 'PhotographySystem' {\n\tattribute def SceneSelection;\n\tattribute def FocusStatus;\n\tattribute def ImageQuality;\n\tattribute def ShootCommand;\n\tport def SceneSelectionPort {\n\t\tout sceneSelection : SceneSelection;\n\t}\n\tport def FocusStatusPort {\n\t\tout focusStatus : FocusStatus;\n\t}\n\tport def ImageQualityPort {\n\t\tout imageQuality : ImageQuality;\n\t}\n\tport def ShootCommandPort {\n\t\tout shootCommand : ShootCommand;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport sceneSelectionPort: SceneSelectionPort;\n\t\t\tperform selectScene.sendSceneSelection {\n\t\t\t\tout sceneSelection = sceneSelectionPort.sceneSelection;\n\t\t\t}\n\t\t}\n\t\tinterface userToSystem connect user.sceneSelectionPort to system.sceneSelectionPort {\n\t\t\tref flow references selectScene.sceneSelectionFlow\n\t\t\t\tfrom source.sceneSelection to target.sceneSelection; \n\t\t}\n\t\tpart system {\n\t\t\tport sceneSelectionPort: ~SceneSelectionPort;\n\t\t\tperform performFocus.focusOnScene {\n\t\t\t\tin sceneSelection = sceneSelectionPort.sceneSelection",
    "package 'PhotographyWorkflow' {\n\tattribute def TakePhotoCmd;\n\tattribute def Scene;\n\tattribute def FocusedImage;\n\tattribute def FinalPhoto;\n\tport def TakePhotoCmdPort {\n\t\tout takePhotoCmd : TakePhotoCmd;\n\t}\n\tport def ScenePort {\n\t\tout scene: Scene;\n\t}\n\tport def FocusedImagePort {\n\t\tout focusedImage: FocusedImage;\n\t}\n\tport def FinalPhotoPort {\n\t\tout finalPhoto: FinalPhoto;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport takePhotoCmdPort: TakePhotoCmdPort;\n\t\t\tperform captureRegion.sendTakePhotoCmd {\n\t\t\t\tout takePhotoCmd = takePhotoCmdPort.takePhotoCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToPhotography connect user.takePhotoCmdPort to photography.takePhotoCmdPort {\n\t\t\tref flow references captureRegion.takePhotoCmdFlow\n\t\t\t\tfrom source.takePhotoCmd to target.takePhotoCmd; \n\t\t}\n\t\tpart photography {\n\t\t\tport takePhotoCmdPort: ~TakePhotoCmdPort;\n\t\t\tperform captureRegion",
    "package 'VehicleBrakingControl' {\n\tattribute def SystemStatus;\n\tattribute def BrakePedalStatus;\n\tattribute def TractionInfo;\n\tattribute def BrakePressure;\n\tattribute def ModulationFrequency;\n\tport def SystemStatusPort {\n\t\tout systemStatus: SystemStatus;\n\t}\n\tport def BrakePedalStatusPort {\n\t\tout brakePedalStatus: BrakePedalStatus;\n\t}\n\tport def TractionInfoPort {\n\t\tout tractionInfo: TractionInfo;\n\t}\n\tport def BrakePressurePort {\n\t\tout brakePressure: BrakePressure;\n\t}\n\tport def ModulationFrequencyPort {\n\t\tout modulationFrequency: ModulationFrequency;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport systemStatusPort: SystemStatusPort;\n\t\t\tport brakePedalStatusPort: BrakePedalStatusPort;\n\t\t\tport tractionInfoPort: TractionInfoPort;\n\t\t\tperform adjustBraking.monitorSystemStatus {\n\t\t\t\tout systemStatus = systemStatusPort.systemStatus;\n\t\t\t}\n\t\t\tperform adjustBraking.monitorBrakePedalStatus {\n\t\t\t\tout brakePedalStatus = brake",
    "package 'BatteryChargingControl' {\n\tattribute def BatteryLevel;\n\tattribute def ChargingState;\n\tport def BatteryLevelPort {\n\t\tin batteryLevel: BatteryLevel;\n\t}\n\tport def ChargingStatePort {\n\t\tout chargingState: ChargingState;\n\t}\n\tpart context {\n\t\tpart battery {\n\t\t\tport batteryLevelPort: BatteryLevelPort;\n\t\t\tperform monitorBatteryLevel.readBatteryLevel {\n\t\t\t\tin batteryLevel = batteryLevelPort.batteryLevel;\n\t\t\t\tout batteryLevel = batteryLevel;\n\t\t\t}\n\t\t}\n\t\tinterface batteryToControl connect battery.batteryLevelPort to controlSystem.batteryLevelPort {\n\t\t\tref flow references monitorBatteryLevel.batteryLevelFlow\n\t\t\t\tfrom source.batteryLevel to target.batteryLevel; \n\t\t}\n\t\tpart controlSystem {\n\t\t\tport batteryLevelPort: ~BatteryLevelPort;\n\t\t\tperform controlCharging.controlCharge {\n\t\t\t\tin batteryLevel = batteryLevelPort.batteryLevel;\n\t\t\t\tout chargingState = chargingStatePort.chargingState;\n\t\t\t}\n\t\t\tport chargingStatePort: ChargingStatePort;\n\t\t}\n\t\tpart chargeTerm",
    "package 'BatteryChargingSystem' {\n\tattribute def BatteryLevel;\n\tattribute def ChargingState;\n\tport def BatteryLevelPort {\n\t\tin batteryLevel: BatteryLevel;\n\t}\n\tport def ChargingStatePort {\n\t\tout chargingState: ChargingState;\n\t}\n\tpart context {\n\t\tpart charger {\n\t\t\tport batteryLevelPort: ~BatteryLevelPort;\n\t\t\tperform chargeBattery.monitorBatteryLevel {\n\t\t\t\tin batteryLevel = batteryLevelPort.batteryLevel;\n\t\t\t\tout chargingState = chargingStatePort.chargingState;\n\t\t\t}\n\t\t\tport chargingStatePort: ~ChargingStatePort;\n\t\t}\n\t\tinterface chargerToSystem connect charger.batteryLevelPort to system.batteryLevelPort {\n\t\t\tref flow references chargeBattery.batteryLevelFlow\n\t\t\t\tfrom source.batteryLevel to target.batteryLevel; \n\t\t}\n\t\tpart system {\n\t\t\tport batteryLevelPort: ~BatteryLevelPort;\n\t\t\tperform chargeBattery.controlCharging {\n\t\t\t\tin batteryLevel = batteryLevelPort.batteryLevel;\n\t\t\t\tout chargingState = chargingStatePort.chargingState;\n\t\t\t}\n\t\t\tport chargingState",
    "package 'CameraSystem' {\n\tattribute def Focused;\n\tattribute def Image;\n\tport def FocusedPort {\n\t\tout focused: Focused;\n\t}\n\tport def ImagePort {\n\t\tout image: Image;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport focusedPort: FocusedPort;\n\t\t\tperform autofocus.sendFocused;\n\t\t}\n\t\tinterface userToCamera connect user.focusedPort to camera.focusedPort {\n\t\t\tref flow references autofocus.focusedFlow\n\t\t\t\tfrom source.focused to target.focused; \n\t\t}\n\t\tpart camera {\n\t\t\tport focusedPort: ~FocusedPort;\n\t\t\tperform autofocus.receiveFocused;\n\t\t\tperform imaging.captureImage;\n\t\t\tport imagePort: ImagePort;\n\t\t}\n\t\tpart imaging {\n\t\t\tport imagePort: ~ImagePort;\n\t\t\tperform captureImage {\n\t\t\t\tin focused;\n\t\t\t\tout image: Image;\n\t\t\t}\n\t\t}\n\t\tpart storage {\n\t\t\tport imagePort: ~ImagePort;\n\t\t\tperform recordImage {\n\t\t\t\tin image;\n\t\t\t}",
    "package 'DigitalCamera' {\n\tattribute def SceneSelection;\n\tattribute def Focused;\n\tattribute def Image;\n\tport def SceneSelectionPort {\n\t\tout sceneSelection: SceneSelection;\n\t}\n\tport def FocusedPort {\n\t\tout focused: Focused;\n\t}\n\tport def ImagePort {\n\t\tout image: Image;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport sceneSelectionPort: SceneSelectionPort;\n\t\t\tperform autoShoot.sendSceneSelection {\n\t\t\t\tout sceneSelection = sceneSelectionPort.sceneSelection;\n\t\t\t}\n\t\t}\n\t\tinterface userToCamera connect user.sceneSelectionPort to camera.sceneSelectionPort {\n\t\t\tref flow references autoShoot.sceneSelectionFlow\n\t\t\t\tfrom source.sceneSelection to target.sceneSelection; \n\t\t}\n\t\tpart camera {\n\t\t\tport sceneSelectionPort: ~SceneSelectionPort;\n\t\t\tperform autoShoot.autoFocus {\n\t\t\t\tin sceneSelection = sceneSelectionPort.sceneSelection;\n\t\t\t\tout focused = focusedPort.focused;\n\t\t\t}\n\t\t\tport focusedPort: FocusedPort;\n\t\t\tperform auto",
    "package 'VehicleSimulation' {\n\tattribute def Mass;\n\tattribute def InitialPosition;\n\tattribute def InitialVelocity;\n\tattribute def TimeInterval;\n\tattribute def PowerInput;\n\tport def MassPort {\n\t\tout mass: Mass;\n\t}\n\tport def InitialPositionPort {\n\t\tout initialPosition: InitialPosition;\n\t}\n\tport def InitialVelocityPort {\n\t\tout initialVelocity: InitialVelocity;\n\t}\n\tport def TimeIntervalPort {\n\t\tout timeInterval: TimeInterval;\n\t}\n\tport def PowerInputPort {\n\t\tout powerInput: PowerInput;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport massPort: MassPort;\n\t\t\tport initialPositionPort: InitialPositionPort;\n\t\t\tport initialVelocityPort: InitialVelocityPort;\n\t\t\tport timeIntervalPort: TimeIntervalPort;\n\t\t\tport powerInputPort: PowerInputPort;\n\t\t\tperform simulateVehicle.sendInputs {\n\t\t\t\tout mass = massPort.mass;\n\t\t\t\tout initialPosition = initialPositionPort.initialPosition;\n\t\t\t\tout initialVelocity = initialVelocityPort.initialVelocity;\n\t\t\t\tout timeInterval = timeIntervalPort",
    "package 'CameraSystem' {\n\tattribute def SceneInput;\n\tattribute def FocusedImage;\n\tattribute def CapturedPhoto;\n\tport def SceneInputPort {\n\t\tin sceneInput: SceneInput;\n\t}\n\tport def FocusedImagePort {\n\t\tout focusedImage: FocusedImage;\n\t}\n\tport def CapturedPhotoPort {\n\t\tout capturedPhoto: CapturedPhoto;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport sceneInputPort: SceneInputPort;\n\t\t\tperform captureScene.sendSceneInput {\n\t\t\t\tin sceneInput = sceneInputPort.sceneInput;\n\t\t\t}\n\t\t}\n\t\tinterface userToCameraSystem connect user.sceneInputPort to cameraSystem.sceneInputPort {\n\t\t\tref flow references captureScene.sceneInputFlow\n\t\t\t\tfrom source.sceneInput to target.sceneInput; \n\t\t}\n\t\tpart cameraSystem {\n\t\t\tport sceneInputPort: ~SceneInputPort;\n\t\t\tperform focusScene.obtainFocusedImage {\n\t\t\t\tin sceneInput = sceneInputPort.sceneInput;\n\t\t\t\tout focusedImage = focusedImagePort.focusedImage;\n\t\t\t}\n",
    "package 'CameraSystem' {\n\tattribute def SceneSelectionCmd;\n\tattribute def Image;\n\tattribute def Picture;\n\tport def SceneSelectionCmdPort {\n\t\tout sceneSelectionCmd : SceneSelectionCmd;\n\t}\n\tport def ImagePort {\n\t\tout image: Image;\n\t}\n\tport def PicturePort {\n\t\tout picture: Picture;\n\t}\n\tport def DisplayPort {\n\t\tin picture: Picture;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport sceneSelectionCmdPort: SceneSelectionCmdPort;\n\t\t\tperform captureScene.sendSceneSelectionCmd {\n\t\t\t\tout sceneSelectionCmd = sceneSelectionCmdPort.sceneSelectionCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToCamera connect user.sceneSelectionCmdPort to camera.sceneSelectionCmdPort {\n\t\t\tref flow references captureScene.sceneSelectionCmdFlow\n\t\t\t\tfrom source.sceneSelectionCmd to target.sceneSelectionCmd; \n\t\t}\n\t\tpart camera {\n\t\t\tport sceneSelectionCmdPort: ~SceneSelectionCmdPort;\n\t\t\tperform captureScene.obtainImage {\n\t\t\t\tin sceneSelectionCmd = sceneSelectionCmdPort.sceneSelectionCmd",
    "package 'SensorManagementSystem' {\n\tattribute def SensorStatus;\n\tattribute def UpdateOperation;\n\tport def SensorStatusPort {\n\t\tout sensorStatus: SensorStatus;\n\t}\n\tport def UpdateOperationPort {\n\t\tout updateOperation: UpdateOperation;\n\t}\n\tpart context {\n\t\tpart sensor {\n\t\t\tport sensorStatusPort: SensorStatusPort;\n\t\t\tperform sensorUpdate.receiveSensorStatus {\n\t\t\t\tin sensorStatus = sensorStatusPort.sensorStatus;\n\t\t\t}\n\t\t}\n\t\tinterface sensorToSystem connect sensor.sensorStatusPort to system.sensorStatusPort {\n\t\t\tref flow references sensorUpdate.sensorStatusFlow\n\t\t\t\tfrom source.sensorStatus to target.sensorStatus; \n\t\t}\n\t\tpart system {\n\t\t\tport sensorStatusPort: ~SensorStatusPort;\n\t\t\tperform sensorUpdate.updateSensor {\n\t\t\t\tin sensorStatus = sensorStatusPort.sensorStatus;\n\t\t\t\tout updateOperation = updateOperationPort.updateOperation;\n\t\t\t}\n\t\t\tport updateOperationPort: ~UpdateOperationPort;\n\t\t}\n\t}\n\taction sensorUpdate {\n\t\taction receiveSensorStatus { in sensorStatus:",
    "package 'VehicleManagement' {\n\tattribute def VehicleState;\n\tport def VehicleStatePort {\n\t\tout vehicleState: VehicleState;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport vehicleStatePort: ~VehicleStatePort;\n\t\t\tperform stateTransition.updateState {\n\t\t\t\tin vehicleState = vehicleStatePort.vehicleState;\n\t\t\t\tout vehicleState = newState;\n\t\t\t}\n\t\t}\n\t\tinterface vehicleControl connect vehicle.vehicleStatePort to control.vehicleStatePort {\n\t\t\tref flow references stateTransition.stateFlow\n\t\t\t\tfrom source.vehicleState to target.vehicleState; \n\t\t}\n\t\tpart control {\n\t\t\tport vehicleStatePort: VehicleStatePort;\n\t\t\tperform stateTransition.sendStartSignal {\n\t\t\t\tin vehicleState = vehicleStatePort.vehicleState;\n\t\t\t\tout newState = starting;\n\t\t\t}\n\t\t\tperform stateTransition.sendPowerOnSignal {\n\t\t\t\tin vehicleState = vehicleStatePort.vehicleState;\n\t\t\t\tout newState = on;\n\t\t\t}\n\t\t\tperform stateTransition.sendShutdownSignal {\n\t\t\t\tin vehicleState = vehicleStatePort.vehicleState;\n",
    "package 'VehicleManagement' {\n\tattribute def VehicleState;\n\tport def VehicleStatePort {\n\t\tout vehicleState: VehicleState;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport vehicleStatePort: VehicleStatePort;\n\t\t\tperform stateTransition.manageVehicleState {\n\t\t\t\tin vehicleState = vehicleStatePort.vehicleState;\n\t\t\t\tout vehicleState = vehicleStatePort.vehicleState;\n\t\t\t}\n\t\t}\n\t\tinterface vehicleControl connect vehicle.vehicleStatePort to controlSystem.vehicleStatePort {\n\t\t\tref flow references stateTransition.stateFlow\n\t\t\t\tfrom source.vehicleState to target.vehicleState; \n\t\t}\n\t\tpart controlSystem {\n\t\t\tport vehicleStatePort: ~VehicleStatePort;\n\t\t\tperform stateTransition.controlVehicleState {\n\t\t\t\tin vehicleState = vehicleStatePort.vehicleState;\n\t\t\t\tout vehicleState = vehicleStatePort.vehicleState;\n\t\t\t}\n\t\t}\n\t}\n\taction stateTransition {\n\t\taction manageVehicleState { in vehicleState; out vehicleState; }\n\t\tsuccession flow stateFlow from manageVehicleState.vehicleState to controlVehicleState.vehicle",
    "package 'VehiclePowerManagement' {\n\tattribute def StartCmd;\n\tattribute def StartSignal;\n\tattribute def ShutdownCmd;\n\tattribute def SafetyOperations;\n\tattribute def PowerStatus;\n\tport def StartCmdPort {\n\t\tout startCmd : StartCmd;\n\t}\n\tport def StartSignalPort {\n\t\tout startSignal: StartSignal;\n\t}\n\tport def ShutdownCmdPort {\n\t\tout shutdownCmd: ShutdownCmd;\n\t}\n\tport def SafetyOperationsPort {\n\t\tout safetyOperations: SafetyOperations;\n\t}\n\tport def PowerStatusPort {\n\t\tout powerStatus: PowerStatus;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport startCmdPort: StartCmdPort;\n\t\t\tport startSignalPort: StartSignalPort;\n\t\t\tport shutdownCmdPort: ShutdownCmdPort;\n\t\t\tperform vehicleStateTransition.sendStartCmd {\n\t\t\t\tout startCmd = startCmdPort.startCmd;\n\t\t\t}\n\t\t\tperform vehicleStateTransition.sendShutdownCmd {\n\t\t\t\tout shutdownCmd = shutdownCmdPort.shutdownCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToSystem connect user.startCmdPort",
    "package 'VehicleControlSystem' {\n\tattribute def StartSignal;\n\tattribute def StopSignal;\n\tattribute def VehicleState;\n\tport def StartSignalPort {\n\t\tin startSignal: StartSignal;\n\t}\n\tport def StopSignalPort {\n\t\tin stopSignal: StopSignal;\n\t}\n\tport def VehicleStatePort {\n\t\tout vehicleState: VehicleState;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport startSignalPort: StartSignalPort;\n\t\t\tport stopSignalPort: StopSignalPort;\n\t\t\tperform manageVehicleState.sendSignals {\n\t\t\t\tin startSignal = startSignalPort.startSignal;\n\t\t\t\tin stopSignal = stopSignalPort.stopSignal;\n\t\t\t}\n\t\t}\n\t\tinterface userToVehicleControl connect user.startSignalPort to vehicleControl.startSignalPort {\n\t\t\tref flow references manageVehicleState.startFlow\n\t\t\t\tfrom source.startSignal to target.startSignal; \n\t\t}\n\t\tinterface userToVehicleControl connect user.stopSignalPort to vehicleControl.stopSignalPort {\n\t\t\tref flow references manageVehicleState.stopFlow\n\t\t\t\tfrom source.",
    "package 'VehiclePowerManagement' {\n\tattribute def OffState;\n\tattribute def StartState;\n\tattribute def OnState;\n\tattribute def ControlSignal;\n\tport def ControlSignalPort {\n\t\tin controlSignal: ControlSignal;\n\t}\n\tport def OffStatePort {\n\t\tout offState: OffState;\n\t}\n\tport def StartStatePort {\n\t\tout startState: StartState;\n\t}\n\tport def OnStatePort {\n\t\tout onState: OnState;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport controlSignalPort: ControlSignalPort;\n\t\t\tperform stateTransition.sendControlSignal {\n\t\t\t\tin controlSignal = controlSignalPort.controlSignal;\n\t\t\t}\n\t\t}\n\t\tinterface userToVehicle connect user.controlSignalPort to vehicle.controlSignalPort {\n\t\t\tref flow references stateTransition.controlSignalFlow\n\t\t\t\tfrom source.controlSignal to target.controlSignal; \n\t\t}\n\t\tpart vehicle {\n\t\t\tport controlSignalPort: ~ControlSignalPort;\n\t\t\tperform stateTransition.processControlSignal {\n\t\t\t\tin controlSignal = controlSignalPort",
    "package 'VehicleHealthMonitoring' {\n\tattribute def Temperature;\n\tattribute def MaxAllowableTemperature;\n\tattribute def HealthStatus;\n\tattribute def MaintenanceCycleTime;\n\tport def TemperaturePort {\n\t\tin temperature: Temperature;\n\t}\n\tport def MaxAllowableTemperaturePort {\n\t\tin maxAllowableTemperature: MaxAllowableTemperature;\n\t}\n\tport def HealthStatusPort {\n\t\tout healthStatus: HealthStatus;\n\t}\n\tport def MaintenanceCycleTimePort {\n\t\tout maintenanceCycleTime: MaintenanceCycleTime;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport temperaturePort: TemperaturePort;\n\t\t\tport maxAllowableTemperaturePort: MaxAllowableTemperaturePort;\n\t\t\tport healthStatusPort: HealthStatusPort;\n\t\t\tperform monitorTemperature.checkTemperature {\n\t\t\t\tin temperature = temperaturePort.temperature;\n\t\t\t\tin maxAllowableTemperature = maxAllowableTemperaturePort.maxAllowableTemperature;\n\t\t\t\tout healthStatus = healthStatusPort.healthStatus;\n\t\t\t}\n\t\t}",
    "package 'ServerSystem' {\n\tattribute def StartCmd;\n\tattribute def RequestMsg;\n\tattribute def ResponseMsg;\n\tattribute def PowerState;\n\tport def StartCmdPort {\n\t\tin startCmd : StartCmd;\n\t}\n\tport def RequestMsgPort {\n\t\tin requestMsg : RequestMsg;\n\t}\n\tport def ResponseMsgPort {\n\t\tout responseMsg : ResponseMsg;\n\t}\n\tport def PowerStatePort {\n\t\tin powerState : PowerState;\n\t\tout powerState : PowerState;\n\t}\n\tpart context {\n\t\tpart server {\n\t\t\tport startCmdPort: ~StartCmdPort;\n\t\t\tport requestMsgPort: ~RequestMsgPort;\n\t\t\tport responseMsgPort: ResponseMsgPort;\n\t\t\tport powerStatePort: PowerStatePort;\n\t\t\tstate off {\n\t\t\t\tentry {\n\t\t\t\t\tout powerState = 'off';\n\t\t\t\t}\n\t\t\t\ttransition on startCmdPort.startCmd {\n\t\t\t\t\ttarget waiting;\n\t\t\t\t}\n\t\t\t}\n\t\t\tstate waiting {\n\t\t\t\tentry {\n\t\t\t\t\tout powerState = 'waiting';\n\t\t\t\t}\n\t\t\t\ttransition on request",
    "package 'VehicleStartStop' {\n\tattribute def StartSignal;\n\tattribute def PowerOnSignal;\n\tattribute def StopSignal;\n\tattribute def OperatingState;\n\tattribute def ParkingBrake;\n\tport def StartSignalPort {\n\t\tout startSignal: StartSignal;\n\t}\n\tport def PowerOnSignalPort {\n\t\tout powerOnSignal: PowerOnSignal;\n\t}\n\tport def StopSignalPort {\n\t\tout stopSignal: StopSignal;\n\t}\n\tport def OperatingStatePort {\n\t\tout operatingState: OperatingState;\n\t}\n\tport def ParkingBrakePort {\n\t\tout parkingBrake: ParkingBrake;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport startSignalPort: StartSignalPort;\n\t\t\tport powerOnSignalPort: PowerOnSignalPort;\n\t\t\tport stopSignalPort: StopSignalPort;\n\t\t\tport operatingStatePort: OperatingStatePort;\n\t\t\tport parkingBrakePort: ParkingBrakePort;\n\t\t\tperform startProcess.startVehicle {\n\t\t\t\tin startSignal = startSignalPort.startSignal;\n\t\t\t\tout powerOnSignal =",
    "package 'VehicleControlSystem' {\n\tattribute def StartStopCmd;\n\tattribute def VehicleStatus;\n\tport def StartStopCmdPort {\n\t\tout startStopCmd : StartStopCmd;\n\t}\n\tport def VehicleStatusPort {\n\t\tout vehicleStatus: VehicleStatus;\n\t}\n\tpart context {\n\t\tpart driver {\n\t\t\tport startStopCmdPort: StartStopCmdPort;\n\t\t\tperform startVehicle.sendStartStopCmd {\n\t\t\t\tout startStopCmd = startStopCmdPort.startStopCmd;\n\t\t\t}\n\t\t}\n\t\tinterface driverToSystem connect driver.startStopCmdPort to system.startStopCmdPort {\n\t\t\tref flow references startVehicle.startStopCmdFlow\n\t\t\t\tfrom source.startStopCmd to target.startStopCmd; \n\t\t}\n\t\tpart system {\n\t\t\tport startStopCmdPort: ~StartStopCmdPort;\n\t\t\tperform startVehicle.processStartCmd {\n\t\t\t\tin startStopCmd",
    "package 'CruiseControlSystem' {\n\tattribute def DesiredSpeed;\n\tattribute def ActualSpeed;\n\tattribute def FuelControlCmd;\n\tport def DesiredSpeedPort {\n\t\tout desiredSpeed: DesiredSpeed;\n\t}\n\tport def ActualSpeedPort {\n\t\tout actualSpeed: ActualSpeed;\n\t}\n\tport def FuelControlCmdPort {\n\t\tout fuelControlCmd: FuelControlCmd;\n\t}\n\tpart context {\n\t\tpart driver {\n\t\t\tport desiredSpeedPort: DesiredSpeedPort;\n\t\t\tperform setDesiredSpeed.sendDesiredSpeedCmd {\n\t\t\t\tout desiredSpeed = desiredSpeedPort.desiredSpeed;\n\t\t\t}\n\t\t}\n\t\tinterface driverToCruiseController connect driver.desiredSpeedPort to cruiseController.desiredSpeedPort {\n\t\t\tref flow references setDesiredSpeed.desiredSpeedFlow\n\t\t\t\tfrom source.desiredSpeed to target.desiredSpeed; \n\t\t}\n\t\tpart cruiseController {\n\t\t\tport desiredSpeedPort: ~DesiredSpeedPort;\n\t\t\tport actualSpeedPort: ~ActualSpeedPort;\n\t\t\tport fuelControlCmdPort: ~FuelControlCmdPort;\n\t\t\tperform",
    "package 'CruiseControl' {\n\tattribute def SetSpeedCmd;\n\tattribute def VehicleSpeed;\n\tattribute def ThrottleCmd;\n\tport def SetSpeedCmdPort {\n\t\tout setSpeedCmd : SetSpeedCmd;\n\t}\n\tport def VehicleSpeedPort {\n\t\tout vehicleSpeed: VehicleSpeed;\n\t}\n\tport def ThrottleCmdPort {\n\t\tout throttleCmd: ThrottleCmd;\n\t}\n\tpart context {\n\t\tpart driver {\n\t\t\tport setSpeedCmdPort: SetSpeedCmdPort;\n\t\t\tperform setCruiseSpeed.sendSetSpeedCmd {\n\t\t\t\tout setSpeedCmd = setSpeedCmdPort.setSpeedCmd;\n\t\t\t}\n\t\t}\n\t\tinterface driverToCruiseControl connect driver.setSpeedCmdPort to cruiseControl.setSpeedCmdPort {\n\t\t\tref flow references setCruiseSpeed.setSpeedCmdFlow\n\t\t\t\tfrom source.setSpeedCmd to target.setSpeedCmd; \n\t\t}\n\t\tpart cruiseControl {\n\t\t\tport setSpeedCmdPort: ~SetSpeedCmdPort;\n\t\t\tport vehicleSpeedPort: VehicleSpeedPort;\n\t\t\tport throttleCmdPort: Thro",
    "package 'AutomotiveCruiseControl' {\n\tattribute def SetSpeedCmd;\n\tattribute def CurrentSpeed;\n\tattribute def ThrottleCmd;\n\tport def SetSpeedCmdPort {\n\t\tout setSpeedCmd : SetSpeedCmd;\n\t}\n\tport def CurrentSpeedPort {\n\t\tout currentSpeed: CurrentSpeed;\n\t}\n\tport def ThrottleCmdPort {\n\t\tout throttleCmd: ThrottleCmd;\n\t}\n\tpart context {\n\t\tpart driver {\n\t\t\tport setSpeedCmdPort: SetSpeedCmdPort;\n\t\t\tperform setDesiredSpeed.sendSetSpeedCmd {\n\t\t\t\tout setSpeedCmd = setSpeedCmdPort.setSpeedCmd;\n\t\t\t}\n\t\t}\n\t\tinterface driverToCruiseController connect driver.setSpeedCmdPort to cruiseController.setSpeedCmdPort {\n\t\t\tref flow references setDesiredSpeed.setSpeedCmdFlow\n\t\t\t\tfrom source.setSpeedCmd to target.setSpeedCmd; \n\t\t}\n\t\tpart cruiseController {\n\t\t\tport setSpeedCmdPort: ~SetSpeedCmdPort;\n\t\t\tport currentSpeedPort: ~CurrentSpeedPort;\n\t\t\tport throttleCmdPort:",
    "package 'AutomotiveCruiseControl' {\n\tattribute def DesiredSpeed;\n\tattribute def CurrentSpeed;\n\tattribute def ThrottleCmd;\n\tport def DesiredSpeedPort {\n\t\tout desiredSpeed: DesiredSpeed;\n\t}\n\tport def CurrentSpeedPort {\n\t\tin currentSpeed: CurrentSpeed;\n\t}\n\tport def ThrottleCmdPort {\n\t\tout throttleCmd: ThrottleCmd;\n\t}\n\tpart context {\n\t\tpart driver {\n\t\t\tport desiredSpeedPort: DesiredSpeedPort;\n\t\t\tperform setCruisingSpeed.sendDesiredSpeed {\n\t\t\t\tout desiredSpeed = desiredSpeedPort.desiredSpeed;\n\t\t\t}\n\t\t}\n\t\tinterface driverToCruiseController connect driver.desiredSpeedPort to cruiseController.desiredSpeedPort {\n\t\t\tref flow references setCruisingSpeed.desiredSpeedFlow\n\t\t\t\tfrom source.desiredSpeed to target.desiredSpeed; \n\t\t}\n\t\tpart cruiseController {\n\t\t\tport desiredSpeedPort: ~DesiredSpeedPort;\n\t\t\tport currentSpeedPort: CurrentSpeedPort;\n\t\t\tport throttleCmdPort: ~ThrottleCmdPort;\n\t\t\tperform adjustThro",
    "package 'AutomotiveCruiseControl' {\n\tattribute def SetSpeedCmd;\n\tattribute def ActualSpeed;\n\tattribute def FuelControlCmd;\n\tport def SetSpeedCmdPort {\n\t\tout setSpeedCmd : SetSpeedCmd;\n\t}\n\tport def ActualSpeedPort {\n\t\tin actualSpeed: ActualSpeed;\n\t}\n\tport def FuelControlCmdPort {\n\t\tout fuelControlCmd: FuelControlCmd;\n\t}\n\tpart context {\n\t\tpart driver {\n\t\t\tport setSpeedCmdPort: SetSpeedCmdPort;\n\t\t\tperform setTargetSpeed.sendSetSpeedCmd {\n\t\t\t\tout setSpeedCmd = setSpeedCmdPort.setSpeedCmd;\n\t\t\t}\n\t\t}\n\t\tinterface driverToCruiseControl connect driver.setSpeedCmdPort to cruiseControl.setSpeedCmdPort {\n\t\t\tref flow references setTargetSpeed.setSpeedCmdFlow\n\t\t\t\tfrom source.setSpeedCmd to target.setSpeedCmd; \n\t",
    "package 'CruiseControlSystem' {\n\tattribute def SetSpeedCmd;\n\tattribute def RealTimeSpeed;\n\tattribute def FuelControlCmd;\n\tport def SetSpeedCmdPort {\n\t\tout setSpeedCmd : SetSpeedCmd;\n\t}\n\tport def RealTimeSpeedPort {\n\t\tout realTimeSpeed: RealTimeSpeed;\n\t}\n\tport def FuelControlCmdPort {\n\t\tout fuelControlCmd: FuelControlCmd;\n\t}\n\tpart context {\n\t\tpart driver {\n\t\t\tport setSpeedCmdPort: SetSpeedCmdPort;\n\t\t\tperform processSetSpeedCmd.sendSetSpeedCmd {\n\t\t\t\tout setSpeedCmd = setSpeedCmdPort.setSpeedCmd;\n\t\t\t}\n\t\t}\n\t\tinterface driverToCruiseController connect driver.setSpeedCmdPort to cruiseController.setSpeedCmdPort {\n\t\t\tref flow references processSetSpeedCmd.setSpeedCmdFlow\n\t\t\t\tfrom source.setSpeedCmd to target.setSpeedCmd; \n\t\t}\n\t\tpart cruiseController {\n\t\t\tport setSpeedCmdPort: ~SetSpeedCmdPort;\n\t\t\tport realTimeSpeedPort: ~RealTimeSpeedPort;",
    "package 'VehicleLifecycleManagement' {\n\tattribute def AssemblyDate;\n\tattribute def DeliveryDate;\n\tattribute def OwnerInfo;\n\tattribute def DriverInfo;\n\tattribute def ScrapInfo;\n\tport def AssemblyDatePort {\n\t\tout assemblyDate: AssemblyDate;\n\t}\n\tport def DeliveryDatePort {\n\t\tout deliveryDate: DeliveryDate;\n\t}\n\tport def OwnerInfoPort {\n\t\tout ownerInfo: OwnerInfo;\n\t}\n\tport def DriverInfoPort {\n\t\tout driverInfo: DriverInfo;\n\t}\n\tport def ScrapInfoPort {\n\t\tout scrapInfo: ScrapInfo;\n\t}\n\tpart context {\n\t\tpart assembly {\n\t\t\tport assemblyDatePort: AssemblyDatePort;\n\t\t\tperform recordAssemblyDate.sendAssemblyDate {\n\t\t\t\tout assemblyDate = assemblyDatePort.assemblyDate;\n\t\t\t}\n\t\t}\n\t\tpart delivery {\n\t\t\tport deliveryDatePort: DeliveryDatePort;\n\t\t\tperform recordDeliveryDate.sendDeliveryDate {\n\t\t\t\tout deliveryDate = deliveryDatePort.deliveryDate;\n\t\t\t}\n\t\t}\n",
    "package 'Vehicle' {\n\tattribute def Mass;\n\tattribute def OperationalStatus;\n\tattribute def GearSetting;\n\tattribute def AcceleratorPedalPosition;\n\tport def OperationalStatusPort {\n\t\tout operationalStatus: OperationalStatus;\n\t}\n\tport def GearSettingPort {\n\t\tout gearSetting: GearSetting;\n\t}\n\tport def AcceleratorPedalPositionPort {\n\t\tout acceleratorPedalPosition: AcceleratorPedalPosition;\n\t}\n\tpart context {\n\t\tpart driver {\n\t\t\tport operationalStatusPort: ~OperationalStatusPort;\n\t\t\tport gearSettingPort: ~GearSettingPort;\n\t\t\tport acceleratorPedalPositionPort: ~AcceleratorPedalPositionPort;\n\t\t}\n\t\tpart engine {\n\t\t\tport operationalStatusPort: ~OperationalStatusPort;\n\t\t\tport gearSettingPort: ~GearSettingPort;\n\t\t\tport acceleratorPedalPositionPort: ~AcceleratorPedalPositionPort;\n\t\t}\n\t\tpart wheels {\n\t\t\tpart leftFrontWheel {\n\t\t\t\tattribute def WheelStatus;\n\t\t\t\tport wheelStatusPort: WheelStatus;\n\t\t\t}\n\t\t\tpart",
    "package 'VehicleSystem' {\n\tattribute def Mass;\n\tattribute def GearSetting;\n\tattribute def AcceleratorPosition;\n\tattribute def State;\n\tport def MassPort {\n\t\tout mass: Mass;\n\t}\n\tport def GearSettingPort {\n\t\tout gearSetting: GearSetting;\n\t}\n\tport def AcceleratorPositionPort {\n\t\tout acceleratorPosition: AcceleratorPosition;\n\t}\n\tport def StatePort {\n\t\tout state: State;\n\t}\n\tpart context {\n\t\tpart vehicleInstance {\n\t\t\tattribute mass = 2000;\n\t\t\tattribute gearSetting = 0;\n\t\t\tattribute acceleratorPosition = 0.0;\n\t\t\tport massPort: MassPort;\n\t\t\tport gearSettingPort: GearSettingPort;\n\t\t\tport acceleratorPositionPort: AcceleratorPositionPort;\n\t\t\tport statePort: StatePort;\n\t\t}\n\t\tpart vehicle {\n\t\t\tport massPort: ~MassPort;\n\t\t\tport gearSettingPort: ~GearSettingPort;\n\t\t\tport acceleratorPositionPort: ~AcceleratorPositionPort;\n\t\t",
    "package 'VehicleModel' {\n\tattribute def mass;\n\tattribute def gearPosition;\n\tattribute def throttlePosition;\n\tattribute def driver;\n\tport def massPort {\n\t\tout mass: mass;\n\t}\n\tport def gearPort {\n\t\tout gearPosition: gearPosition;\n\t}\n\tport def throttlePort {\n\t\tout throttlePosition: throttlePosition;\n\t}\n\tport def driverPort {\n\t\tout driver: driver;\n\t}\n\tpart context {\n\t\tpart initialState {\n\t\t\tattribute mass = 2000;\n\t\t\tattribute gearPosition = 'neutral';\n\t\t\tattribute throttlePosition = 0;\n\t\t\tattribute driver = 'Alice';\n\t\t}\n\t\tpart firstTimeSlice {\n\t\t\tattribute mass = 1500;\n\t\t\tattribute gearPosition = 'second';\n\t\t\tattribute throttlePosition = 0.5;\n\t\t\tattribute driver = 'Bob';\n\t\t}\n\t\tinterface stateChange connect initialState.massPort to firstTimeSlice.massPort,\n\t\t",
    "package 'VehicleMassModel' {\n\tattribute def Mass;\n\tattribute def TotalMass;\n\tport def MassPort {\n\t\tout mass: Mass;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport massPort: MassPort;\n\t\t\tperform calculateTotalMass.calculate {\n\t\t\t\tin mass = massPort.mass;\n\t\t\t\tout totalMass = totalMass;\n\t\t\t}\n\t\t\tattribute def totalMass;\n\t\t}\n\t\tpart component {\n\t\t\tport massPort: MassPort;\n\t\t\tperform calculateTotalMass.calculate {\n\t\t\t\tin mass = massPort.mass;\n\t\t\t\tout totalMass = totalMass;\n\t\t\t}\n\t\t\tattribute def totalMass;\n\t\t\tpart subcomponent {\n\t\t\t\tport massPort: MassPort;\n\t\t\t\tperform calculateTotalMass.calculate {\n\t\t\t\t\tin mass = massPort.mass;\n\t\t\t\t\tout totalMass = totalMass;\n\t\t\t\t}\n\t\t\t\tattribute def totalMass;\n\t\t\t}\n\t\t}\n\t\tinterface vehicleToComponent connect vehicle.massPort to component.",
    "package 'VehicleManagement' {\n\tattribute def Mass;\n\tattribute def VIN;\n\tattribute def SerialNumber;\n\tport def MassPort {\n\t\tout mass: Mass;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tattribute def VIN;\n\t\t\tattribute def totalMass;\n\t\t\tport massPort: MassPort;\n\t\t\tperform calculateTotalMass.calculate {\n\t\t\t\tin massPort.mass;\n\t\t\t\tout totalMass = totalMass + massPort.mass;\n\t\t\t}\n\t\t}\n\t\tinterface vehicleToComponent connect vehicle.massPort to component.massPort {\n\t\t\tref flow references calculateTotalMass.massFlow\n\t\t\t\tfrom source.massPort to target.massPort; \n\t\t}\n\t\tpart component {\n\t\t\tattribute def SerialNumber;\n\t\t\tattribute def mass;\n\t\t\tport massPort: ~MassPort;\n\t\t\tperform calculateTotalMass.calculate {\n\t\t\t\tin massPort.mass;\n\t\t\t\tout mass = mass;\n\t\t\t}\n\t\t}\n\t}",
    "package 'MassAggregation' {\n\tattribute def simpleMass;\n\tattribute def totalMass;\n\tport def simpleMassPort {\n\t\tout simpleMass: simpleMass;\n\t}\n\tport def totalMassPort {\n\t\tout totalMass: totalMass;\n\t}\n\tpart context {\n\t\tpart simpleThing {\n\t\t\tport simpleMassPort: simpleMassPort;\n\t\t\tperform calculateTotalMass.calculate {\n\t\t\t\tout totalMass = simpleMassPort.simpleMass;\n\t\t\t}\n\t\t}\n\t\tpart compositeThing {\n\t\t\tpart def subcomponents[];\n\t\t\tport simpleMassPort: simpleMassPort;\n\t\t\tport totalMassPort: totalMassPort;\n\t\t\tperform calculateTotalMass.calculate {\n\t\t\t\tin simpleMass = simpleMassPort.simpleMass;\n\t\t\t\tout totalMass = simpleMass + sum(subcomponents.totalMass);\n\t\t\t}\n\t\t}\n\t\tinterface compositeToSubcomponents connect compositeThing.simpleMassPort to subcomponents[].simpleMassPort;\n\t\taction calculateTotalMass {\n\t\t\taction calculate { in simpleMass; out totalMass: totalMass; }\n\t\t}\n\t}\n}",
    "package 'MassAggregationSystem' {\n\tattribute def basicMass;\n\tattribute def subcomponents;\n\tattribute def totalMass;\n\tattribute def minMassThreshold;\n\tpart context {\n\t\tpart object {\n\t\t\tattribute basicMass;\n\t\t\tattribute subcomponents;\n\t\t\tperform calculateTotalMass.calculate {\n\t\t\t\tin basicMass = basicMass;\n\t\t\t\tin subcomponents = subcomponents;\n\t\t\t\tout totalMass = totalMass;\n\t\t\t}\n\t\t}\n\t\tinterface objectToSystem connect object.basicMass to system.basicMassPort {\n\t\t\tref flow references calculateTotalMass.massFlow\n\t\t\t\tfrom source.basicMass to target.basicMass;\n\t\t}\n\t\tinterface objectToSystem connect object.subcomponents to system.subcomponentsPort {\n\t\t\tref flow references calculateTotalMass.massFlow\n\t\t\t\tfrom source.subcomponents to target.subcomponents;\n\t\t}\n\t\tpart system {\n\t\t\tport basicMassPort: ~basicMass;\n\t\t\tport subcomponentsPort: ~subcomponents;\n\t\t\t",
    "package 'VehicleDynamics' {\n\tattribute def PowerOutput;\n\tattribute def Acceleration;\n\tattribute def Speed;\n\tattribute def Position;\n\tport def PowerOutputPort {\n\t\tout powerOutput: PowerOutput;\n\t}\n\tport def AccelerationPort {\n\t\tout acceleration: Acceleration;\n\t}\n\tport def SpeedPort {\n\t\tout speed: Speed;\n\t}\n\tport def PositionPort {\n\t\tout position: Position;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport powerOutputPort: PowerOutputPort;\n\t\t\tport accelerationPort: AccelerationPort;\n\t\t\tport speedPort: SpeedPort;\n\t\t\tport positionPort: PositionPort;\n\t\t\tperform calculateParameters.calculatePowerOutput {\n\t\t\t\tin wheelPower, aerodynamicDragCoeff, frictionCoeff, vehicleMass, speed;\n\t\t\t\tout powerOutput = calculatePowerOutput;\n\t\t\t}\n\t\t\tperform calculateParameters.calculateAcceleration {\n\t\t\t\tin effectivePower, mass, currentSpeed;\n\t\t\t\tout acceleration = calculateAcceleration;\n\t\t\t}\n\t\t",
    "package 'VehicleSimulation' {\n\tattribute def WheelPower;\n\tattribute def VehicleMass;\n\tattribute def InitialSpeed;\n\tattribute def InitialPosition;\n\tattribute def TimeStep;\n\tattribute def AerodynamicDragCoefficient;\n\tattribute def RollingResistanceCoefficient;\n\tport def WheelPowerPort {\n\t\tin wheelPower: WheelPower;\n\t}\n\tport def VehicleMassPort {\n\t\tin vehicleMass: VehicleMass;\n\t}\n\tport def InitialSpeedPort {\n\t\tin initialSpeed: InitialSpeed;\n\t}\n\tport def InitialPositionPort {\n\t\tin initialPosition: InitialPosition;\n\t}\n\tport def TimeStepPort {\n\t\tin timeStep: TimeStep;\n\t}\n\tport def AerodynamicDragCoefficientPort {\n\t\tin aerodynamicDragCoefficient: AerodynamicDragCoefficient;\n\t}\n\tport def RollingResistanceCoefficientPort {\n\t\tin rollingResistanceCoefficient: RollingResistanceCoefficient;\n\t}\n\tpart context {\n\t\tpart simulation {\n\t\t\tport wheelPowerPort: WheelPowerPort;\n\t\t\tport vehicleMass",
    "package 'VehicleDynamicsModel' {\n\tattribute def VehicleMass;\n\tattribute def WheelPower;\n\tattribute def AerodynamicDragCoefficient;\n\tattribute def RollingResistanceCoefficient;\n\tattribute def InitialSpeed;\n\tattribute def InitialPosition;\n\tattribute def TimeStep;\n\tattribute def Speed;\n\tattribute def Position;\n\tport def VehicleMassPort {\n\t\tin vehicleMass: VehicleMass;\n\t}\n\tport def WheelPowerPort {\n\t\tin wheelPower: WheelPower;\n\t}\n\tport def AerodynamicDragCoefficientPort {\n\t\tin aerodynamicDragCoefficient: AerodynamicDragCoefficient;\n\t}\n\tport def RollingResistanceCoefficientPort {\n\t\tin rollingResistanceCoefficient: RollingResistanceCoefficient;\n\t}\n\tport def InitialSpeedPort {\n\t\tin initialSpeed: InitialSpeed;\n\t}\n\tport def InitialPositionPort {\n\t\tin initialPosition: InitialPosition;\n\t}\n\tport def TimeStepPort {\n\t\tin timeStep: TimeStep;\n\t}\n\tport def SpeedPort {\n\t\tout speed: Speed;\n\t}\n\tport def PositionPort {\n\t\tout position: Position;",
    "package 'VehicleDynamicSimulation' {\n\tattribute def InitialPosition;\n\tattribute def InitialVelocity;\n\tattribute def VehicleMass;\n\tattribute def WheelEndDrivePower;\n\tattribute def TimeInterval;\n\tattribute def AirResistanceCoefficient;\n\tattribute def FrictionCoefficient;\n\tattribute def DragCoefficient;\n\tport def InitialPositionPort {\n\t\tout initialPosition: InitialPosition;\n\t}\n\tport def InitialVelocityPort {\n\t\tout initialVelocity: InitialVelocity;\n\t}\n\tport def VehicleMassPort {\n\t\tout vehicleMass: VehicleMass;\n\t}\n\tport def WheelEndDrivePowerPort {\n\t\tout wheelEndDrivePower: WheelEndDrivePower;\n\t}\n\tport def TimeIntervalPort {\n\t\tout timeInterval: TimeInterval;\n\t}\n\tport def AirResistanceCoefficientPort {\n\t\tout airResistanceCoefficient: AirResistanceCoefficient;\n\t}\n\tport def FrictionCoefficientPort {\n\t\tout frictionCoefficient: FrictionCoefficient;\n\t}\n\tport def DragCoefficientPort {\n\t\tout dragCoefficient",
    "package 'VehicleMassManagement' {\n\tattribute def ChassisMass;\n\tattribute def EngineMass;\n\tattribute def GearboxMass;\n\tattribute def TotalMass;\n\tattribute def MaxPermittedMass;\n\tport def ChassisMassPort {\n\t\tin chassisMass: ChassisMass;\n\t}\n\tport def EngineMassPort {\n\t\tin engineMass: EngineMass;\n\t}\n\tport def GearboxMassPort {\n\t\tin gearboxMass: GearboxMass;\n\t}\n\tport def TotalMassPort {\n\t\tout totalMass: TotalMass;\n\t}\n\tport def OverweightWarningPort {\n\t\tout overweightWarning: Boolean;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport chassisMassPort: ChassisMassPort;\n\t\t\tport engineMassPort: EngineMassPort;\n\t\t\tport gearboxMassPort: GearboxMassPort;\n\t\t\tperform calculateTotalMass {\n\t\t\t\tin chassisMass = chassisMassPort.chassisMass;\n\t\t\t\tin engineMass = engineMassPort.engineMass;\n\t\t\t\tin gearboxMass = gearboxMassPort.gearboxMass;\n\t\t\t\tout totalMass = chassisMass + engineMass + gearbox",
    "package 'VehicleMassBudget' {\n\tattribute def ComponentMass;\n\tattribute def TotalMass;\n\tattribute def MassLimit;\n\tattribute def EngineMass;\n\tattribute def TransmissionMass;\n\tport def ComponentMassPort {\n\t\tin componentMass: ComponentMass;\n\t}\n\tport def TotalMassPort {\n\t\tout totalMass: TotalMass;\n\t}\n\tport def EngineMassPort {\n\t\tin engineMass: EngineMass;\n\t}\n\tport def TransmissionMassPort {\n\t\tin transmissionMass: TransmissionMass;\n\t}\n\tpart context {\n\t\tpart component {\n\t\t\tport componentMassPort: ComponentMassPort;\n\t\t\tperform calculateTotalMass.updateTotalMass {\n\t\t\t\tin componentMass = componentMassPort.componentMass;\n\t\t\t\tout totalMass = totalMassPort.totalMass;\n\t\t\t}\n\t\t}\n\t\tinterface componentToSystem connect component.componentMassPort to system.componentMassPort {\n\t\t\tref flow references calculateTotalMass.totalMassFlow\n\t\t\t\tfrom source.totalMass to target.totalMass; \n\t\t}\n\t\tpart system {\n\t\t\tport componentMassPort:",
    "package 'VehicleMassManagement' {\n\tattribute def ChassisMass;\n\tattribute def EngineMass;\n\tattribute def TransmissionMass;\n\tattribute def TotalMass;\n\tport def ChassisMassPort {\n\t\tin chassisMass: ChassisMass;\n\t}\n\tport def EngineMassPort {\n\t\tin engineMass: EngineMass;\n\t}\n\tport def TransmissionMassPort {\n\t\tin transmissionMass: TransmissionMass;\n\t}\n\tport def TotalMassPort {\n\t\tout totalMass: TotalMass;\n\t}\n\tpart context {\n\t\tpart chassis {\n\t\t\tport chassisMassPort: ChassisMassPort;\n\t\t}\n\t\tpart engine {\n\t\t\tport engineMassPort: EngineMassPort;\n\t\t}\n\t\tpart transmission {\n\t\t\tport transmissionMassPort: TransmissionMassPort;\n\t\t}\n\t\tinterface massVerification connect chassis.chassisMassPort to engine.engineMassPort to transmission.transmissionMassPort to totalMassVerification.massPort {\n\t\t\tref flow references totalMassFlow\n\t\t\t\tfrom chassis.chassisMassPort.chassisMass to engine.engineMassPort.engineMass\n\t\t\t\tto transmission.transmissionMassPort",
    "package 'VehicleWeightMonitoring' {\n\tattribute def ChassisWeight;\n\tattribute def EngineWeight;\n\tattribute def TransmissionWeight;\n\tattribute def TotalWeight;\n\tport def ChassisWeightPort {\n\t\tin chassisWeight: ChassisWeight;\n\t}\n\tport def EngineWeightPort {\n\t\tin engineWeight: EngineWeight;\n\t}\n\tport def TransmissionWeightPort {\n\t\tin transmissionWeight: TransmissionWeight;\n\t}\n\tport def TotalWeightPort {\n\t\tout totalWeight: TotalWeight;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport chassisWeightPort: ChassisWeightPort;\n\t\t\tport engineWeightPort: EngineWeightPort;\n\t\t\tport transmissionWeightPort: TransmissionWeightPort;\n\t\t\tperform calculateTotalWeight.calculate {\n\t\t\t\tin chassisWeight = chassisWeightPort.chassisWeight;\n\t\t\t\tin engineWeight = engineWeightPort.engineWeight;\n\t\t\t\tin transmissionWeight = transmissionWeightPort.transmissionWeight;\n\t\t\t\tout totalWeight = chassisWeight + engineWeight + transmissionWeight;\n\t\t\t}\n\t\t}\n\t\tinterface vehicleToSystem connect vehicle.chassisWeightPort to system.chassisWeightPort\n\t\t",
    "package 'VehicleComposition' {\n\tattribute def chassisMass;\n\tattribute def engineMass;\n\tattribute def transmissionMass;\n\tattribute def totalMass;\n\tattribute def initialVelocity;\n\tattribute def finalVelocity;\n\tattribute def appliedForce;\n\tattribute def timePeriod;\n\tport def chassisMassPort {\n\t\tout chassisMass: chassisMass;\n\t}\n\tport def engineMassPort {\n\t\tout engineMass: engineMass;\n\t}\n\tport def transmissionMassPort {\n\t\tout transmissionMass: transmissionMass;\n\t}\n\tport def totalMassPort {\n\t\tout totalMass: totalMass;\n\t}\n\tport def initialVelocityPort {\n\t\tout initialVelocity: initialVelocity;\n\t}\n\tport def finalVelocityPort {\n\t\tout finalVelocity: finalVelocity;\n\t}\n\tport def appliedForcePort {\n\t\tout appliedForce: appliedForce;\n\t}\n\tport def timePeriodPort {\n\t\tout timePeriod: timePeriod;\n\t}\n\tpart context {\n\t\tpart chassis {\n\t\t\tport chassisMassPort: chassisMassPort;\n\t\t}\n\t\tpart engine {\n\t\t\tport engineMassPort: engineMass",
    "package 'VehicleMaintenanceSystem' {\n\tattribute def ScheduledMaintenanceTime;\n\tattribute def MaintenanceInterval;\n\tattribute def MaxAllowedTemperature;\n\tattribute def VehicleStatus;\n\tattribute def ActualMaintenanceStartTime;\n\tattribute def MaintenanceDuration;\n\tattribute def NextMaintenanceTime;\n\tport def ScheduledMaintenanceTimePort {\n\t\tout scheduledMaintenanceTime: ScheduledMaintenanceTime;\n\t}\n\tport def MaintenanceIntervalPort {\n\t\tout maintenanceInterval: MaintenanceInterval;\n\t}\n\tport def MaxAllowedTemperaturePort {\n\t\tout maxAllowedTemperature: MaxAllowedTemperature;\n\t}\n\tport def VehicleStatusPort {\n\t\tout vehicleStatus: VehicleStatus;\n\t}\n\tport def ActualMaintenanceStartTimePort {\n\t\tout actualMaintenanceStartTime: ActualMaintenanceStartTime;\n\t}\n\tport def MaintenanceDurationPort {\n\t\tout maintenanceDuration: MaintenanceDuration;\n\t}\n\tport def NextMaintenanceTimePort {\n\t\tout nextMaintenanceTime: NextMaintenanceTime;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport scheduledMaintenanceTimePort: ScheduledMaintenanceTimePort;\n\t\t\tport maintenanceIntervalPort: MaintenanceIntervalPort;\n\t\t\tport maxAllowedTemperaturePort: MaxAllowedTemperaturePort;",
    "package 'VehicleMassAndEngine' {\n\tattribute def MaxMass;\n\tattribute def FuelMass;\n\tattribute def EngineTorque;\n\tport def MaxMassPort {\n\t\tin maxMass: MaxMass;\n\t}\n\tport def FuelMassPort {\n\t\tin fuelMass: FuelMass;\n\t}\n\tport def EngineTorquePort {\n\t\tin engineTorque: EngineTorque;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport maxMassPort: MaxMassPort;\n\t\t\tport fuelMassPort: FuelMassPort;\n\t\t\tperform checkMassLimit {\n\t\t\t\tin maxMass = maxMassPort.maxMass;\n\t\t\t\tin fuelMass = fuelMassPort.fuelMass;\n\t\t\t}\n\t\t}\n\t\tinterface vehicleToEngine connect vehicle.maxMassPort to engine.maxMassPort {\n\t\t\tref flow references checkMassLimit.massFlow\n\t\t\t\tfrom source.maxMass to target.maxMass;\n\t\t}\n\t\tinterface vehicleToEngine connect vehicle.fuelMassPort to engine.fuelMassPort {\n\t\t\tref flow references checkMassLimit.fuelFlow\n\t\t\t\tfrom source.fuelMass to target",
    "package 'Vehicle' {\n\tattribute def FullMass;\n\tattribute def EmptyMass;\n\tattribute def DryMass;\n\tattribute def FuelMass;\n\tattribute def Torque;\n\tattribute def Speed;\n\tport def FullMassPort {\n\t\tout fullMass: FullMass;\n\t}\n\tport def EmptyMassPort {\n\t\tout emptyMass: EmptyMass;\n\t}\n\tport def DryMassPort {\n\t\tout dryMass: DryMass;\n\t}\n\tport def FuelMassPort {\n\t\tout fuelMass: FuelMass;\n\t}\n\tport def TorquePort {\n\t\tout torque: Torque;\n\t}\n\tport def SpeedPort {\n\t\tout speed: Speed;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport fullMassPort: FullMassPort;\n\t\t\tport emptyMassPort: EmptyMassPort;\n\t\t\tport dryMassPort: DryMassPort;\n\t\t\tport fuelMassPort: FuelMassPort;\n\t\t\tperform massControl.calculateMass {\n\t\t\t\tin fullMass = fullMassPort.fullMass;\n\t\t\t\tin emptyMass = emptyMassPort.emptyMass;\n",
    "package 'VehicleSystem' {\n\tattribute def TotalMass;\n\tattribute def FueledMass;\n\tattribute def EmptyMass;\n\tattribute def EngineTorque;\n\tattribute def EngineSpeed;\n\tport def TotalMassPort {\n\t\tout totalMass: TotalMass;\n\t}\n\tport def FueledMassPort {\n\t\tout fueledMass: FueledMass;\n\t}\n\tport def EmptyMassPort {\n\t\tout emptyMass: EmptyMass;\n\t}\n\tport def EngineTorquePort {\n\t\tout engineTorque: EngineTorque;\n\t}\n\tport def EngineSpeedPort {\n\t\tout engineSpeed: EngineSpeed;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport totalMassPort: ~TotalMassPort;\n\t\t\tport fueledMassPort: ~FueledMassPort;\n\t\t\tport emptyMassPort: ~EmptyMassPort;\n\t\t\tperform checkMass.checkTotalMass {\n\t\t\t\tin totalMass = totalMassPort.totalMass;\n\t\t\t\tout fueledMass = fueledMassPort.fueledMass;\n\t\t\t\tout emptyMass = emptyMassPort.emptyMass;\n\t\t\t}\n\t\t}\n\t\tinterface",
    "package 'VehicleMassControl' {\n\tattribute def FuelTankStatus;\n\tattribute def CurbMass;\n\tattribute def FuelMass;\n\tattribute def TotalMass;\n\tattribute def EngineTorque;\n\tattribute def EngineSpeed;\n\tattribute def ClutchStatus;\n\tport def FuelTankStatusPort {\n\t\tin fuelTankStatus: FuelTankStatus;\n\t}\n\tport def CurbMassPort {\n\t\tin curbMass: CurbMass;\n\t}\n\tport def FuelMassPort {\n\t\tin fuelMass: FuelMass;\n\t}\n\tport def EngineTorquePort {\n\t\tin engineTorque: EngineTorque;\n\t}\n\tport def EngineSpeedPort {\n\t\tin engineSpeed: EngineSpeed;\n\t}\n\tport def ClutchStatusPort {\n\t\tin clutchStatus: ClutchStatus;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport fuelTankStatusPort: FuelTankStatusPort;\n\t\t\tport curbMassPort: CurbMassPort;\n\t\t\tport fuelMassPort: FuelMassPort;\n\t\t\tperform calculateTotalMass.calculate {\n\t\t\t\tin curbMass =",
    "package 'VehiclePerformanceAnalyzer' {\n\tattribute def CurbWeight;\n\tattribute def Payload;\n\tattribute def WheelDiameter;\n\tattribute def TransmissionEfficiency;\n\tattribute def FuelEconomyUrban;\n\tattribute def FuelEconomyHighway;\n\tattribute def DrivingCycle;\n\tport def CurbWeightPort {\n\t\tout curbWeight: CurbWeight;\n\t}\n\tport def PayloadPort {\n\t\tout payload: Payload;\n\t}\n\tport def WheelDiameterPort {\n\t\tout wheelDiameter: WheelDiameter;\n\t}\n\tport def TransmissionEfficiencyPort {\n\t\tout transmissionEfficiency: TransmissionEfficiency;\n\t}\n\tport def FuelEconomyUrbanPort {\n\t\tout fuelEconomyUrban: FuelEconomyUrban;\n\t}\n\tport def FuelEconomyHighwayPort {\n\t\tout fuelEconomyHigh",
    "package 'FuelEconomySimulation' {\n\tattribute def UrbanDrivingScenario;\n\tattribute def HighwayDrivingScenario;\n\tattribute def VehicleParameters;\n\tattribute def SimulationResults;\n\tport def UrbanDrivingScenarioPort {\n\t\tout urbanDrivingScenario: UrbanDrivingScenario;\n\t}\n\tport def HighwayDrivingScenarioPort {\n\t\tout highwayDrivingScenario: HighwayDrivingScenario;\n\t}\n\tport def VehicleParametersPort {\n\t\tout vehicleParameters: VehicleParameters;\n\t}\n\tport def SimulationResultsPort {\n\t\tout simulationResults: SimulationResults;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport urbanDrivingScenarioPort: UrbanDrivingScenarioPort;\n\t\t\tport highwayDrivingScenarioPort: HighwayDrivingScenarioPort;\n\t\t\tport vehicleParametersPort: VehicleParametersPort;\n\t\t\tperform analyzeFuelEconomy.sendScenarios {\n\t\t\t\tout urbanDrivingScenario = urbanDrivingScenarioPort.urbanDrivingScenario;\n\t\t\t\tout highwayDrivingScenario = highwayDrivingScenarioPort.highwayDrivingScenario;\n\t\t\t\tout vehicleParameters = vehicleParametersPort.vehicleParameters;\n\t\t\t}\n\t\t}\n\t\tinterface userToSimulation connect user.urbanDrivingScenarioPort to simulation.urban",
    "package 'EngineSelectionSystem' {\n\tattribute def EngineType;\n\tattribute def PerformanceIndicators;\n\tattribute def EvaluationResults;\n\tattribute def OptimalEngine;\n\tport def EngineTypePort {\n\t\tout engineType : EngineType;\n\t}\n\tport def PerformanceIndicatorsPort {\n\t\tout performanceIndicators: PerformanceIndicators;\n\t}\n\tport def EvaluationResultsPort {\n\t\tout evaluationResults: EvaluationResults;\n\t}\n\tport def OptimalEnginePort {\n\t\tout optimalEngine: OptimalEngine;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport engineTypePort: EngineTypePort;\n\t\t\tport performanceIndicatorsPort: PerformanceIndicatorsPort;\n\t\t\tperform analyzeEngines.aggregatePerformanceIndicators {\n\t\t\t\tout engineType = engineTypePort.engineType;\n\t\t\t\tout performanceIndicators = performanceIndicatorsPort.performanceIndicators;\n\t\t\t}\n\t\t}\n\t\tinterface userToSystem connect user.engineTypePort to system.engineTypePort\n\t\t\tuser.performanceIndicatorsPort to system.performanceIndicatorsPort {\n\t\t\tref flow references analyzeEngines.engineTypeFlow\n\t\t\t\tfrom source.engine",
    "package 'VehicleQualityControl' {\n\tattribute def CurbWeight;\n\tattribute def EvaluationResult;\n\tport def CurbWeightPort {\n\t\tout curbWeight: CurbWeight;\n\t}\n\tport def EvaluationResultPort {\n\t\tout evaluationResult: EvaluationResult;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport curbWeightPort: CurbWeightPort;\n\t\t\tperform checkWeight.collectWeight {\n\t\t\t\tout curbWeight = curbWeightPort.curbWeight;\n\t\t\t}\n\t\t}\n\t\tinterface vehicleToSystem connect vehicle.curbWeightPort to system.curbWeightPort {\n\t\t\tref flow references checkWeight.weightFlow\n\t\t\t\tfrom source.curbWeight to target.curbWeight; \n\t\t}\n\t\tpart system {\n\t\t\tport curbWeightPort: ~CurbWeightPort;\n\t\t\tperform checkWeight.processWeight {\n\t\t\t\tin curbWeight = curbWeightPort.curbWeight;\n\t\t\t\tout evaluationResult = evaluationResultPort.evaluationResult;\n\t\t\t}\n\t\t\tport evaluationResultPort: EvaluationResultPort;\n\t\t}\n\t\tpart qualityStandard {\n\t\t\tperform check",
    "package 'VehicleMassVerification' {\n\tattribute def VehicleMass;\n\tattribute def MaxMass;\n\tport def VehicleMassPort {\n\t\tin vehicleMass: VehicleMass;\n\t}\n\tport def MaxMassPort {\n\t\tin maxMass: MaxMass;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport vehicleMassPort: VehicleMassPort;\n\t\t}\n\t\tpart weighingEquipment {\n\t\t\tport vehicleMassPort: VehicleMassPort;\n\t\t}\n\t\tpart massVerificationUnit {\n\t\t\tport vehicleMassPort: VehicleMassPort;\n\t\t\tport maxMassPort: MaxMassPort;\n\t\t\tperform verifyMass {\n\t\t\t\tin vehicleMass = vehicleMassPort.vehicleMass;\n\t\t\t\tin maxMass = maxMassPort.maxMass;\n\t\t\t\tif vehicleMass <= maxMass {\n\t\t\t\t\tout qualified = true;\n\t\t\t\t} else {\n\t\t\t\t\tout qualified = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}",
    "package 'VehicleSystem' {\n\tattribute def OperationalMode;\n\tattribute def VehicleStatus;\n\tport def OperationalModePort {\n\t\tout operationalMode: OperationalMode;\n\t}\n\tport def VehicleStatusPort {\n\t\tout vehicleStatus: VehicleStatus;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport operationalModePort: OperationalModePort;\n\t\t\tperform travel.sendOperationalMode {\n\t\t\t\tout operationalMode = operationalModePort.operationalMode;\n\t\t\t}\n\t\t}\n\t\tinterface userToVehicleSystem connect user.operationalModePort to vehicleSystem.operationalModePort {\n\t\t\tref flow references travel.operationalModeFlow\n\t\t\t\tfrom source.operationalMode to target.operationalMode; \n\t\t}\n\t\tpart vehicleSystem {\n\t\t\tport operationalModePort: ~OperationalModePort;\n\t\t\tperform travel.manageVehicle {\n\t\t\t\tin operationalMode = operationalModePort.operationalMode;\n\t\t\t\tout vehicleStatus = vehicleStatusPort.vehicleStatus;\n\t\t\t}\n\t\t\tport vehicleStatusPort: VehicleStatusPort;\n\t\t}\n\t\tpart infrastructure {\n\t\t\t",
    "package 'TransportationSystem' {\n\tattribute def VehicleStatus;\n\tattribute def FuelLevel;\n\tport def VehicleStatusPort {\n\t\tout vehicleStatus: VehicleStatus;\n\t}\n\tport def FuelLevelPort {\n\t\tout fuelLevel: FuelLevel;\n\t}\n\tpart context {\n\t\tpart driver {\n\t\t\tport vehicleStatusPort: VehicleStatusPort;\n\t\t\tperform journey.driveVehicle {\n\t\t\t\tout vehicleStatus = vehicleStatusPort.vehicleStatus;\n\t\t\t}\n\t\t}\n\t\tpart passengers {\n\t\t\tport vehicleStatusPort: VehicleStatusPort;\n\t\t\tperform journey.useVehicle {\n\t\t\t\tout vehicleStatus = vehicleStatusPort.vehicleStatus;\n\t\t\t}\n\t\t}\n\t\tinterface driverToSystem connect driver.vehicleStatusPort to system.vehicleStatusPort {\n\t\t\tref flow references journey.vehicleStatusFlow\n\t\t\t\tfrom source.vehicleStatus to target.vehicleStatus; \n\t\t}\n\t\tinterface passengersToSystem connect passengers.vehicleStatusPort to system.vehicleStatusPort {\n\t\t\tref flow references journey.vehicleStatusFlow\n\t\t\t\tfrom source.vehicleStatus to target.vehicleStatus; \n\t\t}\n\t",
    "package 'VehicleConfigurator' {\n\tattribute def EngineType;\n\tattribute def TransmissionType;\n\tattribute def CylinderDiameter;\n\tattribute def CylinderCount;\n\tport def EngineTypePort {\n\t\tout engineType: EngineType;\n\t}\n\tport def TransmissionTypePort {\n\t\tout transmissionType: TransmissionType;\n\t}\n\tport def CylinderDiameterPort {\n\t\tout cylinderDiameter: CylinderDiameter;\n\t}\n\tport def CylinderCountPort {\n\t\tout cylinderCount: CylinderCount;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport engineTypePort: EngineTypePort;\n\t\t\tport transmissionTypePort: TransmissionTypePort;\n\t\t\tport cylinderDiameterPort: CylinderDiameterPort;\n\t\t\tport cylinderCountPort: CylinderCountPort;\n\t\t\tperform validateCombination.checkEngineType {\n\t\t\t\tin engineType = engineTypePort.engineType;\n\t\t\t\tin transmissionType = transmissionTypePort.transmissionType;\n\t\t\t\tin cylinderDiameter = cylinderDiameterPort.cylinderDiameter;\n",
    "package 'EngineConfigurator' {\n\tattribute def CylinderCount;\n\tattribute def CylinderDiameter;\n\tport def CylinderCountPort {\n\t\tout cylinderCount: CylinderCount;\n\t}\n\tport def CylinderDiameterPort {\n\t\tout cylinderDiameter: CylinderDiameter;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport cylinderCountPort: CylinderCountPort;\n\t\t\tport cylinderDiameterPort: CylinderDiameterPort;\n\t\t\tperform configureEngine.sendCylinderCount {\n\t\t\t\tout cylinderCount = cylinderCountPort.cylinderCount;\n\t\t\t}\n\t\t\tperform configureEngine.sendCylinderDiameter {\n\t\t\t\tout cylinderDiameter = cylinderDiameterPort.cylinderDiameter;\n\t\t\t}\n\t\t}\n\t\tinterface userToEngine connect user.cylinderCountPort to engine.cylinderCountPort {\n\t\t\tref flow references configureEngine.cylinderCountFlow\n\t\t\t\tfrom source.cylinderCount to target.cylinderCount; \n\t\t}\n\t\tinterface userToEngine2 connect user.cylinderDiameterPort to engine.cylinderDiameterPort {\n\t\t\tref flow references configureEngine.cylinderDiameter",
    "package 'AutomotiveConfiguration' {\n\tattribute def EngineType;\n\tattribute def CylinderDiameter;\n\tattribute def TransmissionType;\n\tport def EngineTypePort {\n\t\tout engineType: EngineType;\n\t}\n\tport def CylinderDiameterPort {\n\t\tout cylinderDiameter: CylinderDiameter;\n\t}\n\tport def TransmissionTypePort {\n\t\tout transmissionType: TransmissionType;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport engineTypePort: EngineTypePort;\n\t\t\tport cylinderDiameterPort: CylinderDiameterPort;\n\t\t\tport transmissionTypePort: TransmissionTypePort;\n\t\t\tperform configureVehicle.sendEngineType {\n\t\t\t\tout engineType = engineTypePort.engineType;\n\t\t\t}\n\t\t\tperform configureVehicle.sendCylinderDiameter {\n\t\t\t\tout cylinderDiameter = cylinderDiameterPort.cylinderDiameter;\n\t\t\t}\n\t\t\tperform configureVehicle.sendTransmissionType {\n\t\t\t\tout transmissionType = transmissionTypePort.transmissionType;\n\t\t\t}\n\t\t}\n\t\tinterface userToVehicle connect user",
    "package 'SystemAssembly' {\n\tattribute def ComputerSubsystem;\n\tattribute def StorageSubsystem;\n\tattribute def SoftwareDesign;\n\tport def ComputerSubsystemPort {\n\t\tout computerSubsystem: ComputerSubsystem;\n\t}\n\tport def StorageSubsystemPort {\n\t\tout storageSubsystem: StorageSubsystem;\n\t}\n\tport def SoftwareDesignPort {\n\t\tout softwareDesign: SoftwareDesign;\n\t}\n\tpart context {\n\t\tpart systemAssembly {\n\t\t\tport computerSubsystemPort: ComputerSubsystemPort;\n\t\t\tport storageSubsystemPort: StorageSubsystemPort;\n\t\t\tport softwareDesignPort: SoftwareDesignPort;\n\t\t\tperform integrateFunctions.integrate {\n\t\t\t\tin computerSubsystem = computerSubsystemPort.computerSubsystem;\n\t\t\t\tin storageSubsystem = storageSubsystemPort.storageSubsystem;\n\t\t\t\tin softwareDesign = softwareDesignPort.softwareDesign;\n\t\t\t}\n\t\t}\n\t\tinterface systemAssemblyToComputer connect systemAssembly.computerSubsystemPort to computer.computerSubsystemPort {\n\t\t\tref flow references integrateFunctions.computerFlow\n\t\t\t\tfrom source.computerSubsystem to target.computerSubsystem;",
    "package 'PowertrainSystem' {\n\tattribute def LogicalLayer;\n\tattribute def PhysicalLayer;\n\tattribute def TorqueGenerator;\n\tattribute def PowerUnit;\n\tport def LogicalLayerPort {\n\t\tout logicalLayer: LogicalLayer;\n\t}\n\tport def PhysicalLayerPort {\n\t\tout physicalLayer: PhysicalLayer;\n\t}\n\tport def TorqueGeneratorPort {\n\t\tout torqueGenerator: TorqueGenerator;\n\t}\n\tport def PowerUnitPort {\n\t\tout powerUnit: PowerUnit;\n\t}\n\tpart context {\n\t\tpart logicalLayer {\n\t\t\tport logicalLayerPort: ~LogicalLayerPort;\n\t\t\tperform mapTorqueGenerator.generateTorque {\n\t\t\t\tin logicalLayer = logicalLayerPort.logicalLayer;\n\t\t\t\tout torqueGenerator = torqueGeneratorPort.torqueGenerator;\n\t\t\t}\n\t\t\tport torqueGeneratorPort: TorqueGeneratorPort;\n\t\t}\n\t\tinterface logicalToPhysical connect logicalLayer.logicalLayerPort to physicalLayer.logicalLayerPort {\n\t\t\tref flow references mapTorqueGenerator.torqueGeneratorFlow\n\t\t\t\tfrom source.torque",
    "package 'PowerTransmissionSystem' {\n\tattribute def Power;\n\tattribute def Torque;\n\tport def PowerPort {\n\t\tout power: Power;\n\t}\n\tport def TorquePort {\n\t\tout torque: Torque;\n\t}\n\tpart context {\n\t\tpart powertrain {\n\t\t\tpart engine {\n\t\t\t\tport torquePort: TorquePort;\n\t\t\t\tperform generateTorque.generate {\n\t\t\t\t\tout torque = torquePort.torque;\n\t\t\t\t}\n\t\t\t}\n\t\t\tinterface engineToPowerTransmission connect engine.torquePort to powerTransmission.torquePort {\n\t\t\t\tref flow references generateTorque.torqueFlow\n\t\t\t\t\tfrom source.torque to target.torque; \n\t\t\t}\n\t\t\tpart powerTransmission {\n\t\t\t\tport torquePort: ~TorquePort;\n\t\t\t\tperform generateTorque.produceTorque {\n\t\t\t\t\tin torque = torquePort.torque;\n\t\t\t\t\tout power = powerPort.power;\n\t\t\t\t}\n\t\t\t\tport powerPort: PowerPort ;\n\t\t\t}\n\t\t}\n\t\tpart generateTorque {\n\t\t\taction generate { out",
    "package 'VehicleFeatureAnnotation' {\n\tattribute def SafetyFeatures;\n\tattribute def SecurityFeatures;\n\tport def SafetyFeaturesPort {\n\t\tout safetyFeatures: SafetyFeatures;\n\t}\n\tport def SecurityFeaturesPort {\n\t\tout securityFeatures: SecurityFeatures;\n\t}\n\tpart context {\n\t\tpart interior {\n\t\t\tport safetyFeaturesPort: ~SafetyFeaturesPort;\n\t\t\tport securityFeaturesPort: ~SecurityFeaturesPort;\n\t\t\tperform manageFeatures.sendSafetyFeatures {\n\t\t\t\tout safetyFeatures = safetyFeaturesPort.safetyFeatures;\n\t\t\t}\n\t\t\tperform manageFeatures.sendSecurityFeatures {\n\t\t\t\tout securityFeatures = securityFeaturesPort.securityFeatures;\n\t\t\t}\n\t\t}\n\t\tpart bodyAssembly {\n\t\t\tport safetyFeaturesPort: ~SafetyFeaturesPort;\n\t\t\tport securityFeaturesPort: ~SecurityFeaturesPort;\n\t\t\tperform manageFeatures.receiveSafetyFeatures {\n\t\t\t\tin safetyFeatures = safetyFeaturesPort.safetyFeatures;\n\t\t\t}\n\t\t\tperform manageFeatures.receiveSecurityFeatures {\n\t\t\t\tin securityFeatures = securityFeaturesPort.securityFeatures;\n\t\t\t}\n",
    "package 'VehicleSimulation' {\n\tattribute def InitialVelocity;\n\tattribute def InitialPosition;\n\tattribute def AccelerationAtMoment;\n\tattribute def TimeStep;\n\tattribute def FinalVelocity;\n\tattribute def FinalPosition;\n\tport def InitialVelocityPort {\n\t\tout initialVelocity: InitialVelocity;\n\t}\n\tport def InitialPositionPort {\n\t\tout initialPosition: InitialPosition;\n\t}\n\tport def AccelerationAtMomentPort {\n\t\tout accelerationAtMoment: AccelerationAtMoment;\n\t}\n\tport def TimeStepPort {\n\t\tout timeStep: TimeStep;\n\t}\n\tport def FinalVelocityPort {\n\t\tout finalVelocity: FinalVelocity;\n\t}\n\tport def FinalPositionPort {\n\t\tout finalPosition: FinalPosition;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport initialVelocityPort: InitialVelocityPort;\n\t\t\tport initialPositionPort: InitialPositionPort;\n\t\t\tport accelerationAtMomentPort: AccelerationAtMomentPort;\n\t\t\tport timeStepPort: TimeStepPort;\n\t\t\tperform simulateVehicle.sendInputs {\n\t\t\t\tout initialVelocity = initialVelocityPort.initialVelocity;\n\t\t\t",
    "package 'CarSafetyModel' {\n\tpackage 'SafetyFeatures' {\n\t\tpackage 'MandatorySafetyFeatures' {\n\t\t\tpart seatBelt1 {\n\t\t\t\tattribute isSafetyRelevant = true;\n\t\t\t\tattribute isMandatory = true;\n\t\t\t}\n\t\t\tpart seatBelt2 {\n\t\t\t\tattribute isSafetyRelevant = true;\n\t\t\t\tattribute isMandatory = true;\n\t\t\t}\n\t\t\tpart bumper {\n\t\t\t\tattribute isSafetyRelevant = true;\n\t\t\t\tattribute isMandatory = true;\n\t\t\t}\n\t\t}\n\t\tpackage 'OptionalSafetyFeatures' {\n\t\t\tpart airbag {\n\t\t\t\tattribute isSafetyRelevant = true;\n\t\t\t\tattribute isMandatory = false;\n\t\t\t}\n\t\t\tpart keylessEntry {\n\t\t\t\tattribute isSafetyRelevant = true;\n\t\t\t\tattribute isMandatory = false;\n\t\t\t}\n\t\t}\n\t}\n\tpackage 'WheelAssembly' {\n\t\t",
    "package 'VehicleSafetyCompliance' {\n\tattribute def MandatorySafetyFeatures;\n\tattribute def OptionalSafetyFeatures;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport mandatorySafetyFeaturesPort: MandatorySafetyFeatures;\n\t\t\tport optionalSafetyFeaturesPort: OptionalSafetyFeatures;\n\t\t\tpart interior {\n\t\t\t\tpart seatBelts {\n\t\t\t\t\tport mandatorySafetyFeaturesPort: MandatorySafetyFeatures;\n\t\t\t\t}\n\t\t\t\tpart airbag {\n\t\t\t\t\tport optionalSafetyFeaturesPort: OptionalSafetyFeatures;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart body {\n\t\t\t\tpart bumper {\n\t\t\t\t\tport mandatorySafetyFeaturesPort: MandatorySafetyFeatures;\n\t\t\t\t}\n\t\t\t\tpart keylessEntry {\n\t\t\t\t\tport optionalSafetyFeaturesPort: OptionalSafetyFeatures;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart chassis {\n\t\t\t\tpart tires {\n\t\t\t\t\t// Number of tires is fixed\n\t\t\t\t}\n\t\t\t\tpart abs {\n\t\t\t\t\tport optionalSafetyFeaturesPort: OptionalSafetyFeatures;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}",
    "package 'RiskManagement' {\n\tattribute def Situation;\n\tattribute def Cause;\n\tattribute def Failure;\n\tattribute def Probability;\n\tattribute def Severity;\n\tport def SituationPort {\n\t\tout situation: Situation;\n\t}\n\tport def CausePort {\n\t\tout cause: Cause;\n\t}\n\tport def FailurePort {\n\t\tout failure: Failure;\n\t}\n\tport def ProbabilityPort {\n\t\tout probability: Probability;\n\t}\n\tport def SeverityPort {\n\t\tout severity: Severity;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport situationPort: SituationPort;\n\t\t\tport causePort: CausePort;\n\t\t\tport failurePort: FailurePort;\n\t\t\tport probabilityPort: ProbabilityPort;\n\t\t\tport severityPort: SeverityPort;\n\t\t\tperform analyzeRisk.recordSituation {\n\t\t\t\tout situation = situationPort.situation;\n\t\t\t\tout cause = causePort.cause;\n\t\t\t\tout failure = failurePort.failure;\n\t\t\t\tout probability = probabilityPort.probability;\n\t\t\t\tout severity = severityPort.severity;\n\t\t\t}\n\t",
    "package 'RiskMetadataModeling' {\n\tattribute def Scenario;\n\tattribute def Cause;\n\tattribute def Probability;\n\tattribute def FailureType;\n\tattribute def SeverityLevel;\n\tattribute def CausalRelationship;\n\tport def ScenarioPort {\n\t\tout scenario: Scenario;\n\t}\n\tport def CausePort {\n\t\tout cause: Cause;\n\t}\n\tport def ProbabilityPort {\n\t\tout probability: Probability;\n\t}\n\tport def FailureTypePort {\n\t\tout failureType: FailureType;\n\t}\n\tport def SeverityLevelPort {\n\t\tout severityLevel: SeverityLevel;\n\t}\n\tport def CausalRelationshipPort {\n\t\tout causalRelationship: CausalRelationship;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport scenarioPort: ScenarioPort;\n\t\t\tport causePort: CausePort;\n\t\t\tport probabilityPort: ProbabilityPort;\n\t\t\tport failureTypePort: FailureTypePort;\n\t\t\tport severityLevelPort: SeverityLevelPort;\n\t\t\tport causalRelationshipPort: CausalRelationshipPort;\n\t\t\tperform analyzeRisk.addScenario {\n\t\t\t\tout scenario =",
    "package 'EquipmentRiskAnalysis' {\n\tattribute def BatteryLevel;\n\tattribute def BatteryFailureProbability;\n\tattribute def LowBatteryThreshold;\n\tattribute def DeviceShutdown;\n\tattribute def SeverityLevel;\n\tport def BatteryLevelPort {\n\t\tin batteryLevel: BatteryLevel;\n\t}\n\tport def BatteryFailureProbabilityPort {\n\t\tin batteryFailureProbability: BatteryFailureProbability;\n\t}\n\tport def LowBatteryThresholdPort {\n\t\tin lowBatteryThreshold: LowBatteryThreshold;\n\t}\n\tport def DeviceShutdownPort {\n\t\tout deviceShutdown: DeviceShutdown;\n\t}\n\tport def SeverityLevelPort {\n\t\tout severityLevel: SeverityLevel;\n\t}\n\tpart context {\n\t\tpart equipment {\n\t\t\tport batteryLevelPort: BatteryLevelPort;\n\t\t\tport batteryFailureProbabilityPort: BatteryFailureProbabilityPort;\n\t\t\tperform analyzeBatteryStatus.monitorBatteryLevel {\n\t\t\t\tin batteryLevel =",
    "package 'SystemDecomposition' {\n\tattribute def Subsystem;\n\tattribute def Component;\n\tattribute def Interface;\n\tport def SubsystemPort {\n\t\tout subsystem: Subsystem;\n\t}\n\tport def ComponentPort {\n\t\tout component: Component;\n\t}\n\tport def InterfacePort {\n\t\tout interface: Interface;\n\t}\n\tpart context {\n\t\tpart system {\n\t\t\tport subsystemPort: SubsystemPort;\n\t\t\tperform decomposeSystem.createSubsystems {\n\t\t\t\tin subsystemPort.subsystem;\n\t\t\t}\n\t\t}\n\t\tinterface systemToDecomposition connect system.subsystemPort to decomposition.subsystemPort {\n\t\t\tref flow references decomposeSystem.subsystemFlow\n\t\t\t\tfrom source.subsystem to target.subsystem; \n\t\t}\n\t\tpart decomposition {\n\t\t\tport subsystemPort: ~SubsystemPort;\n\t\t\tperform decomposeSystem.defineComponents {\n\t\t\t\tin subsystemPort.subsystem;\n\t\t\t}\n\t\t\tport componentPort: ComponentPort;\n\t\t}\n\t\tpart component {\n\t\t\tport componentPort: ~ComponentPort;\n\t\t\tperform decomposeSystem.defineInterfaces {\n\t\t\t\tin componentPort",
    "package 'AutomotiveSystem' {\n\tattribute def FunctionalAspect;\n\tattribute def SafetyAspect;\n\tpart rootComponent {\n\t\tpart subComponent1 {\n\t\t\tpart subSubComponent1 {\n\t\t\t\tattribute def MandatorySafety;\n\t\t\t\tattribute def OptionalSafety;\n\t\t\t}\n\t\t}\n\t\tpart subComponent2 {\n\t\t\tpart subSubComponent2 {\n\t\t\t\tattribute def MandatorySafety;\n\t\t\t\tattribute def OptionalSafety;\n\t\t\t}\n\t\t}\n\t}\n\tport def FunctionalPort {\n\t\tout functionalAspect: FunctionalAspect;\n\t}\n\tport def SafetyPort {\n\t\tout safetyAspect: SafetyAspect;\n\t}\n\tpart context {\n\t\tpart system {\n\t\t\tport functionalPort: FunctionalPort;\n\t\t\tport safety",
    "package 'AutomotiveDomain' {\n\tattribute def Torque;\n\tattribute def Car;\n\tport def TorquePort {\n\t\tout torque: Torque;\n\t}\n\tport def CarPort {\n\t\tout car: Car;\n\t}\n\tpart context {\n\t\tpart developer {\n\t\t\tport torquePort: TorquePort;\n\t\t\tperform standardizeElements.sendTorque {\n\t\t\t\tout torque = torquePort.torque;\n\t\t\t}\n\t\t}\n\t\tinterface developerToSystem connect developer.torquePort to system.torquePort {\n\t\t\tref flow references standardizeElements.torqueFlow\n\t\t\t\tfrom source.torque to target.torque; \n\t\t}\n\t\tpart system {\n\t\t\tport torquePort: ~TorquePort;\n\t\t\tperform standardizeElements.produceCar {\n\t\t\t\tin torque = torquePort.torque;\n\t\t\t\tout car = carPort.car;\n\t\t\t}\n\t\t\tport carPort: CarPort ;\n\t\t}\n\t\tpart annotation {\n\t\t\tport carPort: ~CarPort;\n\t\t\tperform standardizeElements.annotateCar {\n\t\t\t\tin car =",
    "package 'AutomobileDocumentManagement' {\n\tattribute def AutomobileInfo;\n\tattribute def CarInfo;\n\tattribute def TorqueValue;\n\tport def AutomobileInfoPort {\n\t\tout automobileInfo: AutomobileInfo;\n\t}\n\tport def CarInfoPort {\n\t\tout carInfo: CarInfo;\n\t}\n\tport def TorqueValuePort {\n\t\tout torqueValue: TorqueValue;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport automobileInfoPort: AutomobileInfoPort;\n\t\t\tport carInfoPort: CarInfoPort;\n\t\t\tport torqueValuePort: TorqueValuePort;\n\t\t\tperform manageDocuments.sendAutomobileInfo {\n\t\t\t\tout automobileInfo = automobileInfoPort.automobileInfo;\n\t\t\t}\n\t\t\tperform manageDocuments.sendCarInfo {\n\t\t\t\tout carInfo = carInfoPort.carInfo;\n\t\t\t}\n\t\t\tperform manageDocuments.sendTorqueValue {\n\t\t\t\tout torqueValue = torqueValuePort.torqueValue;\n\t\t\t}\n\t\t}\n\t\tinterface userTo",
    "package 'AutomobileSystem' {\n\tattribute def Automobile;\n\tattribute def TorqueValue;\n\tport def AutomobilePort {\n\t\tout automobile: Automobile;\n\t}\n\tport def TorqueValuePort {\n\t\tout torqueValue: TorqueValue;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport automobilePort: AutomobilePort;\n\t\t\tperform manageAutomobile.sendAutomobile {\n\t\t\t\tout automobile = automobilePort.automobile;\n\t\t\t}\n\t\t}\n\t\tinterface userToAutomobile connect user.automobilePort to automobile.automobilePort {\n\t\t\tref flow references manageAutomobile.automobileFlow\n\t\t\t\tfrom source.automobile to target.automobile; \n\t\t}\n\t\tpart automobile {\n\t\t\tport automobilePort: ~AutomobilePort;\n\t\t\tperform manageAutomobile.manageTorque {\n\t\t\t\tin automobile = automobilePort.automobile;\n\t\t\t\tout torqueValue = torqueValuePort.torqueValue;\n\t\t\t}\n\t\t\tport torqueValuePort: TorqueValuePort ;\n\t\t}\n\t\tpart dataHandler {\n\t\t\tport torqueValuePort: ~Torque",
    "package 'VehicleSystem' {\n\tattribute def CylinderCount;\n\tattribute def VehicleSize;\n\tport def CylinderCountPort {\n\t\tout cylinderCount: CylinderCount;\n\t}\n\tport def VehicleSizePort {\n\t\tout vehicleSize: VehicleSize;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport cylinderCountPort: CylinderCountPort;\n\t\t\tperform configureEngine.setCylinderCount {\n\t\t\t\tin cylinderCount = cylinderCountPort.cylinderCount;\n\t\t\t}\n\t\t}\n\t\tinterface vehicleToEngine connect vehicle.cylinderCountPort to engine.cylinderCountPort {\n\t\t\tref flow references configureEngine.cylinderCountFlow\n\t\t\t\tfrom source.cylinderCount to target.cylinderCount; \n\t\t}\n\t\tpart engine {\n\t\t\tport cylinderCountPort: ~CylinderCountPort;\n\t\t\tperform configureEngine.selectCylinderCount {\n\t\t\t\tin cylinderCount = cylinderCountPort.cylinderCount;\n\t\t\t}\n\t\t}\n\t}\n\taction configureEngine {\n\t\taction setCylinderCount { in cylinderCount: CylinderCount; }\n\t\tsuccession flow cylinderCountFlow from setCylinder",
    "package 'FuelManagementSystem' {\n\tattribute def FuelFlowCmd;\n\tattribute def FuelTemp;\n\tport def FuelFlowCmdPort {\n\t\tout fuelFlowCmd : FuelFlowCmd;\n\t}\n\tport def FuelTempPort {\n\t\tout fuelTemp: FuelTemp;\n\t}\n\tpart context {\n\t\tpart fuelTank {\n\t\t\tport fuelFlowCmdPort: ~FuelFlowCmdPort;\n\t\t\tperform fuelDelivery.sendFuelFlowCmd {\n\t\t\t\tout fuelFlowCmd = fuelFlowCmdPort.fuelFlowCmd;\n\t\t\t}\n\t\t}\n\t\tinterface fuelTankToEngine connect fuelTank.fuelFlowCmdPort to engine.fuelFlowCmdPort {\n\t\t\tref flow references fuelDelivery.fuelFlowCmdFlow\n\t\t\t\tfrom source.fuelFlowCmd to target.fuelFlowCmd; \n\t\t}\n\t\tpart engine {\n\t\t\tport fuelFlowCmdPort: ~FuelFlowCmdPort;\n\t\t\tperform fuelDelivery.receiveFuelFlowCmd {\n\t\t\t\tin fuelFlowCmd = fuelFlowCmdPort.fuelFlowCmd;\n\t\t\t}\n\t\t}\n\t\tpart fuelManagement {\n\t\t\tport fuel",
    "package 'VehicleStructuralArchitecture' {\n\tattribute def VehicleMass;\n\tattribute def FrontAxleSteeringAngle;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tattribute VehicleMass;\n\t\t}\n\t\tpart axleAssembly {\n\t\t\tpart frontAxle {\n\t\t\t\tattribute FrontAxleSteeringAngle;\n\t\t\t\tpart wheel {\n\t\t\t\t\tpart leftWheel;\n\t\t\t\t\tpart rightWheel;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart rearAxle {\n\t\t\t\tpart wheel {\n\t\t\t\t\tpart leftWheel;\n\t\t\t\t\tpart rightWheel;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}"
]