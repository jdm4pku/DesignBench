[
    "System mySystem\n{\n    // Define the system properties, behaviors, and other elements here\n}\n\nPackage mySystem.Vehicles\n{\n    // Define vehicle elements here\n}\n\nPackage mySystem.Engines\n{\n    // Define engine elements here\n}\n\nPackage mySystem.Drivers\n{\n    // Define driver elements here\n}\n\nPackage mySystem.VehicleStatus\n{\n    // Define vehicle status elements here\n}\n\n// Define relationships between packages and elements\n```mySystem.Vehicles\n{\n    Vehicle v1\n    {\n        name = \"Vehicle 1\"\n        mass = 1500.0 kg\n        status = mySystem.VehicleStatus.VehicleStatus1\n        engine = mySystem.Engines.Engine1\n        driver = mySystem.Drivers.Driver1\n    }\n}\n\nmySystem.Engines\n{\n    Engine Engine1\n    {\n        name = \"Engine 1\"\n    }\n}\n\nmySystem.Drivers",
    "System mySystem\n{\n  // Define the two main categories of vehicles\n  Class Vehicle\n  {\n    // Define the two main categories of vehicles\n    Class ManualVehicle extends Vehicle\n    {\n      // Define the relationship between ManualVehicle and Personnel\n      ReferenceDriver : Personnel\n    }\n\n    Class PoweredVehicle extends Vehicle\n    {\n      // Define the relationship between PoweredVehicle and Engine\n      ReferenceEngine : Engine\n    }\n\n    // Define the manually operated powered vehicles\n    Class ManualPoweredVehicle extends Vehicle\n    {\n      // Define the relationship between ManualPoweredVehicle and Personnel\n      ReferenceDriver : Personnel\n\n      // Define the relationship between ManualPoweredVehicle and Engine\n      ReferenceEngine : Engine\n    }\n  }\n\n  // Define the Personnel entity\n  Class Personnel\n  {\n    // Define the relationship between Personnel and ManualVehicle\n    DriveManualVehicle : ManualVehicle[]\n\n    // Define the relationship between Personnel and ManualPoweredVehicle\n    DriveManualPoweredVehicle : ManualPoweredVehicle[]\n  }\n\n  // Define the Engine entity\n  Class Engine\n  {\n    // Define the relationship between Engine and Powered",
    "system Vehicle\n{\n  // Define the major components of the vehicle\n  majorComponent Engine\n  majorComponent Transmission\n  majorComponent Wheel\n  {\n    quantity 4\n  }\n\n  // Define the relationships between components\n  relationship VehicleComponent\n  {\n    source Engine\n    target Transmission\n    target Wheel\n  }\n}\n```extension VehicleExtension\n{\n  // Define additional components that can be added to the vehicle\n  optional Component additionalComponent\n}\n```extension VehicleComponentExtension\n{\n  // Define additional properties or behaviors for vehicle components\n  optional Property additionalProperty\n}\n```extension VehicleComponentExtension\n{\n  // Define additional properties or behaviors for vehicle components\n  optional Feature additionalFeature\n}\n```extension VehicleComponentExtension\n{\n  // Define additional properties or behaviors for vehicle components\n  optional Requirement additionalRequirement\n}\n```",
    "System mySystem\n{\n    // Define different types of vehicles\n    Package vehicleTypes\n    {\n        // Define small vehicles\n        Package smallVehicles\n        {\n            // Define small engine\n            Class smallEngine : Engine\n            {\n                // Define number of cylinders\n                Integer numberOfCylinders = 4;\n            }\n        }\n\n        // Define large vehicles\n        Package largeVehicles\n        {\n            // Define large engine\n            Class largeEngine : Engine\n            {\n                // Define number of cylinders\n                Integer numberOfCylinders = 6;\n            }\n        }\n    }\n\n    // Define engine component\n    Class Engine\n    {\n        // Define functional subsystem composed of cylinders\n        Package functionalSubsystem\n        {\n            // Define cylinders\n            Class Cylinder\n            {\n                // Define properties of cylinders\n                // (This can be expanded based on additional requirements)\n            }\n        }\n    }\n}\n```",
    "system TrafficSignalSystem\n{\n  // Define the traffic signal component\n  component TrafficSignal\n  {\n    // Define the color state of the traffic signal\n    property TrafficColor : String\n    {\n      defaultValue \"red\"\n      allowedValues [\"green\", \"yellow\", \"red\"]\n    }\n  }\n\n  // Define the specific traffic signal component that is always in the \"go\" state\n  component AlwaysGreenSignal\n  {\n    // Define the color state of the specific traffic signal component\n    property TrafficColor : String\n    {\n      defaultValue \"green\"\n      allowedValues [\"green\", \"yellow\", \"red\"]\n    }\n  }\n}\n```",
    "library MyLibrary\n\npackage SystemPackage\n{\n    package ClassificationPackage\n    {\n        // Define the classification levels\n        enum ClassificationLevel\n        {\n            Unclassified,\n            Confidential,\n            Secret\n        }\n\n        // Define the grade levels\n        enum GradeLevel\n        {\n            A,\n            B,\n            C,\n            D,\n            F\n        }\n\n        // Define the classification information\n        property ClassificationInfo : ClassificationLevel;\n\n        // Define the grade information\n        property GradeInfo : GradeLevel;\n    }\n}\n```",
    "system SmallVehicle\n{\n    // Define the engine for small vehicles\n    composedOf Engine\n    {\n        // Define the cylinders in the engine\n        composedOf Cylinder[4]\n        {\n            // Each cylinder has properties\n            property Integer numberOfCylinders = 4;\n        }\n    }\n}\n\nsystem LargeVehicle\n{\n    // Define the engine for large vehicles\n    composedOf Engine\n    {\n        // Define the cylinders in the engine\n        composedOf Cylinder[6]\n        {\n            // Each cylinder has properties\n            property Integer numberOfCylinders = 6;\n        }\n    }\n}\n```system Engine\n{\n    // Define the cylinders in the engine\n    composedOf Cylinder[4 to 6]\n    {\n        // Each cylinder has properties\n        property Integer numberOfCylinders;\n    }\n}\n```system Cylinder\n{\n    // Define properties of a cylinder\n    property Integer numberOfCylinders;\n}\n```",
    "SystemDefinition : System sysml_system\n{\n    System sysml_system\n    {\n        Name \"Vehicle Modeling System\"\n        Package package_1\n        {\n            Package package_2\n            {\n                Package package_3\n                {\n                    Package package_4\n                    {\n                        Package package_5\n                        {\n                            Package package_6\n                            {\n                                Package package_7\n                                {\n                                    Package package_8\n                                    {\n                                        Package package_9\n                                        {\n                                            Package package_10\n                                            {\n                                                Package package_11\n                                                {\n                                                    Package package_12\n                                                    {\n                                                        Package package_13\n                                                        {\n                                                            Package package_14\n                                                            {\n                                                                Package package_15\n                                                                {\n                                                                    Package package_16\n                                                                    {\n                                                                        Package package_17\n                                                                        {\n                                                                            Package package_18\n                                                                            {\n                                                                                Package package_19\n                                                                                {\n                                                                                    Package package_20\n                                                                                    {\n                                                                                        Package package_21\n                                                                                        {\n                                                                                            Package package_22\n                                                                                            {\n",
    "system WheelAssembly\n{\n    // Define components\n    component WheelBearingUnit\n    component Tire\n    component Bead\n    component Hub\n    component Rim\n    component BoltMountingHole\n    component ThreadedHole\n    component BoltConnection\n\n    // Define relationships\n    relationship connects\n    {\n        source WheelBearingUnit\n        target Tire\n        target Bead\n        target Hub\n        target Rim\n        target BoltMountingHole\n        target ThreadedHole\n        target BoltConnection\n    }\n\n    relationship seals\n    {\n        source Tire\n        target Bead\n        target Rim\n    }\n\n    relationship connectsThreadedHole\n    {\n        source ThreadedHole\n        target BoltConnection\n    }\n\n    relationship connectsBoltMountingHole\n    {\n        source BoltMountingHole\n        target BoltConnection\n    }\n}\n``````",
    "system FuelManagementSystem\n{\n    // Define components\n    component FuelTankAssembly\n    {\n        // Define ports\n        port FuelSupplyPort : FlowPort\n        port FuelReturnPort : FlowPort\n    }\n    component Engine\n    {\n        // Define ports\n        port FuelReceivePort : FlowPort\n    }\n\n    // Define interactions\n    interaction FuelTransferInteraction\n    {\n        sender : FuelTankAssembly.FuelSupplyPort\n        receiver : Engine.FuelReceivePort\n        message : FuelFlowMessage\n    }\n    interaction FuelReturnInteraction\n    {\n        sender : Engine.FuelReturnPort\n        receiver : FuelTankAssembly.FuelReturnPort\n        message : FuelFlowMessage\n    }\n    interaction TemperatureMonitoringInteraction\n    {\n        sender : FuelTankAssembly.FuelSupplyPort\n        receiver : Engine.FuelReceivePort\n        message : TemperatureMessage\n    }\n\n    // Define data types\n    data TemperatureMessage\n    {\n        temperature : Real\n    }\n    data FuelFlowMessage\n    {\n        flowRate : Real\n    }\n}\n```",
    "SystemDefinition : System sysml_model\n{\n  System sysml_model\n  {\n    Name \"Vehicle Configuration Model\"\n    Description \"This system is designed for modeling configuration variants of vehicles.\"\n\n    // Define core components\n    ComponentType core_components\n    {\n      Name \"Core Components\"\n      Description \"Includes the complete vehicle, front and rear axles, and tires.\"\n\n      // Define the complete vehicle\n      ComponentType complete_vehicle\n      {\n        Name \"Complete Vehicle\"\n        Description \"The core vehicle component.\"\n\n        // Define attributes\n        Attribute mass \"1750 kg\"\n      }\n\n      // Define the front axle\n      ComponentType front_axle\n      {\n        Name \"Front Axle\"\n        Description \"The front axle component.\"\n\n        // Define attributes\n        Attribute mass \"250 kg\"\n        Attribute tires \"Two ordered tires\"\n      }\n\n      // Define the rear axle\n      ComponentType rear_axle\n      {\n        Name \"Rear Axle\"\n        Description \"The rear axle component.\"\n\n        // Define attributes\n        Attribute mass",
    "system VehicleCouplingSystem\n{\n    // Define the system components\n    components Vehicle, Trailer, Hitch\n    {\n        // Define the relationships between components\n        Vehicle.Hitch -> Hitch\n        Trailer.Connector -> Hitch\n    }\n\n    // Define the interactions between components\n    interactions Connect, Disconnect\n    {\n        // Define the Connect interaction\n        Connect\n        {\n            participants Vehicle, Trailer\n            send Event.Start\n            receive Event.Complete\n        }\n\n        // Define the Disconnect interaction\n        Disconnect\n        {\n            participants Vehicle, Trailer\n            send Event.Start\n            receive Event.Complete\n        }\n    }\n}\n```system VehicleCouplingSystem\n{\n    // Define the system components\n    components Vehicle, Trailer, Hitch\n    {\n        // Define the relationships between components\n        Vehicle.Hitch -> Hitch\n        Trailer.Connector -> Hitch\n    }\n\n    // Define the interactions between components\n    interactions Connect, Disconnect\n    {\n        // Define the Connect interaction\n        Connect\n        {\n            participants Vehicle, Trailer\n            send Event.Start\n",
    "system VehiclePowerTransmissionSystem\n{\n    // Define the main components of the system\n    components\n    {\n        Engine engine;\n        Transmission transmission;\n        Clutch clutch;\n        Driveshaft driveshaft;\n        RearAxleAssembly rearAxleAssembly;\n        Wheel wheel;\n    }\n\n    // Define the interfaces for interaction with the road surface\n    interfaces\n    {\n        Port fuelCommandPort;\n        Port powerPort;\n        Port clutchPort;\n    }\n\n    // Define the relationships between components\n    relationships\n    {\n        engine.fuelCommandPort -> fuelCommandPort;\n        engine.powerPort -> transmission.powerInPort;\n        engine.clutchPort -> clutch.clutchPort;\n        transmission.powerOutPort -> driveshaft.powerInPort;\n        driveshaft.powerOutPort -> rearAxleAssembly.powerInPort;\n        rearAxleAssembly.leftWheelOutPort -> wheel.leftWheelInPort;\n        rearAxleAssembly.rightWheelOutPort -> wheel.rightWheelInPort;\n    }\n}\n```package",
    "System mySystem {\n  System b11 {\n    Component c1 {\n      Port pb;\n    }\n    Component c2 {\n      Port pe;\n    }\n    c1.pb -> c2.pe;\n  }\n  System b12 {\n    Component c3 {\n      Port pd;\n    }\n    Component c4 {\n      Port pf;\n    }\n    c3.pd -> c4.pf;\n  }\n}\n\nSystem b21 {\n  Component c1;\n  Component c2;\n  c1 -> c2;\n}\n\nSystem b22 {\n  Component c3;\n  Component c4;\n  c3 -> c4;\n}\n\nb21.c1 = b11.c1;\nb21.c2 = b11.c2;\nb22.c3 = b12.c3;\nb22.c4 = b12.c4;\n```",
    "system PowertrainSystem\n{\n    // Define system properties, interfaces, and behaviors here\n}\n```package Automotive\n{\n    system PowertrainSystem\n    {\n        // Define system properties, interfaces, and behaviors here\n    }\n}\n```package Automotive\n{\n    package Powertrain\n    {\n        system PowertrainSystem\n        {\n            // Define system properties, interfaces, and behaviors here\n        }\n    }\n}\n```package Automotive\n{\n    package Powertrain\n    {\n        system PowertrainSystem\n        {\n            input Port fuelCommand;\n            output Port engineStartStopControl;\n            output Port powerTransmissionDistribution;\n            output Port powerOutput;\n            output Port engineTorque;\n            output Port vehicleDrivingForce;\n            output Port engineShutdown;\n\n            // Define system properties, interfaces, and behaviors here\n        }\n    }\n}\n```package Automotive\n{\n    package Powertrain\n    {\n        system PowertrainSystem\n        {\n           ",
    "system PowertrainControlSystem\n{\n  // Define system properties, functions, and other relevant aspects here\n}\n```package PowertrainControlSystem\n{\n  // Define package contents here\n}\n```package PowertrainControlSystem\n{\n  system PowertrainControlSystem\n  {\n    // Define system properties, functions, and other relevant aspects here\n  }\n}\n```package PowertrainControlSystem\n{\n  system PowertrainControlSystem\n  {\n    // Define system properties, functions, and other relevant aspects here\n  }\n}\n\npackage PowertrainControlSystem\n{\n  // Define additional packages or elements as necessary\n}\n```package PowertrainControlSystem\n{\n  system PowertrainControlSystem\n  {\n    // Define system properties, functions, and other relevant aspects here\n  }\n}\n\npackage PowertrainControlSystem\n{\n  // Define additional packages or elements as necessary\n}\n\npackage PowertrainControlSystem\n{\n  // Define additional packages or elements as",
    "system VehiclePowertrainSystem\n{\n    // Define the system elements\n    flowSource EngineStartSignal\n    flowSource EngineShutdownSignal\n    flowSource FuelCommand\n    flow FuelOutput\n    flow TransmissionOutput\n    flow WheelOutput\n\n    // Define the system flows\n    flow EngineOutputTorque\n    flow TransmissionInputTorque\n    flow TransmissionOutputTorque\n    flow WheelInputTorque\n    flow WheelOutputTorque\n\n    // Define the system interactions\n    FlowEngineOutputTorqueToFuelOutput : EngineOutputTorque -> FuelOutput\n    FlowFuelOutputToEngineOutputTorque : FuelOutput -> EngineOutputTorque\n    FlowEngineOutputTorqueToTransmissionInputTorque : EngineOutputTorque -> TransmissionInputTorque\n    FlowTransmissionInputTorqueToTransmissionOutputTorque : TransmissionInputTorque -> TransmissionOutputTorque\n    FlowTransmissionOutputTorqueToWheelInputTorque : TransmissionOutputTorque -> WheelInputTorque\n    FlowWheelInputTorqueToWheelOutputTorque : WheelInputTorque -> WheelOutputTorque\n\n    // Define the system components\n    component Engine\n    {\n        provides Engine",
    "system PowerConnectionSystem\n{\n  // Define the vehicle and trailer\n  ownedElement Vehicle\n  {\n    // Define the vehicle's structural frame\n    StructuralFrame vehicleFrame\n    {\n      // Define the hitch ball\n      ownedElement HitchBall\n    }\n  }\n  ownedElement Trailer\n  {\n    // Define the trailer's structural frame\n    StructuralFrame trailerFrame\n    {\n      // Define the trailer coupler\n      ownedElement TrailerCoupler\n    }\n  }\n\n  // Define the hitching mechanism\n  ownedElement HitchingMechanism\n  {\n    // Define the connection and disconnection actions\n    action Connect\n    {\n      // Define the preconditions for connecting\n      preCondition PreCondition\n      {\n        // Define the condition for the hitch ball to be in position\n        StructuralFrame vehicleFrame.HitchBall.isInPosition\n      }\n      // Define the effect of connecting\n      effect Effect\n      {\n        // Define the trailer coupler to be connected to the hitch ball\n        TrailerCoupler.isConnectedTo = StructuralFrame.HitchBall\n      }\n    }\n    action Dis",
    "system VehicleTrailerManagementSystem\n{\n  // Define the components of the system\n  components\n  {\n    Vehicle\n    {\n      // Define the parts of the vehicle\n      parts\n      {\n        Chassis\n        {\n          // Define the features of the chassis\n          features\n          {\n            TowBall\n          }\n        }\n      }\n    }\n    Trailer\n    {\n      // Define the parts of the trailer\n      parts\n      {\n        TrailerFrame\n        {\n          // Define the features of the trailer frame\n          features\n          {\n            Coupler\n          }\n        }\n      }\n    }\n  }\n\n  // Define the interactions between the components\n  interactions\n  {\n    // Define the connection status between the vehicle and the trailer\n    ConnectionStatus\n    {\n      // Define the source and target of the interaction\n      source Vehicle.Chassis.TowBall\n      target Trailer.TrailerFrame.Coupler\n\n      // Define the behavior of the interaction\n      behavior\n      {\n        // Define the operations for connecting and disconnecting\n        operations\n        {\n          Connect\n          {",
    "system Vehicle\n{\n  // Define the vehicle's components and their interactions\n  components\n  {\n    Chassis chassis;\n    TowBall towBall;\n  }\n\n  // Define the vehicle's behaviors and interactions\n  behaviors\n  {\n    // Behavior for connecting the trailer\n    connectTrailer()\n    {\n      // Code to engage the coupler mechanism with the tow ball\n    }\n\n    // Behavior for disconnecting the trailer\n    disconnectTrailer()\n    {\n      // Code to disengage the coupler mechanism from the tow ball\n    }\n  }\n}\n\nsystem Trailer\n{\n  // Define the trailer's components and their interactions\n  components\n  {\n    TrailerChassis trailerChassis;\n    Coupler coupler;\n  }\n\n  // Define the trailer's behaviors and interactions\n  behaviors\n  {\n    // Behavior for engaging the coupler with the tow ball\n    engageCoupler()\n    {\n      // Code to securely latch the coupler onto the tow ball\n    }\n\n    // Behavior for disengaging the coupler from the tow ball\n    dis",
    "SystemDefinition : System sysml_system_1\n{\n    System sysml_system_1\n    {\n        Name \"Fuel System\"\n        Description \"This system describes the fuel system of motor vehicles, including the fuel supply and return process between the fuel tank assembly and the engine.\"\n\n        // Define components\n        Component fuel_tank\n        {\n            Name \"Fuel Tank\"\n            Description \"The fuel tank provides fuel to the engine.\"\n\n            // Define ports\n            Port fuel_supply_port\n            {\n                Name \"Fuel Supply Port\"\n                Description \"The fuel tank is capable of providing fuel to the engine.\"\n            }\n\n            Port fuel_return_port\n            {\n                Name \"Fuel Return Port\"\n                Description \"The engine can return a portion of the fuel to the fuel tank.\"\n            }\n        }\n\n        Component engine\n        {\n            Name \"Engine\"\n            Description \"The engine consumes fuel.\"\n\n            // Define ports\n            Port fuel_consumption_port\n            {\n                Name \"Fuel Consumption Port\"\n                Description \"The engine consumes fuel.\"\n           ",
    "system FuelDeliverySystem\n{\n    // Define components\n    component StorageTank\n    {\n        // Define properties\n        property FuelCapacity : Integer\n        property CurrentFuelLevel : Integer\n    }\n    component FuelPump\n    {\n        // Define properties\n        property FlowRate : Real\n    }\n    component VehicleFuelTank\n    {\n        // Define properties\n        property MaxCapacity : Integer\n        property CurrentFuelLevel : Integer\n    }\n\n    // Define relationships\n    relationship connects : StorageTank -> FuelPump\n    relationship receives : FuelPump -> VehicleFuelTank\n}\n```",
    "system MyAutomobileAssemblyModel\n{\n  // Define the system elements\n  components\n  {\n    // Define the vehicle assembly\n    VehicleAssembly : Assembly\n    {\n      // Define the initial state of the vehicle assembly without gearbox and engine\n      initialState VehicleWithoutGearboxAndEngine\n      {\n        // Define the initial state of the vehicle assembly without gearbox and engine\n      }\n\n      // Define the state after installing the gearbox\n      State InstalledGearbox : State\n      {\n        // Define the inputs and outputs for installing the gearbox\n        input Gearbox : Gearbox\n        output VehicleWithGearbox : Vehicle\n      }\n\n      // Define the state after installing the engine\n      State InstalledEngine : State\n      {\n        // Define the inputs and outputs for installing the engine\n        input Engine : Engine\n        output FullyAssembledVehicle : Vehicle\n      }\n    }\n\n    // Define the gearbox component\n    Gearbox : Gearbox\n    {\n      // Define the properties of the gearbox\n    }\n\n    // Define the engine component\n    Engine : Engine\n    {\n      // Define the properties of the engine\n    }\n\n",
    "System VehicleA\n{\n  // Define system properties, requirements, and other elements as needed\n}\n```Package VehicleA\n{\n  Package MainControl\n  {\n    StateMachine VehicleControlSM\n    {\n      State Off\n      {\n        Transition\n        {\n          Trigger brakePedalPressed and startSignalReceived\n          Target Starting\n        }\n      }\n      State Starting\n      {\n        Transition\n        {\n          Trigger vehicleOnSignal\n          Target Running\n        }\n      }\n      State Running\n      {\n        Transition\n        {\n          Trigger selfCheckComplete\n          Target HealthManagement\n        }\n      }\n      State HealthManagement\n      {\n        Transition\n        {\n          Trigger temperatureExceedsThreshold\n          Target Degraded\n        }\n      }\n      State Degraded\n      {\n        Transition\n        {\n          Trigger restoreToNormalSignal\n          Target Normal\n        }\n      }\n      State Normal\n      {\n        // No transitions in this state as it is a normal operating state\n      }\n    }\n  }\n\n  Package HealthMonitoring\n ",
    "System mySystem\n{\n  // Define the components\n  Component vehicle\n  {\n    // Define the properties\n    Property brakePedalPressed : Boolean\n    Property startSignalReceived : Boolean\n    Property temperature : Real\n    Property vehicleStatus : String\n    Property fuel : String\n    Property maintenanceIntervals : Integer\n    Property temperatureThresholds : Real\n\n    // Define the operations\n    Operation selfInspection()\n    Operation powerSupply()\n    Operation sendWarningSignal()\n    Operation switchToDegradedMode()\n    Operation regularMaintenance()\n    Operation faultRecovery()\n  }\n\n  Component vehicleController\n  {\n    // Define the properties\n    Property controlSignals : String[]\n    Property statusSignals : String[]\n\n    // Define the operations\n    Operation receiveControlSignals()\n    Operation processControlSignals()\n    Operation sendControlCommands()\n  }\n\n  // Define the relationships\n  Relationship vehicleController_vehicle\n  {\n    source vehicle\n    target vehicleController\n    label provides\n  }\n\n  // Define the interactions\n  Interaction startUpProcess\n  {\n    Participant vehicle\n    Participant",
    "System mySystem\n{\n  // Define the system elements and interactions\n}\n```Package mySystem\n{\n  // Define the system elements and interactions\n}\n```Package mySystem\n{\n  Package mySystemElements\n  {\n    // Define vehicle elements\n  }\n}\n```Package mySystem\n{\n  Package mySystemElements\n  {\n    Package myVehicles\n    {\n      // Define specific vehicle types\n    }\n  }\n}\n```Package mySystem\n{\n  Package mySystemElements\n  {\n    Package myVehicles\n    {\n      Class Vehicle\n      {\n        // Define vehicle properties\n      }\n    }\n  }\n}\n```Package mySystem\n{\n  Package mySystemElements\n  {\n    Package myVehicles\n    {\n      Class Vehicle\n      {\n        Attribute mass : Real\n        Attribute position : Real\n        Attribute velocity : Real\n        Attribute acceleration : Real\n      }\n    }\n  }\n}",
    "system ConfigurationManagementSystem\n{\n    // Define the main system\n    mainSystem Automobile\n    {\n        // Define the subsystems\n        ownedAttribute Subsystems : Subsystem[2]\n        {\n            // Subsystem A\n            ownedAttribute SubsystemA : Subsystem\n            {\n                // Define the configurations for Subsystem A\n                ownedAttribute ConfigurationsA : ConfigurationOption[2]\n                {\n                    // Configuration 1: Component 1 and Component 2\n                    ConfigurationOption Configuration1\n                    {\n                        ownedAttribute Components : Component[2]\n                        {\n                            Component Component1\n                            Component Component2\n                        }\n                    }\n                    // Configuration 2: Component 2 and Component 3\n                    ConfigurationOption Configuration2\n                    {\n                        ownedAttribute Components : Component[2]\n                        {\n                            Component Component2\n                            Component Component3\n                        }\n                    }\n                }\n            }\n            // Subsystem B\n            ownedAttribute SubsystemB : Subsystem\n            {\n                // Define the configurations for Subsystem B\n                ownedAttribute ConfigurationsB : ConfigurationOption[2]\n                {\n                    // Configuration 1: Component 4 and Component 5\n                    Configuration",
    "System mySystem {\n  // Define components and subsystems\n  Component part1;\n  Component part2;\n  Component part3 {\n    Port p1;\n  }\n  Component part4;\n  Component part5 {\n    Port p2;\n    Variant v1;\n    Variant v2;\n  }\n  Component part6;\n  Subsystem SubsystemA {\n    Component part4;\n    Component part5;\n    Port p1;\n    Port p2;\n  }\n  Subsystem SubsystemB {\n    Component part1;\n    Component part2;\n    Component part3 {\n      Port p1;\n    }\n    Component part6;\n    Port p1;\n  }\n\n  // Define configuration schemes\n  ConfigurationScheme VehicleConfigA {\n    Subsystem SubsystemA;\n    Subsystem SubsystemB;\n  }\n  ConfigurationScheme VehicleConfigB {\n    Subsystem SubsystemA;\n    Subsystem SubsystemB;\n  }\n\n  // Define system-level constraints\n  Constraint systemConstraints {\n    SubsystemA.part4 == SubsystemB.part3;\n    SubsystemA.part5 == SubsystemB.",
    "System mySystem\n{\n    // Define the system elements\n    // Define the system properties\n    // Define the system interactions\n}\n```System mySystem\n{\n    // Define the system elements\n    elements\n    {\n        // Define the engine elements\n        // Define the transmission elements\n        // Define the wheel elements\n        // Define the configuration elements\n    }\n\n    // Define the system properties\n    properties\n    {\n        // Define the performance requirements\n        // Define the user preferences\n        // Define the configuration constraints\n    }\n\n    // Define the system interactions\n    interactions\n    {\n        // Define the configuration logic\n        // Define the compatibility checks\n    }\n}\n```System mySystem\n{\n    // Define the system elements\n    elements\n    {\n        // Define the engine elements\n        Engine engine\n        {\n            // Define the engine properties\n            properties\n            {\n                // Define the engine types\n                type = { 4Cylinder, 6Cylinder }\n            }\n        }\n\n        // Define the transmission elements\n        Transmission transmission\n       ",
    "System mySystem\n{\n  Name = \"Automobile Specification and Management System\"\n  Description = \"This system defines and manages the primary specifications and performance requirements related to automobiles.\"\n\n  // Define components\n  Component vehicle\n  {\n    Name = \"Vehicle\"\n    Description = \"Represents a vehicle with its specifications and performance requirements.\"\n\n    // Define properties\n    Property massGrade\n    {\n      Name = \"Mass Grade\"\n      Description = \"Defines the mass grade of the vehicle.\"\n      ValueType = Integer\n      AllowedValues = [2000, 2500]\n    }\n\n    Property fuelStatus\n    {\n      Name = \"Fuel Status\"\n      Description = \"Regulates the fuel status of the vehicle.\"\n      ValueType = String\n      AllowedValues = [\"Fully Fuelled\", \"Empty Fuel\"]\n    }\n\n    // Define interfaces\n    Interface powertrainInterface\n    {\n      Name = \"Powertrain Interface\"\n      Description = \"Ensures power delivery functionality.\"\n\n      // Define requirements\n      Requirement powerOutput\n      {\n        Name = \"Power",
    "System {\n  Name = \"Vehicle Mass Verification System\"\n  Identifier = \"VMVS\"\n  Package {\n    Package {\n      Name = \"Vehicle Mass Verification\"\n      Identifier = \"VMV\"\n      Component {\n        Name = \"Weighing Equipment\"\n        Identifier = \"WE\"\n        Property {\n          Name = \"MaxPermissibleMass\"\n          Value = 2500\n          Unit = \"kilogram\"\n        }\n      }\n      Component {\n        Name = \"Test Operator\"\n        Identifier = \"TO\"\n      }\n      Component {\n        Name = \"Vehicle Compliance Determination\"\n        Identifier = \"VCD\"\n        Property {\n          Name = \"MaxPermissibleMass\"\n          Value = 2500\n          Unit = \"kilogram\"\n        }\n      }\n    }\n  }\n}\n```System {\n  Name = \"Vehicle Mass Verification System\"\n  Identifier = \"VMVS\"\n  Package {\n    Package {\n      Name = \"Vehicle Mass Verification\"\n      Identifier = \"VMV\"\n      Component",
    "System mySystem\n{\n  // Define the main supply pipe\n  FlowSource SpigotBank\n  {\n    // Define the interfaces for hot and cold water\n    FlowPort HotWaterSpigot\n    FlowPort ColdWaterSpigot\n  }\n\n  // Define the faucets\n  FlowTarget Faucet\n  {\n    // Define the hot and cold water inlets for each faucet\n    FlowPort FaucetInletHot\n    FlowPort FaucetInletCold\n  }\n\n  // Establish the connections between the spigot bank and the faucets\n  Flow myFlow\n  {\n    source = SpigotBank.HotWaterSpigot\n    target = Faucet.FaucetInletHot\n  }\n  Flow myFlow2\n  {\n    source = SpigotBank.ColdWaterSpigot\n    target = Faucet.FaucetInletCold\n  }\n}\n``````",
    "system VehicleQualityModel\n{\n  // Define the system and its components\n  system Vehicle\n  {\n    // Define the components of the vehicle\n    system Engine\n    system Transmission\n    system FrontAxleAssembly\n    system RearAxleAssembly\n\n    // Define the relationships between components\n    relates Engine to Vehicle\n    relates Transmission to Vehicle\n    relates FrontAxleAssembly to Vehicle\n    relates RearAxleAssembly to Vehicle\n  }\n\n  // Define the data inputs for the system\n  data InputData\n  {\n    // Define the data for each component\n    data QualityData\n    {\n      // Define the quality data for the engine\n      data EngineQualityData\n      {\n        // Define the properties of the engine quality data\n        string EngineModel\n        string EngineManufacturer\n        real EngineMass\n      }\n\n      // Define the quality data for the transmission\n      data TransmissionQualityData\n      {\n        // Define the properties of the transmission quality data\n        string TransmissionModel\n        string TransmissionManufacturer\n        real TransmissionMass\n      }\n\n      // Define the quality data for the front axle assembly\n",
    "SystemDefinition : System sysml_system\n{\n    Name : \"Vehicle Powertrain Configuration System\"\n    Description : \"This system aims to provide optimal solutions for vehicle powertrain configuration, focusing primarily on the trade-off analysis of engine types to select the engine configuration that performs best across multiple key performance indicators, including power, mass, efficiency, reliability, and cost.\"\n    SystemPart : sysml_system_part\n    {\n        Name : \"Engine Configuration Module\"\n        Description : \"This module is responsible for modeling various engine structures and performing a multi-attribute trade-off analysis.\"\n        System : sysml_system\n        {\n            SystemPart : engine_modeling_part\n            {\n                Name : \"Engine Modeling\"\n                Description : \"This part supports modeling of various engine structures (such as four-cylinder engines, six-cylinder engines, etc.).\"\n                SystemElement : engine_type\n                {\n                    Name : \"Engine Type\"\n                    Description : \"Represents different types of engines, such as four-cylinder, six-cylinder, etc.\"\n                    Property : num_cylinders\n                    {\n                        Name : \"Number of Cylinders",
    "system FuelEconomySystem\n{\n    // Define the system requirements\n    requirement FuelEconomyRequirement\n    {\n        title \"Fuel Economy Requirements\"\n        description \"Ensure vehicle fuel economy meets relevant regulatory and performance requirements.\"\n        target System\n        applies to FuelEconomySystem\n\n        // Define the requirements for urban driving conditions\n        requirement UrbanFuelEconomyRequirement\n        {\n            title \"Urban Fuel Economy Requirement\"\n            description \"Under urban driving conditions, the vehicle’s range per gallon must not be less than 25 miles.\"\n            target System\n            applies to FuelEconomySystem\n            specification\n            {\n                value 25\n                units \"miles per US gallon\"\n            }\n        }\n\n        // Define the requirements for highway driving conditions\n        requirement HighwayFuelEconomyRequirement\n        {\n            title \"Highway Fuel Economy Requirement\"\n            description \"Under highway conditions, the vehicle’s range per gallon must not be less than 30 miles.\"\n            target System\n            applies to FuelEconomySystem\n            specification\n            {\n                value 30\n                units \"miles per US gallon\"\n",
    "system VehicleSimulation\n{\n  // Define the system's properties, behaviors, and interactions\n  // ...\n}\n```package VehicleSimulationPackage\n{\n  system VehicleSimulation\n  {\n    // Define the system's properties, behaviors, and interactions\n    // ...\n  }\n}\n```package VehicleSimulationPackage\n{\n  system VehicleSimulation\n  {\n    // Define the system's properties, behaviors, and interactions\n    // ...\n  }\n}\n\npackage VehicleSimulationPackage\n{\n  system VehicleSimulation\n  {\n    // Define the system's properties, behaviors, and interactions\n    // ...\n  }\n}\n```package VehicleSimulationPackage\n{\n  system VehicleSimulation\n  {\n    // Define the system's properties, behaviors, and interactions\n    // ...\n  }\n}\n\npackage VehicleSimulationPackage\n{\n  system VehicleSimulation\n  {\n    // Define the system's properties, behaviors, and interactions\n   ",
    "system Vehicle\n{\n    type System\n    mass 2500 kg\n    ownedElement [\n        FrontAxleAssembly\n        RearAxleAssembly\n    ]\n}\n\nsystem FrontAxleAssembly\n{\n    type System\n    mass 150 kg\n    ownedElement [\n        FrontAxle\n        FrontWheel1\n        FrontWheel2\n    ]\n}\n\nsystem RearAxleAssembly\n{\n    type System\n    mass 250 kg\n    ownedElement [\n        RearAxle\n        RearWheel1\n        RearWheel2\n    ]\n}\n\nsystem FrontAxle\n{\n    type System\n    mass 0 kg\n    property [\n        mass 0 kg\n        name \"Steering Angle\"\n        type Real\n    ]\n}\n\nsystem FrontWheel1\n{\n    type System\n    mass 0 kg\n}\n\nsystem FrontWheel2\n{\n    type System\n    mass 0 kg\n}\n\nsystem RearAxle\n{\n    type System\n    mass 0 kg\n}\n\nsystem RearWheel1\n{\n    type System\n   ",
    "system VehicleSafetySecurityManagement\n{\n  // Define system elements\n  components\n  {\n    // Mandatory safety features\n    component SeatBelts\n    {\n      // Define properties or behaviors\n    }\n    component Bumpers\n    {\n      // Define properties or behaviors\n    }\n\n    // Optional safety features\n    component Airbags\n    {\n      // Define properties or behaviors\n    }\n    component AntiLockBrakingSystems\n    {\n      // Define properties or behaviors\n    }\n\n    // Security devices\n    component AlarmDevices\n    {\n      // Define properties or behaviors\n    }\n    component KeylessEntrySystems\n    {\n      // Define properties or behaviors\n    }\n  }\n\n  // Define relationships\n  relationships\n  {\n    // Relationships between components and features\n    uses SeatBelts in VehicleSafetySecurityManagement\n    uses Bumpers in VehicleSafetySecurityManagement\n    uses Airbags in VehicleSafetySecurityManagement\n    uses AntiLockBrakingSystems in VehicleSafetySecurityManagement\n    uses AlarmDevices in VehicleSafetySecurityManagement\n    uses KeylessEntrySystems in VehicleSafetySecurityManagement\n\n    // Relationships for safety",
    "System mySystem {\n  // Define layers\n  Layer appLayer {\n    // Define dependencies\n    appLayer -> serviceLayer;\n    serviceLayer -> dataLayer;\n  }\n\n  // Define core attributes\n  Property mySystem.x;\n  Property mySystem.y;\n  Property mySystem.z;\n\n  // Define relationships\n  Dependency mySystem.z on mySystem.x and mySystem.y;\n}\n```",
    "plantuml\n@startuml\n!define RECTANGLE class\n!define DIAMOND decision\n!define LINELINE line\n\nRECTANGLE System\nRECTANGLE Powertrain\nRECTANGLE Engine\nRECTANGLE TorqueGenerator\n\nSystem \"includes\" Powertrain\nPowertrain \"includes\" Engine\nEngine \"includes\" TorqueGenerator\n\nRECTANGLE LogicLayer\nRECTANGLE PhysicalLayer\n\nSystem \"includes\" LogicLayer\nSystem \"includes\" PhysicalLayer\n\nLogicLayer \"maps\" TorqueGenerator\nPhysicalLayer \"includes\" TorqueGenerator\n\nTorqueGenerator --[>] Engine : generates torque\n\nTorqueGenerator : produces > 0 Nm\n\n@enduml\n```plantuml\n@startuml\n!define RECTANGLE class\n!define DIAMOND decision\n!define LINELINE line\n\nRECTANGLE System\nRECTANGLE Powertrain\nRECTANGLE Engine\nRECTANGLE TorqueGenerator\n\nSystem \"includes\" Powertrain\nPowertrain \"includes\" Engine\nEngine \"includes\" TorqueGenerator\n\nRECTANGLE LogicLayer\n",
    "plantuml\n@startuml\n!define RECTANGLE class\n!define DIAMOND decision\n!define LINELINE :\n!define LINE :\n\nRECTANGLE System\nRECTANGLE Powertrain\nRECTANGLE Engine\nRECTANGLE TorqueGenerator\n\nSystem \"1\" *-- \"1\" Powertrain : contains\nPowertrain \"1\" *-- \"1\" Engine : contains\nPowertrain \"1\" *-- \"1\" TorqueGenerator : contains\n\nRECTANGLE PowerTransmitter\nRECTANGLE PowerOutput\n\nPowertrain \"1\" *-- \"1\" PowerTransmitter : contains\nPowerTransmitter \"1\" *-- \"1\" PowerOutput : contains\n\n@enduml\n```plantuml\n@startuml\n!define RECTANGLE class\n!define DIAMOND decision\n!define LINELINE :\n!define LINE :\n\nRECTANGLE System\nRECTANGLE Powertrain\nRECTANGLE Engine\nRECTANGLE TorqueGenerator\n\nSystem \"1\" *-- \"1\" Powertrain : contains\nPowertrain \"1",
    "System myVehicleSafetyAndAntiTheftFunctionCatalogue\n{\n  // Define the system elements\n  Component myVehicleBody\n  {\n    // Define the components within the vehicle body\n    Component myFrontSeatBelts\n    {\n      // Define properties or behaviors\n    }\n    Component myBumpers\n    {\n      // Define properties or behaviors\n    }\n    // Other components...\n  }\n  Component mySafetyComponents\n  {\n    // Define safety components\n    Component myDriverAirbag\n    {\n      // Define properties or behaviors\n    }\n    Component myAntiLockBrakingSystem\n    {\n      // Define properties or behaviors\n    }\n    // Other safety components...\n  }\n  Component mySecurityComponents\n  {\n    // Define security components\n    Component myAlarmSystem\n    {\n      // Define properties or behaviors\n    }\n    Component myKeylessEntrySystem\n    {\n      // Define properties or behaviors\n    }\n    // Other security components...\n  }\n  // Define relationships between components\n  Relationship affectsSafety\n  {\n    source myVehicleBody\n    target mySafetyComponents\n ",
    "SystemDefinition : System sysml_system_1\n{\n    System sysml_system_1\n    {\n        Name \"Fuel Supply and Return Management System\"\n        Description \"This system is designed to provide complete fuel supply and return management functions for vehicles.\"\n\n        // Define components\n        Component fuel_tank_assembly\n        {\n            Name \"Fuel Tank Assembly\"\n            Description \"Integrates both the fuel pump and the fuel tank.\"\n\n            // Define connectors\n            Connector fuel_pump\n            {\n                Name \"Fuel Pump\"\n                Description \"Pressurizes fuel from the tank and delivers it to various fuel-consuming units.\"\n            }\n\n            Connector fuel_tank\n            {\n                Name \"Fuel Tank\"\n                Description \"Stores fuel for the vehicle.\"\n            }\n\n            Connector return_line\n            {\n                Name \"Return Line\"\n                Description \"Allows unused fuel to return to the tank.\"\n            }\n        }\n\n        // Define interactions\n        Interaction monitor_fuel_temperature\n        {\n            Name \"Monitor Fuel Temperature\"\n            Description \"Monitors and transmits real-time fuel",
    "System mySystem\n{\n    // Define components\n    Component seatBelt1\n    {\n        // Define properties\n        Property isMandatory = true\n    }\n    Component seatBelt2\n    {\n        // Define properties\n        Property isMandatory = true\n    }\n    Component airbag\n    {\n        // Define properties\n        Property isMandatory = false\n    }\n    Component antiTheftAlarm\n    {\n        // Define properties\n    }\n    Component bumper\n    {\n        // Define properties\n        Property isMandatory = true\n    }\n    Component keylessEntrySystem\n    {\n        // Define properties\n        Property isMandatory = true\n    }\n    Component wheel1\n    {\n        // Define properties\n    }\n    Component wheel2\n    {\n        // Define properties\n    }\n    Component antiLockBrakingSystem1\n    {\n        // Define properties\n    }\n    Component antiLockBrakingSystem2\n    {\n        // Define properties\n    }\n\n    // Define interactions\n    Interaction manageSafetySecurity\n    {\n        // Define participants\n        Participant system\n        Participant regulatory",
    "System {\n  name VehicleSafetyAndSecurity\n  ownedElement [\n    Part {\n      name Interior\n      ownedElement [\n        Feature {\n          name AlarmSystem\n        }\n        Feature {\n          name SeatBelts\n        }\n        Feature {\n          name FrontRowSeats\n        }\n        Feature {\n          name DriverAirbag\n        }\n      ]\n    }\n    Part {\n      name BodyAssembly\n      ownedElement [\n        Feature {\n          name VehicleBody\n        }\n        Feature {\n          name Bumper\n        }\n        Feature {\n          name KeylessEntrySystem\n        }\n      ]\n    }\n  ]\n}\n``````",
    "System mySystem\n{\n  Component myComponent\n  {\n    SecurityClassification securityClassification\n    {\n      ClassificationLevel \"Unclassified\"\n    }\n  }\n}\n```System mySystem\n{\n  Component myComponent\n  {\n    SecurityClassification securityClassification\n    {\n      ClassificationLevel \"Confidential\"\n    }\n  }\n}\n```System mySystem\n{\n  Component myComponent\n  {\n    SecurityClassification securityClassification\n    {\n      ClassificationLevel \"Secret\"\n    }\n  }\n}\n```System mySystem\n{\n  Component myComponent\n  {\n    SecurityClassification securityClassification\n    {\n      ClassificationLevel \"Unclassified\"\n    }\n  }\n}\n```System mySystem\n{\n  Component myComponent\n  {\n    SecurityClassification securityClassification\n    {\n      ClassificationLevel \"Confidential\"\n    }\n  }\n}\n```System mySystem\n{\n  Component myComponent\n  {\n    SecurityClassification securityClassification\n   ",
    "System mySystem\n{\n    // Define the main components\n    Component VCU\n    {\n        // Define BusIF for VCU\n        Port VCU_BusIF : BusIF\n        {\n            // Define direction of the port\n            direction Input\n        }\n    }\n\n    Component ECU\n    {\n        // Define BusIF for ECU\n        Port ECU_BusIF : BusIF\n        {\n            // Define direction of the port\n            direction Input\n        }\n    }\n\n    // Define the CAN bus\n    Component CAN_BUS\n    {\n        // Define the BusIFs connected to the CAN bus\n        Port VCU_CAN : BusIF\n        {\n            direction Input\n        }\n\n        Port ECU_CAN : BusIF\n        {\n            direction Input\n        }\n    }\n\n    // Define the relationships between components\n    Relationship connects\n    {\n        VCU -> CAN_BUS.VCU_CAN\n        ECU -> CAN_BUS.ECU_CAN\n    }\n\n    // Define the sensor data interfaces for future expansion\n    Port sensorDataIF : Bus",
    "System {\n  Name = \"Blood Glucose Meter Safety System\"\n  Identifier = \"BGMS\"\n  Package {\n    Package {\n      Name = \"Battery Management\"\n      Identifier = \"BM\"\n      Component {\n        Name = \"Battery Status Detector\"\n        Identifier = \"BTD\"\n        Property {\n          Name = \"Battery Status\"\n          Type = Boolean\n        }\n      }\n      Component {\n        Name = \"Battery Charger\"\n        Identifier = \"BC\"\n        Property {\n          Name = \"Charge Status\"\n          Type = Boolean\n        }\n      }\n      Component {\n        Name = \"Battery Health Monitor\"\n        Identifier = \"BHM\"\n        Property {\n          Name = \"Health Status\"\n          Type = Boolean\n        }\n      }\n      Association {\n        Name = \"Battery Management Association\"\n        Identifier = \"BMA\"\n        Source = BTD\n        Target = BC\n        Target = BHM\n      }\n    }\n    Package {\n      Name = \"Alert and Response\"\n      Identifier = \"AR\"\n      Component {\n        Name = \"",
    "library Constants\n\npackage Constants\n{\n    // Mathematical constants\n    constant Real e = 2.71828182845904523536;\n    constant Real pi = 3.14159265358979323846;\n\n    // Physical constants\n    constant Real c = 299792458.0; // Speed of light in vacuum (m/s)\n    constant Real alpha = 7.2973525693e-3; // Fine-structure constant\n    constant Real mu = 1.67262192369e-27 / 9.1093837015e-31; // Electron-to-proton mass ratio\n\n    // Scenario-based constants\n    constant Real g = 9.80665; // Standard gravitational acceleration on Earth (m/s^2)\n    constant Real gain = 20.0; // Amplifier gain coefficient in Model X\n}\n",
    "ModelType: System\n!ModelName: AutomotiveTireSpecification\n\n!Stereotype: Specification\n\n!Package: AutomotiveComponents\n\n!Element: Class\n!Name: Tire\n!Stereotype: Component\n\n!Element: Property\n!Class: Tire\n!Name: manufacturer\n!Type: String\n\n!Element: Property\n!Class: Tire\n!Name: rimDiameter\n!Type: Real\n\n!Element: Property\n!Class: Tire\n!Name: width\n!Type: Integer\n\n!Element: Constraint\n!Class: Tire\n!Name: ValidRimDiameter\n!Specification: rimDiameter > 0\n\n!Element: Constraint\n!Class: Tire\n!Name: ValidWidth\n!Specification: width > 0\n\n!Element: Constraint\n!Class: Tire\n!Name: ValidManufacturer\n!Specification: manufacturer != \"\"\n\n!Element: Instance\n!Class: Tire\n!Name: FrenchTire\n!Stereotype: Instance\n!Property: manufacturer = \"Michelin\"\n!Property: rim",
    "library AutomotiveComponents\n\n{\n    // Define the vehicle\n    type Vehicle\n    {\n        // Vehicle properties\n        mass : Real (unit = \"kg\")\n        length : Real (unit = \"m\")\n\n        // Define the front wheels\n        frontWheels : Set(FrontWheel)\n    }\n\n    // Define the front wheel\n    type FrontWheel\n    {\n        // Wheel properties\n        hubDiameter : Real (unit = \"in\")\n        width : Real (unit = \"mm\")\n        outerDiameter : Real (unit = \"mm\")\n        tire : Tire\n\n        // Calculate the outer diameter of the wheel\n        constraint OuterDiameter\n        {\n            outerDiameter == hubDiameter * 25.4 + 2 * tire.height\n        }\n    }\n\n    // Define the tire\n    type Tire\n    {\n        // Tire properties\n        height : Real (unit = \"mm\")\n    }\n\n    // Create an instance of the vehicle\n    instance myVehicle : Vehicle\n    {\n        mass = 1200.0 (unit = \"kg\")\n",
    "system Configuration {\n  // Define the types of engines and transmissions\n  type FourCylinderEngine extends Engine;\n  type SixCylinderEngine extends Engine;\n  type ManualTransmission extends Transmission;\n  type AutomaticTransmission extends Transmission;\n\n  // Define the engine and transmission selection\n  property selectedEngine : Engine;\n  property selectedTransmission : Transmission;\n\n  // Define the rules for selecting the engine and transmission\n  rule SelectEngineAndTransmission {\n    selectedEngine = if (isHighPerformance) then\n                      SixCylinderEngine\n                    else\n                      FourCylinderEngine;\n    selectedTransmission = if (isHighPerformance) then\n                            AutomaticTransmission\n                          else\n                            ManualTransmission;\n  }\n\n  // Define the valid powertrain combinations\n  constraint ValidPowertrainCombination {\n    selectedEngine = FourCylinderEngine and selectedTransmission = ManualTransmission or\n    selectedEngine = SixCylinderEngine and selectedTransmission = AutomaticTransmission;\n  }\n}\n```system Configuration {\n  // Define the types of engines and transmissions\n  type FourCylinderEngine extends Engine",
    "{\n  System mySystem {\n    System myCar {\n      Property totalMass = 1200 kilograms;\n      Property length = 4.82 meters;\n      System myWheels {\n        System myWheelAssembly {\n          Property rimDiameter = 18 inches;\n          Property tireWidth = 245 millimeters;\n          Property tireHeight = 45 millimeters;\n          Property outerDiameter = calculate outerDiameter(tireWidth, tireHeight);\n          Property defaultTreadDepth = 6.0 millimeters;\n          Constraint treadDepthConstraint {\n            when defaultTreadDepth < 3.5 millimeters then\n              error \"Tread depth must not be less than 3.5 millimeters.\";\n          }\n          System myBrakeDiscAssembly {\n            Property radius = 95 millimeters;\n            Property diameter = 2 * radius;\n            Constraint diameterConstraint {\n              when diameter > outerDiameter then\n                error \"Brake disc diameter must be less than the outer diameter of the wheel.\";\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
    "SystemDefinition: System fuelSystem\n{\n    // Define components\n    ComponentDefinition fuelTankAssembly\n    {\n        // Define interfaces\n        InterfaceDefinition outletInterface\n        {\n            // Define operations\n            OperationDefinition provideOutlet\n            {\n                // Define parameters\n                Parameter provideOutletParam\n                {\n                    Name = \"fuel\";\n                    Type = \"Fuel\";\n                }\n            }\n        }\n    }\n\n    ComponentDefinition fuelPump\n    {\n        // Define interfaces\n        InterfaceDefinition pumpInterface\n        {\n            // Define operations\n            OperationDefinition pumpFuel\n            {\n                // Define parameters\n                Parameter pumpFuelParam\n                {\n                    Name = \"fuel\";\n                    Type = \"Fuel\";\n                }\n            }\n        }\n    }\n\n    ComponentDefinition fuelTank\n    {\n        // Define interfaces\n        InterfaceDefinition tankInterface\n        {\n            // Define operations\n            OperationDefinition receiveFuel\n            {\n                // Define parameters\n                Parameter receiveFuelParam\n                {\n                    Name = \"fuel\";\n                    Type = \"Fuel\";\n                }",
    "System mySystem\n{\n  // Define the system properties, behaviors, and interactions\n}\n```Package myPackage\n{\n  // Define the system components, connectors, and other elements\n}\n```Package PhysicalQuantities\n{\n  // Define the base physical quantities\n  Property length : PhysicalQuantity\n  Property mass : PhysicalQuantity\n  Property time : PhysicalQuantity\n  Property electricCurrent : PhysicalQuantity\n  Property temperature : PhysicalQuantity\n  Property amountOfSubstance : PhysicalQuantity\n  Property luminousIntensity : PhysicalQuantity\n}\n```Package PhysicalQuantityExtensions\n{\n  // Define extensions for physical quantities\n  Property extendedLength : PhysicalQuantity\n  Property extendedMass : PhysicalQuantity\n  Property extendedTime : PhysicalQuantity\n  Property extendedElectricCurrent : PhysicalQuantity\n  Property extendedTemperature : PhysicalQuantity\n  Property extendedAmountOfSubstance : PhysicalQuantity\n  Property extendedLuminousIntensity : PhysicalQuantity\n}\n```Package DataManagement\n{\n  // Define data management aspects\n  Property data : Data\n  Property unit : Unit\n  Property conversion :",
    "library UnitSystemLibrary\n{\n  // Define the main system\n  system UnitSystem\n  {\n    // Define the main components\n    components\n    {\n      // Define the unit types\n      UnitType ISQUnit\n      {\n        // Define the properties of ISQUnit\n        properties\n        {\n          // Define the base units\n          BaseUnit length \"meter\" (1)\n          BaseUnit mass \"kilogram\" (2)\n          BaseUnit time \"second\" (3)\n          BaseUnit electricCurrent \"ampere\" (4)\n          BaseUnit thermodynamicTemperature \"kelvin\" (5)\n          BaseUnit amountOfSubstance \"mole\" (6)\n          BaseUnit luminousIntensity \"candela\" (7)\n        }\n      }\n\n      UnitType USCustomaryUnit\n      {\n        // Define the properties of USCustomaryUnit\n        properties\n        {\n          // Define the base units\n          BaseUnit length \"foot\" (1)\n          BaseUnit mass \"pound\" (2)\n          BaseUnit time \"second\" (3)\n          BaseUnit electricCurrent \"ampere\" (4)",
    "SystemDefinition: System\n{\n  SystemPart: HeadlampTiltAdjustmentKnob\n  {\n    SystemProperty: TiltAngle\n    {\n      PropertyType: Real\n      Range: [50, 80]\n    }\n  }\n}\n```",
    "System mySystem\n{\n    // Define data types\n    DataType unsignedIntegerType\n    {\n        // Define properties\n        Property unsignedIntegerProp : Integer\n        {\n            // Define constraints\n            Constraint nonNegativeConstraint : unsignedIntegerProp >= 0\n        }\n    }\n\n    DataType unsignedFloatType\n    {\n        // Define properties\n        Property unsignedFloatProp : Real\n        {\n            // Define constraints\n            Constraint nonNegativeConstraint : unsignedFloatProp >= 0.0\n        }\n    }\n\n    DataType dateTimeType\n    {\n        // Define properties\n        Property dateTimeProp : DateTime\n    }\n\n    DataType stringType\n    {\n        // Define properties\n        Property stringProp : String\n    }\n\n    DataType booleanType\n    {\n        // Define properties\n        Property booleanProp : Boolean\n    }\n\n    // Define color labeling for status conditions\n    DataType colorLabelType\n    {\n        // Define properties\n        Property color : String\n        Property status : String\n        {\n            // Define constraints\n            Constraint statusToColor : \n                (status == \"red\" -> color == \"red",
    "System mySystem\n{\n    // Define the types of collections\n    Type BagOfSpareParts : Set<Part>\n    Type ListOfIntegers : List<Integer>\n    Type SetOfStrings : Set<String>\n    Type OrderedSetOfPerson : OrderedSet<Person>\n    Type ArrayOfReal : Array(4, Real)\n\n    // Define the elements within the system\n    Part part1\n    Part part2\n    Integer int1\n    Integer int2\n    String str1\n    String str2\n    Person person1\n    Person person2\n    Real real1\n    Real real2\n\n    // Define the relationships between elements\n    mySystem.part1 -> BagOfSpareParts\n    mySystem.part2 -> BagOfSpareParts\n    mySystem.int1 -> ListOfIntegers\n    mySystem.int2 -> ListOfIntegers\n    mySystem.str1 -> SetOfStrings\n    mySystem.str2 -> SetOfStrings\n    mySystem.person1 -> OrderedSetOfPerson\n    mySystem.person2 -> OrderedSetOfPerson\n    mySystem.real1 -> ArrayOf",
    "system TireSystem\n{\n  // Define the structure for Tire\n  property Tire\n  {\n    name : String;\n    manufacturer : String;\n    rimDiameter : Real;\n    tireWidth : Real;\n    installationPosition : Point;\n  }\n}\n```system TireSystem\n{\n  // Define the structure for Tire\n  property Tire\n  {\n    name : String;\n    manufacturer : String;\n    rimDiameter : Real;\n    tireWidth : Real;\n    installationPosition : Point;\n  }\n}\n```",
    "SystemDefinition:\n  System mySystem\n  {\n    // Define the system properties, interfaces, and other relevant aspects\n  }\n\n  Package trajectoryDataPackage\n  {\n    DataType trajectoryDataPoint\n    {\n      Real time (units = \"s\")\n      Real position[3] (units = \"m\")\n      Real velocity[3] (units = \"m/s\")\n    }\n\n    Property trajectoryDataProperty\n    {\n      Type = trajectoryDataPoint[*]\n    }\n\n    Requirement trajectoryRequirement\n    {\n      Description = \"The system shall sample and record the trajectory of the spacecraft during the ascent phase.\"\n      Target = mySystem\n    }\n\n    Requirement referenceTimeRequirement\n    {\n      Description = \"The system shall use the mission liftoff time as the reference time zero, measured in seconds.\"\n      Target = mySystem\n    }\n\n    Requirement UTCReferenceTimeRequirement\n    {\n      Description = \"The system shall be able to take the UTC liftoff time of the mission as the reference time.\"\n      Target = mySystem\n    }\n  }\n```",
    "SystemDefinition: System\n{\n    Name = \"Alloy Properties Management System\"\n    Description = \"Supports modeling and management of alloy-related properties and their constituent metals in the field of materials science.\"\n\n    PropertyDefinition: AlloyProperties\n    {\n        Name = \"Alloy Properties\"\n        Description = \"Defines and manages the basic characteristics of different substances, materials, and metals, such as atomic mass, and can clearly represent the mass fractions of component materials in alloys.\"\n\n        Property: AtomicMass\n        {\n            Name = \"Atomic Mass\"\n            Description = \"The mass of an atom in atomic mass units (u).\"\n            Type = \"Real\"\n        }\n\n        Property: MassFraction\n        {\n            Name = \"Mass Fraction\"\n            Description = \"The fraction of the mass of a component material in an alloy.\"\n            Type = \"Real\"\n        }\n\n        Property: TensileStrength\n        {\n            Name = \"Tensile Strength\"\n            Description = \"The ability of a material to resist breaking under tension.\"\n            Type = \"Real\"\n            Units = \"newtons per square millimeter\"\n",
    "System {\n  Name: \"Engineering Materials Database\"\n  Description: \"The Engineering Materials Database system is designed to model and manage various types of engineering materials, including metals and their alloys. It supports the description of fundamental properties of materials, such as atomic mass, compositional information, and mechanical property indicators. The system can define detailed compositional information, including the mass fraction of each constituent material, for metals and alloys. It supports standardized and dimensional management of parameters such as tensile strength and can represent and convert them using commonly used engineering units.\"\n  Identifier: \"EMDB\"\n\n  Component {\n    Name: \"Material Model\"\n    Description: \"This component models various types of engineering materials, including metals and their alloys.\"\n    Identifier: \"MM\"\n\n    Property {\n      Name: \"Atomic Mass\"\n      Description: \"Stores the atomic mass of materials.\"\n      Identifier: \"AM\"\n      Type: Real\n    }\n\n    Property {\n      Name: \"Compositional Information\"\n      Description: \"Stores the compositional information of materials.\"\n      Identifier: \"CI\"\n      Type: String\n    }\n\n    Property {\n     ",
    "library MyLibrary\n\npackage SystemPackage\n{\n    // Define the system boundary\n    system MySystem\n    {\n        // Define the main components\n        component Publisher\n        {\n            // Define the operations for publishing messages\n            provide publishMessage(topic : String, message : String)\n        }\n\n        component Subscriber\n        {\n            // Define the operations for subscribing to topics\n            require subscribeToTopic(topic : String)\n        }\n\n        component Server\n        {\n            // Define the operations for handling message distribution\n            require handleMessageDistribution(topic : String, message : String)\n        }\n\n        // Define the relationships\n        connect Publisher to Server via PublishConnector\n        {\n            // Define the properties for the connector\n            property Topic : String\n            property Message : String\n        }\n\n        connect Subscriber to Server via SubscribeConnector\n        {\n            // Define the properties for the connector\n            property Topic : String\n        }\n    }\n}\n```sysml",
    "system VehicleFuelSystem\n{\n    // Define the components of the vehicle fuel system\n    components\n    {\n        // Define the fuel tank assembly\n        component FuelTankAssembly\n        {\n            // Define the properties of the fuel tank assembly\n            properties\n            {\n                // Define the fuel tank capacity\n                property Capacity real = 50.0\n                // Define the fuel type\n                property FuelType string = \"Regular\"\n            }\n        }\n\n        // Define the engine\n        component Engine\n        {\n            // Define the properties of the engine\n            properties\n            {\n                // Define the engine fuel consumption rate\n                property FuelConsumptionRate real = 10.0\n            }\n        }\n\n        // Define the fuel lines\n        component FuelLines\n        {\n            // Define the properties of the fuel lines\n            properties\n            {\n                // Define the fuel line diameter\n                property Diameter real = 0.5\n                // Define the fuel line length\n                property Length real = 10.0\n            }\n        }\n    }\n\n    // Define the relationships between the components\n   ",
    "system MySystem\n{\n  // Define the participants\n  participant Producer\n  participant Consumer\n  participant Server\n\n  // Define the interactions\n  interaction PublishMessageInteraction\n  {\n    send from Producer to Server : PublishMessageEvent\n    send from Server to Consumer : MessageDeliveryEvent\n  }\n\n  // Define the subscriptions\n  subscription Subscription\n  {\n    send from Consumer to Server : SubscriptionRequestEvent\n    receive from Server to Consumer : MessageDeliveryEvent\n  }\n\n  // Define the message flow\n  flow PublishMessageFlow\n  {\n    send from Producer to Server : PublishMessageEvent\n    receive from Server to Consumer : MessageDeliveryEvent\n  }\n\n  // Define the topic\n  topic MyTopic\n  {\n    // Define the participants involved in the topic\n    participant Producer\n    participant Consumer\n    participant Server\n\n    // Define the interactions related to the topic\n    interaction PublishMessageInteraction\n    {\n      send from Producer to Server : PublishMessageEvent\n      send from Server to Consumer : MessageDeliveryEvent\n    }\n\n    // Define the subscriptions related to the topic\n    subscription Subscription\n    {\n      send from Consumer",
    "system TransportationSystem\n{\n    // Define the system elements\n    flowPort DriverEntryFlowPort;\n    flowPort PassengerEntryFlowPort[4];\n    flowPort FuelLevelFlowPort;\n    flowPort GasStationFlowPort;\n    flowPort ExitFlowPort;\n\n    // Define the system behavior\n    flow Transition {\n        source DriverEntryFlowPort;\n        target PassengerEntryFlowPort[0];\n        target PassengerEntryFlowPort[1];\n        target PassengerEntryFlowPort[2];\n        target PassengerEntryFlowPort[3];\n        action {\n            // User entry\n        }\n    }\n\n    flow Transition {\n        source FuelLevelFlowPort;\n        target GasStationFlowPort when FuelLevelFlowPort < 10% of max(FuelLevelFlowPort);\n        action {\n            // Refueling\n        }\n    }\n\n    flow Transition {\n        source ExitFlowPort;\n        target null;\n        action {\n            // Exit\n        }\n    }\n}\n```package TransportationPackage\n{\n    system TransportationSystem\n    {\n        // Define the",
    "SystemDefinition : System fuelSupplyAndReturnSystem\n{\n    SystemImplementation : fuelSupplyAndReturnSystemImpl\n    {\n        Component : fuelTankAssembly\n        {\n            Port : fuelOutletPort\n            {\n                Attribute : fuelTemperature\n                {\n                    DataType : Real\n                }\n            }\n        }\n        Component : engineUnit\n        {\n            Port : fuelInletPort\n            {\n                Attribute : fuelTemperature\n                {\n                    DataType : Real\n                }\n            }\n        }\n        Interface : fuelInterface\n        {\n            Property : fuelFlowDirection\n            {\n                DataType : FlowDirectionKind\n            }\n        }\n    }\n}\n---\n\nHere is the SysML v2 code generated based on the given requirements:SystemDefinition : fuelSupplyAndReturnSystem\n{\n    SystemImplementation : fuelSupplyAndReturnSystemImpl\n    {\n        Component : fuelTankAssembly\n        {\n            Port : fuelOutletPort\n            {\n                Attribute : fuelTemperature\n                {\n                    DataType : Real\n                }\n            }\n        }\n        Component : engineUnit",
    "system VehicleFuelSystem\n{\n    // Define the core components\n    componentset CoreComponents\n    {\n        // Define the Fuel Tank Assembly component\n        component FuelTankAssembly\n        {\n            // Define the properties and behaviors of the Fuel Tank Assembly\n            properties\n            {\n                // Define the fuel tank capacity\n                property FuelTankCapacity real\n                {\n                    min = 0.0\n                    max = 100.0\n                    default = 50.0\n                }\n            }\n        }\n\n        // Define the Engine component\n        component Engine\n        {\n            // Define the properties and behaviors of the Engine\n            properties\n            {\n                // Define the engine fuel consumption rate\n                property FuelConsumptionRate real\n                {\n                    min = 0.0\n                    max = 100.0\n                    default = 20.0\n                }\n            }\n        }\n    }\n\n    // Define the interactions between the components\n    interactions\n    {\n        // Define the fuel supply interaction\n        interaction FuelSupply\n        {\n            // Define the source and target of the fuel",
    "plantuml\n@startuml\n!define RECTANGLE class\n!define DIAMOND decision\n!define LINELINE :\n!define LINE :\n\nRECTANGLE System\nRECTANGLE UserInteraction\nRECTANGLE Focusing\nRECTANGLE ImageProcessing\nRECTANGLE PhotoCapture\n\nSystem \"System\" as sys\n\nUserInteraction \"User selects a scene\" as us1\nUserInteraction \"UserInteraction\" as us2\n\nFocusing \"Focusing\" as f1\nFocusing \"Focusing\" as f2\n\nImageProcessing \"ImageProcessing\" as ip1\nImageProcessing \"ImageProcessing\" as ip2\n\nPhotoCapture \"PhotoCapture\" as pc1\nPhotoCapture \"PhotoCapture\" as pc2\n\nsys -> us1 : \"select a scene\"\nus1 -> f1 : \"scene selected\"\nf1 -> ip1 : \"focused image\"\nip1 -> pc1 : \"final photo\"\npc1 -> us2 : \"final photo\"\n\nus2 -> f2 : \"scene selected\"\nf2 -> ip2 : \"focused image\"\nip2",
    "system PhotographySystem\n{\n  // Define the two main steps in the workflow\n  flow FocusingFlow\n  {\n    // Define the input and output for the Focusing step\n    input FocusingInput\n    {\n      Scene scene;\n    }\n    output FocusedImage focusedImage;\n  }\n\n  flow ShootingFlow\n  {\n    // Define the input and output for the Shooting step\n    input ShootingInput\n    {\n      FocusedImage focusedImage;\n    }\n    output FinalImage finalImage;\n  }\n\n  // Define the connections between the flows\n  FocusingFlow -> ShootingFlow : nextStep;\n\n  // Define the system components\n  component FocusingComponent\n  {\n    provides FocusingFlow;\n  }\n\n  component ShootingComponent\n  {\n    uses FocusingFlow;\n  }\n}\n```",
    "SystemDefinition:\n  System mySystem\n    {\n      // Define the system's properties, behaviors, and other relevant aspects here\n      // For example, you can define the system's components, connectors, and interactions\n    }\n```System mySystem\n  {\n    // Define the system's properties, behaviors, and other relevant aspects here\n    // For example, you can define the system's components, connectors, and interactions\n    Component camera\n      {\n        // Define the camera's properties, behaviors, and other relevant aspects here\n      }\n    Component userInterface\n      {\n        // Define the user interface's properties, behaviors, and other relevant aspects here\n      }\n    Component processingUnit\n      {\n        // Define the processing unit's properties, behaviors, and other relevant aspects here\n      }\n    Connector connectsCameraToProcessingUnit\n      {\n        source camera\n        target processingUnit\n      }\n    Connector connectsProcessingUnitToUserInterface\n      {\n        source processingUnit\n        target userInterface\n      }\n    Interaction focusAndCapture\n      {\n        Participant camera\n        Particip",
    "System mySystem\n{\n  // Define system properties, requirements, and other elements here\n}\n```System mySystem\n{\n  name \"Photography Automation System\"\n  description \"This system automates the photography process, generating a focused image suitable for shooting and converting it into a photograph.\"\n\n  // Define system properties, requirements, and other elements here\n}\n```System mySystem\n{\n  name \"Photography Automation System\"\n  description \"This system automates the photography process, generating a focused image suitable for shooting and converting it into a photograph.\"\n\n  // Define system properties, requirements, and other elements here\n}\n```System mySystem\n{\n  name \"Photography Automation System\"\n  description \"This system automates the photography process, generating a focused image suitable for shooting and converting it into a photograph.\"\n\n  // Define system properties, requirements, and other elements here\n}\n```System mySystem\n{\n  name \"Photography Automation System\"\n  description \"This system automates the photography process, generating a focused image",
    "SystemDefinition PhotographyWorkflow\n{\n  SystemInstance PhotographyWorkflowInstance\n  {\n    SystemPort FocusPort\n    {\n      ProvidedInterface FocusInterface\n      {\n        Operation Focus\n        {\n          input Scene\n        }\n      }\n    }\n    SystemPort ShootPort\n    {\n      ProvidedInterface ShootInterface\n      {\n        Operation Shoot\n        {\n          input Image\n        }\n      }\n    }\n    SystemPort PicturePort\n    {\n      RequiredInterface PictureInterface\n      {\n        Property Picture\n      }\n    }\n  }\n}\n```SystemDefinition PhotographyWorkflow\n{\n  SystemInstance PhotographyWorkflowInstance\n  {\n    SystemPort FocusPort\n    {\n      ProvidedInterface FocusInterface\n      {\n        Operation Focus\n        {\n          input Scene\n        }\n      }\n    }\n    SystemPort ShootPort\n    {\n      ProvidedInterface ShootInterface\n      {\n        Operation Shoot\n        {\n          input Image\n        }\n      }\n    }\n    SystemPort PicturePort\n    {\n      RequiredInterface PictureInterface\n      {\n        Property Picture\n      }",
    "System mySystem\n{\n  // Define the system elements\n  // Define the interactions between elements\n}\n```System mySystem\n{\n  // Define the system elements\n  // Define the interactions between elements\n}\n```System mySystem\n{\n  // Define the system elements\n  // Define the interactions between elements\n}\n```System mySystem\n{\n  // Define the system elements\n  // Define the interactions between elements\n}\n```System mySystem\n{\n  // Define the system elements\n  // Define the interactions between elements\n}\n```System mySystem\n{\n  // Define the system elements\n  // Define the interactions between elements\n}\n```System mySystem\n{\n  // Define the system elements\n  // Define the interactions between elements\n}\n```System mySystem\n{\n  // Define the system elements\n  // Define the interactions between elements\n}\n```System mySystem\n{\n  // Define the",
    "system MySystem\n{\n  // Define system elements and interactions\n}\n```system MySystem\n{\n  // Define system elements and interactions\n  // Define the workflow\n  workflow MyWorkflow\n  {\n    // Define workflow steps\n    step Initialize\n    {\n      // Define step actions\n    }\n    step FocusScene\n    {\n      // Define step actions\n    }\n    step EvaluateFocus\n    {\n      // Define step actions\n    }\n    step ShootImage\n    {\n      // Define step actions\n    }\n    step ProducePhoto\n    {\n      // Define step actions\n    }\n  }\n}\n```system MySystem\n{\n  // Define system elements and interactions\n  // Define the workflow\n  workflow MyWorkflow\n  {\n    // Define workflow steps\n    step Initialize\n    {\n      // Define step actions\n    }\n    step FocusScene\n    {\n      // Define step actions\n      action FocusOnScene\n      {\n        // Define action behavior\n      }\n    }\n    step EvaluateFocus\n    {\n      // Define step",
    "SystemDefinition: System\n{\n  SystemPart: Camera\n  {\n    SystemOperation: TakePhoto\n    {\n      input: Scene\n      output: Image\n    }\n    SystemOperation: Focus\n    {\n      input: Scene\n      output: FocusedImage\n    }\n    SystemOperation: Shoot\n    {\n      input: FocusedImage\n      output: Photograph\n    }\n    SystemOperation: Display\n    {\n      input: Photograph\n      output: DisplayedImage\n    }\n  }\n  SystemFlow: Workflow\n  {\n    source: TakePhoto\n    target: Focus\n    source: Focus\n    target: Shoot\n    source: Shoot\n    target: Display\n  }\n}\n``````",
    "System mySystem\n{\n  // Define system properties, requirements, and other elements here\n}\n```System mySystem\n{\n  name \"Automatic Braking Control System\"\n  description \"This system provides automatic braking control functions for vehicles.\"\n\n  // Define system properties, requirements, and other elements here\n}\n```System mySystem\n{\n  name \"Automatic Braking Control System\"\n  description \"This system provides automatic braking control functions for vehicles.\"\n\n  // Define system properties, requirements, and other elements here\n  Trigger startActivation\n  {\n    name \"Start Activation\"\n    description \"Triggered when the user turns the vehicle key to the start position.\"\n  }\n}\n```System mySystem\n{\n  name \"Automatic Braking Control System\"\n  description \"This system provides automatic braking control functions for vehicles.\"\n\n  // Define system properties, requirements, and other elements here\n  Trigger startActivation\n  {\n    name \"Start Activation\"\n    description \"Triggered when the user turns the vehicle key to the start position.\"\n  }\n",
    "System mySystem {\n  // Define the system's properties, requirements, and other elements here\n}\n```System mySystem {\n  name \"Battery Charging Control System\"\n  description \"This system is designed for automatic monitoring and control of the battery charging process, ensuring that the battery can be safely and efficiently fully charged.\"\n\n  // Define the system's properties, requirements, and other elements here\n}\n```System mySystem {\n  name \"Battery Charging Control System\"\n  description \"This system is designed for automatic monitoring and control of the battery charging process, ensuring that the battery can be safely and efficiently fully charged.\"\n\n  // Define the system's properties, requirements, and other elements here\n  Property batteryLevel : Real\n  Property isCharging : Boolean\n\n  Requirement batteryLevelMonitoring {\n    description \"Monitor the current battery level in real time\"\n    precondition isCharging == true\n    postcondition batteryLevel >= 0 and batteryLevel <= 100\n  }\n\n  Requirement automaticCharging {\n    description \"Automatically supply charge when the battery level is below",
    "system BatteryChargingSystem\n{\n    // Define the system properties, requirements, and other elements here\n}\n```system BatteryChargingSystem\n{\n    // Define the system properties, requirements, and other elements here\n    property BatteryLevelPercentage : Integer(0..100)\n    {\n        BatteryLevelPercentage.initialValue = 0\n    }\n\n    flow BatteryLevelMonitor : Integer(0..100) from BatteryLevelPercentage\n\n    event ChargingStarted\n    {\n        // Define the event properties, requirements, and other elements here\n    }\n\n    event ChargingTerminated\n    {\n        // Define the event properties, requirements, and other elements here\n    }\n\n    state ChargingProcess\n    {\n        initial state\n        {\n            on ChargingStarted do\n            {\n                if (BatteryLevelPercentage < 100)\n                {\n                    // Replenish the battery\n                }\n                else\n                {\n                    raise ChargingTerminated\n                }\n            }\n        }\n\n        state ReplenishingBattery\n        {\n            on BatteryLevelMonitor (value <",
    "System mySystem\n{\n  // Define the system elements\n  // Define the system interfaces\n  // Define the system interactions\n}\n```System mySystem\n{\n  // Define the system elements\n  Camera camera\n  {\n    // Define the camera elements\n    AutofocusSubsystem autofocusSubsystem\n    ImagingSubsystem imagingSubsystem\n  }\n  User user\n  {\n    // Define the user elements\n  }\n  // Define the system interfaces\n  // Define the system interactions\n}\n```System mySystem\n{\n  // Define the system elements\n  Camera camera\n  {\n    // Define the camera elements\n    AutofocusSubsystem autofocusSubsystem\n    ImagingSubsystem imagingSubsystem\n  }\n  User user\n  {\n    // Define the user elements\n  }\n  // Define the system interfaces\n  SystemInteraction selectScene\n  {\n    // Define the interaction elements\n    SystemSignal startSignal\n    SystemSignal endSignal\n    SystemInteractionTarget camera\n  }\n}\n```System mySystem\n{\n",
    "system CameraSystem\n{\n  // Define the main components of the system\n  components {\n    CameraControl {\n      // Define the properties and behaviors of the CameraControl component\n      properties {\n        SceneSelection sceneSelection;\n      }\n      behaviors {\n        void selectScene(Scene scene);\n        void focusScene();\n        void captureImage();\n      }\n    }\n    ImagingModule {\n      // Define the properties and behaviors of the ImagingModule component\n      properties {\n        Image capturedImage;\n      }\n      behaviors {\n        void captureImage();\n      }\n    }\n  }\n\n  // Define the interactions between components\n  interactions {\n    CameraControl -> ImagingModule : capturesImage;\n  }\n}\n```// Define the Scene enumeration\nenum Scene {\n  PORTRAIT,\n  LANDSCAPE,\n  NIGHT,\n  SPORTS\n}\n\n// Define the Image data type\ndatatype Image {\n  String fileName;\n  Byte[] imageData;\n}\n```// Define the properties of the CameraControl component\nproperties {\n  SceneSelection",
    "system VehicleSimulation\n{\n  // Define the system's properties\n  property Mass : Real;\n  property InitialPosition : Real;\n  property InitialVelocity : Real;\n  property TimeInterval : Time;\n  property PowerInput : Sequence(Real);\n\n  // Define the system's behavior\n  behavior CalculateTrajectory\n  {\n    input PowerInput;\n    output Position : Sequence(Real);\n\n    // Define the simulation steps\n    step Simulate\n    {\n      // Calculate the vehicle's speed and position at each time step\n      // This is a placeholder for the actual simulation logic\n    }\n  }\n}\n```",
    "system CameraSystem\n{\n  // Define the main components of the system\n  Component Camera\n  {\n    // Define the properties and behaviors of the camera\n    Property focusStatus : Boolean;\n    Operation focus()\n    {\n      // Perform the focusing process\n    }\n  }\n\n  Component ImageGenerator\n  {\n    // Define the properties and behaviors of the image generator\n    Property generatedImage : Image;\n    Operation generateImage()\n    {\n      // Generate the image from the focused scene\n    }\n  }\n\n  Component Display\n  {\n    // Define the properties and behaviors of the display\n    Property displayedImage : Image;\n    Operation displayImage()\n    {\n      // Display the captured image on the screen\n    }\n  }\n\n  // Define the interactions between the components\n  Camera -> ImageGenerator : captures;\n  ImageGenerator -> Display : sends;\n}\n```// Define the Image type\ntype Image\n{\n  // Define the properties of the image\n  Property imageData : Binary;\n}\n```// Define the UserInteraction type\n",
    "plantuml\n@startuml\n!define RECTANGLE class\n!define DIAMOND decision\n!define LINELINE line\n\nRECTANGLE Camera\nRECTANGLE ViewFinder\nRECTANGLE Image\nRECTANGLE Picture\nRECTANGLE DisplayPort\nRECTANGLE User\n\nDIAMOND SelectScene\n\nCamera --> ViewFinder : viewPort\nViewFinder --> SelectScene\nSelectScene --> Camera : scene\nSelectScene --> Image : Image\nImage --> Picture : capture\nPicture --> DisplayPort : display\nUser --> Camera : operate\n\n@enduml\n```plantuml\n@startuml\n!define RECTANGLE class\n!define DIAMOND decision\n!define LINELINE line\n\nRECTANGLE Camera\nRECTANGLE ViewFinder\nRECTANGLE Image\nRECTANGLE Picture\nRECTANGLE DisplayPort\nRECTANGLE User\n\nDIAMOND SelectScene\n\nCamera --> ViewFinder : viewPort\nViewFinder --> SelectScene\nSelectScene --> Camera : scene\nSelectScene --> Image : Image\nImage --> Picture : capture\nPicture --> DisplayPort : display\nUser --> Camera : operate\n\n@enduml\n```",
    "plantuml\n@startuml\n\npackage \"Sensor Management System\" {\n    package \"Sensor\" {\n        class Sensor {\n            +status : SensorStatus\n        }\n        enum SensorStatus {\n            Ready\n            NotReady\n        }\n    }\n    package \"System\" {\n        class System {\n            +sensors : Sensor[]\n            +updateSensor(sensor : Sensor) : void\n            +checkAndUpdateSensors() : void\n        }\n    }\n}\n\nSystem \"Sensor Management System\" {\n    System \"System\" as sys {\n        [Sensor] as sensor1\n        [Sensor] as sensor2\n        [Sensor] as sensor3\n    }\n}\n\nsys -> sensor1 : checkAndUpdateSensors()\nsensor1 -> sys : sensors\nsensor1 -> sensor1 : check status\nsensor1 -> sys : updateSensor(sensor1)\n\n@enduml\n```plantuml\n@startuml\n\npackage \"Sensor Management System\" {\n    package \"Sensor\" {\n        class Sensor",
    "system VehicleManagementSystem\n{\n  // Define the states\n  enum VehicleState\n  {\n    Off,\n    Starting,\n    On\n  }\n\n  // Define the signals\n  signal VehicleStartSignal\n  signal VehiclePowerOnSignal\n  signal VehicleShutdownSignal\n\n  // Define the initial state\n  initialState InitialState\n  {\n    // Define the transitions\n    transition\n    {\n      when VehicleStartSignal then VehicleState = VehicleState.Starting;\n      when VehiclePowerOnSignal then VehicleState = VehicleState.On;\n      when VehicleShutdownSignal then VehicleState = VehicleState.Off;\n    }\n  }\n\n  // Define the states\n  state Off\n  {\n    entry\n    {\n      // Initial state entry actions\n    }\n  }\n\n  state Starting\n  {\n    entry\n    {\n      // Starting state entry actions\n    }\n  }\n\n  state On\n  {\n    entry\n    {\n      // On state entry actions\n    }\n  }\n}\n``````",
    "system VehicleManagementSystem\n{\n  // Define the states\n  state off;\n  state starting;\n  state on;\n\n  // Define the signals\n  signal VehicleStartSignal;\n  signal VehicleOnSignal;\n  signal VehicleOffSignal;\n\n  // Define the initial state\n  initialState off;\n\n  // Define the state machine\n  stateMachine SM_VehicleManagement\n  {\n    state off {\n      on VehicleStartSignal do {\n        nextState starting;\n      }\n    }\n    state starting {\n      on VehicleOnSignal do {\n        nextState on;\n      }\n      on VehicleOffSignal do {\n        nextState off;\n      }\n    }\n    state on {\n      on VehicleOffSignal do {\n        nextState off;\n      }\n    }\n  }\n}\n---\n\nPlease provide the SysML v2 code that meets the requirements.",
    "System mySystem\n{\n  // Define the states\n  State offState;\n  State startPhase;\n  State poweredOn;\n  State off;\n\n  // Define the transitions\n  Transition startVehicle;\n  Transition vehicleStarted;\n  Transition shutdownVehicle;\n\n  // Define the behaviors\n  Behavior selfDiagnosis;\n  Behavior powerSupply;\n  Behavior safetyOperations;\n\n  // Define the system elements\n  SystemElement vehicleControlUnit;\n  SystemElement powerManagementUnit;\n  SystemElement diagnosticUnit;\n  SystemElement safetyUnit;\n\n  // Define the system interfaces\n  Interface vehicleStartCommand;\n  Interface vehicleStartedSignal;\n  Interface vehicleShutdownCommand;\n\n  // Define the system flows\n  Flow vehicleStartFlow;\n  Flow vehicleStartedFlow;\n  Flow vehicleShutdownFlow;\n\n  // Define the system interactions\n  Interaction vehicleManagementInteraction;\n\n  // Define the system packages\n  Package systemPackage;\n\n  // Define the system requirements\n  Requirement safetyRequirement;\n  Requirement diagnosticRequirement;\n  Requirement powerManagementRequirement;\n\n  // Define the system constraints\n ",
    "System mySystem\n{\n  // Define the states\n  State shutdown\n  {\n    // Define the transitions\n    Transition startUp\n    {\n      trigger startSignal;\n      effect\n      {\n        sourceState = shutdown;\n        targetState = startUp;\n      }\n    }\n  }\n\n  State startUp\n  {\n    Transition run\n    {\n      trigger startDoneSignal;\n      effect\n      {\n        sourceState = startUp;\n        targetState = run;\n      }\n    }\n  }\n\n  State run\n  {\n    Transition shutdown\n    {\n      trigger shutdownSignal;\n      effect\n      {\n        sourceState = run;\n        targetState = shutdown;\n      }\n    }\n  }\n\n  // Define the system behavior\n  Behavior myBehavior\n  {\n    // Define the initial state\n    initialState = shutdown;\n\n    // Define the state machine\n    StateMachine myStateMachine\n    {\n      region myRegion\n      {\n        state = shutdown;\n        transition = startUp;\n      }\n      region myRegion2\n",
    "system PowerManagementSystem\n{\n  // Define the states\n  state Off;\n  state Start;\n  state On;\n\n  // Define the transitions\n  transition startSignal to Start from Off;\n  transition onSignal to On from Start;\n  transition offSignal to Off from On;\n\n  // Define the behaviors\n  behavior normalOperation\n  {\n    trigger startSignal;\n    trigger onSignal;\n    trigger offSignal;\n  }\n}\nNote:\n- The system model should include states for Off, Start, and On.\n- Transitions should be defined to allow the system to move between these states based on signals.\n- A behavior should be defined to handle the triggering of signals.\n- The system should ensure that the vehicle’s operating state can be switched accurately and promptly.\n- The system should reserve functionality for health state management for future expansion.",
    "system VehicleHealthMonitoringSystem\n{\n  // Define system properties, functions, and behaviors here\n}\n```package VehicleHealthMonitoringSystem\n{\n  // Define package properties, functions, and behaviors here\n}\n```package VehicleHealthMonitoringSystem\n{\n  system VehicleHealthMonitoringSystem\n  {\n    // Define system properties, functions, and behaviors here\n  }\n}\n```package VehicleHealthMonitoringSystem\n{\n  system VehicleHealthMonitoringSystem\n  {\n    // Define system properties, functions, and behaviors here\n  }\n}\n```package VehicleHealthMonitoringSystem\n{\n  system VehicleHealthMonitoringSystem\n  {\n    // Define system properties, functions, and behaviors here\n  }\n}\n```package VehicleHealthMonitoringSystem\n{\n  system VehicleHealthMonitoringSystem\n  {\n    // Define system properties, functions, and behaviors here\n  }\n}\n```package VehicleHealthMonitoringSystem\n{\n  system VehicleHealthMonitoringSystem\n  {\n    // Define system properties, functions",
    "System mySystem\n{\n    System myServer\n    {\n        Port requestPort\n        {\n            MessageType RequestMessage\n        }\n        Port responsePort\n        {\n            MessageType ResponseMessage\n        }\n        StateMachine serverStateMachine\n        {\n            State offState\n            {\n                Transition startTransition\n                {\n                    Trigger startTrigger\n                    {\n                        Event startEvent\n                    }\n                    Target waitingState\n                }\n            }\n            State waitingState\n            {\n                Transition requestTransition\n                {\n                    Trigger requestTrigger\n                    {\n                        Event requestEvent\n                    }\n                    Target responseState\n                }\n            }\n            State responseState\n            {\n                Transition timeoutTransition\n                {\n                    Trigger timeoutTrigger\n                    {\n                        TimeEvent timeoutEvent\n                    }\n                    Target waitingState\n                }\n            }\n            State offState\n            {\n                Transition dailyResetTransition\n                {\n                    Trigger dailyResetTrigger\n                    {\n                        TimeEvent dailyResetEvent\n                    }\n                    Target offState\n                }\n            }\n        }\n    }\n}\n```",
    "system ControlSystem\n{\n    // Define the states\n    state Off;\n    state Start;\n    state Operating;\n\n    // Define the transitions\n    transition StartTransition\n    {\n        trigger \"start signal\";\n        source Off;\n        target Start;\n    }\n\n    transition PowerOnTransition\n    {\n        trigger \"power-on signal\";\n        guard \"brake pedal depressed\";\n        source Start;\n        target Operating;\n    }\n\n    transition StopTransition\n    {\n        trigger \"stop signal\";\n        source Operating;\n        target Off;\n    }\n\n    // Define the self-check behavior\n    behavior SelfCheck\n    {\n        during Operating\n        {\n            action \"perform self-check\";\n            send \"power supply\" to \"controller\";\n        }\n    }\n\n    // Define the parking brake behavior\n    behavior ParkingBrake\n    {\n        during Off\n        {\n            action \"apply parking brake\";\n        }\n    }\n}\n```",
    "System mySystem {\n  // Define system properties, requirements, and other elements here\n}\n```System mySystem {\n  // Define system properties, requirements, and other elements here\n  Property vehicleStartStopStatus \"Vehicle Start-Stop Status\" {\n    defaultValue \"off\"\n  }\n\n  Property brakePedalDepressed \"Brake Pedal Depressed\" {\n    defaultValue \"false\"\n  }\n\n  Property vehicleOnSignal \"Vehicle On Signal\" {\n    defaultValue \"false\"\n  }\n\n  Property startControlSignal \"Start Control Signal\" {\n    defaultValue \"false\"\n  }\n\n  Property selfCheckPerformed \"Self Check Performed\" {\n    defaultValue \"false\"\n  }\n\n  Property powerSupply \"Power Supply\" {\n    defaultValue \"false\"\n  }\n\n  Property shutdownSignal \"Shutdown Signal\" {\n    defaultValue \"false\"\n  }\n\n  Property parkingBrakeApplied \"Parking Brake Applied\" {\n    defaultValue \"false\"\n  }\n\n  StateMachine vehicleControl \"Vehicle Control\" {\n    initialState off {\n      on entry {\n       ",
    "SystemDefinition cruiseControlSystem\n{\n  SystemInstance cruiseControlSystemInstance\n  {\n    Component driver\n    {\n      // driver behavior\n    }\n    Component cruiseController\n    {\n      // cruise controller behavior\n    }\n    Component speedometer\n    {\n      // speedometer behavior\n    }\n    Component engine\n    {\n      // engine behavior\n    }\n    Component vehicle\n    {\n      // vehicle behavior\n    }\n    // Define the interactions between components\n    Interaction cruiseControlInteraction\n    {\n      Participant driver, cruiseController, speedometer, engine, vehicle\n      {\n        // Define the events exchanged between components\n        Event setSpeedCommand\n        {\n          Source driver\n          Target cruiseController\n        }\n        Event vehicleSpeedInfo\n        {\n          Source speedometer\n          Target cruiseController\n        }\n        Event fuelControlCommand\n        {\n          Source cruiseController\n          Target engine\n        }\n        Event vehicleSpeedUpdate\n        {\n          Source vehicle\n          Target speedometer\n        }\n      }\n   ",
    "SystemDefinition cruiseControlSystem\n{\n  SystemImplementation cruiseControlImplementation\n  {\n    SystemInstance cruiseControlInstance\n    {\n      Port throttleControlCommandPort\n      {\n        DataType Command\n      }\n      Port vehicleSpeedPort\n      {\n        DataType Speed\n      }\n      Port setSpeedCommandPort\n      {\n        DataType Speed\n      }\n      Flow setSpeedFlow\n      {\n        source setSpeedCommandPort\n        target cruiseControlInstance.throttleControlCommandPort\n      }\n      Flow vehicleSpeedFlow\n      {\n        source vehicleSpeedPort\n        target cruiseControlInstance.throttleControlCommandPort\n      }\n    }\n  }\n}\n```DataType Command\n{\n  // Define the structure of the Command data type\n}\n```DataType Speed\n{\n  // Define the structure of the Speed data type\n}\n```Flow setSpeedFlow\n{\n  source setSpeedCommandPort\n  target cruiseControlInstance.throttleControlCommandPort\n}\n```Flow vehicleSpeedFlow\n{\n  source vehicleSpeed",
    "System mySystem\n{\n  // Define the system elements\n  Component myCruiseController\n  {\n    // Define the properties and behaviors of the cruise controller\n  }\n\n  Component mySpeedometer\n  {\n    // Define the properties and behaviors of the speedometer\n  }\n\n  Component myEngine\n  {\n    // Define the properties and behaviors of the engine\n  }\n\n  Component myInVehicleControlInterface\n  {\n    // Define the properties and behaviors of the in-vehicle control interface\n  }\n\n  // Define the relationships between the system elements\n  myCruiseController -> myInVehicleControlInterface : sends\n  myCruiseController -> mySpeedometer : receives\n  myCruiseController -> myEngine : controls\n  mySpeedometer -> myCruiseController : provides\n  myEngine -> myCruiseController : receives\n}\n```System mySystem\n{\n  // Define the system elements\n  Component myCruiseController\n  {\n    // Define the properties and behaviors of the cruise controller\n    Operation setSpeedCommand(speed : Real)\n    {\n      // Implementation to set",
    "System mySystem\n{\n    // Define the system elements and interactions\n}\n```Block mySystem\n{\n    // Define the system elements and interactions\n}\n```Package mySystem\n{\n    // Define the system elements and interactions\n}\n```Package mySystem\n{\n    // Define the system elements and interactions\n}\n```Package mySystem\n{\n    // Define the system elements and interactions\n}\n```Package mySystem\n{\n    // Define the system elements and interactions\n}\n```Package mySystem\n{\n    // Define the system elements and interactions\n}\n```Package mySystem\n{\n    // Define the system elements and interactions\n}\n```Package mySystem\n{\n    // Define the system elements and interactions\n}\n```Package mySystem\n{\n    // Define the system elements and interactions\n}\n```Package mySystem\n{\n    // Define the",
    "System mySystem\n{\n    // Define components\n    Component cruiseControlInterface\n    {\n        // Define ports\n        Port setSpeedPort\n        Port speedSensorPort\n        Port fuelControlPort\n    }\n\n    Component cruiseController\n    {\n        // Define ports\n        Port setSpeedPort\n        Port speedSensorPort\n        Port fuelControlPort\n    }\n\n    Component engine\n    {\n        // Define ports\n        Port fuelControlPort\n    }\n\n    // Define relationships\n    Relationship connects\n    {\n        cruiseControlInterface.setSpeedPort -> cruiseController.setSpeedPort\n        cruiseControlInterface.speedSensorPort -> cruiseController.speedSensorPort\n        cruiseController.fuelControlPort -> engine.fuelControlPort\n    }\n}\n```",
    "System mySystem\n{\n  // Define components\n  Component cruiseController\n  {\n    // Define interfaces\n    Interface setSpeedCommand\n    {\n      // Define data\n      DataType SetSpeedCommandDataType\n      {\n        // Define attributes\n        String commandID\n        Real speed\n      }\n    }\n    Interface realTimeSpeed\n    {\n      // Define data\n      DataType RealTimeSpeedDataType\n      {\n        // Define attributes\n        String sensorID\n        Real speed\n      }\n    }\n    Interface fuelControlCommand\n    {\n      // Define data\n      DataType FuelControlCommandDataType\n      {\n        // Define attributes\n        String commandID\n        Real fuelAdjustment\n      }\n    }\n  }\n  Component speedSensor\n  {\n    // Define interfaces\n    Interface realTimeSpeed\n    {\n      // Define data\n      DataType RealTimeSpeedDataType\n      {\n        // Define attributes\n        String sensorID\n        Real speed\n      }\n    }\n  }\n  Component engineController\n  {\n    // Define interfaces\n    Interface fuelControlCommand\n    {\n      // Define data\n      DataType",
    "System mySystem\n{\n  // Define the system elements and interactions\n}\n```plaintext\nSystem mySystem\n{\n  // Define the system elements and interactions\n}\n```plaintext\nSystem mySystem\n{\n  // Define the system elements and interactions\n}\n```plaintext\nSystem mySystem\n{\n  // Define the system elements and interactions\n}\n```plaintext\nSystem mySystem\n{\n  // Define the system elements and interactions\n}\n```plaintext\nSystem mySystem\n{\n  // Define the system elements and interactions\n}\n```plaintext\nSystem mySystem\n{\n  // Define the system elements and interactions\n}\n```plaintext\nSystem mySystem\n{\n  // Define the system elements and interactions\n}\n```plaintext\nSystem mySystem\n{\n  // Define the system elements and interactions\n}\n```plaintext\nSystem mySystem\n{\n  // Define the system elements and interactions\n}\n```plaintext\nSystem mySystem\n{\n  // Define the system elements and",
    "system Vehicle\n{\n  attributes\n  {\n    Mass : Real;\n    OperationalStatus : String;\n  }\n  OperationalStatus.properties\n  {\n    GearSetting : String;\n    AcceleratorPedalPosition : String;\n  }\n  composedOf\n  {\n    Engine : System;\n    Driver : ExternalSystem;\n    Wheels : Set(Wheel);\n  }\n  Wheels.members\n  {\n    LeftFrontWheel : Wheel;\n    RightFrontWheel : Wheel;\n  }\n  instances\n  {\n    vehicle_1 : Vehicle;\n  }\n  vehicle_1.properties\n  {\n    LeftFrontWheel : Wheel;\n    RightFrontWheel : Wheel;\n  }\n}\n\nsystem Wheel\n{\n  attributes\n  {\n    RotationSpeed : Real;\n    SteeringAngle : Real;\n  }\n}\n``````",
    "system CompositeSystem\n{\n    // Define the system elements\n    system Vehicle\n    {\n        // Define attributes\n        property Mass : Real\n        property GearSetting : Integer\n        property AcceleratorPosition : Real\n\n        // Define initial state\n        initialState InitialState\n        {\n            Mass = 2000.0\n            GearSetting = 0\n            AcceleratorPosition = 0.0\n        }\n\n        // Define state transitions\n        state OperationalState\n        {\n            entry\n            {\n                Mass = 1500.0\n                GearSetting = 2\n                AcceleratorPosition = 0.5\n            }\n        }\n    }\n\n    // Define relationships\n    relationship Vehicle_Relationship\n    {\n        source Vehicle\n        target Vehicle\n    }\n}\n```",
    "system Vehicle\n{\n    // Define the properties of the vehicle\n    property Mass as Real (initialValue = 2000.0);\n    property GearPosition as String (initialValue = \"neutral\");\n    property ThrottlePedalPosition as Real (initialValue = 0.0);\n\n    // Define the engine as a component of the vehicle\n    component Engine;\n\n    // Define the drivers\n    property Driver as String (initialValue = \"Alice\");\n\n    // Define the possible drivers\n    enum DriverType { Alice, Bob }\n\n    // Define the transitions for changing the driver\n    transition ChangeDriver\n    {\n        effect\n        {\n            if (Driver == \"Alice\")\n            {\n                Driver = \"Bob\";\n            }\n            else\n            {\n                Driver = \"Alice\";\n            }\n        }\n    }\n}\n```timeSlice InitialState\n{\n    // Set initial values for the vehicle attributes\n    Vehicle.Mass = 2000.0;\n    Vehicle.GearPosition = \"neutral\";\n    Vehicle.ThrottlePedalPosition = ",
    "---\n\n```---\n\n```---\n\n```---\n\n```---\n\n```---\n\n```---\n\n```---\n\n```---\n\n```---\n\n```---\n\n```---\n\n```---\n\n```---\n\n```---\n\n```---\n\n```---\n\n```---\n\n```---\n\n```---\n\n```---\n\n```---\n\n```---\n\n```---\n\n```---\n\n```",
    "---\n\n```---\n\n```---\n\n```---\n\n```---\n\n```---\n\n```---\n\n```---\n\n```---\n\n```---\n\n```---\n\n```---\n\n```---\n\n```---\n\n```---\n\n```---\n\n```---\n\n```---\n\n```---\n\n```---\n\n```---\n\n```---\n\n```---\n\n```---\n\n```---\n\n```",
    "system MassAggregationSystem\n{\n    // Define the basic types of objects\n    type simpleThing\n    {\n        simpleMass : Real\n        totalMass : Real\n    }\n\n    type compositeThing\n    {\n        subcomponents : set of simpleThing\n        totalMass : Real\n    }\n\n    // Define the system behavior\n    behavior MassAggregationBehavior\n    {\n        calculateTotalMass(thing : simpleThing) : Real\n        {\n            return thing.simpleMass\n        }\n\n        calculateTotalMass(thing : compositeThing) : Real\n        {\n            var total = thing.simpleMass\n            foreach subcomponent in thing.subcomponents\n            {\n                total = total + MassAggregationBehavior.calculateTotalMass(subcomponent)\n            }\n            return total\n        }\n    }\n\n    // Define the system elements\n    element MassAggregationSystem\n    {\n        MassAggregationBehavior behavior\n    }\n}\n```extend MassAggregationSystem\n{\n    // Define the system behavior for a specific object\n    behavior MassAggregationBehaviorForThing\n    {\n        calculateTotalMass(thing : simple",
    "system MassAggregationSystem\n{\n    // Define the properties of the system\n    properties\n    {\n        MassAggregationSystemType : SystemType;\n    }\n\n    // Define the components of the system\n    components\n    {\n        MassAggregationComponent : Component\n        {\n            // Define the properties of the component\n            properties\n            {\n                BasicMass : Real;\n                Subcomponents : ComponentList;\n            }\n\n            // Define the operations of the component\n            operations\n            {\n                CalculateTotalMass() : Real\n                {\n                    // Calculate the total mass including all subcomponents\n                }\n\n                FilterAndAggregateComponents(minMassThreshold : Real) : Real\n                {\n                    // Filter and aggregate components based on the minimum mass threshold\n                }\n            }\n        }\n    }\n}\n```system MassAggregationSystem\n{\n    // Define the properties of the system\n    properties\n    {\n        MassAggregationSystemType : SystemType;\n    }\n\n    // Define the components of the system\n    components\n    {\n        MassAggregationComponent : Component\n        {\n            //",
    "system VehicleDynamicsCalculator\n{\n    // Define the main components and their interactions\n    components {\n        Component PowerOutputCalculator {\n            // Define inputs and outputs\n            inputs {\n                WheelPower : Real\n                AerodynamicDragCoefficient : Real\n                FrictionCoefficient : Real\n                VehicleMass : Real\n                Speed : Real\n            }\n            outputs {\n                ActualPowerOutput : Real\n            }\n            // Define the calculation logic\n            operations {\n                ActualPowerOutput = WheelPower - (AerodynamicDragCoefficient * Speed^2) - (FrictionCoefficient * VehicleMass * Speed)\n            }\n        }\n\n        Component AccelerationCalculator {\n            // Define inputs and outputs\n            inputs {\n                EffectivePower : Real\n                VehicleMass : Real\n                CurrentSpeed : Real\n            }\n            outputs {\n                Acceleration : Real\n            }\n            // Define the calculation logic\n            operations {\n                Acceleration = (EffectivePower - (AerodynamicDragCoefficient * CurrentSpeed^2) - (FrictionCoefficient * VehicleMass * CurrentSpeed)) / VehicleMass\n            }\n        }\n\n        Component",
    "system VehicleSimulation\n{\n  // Define system properties, parameters, and other elements as needed\n}\n```package VehicleSimulationPackage\n{\n  system VehicleSimulation\n  {\n    // Define system properties, parameters, and other elements as needed\n  }\n}\n```package VehicleSimulationPackage\n{\n  system VehicleSimulation\n  {\n    property InitialSpeed real\n    property InitialPosition real\n    property TimeStep real\n    property AerodynamicDragCoefficient real\n    property RollingResistanceCoefficient real\n    property TotalVehicleMass real\n    property WheelEndOutputPower real\n\n    // Define system properties, parameters, and other elements as needed\n  }\n}\n```package VehicleSimulationPackage\n{\n  system VehicleSimulation\n  {\n    property InitialSpeed real\n    property InitialPosition real\n    property TimeStep real\n    property AerodynamicDragCoefficient real\n    property RollingResistanceCoefficient real\n    property TotalVehicleMass real\n    property WheelEndOutputPower real\n\n    behavior CalculateVehicleBehavior\n    {\n      input InitialSpeed, InitialPosition, TimeStep, Aer",
    "System mySystem\n{\n  // Define system properties, functions, and other elements here\n}\n```Block myBlock\n{\n  // Define block properties, functions, and other elements here\n}\n```Flow myFlow\n{\n  // Define flow properties, functions, and other elements here\n}\n```Interaction myInteraction\n{\n  // Define interaction properties, functions, and other elements here\n}\n```Diagram myDiagram\n{\n  // Define diagram properties, functions, and other elements here\n}\n```mySystem\n{\n  myBlock\n  {\n    myFlow\n    {\n      myInteraction\n      {\n        myDiagram\n      }\n    }\n  }\n}\n```mySystem\n{\n  name = \"Vehicle Dynamics Simulator\"\n  description = \"Models and computes vehicle's driving dynamics.\"\n\n  myBlock\n  {\n    name = \"Vehicle Dynamics Model\"\n    description = \"Automates the calculation of vehicle's speed and position.\"\n",
    "System mySystem\n{\n  // Define the system elements and interactions\n  // ...\n}Block myBlock\n{\n  // Define the block properties and behaviors\n  // ...\n}Flow myFlow\n{\n  // Define the flow properties and behaviors\n  // ...\n}Interaction myInteraction\n{\n  // Define the interaction properties and behaviors\n  // ...\n}Requirement myRequirement\n{\n  // Define the requirement properties and behaviors\n  // ...\n}Constraint myConstraint\n{\n  // Define the constraint properties and behaviors\n  // ...\n}Property myProperty\n{\n  // Define the property properties and behaviors\n  // ...\n}Event myEvent\n{\n  // Define the event properties and behaviors\n  // ...\n}Function myFunction\n{\n  // Define the function properties and behaviors\n  // ...\n}Port myPort\n{\n  // Define the port properties and behaviors\n  // ...\n",
    "system VehicleMassManagement\n{\n  // Define the system elements\n  elements\n  {\n    MassLimit : 2500.0 kilograms;\n    Chassis : MassElement [1..1];\n    Engine : MassElement [1..1];\n    Gearbox : MassElement [1..1];\n    TotalMass : MassValue [1..1];\n  }\n\n  // Define the system structure\n  structure\n  {\n    Chassis -> TotalMass;\n    Engine -> TotalMass;\n    Gearbox -> TotalMass;\n  }\n\n  // Define the system behavior\n  behavior\n  {\n    checkMass : Action\n    {\n      TotalMass = Chassis.mass + Engine.mass + Gearbox.mass;\n      if (TotalMass > MassLimit)\n      {\n        issueOverweightWarning();\n      }\n    }\n  }\n}\n```",
    "system VehicleMassBudget\n{\n    // Define the mass limit for the vehicle\n    massLimit = 2500 kilograms\n\n    // Define the components of the vehicle\n    component Chassis\n    {\n        mass : kilograms\n    }\n\n    component Engine\n    {\n        mass : kilograms\n    }\n\n    component Transmission\n    {\n        mass : kilograms\n    }\n\n    // Define the relationships between the vehicle and its components\n    relationship VehicleComponents\n    {\n        source Vehicle\n        target Chassis, Engine, Transmission\n    }\n\n    // Define the total mass calculation and comparison\n    behavior CalculateTotalMass\n    {\n        input actualMass : kilograms\n        output isWithinLimit : boolean\n\n        // Calculate the total mass of the vehicle\n        totalMass = Chassis.mass + Engine.mass + Transmission.mass\n\n        // Compare the total mass with the mass limit\n        isWithinLimit = (totalMass <= massLimit)\n    }\n}\nNote: The output must strictly follow the SysML v2 BNF subset provided, including the syntax and structure.",
    "system VehicleMassManagementSystem\n{\n    // Define the components of the vehicle\n    component Chassis\n    {\n        // Define the mass of the chassis\n        property ChassisMass real\n    }\n\n    component Engine\n    {\n        // Define the mass of the engine\n        property EngineMass real\n    }\n\n    component Transmission\n    {\n        // Define the mass of the transmission\n        property TransmissionMass real\n    }\n\n    // Define the total mass of the vehicle\n    property TotalVehicleMass real\n\n    // Define the upper mass limit\n    property UpperMassLimit real = 2500.0\n\n    // Define the operation to calculate the total mass of the vehicle\n    operation CalculateTotalMass\n    {\n        // Calculate the total mass of the vehicle\n        TotalVehicleMass = Chassis.ChassisMass + Engine.EngineMass + Transmission.TransmissionMass\n\n        // Check if the total mass exceeds the upper mass limit\n        if (TotalVehicleMass > UpperMassLimit)\n        {\n            // Output a message indicating that the total mass exceeds the limit\n            output \"Error: Total vehicle mass exceeds the specified upper mass",
    "{\n  System mySystem {\n    Component mainVehicleComponents {\n      Component chassis {\n        Property weight : Real;\n      }\n      Component engine {\n        Property weight : Real;\n      }\n      Component transmission {\n        Property weight : Real;\n      }\n    }\n    Property totalWeight : Real;\n    Property weightLimit : Real = 2500.0;\n    Interaction checkWeight {\n      Call mySystem.mainVehicleComponents.chassis.weight + mySystem.mainVehicleComponents.engine.weight + mySystem.mainVehicleComponents.transmission.weight -> totalWeight;\n      If (totalWeight > weightLimit) {\n        ProvideWarning \"Total weight exceeds the limit\";\n      }\n    }\n  }\n}\n```",
    "system Vehicle\n{\n  // Define the main components of the vehicle\n  component Chassis\n  {\n    mass : Real\n  }\n\n  component Engine\n  {\n    mass : Real\n  }\n\n  component Transmission\n  {\n    mass : Real\n  }\n\n  // Define the constraints on the total mass of the vehicle\n  constraint TotalMassConstraint\n  {\n    totalMass : Real\n    {\n      totalMass = Chassis.mass + Engine.mass + Transmission.mass\n      totalMass <= 2500\n    }\n  }\n\n  // Define the dynamic behavior constraints\n  constraint DynamicBehaviorConstraint\n  {\n    initialVelocity : Real\n    finalVelocity : Real\n    mass : Real\n    appliedForce : Real\n    timePeriod : Time\n    {\n      mass > 0\n      appliedForce * timePeriod = mass * (finalVelocity - initialVelocity)\n    }\n  }\n}\nThis output is a simplified representation of the requirements. It includes the main components of the vehicle, the constraints on the total mass, and the constraints on the dynamic behavior. The `TotalMassConstraint",
    "system MaintenanceSystem\n{\n    // Define the properties for each vehicle\n    ownedAttribute VehicleProperty\n    {\n        type Vehicle\n        isOrderedSet\n    }\n\n    // Define the operations for the system\n    operation ScheduleMaintenance\n    {\n        inputParameter vehicle : Vehicle\n        outputParameter scheduledTime : Time\n    }\n\n    operation CheckMaintenanceStatus\n    {\n        inputParameter vehicle : Vehicle\n        outputParameter isDue : Boolean\n    }\n\n    operation InitiateMaintenance\n    {\n        inputParameter vehicle : Vehicle\n        outputParameter maintenanceStartTime : Time\n    }\n\n    operation CompleteMaintenance\n    {\n        inputParameter vehicle : Vehicle\n        outputParameter maintenanceEndTime : Time\n    }\n\n    // Define the vehicle class\n    class Vehicle\n    {\n        name : String\n        nextMaintenanceTime : Time\n        maintenanceInterval : Duration\n        maxAllowedTemperature : Temperature\n        currentStatus : String\n    }\n}\n```// Define the properties for each vehicle\nownedAttribute VehicleProperty\n{\n    type Vehicle\n    isOrderedSet\n}\n```// Define the",
    "plantuml\n@startuml\n!define RECTANGLE class\n!define DIAMOND decision\n!define LINELINE line\n\nRECTANGLE Vehicle\nRECTANGLE Engine\nRECTANGLE Transmission\nRECTANGLE Clutch\nRECTANGLE DriveSystem\n\nRECTANGLE MassLimit\nRECTANGLE FuelMass\nRECTANGLE SpeedCurve\nRECTANGLE Torque\n\nDIAMOND CheckMass\nDIAMOND CheckFuelMass\nDIAMOND CheckTorque\n\nLINELINE Vehicle \"has\" MassLimit\nLINELINE Vehicle \"has\" Engine\nLINELINE Vehicle \"has\" Transmission\nLINELINE Vehicle \"has\" Clutch\nLINELINE Vehicle \"has\" DriveSystem\n\nLINELINE Engine \"has\" SpeedCurve\nLINELINE Engine \"has\" Torque\n\nLINELINE Clutch \"has\" Transmission\n\nLINELINE Vehicle \"requires\" CheckMass\nLINELINE Engine \"requires\" CheckTorque\nLINELINE Clutch \"requires\" CheckTorque\n\n@enduml\n```plantuml\n@startuml\n!define RECTANGLE class\n!define DIAMOND decision\n!define LINE",
    "system Vehicle\n{\n  // Define the system's properties, interfaces, and components\n  // ...\n}\n```system Engine\n{\n  // Define the system's properties, interfaces, and components\n  // ...\n}\n```system Transmission\n{\n  // Define the system's properties, interfaces, and components\n  // ...\n}\n```system Clutch\n{\n  // Define the system's properties, interfaces, and components\n  // ...\n}\n```system FuelTank\n{\n  // Define the system's properties, interfaces, and components\n  // ...\n}\n```system VehicleMassControl\n{\n  // Define the system's properties, interfaces, and components\n  // ...\n}\n```system Powertrain\n{\n  // Define the system's properties, interfaces, and components\n  // ...\n}\n```system SpeedTorqueCurve\n{\n  // Define the system's properties, interfaces, and",
    "System mySystem {\n  // Define the vehicle and its engine\n  Component vehicle {\n    // Define the engine within the vehicle\n    Component engine {\n      // Define the clutch interface for the engine\n      Interface clutchInterface {\n        // Define the required properties for the clutch interface\n        Property maxTorque : Real = 500; // Example value, actual max torque can vary\n        Property minSpeed : Real = 1000; // Example value, actual min speed can vary\n      }\n    }\n  }\n\n  // Define the vehicle's mass properties\n  Property vehicleMass : Real = 2000; // Maximum mass when fully fueled\n  Property vehicleMassEmpty : Real = 1500; // Maximum mass when empty\n}\n```System mySystem {\n  // Define the vehicle and its engine\n  Component vehicle {\n    // Define the engine within the vehicle\n    Component engine {\n      // Define the clutch interface for the engine\n      Interface clutchInterface {\n        // Define the required properties for the clutch interface\n        Property maxTorque : Real = 500; // Example",
    "System mySystem\n{\n  // Define the vehicle mass constraint\n  Constraint vehicleMassConstraint\n  {\n    // Define the conditions for the constraint\n    Condition fullFuelTankCondition\n    {\n      // Define the condition for full fuel tank\n      When fullFuelTank\n      {\n        // Define the maximum mass for full fuel tank\n        MaximumMass = 2000 kg\n      }\n    }\n\n    // Define the condition for empty fuel tank\n    Condition emptyFuelTankCondition\n    {\n      // Define the condition for empty fuel tank\n      When emptyFuelTank\n      {\n        // Define the maximum mass for empty fuel tank\n        MaximumMass = 1500 kg\n      }\n    }\n  }\n\n  // Define the engine and its torque characteristics\n  Component myEngine\n  {\n    // Define the engine's torque characteristics\n    Requirement torqueCharacteristics\n    {\n      // Define the specified torque characteristics\n      SpecifiedTorque = 300 Nm at 2000 rpm\n      SpecifiedTorque = 250 Nm at 3",
    "system VehiclePerformanceAnalyzer\n{\n    // Define system properties, functions, and interactions\n    // ...\n}\n```package VehiclePerformanceAnalyzer\n{\n    // Define package contents\n    // ...\n}\n```package VehiclePerformanceAnalyzer::VehicleAttributes\n{\n    // Define vehicle attributes\n    // ...\n}\n```package VehiclePerformanceAnalyzer::DrivingCycles\n{\n    // Define driving cycles\n    // ...\n}\n```package VehiclePerformanceAnalyzer::PerformanceCalculations\n{\n    // Define performance calculations\n    // ...\n}\n```package VehiclePerformanceAnalyzer::ComplianceVerification\n{\n    // Define compliance verification\n    // ...\n}\n```package VehiclePerformanceAnalyzer::ConfigurationOptions\n{\n    // Define configuration options\n    // ...\n}\n```package VehiclePerformanceAnalyzer::DataSupport\n{\n    // Define data support\n    // ...\n}\n```package VehiclePerformanceAnalyzer::DecisionMaking\n{\n    // Define decision making\n   ",
    "system SimulationAnalysis\n{\n  // Define the system elements\n  // Define the system interactions\n  // Define the system behavior\n}\n```system SimulationAnalysis\n{\n  // Define the system elements\n  elements\n  {\n    VehicleParameters : ParameterSet\n    {\n      curbWeight : RealParameter\n      load : RealParameter\n      wheelDiameter : RealParameter\n      transmissionEfficiency : RealParameter\n    }\n\n    DrivingScenarios : ParameterSet\n    {\n      urban : RealParameter\n      highway : RealParameter\n    }\n\n    VehicleDynamics : Block\n    {\n      requiredWheelPower : OutputPort\n      acceleration : OutputPort\n      energyConsumption : OutputPort\n      enginePowerDemand : OutputPort\n    }\n\n    SimulationResults : Block\n    {\n      fuelConsumption : OutputPort\n      fuelEconomy : OutputPort\n    }\n  }\n\n  // Define the system interactions\n  interactions\n  {\n    connect VehicleParameters.curbWeight -> VehicleDynamics.curbWeight\n    connect VehicleParameters.load -> VehicleDynamics.load\n    connect VehicleParameters.wheel",
    "System mySystem\n{\n  // Define the types of engines\n  Enumeration EngineType\n  {\n    fourCylinder\n    sixCylinder\n  }\n\n  // Define the key performance indicators\n  Property power : Real\n  Property mass : Real\n  Property efficiency : Real\n  Property cost : Real\n\n  // Define the evaluation function\n  Function evaluationFunction(power, mass, efficiency, cost) : Real\n  {\n    return (power * efficiency) / (mass + cost)\n  }\n\n  // Define the engine selection analysis\n  Flow analysisFlow : Analysis\n  {\n    input Engines : Collection(Engine)\n    output RecommendedEngine : Engine\n\n    // Define the engine class\n    Class Engine\n    {\n      type : EngineType\n      power : Real\n      mass : Real\n      efficiency : Real\n      cost : Real\n    }\n\n    // Define the analysis steps\n    Step aggregateData\n    {\n      input Engines\n      output AggregatedData : Collection(Engine)\n\n      // Aggregate data for each engine type\n      for each engine in Engines\n      {\n        if engine",
    "System mySystem {\n  // Define the system properties, requirements, and other elements here\n}\n```System mySystem {\n  Property curbWeight : Real = 2500;\n\n  Requirement vehicleWeightRequirement {\n    Name = \"Curb weight requirement\";\n    Description = \"The curb weight of each vehicle must be less than or equal to 2,500 kilograms.\";\n    Specification = \"curbWeight\";\n  }\n\n  Flow weightDataFlow {\n    Name = \"Weight data flow\";\n    Source = \"Vehicle\";\n    Target = \"DataProcessor\";\n  }\n\n  Flow processedDataFlow {\n    Name = \"Processed data flow\";\n    Source = \"DataProcessor\";\n    Target = \"Evaluator\";\n  }\n\n  Flow evaluationResultFlow {\n    Name = \"Evaluation result flow\";\n    Source = \"Evaluator\";\n    Target = \"ResultReporter\";\n  }\n\n  Block DataCollector {\n    Name = \"Data Collector\";\n    Input = weightDataFlow;\n  }\n\n  Block DataProcessor {\n    Name = \"Data Processor\";",
    "system MassVerificationSystem\n{\n  // Define the system elements\n  Vehicle v;\n  WeighingEquipment we;\n  MassVerificationUnit mvu;\n\n  // Define the system structure\n  v -> we : uses;\n  we -> mvu : uses;\n\n  // Define the system behavior\n  mvu -> v : inspects;\n}\n```",
    "!Model (\n    name \"Transportation System\"\n    ownedTemplateParameter [\n        TemplateParameter (\n            name \"VehicleType\"\n            type \"String\"\n        )\n    ]\n    ownedRule [\n        Rule (\n            name \"EnsureRideExperience\"\n            specification (\n                \"forall Vehicle in ownedElement and Passenger in Vehicle.passenger\n                ensures Vehicle.rideExperience >= 5\"\n            )\n        )\n    ]\n    ownedElement [\n        System (\n            name \"TransportationSystem\"\n            ownedConnector [\n                Connector (\n                    name \"VehicleToDriver\"\n                    type \"Communication\"\n                    end [\n                        PartRef (\n                            name \"Driver\"\n                            type \"Human\"\n                        )\n                        PartRef (\n                            name \"Vehicle\"\n                            type \"Vehicle\"\n                        )\n                    ]\n                )\n                Connector (\n                    name \"VehicleToPassenger\"\n                    type \"Communication\"\n                    end [\n                        PartRef (\n                            name \"Passenger\"\n                            type \"Human\"\n                        )\n                        PartRef (\n                            name \"Vehicle\"\n                            type \"Vehicle\"\n",
    "system TransportationSystem\n{\n  // Define the system's properties, behaviors, and interactions\n}\n```package TransportationSystemPackage\n{\n  // Define the system's components, connectors, and other elements\n}\n```package TransportationSystemPackage\n{\n  system TransportationSystem\n  {\n    // Define the system's properties, behaviors, and interactions\n  }\n}\n```package TransportationSystemPackage\n{\n  system TransportationSystem\n  {\n    // Define the system's properties, behaviors, and interactions\n    input Port enterVehicle;\n    output Port exitVehicle;\n    flow EnterVehicleFlow\n    {\n      source enterVehicle;\n      target exitVehicle;\n    }\n  }\n}\n```package TransportationSystemPackage\n{\n  system TransportationSystem\n  {\n    // Define the system's properties, behaviors, and interactions\n    input Port enterVehicle;\n    output Port exitVehicle;\n    flow EnterVehicleFlow\n    {\n      source enterVehicle;\n      target exitVehicle;\n    }\n    flow Ref",
    "system ConfigurationManagementSystem\n{\n    // Define the types of engines\n    type Engine\n    {\n        property cylinders : Integer[4, 6]\n        property cylinderDiameter : Integer[70, 100]\n    }\n\n    // Define the types of transmissions\n    type Transmission\n    {\n        property type : String[\"Manual\", \"Automatic\"]\n    }\n\n    // Define the vehicle configuration\n    type Vehicle\n    {\n        property engine : Engine\n        property transmission : Transmission\n    }\n\n    // Define the constraints\n    constraint CombinationConstraint\n    {\n        source Vehicle.engine.cylinders == 4 implies Vehicle.transmission.type == \"Manual\"\n        source Vehicle.engine.cylinders == 6 implies Vehicle.transmission.type == \"Automatic\"\n    }\n\n    // Define the configuration management system\n    assembly ConfigurationManagementSystem\n    {\n        assemblyElement Vehicle\n        {\n            property engine : Engine\n            property transmission : Transmission\n        }\n    }\n}\n```",
    "system MyEngine\n{\n  // Define the engine variants\n  property MyEngineVariant : String\n  {\n    values \"FourCylinder\", \"SixCylinder\"\n  }\n\n  // Define the cylinder properties\n  property CylinderDiameter : String\n  {\n    values \"70mm\", \"100mm\"\n  }\n\n  // Define the engine configuration\n  property CylinderQuantity : Integer\n  {\n    min 4\n    max 6\n  }\n\n  // Define the engine types\n  type MyEngineType : Type\n  {\n    CylinderQuantity : Integer\n    CylinderDiameter : String\n  }\n\n  // Define the engine instances\n  instance MyFourCylinderEngine : MyEngineType\n  {\n    CylinderQuantity = 4\n    CylinderDiameter = \"70mm\"\n  }\n\n  instance MySixCylinderEngine : MyEngineType\n  {\n    CylinderQuantity = 6\n    CylinderDiameter = \"70mm\"\n  }\n\n  // Define the configurable aspects\n  configuration MyEngineConfig : Configuration\n  {\n   ",
    "system ConfigurationSpace\n{\n    // Define the types of engines and transmissions\n    type Engine\n    {\n        property CylinderType : String(4-cylinder | 6-cylinder)\n        property CylinderDiameter : String(70mm | 100mm)\n    }\n\n    type Transmission\n    {\n        property Type : String(manual | automatic)\n    }\n\n    // Define the configuration space\n    property Configurations : Set(Configuration)\n\n    // Define the configuration class\n    class Configuration\n    {\n        // Define the relationships between configurations, engines, and transmissions\n        has engine : Engine\n        has transmission : Transmission\n\n        // Define the constraints\n        constraint EngineTypeConstraint :\n            if (engine.CylinderType == \"4-cylinder\")\n            {\n                transmission.Type == \"manual\"\n            }\n            else if (engine.CylinderType == \"6-cylinder\")\n            {\n                transmission.Type == \"automatic\"\n            }\n    }\n}\nThis output meets the requirements by defining the types of engines and transmissions, the configuration space, and the configuration class with the",
    "System mySystem {\n  SystemAssembly mySystemAssembly {\n    includes {\n      System myComputerSubsystem {\n        // Define message format and data format\n      }\n      System myStorageSubsystem {\n        // Define message format and data format\n      }\n    }\n  }\n}\n```System mySystem {\n  SystemAssembly mySystemAssembly {\n    includes {\n      System myComputerSubsystem {\n        // Define message format and data format\n      }\n      System myStorageSubsystem {\n        // Define message format and data format\n      }\n    }\n  }\n}\n```",
    "system PowertrainSystem\n{\n  // Define the logical layer\n  layer LogicalLayer\n  {\n    // Define the logical components\n    component LogicalComponent\n    {\n      // Define the torque generator\n      component TorqueGenerator\n      {\n        // Define the power to torque conversion function\n        feature ConvertPowerToTorque\n      }\n    }\n  }\n\n  // Define the physical layer\n  layer PhysicalLayer\n  {\n    // Define the physical components\n    component PhysicalComponent\n    {\n      // Define the power unit\n      component PowerUnit\n      {\n        // Define the power output and torque generation capabilities\n        feature PowerOutput\n        feature TorqueGeneration\n      }\n    }\n  }\n\n  // Define the mapping relationship between logical and physical layers\n  mapping Mapping\n  {\n    source LogicalLayer.LogicalComponent.TorqueGenerator\n    target PhysicalLayer.PhysicalComponent.PowerUnit\n    {\n      // Define the mapping features\n      feature ConvertPowerToTorque maps PowerOutput\n      feature ConvertPowerToTorque maps TorqueGeneration\n    }\n  }\n}\n```",
    "system PowerTransmissionSystem\n{\n  // Define components\n  component TorqueGenerator\n  {\n    // Define capabilities\n    capability GenerateTorque\n  }\n\n  component Engine\n  {\n    // Define capabilities\n    capability GenerateTorque\n  }\n\n  // Define relationships\n  relationship PowerTransmissionSystem.TorqueGenerator -> Engine\n}\n``````",
    "system VehicleFeatureAnnotationSystem\n{\n    // Define the main assemblies\n    assembly Interior\n    {\n        // Define components within the interior assembly\n        component SeatBelts\n        component FrontSeats\n        component DriverAirbag\n        component AlarmSystem\n    }\n\n    assembly BodyAssembly\n    {\n        // Define components within the body assembly\n        component BodyShell\n        component Bumpers\n        component KeylessEntryDevice\n    }\n\n    // Define the relationships between assemblies\n    assembly Interior -> BodyAssembly\n    {\n        // Define the relationships between components within the same assembly\n        SeatBelts -> FrontSeats\n        DriverAirbag -> AlarmSystem\n\n        // Define the relationships between components across assemblies\n        SeatBelts -> BodyShell\n        DriverAirbag -> Bumpers\n        AlarmSystem -> KeylessEntryDevice\n    }\n}\n``````",
    "plantuml\n@startuml\n!define RECTANGLE class\n!define DIAMOND decision\n!define LINELINE :\n!define LINE :\n\nRECTANGLE System\n\nRECTANGLE Actor\nRECTANGLE Actor\n\nDIAMOND UseCase\n\nRECTANGLE <<Interface>> DataTransfer\nRECTANGLE <<Interface>> Analysis\n\nRECTANGLE ModelCenter\n\nRECTANGLE PhysicalModel\n\nRECTANGLE SimulationOutput\n\nSystem \"System\" {\n    Actor \"User\"\n    Actor \"User\"\n    UseCase \"Automated Simulation and Analysis\"\n    DataTransfer \"DataTransfer\"\n    Analysis \"Analysis\"\n    ModelCenter \"ModelCenter\"\n    PhysicalModel \"PhysicalModel\"\n    SimulationOutput \"SimulationOutput\"\n}\n\nDataTransfer \"DataTransfer\" {\n    <<include>> InputParameters\n    <<include>> OutputParameters\n}\n\nAnalysis \"Analysis\" {\n    <<include>> Simulation\n}\n\nModelCenter \"ModelCenter\" {\n    <<include>> Integration\n}\n\nPhysicalModel \"PhysicalModel\" {\n    <<include>> Integration\n}",
    "System {\n  name \"Car Safety Compliance Model\"\n  packages Package {\n    package \"Safety Features\" {\n      elements Component {\n        component \"Seat Belt 1\" {\n          isMandatory true\n          @Safety\n        }\n        component \"Seat Belt 2\" {\n          isMandatory true\n          @Safety\n        }\n      }\n    }\n    package \"Mandatory Safety Features\" {\n      elements Component {\n        component \"Bumper\" {\n          isMandatory true\n          @Safety\n        }\n      }\n    }\n    package \"Body\" {\n      elements Component {\n        component \"Driver's Airbag\" {\n          isOptional true\n        }\n      }\n    }\n    package \"Wheels\" {\n      elements Component {\n        component \"Wheel 1\" {\n          isMandatory true\n        }\n        component \"Wheel 2\" {\n          isMandatory true\n        }\n        component \"Anti-Lock Braking System\" {\n          isOptional true\n        }\n      }\n    }\n  }\n}\n``````",
    "SystemDefinition: System vehicleSafetyComplianceSystem\n{\n  System: vehicle\n  {\n    Component: seatBelts\n    {\n      RequiredFeature: safetyFeature\n      {\n        Mandatory: true\n      }\n    }\n    Component: seatBelts2\n    {\n      RequiredFeature: safetyFeature\n      {\n        Mandatory: true\n      }\n    }\n    Component: driverAirbag\n    {\n      RequiredFeature: safetyFeature\n      {\n        Mandatory: false\n      }\n    }\n    Component: vehicleBody\n    {\n      RequiredFeature: bumper\n      {\n        Mandatory: true\n      }\n      RequiredFeature: keylessEntrySystem\n      {\n        Mandatory: false\n      }\n    }\n    Component: chassis\n    {\n      RequiredFeature: tires\n      {\n        Mandatory: true\n        Count: 4\n      }\n      RequiredFeature: abs\n      {\n        Mandatory: false\n      }\n    }\n  }\n}\n```plaintext\nSystemDefinition: System vehicleSafetyComplianceSystem\n{\n  System: vehicle\n  {\n",
    "System mySystem\n{\n  // Define the system elements and relationships\n}\n```System mySystem\n{\n  // Define the system elements and relationships\n  RiskAnalysis myRiskAnalysis\n  {\n    // Define the elements and relationships for risk analysis\n  }\n}\n```System mySystem\n{\n  // Define the system elements and relationships\n  RiskAnalysis myRiskAnalysis\n  {\n    // Define the elements and relationships for risk analysis\n    Situation mySituation\n    {\n      // Define the elements and relationships for situations\n    }\n  }\n}\n```System mySystem\n{\n  // Define the system elements and relationships\n  RiskAnalysis myRiskAnalysis\n  {\n    // Define the elements and relationships for risk analysis\n    Situation mySituation\n    {\n      // Define the elements and relationships for situations\n      Cause myCause\n      {\n        // Define the elements and relationships for causes\n      }\n    }\n  }\n}\n```System mySystem\n{\n  // Define the system elements and relationships\n",
    "SystemDefinition : System systemRiskMetadataModel\n{\n    System sysRiskMetadataModel\n    {\n        // Define the system properties, behaviors, and interactions\n    }\n}\n```System sysRiskMetadataModel\n{\n    // Define the system properties, behaviors, and interactions\n}\n```Package : RiskMetadataModel\n{\n    // Define the metadata model components\n}\n```Package RiskMetadataModel\n{\n    // Define the metadata model components\n}\n```Package : Scenarios\n{\n    // Define the scenarios and their components\n}\n```Package Scenarios\n{\n    // Define the scenarios and their components\n}\n```Package : Causes\n{\n    // Define the causes and their components\n}\n```Package Causes\n{\n    // Define the causes and their components\n}\n```Package : Failures\n{\n    // Define the failures and their components\n}\n```Package Failures\n{\n",
    "System mySystem {\n  // Define system elements and interactions\n}\n```System mySystem {\n  // Define system elements and interactions\n  Package systemComponents {\n    // Define components of the system\n    Component batteryMonitor {\n      // Define properties and behaviors\n    }\n    Component battery {\n      // Define properties and behaviors\n    }\n  }\n  Package systemOperations {\n    // Define operations and interactions\n    Operation monitorBatteryLevel {\n      // Define behavior\n    }\n    Operation analyzeRisk {\n      // Define behavior\n    }\n    Operation determineLowBatteryState {\n      // Define behavior\n    }\n    Operation analyzeFailureSeverity {\n      // Define behavior\n    }\n  }\n  Package systemFlows {\n    // Define data flows and interactions\n    Flow monitorBatteryLevelFlow {\n      source : batteryMonitor.batteryLevel\n      target : monitorBatteryLevel.input\n    }\n    Flow analyzeRiskFlow {\n      source : batteryMonitor.riskProbability\n      target : analyzeRisk.input\n    }\n    Flow determineLowBatteryStateFlow {\n      source : battery.level\n      target :",
    "SystemDefinition : System mySystem\n{\n    System mySystem\n    {\n        // Define system components and their relationships\n        Component myComponent1\n        {\n            // Define properties and interfaces\n        }\n        Component myComponent2\n        {\n            // Define properties and interfaces\n        }\n        // Define other components and their relationships\n\n        // Define system interfaces\n        Interface myInterface1\n        {\n            // Define properties and operations\n        }\n        Interface myInterface2\n        {\n            // Define properties and operations\n        }\n        // Define other interfaces\n\n        // Define system subsystems\n        System mySubsystem1\n        {\n            // Define components and interfaces within the subsystem\n        }\n        System mySubsystem2\n        {\n            // Define components and interfaces within the subsystem\n        }\n        // Define other subsystems\n    }\n}\n```SystemDefinition : System mySystem\n{\n    System mySystem\n    {\n        // Define system components and their relationships\n        Component myComponent1\n        {\n            // Define properties and interfaces\n        }\n        Component myComponent2\n        {\n           ",
    "system System\n{\n    // Define the system components and their relationships\n    components\n    {\n        // Define the root component\n        RootComponent : Component\n        {\n            // Define the subsystems and components within the root component\n            subsystems\n            {\n                Subsystem1 : Component\n                {\n                    // Define the components within the subsystem\n                    components\n                    {\n                        Component1 : Component\n                        {\n                            // Define the interfaces of the component\n                            interfaces\n                            {\n                                Interface1 : Interface\n                            }\n                        }\n                        Component2 : Component\n                        {\n                            // Define the interfaces of the component\n                            interfaces\n                            {\n                                Interface2 : Interface\n                            }\n                        }\n                    }\n                }\n                Subsystem2 : Component\n                {\n                    // Define the components within the subsystem\n                    components\n                    {\n                        Component3 : Component\n                        {\n                            // Define the interfaces of the component\n                            interfaces\n                            {\n                                Interface3 : Interface\n                            }\n                        }\n                        Component4 : Component\n                        {\n                            // Define the interfaces of the component\n                            interfaces\n                            {\n                                Interface4 : Interface\n                            }",
    "system AutomobileSystem\n{\n    // Core component\n    component Car as \"汽车 (Car)\"\n    {\n        // Explanatory comments\n        comment \"汽车 (Car) 是核心组件，用于表示汽车。\"\n\n        // Physical quantity association\n        property Torque as \"扭矩 (Torque)\"\n    }\n}\nThis output must be a valid SysML v2 textual model, strictly adhering to the BNF grammar provided.",
    "system AutomobileDocumentManagementPlatform\n{\n  // Define the core object\n  class Automobile\n  {\n    // Attributes\n    string name;\n    string description;\n    // Associations\n    Association hasMany Documents;\n  }\n\n  // Define the alias for the core object\n  alias Automobile Car;\n\n  // Define the document management system\n  package DocumentManagementSystem\n  {\n    // Define the document class\n    class Document\n    {\n      // Attributes\n      string title;\n      string content;\n      string timestamp;\n      // Associations\n      Association belongsTo Automobile;\n    }\n\n    // Define the physical quantity system\n    package PhysicalQuantitySystem\n    {\n      // Define the standard for torque\n      class ISQ\n      {\n        // Attributes\n        string standardName = \"International System of Quantities\";\n        string version = \"latest\";\n        // Associations\n        Association defines PhysicalQuantity;\n      }\n\n      // Define the physical quantity\n      class PhysicalQuantity\n      {\n        // Attributes\n        string quantityName;\n        string unit;\n        // Associations\n        Association measuredBy ISQ;",
    "import \"http://www.omg.org/spec/SysML/20160301\" as sysml;\n\n// Define the Automobile class\nclass Automobile {\n  // Properties\n  sysml::String name;\n  sysml::Real torqueValue;\n\n  // Operations\n  void setTorqueValue(in sysml::Real newTorqueValue) {\n    torqueValue = newTorqueValue;\n  }\n}\n\n// Define the alias for Automobile\nalias Car = Automobile;\n\n// Define the alias for torque value\nalias Torque = sysml::Real;\n\n// Define the import for basic physical quantities\nimport \"http://www.omg.org/spec/PhysicalProperties/1.0\" as physprops;\n\n// Define the import for scalar physical quantities\nimport \"http://www.omg.org/spec/ScalarPhysicalQuantities/1.0\" as scalprops;\n```",
    "plantuml\n@startuml\n\npackage \"Vehicle System\" {\n    package \"Vehicle\" {\n        class BasicVehicle {\n            +engine : Engine\n        }\n        class Engine {\n            +cylinders : int\n        }\n    }\n}\n\n@enduml\n```plantuml\n@startuml\n\npackage \"Vehicle System\" {\n    package \"Vehicle\" {\n        class BasicVehicle {\n            +engine : Engine\n        }\n        class Engine {\n            +cylinders : int\n        }\n        enum VehicleSize {\n            SMALL\n            STANDARD\n            LARGE\n        }\n    }\n    package \"Configuration\" {\n        class Configuration {\n            +selectCylinders(vehicleSize : VehicleSize) : int\n        }\n    }\n}\n\n@enduml\n```plantuml\n@startuml\n\npackage \"Vehicle System\" {\n    package \"Vehicle\" {\n        class BasicVehicle {\n            +engine : Engine\n        }\n        class Engine {\n",
    "system TankSystem\n{\n    // Define the system components\n    components\n    {\n        // Define the fuel tank\n        component FuelTank\n        {\n            // Define the interfaces\n            interfaces\n            {\n                // Define the fuel supply interface\n                interface FuelSupply\n                {\n                    // Define the data\n                    data fuelFlow\n                    {\n                        type Float\n                        min 0.0\n                        max 100.0\n                    }\n                }\n                // Define the fuel return interface\n                interface FuelReturn\n                {\n                    // Define the data\n                    data fuelFlow\n                    {\n                        type Float\n                        min 0.0\n                        max 100.0\n                    }\n                }\n            }\n        }\n        // Define the engine\n        component Engine\n        {\n            // Define the interfaces\n            interfaces\n            {\n                // Define the fuel supply interface\n                interface FuelSupply\n                {\n                    // Define the data\n                    data fuelFlow\n                    {\n                        type Float\n                        min 0.0\n                        max 100.0\n                    }\n                }\n                // Define the",
    "system Vehicle\n{\n  // Define the core components of the vehicle\n  components\n  {\n    // The vehicle as a whole\n    Component Vehicle\n    {\n      // Attribute for mass\n      attributes\n      {\n        Attribute mass = 1750.0\n      }\n    }\n\n    // Axle assemblies\n    Component AxleAssembly\n    {\n      // Front and rear axle assemblies\n      Component FrontAxleAssembly\n      {\n        // Components of the front axle assembly\n        components\n        {\n          // Front axle\n          Component FrontAxle\n        {\n          // Attribute for steering angle\n          attributes\n          {\n            Attribute steeringAngle = 0.0\n          }\n        }\n          // Wheels on the front axle\n          Component Wheel\n        }\n      }\n\n      Component RearAxleAssembly\n      {\n        // Components of the rear axle assembly\n        components\n        {\n          // Rear axle\n          Component RearAxle\n        {\n          // Wheels on the rear axle\n          Component Wheel\n        }\n        }\n      }\n    }\n  }\n}\n```sys"
]