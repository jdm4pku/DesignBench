[
    "package 'Vehicle' {\n\tattribute def vehicleMass;\n\tattribute def currentStatus;\n\tattribute def engine;\n\tattribute def driver;\n\tattribute def gearSetting;\n\tattribute def acceleratorPedalPosition;\n\tport def statusPort {\n\t\tout currentStatus : currentStatus;\n\t\tout gearSetting = gearSetting;\n\t\tout acceleratorPedalPosition = acceleratorPedalPosition;\n\t}\n\tport def enginePort {\n\t\tout engine : engine;\n\t\tin gearSetting = gearSetting;\n\t\tin acceleratorPedalPosition = acceleratorPedalPosition;\n\t}\n\tport def driverPort {\n\t\tout driver : driver;\n\t\tin gearSetting = gearSetting;\n\t\tin acceleratorPedalPosition = acceleratorPedalPosition;\n\t}\n\tpart vehicle {\n\t\tpart engine {\n\t",
    "--start\n\nentity 'Personnel' {\n\t+id\n\t+name\n\t+age\n\t+gender\n\t+jobTitle\n\t+vehicle\n}\n\nentity 'Engine' {\n\t+id\n\t+name\n\t+type\n}\n\nentity 'Vehicle' {\n\t+id\n\t+name\n\t+type\n\t+personnel\n\t+engine\n}\n\nentity 'ManuallyOperatedVehicle' {\n\t+id\n\t+name\n\t+type\n\t+personnel\n}\n\nentity 'PoweredVehicle' {\n\t+id\n\t+name\n\t+type\n\t+engine\n}\n\nentity 'ManuallyOperatedPoweredVehicle' {\n\t+id\n\t+name\n\t+type\n\t+person",
    "package 'Vehicle' {\n\tattribute def MajorComponents;\n\tattribute def MinorComponents;\n\tport def MajorComponentsPort {\n\t\tout MajorComponent : MajorComponent;\n\t}\n\tport def MinorComponentsPort {\n\t\tout MinorComponent : MinorComponent;\n\t}\n\tpart MajorComponent {\n\t\tattribute def Name;\n\t\tattribute def Quantity;\n\t\tport def MajorComponentsPort {\n\t\t\tout MajorComponent : MajorComponent;\n\t\t}\n\t}\n\tpart MinorComponent {\n\t\tattribute def Name;\n\t\tattribute def Quantity;\n\t\tport def MinorComponentsPort {\n\t\t\tout MinorComponent : MinorComponent;\n\t\t}\n\t}\n\tinterface MajorComponentConnector {\n\t\tref MajorComponentConnector.MajorComponentConnector",
    "package 'Vehicle' {\n\tattribute def Type;\n\tattribute def Engine;\n\tport def EngineCylinders;\n\tport def EngineSubsystem;\n\tport def VehicleTypeCylinderCount;\n\tport def VehicleTypeEngineSubsystemCount;\n\tport def VehicleTypeTotalEnginePower;\n\tport def VehicleTypeTotalEngineTorque;\n\tport def VehicleTypeTotalEngineRPM;\n\tport def VehicleTypeTotalEngineFuelConsumption;\n\tport def VehicleTypeTotalEngineEfficiency;\n\tport def VehicleTypeTotalEngineDisplacement;\n\tport def VehicleTypeTotalEngineWeight;\n\tport def VehicleTypeTotalEnginePowerOutput;\n\tport def VehicleTypeTotalEngineTorqueOutput;\n\tport def VehicleTypeTotalEngineRPMOutput;\n\t",
    "package 'TrafficSignal' {\n\tattribute def ColorState;\n\tattribute def GreenState;\n\tport def ColorStatePort {\n\t\tout ColorState = ColorState;\n\t}\n\tport def GreenStatePort {\n\t\tout GreenState = GreenState;\n\t}\n\tpart context {\n\t\tpart trafficSignal {\n\t\t\tport ColorStatePort: ColorStatePort;\n\t\t\tport GreenStatePort: GreenStatePort;\n\t\t\tperform changeColorState {\n\t\t\t\tin ColorState = ColorStatePort.ColorState;\n\t\t\t\tout GreenState = GreenStatePort.GreenState;\n\t\t\t}\n\t\t\tinterface trafficSignalToTrafficLight connect trafficSignal.ColorState to trafficLight.ColorState;\n\t\t}\n\t\tpart trafficLight {\n\t\t\tport ColorStatePort: ColorStatePort;\n\t\t\tport GreenStatePort: GreenStatePort;\n\t\t\tport trafficSignalPort: trafficSignal.ColorState;",
    "class 'TrafficLightSystem' {\n\t+---------------+---------------+---------------+---------------+---------------+---------------+\n\t| Information   | Classification | Color         | Score         | Grade         |\n\t+---------------+---------------+---------------+---------------+---------------+\n\t| Unclassified   | Unclassified   | Green         | 4.0           | A            |\n\t| Confidential   | Confidential   | Yellow        | 3.0           | B            |\n\t| Secret      ",
    "package 'Vehicle' {\n\tattribute def Type;\n\tattribute def Engine;\n\tport def EngineCylinders;\n\tport def PowerOutput;\n\tpart engine {\n\t\tattribute def Cylinders;\n\t\tport def PowerOutputPort {\n\t\t\tout powerOutput: PowerOutput;\n\t\t}\n\t}\n\tpart smallEngine {\n\t\tattribute def Cylinders;\n\t\tport def PowerOutputPort {\n\t\t\tout powerOutput: PowerOutput;\n\t\t}\n\t}\n\tpart largeEngine {\n\t\tattribute def Cylinders;\n\t\tport def PowerOutputPort {\n\t\t\tout powerOutput: PowerOutput;\n\t\t}\n\t}\n\tinterface engineToPowerOutput connect engine.PowerOutputPort to powerOutput.powerOutput;\n\tinterface engineToCylinders connect engine.Cylinders to smallEngine.",
    "package 'Vehicle' {\n\tattribute def Type;\n\tattribute def FuelType;\n\tattribute def FuelTankCapacity;\n\tattribute def DriverInfo;\n\tport def DriverInfoPort {\n\t\tout driverInfo: DriverInfo;\n\t}\n\tport def FuelTankPort {\n\t\tout fuelTankCapacity: FuelTankCapacity;\n\t}\n\tport def FuelTypePort {\n\t\tout fuelType: FuelType;\n\t}\n\tpart driver {\n\t\tport def DriverInfoPort: DriverInfoPort;\n\t\tpart fuelTank {\n\t\t\tport def FuelTankPort: FuelTankPort;\n\t\t\tport def fuelTypePort: FuelTypePort;\n\t\t\tperform manageFuel.fuelTank {\n\t\t\t\tin fuelTankCapacity = fuelTankPort.fuelTankCapacity;\n\t\t\t\tout fuelType = fuelTypePort.fuel",
    "package 'AutomobileWheelAssembly' {\n\tattribute def WheelBearingUnit;\n\tattribute def Tire;\n\tattribute def Bead;\n\tattribute def Hub;\n\tattribute def Rim;\n\tattribute def BoltMountingHole;\n\tattribute def HubThreadedHole;\n\tattribute def BoltConnection;\n\tport def WheelBearingUnitPort {\n\t\tout beadMountingHole: BoltMountingHole;\n\t\tout hubMountingHole: BoltMountingHole;\n\t}\n\tport def TirePort {\n\t\tout tireBead: Bead;\n\t\tout tireHub: Hub;\n\t}",
    "package 'FuelManagement' {\n\tattribute def fuelTankAssembly;\n\tattribute def engine;\n\tport def fuelTankAssemblyPort {\n\t\tout fuel: fuelTankAssembly.fuel;\n\t\tin excessFuel: fuelTankAssembly.excessFuel;\n\t}\n\tport def enginePort {\n\t\tout fuelReturn: engine.fuelReturn;\n\t\tin fuelSupply: engine.fuelSupply;\n\t}\n\tport def temperaturePort {\n\t\tout temperature: fuelTankAssembly.temperature;\n\t\tin fuelTankAssembly.temperatureRequested {\n\t\t\tout fuelTankAssembly.temperature: temperature;\n\t\t}\n\t}\n\tpart fuelTankAssembly {\n\t\tport def fuelTankAssemblyPort {\n\t\t",
    "\nclass 'Vehicle' {\n\tobject 'TotalMass' : DefinedType(Integer);\n\tobject 'FrontAxle' : DefinedType(Axle);\n\tobject 'RearAxle' : DefinedType(Axle);\n\tobject 'Tires' : DefinedType(Tire);\n\tobject 'VehicleConfiguration' : DefinedType(VehicleConfiguration);\n\t",
    "package 'CouplingSystem' {\n\tattribute def Vehicle;\n\tattribute def Trailer;\n\tattribute def CouplingMechanism;\n\tport def CouplingMechanismPort {\n\t\tout couplingMechanism: CouplingMechanism;\n\t}\n\tport def VehiclePort {\n\t\tout vehicle: Vehicle;\n\t}\n\tport def TrailerPort {\n\t\tin vehicle: Vehicle;\n\t\tout trailer: Trailer;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport CouplingMechanismPort: CouplingMechanismPort;\n\t",
    "\nThe vehicle power transmission system is composed of several components that work together to transmit power from the engine to the wheels. The system is designed to be modular and reconfigurable, allowing for",
    "\nThe given requirements do not seem to be directly related to an OMG SysML v2 textual model for a flash",
    "package 'AutomotivePowertrain' {\n\tattribute def TorqueCommand;\n\tattribute def StartUpCmd;\n\tattribute def PowerTransmission;\n\tattribute def Distribution;\n\tattribute def EngineStartUpCmd;\n\tattribute def EngineShutdownCmd;\n\tattribute def FuelCommand;\n\tattribute def VehicleSpeed;\n\tattribute def VehicleDirection;\n\tattribute def VehicleLoad;\n\tattribute def VehicleType;\n\tattribute def TransmissionType;\n\tattribute def DrivetrainType;\n\tattribute def FuelType;\n\tattribute def EngineType;\n\tattribute def FuelEfficiency;\n\tattribute def EnginePower;\n\tattribute def",
    "package 'AutomotivePowertrain' {\n\tattribute def MainFunction;\n\tport def FuelCtrlCmd {\n\t\tinout fuelControlCommand : FuelCtrlCmd;\n\t}\n\tport def TorqueGenerator {\n\t\tout torque: Torque;\n\t}\n\tport def TorqueAmplifier {\n\t\tinout torque : Torque;\n\t}\n\tport def TorqueDistributor {\n\t\tinout torque : Torque;\n\t}\n\tport def StallSignal {\n\t\tout stallSignal : StallSignal;\n\t}\n\tpart engine {\n\t\tpart context {\n\t\t\tpart user {\n\t\t\t\tport fuelCtrlCmd : FuelCtrlC",
    "package 'VehiclePowertrain' {\n\tattribute def startTorque;\n\tattribute def fuelInput;\n\tattribute def transmissionTorque;\n\tattribute def distributionTorque;\n\tattribute def engineShutdown;\n\tport def startTorquePort {\n\t\tout startTorque = startTorque;\n\t}\n\tport def fuelInputPort {\n\t\tout fuelInput = fuelInput;\n\t}\n\tport def transmissionTorquePort {\n\t\tout transmissionTorque = transmissionTorque;\n\t}\n\tport def distributionTorquePort {\n\t\tout distributionTorque = distributionTorque;\n\t}\n\tport def engineShutdownPort {\n\t\tout engineShutdown = engineShutdown;\n\t}\n\tpart engine {\n",
    "package 'PowerCoupling' {\n\tattribute def Vehicle;\n\tattribute def Trailer;\n\tattribute def Coupler;\n\tattribute def PowerStatus;\n\tport def VehiclePort {\n\t\tout powerStatus : PowerStatus;\n\t}\n\tport def TrailerPort {\n\t\tin powerStatus : PowerStatus;\n\t}\n\tport def CouplerPort {\n\t\tin powerStatus : PowerStatus;\n\t}\n\tpart vehicle {\n\t\tport def VehiclePort {\n\t\t\tout powerStatus = powerStatus;\n\t\t}\n\t}\n\tpart trailer {\n\t\tport def TrailerPort {\n\t\t\tin powerStatus = powerStatus;\n\t\t}\n\t}\n\tpart coupler {\n\t\tport def CouplerPort {\n\t\t\tin powerStatus = powerStatus;\n\t\t}\n\t",
    "package 'VehicleTrailerConnection' {\n\tattribute def vehicleChasis {\n\t\tref Chassis;\n\t}\n\tattribute def trailerFrame {\n\t\tref Frame;\n\t}\n\tattribute def towBall {\n\t\tref Ball;\n\t}\n\tattribute def coupler {\n\t\tref Coupler;\n\t}\n\tport def towBallPort {\n\t\tout towBall: towBall;\n\t}\n\tport def couplerPort {\n\t\tout coupler: coupler;\n\t}\n\tpart vehicle {\n\t\tpart chassis {\n\t\t\tport towBallPort: towBallPort;\n\t\t\tport couplerPort: coupler",
    "package 'VehicleTowballConnection' {\n\tattribute def Coupler;\n\tattribute def Vehicle;\n\tattribute def Trailer;\n\tport def CouplerPort {\n\t\tout Coupler : Coupler;\n\t}\n\tport def VehiclePort {\n\t\tout Vehicle : Vehicle;\n\t}\n\tport def TrailerPort {\n\t\tout Trailer : Trailer;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport CouplerPort: CouplerPort;\n\t\t\tport VehiclePort: VehiclePort;\n\t\t\tperform connectTrailer {\n\t\t\t\tout Coupler = Coupler;\n\t\t\t\tin vehicle = Vehicle;\n\t\t\t\tin trailer = Trailer;\n\t\t\t\tconnectTrailer.attach",
    "package 'FuelSystem' {\n\tattribute def FuelTank {\n\t\tport def fuelSupplyPort {\n\t\t\tout fuel: Fuel;\n\t\t}\n\t\tport def fuelReturnPort {\n\t\t\tin fuel: Fuel;\n\t\t}\n\t}\n\tattribute def Engine {\n\t\tport def fuelSupplyPort {\n\t\t\tin fuel: Fuel;\n\t\t}\n\t\tport def fuelReturnPort {\n\t\t\tout fuel: Fuel;\n\t\t}\n\t}\n\tattribute def FuelSupplyRoute {\n\t\tport def routeStart {\n\t\t\tout fuelSupplyPort: fuelSupplyPort;\n\t\t}\n\t\tport def routeEnd {\n\t\t\tin fuelReturnPort: fuelReturnPort;\n\t\t}",
    "package 'FuelDeliverySystem' {\n\tattribute def StorageTank {\n\t\tport def fuelReservoir;\n\t\tport def fuelPump;\n\t\tport def fuelTank;\n\t}\n\tattribute def Vehicle {\n\t\tport def fuelTank;\n\t\tport def maxFuelLevel;\n\t\tport def currentFuelLevel;\n\t}\n\tport def fuelReservoirPort {\n\t\tout fuelReservoir: fuelReservoir;\n\t}\n\tport def fuelPumpPort {\n\t\tout fuelPump: fuelPump;\n\t}\n\tport def fuelTankPort",
    "package 'AutomobileAssemblyProcess' {\n\tattribute def Step;\n\tattribute def Input;\n\tattribute def Output;\n\tattribute def AssemblyState;\n\tport def InputPort {\n\t\tout input: Input;\n\t}\n\tport def OutputPort {\n\t\tin output: Output;\n\t}\n\tport def AssemblyStatePort {\n\t\tout assemblyState: AssemblyState;\n\t}\n\tpart component {\n\t\tattribute def Name;\n\t\tattribute def Type;\n\t\tattribute def Status;\n\t\tport def InputPort {\n\t\t\tout input: Input;\n\t",
    "\nThe output model for the given requirements is a SysML v2 model of a Vehicle Control System with the following components:",
    "package 'Vehicle' {\n\tattribute def Shape;\n\tattribute def Color;\n\tattribute def Weight;\n\tattribute def FuelLevel;\n\tattribute def MaintenanceInterval;\n\tattribute def TemperatureThreshold;\n\tport def BrakePedalPort {\n\t\tout signal: Signal;\n\t}\n\tport def StartSignalPort {\n\t\tout signal: Signal;\n\t}\n\tport def InspectionPort {\n\t\t",
    "package 'Vehicle' {\n\tattribute def Mass;\n\tattribute def Position;\n\tattribute def Velocity;\n\tattribute def Acceleration;\n\tattribute def Slope;\n\tattribute def SurfaceFrictionCoefficient;\n\tattribute def SnapshotTime;\n\tport def DataInputPort {\n\t\tout data: Data;\n\t}\n\tport def DataOutputPort {\n\t\tin data: Data;\n\t}\n\tpart data {\n\t\trecord snapshotData {\n\t\t\ttime snapshotTime;\n\t\t\tvehicle stateData {\n\t\t\t\tmass mass;\n\t\t\t\tposition position;\n\t\t\t\tvelocity velocity;\n\t\t\t\tacceleration acceleration;\n\t\t\t",
    "\nclass 'MultiConfigProduct' {\n",
    "\nThe input requirement has been translated into an OMG SysML v2 textual model as follows:\n\npackage 'VehiclePlatform' {\n\n\tattribute DefineComponent;\n\tattribute DefineSubsystem;\n\tattribute DefineVehicleConfiguration;\n\tattribute DefineParameter;\n\tattribute Def",
    "package 'VehicleProductLineConfiguration' {\n\tattribute def Configuration;\n\tattribute def Engines;\n\tattribute def Transmissions;\n\tattribute def Wheels;\n\tport def ConfigurationPort {\n\t\tout Configuration : Configuration;\n\t}\n\tport def EnginesPort {\n\t\tout engine: Engines;\n\t}\n\tport def TransmissionsPort {\n\t\tout transmission: Transmissions;\n\t}\n\tport def WheelsPort {\n\t\tout wheel: Wheels;\n\t}\n\tpart Configuration {\n\t\tinterface ConfigurationInterface {\n\t\t\tref ConfigurationV",
    "\nThe system is an Automobile System with the following components:\n\n* Automobile:\n\t+ Mass:\n\t\t- 2000 kg\n\t\t- 2500 kg\n\t+ Fuel:\n\t\t- Full fuel\n\t\t- Empty fuel\n\t+ Powertrain",
    "package 'VehicleMassCompliance' {\n\tattribute def MaxMass;\n\tattribute def TestOperator;\n\tattribute def TestVehicle;\n\tattribute def ActualMass;\n\tattribute def ComplianceStatus;\n\tport def MaxMassPort {\n\t\tout maxMass: MaxMass;\n\t}\n\tport def TestOperatorPort {\n\t\tout operator: TestOperator;\n\t}\n\tport def TestVehiclePort {\n\t\tout vehicle: TestVehicle;\n\t}\n\tport def ActualMassPort {\n\t\tout actualMass: ActualMass;\n\t}\n\tport def ComplianceStatusPort {\n\t\tout complianceStatus: ComplianceStatus;\n\t}\n\tpart vehicleType {\n\t\tport",
    "package 'WaterSupplyNetwork' {\n\tattribute def MainSupplyPipe;\n\tattribute def Interfaces;\n\tattribute def Faucets;\n\tattribute def FaucetInlets;\n\tport def MainSupplyPipePort {\n\t\tout hotWaterPort: HotWaterPort;\n\t\tout coldWaterPort: ColdWaterPort;\n\t}\n\tport def InterfacesPort {\n\t\tout interface: Interface;\n\t}\n\tport def FaucetsPort {\n\t\tout faucet: Faucet;\n\t\tout faucetInletsPort: FaucetInletsPort;\n\t}\n\tport def FaucetInletsPort {\n\t\tout hotWaterInlet: HotWaterInlet;\n",
    "package 'Vehicle' {\n\tattribute def Mass;\n\tattribute def QualityData;\n\tattribute def AnalysisRequirements;\n\tattribute def AnalysisUseCases;\n\tport def QualityDataPort {\n\t\tout QualityData for input.QualityData;\n\t}\n\tport def AnalysisRequirementsPort {\n\t\tout AnalysisRequirements for input.AnalysisRequirements;\n\t}\n\tport def AnalysisUseCasesPort {\n\t\tout AnalysisUseCases for input.AnalysisUseCases;\n\t}\n\tpart vehicle {\n\t\tattribute def Mass;\n\t\tattribute def QualityData;\n\t\tattribute def AnalysisRequirements;\n\t\tattribute def AnalysisUseCases;\n\t\tport def QualityDataPort {\n\t",
    "model 'VehiclePowertrain' {\n\tattribute def keyPerformanceIndicators;\n\tattribute def engineType;\n\tattribute def engineConfiguration;\n\tattribute def components;\n\tport def keyPerformanceIndicatorsPort {\n\t\tout keyPerformanceIndicators = keyPerformanceIndicatorsPort.keyPerformanceIndicators;\n\t}\n\tport def engineTypePort {\n\t\tout engineType = engineTypePort.engineType;\n\t}\n\tport def engineConfigurationPort {",
    "package 'FuelEconomy' {\n\tattribute def MinFuelEconomy;\n\tattribute def MaxFuelEconomy;\n\tattribute def TestFuelEconomy;\n\tattribute def FuelType;\n\tattribute def VehicleType;\n\tattribute def DriveType;\n\tattribute def UrbanDrivingConditions;\n\tattribute def HighwayDrivingConditions;\n\tattribute def AdditionalLoad;\n\tattribute def FuelConsumption;\n\tattribute def FuelEfficiency;\n\tattribute def Fuel EconomyTest;\n\tattribute def TestDate;\n\tattribute def TestDistance;\n\tattribute def TestFuelType;\n\tattribute def TestVeh",
    "package 'VehicleMotion' {\n\tattribute def VehicleData {\n\t\tdef mass;\n\t\tdef position;\n\t\tdef velocity;\n\t\tdef powerOutput;\n\t}\n\tattribute def PowerOutputData {\n\t\tdef segmentedPowerOutput;\n\t}\n\tattribute def TimeStep {\n\t\tdef time;\n\t}\n\tport def VehicleDataPort {\n\t\tout vehicleData: VehicleData;\n\t\tin powerOutputPort: PowerOutputData;\n\t\tin timeStepPort: TimeStep;\n\t}\n\tinterface VehicleDataSource connect VehicleDataPort to vehicleData.VehicleData {\n\t\tref flow references vehicleData.positionFlow;\n\t\tref flow references vehicleData.velocityFlow;\n\t\tref flow references vehicleData.acceleration",
    "model 'Car' {\n\tparameter mass (1500 kg)\n\tparameter frontAxleMass (150 kg)\n\tparameter rearAxleMass (250 kg)\n\tparameter frontWheelMass (50 kg)\n\tparameter rearWheelMass (50 kg)\n\tparameter frontAxleSteeringAngle (0.1 rad)\n\tparameter rearAxleSteeringAngle (0.1 rad)\n\tparameter frontAxleInertialMass (500 kg)\n\tparameter rearAxleInertialMass (500 kg)\n\tparameter frontAxlePivotPoint",
    "package 'VehicleSafety' {\n\tattribute def mandatorySafetyFeatures;\n\tattribute def optionalSafetyFeatures;\n\tattribute def securityDevices;\n\tport def mandatorySafetyFeaturesPort {\n\t\tout mandatorySafetyFeatures : mandatorySafetyFeatures;\n\t}\n\tport def optionalSafetyFeaturesPort {\n\t\tout optionalSafetyFeatures : optionalSafetyFeatures;\n\t}\n\tport def securityDevicesPort {\n\t\tout securityDevices : security",
    "package 'System' {\n\tattribute def x;\n\tattribute def y;\n\tattribute def z;\n\tport def dataPort {\n\t\tout data: data;\n\t}\n\tport def servicePort {\n\t\tin serviceRequest: ServiceRequest;\n\t\tout serviceResponse: ServiceResponse;\n\t}\n\tport def applicationPort {\n\t\tin applicationRequest: ApplicationRequest;\n\t\tout applicationResponse: ApplicationResponse;\n\t}\n\tpart dataLayer {\n\t\tport def dataPort: dataPort;\n\t\tpart serviceLayer {\n\t\t\tport def servicePort: servicePort;\n\t\t\tport def dataPort: dataPort;\n\t\t\tport def xPort: xPort;\n\t\t\tport def yPort: yPort;\n\t\t\tport def zPort: zPort;\n\t\t\tport def xRef: xRef;\n\t\t\tport def yRef: yRef;\n\t\t\tport",
    "package 'TorqueGenerator' {\n\tattribute def Torque;\n\tport def TorquePort {\n\t\tout torque : Torque;\n\t}\n\tpart context {\n\t\tpart powertrain {\n\t\t\tport torquePort: TorquePort;\n\t\t\tinterface powertrainToTorque generator {\n\t\t\t\tref flow references generateTorqueFlow\n\t\t\t\t\tfrom source.torque to target.torque;\n\t\t\t}\n\t\t\tpart engine {\n\t\t\t\tport torquePort: TorquePort;\n\t\t\t\tinterface engineToTorque generator {\n\t\t\t\t\tref flow references generateTorqueFlow\n\t\t\t\t\t\tfrom source.torque to target.torque;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart transmission {\n\t\t\t\tport torquePort: TorquePort;\n\t\t",
    "package 'PowerSystem' {\n\tattribute def Power;\n\tattribute def Torque;\n\tattribute def Engine;\n\tport def PowerPort {\n\t\tout power: Power;\n\t}\n\tport def TorquePort {\n\t\tout torque: Torque;\n\t}\n\tpart engine {\n\t\tattribute def fuelType;\n\t\tattribute def displacement;\n\t\tattribute def outputPower;\n\t\tattribute def outputTorque;\n\t\tport def fuelInletPort {\n\t\t\tin power: Power;\n\t\t\tout torque: Torque;\n\t\t}\n\t\tport def powerOutletPort {\n\t\t\tout power: Power;\n\t\t\tout torque: Torque;\n\t\t}\n\t}\n\tpart powertrain {\n\t\tport def powertrainControlPort {\n\t\t\tin power: Power;\n\t\t\tout torque: Torque;",
    "(Note: The output model will not include explanations or commentary. It will only include valid SysML v2 code.)\n\npackage 'VehicleSafetyAntiTheft' {\n\tattribute def MinimalSafetyComponents;\n\tattribute def MandatorySafetyComponents;\n\tattribute def SafetyFeatures;\n\tattribute def SecurityComponents;\n\tattribute def Configuration;\n\tport def ConfigurationPort {\n\t",
    "package 'FuelSupply' {\n\tattribute def fuelTankAssembly;\n\tattribute def fuelPump;\n\tattribute def fuelConsumingUnits;\n\tattribute def returnLine;\n\tattribute def fuelTemperatureSensor;\n\tport def fuelTankAssemblyPort {\n\t\tout fuelTankAssembly: fuelTankAssembly;\n\t}\n\tport def fuelPumpPort {\n\t\tout fuelPump: fuelPump;\n\t}\n\tport def fuelConsumingUnitsPort {\n\t\tout fuelConsumingUnits: fuelConsumingUnits;\n\t}\n\tport def returnLinePort {\n\t\tout returnLine: returnLine;\n\t}\n\tport def fuelTemperatureSensorPort",
    "\npackage 'Vehicle' {\n\nattribute def seatBelts;\nattribute def airbag;\nattribute def antiTheftAlarm;\nattribute def bumper;\nattribute def keylessEntrySystem;\nattribute def antiLockBrakingSystems;\nattribute def identificationClassification;\n\npart seatBelts {\n\tport seatBeltsPort {\n\t\tout seatBelts: seatBelts;\n\t}\n\tinterface seatBeltsToVehicle connect seatBeltsPort to vehicle.seatBelts;\n\tpart vehicle {\n\t\tport seatBeltsPort:",
    "package 'VehicleSafetyAndSecurity' {\n\tattribute def Configuration;\n\tport def SafetyFeaturePort {\n\t\tout seatBelts : SafetyFeature;\n\t\tout airbags : SafetyFeature;\n\t\tout bumpers : SafetyFeature;\n\t\tout driverAirbag : SafetyFeature;\n\t}\n\tport def SecurityFeaturePort {\n\t\tout alarmSystem : SecurityFeature;\n\t\tout keylessEntrySystem : SecurityFeature;\n\t}\n\tpart Configuration {\n\t\tpart SafetyFeature {\n\t\t\treflects Configuration.SafetyFeatureRef;\n\t\t}\n\t\tpart SecurityFeature {\n\t\t\treflects Configuration",
    "package 'SecurityClassification' {\n\tattribute def Classification;\n\tport def ClassificationPort {\n\t\tout Classification : Classification;\n\t}\n\tpart class ConfidentialClassification {\n\t\tattribute def Classification;\n\t\tport def ClassificationPort: ClassificationPort;\n\t}\n\tpart class SecretClassification {\n\t\tattribute def Classification;\n\t\tport def ClassificationPort: ClassificationPort;\n\t}\n\tpart UnclassifiedClassification {\n\t\tattribute def Classification;\n\t\tport def ClassificationPort: ClassificationPort;\n\t}\n\tinterface ClassificationClassifier classifier {\n\t\tref ClassificationClassifier.classifyComponent {\n\t\t\tin ClassificationPort component : ClassificationClassification;\n\t\t\tout Classification : Classification;\n\t\t}\n\t}\n\taction classifyComponent {\n\t\tsuccession flow componentClassificationFlow from classifier.classifyComponent\n\t\t\twith input component : ClassificationClassification;\n\t\t\t",
    "model 'Automotive ECU Communication and Control Model' {\n\tparameter type = 'States';\n\tparameter name = 'Vehicle Control Unit (VCU)';\n\tparameter description = 'The Vehicle Control Unit (VCU) is responsible for monitoring and controlling the vehicle subsystems via the CAN bus.';\n\tparameter type = 'States';\n\tparameter name = 'Engine Control Unit (ECU)';\n\tparameter description = 'The Engine Control Unit (ECU) is responsible for monitoring and controlling the engine subsystems via the CAN bus.';\n\tparameter type = 'States';\n\tparameter name = 'Sensor Data Exchange';\n\tparameter description = 'Interfaces for sensor data exchange to support future",
    "package 'BloodGlucoseMeter' {\n\tattribute def BatteryStatus;\n\tattribute def AlarmStatus;\n\tattribute def EmergencyResponse;\n\tattribute def TherapeuticSupport;\n\tport def BatteryStatusPort {\n\t\tout batteryStatus : BatteryStatus;\n\t}\n\tport def AlarmStatusPort {\n\t\tout alarmStatus : AlarmStatus;\n\t}\n\tport def EmergencyResponsePort {\n\t\tout emergencyResponse : EmergencyResponse;\n\t}\n\tport def TherapeuticSupportPort {\n\t\tout therapeuticSupport : TherapeuticSupport;\n\t}\n\tpart battery {\n\t\tattribute def status;\n\t\tport def BatteryStatusPort {\n\t\t\tout batteryStatus = status;\n\t\t",
    "package 'StandardConstants' {\n\tattribute def Name;\n\tattribute def Value;\n\tunit def SI;\n\tcontext def Context;\n\tport def ValuePort {\n\t\tout value: Value;\n\t}\n\tport def SIUnitPort {\n\t\tout siUnit: SI;\n\t}\n\tport def ContextPort {\n\t\tout context: Context;\n\t}\n\tpart context {\n\t\tpart value {\n\t\t\tvaluePort: ValuePort;\n\t\t\tSIUnitPort: SIUnitPort;\n\t\t\tcontextPort: ContextPort;\n\t\t",
    "class Tire {\n\t+string manufacturer;\n\t+real rimDiameter;\n\t+integer width;\n\t+string brand;\n\t+real radius;\n\t+real loadIndex;\n\t+real temperature;\n\t+real pressure;\n\t+real speedIndex;\n\t+real load;\n\t+real temperatureIndex;\n\t+real pressureIndex;\n\t+real speed;\n\t+real loadIndex2;\n\t+real temperature2;\n\t+real pressure2;\n\t+real speed2;\n\t+real load3;\n\t+real temperature3;\n\t+real pressure3;\n\t+real speed3;\n\t+real loadIndex3;\n\t+real temperature",
    "model 'AutomotiveComponent' {\n\tparameter mass = 1200 : kilograms;\n\tparameter length = 4.82 : meters;\n\tparameter hubDiameter = 18 : inches;\n\tparameter tireHeight = 245 : millimeters;\n\tparameter outerDiameter = hubDiameter + tireHeight;\n\tparameter tire = tireHeight : millimeters;\n\tparameter innerDiameter = outerDiameter - tireHeight;\n\tparameter width = 245 : millimeters;\n\tparameter outerRadius = outerDiameter / 2;\n\tparameter innerRadius = innerDiameter / 2;\n",
    "package 'Vehicle' {\n\tattribute def powertrainType;\n\tattribute def engineType;\n\tattribute def transmissionType;\n\tport def powertrainCmdPort {\n\t\tout powertrainCmd : powertrainCmd;\n\t}\n\tport def engineCmdPort {\n\t\tout engineCmd : engineCmd;\n\t}\n\tport def transmissionCmdPort {\n\t\tout transmissionCmd : transmissionCmd;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport powertrainCmdPort: powertrainCmdPort;\n\t\t\tport engineCmdPort: engineCmdPort;\n\t\t\tport transmissionCmdPort",
    "\nclass 'WheelAssembly' {\n\tobject tire {\n\t\treal outerDiameter;\n\t\treal innerDiameter;\n\t\treal tireHeight;\n\t\treal tireWidth;\n\t\treal rimDiameter;",
    "package 'FuelSystem' {\n\tattribute def OutletInterface {\n\t\tout fuelOutlet: FuelOutlet;\n\t\tin fuelInlet: FuelInlet;\n\t\tin fuelReturn: FuelReturn;\n\t}\n\tattribute def FuelPump {\n\t\tin fuelTank: FuelTank;\n\t\tout fuelSupply: FuelSupply;\n\t\tin fuelReturn: FuelReturn;\n\t}\n\tattribute def Engine {\n\t\tin fuelTank: FuelTank;\n\t\tout fuelConsumption: FuelConsumption;\n\t}\n\tattribute def TemperatureSensor {\n\t\tin fuelTank: FuelTank;\n\t\tout fuelTemperature: FuelTem",
    "model 'PhysicalQuantities' {\n\tattribute def BasePhysicalQuantity;\n\tattribute def ConversionFactors;\n\tattribute def QuantitySystem;\n\tport def InputPort {\n\t\tout quantity: BasePhysicalQuantity;\n\t\tin quantity: BasePhysicalQuantity;\n\t}\n\tport def OutputPort {\n\t\tin quantity: BasePhysicalQuantity;\n\t\tout quantity: BasePhysicalQuantity;\n\t}\n\tport def UnitSystemPort {\n\t\tout unit: BasePhysicalQuantity;\n\t\tin unit: BasePhysicalQuantity;\n\t}\n\tport def ConversionFactorsPort {\n\t\tout conversionFactors: ConversionFactors;\n\t\tin conversionFactors: ConversionFactors;\n\t}\n\tport def QuantitySystemPort {",
    "package 'UnitSystemLibrary' {\n\tattribute def stdUnits;\n\tattribute def stdConversionFactors;\n\tattribute def stdUnitsUsed;\n\tport def stdUnitsUsedPort {\n\t\tout stdUnitsUsed : stdUnitsUsed;\n\t}\n\tport def conversionFactorsPort {\n\t\tout conversionFactors : stdConversionFactors;\n\t}\n\tport def stdUnitsPort {\n\t\tout stdUnits : stdUnits;\n\t}\n\tpart unit {\n\t\tattribute def name;\n\t\tattribute def symbol;\n\t\tattribute def multiplier;\n\t\tattribute def exponent;\n\t\tattribute def prefix;\n\t\tattribute def unitCategory;\n\t\tattribute def stdUnitsUsed;\n\t\tport def stdUnitsUsedPort {\n\t",
    "package 'CarHeadlampTiltAdjustment' {\n\tattribute def TiltAngle;\n\tattribute def TiltAdjustmentValue;\n\tattribute def ComplianceAngle;\n\tattribute def ComplianceAngleLimit;\n\tattribute def HeadlampBeamTiltAngleLimit;\n\tattribute def HeadlampBeamTiltAngle;\n\tport def TiltAdjustmentValuePort {\n\t\tout TiltAdjustmentValue: TiltAdjustmentValue;\n\t}\n\tport def ComplianceAngleLimitPort {\n\t\tout ComplianceAngleLimit: ComplianceAngleLimit;\n\t}\n\tport def HeadlampBeamTiltAngleLimitPort {\n\t\tout HeadlampBeamTiltAngleLimit: Head",
    "package 'CoreDataType' {\n\tattribute def CoreType;\n\tattribute def IsNegative;\n\tattribute def CoreValue;\n\tattribute def StatusColor;\n\tattribute def Label;\n\tattribute def Dimension;\n\tattribute def DefaultDimension;\n\tport def CoreValuePort {\n\t\tout coreValue: CoreValue;\n\t}\n\tport def StatusColorPort {\n\t\tout statusColor: StatusColor;\n\t}\n\tport def",
    "package 'CollectionManager' {\n\tattribute def sparePartsBags;\n\tattribute def integers;\n\tattribute def strings;\n\tattribute def personnelOrderedSets;\n\tattribute def realNumbers;\n\tport def sparePartsBagsPort {\n\t\tout Bags: sparePartsBags;\n\t}\n\tport def integersPort {\n\t\tout Lists: integers;\n\t}\n\tport def stringsPort {\n\t\tout Sets: strings;\n\t}\n\tport def personnelOrderedSetsPort {\n",
    "class Tire {\n\t+optional attribute manufacturerName : String;\n\t+optional attribute rimDiameter : Inches;\n\t+optional attribute tireWidth : Inches;\n\t+optional attribute installationPosition : Coordinate3D;\n}\n\nclass TireManufacturer {\n\t+optional attribute name : String;\n}\n\nclass Coordinate3D {\n\t+x, +y, +z : Double;\n}\n\nclass TireInfo {\n\t+optional attribute tire : Tire;\n\t+optional attribute manufacturer : TireManufacturer;\n}\n\nclass TireSystem {\n\t+optional attribute tires : List<Tire>;\n\t+optional attribute manufacturers : List",
    "There is no output model for this requirement as it is not a system component or a system behavior. It is an external requirement for a spacecraft ascent phase.",
    "package 'Materials' {\n\tattribute def AtomicMass;\n\tattribute def MassFractions;\n\tattribute def Name;\n\tattribute def SIUnits;\n\tport def MassFractionsPort {\n\t\tout MassFractions = massFractionsPort.massFractions",
    "\nThe following is the output model for the given requirements:\n\npackage 'EngineeringMaterialsDB' {\n\nattribute def dbVersion;\nattribute def dbName;\nattribute def dbUser;\nattribute def dbPassword;\n\nport dbVersionPort {\n\tout dbVersion : dbVersion;\n}\nport dbNamePort {\n\tout",
    "class 'PubSubSystem' {\n\tclass 'PubSubMessage' {\n\t\t+topic topic: String;\n\t\t+payload payload: Any;\n\t\t+publisher publisher: String;\n\t\t+subscriber subscriber: String;\n\t}\n\tclass 'MessageBroker' {\n\t\t+topics topics: Set<String>;\n\t\t+publishers publishers: Set<String>;\n\t\t+subscribers subscribers: Set<String>;\n\t\t+messages messages: List<PubSubMessage>;\n\t}\n\tclass 'Topic' {\n\t\t+name name: String;\n\t\t+subscribers subscribers: Set<String>;\n\t}",
    "package 'VehicleFuelSystem' {\n\tattribute def tankAssembly {\n\t\tport fuelInlet : FuelInlet;\n\t\tport fuelOutlet : FuelOutlet;\n\t\tport fuelLevel : FuelLevel;\n\t\tport fuelTemperature : FuelTemperature;\n\t}\n\tattribute def engine {\n\t\tport fuelInlet : FuelInlet;\n\t\tport fuelOutlet : FuelOutlet;\n\t\tport fuelLevel : FuelLevel;\n\t\tport fuelTemperature : FuelTemperature;\n\t}\n\tport def fuelLine {\n\t\tout fuelInlet to tankAssembly.fuelInlet;\n\t\tout fuelOutlet to engine.fuelInlet;\n\t\tout fuelLevel to engine.fuelLevel;\n\t\tout",
    "package 'PubSub' {\n\tattribute def Server;\n\tattribute def Consumers;\n\tattribute def Producers;\n\tattribute def Topics;\n\tport def ServerPort {\n\t\tout message : Message;\n\t}\n\tport def ConsumersPort {\n\t\tin subscriptionRequests : SubscriptionRequests;\n\t\tout messages : Messages;\n\t}\n\tport def ProducersPort {\n\t\tin messages : Messages;\n\t\tout messages : Messages;\n\t}\n\tpart server {\n\t\tport ServerPort {\n\t\t\tin messages : Message;\n\t\t\tout messages : Message;\n\t\t}\n\t\tport ConsumersPort {\n\t\t\tin subscriptionRequests : SubscriptionRequests;\n\t\t\tout messages :",
    "package 'Transportation' {\n\tattribute def MaxTankCapacity;\n\tattribute def CurrentFuelLevel;\n\tattribute def RefuelingEligible;\n\tattribute def EnvironmentalFactors;\n\tattribute def BoardingCounter;\n\tattribute def ExitCounter;\n\tport def boardPort {\n\t\tout boardCounter: BoardingCounter;\n\t\tout exitCounter: ExitCounter;\n\t}\n\tport def fuelLevelPort {\n\t\tout currentFuelLevel: CurrentFuelLevel;\n\t}\n\tport def refuelingEligiblePort {\n\t\tout refuelingEligible: RefuelingEligible;\n\t}\n\tport def environmentalFactorsPort {\n",
    "package 'FuelSupplyReturnManagement' {\n\tattribute def fuelTankAssembly {\n\t\tport def fuelOutletPort {\n\t\t\tout fuel: fuelTankAssembly.fuel;\n\t\t}\n\t\tport def fuelInletPort {\n\t\t\tin fuel: fuelTankAssembly.fuel;\n\t\t}\n\t\tport def fuelTankHeatingSystem {\n\t\t\tout fuelTankTemperature {\n\t\t\t\tout fuelTankTemperature: fuelTankAssembly.fuelTankTemperature;\n\t\t\t}\n\t\t}",
    "package 'FuelSystem' {\n\tattribute def CoreComponents;\n\tattribute def Interfaces;\n\tport def fuelSupplyPort {\n\t\tout fuel: Fuel;\n\t\tin temperature: Temperature;\n\t}\n\tport def engineReturnPort {\n\t\tin fuel: Fuel;\n\t\tout temperature: Temperature;\n\t}\n\tport def fuelTankAssemblyPort {\n\t\tin fuel: Fuel;\n\t\tout temperature: Temperature;\n\t}\n\tport def enginePort {\n\t\tin temperature: Temperature;\n\t\tout fuel: Fuel;\n\t}\n\tpart fuelTankAssembly {\n\t\tport def fuelTankAssemblyPort {\n\t\t\tout fuel: fuelTankAssemblyPort.fuel;\n\t\t\tin temperature: temperatureTankAssemblyPort.temperature;\n\t",
    "package 'SceneCapture' {\n\tattribute def sceneImage;\n\tattribute def finalImage;\n\tport def captureImage : Image;\n\tport def focusImage : Image;\n\tport def selectedScene : Scene;\n\tport def selectedFocus : Focus;\n\tpart scene {\n\t\tpart image {\n\t\t\tport captureImage : captureImage;\n\t\t\tport focusImage : focusImage;\n\t\t\tport selectedScene : selectedScene;\n\t\t\tport selectedFocus : selectedFocus;\n\t\t\tperform focus.autofocus {\n\t\t\t\tout focusImage = focusImage;\n\t\t\t}\n\t\t}\n\t\tinterface sceneToImage connect scene.image to image.captureImage\n\t\t\tfrom source.selectedScene to target.selectedScene;\n\t}\n\tpart image {\n\t\tport captureImage : captureImage;\n\t\tport focusImage : focusImage",
    "package 'PhotographyWorkflow' {\n\tattribute def Scene;\n\tattribute def Focus;\n\tattribute def Shooting;\n\tport def ScenePort {\n\t\tout Scene : Scene;\n\t}\n\tport def FocusPort {\n\t\tout Focus : Focus;\n\t}\n\tport def ShootingPort {\n\t\tout Shooting : Shooting;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport ScenePort: ScenePort;\n\t\t\tport FocusPort: FocusPort;\n\t\t\tport ShootingPort: ShootingPort;\n\t\t\tperform sceneSelection.selectScene {\n\t\t\t\tout Scene = user.Scene;\n\t\t\t}\n\t\t\tinterface userToFocuser connect user.FocusPort to",
    "package 'PhotographyWorkflow' {\n\tattribute def selectedScene;\n\tattribute def image;\n\tattribute def focusDistance;\n\tattribute def exposureTime;\n\tport def selectedScenePort {\n\t\tout selectedScene : selectedScene;\n\t}\n\tport def imagePort {\n\t\tout image : image;\n\t}\n\tport def focusDistancePort {\n\t\tout focusDistance : focusDistance;\n\t}\n\tport def exposureTimePort {\n\t\tout exposureTime : exposureTime;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport selectedScenePort: selectedScenePort;\n\t\t\tport imagePort: imagePort;\n\t\t\tport focusDistancePort: focusDistancePort;\n\t\t\tport exposureTimePort: exposureTimePort;\n\t\t\tperform selectScene {\n\t\t\t\tout selectedScene = selectedScenePort.",
    "package 'Photography' {\n\tattribute def scene;\n\tattribute def outputImage;\n\tattribute def outputPhotograph;\n\tport def scenePort {\n\t\tout scene : scene;\n\t}\n\tport def outputImagePort {\n\t\tout outputImage : outputImage;\n\t}\n\tport def outputPhotographPort {\n\t\tout outputPhotograph : outputPhotograph;\n\t}\n\tpart scene {\n\t\tpart focus {\n\t\t\tinterface focusProcessor connect scene.scenePort to photography.focusProcessor {\n\t\t\t\tref flow references focus.onFocusCmdFlow\n\t\t\t\t\tfrom source.image to target.outputImage;\n\t\t\t}\n\t\t}\n\t\tpart convertImage {\n\t\t\tinterface imageConverter connect scene.outputImage to photography.outputImage;\n\t\t}\n\t}\n\tpart photography {\n\t\tport def scenePort {\n\t\t\tout scene : scene;\n\t\t}\n\t\t",
    "package 'PhotographyWorkflow' {\n\tattribute def UserInput;\n\tattribute def Scene;\n\tattribute def Image;\n\tattribute def Picture;\n\tport def UserInputPort {\n\t\tout UserInput : UserInput;\n\t}\n\tport def ScenePort {\n\t\tout Scene : Scene;\n\t}\n\tport def ImagePort {\n\t\tout Image : Image;\n\t}\n\tport def PicturePort {\n\t\tout Picture : Picture;\n\t}\n\tpart User {\n\t\tport UserInputPort: UserInputPort;\n\t\tpart Scene {\n\t\t\tport ScenePort: ScenePort;\n\t\t\tperform Focus {\n\t\t\t\tout Image = Scene.captureImage();\n\t\t\t}\n\t\t}\n\t\tpart Image {\n\t\t\tport ImagePort",
    "package 'PhotographyWorkflow' {\n\tattribute def Scene;\n\tattribute def Focus;\n\tattribute def Shoot;\n\tport def ScenePort {\n\t\tout Scene : Scene;\n\t}\n\tport def FocusPort {\n\t\tout Focus : Focus;\n\t}\n\tport def ShootPort {\n\t\tout Shoot : Shoot;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport ScenePort: ScenePort;\n\t\t\tport FocusPort: FocusPort;\n\t\t\tperform captureImage {\n\t\t\t\tref focusFlow references focus.onFocusComplete to produceDirectedLight.onFocusComplete\n\t\t\t\t\tfrom source.onFocusComplete to target.onFocusComplete;\n\t\t\t\tout Scene = focus.selectedScene;\n\t\t\t}\n\t\t}\n\t\tinterface userToPhotographyWorkflow connect user.ScenePort to photographyWork",
    "package 'Photography' {\n\tattribute def Scene;\n\tattribute def FocusQuality;\n\tattribute def Image;\n\tattribute def Photo;\n\tport def ScenePort {\n\t\tout Scene : Scene;\n\t}\n\tport def FocusQualityPort {\n\t\tout FocusQuality : FocusQuality;\n\t}\n\tport def ImagePort {\n\t\tout Image : Image;\n\t}\n\tport def PhotoPort {\n\t\tout Photo : Photo;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport ScenePort: ScenePort;\n\t\t\tport FocusQualityPort: FocusQualityPort;\n\t\t\tperform inputFocus.captureImage {\n\t\t\t\tout Image = captureImage.image;\n\t\t\t\tout FocusQuality = captureImage.focusQuality;\n\t\t\t}",
    "package 'PhotographyWorkflow' {\n\tattribute def Scene;\n\tattribute def Focus;\n\tattribute def Shoot;\n\tattribute def Photo;\n\tport def ScenePort {\n\t\tout Scene : Scene;\n\t}\n\tport def FocusPort {\n\t\tout Focus : Focus;\n\t}\n\tport def ShootPort {\n\t\tout Shoot : Shoot;\n\t}\n\tport def PhotoPort {\n\t\tout Photo : Photo;\n\t}\n\tpart Scene {\n\t\tpart FocusArea {\n\t\t\tport ScenePort: ScenePort;\n\t\t\tinterface FocusAreaToScene connect Scene.Scene to Focus.FocusArea\n\t\t\t\tfrom source.Scene to target.FocusArea;\n\t\t}",
    "package 'AutomaticBrakingSystem' {\n\tattribute def KeyPosition;\n\tattribute def BrakePedalPressure;\n\tattribute def TractionInformation;\n\tattribute def BrakePressure;\n\tattribute def BrakeModulationFrequency;\n\tport def KeyPositionPort {\n\t\tout keyPosition: KeyPosition;\n\t}\n\tport def BrakePedalPressurePort {\n\t\tout brakePedalPressure: BrakePedalPressure;\n\t}\n\tport def TractionInformationPort {\n\t\tout tractionInformation: TractionInformation;\n\t}\n\tport def BrakePressurePort {\n\t\tout brakePressure: BrakePressure;\n\t}\n\tport def BrakeModulation",
    "package 'BatteryChargingControlSystem' {\n\tattribute def BatteryLevel;\n\tattribute def ChargingState;\n\tattribute def ChargingPower;\n\tport def BatteryLevelPort {\n\t\tout BatteryLevel = BatteryLevel;\n\t}\n\tport def ChargingStatePort {\n\t\tout ChargingState = ChargingState;\n\t}\n\tport def ChargingPowerPort {\n\t\tout ChargingPower = ChargingPower;\n\t}\n\tpart battery {\n\t\tattribute def Level;\n\t\tattribute def State;\n\t\tattribute def Power;\n\t\tport def LevelPort {\n\t\t\tout BatteryLevel = Level;\n\t\t}\n\t\tport def StatePort {\n\t\t\tout ChargingState = State;\n\t\t}\n\t\tport def PowerPort {\n\t\t\tout ChargingPower = Power;\n\t\t}\n\t",
    "package 'ChargingSystem' {\n\tattribute def BatteryLevel;\n\tattribute def ChargingState;\n\tattribute def ChargingPower;\n\tport def BatteryLevelPort {\n\t\tout BatteryLevel : BatteryLevel;\n\t}\n\tport def ChargingStatePort {\n\t\tout ChargingState : ChargingState;\n\t}\n\tport def ChargingPowerPort {\n\t\tout ChargingPower : ChargingPower;\n\t}\n\tpart battery {\n\t\tattribute def Level;\n\t\tport batteryLevelPort: BatteryLevelPort;\n\t\tport batteryChargingPowerPort: ~ChargingPowerPort;\n\t\tport batteryChargingStatePort: ~ChargingStatePort;\n\t\tport batteryFullChargingStatePort: ~ChargingStatePort;\n\t\tport batteryChargingCurrentPort: ~ChargingPowerPort;\n\t\tport",
    "package 'Camera' {\n\tattribute def SceneSelection;\n\tattribute def FocusSubsystem;\n\tattribute def ImagingSubsystem;\n\tport def SceneSelectionPort {\n\t\tout sceneSelection: SceneSelection;\n\t}\n\tport def FocusSubsystemPort {\n\t\tout focusSubsystem: FocusSubsystem;\n\t}\n\tport def ImagingSubsystemPort {\n\t\tout imagingSubsystem: ImagingSubsystem;\n\t}\n\tpart sceneSelection {\n\t\tport sceneSelectionPort: SceneSelectionPort;\n\t\tperform selectScene {\n\t\t\tout sceneSelection = sceneSelectionPort.sceneSelection;\n\t\t}\n\t}\n\tpart focusSubsystem {\n\t\tport focusSubsystemPort: FocusSubsystemPort;\n\t\tinterface focusSubsystem",
    "package 'Camera' {\n\tattribute def ShootingMode;\n\tattribute def FocusMode;\n\tattribute def Aperture;\n\tattribute def ISO;\n\tattribute def Exposure;\n\tattribute def WhiteBalance;\n\tattribute def MeteringMode;\n\tattribute def Scene;\n\tport def FocusModePort {\n\t\tout focusMode : FocusMode;\n\t}\n\tport def AperturePort {\n\t\tout aperture : Aperture;\n\t}\n\tport def ISOPort {\n\t\tout iso : ISO;\n\t}\n\tport def ExposurePort {\n\t\tout exposure : Exposure;\n\t}\n\tport def WhiteBalancePort {\n\t\tout whiteBalance : WhiteBalance;\n\t}\n\tport def MeteringModePort {\n\t",
    "package 'Vehicle' {\n\tattribute def Mass;\n\tattribute def InitialPosition;\n\tattribute def InitialVelocity;\n\tattribute def TimeInterval;\n\tattribute def PowerInput;\n\tport def TimeStepPort {\n\t\tout TimeStep: TimeStep;\n\t}\n\tport def SpeedPort {\n\t\tout Speed: InitialVelocity + (InitialVelocity * TimeInterval);\n\t}\n\tport def PositionPort {\n\t\tout Position: InitialPosition + (InitialVelocity * TimeInterval + (PowerInput * TimeInterval));\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport TimeStepPort: TimeStepPort;\n\t\t\tport SpeedPort: SpeedPort;\n\t\t\tport PositionPort: PositionPort;\n\t\t\tport PowerInputPort",
    "package 'Camera' {\n\tattribute def Focus;\n\tattribute def Capture;\n\tattribute def Display;\n\tport def FocusPort {\n\t\tout Focus : Focus;\n\t}\n\tport def CapturePort {\n\t\tout Capture : Capture;\n\t}\n\tport def DisplayPort {\n\t\tout Display : Display;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport FocusPort: FocusPort;\n\t\t\tport CapturePort: CapturePort;\n\t\t\tport DisplayPort: DisplayPort;\n\t\t\tperform captureImage {\n\t\t\t\tout Capture = captureImage.Capture;\n\t\t\t}\n\t\t}\n\t\tinterface userToCamera connect user.FocusPort to camera.Focus;\n\t\tinterface userToCamera connect user.Capt",
    "package 'Camera' {\n\tattribute def SceneViewFinder;\n\tattribute def Image;\n\tattribute def Picture;\n\tattribute def DisplayPort;\n\tport def SceneViewFinderPort {\n\t\tout viewFinder: SceneViewFinder;\n\t}\n\tport def ImagePort {\n\t\tout image: Image;\n\t}\n\tport def PicturePort {\n\t\tout picture: Picture;\n\t}\n\tport def DisplayPort {\n\t\tout displayPort: DisplayPort;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport SceneViewFinderPort: SceneViewFinderPort;\n\t\t\tperform selectScene {\n\t\t\t\tout viewFinder = SceneViewFinder.selectScene;\n\t\t\t}\n\t\t\tparticipant camera {\n\t\t\t\tinterface cameraTo",
    "package 'SensorManager' {\n\tattribute def sensors;\n\tport def readyStatePort {\n\t\tout readyState : readyState;\n\t}\n\tport def updatePort {\n\t\tout update : Update;\n\t}\n\tpart context {\n\t\tpart sensors {\n\t\t\tport readyStatePort: readyStatePort;\n\t\t\tport updatePort: updatePort;\n\t\t\tinterface sensorToSensor connect sensors.readyStatePort to sensor.readyState\n\t\t\t\tfrom source.readyState to target.readyState;\n\t\t\taction checkReadyState {\n\t\t\t\tref flow references sensorToSensor.checkReadyState\n\t\t\t\t\tfrom source.readyState to target.readyState;\n\t\t\t\t\tout readyState = flow.onReadyState;\n\t\t\t\t}\n\t\t\t\tsuccession flow onReadyState from checkReadyState.onReadyState to update.update",
    "package 'Vehicle' {\n\tattribute def State;\n\tattribute def StartSignal;\n\tattribute def PowerOnSignal;\n\tattribute def ShutterSignal;\n\tport def StatePort {\n\t\tout State : State;\n\t}\n\tport def StartSignalPort {\n\t\tout StartSignal : StartSignal;\n\t}\n\tport def PowerOnSignalPort {\n\t\tout PowerOnSignal : PowerOnSignal;\n\t}\n\tport def ShutterSignalPort {\n\t\tout ShutterSignal : ShutterSignal;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tState: State;\n\t\t\tStartSignal: StartSignalPort;\n\t\t\tPowerOnSignal: Power",
    "package 'Vehicle' {\n\tattribute def State;\n\tattribute def ControlSignal;\n\tport def StateControlSignalPort {\n\t\tout controlSignal : ControlSignal;\n\t}\n\tport def VehicleStatusPort {\n\t\tout state : State;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tstate: State;\n\t\t\tcontrolSignal: ControlSignal;\n\t\t\tperform stateTransition {\n\t\t\t\tsuccession flow from off to starting\n\t\t\t\t\twhen controlSignal = VehicleStartSignal\n\t\t\t\t\t\tvehicle.state = 'start",
    "package 'VehiclePowerSupply' {\n\tattribute def StartCmd;\n\tattribute def ShiftState;\n\tattribute def PowerOnState;\n\tattribute def SafetyOperations;\n\tport def StartCmdPort {\n\t\tout StartCmd : StartCmd;\n\t}\n\tport def ShiftStatePort {\n\t\tout ShiftState : ShiftState;\n\t}\n\tport def PowerOnStatePort {\n\t\tout PowerOnState : PowerOnState;\n\t}\n\tport def SafetyOperationsPort {\n\t\tout SafetyOperations : SafetyOperations;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\t",
    "package 'Vehicle' {\n\tattribute def State;\n\tattribute def StartCmd;\n\tattribute def ShiftCmd;\n\tport def StateCmdPort {\n\t\tout State : State;\n\t}\n\tport def StartCmdPort {\n\t\tout StartCmd : StartCmd;\n\t}\n\tport def ShiftCmdPort {\n\t\tout ShiftCmd : ShiftCmd;\n\t}\n\tpart stateMachine {\n\t\tpart state {\n\t\t\tinitial state shutdown;\n\t\t\ttransition onStart {\n\t\t\t\tstate running;\n\t\t\t}\n\t\t\ttransition onShutdown {\n\t\t\t\tstate shutdown;\n\t\t\t}\n\t\t\ttransition onRunning {\n\t\t\t",
    "package 'Vehicle' {\n\tattribute def State;\n\tattribute def PowerStatus;\n\tattribute def StartSignal;\n\tattribute def OffSignal;\n\tattribute def OnSignal;\n\tport def StatePort {\n\t\tout State : State;\n\t}\n\tport def PowerStatusPort {\n\t\tout PowerStatus : PowerStatus;\n\t}\n\tport def StartSignalPort {\n\t\tout StartSignal : StartSignal;\n\t}\n\tport def OffSignalPort {\n\t\tout OffSignal : OffSignal;\n\t}\n\tport def OnSignalPort {\n\t\tout OnSignal : OnSignal;",
    "package 'VehicleHealthMonitor' {\n\tattribute def MaxTemperature;\n\tattribute def TemperatureThreshold;\n\tattribute def DegradedMode;\n\tattribute def MaintenanceStatus;\n\tattribute def MaintenanceCycleTime;\n\tattribute def NextMaintenanceTime;\n\tattribute def Temperature;\n\tport def TemperatureThresholdPort {\n\t\tout temperatureThreshold: TemperatureThreshold;\n\t}\n\tport def MaxTemperaturePort {\n\t\tout maxTemperature: MaxTemperature",
    "package 'ClockServer' {\n\tattribute def startupState;\n\tattribute def requestPort;\n\tattribute def responseState;\n\tattribute def waitingState;\n\tattribute def dailyClockSwitch;\n\tport def requestPort : request : requestPort;\n\tport def responsePort : response : responsePort;\n\tport def startupRequest : startup : requestPort;\n\tport def dailyClockSwitchPort : dailyClockSwitch : ~responsePort;\n\tpart context {\n\t\tpart startupState {\n\t\t\tport startupRequest : startupRequest;\n\t\t\tperform startupTransition {\n\t\t\t\tout startupState = waitingState;\n\t\t",
    "package 'Vehicle' {\n\tattribute def StartState;\n\tattribute def PowerOnSignal;\n\tattribute def StartSignal;\n\tattribute def StopSignal;\n\tattribute def OperatingState;\n\tattribute def ParkingBrakeApplied;\n\tport def PowerOnSignalPort {\n\t\tout powerOnSignal : PowerOnSignal;\n\t}\n\tport def StartSignalPort {\n\t\tout startSignal : StartSignal;\n\t}\n\tport def StopSignalPort {\n\t\tout stopSignal : StopSignal;\n\t}\n\tport def OperatingStatePort {\n\t\tout operatingState : OperatingState",
    "package 'Vehicle' {\n\tattribute def StartUpState;\n\tattribute def VehicleStatus;\n\tattribute def StartSignal;\n\tattribute def BrakePedal;\n\tattribute def VehicleOnSignal;\n\tport def StartUpCmdPort {\n\t\tout startUpCmd : StartUpState;\n\t}\n\tport def VehicleStatusCmdPort {\n\t\tout vehicleStatusCmd : VehicleStatus;\n\t}\n\tport def StartSignalPort {\n\t\tout",
    "package 'CruiseControl' {\n\tattribute def Command;\n\tattribute def SetSpeed;\n\tattribute def VehicleSpeed;\n\tattribute def FuelControlCommand;\n\tport def CommandPort {\n\t\tout command : Command;\n\t}\n\tport def SetSpeedPort {\n\t\tout setSpeed : SetSpeed;\n\t}\n\tport def VehicleSpeedPort {\n\t\tout vehicleSpeed : VehicleSpeed;\n\t}\n\tport def FuelControlCommandPort {\n\t\tout fuelControlCommand : FuelControlCommand;\n\t}\n\tpart driver {\n\t\tport def commandPort: CommandPort;\n\t\tport def setSpeedPort: SetSpeedPort;\n\t\tport def vehicleSpeedPort:",
    "package 'CruiseControl' {\n\tattribute def SetSpeedCmd;\n\tattribute def RealTimeVehicleSpeed;\n\tattribute def ThrottleControlCommand;\n\tport def SetSpeedCmdPort {\n\t\tout SetSpeedCmd : SetSpeedCmd;\n\t}\n\tport def RealTimeVehicleSpeedPort {\n\t\tout RealTimeVehicleSpeed : RealTimeVehicleSpeed;\n\t}\n\tport def ThrottleControlCommandPort {\n\t\tout ThrottleControlCommand : ThrottleControlCommand;\n\t}\n\tpart context {\n\t\tpart driver {\n\t\t\tport SetSpeedCmdPort: SetSpeedCmdPort;\n\t\t\tport RealTimeVehicleSpeedPort: RealTimeVehicleSpeedPort;\n\t\t\tport Thrott",
    "package 'AutomotiveCruiseControl' {\n\tattribute def SetSpeedCmd;\n\tattribute def CurrentSpeed;\n\tattribute def TargetSpeed;\n\tattribute def ThrottleControlCmd;\n\tport def SetSpeedCmdPort {\n\t\tout SetSpeedCmd : SetSpeedCmd;\n\t}\n\tport def CurrentSpeedPort {\n\t\tout CurrentSpeed : CurrentSpeed;\n\t}\n\tport def TargetSpeedPort {\n\t\tout TargetSpeed : TargetSpeed;\n\t}\n\tport def ThrottleControlCmdPort {\n\t\tout ThrottleControlCmd : ThrottleControlCmd;\n",
    "package 'AutomotiveCruiseControl' {\n\tattribute def SpeedCmd;\n\tattribute def ThrottleCmd;\n\tport def SpeedCmdPort {\n\t\tout SpeedCmd : SpeedCmd;\n\t}\n\tport def ThrottleCmdPort {\n\t\tout ThrottleCmd : ThrottleCmd;\n\t}\n\tpart context {\n\t\tpart driver {\n\t\t\tport SpeedCmdPort: SpeedCmdPort;\n\t\t\tport ThrottleCmdPort: ThrottleCmdPort;\n\t\t\tperform sendSpeedCmd {\n\t\t\t\tout",
    "package 'AutomotiveCruiseControl' {\n\tattribute def SetSpeedCmd;\n\tattribute def TargetSpeed;\n\tattribute def ActualSpeed;\n\tattribute def FuelControlCmd;\n\tport def SetSpeedCmdPort {\n\t\tout SetSpeedCmd : SetSpeedCmd;\n\t}\n\tport def TargetSpeedPort {\n\t\tin TargetSpeed : TargetSpeed;\n\t}\n\tport def ActualSpeedPort {\n\t\tin ActualSpeed : Actual",
    "package 'CruiseControl' {\n\tattribute def SetSpeedCmd;\n\tattribute def RealSpeed;\n\tattribute def FuelControlCmd;\n\tport def SetSpeedCmdPort {\n\t\tout SetSpeedCmd : SetSpeedCmd;\n\t}\n\tport def RealSpeedPort {\n\t\tout RealSpeed : RealSpeed;\n\t}\n\tport def FuelControlCmdPort {\n\t\tout FuelControlCmd : FuelControlCmd;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport SetSpeedCmdPort: SetSpeedCmdPort;\n\t\t\tport RealSpeedPort: RealSpeedPort;\n\t\t\tport FuelControlCmdPort: Fuel",
    "package 'Vehicle' {\n\tattribute def deliveryDate;\n\tattribute def ownerInfo;\n\tattribute def driverInfo;\n\tattribute def endOfUseInfo;\n\tport def deliveryDatePort {\n\t\tout deliveryDate: deliveryDate;\n\t}\n\tport def ownerInfoPort {\n\t\tout ownerInfo: ownerInfo;\n\t}\n\tport def driverInfoPort {\n\t\tout driverInfo: driverInfo;\n\t}\n\tport def endOfUseInfoPort {\n\t\tout endOfUseInfo: endOfUseInfo;\n\t}\n\tpart vehicle {\n\t",
    "model 'Vehicle' {\n\tattribute def Mass;\n\tattribute def OperationalStatus;\n\tattribute def GearSetting;\n\tattribute def AcceleratorPedalPosition;\n\tattribute def LeftFrontWheel;\n\tattribute def RightFrontWheel;\n\tparticipant driver {\n\t\tport input.acceleratePedalPosition : acceleratorPedalPosition;\n\t\tport input.leftFrontWheelPosition : leftFrontWheelPosition;\n\t\tport input.rightFrontWheelPosition : rightFrontWheelPosition;\n\t\tparticipant engine {\n\t\t\tport input.gearSetting : gearSetting;\n\t\t\tport output.fuelLevel",
    "model 'Vehicle_1' {\n\tparameter mass (2000 kg)\n\tparameter gear (0)\n\tparameter acceleratorPedalPosition (0.0)\n\tevent initialState (initial) {\n\t\tvehicle.mass = mass\n\t\tvehicle.gear = gear\n\t\tvehicle.acceleratorPedalPosition = acceleratorPedalPosition\n\t}\n\tevent gearChange (gear) {\n\t\tvehicle.gear = gear\n\t}\n\tevent acceleratorPedalPositionChange (acceleratorPedalPosition",
    "package 'Vehicle' {\n\tattribute def Mass;\n\tattribute def Gear;\n\tattribute def ThrottlePedalPosition;\n\tattribute def Driver;\n\tport def MassPort {\n\t\tout mass: Mass;\n\t}\n\tport def GearPort {\n\t\tout gear: Gear;\n\t}\n\tport def ThrottlePedalPositionPort {\n\t\tout throttlePedalPosition: ThrottlePedalPosition;\n\t}\n\tport def DriverPort {\n\t\tout driver",
    "package 'Vehicle' {\n\tattribute def Mass;\n\tport def MassPort {\n\t\tout mass: Mass;\n\t}\n\tpart component {\n\t\tattribute def Mass;\n\t\tport def MassPort {\n\t\t\tin mass: Mass;\n\t\t}\n\t\tport def ParentMass;\n\t\tport def ComponentMass;\n\t\tport def TotalMass;\n\t\tport def MassPort;\n\t\taction calculateTotalMass {\n\t\t\tout TotalMass = ComponentMass + ParentMass;\n\t\t}\n\t\tsuccession flow parentMass",
    "package 'Vehicle' {\n\tattribute def Mass;\n\tattribute def VehicleIdentificationNumber;\n\tattribute def ComponentMass;\n\tattribute def ComponentSerialNumber;\n\tport def MassPort {\n\t\tout Mass : Mass;\n\t}\n\tport def VehicleIdentificationNumberPort {\n\t\tout VehicleIdentificationNumber : VehicleIdentificationNumber;\n\t}\n\tport def ComponentMassPort {\n\t\tout ComponentMass : ComponentMass;\n\t}\n\tport def ComponentSerialNumberPort {\n\t\tout ComponentSerialNumber :",
    "package 'QualityAggregation' {\n\tattribute def TotalMass;\n\tattribute def SimpleMass;\n\tport def TotalMassPort {\n\t\tout TotalMass = TotalMass;\n\t}\n\tport def SimpleMassPort {\n\t\tout SimpleMass = SimpleMass;\n\t}\n\tpart object {\n\t\tattribute def BasicMass;\n\t\tattribute def SubComponentMass;\n\t\tport def TotalMassPort {\n\t\t\tout TotalMass = TotalMass;\n\t\t}\n\t\tport def SimpleMassPort {\n\t\t\tout SimpleMass = SimpleMass;\n\t\t}\n\t\tpart compositeThing {\n\t\t\tport def TotalMassPort {\n\t\t\t\tout TotalMass = TotalMass;\n\t\t\t}\n\t\t\tport def SimpleMassPort {\n",
    "package 'TotalMassSystem' {\n\tattribute def MassAttribute;\n\tattribute def SubcomponentMassAttribute;\n\tattribute def MinimumMassThreshold;\n\tport def MassAttributePort {\n\t\tout MassAttribute : MassAttribute;\n\t}\n\tport def SubcomponentMassAttributePort {\n\t\tout SubcomponentMassAttribute : SubcomponentMassAttribute;\n\t}\n\tport def MinimumMassThresholdPort {\n\t\tin MinMassThreshold : MinimumMassThreshold;\n\t}\n\tpart context {\n\t\tpart object {\n\t\t\tport MassAttributePort: MassAttribute",
    "package 'VehicleDynamics' {\n\tattribute def PowerOutput;\n\tattribute def Acceleration;\n\tattribute def Speed;\n\tattribute def Position;\n\tattribute def Mass;\n\tattribute def SpeedInput;\n\tattribute def WheelPower;\n\tattribute def AerodynamicDragCoefficient;\n\tattribute def FrictionCoefficient;\n\tattribute def VehicleMass;\n\tattribute def OperatingConditions;\n\tport def InputPort {\n\t\tout PowerInput: PowerOutput;\n\t\tout AccelerationInput: Acceleration;\n\t\tout SpeedInput: Speed;\n\t\tout",
    "package 'DrivingSimulation' {\n\tattribute def TimeStep;\n\tattribute def Parameters {\n\t\tdefaultValue (0.01)\n\t\tstring aerodynamicDragCoefficient;\n\t\tdefaultValue (0.25)\n\t\tstring rollingResistanceCoefficient;\n\t}\n\tport def TimeStepPort {\n\t\tout TimeStep = TimeStep;\n\t}\n\tport def ParametersPort {\n\t\tin aerodynamicDragCoefficient : aerodynamicDragCoefficient;\n\t\tin rollingResistanceCoefficient : rollingResistanceC",
    "package 'VehicleDynamics' {\n\tattribute def UserInput;\n\tattribute def VehicleData;\n\tport def UserInputPort {\n\t\tout UserInput : UserInput;\n\t}\n\tport def VehicleDataPort {\n\t\tout VehicleData : VehicleData;\n\t}\n\tpart User {\n\t\tport UserInputPort: UserInputPort;\n\t\tpart VehicleData part: VehicleData;\n\t\tinterface UserToVehicleDynamics connect User.UserInputPort to VehicleDynamics.VehicleData;\n\t\tpart VehicleDynamics {\n\t\t\tport VehicleDataPort: VehicleDataPort;\n\t\t\tport VehicleData : VehicleData;\n\t\t\tattribute def Mass;\n\t\t\tattribute def Power;\n\t\t\tattribute def DragCoefficient",
    "package 'Vehicle' {\n\tattribute def position;\n\tattribute def velocity;\n\tattribute def mass;\n\tattribute def power;\n\tattribute def timeInterval;\n\tattribute def dragCoefficient;\n\tattribute def frictionCoefficient;\n\tattribute def constraint;\n\tport def inputPort {\n\t\tout position: position;\n\t\tout velocity: velocity;\n\t\tout mass: mass;\n\t\tout power: power;\n\t\tout timeInterval: timeInterval;\n\t\tout dragCoefficient: dragCoefficient;\n\t\tout frictionCoe",
    "package 'Vehicle' {\n\tattribute def ChassisMass;\n\tattribute def EngineMass;\n\tattribute def GearboxMass;\n\tattribute def TotalMass;\n\tport def ChassisMassPort {\n\t\tout ChassisMass: ChassisMass;\n\t}\n\tport def EngineMassPort {\n\t\tout EngineMass: EngineMass;\n\t}\n\tport def GearboxMassPort {\n\t\tout GearboxMass: GearboxMass;\n\t}\n\tport def TotalMassPort {\n\t\tout TotalMass: TotalMass;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport ChassisMassPort: Chasso",
    "package 'Vehicle' {\n\tattribute def TotalMass;\n\tattribute def EngineMass;\n\tattribute def TransmissionMass;\n\tport def TotalMassPort {\n\t\tout TotalMass: TotalMass;\n\t}\n\tport def EngineMassPort {\n\t\tout EngineMass: EngineMass;\n\t}\n\tport def TransmissionMassPort {\n\t\tout TransmissionMass: TransmissionMass;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport TotalMassPort: TotalMassPort;\n\t\t\tport EngineMassPort: EngineMassPort;\n\t\t\tport TransmissionMassPort: TransmissionMassPort;\n",
    "package 'VehicleMassManager' {\n\tattribute def maxMass;\n\tattribute def componentMass;\n\tport def componentMassPort {\n\t\tout componentMass : componentMass;\n\t}\n\tport def maxMassPort {\n\t\tin maxMass : maxMass;\n\t}\n\tpart component {\n\t\tport def massPort {\n\t\t\tout componentMass : componentMass;\n\t\t}\n\t\tpart engine {\n\t\t\tport def massPort {\n\t\t\t\tout engineMass : componentMass;\n\t\t\t}\n\t\t\tport def maxMassPort {\n\t\t\t\tin maxMass : maxMass;\n\t\t\t\tcheck if engineMass + componentMass > maxMass",
    "package 'VehicleWeightMonitor' {\n\tattribute def maxWeight;\n\tattribute def weightComponents;\n\tport def weightComponentWeightPort {\n\t\tout weightComponentWeight : weightComponentWeight;\n\t}\n\tport def warningPort {\n\t\tout warning : warning;\n\t}\n\tpart weightComponents {\n\t\tpart chassis {\n\t\t\tport weightComponentWeightPort: weightComponentWeightPort;\n\t\t\tattribute def weight : weight;\n\t\t}\n\t\tpart engine {\n\t\t\tport weightComponentWeightPort: weightComponentWeightPort;\n\t\t\tattribute def weight : weight;\n\t\t}\n\t\tpart transmission {\n\t\t\tport weightComponentWeightPort: weightComponentWeightPort;\n\t\t\tattribute def weight : weight;\n",
    "package 'Vehicle' {\n\tattribute def ChassisMass;\n\tattribute def EngineMass;\n\tattribute def TransmissionMass;\n\tattribute def TotalMass;\n\tport def ChassisMassPort {\n\t\tout ChassisMass: ChassisMass;\n\t}\n\tport def EngineMassPort {\n\t\tout EngineMass: EngineMass;\n\t}\n\tport def TransmissionMassPort {\n\t\tout TransmissionMass: TransmissionMass;\n\t}\n\tport def TotalMassPort {\n\t\tout TotalMass: TotalMass;\n\t}\n\tpart Chassis {\n\t\tport def ChassisMassPort: Chasso",
    "package 'VehicleMaintenance' {\n\tattribute def vehicleId;\n\tattribute def nextMaintenanceTime;\n\tattribute def maxTemperature;\n\tattribute def currentMaintenanceTime;\n\tattribute def maintenanceStatus;\n\tattribute def maintenanceDuration;\n\tport def vehicleIdPort {\n\t\tout vehicleId: vehicleId;\n\t}\n\tport def nextMaintenanceTimePort {\n\t\tout nextMaintenanceTime: nextMaintenanceTime;\n\t}\n\tport def maxTemperaturePort {\n\t\tout maxTemperature: maxTemperature;\n\t}\n\tport def currentMaintenanceTimePort {\n\t\tout currentMaintenanceTime: currentMaintenanceTime;",
    "package 'Vehicle' {\n\tattribute def maxMass;\n\tattribute def fuelMass;\n\tattribute def engineTorque;\n\tattribute def transmissionTorque;\n\tport def fuelEfficiency;\n\tport def engineTorquePort {\n\t\tout engineTorque : engineTorque;\n\t}\n\tport def transmissionTorquePort {\n\t\tout transmissionTorque : transmissionTorque;\n\t}\n\tpart engine {\n\t\tattribute def displacement;\n\t\tattribute def powerOutput;\n\t\tattribute def torqueOutput;\n\t\tport def fuelEfficiencyPort {\n\t\t\tout fuelEfficiency = fuelEfficiencyPort.fuelEfficiency;\n\t\t}\n\t\tport def engineTorquePort: engineTorquePort;\n\t\tport def transmissionTorquePort: transmissionTorquePort;\n\t\tperform generateTorqueCurve {\n\t\t\tin powerOutput : powerOutput;\n\t\t\tin displacement : displacement;\n\t\t\tout torqueOutput = displacement * powerOutput /",
    "package 'Vehicle' {\n\tattribute def TotalMass;\n\tattribute def FuelMass;\n\tattribute def Engine;\n\tattribute def ClutchInterface;\n\tattribute def Transmission;\n\tattribute def SpeedTorqueCurve;\n\tport def FuelTank {\n\t\tout fuelLevel: FuelMass;\n\t}\n\tport def EnginePort {\n\t\tout torque: Transmission.torque;\n\t}\n\tport def TransmissionPort {\n\t\tout torque: Transmission.torque;\n\t}\n\tport def ClutchInterfacePort {\n\t\tout clutchPressed: Boolean;\n\t}\n\tpart context {\n\t\t",
    "package 'Vehicle' {\n\tattribute def totalMass;\n\tattribute def enginePower;\n\tattribute def engineTorque;\n\tattribute def clutchInterface;\n\tport def fuelPumpPort {\n\t\tout fuelPumpAction : FuelPumpAction;\n\t}\n\tport def engineInterface {\n\t\tout engineAction : EngineAction;\n\t}\n\tport def clutchInterfacePort {\n\t\tout clutchAction : ClutchAction;\n\t}\n\tpart engine {\n\t\tattribute def power;\n\t\tattribute def torque;\n\t\tattribute def speed;\n\t\tport def fuelPumpPort: fuelPumpAction;\n\t\tport def engineInterface: engineAction;\n\t\tport def clutchInterfacePort: clutchAction;\n\t\tperform generateTorque {\n\t\t\tin engineSpeed = speed;\n\t\t\t",
    "package 'Vehicle' {\n\tattribute def maxMass;\n\tattribute def minMass;\n\tattribute def fuelMass;\n\tattribute def curbMass;\n\tattribute def engineTorque;\n\tattribute def gearboxTorque;\n\tport def fuelTank {\n\t\tout fuelMass: fuelMass;\n\t}\n\tport def clutchInterface {\n\t\tout torque: engineTorque;\n\t}\n\tport def gearbox {\n\t\tout gearboxTorque: gearboxTorque;\n\t}\n\tpart engine {\n\t\tattribute def torqueCurve;\n\t\tport def fuelTank {\n\t\t\tout fuelMass: fuelMass;\n\t\t}\n\t\tport",
    "package 'VehiclePerformanceAnalysis' {\n\tattribute def CurbWeight;\n\tattribute def Payload;\n\tattribute def WheelDiameter;\n\tattribute def TransmissionEfficiency;\n\tattribute def FuelEconomy;\n\tattribute def UrbanHighwayConditions;\n\tattribute def TimeStampedPosition;\n\tattribute def TimeStampedSpeed;\n\tattribute def EnergyCons",
    "package 'VehicleFuelEconomy' {\n\tattribute def CurbWeight;\n\tattribute def Load;\n\tattribute def WheelDiameter;\n\tattribute def TransmissionEfficiency;\n\tattribute def UrbanDrivingScenario;\n\tattribute def HighwayDrivingScenario;\n\tattribute def FuelConsumption;\n\tattribute def FuelEconomy;\n\tport def CurbWeightPort {\n\t\tout curbWeight: CurbWeight;\n\t}\n\tport def LoadPort {\n\t\tout load: Load;\n\t}\n\tport def WheelDiameterPort {\n\t\tout wheelDiameter: WheelDiameter;\n\t}\n\tport",
    "package 'EngineSelection' {\n\tattribute def candidates;\n\tattribute def keyPerformanceIndicators;\n\tattribute def evaluationFunction;\n\tattribute def optimalEngine;\n\tport def candidatesPort {\n\t\tout candidates: candidates;\n\t}\n\tport def keyPerformanceIndicatorsPort {\n\t\tout keyPerformanceIndicators: keyPerformanceIndicators;\n\t}\n\tport def evaluationFunctionPort {\n\t\tout evaluationFunction: evaluationFunction;\n\t}\n\tport def optimalEnginePort {\n\t\tout optimalEngine: optimalEngine;\n\t}\n\tpart candidates {\n\t\tpart candidate {\n\t\t\tattribute def name;\n\t\t\tattribute def type;\n\t\t\tattribute def power;\n\t\t\tattribute def mass;\n\t\t\tattribute def efficiency;\n\t\t\tattribute def cost;\n\t\t\tport def ~namePort {",
    "package 'VehicleQualityCheck' {\n\tattribute def curbWeight;\n\tattribute def processedData;\n\tattribute def evaluationResult;\n\tport def dataCollectionPort {\n\t\tout data: data;\n\t}\n\tport def processedDataPort {\n\t\tin data: data;\n\t\tout processedData = data.processedData;\n\t}\n\tport def evaluationResultPort {\n\t\tout result: evaluationResult;\n\t}\n\tpart dataCollection {\n\t\tparticipant vehicle {\n\t\t\tport dataPort: dataCollectionPort;\n\t\t\tperform collectData {\n\t\t\t\tin data = dataPort.data;\n\t\t\t\tout collectResult = collectData.collectResult;\n\t\t\t}\n\t\t\tsuccession flow collectData from vehicle to dataCollection;\n\t\t}\n\t\tparticipant",
    "package 'MassVerification' {\n\tattribute def Mass;\n\tattribute def WeighingEquipment;\n\tattribute def MassVerificationUnit;\n\tport def MassPort {\n\t\tout Mass : Mass;\n\t}\n\tport def WeighingEquipmentPort {\n\t\tout WeighingEquipment : WeighingEquipment;\n\t}\n\tport def MassVerificationUnitPort {\n\t\tout MassVerificationUnit : MassVerificationUnit;\n\t}\n\tpart vehicle {\n\t\tattribute def Mass : Mass;\n\t\tport def MassPort {\n\t\t\tout Mass = MassPort.Mass;\n\t\t}\n\t\t",
    "package 'TransportationSystem' {\n\tattribute def Driver;\n\tattribute def Passenger;\n\tattribute def Vehicle;\n\tattribute def Route;\n\tattribute def GasStations;\n\tport def DriverPort {\n\t\tout driverEvent : DriverEvent;\n\t}\n\tport def PassengerPort {\n\t\tout passengerEvent : PassengerEvent;\n\t}\n\tport def VehiclePort {\n\t\tout vehicleEvent : VehicleEvent;\n\t}\n\tport def RoutePort {\n\t\tout routeEvent : RouteEvent;\n\t}\n\tport def GasStationsPort {\n\t\tout gasStationsEvent : GasStationsEvent;\n\t}\n\tpart driver {\n\t\tpart vehicle {\n\t\t\tport def driverEventPort {\n",
    "package 'Transportation' {\n\tattribute def Driver;\n\tattribute def Passenger1;\n\tattribute def Passenger2;\n\tattribute def Passenger3;\n\tattribute def Passenger4;\n\tattribute def Destination;\n\tattribute def FuelLevel;\n\tattribute def CurrentSpeed;\n\tattribute def CurrentOrientation;\n\tattribute def LastArrivalTime;\n\tattribute def NextArrivalTime;\n\tattribute def ArrivalPoint;\n\tattribute def DeparturePoint;\n\tattribute def Route;\n\tattribute def Token;\n\tport def DriverPort {\n\t\tout driverEvent : DriverEvent;\n\t\tout passengerEvent1 : PassengerEvent1;\n\t\tout passengerEvent2 : PassengerEvent2;\n\t\tout passengerEvent3 : PassengerEvent3;\n\t\tout passengerEvent4 : PassengerEvent4;\n\t}\n\tport def Passenger",
    "package 'Vehicle' {\n\tattribute def ProductType {\n\t\tvalue: 'FourCylinder' | 'SixCylinder' | 'Manual' | 'Automatic'\n\t}\n\tattribute def Engine {\n\t\tvalue: 'FourCylinder' | 'SixCylinder'\n\t}\n\tattribute def CylinderDiameter {\n\t\tvalue: 'Small' | 'Large'\n\t}\n\tattribute def Transmission {\n\t\tvalue: 'Man",
    "package 'Engine' {\n\tattribute def CylinderDiameter;\n\tattribute def CylinderQuantity;\n\tattribute def EngineType;\n\tport def CylinderDiameterPort {\n\t\tout CylinderDiameter = CylinderDiameter;\n\t}\n\tport def CylinderQuantityPort {\n\t\tout CylinderQuantity = CylinderQuantity;\n\t}\n\tport def EngineTypePort {\n\t\tout EngineType = EngineType;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport CylinderDiameterPort: CylinderDiameterPort;\n\t\t\tport CylinderQuantityPort: CylinderQuantityPort;\n\t\t\tport EngineTypePort: EngineTypePort;\n\t\t\t",
    "package 'AutomotiveConfiguration' {\n\tattribute def EngineType;\n\tattribute def CylinderDiameter;\n\tattribute def TransmissionType;\n\tattribute def ManualTransmission;\n\tattribute def AutomaticTransmission;\n\tport def EngineTypePort {\n\t\tout EngineType = EngineType;\n\t}\n\tport def CylinderDiameterPort {\n\t\tout CylinderDiameter = CylinderDiameter;\n\t}\n\tport def TransmissionTypePort {\n\t\tout TransmissionType = TransmissionType;\n\t}",
    "\nsystem assembly {\n\tassemblyName: \"ComputerSystem\"\n\tsubsystems {\n\t\tcomputerSubsystem {\n\t\t\tcomputerName: \"Computer\"\n\t\t\tfunctions {\n\t\t\t\tfunctionName: \"Software\"\n\t\t\t\tinputParameters {\n\t\t\t\t\tdataFormat: \"Binary\"\n\t\t\t\t\tmessageFormat: \"Text\"\n\t\t\t\t}\n\t\t\t\toutputParameters {\n\t\t\t\t\tdataFormat: \"Binary\"\n\t\t\t\t\tmessageFormat: \"Text\"\n\t\t\t\t}\n\t\t\t\timplementation {\n\t\t\t\t\thardware: \"Hardware\"\n\t\t\t\t\tsoftware: \"Software\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n",
    "package 'Powertrain' {\n\tattribute def LogicalLayer;\n\tattribute def PhysicalLayer;\n\tport def LogicalLayerPort {\n\t\tout powerOutputPort: PowerOutputPort;\n\t\tout torqueGeneratorPort: TorqueGeneratorPort;\n\t}\n\tport def PhysicalLayerPort {\n\t\tin powerUnit: PowerUnit;\n\t\tout torqueGenerator: TorqueGenerator;\n\t}\n\tinterface LogicalComponent {\n\t\tport LogicalPort {\n\t\t\tout powerOutput: PowerOutput;\n\t\t\tout torqueGenerator: TorqueGenerator;\n\t\t}\n\t\t",
    "package 'PowerTransmission' {\n\tattribute def Power;\n\tattribute def Torque;\n\tattribute def GeneratingTorque;\n\tport def PowerPort {\n\t\tout power: Power;\n\t}\n\tport def TorquePort {\n\t\tout torque: Torque;\n\t}\n\tport def GeneratingTorquePort {\n\t\tout generatingTorque: GeneratingTorque;\n\t}\n\tpart engine {\n\t\tport def TorquePort {\n\t\t\tout torque = torquePort.torque;\n\t\t}\n\t\tport def PowerPort {\n\t\t\tout power = powerPort.power;\n\t\t}\n\t\t",
    "\nThe vehicle feature annotation system is a complex system that includes various safety and security features. It is composed of two main assemblies: the interior and the body assembly. The interior assembly includes components such as seat belts, front seats, driver airbag, and alarm system, while the body assembly includes the body shell, bumpers, and keyless entry device.\n\nThe system structure covers the following components:\n\n* Interior assembly:\n\t+ Seat belts: A safety feature that secures the occupants in the vehicle during impact.\n\t+ Front seats: A comfortable seating arrangement for the occupants.\n\t+ Driver air",
    "package 'VehicleSimulation' {\n\tattribute def InputData;\n\tattribute def OutputData;\n\tport def InputDataPort {\n\t\tout inputData: InputData;\n\t}\n\tport def OutputDataPort {\n\t\tin outputData: OutputData;\n\t}\n\tinterface vehicleModel connect inputDataPort to vehicleModel.inputData {\n\t\tref data references inputData.data;\n\t}\n\tinterface vehicleSimulation connect inputDataPort to vehicleSimulation.inputData {\n\t\tref data references inputData.data;\n\t}\n\tpart vehicleModel {\n\t\tport inputDataPort: InputDataPort;\n\t\tpart vehicle {\n\t\t\tattribute def mass;\n\t\t\tattribute def position;\n\t\t\tattribute def velocity;\n\t\t\tattribute def acceleration;\n\t\t\tattribute def timeStep;\n\t\t\tport def velocityPort {\n\t\t\t",
    "package 'Car' {\n\tattribute def mandatorySafetyComponents;\n\tattribute def optionalSafetyComponents;\n\tattribute def safetyBelts;\n\tattribute def airbag;\n\tattribute def bumper;\n\tattribute def keylessEntrySystem;\n\tattribute def antiLockBrakingSystem;\n\tattribute def numberOfWheels;\n\tattribute def antiLockBrakingSystemPort;\n\tport def safety",
    "package 'VehicleSafetyCompliance' {\n\tattribute def mandatorySafetyFeatures;\n\tattribute def optionalSafetyFeatures;\n\tattribute def nonMandatorySafetyFeatures;\n\tattribute def seatBelts;\n\tattribute def airbag;\n\tattribute def bumper;\n\tattribute def keylessEntrySystem;\n\tattribute def antiLockBrakingSystem;\n\tattribute def tires;\n\tattribute def abs;\n\tport def safetyFeaturesPort {\n\t\tout mandatorySafetyFeatures : mandatorySafetyFeatures;\n\t\tout optionalSafetyFeatures :",
    "package 'RiskManagement' {\n\tattribute def riskDescription;\n\tattribute def riskPersons;\n\tattribute def riskCauses;\n\tattribute def riskFailures;\n\tattribute def riskSequences;\n\tattribute def riskImpact;\n\tattribute def riskControl Measures;\n\tattribute def decisionMaking;\n\tport def riskDescriptionPort {\n\t\tout riskDescription : riskDescription;\n\t}\n\tport def riskPersonsPort {\n\t\tout riskPersons : riskPersons;\n\t}\n\tport def riskCausesPort {\n\t\tout riskCauses : riskCauses;\n\t}\n\tport def riskFailuresPort {\n\t\tout riskFailures : riskFailures;\n\t}\n\tport def riskSequencesPort {\n\t\tout riskSequences : riskSequences;\n",
    "package 'RiskManagement' {\n\tattribute def Scenario;\n\tattribute def Cause;\n\tattribute def Failure;\n\tattribute def Interaction;\n\tattribute def RiskPropagation;\n\tport def ScenarioPort {\n\t\tout Scenario: Scenario;\n\t}\n\tport def CausePort {\n\t\tout Cause: Cause;\n\t}\n\tport def FailurePort {\n\t\tout Failure: Failure;\n\t}\n\tport def InteractionPort {\n\t\tout Interaction: Interaction;\n\t}\n\tport def RiskPropagationPort {\n\t\tout RiskPropagation: RiskPropagation;\n\t}\n\tpart Scen",
    "package 'Equipment' {\n\tattribute def Battery;\n\tattribute def MinBatteryLevel;\n\tattribute def LowBatteryThreshold;\n\tattribute def HighBatteryFailureThreshold;\n\tattribute def LowBatteryState;\n\tattribute def BatteryStatus;\n\tport def BatteryStatusPort {\n\t\tout batteryStatus: BatteryStatus;\n\t}\n\tport def MinBatteryLevelPort {\n\t\tout minBatteryLevel: MinBatteryLevel;\n\t}\n\tport def Low",
    "The input requirement for the system is:\n\nThe system must be able to perform the following tasks:\n\n1. Structural decomposition: Divide the system into multiple subsystems and components, and ensure that the functions and capabilities of each level are fully covered.\n2. Clear interfaces: Define interfaces between system components so that each component can be independently understood and analyzed while also collaborating effectively within the overall system.\n3. Independent Verification and Validation (IV&V): System engineers and parties involved in IV&V must be able to use this structural view to comprehend and verify the system's integrity and modular design, ensuring that the system's various functional and performance requirements are met.\n\nThe following model provides a high-level structural decomposition of the system:\n\nSystem\n\n* Subsystem 1\n\t+ Component 1\n\t+",
    "\nThe following is the output model for the given requirements:\n\n1. A hierarchical structure of all components in the system, with clear interfaces and safety attributes marked where necessary.\n2. A list of all safety-related components, with their mandatory and optional status",
    "--start\n\n*Automotive Domain Model*\n\n**Core Components:**\n\n*汽车 (Car)\n\n**Aliases:**\n\n*汽车 (Car)\n\n**Elementary Constants:**\n\n* 扭矩 (Torque)\n\n**System Components:**\n\nAutomotive Domain Model\n------------------------\n\nThe Automotive Domain Model (ADM) is a standardized and extended model that defines fundamental concepts and elements in the automotive domain. The ADM focuses on the core component \"汽车 (Car)\" and its associated alias \"汽车 (Car)\".\n\nThe alias \"汽车 (Car)\" is used to facilitate communication and usage in various application scenarios.\n\nThe ADM also includes comprehensive explanatory comments to help developers and users better understand the meaning and application context of each element.\n\nThe ADM",
    "class 'Automobile' {\n\t+object属性的汽车信息\n\t\t*name\n\t\t*brand\n\t\t*model\n\t\t*year\n\t\t*color\n\t\t*mileage\n\t\t*torque\n\t\t*displacement\n\t\t*horsepower\n\t\t* fuelType\n\t\t*driveType\n\t\t*bodyStyle\n\t\t*engineType\n\t\t*transmissionType\n\t\t*axleType\n\t\t*wheelType\n\t\t*topSpeed\n\t\t*maxTorque\n\t\t*maxDis",
    "package 'Automobile' {\n\tattribute def make;\n\tattribute def model;\n\tattribute def year;\n\tattribute def torque;\n\tport def makePort {\n\t\tout make : make;\n\t}\n\tport def modelPort {\n\t\tout model : model;\n\t}\n\tport def yearPort {\n\t\tout year : year;\n\t}\n\tport def torquePort {\n\t\tout torque : torque;\n\t}\n\tpart context {\n\t\tpart car {\n\t\t\tport makePort: makePort;\n\t\t\tport modelPort: modelPort;\n\t\t\tport yearPort: yearPort;\n\t\t\tport torquePort: torquePort;\n\t\t\tperform getMakeModelYear {\n\t\t\t\tout make = makePort.make;\n\t\t\t\tout model = modelPort",
    "package 'Vehicle' {\n\tattribute def numCylinders;\n\tattribute def minCylinders;\n\tattribute def maxCylinders;\n\tport def numCylindersPort {\n\t\tout numCylinders : numCylinders;\n\t}\n\tport def minCylindersPort {\n\t\tout minCylinders : minCylinders;\n\t}\n\tport def maxCylindersPort {\n\t\tout maxCylinders : maxCylinders;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport numCylindersPort: numCylindersPort;\n\t\t\tport minCylindersPort: minCylindersPort;\n\t\t\tport maxCylindersPort: maxCylindersPort;\n\t\t\tperform configureEngineCylinders {\n\t\t\t\tout num",
    "package 'FuelManagement' {\n\tattribute def Temperature;\n\tattribute def FuelLevel;\n\tattribute def FuelType;\n\tattribute def FuelTank;\n\tattribute def Engine;\n\tport def FuelTankPort {\n\t\tout fuelLevel : FuelLevel;\n\t\tout fuelType : FuelType;\n\t}\n\tport def EnginePort {\n\t\tin fuelLevel : FuelLevel;\n\t\tin fuelType : FuelType;\n\t\tout fuelSupply : FuelSupply;\n\t\tout fuelReturn : FuelReturn;\n\t}\n\tpart fuelTank {\n\t\tport def FuelTankPort {\n\t\t\tin fuelLevel : FuelLevel;\n\t\t\tin fuelType : FuelType;\n\t\t}\n\t}\n\tpart engine {\n\t\tport def EnginePort {\n\t\t\tin fuelLevel : FuelLevel;\n\t\t\tin fuelType : FuelType;\n\t\t\tout fuelSupply : FuelSupply;\n\t\t\tout fuelReturn : FuelReturn;\n\t\t}\n\t\t",
    "\nThe vehicle structural architecture described in the input requirements can be modeled using the following SysML v2 textual model:\n\n<petri net>\n< definitions xmlns='http://www.omg.org/spec/Petri/20040514/Petri_Spec_20040514.xsd' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xsi:schemaLocation=\"http://www.omg.org/spec/"
]