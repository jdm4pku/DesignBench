[
    "package 'Vehicle' {\n\tpart context {\n\t\tpart vehicle {\n\t\t\tpart engine {\n\t\t\t\tpart driver {\n\t\t\t\t\tpart personnel {\n\t\t\t\t\t\tpart vehicle {\n\t\t\t\t\t\t\tpart engine {\n\t\t\t\t\t\t\t\tpart driver {\n\t\t\t\t\t\t\t\t\tpart personnel {\n\t\t\t\t\t\t\t\t\t\tpart vehicle {\n\t\t\t\t\t\t\t\t\t\t\tpart engine {\n\t\t\t\t\t\t\t\t\t\t\t\tpart driver {\n\t\t\t\t\t\t\t\t\t\t\t\t\tpart personnel {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart vehicle {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart engine {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart driver {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart personnel {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart vehicle {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart engine {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart driver {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart personnel {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart vehicle {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart engine {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart driver {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart personnel {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart vehicle {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart engine {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart driver {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart personnel {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart vehicle {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart engine {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart driver {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart personnel {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart vehicle {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart engine {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart driver {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart personnel {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart vehicle {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart engine {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart driver {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart personnel {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart",
    "package 'Vehicle' {\n\tpart context {\n\t\tpart personnel {\n\t\t\tattribute def name;\n\t\t\tattribute def age;\n\t\t\tattribute def sex;\n\t\t\tattribute def address;\n\t\t\tattribute def phone;\n\t\t\tattribute def drivingLicense;\n\t\t\tattribute def drivingLicenseType;\n\t\t\tattribute def drivingLicenseExpirationDate;\n\t\t\tattribute def drivingLicenseIssuingAuthority;\n\t\t\tattribute def drivingLicenseIssuingDate;\n\t\t\tattribute def drivingLicenseIssuingPlace;\n\t\t\tattribute def drivingLicenseNumber;\n\t\t\tattribute def drivingLicenseValidPeriod;\n\t\t\tattribute def drivingLicenseValidPeriodUnit;\n\t\t\tattribute def drivingLicenseValidPeriodUnitValue;\n\t\t\tattribute def drivingLicenseValidPeriodUnitValueUnit;\n\t\t\tattribute def drivingLicenseValidPeriodUnitValueUnitValue;\n\t\t\tattribute def drivingLicenseValidPeriodUnitValueUnitValueUnit;\n\t\t\tattribute def drivingLicenseValidPeriodUnitValueUnitValueUnitValue;\n\t\t\tattribute def drivingLicenseValidPeriodUnitValueUnitValueUnitValueUnit;\n\t\t\tattribute def drivingLicenseValidPeriodUnitValueUnitValueUnitValueUnitValue;\n\t\t\tattribute def drivingLicenseValidPeriodUnitValueUnitValueUnitValueUnitValueUnit;\n\t\t\tattribute def drivingLicenseValidPeriodUnitValueUnitValueUnit",
    "package 'Vehicle' {\n\tpart context {\n\t\tpart vehicle {\n\t\t\tpart engine;\n\t\t\tpart transmission;\n\t\t\tpart wheel {\n\t\t\t\tpart leftWheel;\n\t\t\t\tpart rightWheel;\n\t\t\t}\n\t\t}\n\t}\n}\n\npackage 'Vehicle' {\n\tpart context {\n\t\tpart vehicle {\n\t\t\tpart engine;\n\t\t\tpart transmission;\n\t\t\tpart wheel {\n\t\t\t\tpart leftWheel;\n\t\t\t\tpart rightWheel;\n\t\t\t}\n\t\t}\n\t}\n}\n\npackage 'Vehicle' {\n\tpart context {\n\t\tpart vehicle {\n\t\t\tpart engine;\n\t\t\tpart transmission;\n\t\t\tpart wheel {\n\t\t\t\tpart leftWheel;\n\t\t\t\tpart rightWheel;\n\t\t\t}\n\t\t}\n\t}\n}\n\npackage 'Vehicle' {\n\tpart context {\n\t\tpart vehicle {\n\t\t\tpart engine;\n\t\t\tpart transmission;\n\t\t\tpart wheel {\n\t\t\t\tpart leftWheel;\n\t\t\t\tpart rightWheel;\n\t\t\t}\n\t\t}\n\t}\n}\n\npackage 'Vehicle' {\n\tpart context {\n\t\tpart vehicle {\n\t\t\tpart engine;\n\t\t\tpart transmission;\n\t\t\tpart wheel {\n\t\t\t\tpart leftWheel;",
    "package 'Vehicle' {\n\tpart context {\n\t\tpart smallVehicle {\n\t\t\tpart smallEngine {\n\t\t\t\tpart cylinder {\n\t\t\t\t\tpart smallEngine {\n\t\t\t\t\t\tpart cylinder {\n\t\t\t\t\t\t\tpart smallEngine {\n\t\t\t\t\t\t\t\tpart cylinder {\n\t\t\t\t\t\t\t\t\tpart smallEngine {\n\t\t\t\t\t\t\t\t\t\tpart cylinder {\n\t\t\t\t\t\t\t\t\t\t\tpart smallEngine {\n\t\t\t\t\t\t\t\t\t\t\t\tpart cylinder {\n\t\t\t\t\t\t\t\t\t\t\t\t\tpart smallEngine {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart cylinder {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart smallEngine {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart cylinder {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart smallEngine {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart cylinder {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart smallEngine {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart cylinder {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart smallEngine {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart cylinder {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart smallEngine {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart cylinder {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart smallEngine {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart cylinder {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart smallEngine {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart cylinder {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart smallEngine {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart cylinder {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart smallEngine {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart cylinder {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart smallEngine {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart cylinder {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart smallEngine {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart cylinder {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart smallEngine {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart cylinder",
    "package 'TrafficSignal' {\n\tattribute def Color;\n\tport def ColorPort {\n\t\tout color: Color;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport colorPort: ColorPort;\n\t\t\tperform trafficSignal.sendColor {\n\t\t\t\tout color = colorPort.color;\n\t\t\t}\n\t\t}\n\t\tinterface userToTrafficSignal connect user.colorPort to trafficSignal.colorPort {\n\t\t\tref flow references trafficSignal.colorFlow\n\t\t\t\tfrom source.color to target.color; \n\t\t}\n\t\tpart trafficSignal {\n\t\t\tport colorPort: ~ColorPort;\n\t\t\tperform trafficSignal.produceColor {\n\t\t\t\tin color = colorPort.color;\n\t\t\t}\n\t\t}\n\t\tpart greenSignal {\n\t\t\tport colorPort: ~ColorPort;\n\t\t\tperform trafficSignal.produceColor {\n\t\t\t\tin color = colorPort.color;\n\t\t\t}\n\t\t}\n\t}\n\taction trafficSignal {\n\t\taction sendColor { out color: Color; }\n\t\tsuccession flow colorFlow from sendColor.color to produceColor.color;\n\t\taction produceColor { in color: Color; }\n\t}\n}\n\n",
    "package 'InformationClassificationManagementSystem' {\n\tattribute def Code;\n\tattribute def Color;\n\tattribute def Grade;\n\tport def CodePort {\n\t\tout code: Code;\n\t}\n\tport def ColorPort {\n\t\tout color: Color;\n\t}\n\tport def GradePort {\n\t\tout grade: Grade;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport codePort: CodePort;\n\t\t\tperform classifyInformation.sendCode {\n\t\t\t\tout code = codePort.code;\n\t\t\t}\n\t\t}\n\t\tinterface userToInformationClassificationManagementSystem connect user.codePort to informationClassificationManagementSystem.codePort {\n\t\t\tref flow references classifyInformation.codeFlow\n\t\t\t\tfrom source.code to target.code; \n\t\t}\n\t\tpart informationClassificationManagementSystem {\n\t\t\tport codePort: ~CodePort;\n\t\t\tperform classifyInformation.produceColor {\n\t\t\t\tin code = codePort.code;\n\t\t\t\t",
    "package 'Vehicle' {\n\tpart context {\n\t\tpart smallVehicle {\n\t\t\tpart engine {\n\t\t\t\tpart cylinder {\n\t\t\t\t\tpart context {\n\t\t\t\t\t\tpart cylinder {\n\t\t\t\t\t\t\tpart context {\n\t\t\t\t\t\t\t\tpart cylinder {\n\t\t\t\t\t\t\t\t\tpart context {\n\t\t\t\t\t\t\t\t\t\tpart cylinder {\n\t\t\t\t\t\t\t\t\t\t\tpart context {\n\t\t\t\t\t\t\t\t\t\t\t\tpart cylinder {\n\t\t\t\t\t\t\t\t\t\t\t\t\tpart context {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart cylinder {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart context {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart cylinder {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart context {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart cylinder {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart context {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart cylinder {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart context {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart cylinder {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart context {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart cylinder {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart context {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart cylinder {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart context {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart cylinder {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart context {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart cylinder {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart context {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart cylinder {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart context {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart cylinder {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart context {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart cylinder {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart context {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart cylinder {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart context {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart cylinder {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t",
    "package 'Vehicle' {\n\tattribute def VehicleType;\n\tattribute def FuelType;\n\tattribute def Driver;\n\tattribute def FuelTank;\n\tpart context {\n\t\tpart user {\n\t\t\tpart vehicle {\n\t\t\t\tpart fuelTank {\n\t\t\t\t\tpart fuel {\n\t\t\t\t\t\tpart fuelType {\n\t\t\t\t\t\t\tpart driver {\n\t\t\t\t\t\t\t\tpart personnel {\n\t\t\t\t\t\t\t\t\tpart person {\n\t\t\t\t\t\t\t\t\t\tpart personType {\n\t\t\t\t\t\t\t\t\t\t\tpart vehicle {\n\t\t\t\t\t\t\t\t\t\t\t\tpart vehicleType {\n\t\t\t\t\t\t\t\t\t\t\t\t\tpart fuel {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart fuelType {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart fuelTank {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart fuel {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart fuelType {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart driver {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart personnel {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart person {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart personType {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart vehicle {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart vehicleType {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart fuel {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart fuelType {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart fuelTank {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart fuel {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart fuelType {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart driver {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart personnel {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart person {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart personType {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart vehicle {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart vehicleType {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart fuel {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart fuelType {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t",
    "package 'WheelAssembly' {\n\tpart context {\n\t\tpart wheelBearingUnit {\n\t\t\tpart tire {\n\t\t\t\tpart bead {\n\t\t\t\t\tpart hub {\n\t\t\t\t\t\tpart rim {\n\t\t\t\t\t\t\tpart boltMountingHole {\n\t\t\t\t\t\t\t\tpart hub {\n\t\t\t\t\t\t\t\t\tpart threadedHole {\n\t\t\t\t\t\t\t\t\t\tpart boltConnection {\n\t\t\t\t\t\t\t\t\t\t\tpart bolt {\n\t\t\t\t\t\t\t\t\t\t\t\tpart bolt {\n\t\t\t\t\t\t\t\t\t\t\t\t\tpart bolt {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart bolt {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart bolt {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart bolt {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart bolt {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart bolt {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart bolt {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart bolt {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart bolt {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart bolt {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart bolt {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart bolt {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart bolt {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart bolt {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart bolt {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart bolt {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart bolt {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart bolt {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart bolt {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart bolt {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart bolt {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart bolt {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart bolt {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t",
    "package 'FuelManagementSystem' {\n\tattribute def Fuel;\n\tattribute def Temperature;\n\tport def FuelPort {\n\t\tout fuel: Fuel;\n\t}\n\tport def TemperaturePort {\n\t\tout temperature: Temperature;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport fuelPort: FuelPort;\n\t\t\tperform fuelManagement.sendFuel {\n\t\t\t\tout fuel = fuelPort.fuel;\n\t\t\t}\n\t\t}\n\t\tinterface userToFuelTank connect user.fuelPort to fuelTank.fuelPort {\n\t\t\tref flow references fuelManagement.fuelFlow\n\t\t\t\tfrom source.fuel to target.fuel; \n\t\t}\n\t\tpart fuelTank {\n\t\t\tport fuelPort: ~FuelPort;\n\t\t\tperform fuelManagement.receiveFuel {\n\t\t\t\tin fuel = fuelPort.fuel;\n\t\t\t}\n\t\t}\n\t\tpart engine {\n\t\t\tport fuelPort: ~FuelPort;\n\t\t\tperform fuelManagement.returnFuel {\n\t\t\t\tin fuel = fuelPort.fuel;\n\t\t\t}\n\t\t\tport temperaturePort: TemperaturePort;\n\t\t\tperform fuelManagement.sendTemperature {\n\t\t\t\tout temperature = temperaturePort.temperature;\n\t\t\t}\n\t\t}",
    "package 'Vehicle' {\n\tattribute def Mass;\n\tattribute def SteeringAngle;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tattribute def Mass;\n\t\t\tpart axle {\n\t\t\t\tattribute def Mass;\n\t\t\t\tpart tire {\n\t\t\t\t\tattribute def Mass;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpart vehicle1_c1 {\n\t\t\tpart vehicle {\n\t\t\t\tattribute def Mass;\n\t\t\t\tpart axle {\n\t\t\t\t\tattribute def Mass;\n\t\t\t\t\tpart tire {\n\t\t\t\t\t\tattribute def Mass;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart axle {\n\t\t\t\tattribute def Mass;\n\t\t\t\tpart tire {\n\t\t\t\t\tattribute def Mass;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart tire {\n\t\t\t\tattribute def Mass;\n\t\t\t}\n\t\t}\n\t}\n}\n\n## 2. \nYou are a software",
    "package 'CouplingSystem' {\n\tpart context {\n\t\tpart vehicle {\n\t\t\tpart hitch {\n\t\t\t\tpart couplingBall {\n\t\t\t\t\tpart connector {\n\t\t\t\t\t\tpart hitch {\n\t\t\t\t\t\t\tpart couplingBall {\n\t\t\t\t\t\t\t\tpart connector {\n\t\t\t\t\t\t\t\t\tpart hitch {\n\t\t\t\t\t\t\t\t\t\tpart couplingBall {\n\t\t\t\t\t\t\t\t\t\t\tpart connector {\n\t\t\t\t\t\t\t\t\t\t\t\tpart hitch {\n\t\t\t\t\t\t\t\t\t\t\t\t\tpart couplingBall {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart connector {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart hitch {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart couplingBall {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart connector {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart hitch {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart couplingBall {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart connector {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart hitch {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart couplingBall {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart connector {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart hitch {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart couplingBall {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart connector {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart hitch {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart couplingBall {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart connector {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart hitch {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart couplingBall {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart connector {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t",
    "package 'VehiclePowerTransmissionSystem' {\n\tattribute def FuelCommand;\n\tattribute def Power;\n\tattribute def Clutch;\n\tport def FuelCommandPort {\n\t\tout fuelCommand: FuelCommand;\n\t}\n\tport def PowerPort {\n\t\tout power: Power;\n\t}\n\tport def ClutchPort {\n\t\tout clutch: Clutch;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport fuelCommandPort: FuelCommandPort;\n\t\t\tperform driveVehicle.sendFuelCommand {\n\t\t\t\tout fuelCommand = fuelCommandPort.",
    "package 'System' {\n\tpart context {\n\t\tpart b11 {\n\t\t\tpart c1 {\n\t\t\t\tport pb: ~pe;\n\t\t\t}\n\t\t\tpart c2 {\n\t\t\t\tport pc: ~pe;\n\t\t\t}\n\t\t\tinterface pe connect c1.pb to c2.pc;\n\t\t}\n\t\tpart b12 {\n\t\t\tpart c3 {\n\t\t\t\tport pd: ~pf;\n\t\t\t}\n\t\t\tpart c4 {\n\t\t\t\tport pe: ~pf;\n\t\t\t}\n\t\t\tinterface pf connect c3.pd to c4.pe;\n\t",
    "package 'Powertrain' {\n\tattribute def FuelCommand;\n\tattribute def EngineState;\n\tport def FuelCommandPort {\n\t\tout fuelCommand: FuelCommand;\n\t}\n\tport def EngineStatePort {\n\t\tout engineState: EngineState;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport fuelCommandPort: FuelCommandPort;\n\t\t\tperform fuelCommand.sendFuelCommand {\n\t\t\t\tout fuelCommand = fuelCommandPort.fuelCommand;\n\t\t\t}\n\t\t}\n\t\tinterface userToFuelCommand connect user.fuelCommandPort to fuelCommand.fuelCommandPort {\n\t\t\tref flow references fuelCommand.fuelCommandFlow\n\t\t\t\tfrom source.fuelCommand to target.fuelCommand; \n\t\t}\n\t\tpart fuelCommand {\n\t\t\tport fuelCommandPort: ~FuelCommandPort;\n\t\t\tperform fuelCommand.produceEngineTorque {\n\t\t\t\tin fuelCommand = fuelCommandPort.fuelCommand;\n\t\t\t\tout engineTorque = engineTorquePort.engineTorque;\n\t\t\t}\n\t\t\tport engineTorquePort: EngineTorquePort;\n\t\t}",
    "package 'Powertrain' {\n\tattribute def FuelCmd;\n\tattribute def StallCmd;\n\tattribute def Torque;\n\tport def FuelCmdPort {\n\t\tout fuelCmd: FuelCmd;\n\t}\n\tport def StallCmdPort {\n\t\tout stallCmd: StallCmd;\n\t}\n\tport def TorquePort {\n\t\tout torque: Torque;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport fuelCmdPort: FuelCmdPort;\n\t\t\tport stallCmdPort: StallCmdPort;\n\t\t\tperform startEngine.sendFuelCmd {\n\t\t\t\tout fuelCmd = fuelCmdPort.fuelCmd;\n\t\t\t}\n\t\t\tperform startEngine.sendStallCmd {\n\t\t\t\tout stallCmd = stallCmdPort.stallCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToPowertrain connect user.fuelCmdPort to powertrain.fuelCmdPort {\n\t\t\tref flow references startEngine.fuelCmdFlow\n\t\t\t\tfrom source.fuelCmd to target.fuelCmd;\n\t\t}\n\t\tinterface userToPowertrain connect user.stallCmdPort to powertrain.stallCmdPort {",
    "package 'VehiclePowertrainSystem' {\n\tattribute def EngineStartSignal;\n\tattribute def EngineShutdownSignal;\n\tattribute def FuelCommand;\n\tattribute def EngineOutputTorque;\n\tport def EngineStartSignalPort {\n\t\tout engineStartSignal: EngineStartSignal;\n\t}\n\tport def EngineShutdownSignalPort {\n\t\tout engineShutdownSignal: EngineShutdownSignal;\n\t}\n\tport def FuelCommandPort {\n\t\tout fuelCommand: FuelCommand;\n\t}\n\tport def EngineOutputTorquePort {\n\t\tout engineOutputTorque: EngineOutputTorque;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport engineStartSignalPort: EngineStartSignalPort;\n\t\t\tperform startEngine.sendEngineStartSignal {\n\t\t\t\tout engineStartSignal = engineStartSignalPort.engineStartSignal;\n\t\t\t}\n\t\t\tport fuelCommandPort: FuelCommandPort;\n\t\t\tperform startEngine.sendFuelCommand {\n\t\t\t\tout fuelCommand = fuelCommandPort.fuelCommand;\n\t\t\t}\n\t\t}\n\t\tinterface userToVehiclePowertrainSystem connect user.engineStartSignalPort to vehiclePowertrainSystem.engineStartSignalPort {",
    "package 'VehicleTrailerPowerConnection' {\n\tattribute def PowerConnectionState;\n\tattribute def PowerConnectionCmd;\n\tport def PowerConnectionStatePort {\n\t\tout powerConnectionState: PowerConnectionState;\n\t}\n\tport def PowerConnectionCmdPort {\n\t\tout powerConnectionCmd: PowerConnectionCmd;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport powerConnectionStatePort: PowerConnectionStatePort;\n\t\t\tperform connectVehicleToTrailer.sendPowerConnectionCmd {\n\t\t\t\tout powerConnectionCmd = powerConnectionStatePort.powerConnectionCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToVehicle connect user.powerConnectionStatePort to vehicle.powerConnectionStatePort {\n\t\t\tref flow references connectVehicleToTrailer.powerConnectionStateFlow\n\t\t\t\tfrom source.powerConnectionState to target.powerConnectionState; \n\t\t}\n\t\tinterface userToTrailer connect user.powerConnectionStatePort to trailer.powerConnectionStatePort {\n\t\t\tref flow references connectVehicleToTrailer.powerConnectionStateFlow\n\t\t\t\tfrom source.powerConnectionState to target.powerConnectionState; \n\t\t}\n\t\tpart vehicle {\n\t\t\tport powerConnectionStatePort: ~PowerConnection",
    "package 'VehicleTrailer' {\n\tattribute def ConnectionStatus;\n\tport def ConnectionStatusPort;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport connectionStatusPort: ConnectionStatusPort;\n\t\t\tperform connectToTrailer.sendConnectionStatus {\n\t\t\t\tout connectionStatus = connectionStatusPort.connectionStatus;\n\t\t\t}\n\t\t}\n\t\tinterface vehicleToTrailer connect vehicle.connectionStatusPort to trailer.connectionStatusPort {\n\t\t\tref flow references connectToTrailer.connectionStatusFlow\n\t\t\t\tfrom source.connectionStatus to target.connectionStatus; \n\t\t}\n\t\tpart trailer {\n\t\t\tport connectionStatusPort: ~ConnectionStatusPort;\n\t\t\tperform connectToTrailer.produceConnectionStatus {\n\t\t\t\tin connectionStatus = connectionStatusPort.connectionStatus;\n\t\t\t}\n\t\t}\n\t}\n\taction connectToTrailer {\n\t\taction sendConnectionStatus { out connectionStatus: ConnectionStatus; }\n\t\tsuccession flow connectionStatusFlow from sendConnectionStatus.connectionStatus to produceConnectionStatus.connectionStatus;\n\t\taction produceConnectionStatus { in connectionStatus:",
    "package 'Vehicle' {\n\tattribute def TowBall;\n\tport def TowBallPort {\n\t\tout towBall: TowBall;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport towBallPort: TowBallPort;\n\t\t\tperform hitchTrailer.sendTowBall {\n\t\t\t\tout towBall = towBallPort.towBall;\n\t\t\t}\n\t\t}\n\t\tinterface userToVehicle connect user.towBallPort to vehicle.towBallPort {\n\t\t\tref flow references hitchTrailer.towBallFlow\n\t\t\t\tfrom source.towBall to target.towBall; \n\t\t}\n\t\tpart vehicle {\n\t\t\tport towBallPort: ~TowBallPort;\n\t\t\tperform hitchTrailer.produceTowBall {\n\t\t\t\tin towBall = towBallPort.towBall;\n\t\t\t}\n\t\t}\n\t\tpart trailer {\n\t\t\tport towBallPort: ~TowBallPort;\n\t\t\tperform hitchTrailer.produceTowBall {\n\t\t\t\tin towBall = towBallPort.towBall;\n\t\t\t}\n\t\t}\n\t}\n\taction h",
    "package 'FuelSystem' {\n\tattribute def Fuel;\n\tattribute def Temperature;\n\tport def FuelPort {\n\t\tout fuel: Fuel;\n\t}\n\tport def TemperaturePort {\n\t\tout temperature: Temperature;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport fuelPort: FuelPort;\n\t\t\tperform fuelSupply.sendFuel {\n\t\t\t\tout fuel = fuelPort.fuel;\n\t\t\t}\n\t\t}\n\t\tinterface userToFuelSupply connect user.fuelPort to fuelSupply.fuelPort {\n\t\t\tref flow references fuelSupply.fuelFlow\n\t\t\t\tfrom source.fuel to target.fuel; \n\t\t}\n\t\tpart fuelSupply {\n\t\t\tport fuelPort: ~FuelPort;\n\t\t\tperform fuelSupply.produceFuel {\n\t\t\t\tin fuel = fuelPort.fuel;\n\t\t\t\tout fuel = fuelPort.fuel;\n\t\t\t}\n\t\t\tport temperaturePort: TemperaturePort;\n\t\t\tperform fuelSupply.monitorTemperature {\n\t\t\t\tin temperature = temperaturePort.temperature;\n\t\t\t}\n\t\t}\n\t\tpart fuelReturn {\n\t\t\tport fuelPort: ~FuelPort;\n\t\t\tperform fuelSupply.returnFuel {\n\t\t\t\tin fuel = fuel",
    "package 'FuelManagementSystem' {\n\tattribute def FuelLevel;\n\tattribute def FuelCapacity;\n\tport def FuelLevelPort {\n\t\tout fuelLevel: FuelLevel;\n\t}\n\tport def FuelCapacityPort {\n\t\tout fuelCapacity: FuelCapacity;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport fuelLevelPort: FuelLevelPort;\n\t\t\tperform fuelManagement.sendFuelLevel {\n\t\t\t\tout fuelLevel = fuelLevelPort.fuelLevel;\n\t\t\t}\n\t\t}\n\t\tinterface userToFuelManagement connect user.fuelLevelPort to fuelManagement.fuelLevelPort {\n\t\t\tref flow references fuelManagement.fuelLevelFlow\n\t\t\t\tfrom source.fuelLevel to target.fuelLevel; \n\t\t}\n\t\tpart fuelManagement {\n\t\t\tport fuelLevelPort: ~FuelLevelPort;\n\t\t\tperform fuelManagement.produceFuelLevel {\n\t\t\t\tin fuelLevel = fuelLevelPort.fuelLevel;\n\t\t\t}\n\t\t\tport fuelCapacityPort: FuelCapacityPort;\n\t\t\tperform fuelManagement.produceFuelCapacity {\n\t\t\t\t",
    "package 'AutomobileAssembly' {\n\tpart context {\n\t\tpart user {\n\t\t\tport vehicleAssemblyPort: VehicleAssemblyPort;\n\t\t\tperform assembleVehicle.sendVehicleAssembly {\n\t\t\t\tout vehicleAssembly = vehicleAssemblyPort.vehicleAssembly;\n\t\t\t}\n\t\t}\n\t\tinterface userToVehicleAssembly connect user.vehicleAssemblyPort to vehicleAssembly.vehicleAssemblyPort {\n\t\t\tref flow references assembleVehicle.vehicleAssemblyFlow\n\t\t\t\tfrom source.vehicleAssembly to target.vehicleAssembly; \n\t\t}\n\t\tpart vehicleAssembly {\n\t\t\tport vehicleAssemblyPort: ~VehicleAssemblyPort;\n\t\t\tperform assembleVehicle.produceVehicle {\n\t\t\t\tin vehicleAssembly = vehicleAssemblyPort.vehicleAssembly;\n\t\t\t\tout vehicle: Vehicle;\n\t\t\t}\n\t\t\tport vehiclePort: VehiclePort;\n\t\t}\n\t\tpart gearbox {\n\t\t\tport vehiclePort: ~VehiclePort;\n\t\t\tperform assembleVehicle.produceGearbox {\n\t\t\t\tin vehicle = vehiclePort.vehicle;\n\t\t\t\tout gearbox: Gearbox;\n\t\t\t",
    "package 'VehicleA' {\n\tattribute def VehicleState;\n\tattribute def VehicleHealth;\n\tport def VehicleStatePort;\n\tport def VehicleHealthPort;\n\tpart context {\n\t\tpart user {\n\t\t\tport vehicleStatePort: VehicleStatePort;\n\t\t\tperform vehicleA.sendVehicleState {\n\t\t\t\tout vehicleState = vehicleStatePort.vehicleState;\n\t\t\t}\n\t\t}\n\t\tinterface userToVehicleA connect user.vehicleStatePort to vehicleA.vehicleStatePort {\n\t\t\tref flow references vehicleA.vehicleState",
    "package 'Vehicle' {\n\tattribute def VehicleStatus;\n\tattribute def Temperature;\n\tattribute def Fuel;\n\tport def VehicleStatusPort;\n\tport def TemperaturePort;\n\tport def FuelPort;\n\tpart context {\n\t\tpart user {\n\t\t\tport vehicleStatusPort: VehicleStatusPort;\n\t\t\tport temperaturePort: TemperaturePort;\n\t\t\tport fuelPort: FuelPort;\n\t\t\tperform vehicle.receiveVehicleStatus {\n\t\t\t\tin vehicleStatus = vehicleStatusPort.vehicleStatus;\n\t\t\t}\n\t\t\tperform vehicle.receiveTemperature {\n\t\t\t\tin temperature = temperaturePort.temperature;\n\t\t\t}\n\t\t\tperform vehicle.receiveFuel {\n\t\t\t\tin fuel = fuelPort.fuel;\n\t\t\t}\n\t\t}\n\t\tinterface userToVehicle connect user.vehicleStatusPort to vehicle.vehicleStatusPort {\n\t\t\tref flow references vehicle.vehicleStatusFlow\n\t\t\t\t",
    "package 'Vehicle' {\n\tattribute def Mass;\n\tattribute def Position;\n\tattribute def Velocity;\n\tattribute def Acceleration;\n\tattribute def Slope;\n\tattribute def Friction;\n\tattribute def State;\n\tport def MassPort;\n\tport def PositionPort;\n\tport def VelocityPort;\n\tport def AccelerationPort;\n\tport def SlopePort;\n\tport def FrictionPort;\n\tport def StatePort;\n\tpart context {\n\t\tpart user {\n\t\t\tport massPort: MassPort;\n\t\t\tport positionPort: PositionPort;\n\t\t\tport velocityPort: VelocityPort;\n\t\t\tport accelerationPort: AccelerationPort;\n\t\t\tport slopePort: SlopePort;\n\t\t\tport frictionPort: FrictionPort;\n\t\t\tport statePort: StatePort;\n\t\t\tperform driveVehicle.setVehicleParameters {\n\t\t\t\tin mass = massPort.mass;\n\t\t\t\tin position = positionPort.position;\n\t\t\t\tin velocity = velocityPort.velocity;\n\t\t\t\tin acceleration = accelerationPort.acceleration;\n\t\t\t\tin slope = slopePort.slope;\n\t\t\t\tin friction = frictionPort.friction;\n\t\t",
    "package 'VehicleConfigurationManagementSystem' {\n\tattribute def Configuration;\n\tattribute def Subsystem;\n\tattribute def Component;\n\tport def ConfigurationPort {\n\t\tout configuration: Configuration;\n\t}\n\tport def SubsystemPort {\n\t\tout subsystem: Subsystem;\n\t}\n\tport def ComponentPort {\n\t\tout component: Component;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport configurationPort: ConfigurationPort;\n\t\t\tperform selectConfiguration.sendConfiguration {\n\t\t\t\t",
    "package 'VehiclePlatform' {\n\tpart context {\n\t\tpart user {\n\t\t\tport p1: ~Port1;\n\t\t\tport p2: ~Port2;\n\t\t\tperform userToSubsystemA.connect {\n\t\t\t\tin p1 = p1;\n\t\t\t\tin p2 = p2;\n\t\t\t}\n\t\t}\n\t\tpart subsystemA {\n\t\t\tport p1: ~Port1;\n\t\t\tport p2: ~Port2;\n\t\t\tperform subsystemAToSubsystemB.connect {\n\t\t\t\tin p1 = p1;\n\t\t\t\tin p2 = p2;\n\t\t\t}\n\t\t}\n\t\tpart subsystemB {\n\t\t\tport p1: ~Port1;\n\t\t\tport p2: ~Port2;\n\t\t\tperform subsystemBToUser.connect {\n\t\t\t",
    "package 'VehicleConfigurationSystem' {\n\tattribute def VehicleModel;\n\tattribute def Engine;\n\tattribute def Transmission;\n\tattribute def Wheel;\n\tattribute def Performance;\n\tattribute def Compatibility;\n\tport def VehicleModelPort;\n\tport def EnginePort;\n\tport def TransmissionPort;\n\tport def WheelPort;\n\tport def PerformancePort;\n\tport def CompatibilityPort;\n\tpart context {\n\t\tpart user {\n\t\t\tport vehicleModelPort: VehicleModelPort;\n\t\t\tport enginePort: EnginePort;\n\t\t\tport transmissionPort: TransmissionPort;\n\t\t\tport wheelPort: WheelPort;\n\t\t\tport performancePort: PerformancePort;\n\t\t\tport compatibilityPort: CompatibilityPort;\n\t\t\tperform selectVehicleModel.sendVehicleModel {\n\t\t\t\tout vehicleModel = vehicleModelPort.vehicleModel;\n\t\t\t}\n\t\t\tperform selectVehicleModel.sendEngine {\n\t\t\t\tout engine = enginePort.engine;\n\t\t\t}\n\t\t\tperform selectVehicleModel.sendTransmission {\n\t\t\t\tout transmission",
    "package 'Vehicle' {\n\tattribute def Mass;\n\tattribute def FuelStatus;\n\tattribute def Reliability;\n\tport def MassPort;\n\tport def FuelStatusPort;\n\tport def ReliabilityPort;\n\tpart context {\n\t\tpart user {\n\t\t\tport massPort: MassPort;\n\t\t\tperform defineVehicle.sendMass {\n\t\t\t\tout mass = massPort.mass;\n\t\t\t}\n\t\t}\n\t\tinterface userToVehicle connect user.massPort to vehicle.massPort {\n\t\t\tref flow references defineVehicle.massFlow\n\t\t\t\tfrom source.mass to target.mass; \n\t\t}\n\t\tpart vehicle {\n\t\t\tport massPort: ~MassPort;\n\t\t\t",
    "package 'VehicleMassComplianceVerification' {\n\tattribute def Vehicle;\n\tattribute def Mass;\n\tattribute def Compliance;\n\tport def VehiclePort {\n\t\tout vehicle: Vehicle;\n\t}\n\tport def MassPort {\n\t\tout mass: Mass;\n\t}\n\tport def CompliancePort {\n\t\tout compliance: Compliance;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport vehiclePort: VehiclePort;\n\t\t\tperform verifyVehicleMass.sendVehicle {\n\t\t\t\tout vehicle = vehiclePort.vehicle;\n\t\t\t}\n\t\t}\n\t\tinterface userToVehicle connect user.vehiclePort to vehicle.vehiclePort {\n\t\t\tref flow references verifyVehicleMass.vehicleFlow\n\t\t\t\tfrom source.vehicle to target.vehicle; \n\t\t}\n\t\tpart vehicle {\n\t\t\tport vehiclePort: ~VehiclePort;\n\t\t\tperform verifyVehicleMass.produceMass {\n\t\t\t\tin vehicle = vehiclePort.vehicle;\n\t\t\t\tout mass = massPort.mass;\n\t\t\t}\n\t\t\tport massPort: MassPort;\n\t\t}\n\t\tpart massVerification {\n\t\t\tport massPort: ~MassPort;\n\t\t\tperform verifyVehicleMass.verifyMass {\n\t\t\t\tin",
    "package 'WaterSupplyNetwork' {\n\tpart context {\n\t\tpart user {\n\t\t\tport spigotBankToFaucet1 connect spigotBank.spigotBankToFaucet1 to faucet1.faucetToFaucet1 {\n\t\t\t\tref flow references spigotBankToFaucet1Flow from spigotBank.spigotBankToFaucet1 to faucet1.faucetToFaucet1;\n\t\t\t}\n\t\t\tport faucet1ToFaucet2 connect faucet1.faucetToFaucet2 to faucet2.faucetToFaucet2 {\n\t\t\t\tref flow references faucet1ToFaucet2Flow from faucet1.faucetToFaucet2 to faucet2.faucetToFaucet2;\n\t\t\t}\n\t\t\tport faucet2ToFaucet3 connect faucet2.faucetToFaucet3 to faucet3.faucetToFaucet3 {\n\t\t\t\tref flow references faucet2ToFaucet3Flow from faucet2.faucetToFaucet3 to faucet3",
    "package 'VehicleQualityAnalysis' {\n\tattribute def Vehicle;\n\tattribute def Component;\n\tattribute def Quality;\n\tport def VehiclePort {\n\t\tout vehicle: Vehicle;\n\t}\n\tport def ComponentPort {\n\t\tout component: Component;\n\t}\n\tport def QualityPort {\n\t\tout quality: Quality;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport vehiclePort: VehiclePort;\n\t\t\tperform analyzeVehicle.sendVehicle {\n\t\t\t\tout vehicle = vehiclePort.vehicle;\n\t\t\t}\n\t\t}\n\t\tinterface userToVehicleQualityAnalysis connect user.vehiclePort to vehicleQualityAnalysis.vehiclePort {\n\t\t\tref flow references analyzeVehicle.vehicleFlow\n\t\t\t\tfrom source.vehicle to target.vehicle; \n\t\t}\n\t\tpart vehicleQualityAnalysis {\n\t\t\tport vehiclePort: ~VehiclePort;\n\t\t\tperform analyzeVehicle.produceVehicle {\n\t\t\t\tin vehicle = vehiclePort.vehicle;\n\t\t\t\tout vehicle = vehiclePort.vehicle;\n\t\t\t}\n\t\t\tport componentPort: ComponentPort;\n\t\t\tperform analyzeVehicle.produceComponent {\n\t\t\t\tin vehicle = vehiclePort.vehicle;\n\t\t\t\tout component = componentPort.component;\n\t\t\t}\n\t\t",
    "package 'VehiclePowertrainConfiguration' {\n\tattribute def EngineType;\n\tattribute def EngineConfiguration;\n\tattribute def EnginePerformance;\n\tattribute def EngineCost;\n\tattribute def EngineEfficiency;\n\tattribute def EngineReliability;\n\tattribute def EngineMass;\n\tattribute def EnginePower;\n\tattribute def EngineCost;\n\tattribute def EngineEfficiency;\n\tattribute def EngineReliability;\n\tattribute def EngineMass;\n\tattribute def EnginePower;\n\tattribute def EngineCost;\n\tattribute def EngineEfficiency;\n\tattribute def EngineReliability;\n\tattribute def EngineMass;\n\tattribute def EnginePower;\n\tattribute def EngineCost;\n\tattribute def EngineEfficiency;\n\tattribute def EngineReliability;\n\tattribute def EngineMass;\n\tattribute def EnginePower;\n\tattribute def EngineCost;\n\tattribute def EngineEfficiency;\n\tattribute def EngineReliability;\n\tattribute def Engine",
    "package 'Fuel Economy' {\n\tattribute def FuelEconomy;\n\tattribute def FuelEconomyTarget;\n\tattribute def FuelEconomyScenario;\n\tattribute def FuelEconomyTest;\n\tattribute def FuelEconomyTestResults;\n\tattribute def FuelEconomyTestStatus;\n\tattribute def FuelEconomyTestStatusReason;\n\tattribute def FuelEconomyTestStatusReasonCode;\n\tattribute def FuelEconomyTestStatusReasonDescription;\n\tattribute def FuelEconomyTestStatusReasonCodeDescription;\n\tattribute def FuelEconomyTestStatusReasonCodeDescription;\n\tattribute def FuelEconomyTestStatusReasonCodeDescription;\n\tattribute def FuelEconomyTestStatusReasonCodeDescription;\n\tattribute def FuelEconomyTestStatusReasonCodeDescription;\n\tattribute def FuelEconomyTestStatusReasonCodeDescription;\n\tattribute def FuelEconomy",
    "package 'VehicleMotionSimulation' {\n\tattribute def Mass;\n\tattribute def InitialPosition;\n\tattribute def InitialVelocity;\n\tattribute def Power;\n\tport def MassPort;\n\tport def InitialPositionPort;\n\tport def InitialVelocityPort;\n\tport def PowerPort;\n\tpart context {\n\t\tpart user {\n\t\t\tport massPort: MassPort;\n\t\t\tport initialPositionPort: InitialPositionPort;\n\t\t\tport initialVelocityPort: InitialVelocityPort;\n\t\t\tport powerPort: PowerPort;\n\t\t\tperform simulateVehicleMotion.inputParameters {\n\t\t\t\tin mass = massPort.mass;\n\t\t\t\tin initialPosition = initialPositionPort.initialPosition;\n\t\t\t\tin initialVelocity = initialVelocityPort.initialVelocity;\n\t\t\t\tin power = powerPort.power;\n\t\t\t}\n\t\t}\n\t\tinterface userToVehicleMotion connect user.massPort to vehicleMotion.massPort {\n\t\t\tref flow references simulateVehicleMotion.massFlow\n\t\t\t\tfrom source.mass to target.mass;\n\t\t}\n\t\tinterface userToVehicleMotion connect user.initialPositionPort to vehicleMotion.initialPositionPort {\n\t\t\tref flow references simulateVehicleMotion.initialPositionFlow\n\t\t\t\tfrom source",
    "package 'Vehicle' {\n\tpart context {\n\t\tpart vehicle {\n\t\t\tpart frontAxle {\n\t\t\t\tpart frontWheel {\n\t\t\t\t\tpart wheel {\n\t\t\t\t\t\tattribute def mass;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpart axle {\n\t\t\t\t\tattribute def mass;\n\t\t\t\t\tattribute def steeringAngle;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart rearAxle {\n\t\t\t\tpart rearWheel {\n\t\t\t\t\tpart wheel {\n\t\t\t\t\t\tattribute def mass;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpart axle {\n\t\t\t\t\tattribute def mass;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n––––– FEW‑SHOT EXAMPLES –––––\n\nInput Requirements:\nThe system model describes a car with a total mass of 2,500 kg, whose structure comprises front and rear axle assemblies. The front axle assembly has a mass of 150 kg and consists of two front wheels and a front axle; the front axle is characterized by properties of mass and steering angle. The rear axle assembly has a mass of 2",
    "package 'Vehicle Safety and Security Management System' {\n\tpart context {\n\t\tpart user {\n\t\t\tport safetyFeaturesPort: ~SafetyFeaturesPort;\n\t\t\tperform displaySafetyFeatures.displaySafetyFeatures {\n\t\t\t\tin safetyFeatures = safetyFeaturesPort.safetyFeatures;\n\t\t\t}\n\t\t}\n\t\tpart system {\n\t\t\tport safetyFeaturesPort: SafetyFeaturesPort;\n\t\t\tperform displaySafetyFeatures.displaySafetyFeatures {\n\t\t\t\tout safetyFeatures = safetyFeaturesPort.safetyFeatures;\n\t\t\t}\n\t\t}\n\t\tinterface userToSystem connect user.safetyFeaturesPort to system.safetyFeaturesPort {\n\t\t\tref flow references displaySafetyFeatures.safetyFeaturesFlow\n\t\t\t\tfrom source.safetyFeatures to target.safetyFeatures;\n\t\t}\n\t\tpart safetyFeatures {\n\t\t\tport safetyFeaturesPort: ~SafetyFeaturesPort;\n\t\t\tperform displaySafetyFeatures.displaySafetyFeatures {\n\t\t\t\tin safetyFeatures = safetyFeaturesPort.safetyFeatures;\n\t\t\t}\n\t\t}\n\t}\n\taction displaySafety",
    "package 'System' {\n\tattribute def x;\n\tattribute def y;\n\tattribute def z;\n\tpart context {\n\t\tpart application {\n\t\t\tperform application.useService {\n\t\t\t\tin x = x;\n\t\t\t\tin y = y;\n\t\t\t\tout z = z;\n\t\t\t}\n\t\t}\n\t\tpart service {\n\t\t\tperform service.useData {\n\t\t\t\tin x = x;\n\t\t\t\tin y = y;\n\t\t\t\tout z = z;\n\t\t\t}\n\t\t}\n\t\tpart data {\n\t\t\tperform data.storeData {\n\t\t\t\tin x = x;\n\t\t\t\tin y = y;\n\t\t\t\tin z = z;\n\t\t\t}\n\t\t}\n\t}\n\taction application {\n\t\taction useService { in x; in y; out z; }\n\t}\n\taction service {\n\t\taction useData { in x; in y; out z; }\n\t}\n\taction data {\n\t\taction storeData { in x; in y; in z; }\n\t}\n}\n\n––––– FEW‑SHOT EXAMPLES –––––\n\nInput Requirements:\nI want to create a system that can detect the presence of",
    "package 'TorqueGenerator' {\n\tattribute def Torque;\n\tport def TorquePort {\n\t\tout torque: Torque;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport torquePort: TorquePort;\n\t\t\tperform generateTorque.sendTorque {\n\t\t\t\tout torque = torquePort.torque;\n\t\t\t}\n\t\t}\n\t\tinterface userToTorqueGenerator connect user.torquePort to torqueGenerator.torquePort {\n\t\t\tref flow references generateTorque.torqueFlow\n\t\t\t\tfrom source.torque to target.torque; \n\t\t}\n\t\tpart torqueGenerator {\n\t\t\tport torquePort: ~TorquePort;\n\t\t\tperform generateTorque.produceTorque {\n\t\t\t\tin torque = torquePort.torque;\n\t\t\t}\n\t\t}\n\t}\n\taction generateTorque {\n\t\taction sendTorque { out torque: Torque; }\n\t\tsuccession flow torqueFlow from sendTorque.torque to produceTorque.torque;\n\t\taction produceTorque { in torque: Torque; }\n\t}\n}\n\nInput",
    "package 'Powertrain' {\n\tattribute def Power;\n\tattribute def Torque;\n\tport def PowerPort {\n\t\tout power: Power;\n\t}\n\tport def TorquePort {\n\t\tout torque: Torque;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport powerPort: PowerPort;\n\t\t\tperform powertrain.providePower {\n\t\t\t\tout power = powerPort.power;\n\t\t\t}\n\t\t}\n\t\tinterface userToPowertrain connect user.powerPort to powertrain.powerPort {\n\t\t\tref flow references powertrain.powerFlow\n\t\t\t\tfrom source.power to target.power;\n\t\t}\n\t\tpart powertrain {\n\t\t\tport powerPort: ~PowerPort;\n\t\t\tperform powertrain.generateTorque {\n\t\t\t\tin power = powerPort.power;\n\t\t\t\tout torque = torquePort.torque;\n\t\t\t}\n\t\t\tport torquePort: TorquePort;\n\t\t}\n\t\tpart engine {\n\t\t\tport torquePort: ~TorquePort;\n\t\t\tperform engine.executeTorque {\n\t\t\t\tin torque = torquePort.torque;\n\t\t\t}\n\t\t}\n\t",
    "package 'Vehicle Safety and Anti-theft Function Catalogue' {\n\tpart context {\n\t\tpart user {\n\t\t\tpart safety {\n\t\t\t\tpart seatBelt {\n\t\t\t\t\tpart driver {\n\t\t\t\t\t\tpart airbag {\n\t\t\t\t\t\t\tpart driver {\n\t\t\t\t\t\t\t\tpart airbag {\n\t\t\t\t\t\t\t\t\tpart driver {\n\t\t\t\t\t\t\t\t\t\tpart airbag {\n\t\t\t\t\t\t\t\t\t\t\tpart driver {\n\t\t\t\t\t\t\t\t\t\t\t\tpart airbag {\n\t\t\t\t\t\t\t\t\t\t\t\t\tpart driver {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart airbag {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart driver {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart airbag {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart driver {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart airbag {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart driver {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart airbag {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart driver {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart airbag {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart driver {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart airbag {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart driver {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart airbag {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart driver {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart airbag {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t",
    "package 'FuelSystem' {\n\tattribute def FuelTemperature;\n\tattribute def FuelFlow;\n\tport def FuelTemperaturePort {\n\t\tout fuelTemperature: FuelTemperature;\n\t}\n\tport def FuelFlowPort {\n\t\tout fuelFlow: FuelFlow;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport fuelTemperaturePort: FuelTemperaturePort;\n\t\t\tperform monitorFuelTemperature.sendFuelTemperature {\n\t\t\t\tout fuelTemperature = fuelTemperaturePort.fuelTemperature;\n\t\t\t}\n\t\t}\n\t\tinterface userToFuelSystem connect user.fuelTemperaturePort to fuelSystem.fuelTemperaturePort {\n\t\t\tref flow references monitorFuelTemperature.fuelTemperatureFlow\n\t\t\t\tfrom source.fuelTemperature to target.fuelTemperature; \n\t\t}\n\t\tpart fuelSystem {\n\t\t\tport fuelTemperaturePort: ~FuelTemperaturePort;\n\t\t\tperform monitorFuelTemperature.receiveFuelTemperature {\n\t\t\t\tin fuelTemperature = fuelTemperaturePort.fuelTemperature;\n\t\t\t}\n\t\t\tport fuelFlowPort: FuelFlowPort;\n\t\t\tperform monitorFuelTemperature.sendFuelFlow {\n\t\t\t\tout fuelFlow = fuelFlowPort.fuelFlow;\n\t\t\t}\n\t\t}\n\t\t",
    "package 'Vehicle' {\n\tpart context {\n\t\tpart user {\n\t\t\tpart seatBelt {\n\t\t\t\tpart seatBelt {\n\t\t\t\t\tpart seatBelt {\n\t\t\t\t\t\tpart seatBelt {\n\t\t\t\t\t\t\tpart seatBelt {\n\t\t\t\t\t\t\t\tpart seatBelt {\n\t\t\t\t\t\t\t\t\tpart seatBelt {\n\t\t\t\t\t\t\t\t\t\tpart seatBelt {\n\t\t\t\t\t\t\t\t\t\t\tpart seatBelt {\n\t\t\t\t\t\t\t\t\t\t\t\tpart seatBelt {\n\t\t\t\t\t\t\t\t\t\t\t\t\tpart seatBelt {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart seatBelt {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart seatBelt {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart seatBelt {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart seatBelt {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart seatBelt {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart seatBelt {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart seatBelt {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart seatBelt {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart seatBelt {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart seatBelt {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart seatBelt {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart seatBelt {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart seatBelt {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart seatBelt {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart seatBelt {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t",
    "package 'VehicleSafetyAndSecurityComponentSystem' {\n\tpart context {\n\t\tpart user {\n\t\t\tport seatBeltPort: ~SeatBeltPort;\n\t\t\tperform seatBelt.installSeatBelt {\n\t\t\t\tin seatBelt = seatBeltPort.seatBelt;\n\t\t\t}\n\t\t}\n\t\tpart seatBelt {\n\t\t\tport seatBeltPort: SeatBeltPort;\n\t\t\tperform seatBelt.installSeatBelt {\n\t\t\t\tin seatBelt = seatBeltPort.seatBelt;\n\t\t\t}\n\t\t}\n\t\tpart airbag {\n\t\t\tport airbagPort: ~AirbagPort;\n\t\t\tperform airbag.installAirbag {\n\t\t\t\tin airbag = airbagPort.airbag;\n\t\t\t}\n\t\t}\n\t\tpart bumper {\n\t\t\tport bumperPort: ~BumperPort;\n\t\t\tperform bumper.installBumper {\n\t\t\t\tin bumper = bumperPort.bumper;\n\t\t\t}\n\t\t}\n\t\tpart alarm {\n\t\t\tport alarmPort: ~AlarmPort;\n\t\t\tperform alarm.installAlarm {\n\t\t\t\tin alarm = alarmPort.alarm;\n\t\t\t}\n\t",
    "package 'SecurityClassification' {\n\tattribute def Classification;\n\tpart context {\n\t\tpart user {\n\t\t\tpart component {\n\t\t\t\tattribute def classification;\n\t\t\t\tpart context {\n\t\t\t\t\tpart securityClassification {\n\t\t\t\t\t\tpart context {\n\t\t\t\t\t\t\tpart component {\n\t\t\t\t\t\t\t\tattribute def classification;\n\t\t\t\t\t\t\t\tpart context {\n\t\t\t\t\t\t\t\t\tpart securityClassification {\n\t\t\t\t\t\t\t\t\t\tpart context {\n\t\t\t\t\t\t\t\t\t\t\tpart component {\n\t\t\t\t\t\t\t\t\t\t\t\tattribute def classification;\n\t\t\t\t\t\t\t\t\t\t\t\tpart context {\n\t\t\t\t\t\t\t\t\t\t\t\t\tpart securityClassification {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart context {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart component {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tattribute def classification;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart context {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart securityClassification {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart context {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart component {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tattribute def classification;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart context {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart securityClassification {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart context {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart component {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tattribute def classification;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart context {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart securityClassification {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart context {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart component {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tattribute def classification;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart context {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart securityClassification {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart context {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart component {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tattribute def classification;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart context {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart securityClassification {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t",
    "package 'Automotive ECU' {\n\tpart context {\n\t\tpart vcu {\n\t\t\tport busIf: ~BusIF;\n\t\t\tperform vcu.receiveBusData {\n\t\t\t\tin busData = busIf.busData;\n\t\t\t}\n\t\t\tperform vcu.sendBusData {\n\t\t\t\tout busData = busIf.busData;\n\t\t\t}\n\t\t\tperform vcu.receiveSensorData {\n\t\t\t\tin sensorData = busIf.sensorData;\n\t\t\t}\n\t\t\tperform vcu.sendSensorData {\n\t\t\t\tout sensorData = busIf.sensorData;\n\t\t\t}\n\t\t}\n\t\tpart ecu {\n\t\t\tport busIf: ~BusIF;\n\t\t\tperform ecu.receiveBusData {\n\t\t\t\tin busData = busIf.busData;\n\t\t\t}\n\t\t\tperform ecu.sendBusData {\n\t\t\t\tout busData = busIf.busData;\n\t\t\t}\n\t\t\tperform ecu.receiveSensorData {\n\t\t\t\tin sensorData = busIf.sensorData;\n\t\t\t}\n\t\t\tperform ecu.sendSensorData {\n\t\t\t\tout sensorData = busIf.sensorData;\n\t\t\t}\n\t\t}",
    "package 'Blood Glucose Meter' {\n\tattribute def BatteryStatus;\n\tattribute def BatteryCharge;\n\tattribute def BloodGlucoseLevel;\n\tport def BatteryStatusPort;\n\tport def BatteryChargePort;\n\tport def BloodGlucoseLevelPort;\n\tpart context {\n\t\tpart user {\n\t\t\tport batteryStatusPort: BatteryStatusPort;\n\t\t\tport batteryChargePort: BatteryChargePort;\n\t\t\tport bloodGlucoseLevelPort: BloodGlucoseLevelPort;\n\t\t\tperform measureBloodGlucose.sendBatteryStatus {\n\t\t\t\tout batteryStatus = batteryStatusPort.batteryStatus;\n\t\t\t}\n\t\t\tperform measureBloodGlucose.sendBatteryCharge {\n\t\t\t\tout batteryCharge = batteryChargePort.batteryCharge;\n\t\t\t}\n\t\t\tperform measureBloodGlucose.sendBloodGlucoseLevel {\n\t\t\t\tout bloodGlucoseLevel = bloodGlucoseLevelPort.bloodGlucoseLevel;\n\t\t\t}\n\t\t}\n\t\tinterface",
    "package 'Constants' {\n\tattribute def E;\n\tattribute def Pi;\n\tattribute def SpeedOfLight;\n\tattribute def FineStructureConstant;\n\tattribute def ElectronToProtonMassRatio;\n\tattribute def StandardGravitationalAcceleration;\n\tattribute def AmplifierGainCoefficient;\n\tpart context {\n\t\tpart user {\n\t\t\tperform compute.compute {\n\t\t\t\tout e = E;\n\t\t\t\tout pi = Pi;\n\t\t\t\tout speedOfLight = SpeedOfLight;\n\t\t\t\tout fineStructureConstant = FineStructureConstant;\n\t\t\t\tout electronToProtonMassRatio = ElectronToProtonMassRatio;\n\t\t\t\tout standardGravitationalAcceleration = StandardGravitationalAcceleration;\n\t\t\t\tout amplifierGainCoefficient = AmplifierGainCoefficient;\n\t\t\t}\n\t\t}\n\t\tpart compute {\n\t\t\taction compute {\n\t\t\t\tout e: E;\n\t\t\t\tout pi: Pi;\n\t\t\t\tout speedOfLight: SpeedOfLight;\n\t\t\t\tout fineStructureConstant: FineStructureConstant;\n\t\t\t\tout electronTo",
    "package 'Tire' {\n\tattribute def Manufacturer;\n\tattribute def RimDiameter;\n\tattribute def Width;\n\tpart context {\n\t\tpart user {\n\t\t\tpart tire {\n\t\t\t\tattribute manufacturer: Manufacturer;\n\t\t\t\tattribute rimDiameter: RimDiameter;\n\t\t\t\tattribute width: Width;\n\t\t\t}\n\t\t}\n\t}\n}\n\n––––– FEW‑SHOT EXAMPLES –––––\n\nInput Requirements:\nI want to create a model of a car that can be used to describe the car’s attributes, such as the manufacturer, model, and year. I also want to be able to create a model of a tire that can be used to describe the tire’s attributes, such as the manufacturer, rim diameter, and width. I want to be able to instantiate and distinguish tires of different brands and specifications. For example, I want to be able to generate a tire data instance with the manufacturer as Michelin, a rim diameter of 18.0, and a width of 245 as a French tire. This will provide clear and structured fundamental data",
    "package 'Automotive' {\n\tpart context {\n\t\tpart vehicle {\n\t\t\tattribute def mass;\n\t\t\tattribute def length;\n\t\t\tpart wheel {\n\t\t\t\tattribute def hubDiameter;\n\t\t\t\tattribute def width;\n\t\t\t\tattribute def outerDiameter;\n\t\t\t\tpart tire {\n\t\t\t\t\tattribute def height;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n––––– FEW‑SHOT EXAMPLES –––––\n\nInput Requirements:\nI want to create a model of a car that has a mass of 1200 kilograms and a length of 4.82 meters. Each vehicle is equipped with a pair of left and right front wheels. For each wheel, the hub diameter must be specified as 18 inches and the width as 245 millimeters, with the outer diameter of the wheel determined by both the hub diameter and the tire height. In addition, each wheel must be fitted with a tire. All dimensions and units must support both International System of Units (SI) and United States customary units (Imperial) conversions. This model aims to",
    "package 'Vehicle' {\n\tattribute def EngineType;\n\tattribute def TransmissionType;\n\tport def EngineTypePort {\n\t\tout engineType: EngineType;\n\t}\n\tport def TransmissionTypePort {\n\t\tout transmissionType: TransmissionType;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport engineTypePort: EngineTypePort;\n\t\t\tport transmissionTypePort: TransmissionTypePort;\n\t\t\tperform selectEngineType.sendEngineType {\n\t\t\t\tout engineType = engineTypePort.engineType;\n\t\t\t}\n\t\t\tperform selectTransmissionType.sendTransmissionType {\n\t\t\t\tout transmissionType = transmissionTypePort.transmissionType;\n\t\t\t}\n\t\t}\n\t\tinterface userToVehicle connect user.engineTypePort to vehicle.engineTypePort {\n\t\t\tref flow references selectEngineType.engineTypeFlow\n\t\t\t\tfrom source.engineType to target.engineType;\n\t\t}\n\t\tinterface userToVehicle connect user.transmissionTypePort to vehicle.transmissionTypePort {\n\t\t\tref flow references selectTransmissionType.transmissionTypeFlow\n\t\t\t\tfrom source.transmissionType to target.transmissionType;\n\t\t}\n\t\tpart vehicle {\n\t\t\t",
    "package 'Vehicle' {\n\tattribute def Mass;\n\tattribute def Length;\n\tattribute def WheelDiameter;\n\tattribute def TireWidth;\n\tattribute def TireHeight;\n\tattribute def TireDepth;\n\tattribute def BrakeDiscRadius;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tattribute mass: Mass;\n\t\t\tattribute length: Length;\n\t\t\tpart wheelAssembly {\n\t\t\t\tattribute wheelDiameter: WheelDiameter;\n\t\t\t\tattribute tireWidth: TireWidth;\n\t\t\t\tattribute tireHeight: TireHeight;\n\t\t\t\tattribute tireDepth: TireDepth",
    "package 'FuelSystem' {\n\tattribute def Fuel;\n\tattribute def Temperature;\n\tport def FuelPort {\n\t\tout fuel: Fuel;\n\t}\n\tport def TemperaturePort {\n\t\tout temperature: Temperature;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport fuelPort: FuelPort;\n\t\t\tperform fuelSystem.sendFuel {\n\t\t\t\tout fuel = fuelPort.fuel;\n\t\t\t}\n\t\t}\n\t\tinterface userToFuelSystem connect user.fuelPort to fuelSystem.fuelPort {\n\t\t\tref flow references fuelSystem.fuelFlow\n\t\t\t\tfrom source.fuel to target.fuel; \n\t\t}\n\t\tpart fuelSystem {\n\t\t\tport fuelPort: ~FuelPort;\n\t\t\tperform fuelSystem.produceFuel {\n\t\t\t\tin fuel = fuelPort.fuel;\n\t\t\t\tout fuel = fuelPort.fuel;\n\t\t\t}\n\t\t\tport temperaturePort: TemperaturePort;\n\t\t\tperform fuelSystem.produceTemperature {\n\t\t\t\tin fuel = fuelPort.fuel;\n\t\t\t\tout temperature = temperaturePort.temperature;\n\t\t\t}\n\t\t}\n\t\tpart fuelTankAssembly {\n\t\t\tport fuelPort: ~FuelPort;\n\t\t\tperform fuel",
    "package 'PhysicalQuantitySystem' {\n\tpart context {\n\t\tpart user {\n\t\t\tperform managePhysicalQuantitySystem.managePhysicalQuantitySystem {\n\t\t\t\tin physicalQuantitySystem = physicalQuantitySystemPort.physicalQuantitySystem;\n\t\t\t\tout physicalQuantitySystem = physicalQuantitySystemPort.physicalQuantitySystem;\n\t\t\t}\n\t\t\tport physicalQuantitySystemPort: ~PhysicalQuantitySystemPort;\n\t\t}\n\t\tpart physicalQuantitySystem {\n\t\t\tport physicalQuantitySystemPort: PhysicalQuantitySystemPort;\n\t\t\tperform managePhysicalQuantitySystem.managePhysicalQuantitySystem {\n\t\t\t\tin physicalQuantitySystem = physicalQuantitySystemPort.physicalQuantitySystem;\n\t\t\t\tout physicalQuantitySystem = physicalQuantitySystemPort.physicalQuantitySystem;\n\t\t\t}\n\t\t}\n\t}\n\taction managePhysicalQuantitySystem {\n\t\taction managePhysicalQuantitySystem { in physicalQuantitySystem: PhysicalQuantitySystem; out physicalQuantitySystem: PhysicalQuantitySystem; }\n\t}\n}\n\npackage 'PhysicalQuantitySystem' {\n\tpart context {\n\t\tpart user {\n\t\t\tperform managePhysicalQuantitySystem.managePhysicalQuantitySystem {\n\t\t\t\tin physicalQuantitySystem = physicalQuantitySystemPort.physicalQuantitySystem;\n\t\t\t\tout physicalQuantitySystem = physicalQuantitySystemPort.",
    "package 'UnitSystem' {\n\tpart context {\n\t\tpart user {\n\t\t\tperform unitConversion.convert {\n\t\t\t\tin unit = unitConversion.unit;\n\t\t\t\tout convertedUnit = unitConversion.convertedUnit;\n\t\t\t}\n\t\t}\n\t\tpart unitConversion {\n\t\t\taction convert { in unit; out convertedUnit; }\n\t\t}\n\t}\n}\n\nInput Requirement:\nThis system is designed to provide a standardized unit system library that supports the interoperability and adaptation between the International System of Quantities (ISQ) and United States Customary Units (USCustomaryUnits). The goal is to enable users to conveniently manage, convert, and apply various units of physical quantities, effectively reducing confusion and errors caused by inconsistent units. At the same time, the system must ensure the accuracy and authoritative standardization of all unit types, meeting the measurement needs of engineering, scientific research, and daily life. This will enhance the efficiency and reliability of data processing and communication.\n\nOutput Model:\npackage 'UnitSystem' {\n\tpart context {\n\t\tpart user {\n\t\t\tperform unitConversion.convert {\n\t\t\t\tin unit = unitConversion.unit;\n\t\t\t\tout convertedUnit =",
    "package 'HeadlampBeamTiltAngle' {\n\tattribute def TiltAngle;\n\tport def TiltAnglePort {\n\t\tout tiltAngle: TiltAngle;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport tiltAnglePort: TiltAnglePort;\n\t\t\tperform verifyTiltAngle.sendTiltAngle {\n\t\t\t\tout tiltAngle = tiltAnglePort.tiltAngle;\n\t\t\t}\n\t\t}\n\t\tinterface userToHeadlampBeamTiltAngle connect user.tiltAnglePort to headlampBeamTiltAngle.tiltAnglePort {\n\t\t\tref flow references verifyTiltAngle.tiltAngleFlow\n\t\t\t\tfrom source.tiltAngle to target.tiltAngle; \n\t\t}\n\t\tpart headlampBeamTiltAngle {\n\t\t\tport tiltAnglePort: ~TiltAnglePort;\n\t\t\tperform verifyTiltAngle.verifyTiltAngle {\n\t\t\t\tin tiltAngle = tiltAnglePort.tiltAngle;\n\t\t\t}\n\t\t}\n\t}\n\taction verifyTiltAngle {\n\t\taction sendTiltAngle { out tiltAngle: TiltAngle; }\n\t\tsuccession flow tiltAngleFlow from sendTilt",
    "package 'CoreDataTypes' {\n\tattribute def UnsignedInteger;\n\tattribute def UnsignedFloat;\n\tattribute def DateTime;\n\tattribute def String;\n\tattribute def Boolean;\n\tattribute def Color;\n\tattribute def Diameter;\n\tpart context {\n\t\tpart user {\n\t\t\tport unsignedIntegerPort: UnsignedIntegerPort;\n\t\t\tperform checkUnsignedInteger.sendUnsignedInteger {\n\t\t\t\tout unsignedInteger = unsignedIntegerPort.unsignedInteger;\n\t\t\t}\n\t\t}\n\t\tinterface userToCoreDataTypes connect user.unsignedIntegerPort to coreDataTypes.unsignedIntegerPort {\n\t\t\tref flow references checkUnsignedInteger.unsignedIntegerFlow\n\t\t\t\tfrom source.unsignedInteger to target.unsignedInteger; \n\t\t}\n\t\tpart coreDataTypes {\n\t\t\tport unsignedIntegerPort: ~UnsignedIntegerPort;\n\t\t\tperform checkUnsignedInteger.produceUnsignedInteger {\n\t\t\t\tin unsignedInteger = unsignedIntegerPort.unsignedInteger;\n\t\t\t}\n\t\t}\n\t}\n\taction",
    "package 'SparePartsManagementSystem' {\n\ttype def Person;\n\ttype def Bag;\n\ttype def List;\n\ttype def Set;\n\ttype def OrderedSet;\n\ttype def Real;\n\ttype def PersonnelSet;\n\ttype def PersonnelSetList;\n\ttype def SpareParts;\n\ttype def SparePartsList;\n\ttype def SparePartsSet;\n\ttype def SparePartsSetList;\n\ttype def SparePartsBag;\n\ttype def SparePartsBagList;\n\ttype def SparePartsBagSet;\n\ttype def SparePartsBagSetList;\n\ttype def SparePartsBagSetListSet;\n\ttype def SparePartsBagSetListSetList;\n\ttype def SparePartsBagSetListSetListSet;\n\ttype def SparePartsBagSetListSetListSetList;\n\ttype def SparePartsBagSetListSetListSetListSet;\n\ttype def SparePartsBagSetListSetListSet",
    "package 'Tire' {\n\tattribute def Manufacturer;\n\tattribute def RimDiameter;\n\tattribute def TireWidth;\n\tattribute def Position;\n\tpart context {\n\t\tpart user {\n\t\t\tpart tire {\n\t\t\t\tattribute manufacturer: Manufacturer;\n\t\t\t\tattribute rimDiameter: RimDiameter;\n\t\t\t\tattribute tireWidth: TireWidth;\n\t\t\t\tattribute position: Position;\n\t\t\t}\n\t\t}\n\t}\n}\n\n––––– FEW‑SHOT EXAMPLES –––––\n\nInput Requirements:\nI want to be able to create a new user account, and I want to be able to log in to the system with my account. I also want to be able to log out of the system.\n\nOutput Model:\npackage 'User' {\n\tpart context {\n\t\tpart user {\n\t\t\tpart userAccount {\n\t\t\t\tpart user {\n\t\t\t\t\tpart userAccount {\n\t\t\t\t\t\tpart user {\n\t\t\t\t\t\t\tpart userAccount {\n\t\t\t\t\t\t\t\tpart user {\n\t\t\t\t\t\t\t\t\tpart userAccount {\n\t\t\t\t\t\t\t\t\t\tpart user {\n\t\t\t\t\t\t\t\t\t\t\tpart userAccount {\n\t\t\t\t\t\t\t\t\t\t\t\tpart user {\n\t\t\t\t\t\t\t\t\t\t\t\t\tpart",
    "package 'SpacecraftTrajectory' {\n\tattribute def Time;\n\tattribute def Position;\n\tattribute def Velocity;\n\tport def TimePort;\n\tport def PositionPort;\n\tport def VelocityPort;\n\tpart context {\n\t\tpart user {\n\t\t\tport timePort: TimePort;\n\t\t\tport positionPort: PositionPort;\n\t\t\tport velocityPort: VelocityPort;\n\t\t\tperform recordTrajectory.recordTime {\n\t\t\t\tout time = timePort.time;\n\t\t\t}\n\t\t\tperform recordTrajectory.recordPosition {\n\t\t\t\tout position = positionPort.position;\n\t\t\t}\n\t\t\tperform recordTrajectory.recordVelocity {\n\t\t\t\tout velocity = velocityPort.velocity;\n\t\t\t}\n\t\t}\n\t\tpart recorder {\n\t\t\tport timePort: ~TimePort;\n\t\t\tport positionPort: ~PositionPort;\n\t\t\tport velocityPort: ~VelocityPort;\n\t\t\tperform recordTrajectory.recordTime {\n\t\t\t\tin time = timePort",
    "package 'Alloy' {\n\tattribute def Alloy;\n\tattribute def Metal;\n\tattribute def MassFraction;\n\tattribute def TensileStrength;\n\tattribute def AtomicMass;\n\tport def AlloyPort {\n\t\tout alloy: Alloy;\n\t}\n\tport def MetalPort {\n\t\tout metal: Metal;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport alloyPort: AlloyPort;\n\t\t\tperform defineAlloy.sendAlloy {\n\t\t\t\tout alloy = alloyPort.alloy;\n\t\t\t}\n\t\t}\n\t\tinterface userToAlloy connect user.alloyPort to al",
    "package 'MaterialsDatabaseSystem' {\n\tpart context {\n\t\tpart user {\n\t\t\tpart materials {\n\t\t\t\tpart metal {\n\t\t\t\t\tpart steel {\n\t\t\t\t\t\tpart steel_980 {\n\t\t\t\t\t\t\tpart iron {\n\t\t\t\t\t\t\t\tattribute def atomicMass;\n\t\t\t\t\t\t\t\tattribute def massFraction;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpart carbon {\n\t\t\t\t\t\t\t\tattribute def atomicMass;\n\t\t\t\t\t\t\t\tattribute def massFraction;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpart manganese {\n\t\t\t\t\t\t\t\tattribute def atomicMass;\n\t\t\t\t\t\t\t\tattribute def massFraction;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpart tensileStrength {\n\t\t\t\t\t\t\t\tattribute def tensileStrength;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n## 2",
    "package 'PubSub' {\n\tattribute def Topic;\n\tattribute def Message;\n\tport def TopicPort;\n\tport def MessagePort;\n\tpart context {\n\t\tpart user {\n\t\t\tport topicPort: TopicPort;\n\t\t\tperform subscribe.subscribe {\n\t\t\t\tin topic = topicPort.topic;\n\t\t\t}\n\t\t}\n\t\tpart server {\n\t\t\tport topicPort: ~TopicPort;\n\t\t\tperform subscribe.subscribe {\n\t\t\t\tin topic = topicPort.topic;\n\t\t\t}\n\t\t\tport messagePort: MessagePort;\n\t\t\tperform publish.publish {\n\t\t\t\tin message = messagePort.message;\n\t\t\t}\n\t\t}\n\t\tpart publisher {\n\t\t\tport messagePort: ~MessagePort;\n\t\t\tperform publish.publish {\n\t\t\t\tin message = messagePort.message;\n\t\t\t}\n\t\t}\n\t\tpart subscriber {\n\t\t\tport topicPort: ~TopicPort;\n\t\t\tperform subscribe.subscribe {\n\t\t\t\tin topic = topicPort.topic;\n\t\t\t}\n\t\t}\n\t}\n\taction subscribe {\n\t\taction subscribe { in topic: Topic; }\n\t}\n\taction publish {\n\t\taction publish { in message: Message; }\n",
    "package 'FuelSystem' {\n\tpart context {\n\t\tpart user {\n\t\t\tport fuelSystemPort: FuelSystemPort;\n\t\t\tperform fuelSystem.sendFuel {\n\t\t\t\tout fuel = fuelSystemPort.fuel;\n\t\t\t}\n\t\t}\n\t\tinterface userToFuelSystem connect user.fuelSystemPort to fuelSystem.fuelSystemPort {\n\t\t\tref flow references fuelSystem.fuelFlow\n\t\t\t\tfrom source.fuel to target.fuel; \n\t\t}\n\t\tpart fuelSystem {\n\t\t\tport fuelSystemPort: ~FuelSystemPort;\n\t\t\tperform fuelSystem.produceFuel {\n\t\t\t\tin fuel = fuelSystemPort.fuel;\n\t\t\t\tout fuel = fuelSystemPort.fuel;\n\t\t\t}\n\t\t}\n\t\tpart fuelTank {\n\t\t\tport fuelSystemPort: ~FuelSystemPort;\n\t\t\tperform fuelSystem.supplyFuel {\n\t\t\t\tin fuel = fuelSystemPort.fuel;\n\t\t\t}\n\t\t}\n\t\tpart engine {\n\t\t\tport fuelSystemPort: ~FuelSystemPort;\n\t\t\tperform fuelSystem.returnFuel {\n\t\t\t\tin fuel = fuelSystemPort.fuel;\n\t\t\t}\n\t\t}\n\t}\n\taction fuelSystem {\n\t\taction sendFuel {",
    "package 'Publish-Subscribe' {\n\tpart context {\n\t\tpart server {\n\t\t\tport def topicPort;\n\t\t\tport def messagePort;\n\t\t\tport def subscriptionPort;\n\t\t\tport def subscriptionRequestPort;\n\t\t\tport def subscriptionResponsePort;\n\t\t\tport def messageResponsePort;\n\t\t\tport def messageRequestPort;\n\t\t\tport def messageResponsePort;\n\t\t\tport def messageRequestPort;\n\t\t\tport def messageResponsePort;\n\t\t\tport def messageRequestPort;\n\t\t\tport def messageResponsePort;\n\t\t\tport def messageRequestPort;\n\t\t\tport def messageResponsePort;\n\t\t\tport def messageRequestPort;\n\t\t\tport def messageResponsePort;\n\t\t\tport def messageRequestPort;\n\t\t\tport def messageResponsePort;\n\t\t\tport def messageRequestPort;\n\t\t\tport def messageResponsePort;\n\t\t\tport def messageRequestPort;\n\t\t\tport def messageResponsePort;\n\t\t\tport def messageRequestPort;\n\t\t\tport def messageResponsePort;\n\t\t\tport def messageRequestPort;\n\t\t\tport def messageResponsePort;\n\t\t\tport def messageRequestPort;\n\t\t\tport def messageResponsePort;\n\t\t\tport def messageRequestPort;\n\t\t\tport def messageResponsePort;\n\t\t\t",
    "package 'TransportationSystem' {\n\tattribute def FuelLevel;\n\tattribute def FuelCapacity;\n\tattribute def PassengerCount;\n\tattribute def Driver;\n\tattribute def Passenger;\n\tport def FuelLevelPort;\n\tport def FuelCapacityPort;\n\tport def PassengerCountPort;\n\tport def DriverPort;\n\tport def PassengerPort;\n\tpart context {\n\t\tpart user {\n\t\t\tport fuelLevelPort: FuelLevelPort;\n\t\t\tport fuelCapacityPort: FuelCapacityPort;\n\t\t\tport passengerCountPort: PassengerCountPort;\n\t\t\tport driverPort: DriverPort;\n\t\t\tport passengerPort: PassengerPort;\n\t\t\tperform enterVehicle.sendFuelLevel {\n\t\t\t\tout fuelLevel = fuelLevelPort.fuelLevel;\n\t\t\t}\n\t\t\tperform enterVehicle.sendFuelCapacity {\n\t\t\t\tout fuelCapacity = fuelCapacityPort.fuelCapacity;\n\t\t\t}\n\t\t\tperform enterVehicle.sendPassengerCount {\n\t\t\t\tout passengerCount = passengerCountPort.passengerCount;\n\t\t\t}\n\t\t\tperform enterVehicle.sendDriver {\n\t\t\t\tout driver = driverPort.driver;",
    "package 'FuelManagementSystem' {\n\tattribute def FuelTemperature;\n\tport def FuelTemperaturePort;\n\tport def FuelFlowPort;\n\tpart context {\n\t\tpart user {\n\t\t\tport fuelTemperaturePort: FuelTemperaturePort;\n\t\t\tperform fuelManagement.sendFuelTemperature {\n\t\t\t\tout fuelTemperature = fuelTemperaturePort.fuelTemperature;\n\t\t\t}\n\t\t}\n\t\tinterface userToFuelTank connect user.fuelTemperaturePort to fuelTank.fuelTemperaturePort {\n\t\t\tref flow references fuelManagement.fuelTemperatureFlow\n\t\t\t\tfrom source.fuelTemperature to target.fuelTemperature; \n\t\t}\n\t\tpart fuelTank {\n\t\t\tport fuelTemperaturePort: ~FuelTemperaturePort;\n\t\t\tperform fuelManagement.produceFuel {\n\t\t\t\tin fuelTemperature = fuelTemperaturePort.fuelTemperature;\n\t\t\t\tout fuelFlow = fuelFlowPort.fuelFlow;\n\t\t\t}\n\t\t\tport fuelFlowPort: FuelFlowPort;\n\t\t}\n\t\tpart engine {\n\t\t\tport fuelFlowPort: ~FuelFlowPort;\n\t\t\tperform fuelManagement.consume",
    "package 'FuelSystem' {\n\tattribute def FuelTemperature;\n\tport def FuelTemperaturePort;\n\tport def FuelSupplyPort;\n\tport def FuelReturnPort;\n\tpart context {\n\t\tpart user {\n\t\t\tport fuelSupplyPort: FuelSupplyPort;\n\t\t\tport fuelReturnPort: FuelReturnPort;\n\t\t\tperform fuelSystem.supplyFuel {\n\t\t\t\tin fuelSupply = fuelSupplyPort.fuelSupply;\n\t\t\t}\n\t\t\tperform fuelSystem.returnFuel {\n\t\t\t\tin fuelReturn = fuelReturnPort.fuelReturn;\n\t\t\t}\n\t\t}\n\t\tinterface userToFuelSystem connect user.fuelSupplyPort to fuelSystem.fuelSupplyPort {\n\t\t\tref flow references fuelSystem.supplyFuelFlow\n\t\t\t\tfrom source.fuelSupply to target.fuelSupply;\n\t\t}\n\t\tinterface userToFuelSystem connect user.fuelReturnPort to fuelSystem.fuelReturnPort {\n\t\t\tref flow references fuelSystem.returnFuelFlow\n\t\t\t\tfrom source.fuelReturn to target.fuelReturn;\n\t\t}\n\t\tpart fuelSystem {\n\t\t\tport fuelSupplyPort: ~FuelSupplyPort;\n\t\t\tport fuelReturnPort: ~FuelReturnPort;\n\t\t\t",
    "package 'Photography' {\n\tattribute def Scene;\n\tattribute def Photo;\n\tport def ScenePort {\n\t\tout scene: Scene;\n\t}\n\tport def PhotoPort {\n\t\tout photo: Photo;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport scenePort: ScenePort;\n\t\t\tperform captureScene.sendScene {\n\t\t\t\tout scene = scenePort.scene;\n\t\t\t}\n\t\t}\n\t\tinterface userToPhotography connect user.scenePort to photography.scenePort {\n\t\t\tref flow references captureScene.sceneFlow\n\t\t\t\tfrom source.scene to target.scene; \n\t\t}\n\t\tpart photography {\n\t\t\tport scenePort: ~ScenePort;\n\t\t\tperform captureScene.produceFocusedImage {\n\t\t\t\tin scene = scenePort.scene;\n\t\t\t\tout focusedImage: FocusedImage;\n\t\t\t}\n\t\t\tport focusedImagePort: FocusedImagePort;\n\t\t\tperform captureScene.capturePhoto {\n\t\t\t\tin focusedImage = focusedImagePort.focusedImage;\n\t\t\t\tout photo = photoPort.photo;\n\t\t\t}\n\t\t\tport photoPort: PhotoPort;\n\t\t}\n\t\tpart focusingSource {\n\t\t\t",
    "package 'Photography' {\n\tattribute def Scene;\n\tattribute def Image;\n\tport def ScenePort {\n\t\tout scene: Scene;\n\t}\n\tport def ImagePort {\n\t\tout image: Image;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport scenePort: ScenePort;\n\t\t\tperform focus.selectScene {\n\t\t\t\tout scene = scenePort.scene;\n\t\t\t}\n\t\t}\n\t\tinterface userToFocus connect user.scenePort to focus.scenePort {\n\t\t\tref flow references focus.sceneFlow\n\t\t\t\tfrom source.scene to target.scene; \n\t\t}\n\t\tpart focus {\n\t\t\tport scenePort: ~ScenePort;\n\t\t\tperform focus.focusScene {\n\t\t\t\tin scene = scenePort.scene;\n\t\t\t\tout image = imagePort.image;\n\t\t\t}\n\t\t\tport imagePort: ImagePort;\n\t\t}\n\t\tpart shooting {\n\t\t\tport imagePort: ~ImagePort;\n\t\t\tperform shooting.shoot {\n\t\t\t\tin image = imagePort.image;\n\t\t\t}\n\t\t}\n\t}\n\taction focus {\n\t\taction selectScene { out scene: Scene; }\n\t\tsuccess",
    "package 'Photography' {\n\tattribute def Scene;\n\tattribute def Image;\n\tattribute def Photo;\n\tport def ScenePort {\n\t\tout scene: Scene;\n\t}\n\tport def ImagePort {\n\t\tout image: Image;\n\t}\n\tport def PhotoPort {\n\t\tout photo: Photo;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport scenePort: ScenePort;\n\t\t\tperform selectScene.sendScene {\n\t\t\t\tout scene = scenePort.scene;\n\t\t\t}\n\t\t}\n\t\tinterface userToPhotography connect user.scenePort to photography.scenePort {\n\t\t\tref flow references selectScene.sceneFlow\n\t\t\t\tfrom source.scene to target.scene; \n\t\t}\n\t\tpart photography {\n\t\t\tport scenePort: ~ScenePort;\n\t\t\tperform selectScene.produceImage {\n\t\t\t\tin scene = scenePort.scene;\n\t\t\t\tout image = imagePort.image;\n\t\t\t}\n\t\t\tport imagePort: ImagePort;\n\t\t\tperform focusImage.producePhoto {\n\t\t\t\tin image = imagePort.image;\n\t\t\t\tout photo = photoPort.photo;\n\t\t\t}\n\t\t\tport photoPort",
    "package 'Photography' {\n\tattribute def Scene;\n\tattribute def Image;\n\tattribute def Photograph;\n\tport def ScenePort {\n\t\tout scene: Scene;\n\t}\n\tport def ImagePort {\n\t\tout image: Image;\n\t}\n\tport def PhotographPort {\n\t\tout photograph: Photograph;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport scenePort: ScenePort;\n\t\t\tperform focus.sendScene {\n\t\t\t\tout scene = scenePort.scene;\n\t\t\t}\n\t\t}\n\t\tinterface userToFocus connect user.scenePort to focus.scenePort {\n\t\t\tref flow references focus.sceneFlow\n\t\t\t\tfrom source.scene to target.scene; \n\t\t}\n\t\tpart focus {\n\t\t\tport scenePort: ~ScenePort;\n\t\t\tperform focus.produceImage {\n\t\t\t\tin scene = scenePort.scene;\n\t\t\t\tout image = imagePort.image;\n\t\t\t}\n\t\t\tport imagePort: ImagePort;\n\t\t}\n\t\tpart imageConverter {\n\t\t\tport imagePort: ~ImagePort;\n\t\t\tperform imageConverter.producePhotograph {\n\t\t\t\tin image = imagePort.image;",
    "package 'PhotographyWorkflow' {\n\tattribute def Scene;\n\tattribute def Picture;\n\tport def ScenePort {\n\t\tout scene: Scene;\n\t}\n\tport def PicturePort {\n\t\tout picture: Picture;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport scenePort: ScenePort;\n\t\t\tperform photograph.sendScene {\n\t\t\t\tout scene = scenePort.scene;\n\t\t\t}\n\t\t}\n\t\tinterface userToPhotograph connect user.scenePort to photograph.scenePort {\n\t\t\tref flow references photograph.sceneFlow\n\t\t\t\tfrom source.scene to target.scene; \n\t\t}\n\t\tpart photograph {\n\t\t\tport scenePort: ~ScenePort;\n\t\t\tperform photograph.focusScene {\n\t\t\t\tin scene = scenePort.scene;\n\t\t\t\tout frame: Frame;\n\t\t\t}\n\t\t\tport framePort: FramePort;\n\t\t\tperform photograph.shootFrame {\n\t\t\t\tin frame = framePort.frame;\n\t\t\t\tout image: Image;\n\t\t\t}\n\t\t\tport imagePort: ImagePort;\n\t\t\tperform photograph.outputPicture {\n\t\t\t\tin image = imagePort.image;\n\t\t\t\tout picture =",
    "package 'Photography' {\n\tattribute def Scene;\n\tattribute def Focus;\n\tattribute def Photo;\n\tport def ScenePort {\n\t\tout scene: Scene;\n\t}\n\tport def FocusPort {\n\t\tout focus: Focus;\n\t}\n\tport def PhotoPort {\n\t\tout photo: Photo;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport scenePort: ScenePort;\n\t\t\tperform selectScene.sendScene {\n\t\t\t\tout scene = scenePort.scene;\n\t\t\t}\n\t\t}\n\t\tinterface userToPhotography connect user.scenePort to photography.scenePort {\n\t\t\tref flow references selectScene.sceneFlow\n\t\t\t\tfrom source.scene to target.scene; \n\t\t}\n\t\tpart photography {\n\t\t\tport scenePort: ~ScenePort;\n\t\t\tperform selectScene.produceFocus {\n\t\t\t\tin scene = scenePort.scene;\n\t\t\t\tout focus = focusPort.focus;\n\t\t\t}\n\t\t\tport focusPort: FocusPort;\n\t\t\tperform selectScene.takePhoto {\n\t\t\t\tin focus = focusPort.focus;\n\t\t\t\tout photo = photoPort.photo;\n\t\t\t}\n\t\t\tport photoPort",
    "package 'Photography' {\n\tattribute def Scene;\n\tattribute def Focus;\n\tattribute def Photo;\n\tport def ScenePort {\n\t\tout scene: Scene;\n\t}\n\tport def FocusPort {\n\t\tout focus: Focus;\n\t}\n\tport def PhotoPort {\n\t\tout photo: Photo;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport scenePort: ScenePort;\n\t\t\tperform captureScene.sendScene {\n\t\t\t\tout scene = scenePort.scene;\n\t\t\t}\n\t\t}\n\t\tinterface userToPhotography connect user.scenePort to photography.scenePort {\n\t\t\tref flow references captureScene.sceneFlow\n\t\t\t\tfrom source.scene to target.scene; \n\t\t}\n\t\tpart photography {\n\t\t\tport scenePort: ~ScenePort;\n\t\t\tperform captureScene.produceFocus {\n\t\t\t\tin scene = scenePort.scene;\n\t\t\t\tout focus = focusPort.focus;\n\t\t\t}\n\t\t\tport focusPort: FocusPort;\n\t\t\tperform captureScene.producePhoto {\n\t\t\t\tin focus = focusPort.focus;\n\t\t\t\tout photo = photoPort.photo;\n\t\t\t}\n\t\t\tport photoPort",
    "package 'Photography' {\n\tattribute def Scene;\n\tattribute def Image;\n\tattribute def Photo;\n\tport def ScenePort {\n\t\tout scene: Scene;\n\t}\n\tport def ImagePort {\n\t\tout image: Image;\n\t}\n\tport def PhotoPort {\n\t\tout photo: Photo;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport scenePort: ScenePort;\n\t\t\tperform takePhoto.sendScene {\n\t\t\t\tout scene = scenePort.scene;\n\t\t\t}\n\t\t}\n\t\tinterface userToPhotography connect user.scenePort to photography.scenePort {\n\t\t\tref flow references takePhoto.sceneFlow\n\t\t\t\tfrom source.scene to target.scene; \n\t\t}\n\t\tpart photography {\n\t\t\tport scenePort: ~ScenePort;\n\t\t\tperform takePhoto.acquireScene {\n\t\t\t\tin scene = scenePort.scene;\n\t\t\t\tout image = imagePort.image;\n\t\t\t}\n\t\t\tport imagePort: ImagePort;\n\t\t\tperform takePhoto.focusImage {\n\t\t\t\tin image = imagePort.image;\n\t\t\t\tout image = imagePort.image;\n\t\t\t}\n\t\t\tport imagePort",
    "package 'BrakeSystem' {\n\tattribute def BrakePressure;\n\tattribute def Traction;\n\tattribute def BrakeModulation;\n\tport def BrakePressurePort {\n\t\tout brakePressure: BrakePressure;\n\t}\n\tport def TractionPort {\n\t\tout traction: Traction;\n\t}\n\tport def BrakeModulationPort {\n\t\tout brakeModulation: BrakeModulation;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport brakePressurePort: BrakePressurePort;\n\t\t\tport tractionPort: TractionPort;\n\t\t\tport brakeModulationPort: BrakeModulationPort;\n\t\t\tperform brakeSystem.monitorBrakePressure {\n\t\t\t\tout brakePressure = brakePressurePort.brakePressure;\n\t\t\t}\n\t\t\tperform brakeSystem.monitorTraction {\n\t\t\t\tout traction = tractionPort.traction;\n\t\t\t}\n\t\t\tperform brakeSystem.monitorBrakeModulation {\n\t\t\t\tout brakeModulation = brakeModulationPort.brakeModulation;\n\t\t\t}\n\t\t}\n\t",
    "package 'BatteryChargingControlSystem' {\n\tattribute def BatteryLevel;\n\tattribute def ChargingStatus;\n\tport def BatteryLevelPort {\n\t\tout batteryLevel: BatteryLevel;\n\t}\n\tport def ChargingStatusPort {\n\t\tout chargingStatus: ChargingStatus;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport batteryLevelPort: BatteryLevelPort;\n\t\t\tperform monitorBatteryLevel.sendBatteryLevel {\n\t\t\t\tout batteryLevel = batteryLevelPort.batteryLevel;\n\t\t\t}\n\t\t}\n\t\tinterface userToBatteryChargingControlSystem connect user.batteryLevelPort to batteryChargingControlSystem.batteryLevelPort {\n\t\t\tref flow references monitorBatteryLevel.batteryLevelFlow\n\t\t\t\tfrom source.batteryLevel to target.batteryLevel; \n\t\t}\n\t\tpart batteryChargingControlSystem {\n\t\t\tport batteryLevelPort: ~BatteryLevelPort;\n\t\t\tperform monitorBatteryLevel.produceChargingStatus {\n\t\t\t\tin batteryLevel = batteryLevelPort.batteryLevel;\n\t\t\t\tout chargingStatus = chargingStatusPort.chargingStatus;\n\t\t\t}\n\t\t\tport chargingStatusPort: ChargingStatusPort;\n\t",
    "package 'BatteryChargingSystem' {\n\tattribute def BatteryLevel;\n\tport def BatteryLevelPort {\n\t\tout batteryLevel: BatteryLevel;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport batteryLevelPort: BatteryLevelPort;\n\t\t\tperform monitorBatteryLevel.monitorBatteryLevel {\n\t\t\t\tout batteryLevel = batteryLevelPort.batteryLevel;\n\t\t\t}\n\t\t}\n\t\tinterface userToBatteryChargingSystem connect user.batteryLevelPort to batteryChargingSystem.batteryLevelPort {\n\t\t\tref flow references monitorBatteryLevel.batteryLevelFlow\n\t\t\t\tfrom source.batteryLevel to target.batteryLevel; \n\t\t}\n\t\tpart batteryChargingSystem {\n\t\t\tport batteryLevelPort: ~BatteryLevelPort;\n\t\t\tperform monitorBatteryLevel.monitorBatteryLevel {\n\t\t\t\tin batteryLevel = batteryLevelPort.batteryLevel;\n\t\t\t}\n\t\t}\n\t}\n\taction monitorBatteryLevel {\n\t\taction monitorBatteryLevel { out batteryLevel: BatteryLevel; }\n\t}\n}\n\nInput Requirement:\nThis system is designed to implement continuous monitoring and control during the battery charging process. Once charging begins, the system continuously",
    "package 'Camera' {\n\tattribute def Scene;\n\tattribute def Photo;\n\tport def ScenePort {\n\t\tout scene: Scene;\n\t}\n\tport def PhotoPort {\n\t\tout photo: Photo;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport scenePort: ScenePort;\n\t\t\tperform takePhoto.sendScene {\n\t\t\t\tout scene = scenePort.scene;\n\t\t\t}\n\t\t}\n\t\tinterface userToCamera connect user.scenePort to camera.scenePort {\n\t\t\tref flow references takePhoto.sceneFlow\n\t\t\t\tfrom source.scene to target.scene; \n\t\t}\n\t\tpart camera {\n\t\t\tport scenePort: ~ScenePort;\n\t\t\tperform takePhoto.producePhoto {\n\t\t\t\tin scene = scenePort.scene;\n\t\t\t\tout photo = photoPort.photo;\n\t\t\t}\n\t\t\tport photoPort: PhotoPort ;\n\t\t}\n\t\tpart autofocus {\n\t\t\tport photoPort: ~PhotoPort;\n\t\t\tperform takePhoto.focus {\n\t\t\t\tin photo = photoPort.photo;\n\t\t\t}\n\t\t}\n\t\tpart imaging {\n\t\t\tport photoPort: ~PhotoPort;\n\t\t\tperform takePhoto.",
    "package 'DigitalCamera' {\n\tattribute def Scene;\n\tattribute def Image;\n\tport def ScenePort {\n\t\tout scene: Scene;\n\t}\n\tport def ImagePort {\n\t\tout image: Image;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport scenePort: ScenePort;\n\t\t\tperform shoot.selectScene {\n\t\t\t\tout scene = scenePort.scene;\n\t\t\t}\n\t\t}\n\t\tinterface userToCamera connect user.scenePort to camera.scenePort {\n\t\t\tref flow references shoot.sceneFlow\n\t\t\t\tfrom source.scene to target.scene; \n\t\t}\n\t\tpart camera {\n\t\t\tport scenePort: ~ScenePort;\n\t\t\tperform shoot.focus {\n\t\t\t\tin scene = scenePort.scene;\n\t\t\t}\n\t\t}\n\t\tpart imaging {\n\t\t\tport scenePort: ~ScenePort;\n\t\t\tperform shoot.capture {\n\t\t\t\tin scene = scenePort.scene;\n\t\t\t\tout image = imagePort.image;\n\t\t\t}\n\t\t\tport imagePort: ImagePort;\n\t\t}\n\t}\n\taction shoot {\n\t\taction selectScene { out scene: Scene; }\n\t\tsuccession flow",
    "package 'Vehicle' {\n\tattribute def Mass;\n\tattribute def Position;\n\tattribute def Velocity;\n\tattribute def TimeInterval;\n\tattribute def PowerInput;\n\tport def MassPort;\n\tport def PositionPort;\n\tport def VelocityPort;\n\tport def TimeIntervalPort;\n\tport def PowerInputPort;\n\tpart context {\n\t\tpart user {\n\t\t\tport massPort: MassPort;\n\t\t\tport positionPort: PositionPort;\n\t\t\tport velocityPort: VelocityPort;\n\t\t\tport timeIntervalPort: TimeIntervalPort;\n\t\t\tport powerInputPort: PowerInputPort;\n\t\t\tperform simulateVehicle.calculateSpeed {\n\t\t\t\tin mass = massPort.mass;\n\t\t\t\tin position = positionPort.position;\n\t\t\t\tin velocity = velocityPort.velocity;\n\t\t\t\tin timeInterval = timeIntervalPort.timeInterval;\n\t\t\t\tin powerInput = powerInputPort.powerInput;\n\t\t\t\tout speed = speedPort.speed;\n\t\t\t}\n\t\t\tperform simulateVehicle.calculatePosition {\n\t\t\t\tin mass = massPort.mass;\n\t\t\t\tin position = positionPort.position;\n\t\t\t\tin velocity = velocityPort.velocity;\n\t\t\t\tin",
    "package 'Camera' {\n\tattribute def Scene;\n\tattribute def Image;\n\tattribute def Photo;\n\tport def ScenePort {\n\t\tout scene: Scene;\n\t}\n\tport def ImagePort {\n\t\tout image: Image;\n\t}\n\tport def PhotoPort {\n\t\tout photo: Photo;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport scenePort: ScenePort;\n\t\t\tperform capture.sendScene {\n\t\t\t\tout scene = scenePort.scene;\n\t\t\t}\n\t\t}\n\t\tinterface userToCamera connect user.scenePort to camera.scenePort {\n\t\t\tref flow references capture.sceneFlow\n\t\t\t\tfrom source.scene to target.scene; \n\t\t}\n\t\tpart camera {\n\t\t\tport scenePort: ~ScenePort;\n\t\t\tperform capture.focusScene {\n\t\t\t\tin scene = scenePort.scene;\n\t\t\t\tout image = imagePort.image;\n\t\t\t}\n\t\t\tport imagePort: ImagePort;\n\t\t\tperform capture.captureImage {\n\t\t\t\tin image = imagePort.image;\n\t\t\t\tout photo = photoPort.photo;\n\t\t\t}\n\t\t\tport photoPort: PhotoPort;\n\t\t}\n\t",
    "package 'Camera' {\n\tattribute def Scene;\n\tattribute def Image;\n\tattribute def Picture;\n\tport def ScenePort {\n\t\tout scene: Scene;\n\t}\n\tport def ImagePort {\n\t\tout image: Image;\n\t}\n\tport def PicturePort {\n\t\tout picture: Picture;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport scenePort: ScenePort;\n\t\t\tperform selectScene.sendScene {\n\t\t\t\tout scene = scenePort.scene;\n\t\t\t}\n\t\t}\n\t\tinterface userToCamera connect user.scenePort to camera.scenePort {\n\t\t\tref flow references selectScene.sceneFlow\n\t\t\t\tfrom source.scene to target.scene; \n\t\t}\n\t\tpart camera {\n\t\t\tport scenePort: ~ScenePort;\n\t\t\tperform selectScene.produceImage {\n\t\t\t\tin scene = scenePort.scene;\n\t\t\t\tout image = imagePort.image;\n\t\t\t}\n\t\t\tport imagePort: ImagePort;\n\t\t\tperform captureImage.producePicture {\n\t\t\t\tin image = imagePort.image;\n\t\t\t\tout picture = picturePort.picture;\n\t\t\t}\n\t\t\tport picturePort: PicturePort;",
    "package 'SensorManager' {\n\tattribute def Sensor;\n\tattribute def SensorStatus;\n\tport def SensorPort {\n\t\tout sensor: Sensor;\n\t}\n\tport def SensorStatusPort {\n\t\tout sensorStatus: SensorStatus;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport sensorPort: SensorPort;\n\t\t\tperform updateSensor.sendSensor {\n\t\t\t\tout sensor = sensorPort.sensor;\n\t\t\t}\n\t\t}\n\t\tinterface userToSensorManager connect user.sensorPort to sensorManager.sensorPort {\n\t\t\tref flow references updateSensor.sensorFlow\n\t\t\t\tfrom source.sensor to target.sensor; \n\t\t}\n\t\tpart sensorManager {\n\t\t\tport sensorPort: ~SensorPort;\n\t\t\tperform updateSensor.updateSensor {\n\t\t\t\tin sensor = sensorPort.sensor;\n\t\t\t\tout sensorStatus = sensorStatusPort.sensorStatus;\n\t\t\t}\n\t\t\tport sensorStatusPort: SensorStatusPort;\n\t\t}\n\t\tpart sensor {\n\t\t\tport sensorStatusPort: ~SensorStatusPort;\n\t\t\tperform updateSensor.updateSensor {\n\t\t\t\tin sensorStatus = sensorStatusPort.sensorStatus;\n\t\t\t}\n\t\t}\n\t}",
    "package 'Vehicle' {\n\tattribute def VehicleState;\n\tport def VehicleStartSignal;\n\tport def VehiclePowerOnSignal;\n\tport def VehicleShutdownSignal;\n\tport def VehicleStatePort {\n\t\tout vehicleState: VehicleState;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport vehicleStartSignalPort: VehicleStartSignal;\n\t\t\tport vehiclePowerOnSignalPort: VehiclePowerOnSignal;\n\t\t\tport vehicleShutdownSignalPort: VehicleShutdownSignal;\n\t\t\tperform vehicleStartSignal.sendVehicleStartSignal {\n\t\t\t\tout vehicleStartSignal = vehicleStartSignalPort.vehicleStartSignal;\n\t\t\t}\n\t\t\tperform vehiclePowerOnSignal.sendVehiclePowerOnSignal {\n\t\t\t\tout vehiclePowerOnSignal = vehiclePowerOnSignalPort.vehiclePowerOnSignal;\n\t\t\t}\n\t\t\tperform vehicleShutdownSignal.sendVehicleShutdownSignal {\n\t\t\t\tout vehicleShutdownSignal = vehicleShutdownSignalPort.vehicleShutdownSignal;\n\t\t\t}\n\t\t}\n\t\tinterface userToVehicle connect user.vehicleStartSignalPort to vehicle.vehicleStartSignalPort {\n\t\t\tref flow references vehicleStartSignal.vehicleStartSignalFlow\n\t\t\t\tfrom source.vehicleStartSignal to target.vehicleStartSignal;\n\t",
    "package 'VehicleStatus' {\n\tattribute def VehicleStatus;\n\tport def VehicleStatusPort {\n\t\tout vehicleStatus: VehicleStatus;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport vehicleStatusPort: VehicleStatusPort;\n\t\t\tperform vehicleStatus.sendVehicleStatus {\n\t\t\t\tout vehicleStatus = vehicleStatusPort.vehicleStatus;\n\t\t\t}\n\t\t}\n\t\tinterface userToVehicleStatus connect user.vehicleStatusPort to vehicleStatus.vehicleStatusPort {\n\t\t\tref flow references vehicleStatus.vehicleStatusFlow\n\t\t\t\tfrom source.vehicleStatus to target.vehicleStatus; \n\t\t}\n\t\tpart vehicleStatus {\n\t\t\tport vehicleStatusPort: ~VehicleStatusPort;\n\t\t\tperform vehicleStatus.produceVehicleStatus {\n\t\t\t\tin vehicleStatus = vehicleStatusPort.vehicleStatus;\n\t\t\t}\n\t\t}\n\t}\n\taction vehicleStatus {\n\t\taction sendVehicleStatus { out vehicleStatus: VehicleStatus; }\n\t\tsuccession flow vehicleStatusFlow from sendVehicleStatus.vehicleStatus to produceVehicleStatus.vehicleStatus;\n\t\taction produceVehicleStatus { in vehicleStatus: VehicleStatus; }\n\t}\n}\n\n––––– FEW",
    "package 'VehiclePowerManagementSystem' {\n\tattribute def VehiclePowerState;\n\tattribute def VehiclePowerCommand;\n\tport def VehiclePowerStatePort {\n\t\tout vehiclePowerState: VehiclePowerState;\n\t}\n\tport def VehiclePowerCommandPort {\n\t\tout vehiclePowerCommand: VehiclePowerCommand;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport vehiclePowerCommandPort: VehiclePowerCommandPort;\n\t\t\tperform vehiclePowerManagement.sendVehiclePowerCommand {\n\t\t\t\tout vehiclePowerCommand = vehiclePowerCommandPort.vehiclePowerCommand;\n\t\t\t}\n\t\t}\n\t\tinterface userToVehiclePowerManagement connect user.vehiclePowerCommandPort to vehiclePowerManagement.vehiclePowerCommandPort {\n\t\t\tref flow references vehiclePowerManagement.vehiclePowerCommandFlow\n\t\t\t\tfrom source.vehiclePowerCommand to target.vehiclePowerCommand; \n\t\t}\n\t\tpart vehiclePowerManagement {\n\t\t\tport vehiclePowerCommandPort: ~VehiclePowerCommandPort;\n\t\t\tperform vehiclePowerManagement.produceVehiclePowerState {\n\t\t\t\tin vehiclePowerCommand = vehiclePowerCommandPort.vehiclePowerCommand;\n\t\t\t\tout vehiclePowerState = vehiclePower",
    "package 'Vehicle' {\n\tattribute def VehicleStatus;\n\tport def VehicleStatusPort {\n\t\tout vehicleStatus: VehicleStatus;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport vehicleStatusPort: VehicleStatusPort;\n\t\t\tperform startVehicle.sendVehicleStatus {\n\t\t\t\tout vehicleStatus = vehicleStatusPort.vehicleStatus;\n\t\t\t}\n\t\t}\n\t\tinterface userToVehicle connect user.vehicleStatusPort to vehicle.vehicleStatusPort {\n\t\t\tref flow references startVehicle.vehicleStatusFlow\n\t\t\t\tfrom source.vehicleStatus to target.vehicleStatus; \n\t\t}\n\t\tpart vehicle {\n\t\t\tport vehicleStatusPort: ~VehicleStatusPort;\n\t\t\tperform startVehicle.produceVehicleStatus {\n\t\t\t\tin vehicleStatus = vehicleStatusPort.vehicleStatus;\n\t\t\t}\n\t\t}\n\t}\n\taction startVehicle {\n\t\taction sendVehicleStatus { out vehicleStatus: VehicleStatus; }\n\t\tsuccession flow vehicleStatusFlow from sendVehicleStatus.vehicleStatus to produceVehicleStatus.vehicleStatus;\n\t\taction produceVehicleStatus { in vehicleStatus: VehicleStatus; }\n\t}\n}\n\n––––– FEW‑SHOT EXAMPLES –––––\n\n",
    "package 'Vehicle' {\n\tenum def State {\n\t\tOff,\n\t\tStart,\n\t\tOn\n\t}\n\tenum def Signal {\n\t\tStart,\n\t\tOn,\n\t\tOff\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport startSignalPort: ~SignalPort;\n\t\t\tperform startSignal.sendStartSignal {\n\t\t\t\tout startSignal = startSignalPort.startSignal;\n\t\t\t}\n\t\t\tport onSignalPort: ~SignalPort;\n\t\t\tperform onSignal.sendOnSignal {\n\t\t\t\tout onSignal = onSignalPort.onSignal;\n\t\t\t}\n\t\t\tport offSignalPort: ~SignalPort;\n\t\t\tperform offSignal.sendOffSignal {\n\t\t\t\tout offSignal = offSignalPort.offSignal;\n\t\t\t}\n\t\t}\n\t\tinterface userToVehicle connect user.startSignalPort to vehicle.startSignalPort {\n\t\t\tref flow references startSignal.startSignalFlow\n\t\t\t\tfrom source.startSignal to target.startSignal;\n\t\t}\n\t\tinterface userToVehicle connect user.onSignalPort to vehicle.onSignalPort {\n\t\t\tref flow references onSignal.",
    "package 'VehicleHealthMonitoringSystem' {\n\tattribute def Temperature;\n\tattribute def Status;\n\tport def TemperaturePort {\n\t\tout temperature: Temperature;\n\t}\n\tport def StatusPort {\n\t\tout status: Status;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport temperaturePort: TemperaturePort;\n\t\t\tperform monitorVehicleHealth.sendTemperature {\n\t\t\t\tout temperature = temperaturePort.temperature;\n\t\t\t}\n\t\t}\n\t\tinterface userToVehicleHealth connect user.temperaturePort to vehicleHealth.temperaturePort {\n\t\t\tref flow references monitorVehicleHealth.temperatureFlow\n\t\t\t\tfrom source.temperature to target.temperature; \n\t\t}\n\t\tpart vehicleHealth {\n\t\t\tport temperaturePort: ~TemperaturePort;\n\t\t\tperform monitorVehicleHealth.monitorTemperature {\n\t\t\t\tin temperature = temperaturePort.temperature;\n\t\t\t\tout status = statusPort.status;\n\t\t\t}\n\t\t\tport statusPort: StatusPort;\n\t\t}",
    "package 'Server' {\n\tattribute def State;\n\tattribute def Time;\n\tport def RequestPort {\n\t\tin request: Request;\n\t}\n\tport def ResponsePort {\n\t\tout response: Response;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport requestPort: RequestPort;\n\t\t\tperform request.sendRequest {\n\t\t\t\tout request = requestPort.request;\n\t\t\t}\n\t\t}\n\t\tinterface userToServer connect user.requestPort to server.requestPort {\n\t\t\tref flow references request.requestFlow\n\t\t\t\tfrom source.request to target.request; \n\t\t}\n\t\tpart server {\n\t\t\tport requestPort: ~RequestPort;\n\t\t\tperform request.receiveRequest {\n\t\t\t\tin request = requestPort.request;\n\t\t\t}\n\t\t\tport responsePort: ResponsePort;\n\t\t\tperform response.sendResponse {\n\t\t\t\tout response = responsePort.response;\n\t\t\t}\n\t\t}\n\t\tpart clock {\n\t\t\tport timePort: ~TimePort;\n\t\t\tperform clock.updateTime {\n\t\t\t\tin time = timePort.time;\n\t\t\t}\n\t\t}\n\t\tpart",
    "package 'VehicleStartStop' {\n\tattribute def StartSignal;\n\tattribute def StopSignal;\n\tattribute def PowerOnSignal;\n\tattribute def BrakePedalDepressed;\n\tattribute def StartProcess;\n\tattribute def OperatingState;\n\tattribute def OffState;\n\tport def StartSignalPort {\n\t\tout startSignal: StartSignal;\n\t}\n\tport def StopSignalPort {\n\t\tout stopSignal: StopSignal;\n\t}\n\tport def PowerOnSignalPort {\n\t\tout powerOnSignal: PowerOnSignal;\n\t}\n\tport def BrakePedalDepressedPort {\n\t\tout brakePedalDepressed: BrakePedalDepressed;\n\t}\n\tport def StartProcessPort {\n\t\tout startProcess: StartProcess;\n\t}\n\tport def OperatingStatePort {\n\t\tout operatingState: OperatingState;\n\t}\n\tport def OffStatePort {\n\t\tout offState: OffState;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport startSignal",
    "package 'VehicleStartStop' {\n\tattribute def VehicleState;\n\tattribute def VehicleStartSignal;\n\tattribute def VehicleOnSignal;\n\tattribute def VehicleOffSignal;\n\tattribute def VehicleShutdownSignal;\n\tattribute def VehicleStartControlSignal;\n\tattribute def VehicleStopControlSignal;\n\tattribute def VehicleStartControl;\n\tattribute def VehicleStopControl;\n\tattribute def VehicleStartControlStatus;\n\tattribute def VehicleStopControlStatus;\n\tattribute def VehicleStartControlStatus;\n\tattribute def VehicleStopControlStatus;\n\tattribute def VehicleStartControlStatus;\n\tattribute def VehicleStopControlStatus;\n\tattribute def VehicleStartControlStatus;\n\tattribute def VehicleStopControlStatus;\n\tattribute def VehicleStartControlStatus;\n\tattribute def VehicleStopControlStatus;\n\tattribute def VehicleStartControlStatus;\n\tattribute def VehicleStopControlStatus;\n\tattribute def VehicleStartControlStatus;\n\t",
    "package 'CruiseControlSystem' {\n\tattribute def Speed;\n\tattribute def FuelControlCmd;\n\tport def SpeedPort {\n\t\tout speed: Speed;\n\t}\n\tport def FuelControlCmdPort {\n\t\tout fuelControlCmd: FuelControlCmd;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport speedPort: SpeedPort;\n\t\t\tperform setSpeed.sendSpeed {\n\t\t\t\tout speed = speedPort.speed;\n\t\t\t}\n\t\t}\n\t\tinterface userToCruiseControl connect user.speedPort to cruiseControl.speedPort {\n\t\t\tref flow references setSpeed.speedFlow\n\t\t\t\tfrom source.speed to target.speed; \n\t\t}\n\t\tpart cruiseControl {\n\t\t\tport speedPort: ~SpeedPort;\n\t\t\tperform setSpeed.receiveSpeed {\n\t\t\t\tin speed = speedPort.speed;\n\t\t\t}\n\t\t\tport fuelControlCmdPort: FuelControlCmdPort;\n\t\t\tperform setSpeed.sendFuelControlCmd {\n\t\t\t\tout fuelControlCmd = fuelControlCmdPort.",
    "package 'CruiseControl' {\n\tattribute def Speed;\n\tattribute def Throttle;\n\tport def SpeedPort {\n\t\tout speed: Speed;\n\t}\n\tport def ThrottlePort {\n\t\tout throttle: Throttle;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport speedPort: SpeedPort;\n\t\t\tperform setSpeed.sendSpeed {\n\t\t\t\tout speed = speedPort.speed;\n\t\t\t}\n\t\t}\n\t\tinterface userToCruiseControl connect user.speedPort to cruiseControl.speedPort {\n\t\t\tref flow references setSpeed.speedFlow\n\t\t\t\tfrom source.speed to target.speed; \n\t\t}\n\t\tpart cruiseControl {\n\t\t\tport speedPort: ~SpeedPort;\n\t\t\tperform setSpeed.acquireSpeed {\n\t\t\t\tin speed = speedPort.speed;\n\t\t\t}\n\t\t\tport throttlePort: ThrottlePort;\n\t\t\tperform setSpeed.produceThrottle {\n\t\t\t\tin speed = setSpeed.speed;\n\t\t\t\tout throttle = throttlePort.throttle;\n\t\t\t}\n\t\t}\n\t\tpart engine {\n\t\t\tport throttlePort: ~ThrottlePort;\n\t\t\tperform setSpeed.adjustPower",
    "package 'CruiseControl' {\n\tattribute def Speed;\n\tport def SpeedPort {\n\t\tout speed: Speed;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport speedPort: SpeedPort;\n\t\t\tperform setSpeed.sendSpeed {\n\t\t\t\tout speed = speedPort.speed;\n\t\t\t}\n\t\t}\n\t\tinterface userToCruiseControl connect user.speedPort to cruiseControl.speedPort {\n\t\t\tref flow references setSpeed.speedFlow\n\t\t\t\tfrom source.speed to target.speed; \n\t\t}\n\t\tpart cruiseControl {\n\t\t\tport speedPort: ~SpeedPort;\n\t\t\tperform setSpeed.receiveSpeed {\n\t\t\t\tin speed = speedPort.speed;\n\t\t\t}\n\t\t\tport throttlePort: ~ThrottlePort;\n\t\t\tperform setSpeed.calculateThrottle {\n\t\t\t\tin speed = speedPort.speed;\n\t\t\t\tout throttle = throttlePort.throttle;\n\t\t\t}\n\t\t\tport throttlePort: ThrottlePort;\n\t\t}\n\t\tpart speedSensor {\n\t\t\tport speedPort: ~SpeedPort;\n\t\t\tperform set",
    "package 'CruiseControl' {\n\tattribute def Speed;\n\tport def SpeedPort {\n\t\tout speed: Speed;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport speedPort: SpeedPort;\n\t\t\tperform setSpeed.sendSpeed {\n\t\t\t\tout speed = speedPort.speed;\n\t\t\t}\n\t\t}\n\t\tinterface userToCruiseControl connect user.speedPort to cruiseControl.speedPort {\n\t\t\tref flow references setSpeed.speedFlow\n\t\t\t\tfrom source.speed to target.speed; \n\t\t}\n\t\tpart cruiseControl {\n\t\t\tport speedPort: ~SpeedPort;\n\t\t\tperform setSpeed.receiveSpeed {\n\t\t\t\tin speed = speedPort.speed;\n\t\t\t}\n\t\t\tperform setSpeed.calculateThrottle {\n\t\t\t\tin speed = speedPort.speed;\n\t\t\t\tout throttle: Throttle;\n\t\t\t}\n\t\t\tport throttlePort: ThrottlePort;\n\t\t\tperform setSpeed.sendThrottle {\n\t\t\t\tout throttle = throttlePort.throttle;\n\t\t\t}\n\t\t}\n\t\tpart engine {\n\t\t\tport throttlePort",
    "package 'CruiseControl' {\n\tattribute def Speed;\n\tport def SetSpeedPort {\n\t\tout setSpeed: Speed;\n\t}\n\tport def ActualSpeedPort {\n\t\tout actualSpeed: Speed;\n\t}\n\tport def FuelControlPort {\n\t\tout fuelControl: FuelControl;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport setSpeedPort: SetSpeedPort;\n\t\t\tperform setSpeed.sendSetSpeed {\n\t\t\t\tout setSpeed = setSpeedPort.setSpeed;\n\t\t\t}\n\t\t}\n\t\tinterface userToCruiseControl connect user.setSpeedPort to cruiseControl.setSpeedPort {\n\t\t\tref flow references setSpeed.setSpeedFlow\n\t\t\t\tfrom source.setSpeed to target.setSpeed; \n\t\t}\n\t\tpart cruiseControl {\n\t\t\tport set",
    "package 'CruiseControl' {\n\tattribute def Speed;\n\tattribute def Fuel;\n\tport def SpeedPort {\n\t\tout speed: Speed;\n\t}\n\tport def FuelPort {\n\t\tout fuel: Fuel;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport speedPort: SpeedPort;\n\t\t\tperform setSpeed.sendSpeed {\n\t\t\t\tout speed = speedPort.speed;\n\t\t\t}\n\t\t}\n\t\tinterface userToCruiseControl connect user.speedPort to cruiseControl.speedPort {\n\t\t\tref flow references setSpeed.speedFlow\n\t\t\t\tfrom source.speed to target.speed; \n\t\t}\n\t\tpart cruiseControl {\n\t\t\tport speedPort: ~SpeedPort;\n\t\t\tperform setSpeed.readSpeed {\n\t\t\t\tin speed = speedPort.speed;\n\t\t\t}\n\t\t\tport fuelPort: FuelPort;\n\t\t\tperform setSpeed.calculateFuel {\n\t\t\t\tin speed = setSpeed.speed;\n\t\t\t\tout fuel = fuelPort.fuel;\n\t\t\t}\n\t\t}\n\t\tpart engineController {\n\t\t\tport fuelPort: ~",
    "package 'VehicleLifecycleManagementSystem' {\n\tattribute def Vehicle;\n\tattribute def Owner;\n\tattribute def Driver;\n\tattribute def DeliveryDate;\n\tattribute def ScrappingDate;\n\tattribute def AssemblyDate;\n\tattribute def DeliveryLocation;\n\tattribute def OwnerName;\n\tattribute def OwnerID;\n\tattribute def OwnerPhone;\n\tattribute def OwnerAddress;\n\tattribute def OwnerEmail;\n\tattribute def OwnerType;\n\tattribute def OwnerStatus;\n\tattribute def OwnerStartDate;\n\tattribute def OwnerEndDate;\n\tattribute def OwnerCompany;\n\tattribute def OwnerCompanyID;\n\tattribute def OwnerCompanyPhone;\n\tattribute def OwnerCompanyAddress;\n\tattribute def OwnerCompanyEmail;\n\tattribute def OwnerCompanyType;\n\tattribute def OwnerCompanyStatus;\n\tattribute def OwnerCompanyStartDate;\n\tattribute def OwnerCompanyEndDate;\n\tattribute def OwnerCompanyName;\n\tattribute def OwnerCompanyID;\n\tattribute def OwnerCompanyPhone;\n\tattribute def OwnerCompanyAddress;\n\tattribute def OwnerCompanyEmail;\n\tattribute",
    "package 'Vehicle' {\n\tattribute def Mass;\n\tattribute def OperationalStatus;\n\tattribute def GearSetting;\n\tattribute def AcceleratorPedalPosition;\n\tattribute def VehicleInstance;\n\tport def MassPort;\n\tport def OperationalStatusPort;\n\tport def GearSettingPort;\n\tport def AcceleratorPedalPositionPort;\n\tport def VehicleInstancePort;\n\tpart context {\n\t\tpart vehicle_1 {\n\t\t\tport massPort: MassPort;\n\t\t\tperform vehicle_1.produceMass {\n\t\t\t\tout mass = massPort.mass;\n\t\t\t}\n\t\t\tport operationalStatusPort: OperationalStatusPort;\n\t\t\tperform vehicle_1.produceOperationalStatus {\n\t\t\t\tout operationalStatus = operationalStatusPort.operationalStatus;\n\t\t\t}\n\t\t\tport gearSettingPort: GearSettingPort;\n\t\t\tperform vehicle_1.produceGearSetting {\n\t\t\t\tout gearSetting = gearSettingPort.gearSetting;\n\t\t\t}\n\t\t\tport acceleratorPedalPositionPort: AcceleratorPedalPositionPort;\n\t\t\tperform vehicle_1.produceAcceleratorPedalPosition {\n\t\t\t\tout acceleratorPedalPosition",
    "package 'Vehicle' {\n\tattribute def Mass;\n\tattribute def Gear;\n\tattribute def Accelerator;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tattribute mass: Mass;\n\t\t\tattribute gear: Gear;\n\t\t\tattribute accelerator: Accelerator;\n\t\t}\n\t\tpart engine {\n\t\t\tattribute power: Power;\n\t\t\tattribute torque: Torque;\n\t\t\tattribute rpm: RPM;\n\t\t}\n\t\tpart driver {\n\t\t\tattribute steering: Steering;\n\t\t\tattribute throttle: Throttle;\n\t\t}\n\t}\n}\n\npackage 'Vehicle' {\n\tpart context {\n\t\tpart vehicle {\n\t\t\tattribute mass: Mass;\n\t\t\tattribute gear: Gear;\n\t\t\tattribute accelerator: Accelerator;\n\t\t}\n\t\tpart engine {\n\t\t\tattribute power: Power;\n\t\t\tattribute torque: Torque;\n\t\t\tattribute rpm: RPM;\n\t\t}\n\t\tpart driver {\n\t\t\tattribute steering: Steering;\n\t\t\tattribute throttle: Throttle;\n\t\t}\n\t",
    "package 'Vehicle' {\n\tattribute def Mass;\n\tattribute def Gear;\n\tattribute def Throttle;\n\tattribute def Driver;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tattribute mass: Mass;\n\t\t\tattribute gear: Gear;\n\t\t\tattribute throttle: Throttle;\n\t\t\tattribute driver: Driver;\n\t\t}\n\t\tpart driver {\n\t\t\tattribute name: String;\n\t\t}\n\t\tpart engine {\n\t\t\tattribute power: Float;\n\t\t}\n\t\tpart driverToVehicle connect driver.name to vehicle.driver {\n\t\t\tref flow references vehicle.driverFlow\n\t\t\t\tfrom source.name to target.driver;\n\t\t}\n\t\tpart vehicleToEngine connect vehicle.driver to engine.driver {\n\t\t\tref flow references vehicle.driverFlow\n\t\t\t\tfrom source.driver to target.driver;\n\t\t}\n\t}\n}\n\n––––– FEW‑SHOT EXAMPLES –––––\n\nInput Requirements:\nI want to model a system that can be used",
    "package 'VehicleMass' {\n\tattribute def Mass;\n\tport def MassPort;\n\tpart context {\n\t\tpart user {\n\t\t\tport massPort: MassPort;\n\t\t\tperform calculateTotalMass.sendMass {\n\t\t\t\tout mass = massPort.mass;\n\t\t\t}\n\t\t}\n\t\tinterface userToVehicleMass connect user.massPort to vehicleMass.massPort {\n\t\t\tref flow references calculateTotalMass.massFlow\n\t\t\t\tfrom source.mass to target.mass; \n\t\t}\n\t\tpart vehicleMass {\n\t\t\tport massPort: ~MassPort;\n\t\t\tperform calculateTotalMass.produceMass {\n\t\t\t\tin mass = massPort.mass;\n\t\t\t}\n\t\t}\n\t\tpart engine {\n\t\t\tport massPort: ~MassPort;\n\t\t\tperform calculateTotalMass.produceMass {\n\t\t\t\tin mass = massPort.mass;\n\t\t\t}\n\t\t}\n\t\tpart transmission {\n\t\t\tport massPort: ~MassPort;\n\t\t\tperform calculateTotalMass.produceMass {\n\t\t\t\tin mass = massPort",
    "package 'Vehicle' {\n\tattribute def Mass;\n\tattribute def SerialNumber;\n\tattribute def VIN;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tattribute def mass: Mass;\n\t\t\tattribute def serialNumber: SerialNumber;\n\t\t\tattribute def vin: VIN;\n\t\t\tpart component {\n\t\t\t\tattribute def mass: Mass;\n\t\t\t\tattribute def serialNumber: SerialNumber;\n\t\t\t\tpart component {\n\t\t\t\t\tattribute def mass: Mass;\n\t\t\t\t\tattribute def serialNumber: SerialNumber;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n## 2. \nYou are a software engineer.\n\nTask:\nGiven the following natural‑language requirements, create an OMG SysML v2 textual model.  \nReturn only valid SysML v2 code, no explanations or commentary.\n\n––––– FEW‑SHOT EXAMPLES –––––\n\nInput Requirements:\nI want to be able to create a new project, add",
    "package 'MassAggregationManagementSystem' {\n\tpart context {\n\t\tpart user {\n\t\t\tperform massAggregationManagementSystem.calculateTotalMass {\n\t\t\t\tin simpleThing = simpleThing;\n\t\t\t\tout totalMass = totalMass;\n\t\t\t}\n\t\t\tperform massAggregationManagementSystem.calculateTotalMass {\n\t\t\t\tin compositeThing = compositeThing;\n\t\t\t\tout totalMass = totalMass;\n\t\t\t}\n\t\t}\n\t\tpart massAggregationManagementSystem {\n\t\t\tperform massAggregationManagementSystem.calculateTotalMass {\n\t\t\t\tin simpleThing = simpleThing;\n\t\t\t\tout totalMass = totalMass;\n\t\t\t}\n\t\t\tperform massAggregationManagementSystem.calculateTotalMass {\n\t\t\t\tin compositeThing = compositeThing;\n\t\t\t\tout totalMass = totalMass;\n\t\t\t}\n\t\t}\n\t}\n\taction massAggregationManagementSystem {\n\t\taction calculateTotalMass { in simpleThing; out totalMass: Mass; }\n\t\tsuccession flow simpleThingFlow from calculateTotalMass.simpleThing to calculateTotalMass.totalMass;\n\t\taction calculateTotalMass { in compositeThing; out totalMass: Mass; }\n\t\tsuccession flow compositeThingFlow from calculateTotalMass.compositeThing to calculateTotalMass.totalMass",
    "package 'MassAggregationSystem' {\n\tattribute def Mass;\n\tpart context {\n\t\tpart user {\n\t\t\tpart massAggregationSystem {\n\t\t\t\tpart object {\n\t\t\t\t\tpart subcomponent {\n\t\t\t\t\t\tpart subcomponent {\n\t\t\t\t\t\t\tpart subcomponent {\n\t\t\t\t\t\t\t\tpart subcomponent {\n\t\t\t\t\t\t\t\t\tpart subcomponent {\n\t\t\t\t\t\t\t\t\t\tpart subcomponent {\n\t\t\t\t\t\t\t\t\t\t\tpart subcomponent {\n\t\t\t\t\t\t\t\t\t\t\t\tpart subcomponent {\n\t\t\t\t\t\t\t\t\t\t\t\t\tpart subcomponent {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart subcomponent {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart subcomponent {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart subcomponent {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart subcomponent {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart subcomponent {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart subcomponent {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart subcomponent {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart subcomponent {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart subcomponent {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart subcomponent {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart subcomponent {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart subcomponent {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart subcomponent {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart subcomponent {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart subcomponent {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart subcomponent {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart subcomponent {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart subcomponent {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart subcomponent {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart subcomponent {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t",
    "package 'VehicleDynamics' {\n\tattribute def Power;\n\tattribute def Acceleration;\n\tattribute def Speed;\n\tattribute def Position;\n\tport def PowerPort;\n\tport def AccelerationPort;\n\tport def SpeedPort;\n\tport def PositionPort;\n\tpart context {\n\t\tpart user {\n\t\t\tport powerPort: PowerPort;\n\t\t\tperform calculatePower.sendPower {\n\t\t\t\tout power = powerPort.power;\n\t\t\t}\n\t\t}\n\t\tinterface userToVehicleDynamics connect user.powerPort to vehicleDynamics.powerPort {\n\t\t\tref flow references calculatePower.powerFlow\n\t\t\t\tfrom source.power to target.power; \n\t\t}\n\t\tpart vehicleDynamics {\n\t\t\tport powerPort: ~PowerPort;\n\t\t\tperform calculatePower.producePower {\n\t\t\t\tin power = powerPort.power;\n\t\t\t\tout power = powerPort.power;\n\t\t\t}\n\t\t\tport accelerationPort: ~AccelerationPort;\n\t\t\tperform calculateAcceleration.produceAcceleration {\n\t\t\t\tin power = powerPort.power;\n\t\t\t",
    "package 'Vehicle' {\n\tattribute def Mass;\n\tattribute def DragCoefficient;\n\tattribute def RollingResistanceCoefficient;\n\tattribute def InitialSpeed;\n\tattribute def InitialPosition;\n\tattribute def TimeStep;\n\tport def Power;\n\tport def Acceleration;\n\tport def Speed;\n\tport def Position;\n\tpart context {\n\t\tpart user {\n\t\t\tport powerPort: Power;\n\t\t\tperform drive.sendPower {\n\t\t\t\tout power = powerPort.power;\n\t\t\t}\n\t\t}\n\t\tinterface userToVehicle connect user.powerPort to vehicle.powerPort {\n\t\t\tref flow references drive.powerFlow\n\t\t\t\tfrom source.power to target.power;\n\t\t}\n\t\tpart vehicle {\n\t\t\tport powerPort: ~Power;\n\t\t\tperform drive.produceAcceleration {\n\t\t\t\tin power = powerPort.power;\n\t\t\t\tout acceleration = accelerationPort.acceleration;\n\t\t\t}\n\t\t\tport accelerationPort: Acceleration;\n\t\t\tperform drive.produceSpeed {\n\t\t\t\tin acceleration = accelerationPort.acceleration;\n\t\t\t",
    "package 'VehicleDynamics' {\n\tattribute def Mass;\n\tattribute def WheelPower;\n\tattribute def AerodynamicDragCoefficient;\n\tattribute def RollingResistanceCoefficient;\n\tattribute def InitialSpeed;\n\tattribute def InitialPosition;\n\tattribute def Speed;\n\tattribute def Position;\n\tattribute def Acceleration;\n\tattribute def Displacement;\n\tport def MassPort;\n\tport def WheelPowerPort;\n\tport def AerodynamicDragCoefficientPort;\n\tport def RollingResistanceCoefficientPort;\n\tport def InitialSpeedPort;\n\tport def InitialPositionPort;\n\tport def SpeedPort;\n\tport def PositionPort;\n\tport def AccelerationPort;\n\tport def DisplacementPort;\n\tpart context {\n\t\tpart user {\n\t\t\tport massPort: MassPort;\n\t\t\tport wheelPowerPort: WheelPowerPort;\n\t\t\tport aerodynamicDragCoefficientPort: AerodynamicDragCoefficientPort;\n\t\t\tport rollingResistanceCoefficientPort: RollingResistanceCoefficientPort;\n\t\t\tport initialSpeedPort: InitialSpeedPort;\n\t\t\tport initialPositionPort: InitialPositionPort;\n\t\t\t",
    "package 'Vehicle' {\n\tattribute def Position;\n\tattribute def Velocity;\n\tattribute def Acceleration;\n\tattribute def Mass;\n\tattribute def Power;\n\tattribute def Time;\n\tattribute def DragCoefficient;\n\tattribute def FrictionCoefficient;\n\tport def PositionPort;\n\tport def VelocityPort;\n\tport def AccelerationPort;\n\tport def MassPort;\n\tport def PowerPort;\n\tport def TimePort;\n\tport def DragCoefficientPort;\n\tport def FrictionCoefficientPort;\n\tpart context {\n\t\tpart user {\n\t\t\tport positionPort: PositionPort;\n\t\t\tport velocityPort: VelocityPort;\n\t\t\tport accelerationPort: AccelerationPort;\n\t\t\tport massPort: MassPort;\n\t\t\tport powerPort: PowerPort;\n\t\t\tport timePort: TimePort;\n\t\t\tport dragCoefficientPort: DragCoefficientPort;\n\t\t\tport frictionCoefficientPort: FrictionCoefficientPort;\n\t\t\tperform calculate.sendPosition {\n\t\t\t\tout position = positionPort.position",
    "package 'VehicleMass' {\n\tattribute def Mass;\n\tport def MassPort {\n\t\tout mass: Mass;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport massPort: MassPort;\n\t\t\tperform checkVehicleMass.checkVehicleMass {\n\t\t\t\tout mass = massPort.mass;\n\t\t\t}\n\t\t}\n\t\tpart chassis {\n\t\t\tport massPort: ~MassPort;\n\t\t\tperform checkVehicleMass.checkChassisMass {\n\t\t\t\tin mass = massPort.mass;\n\t\t\t}\n\t\t}\n\t\tpart engine {\n\t\t\tport massPort: ~MassPort;\n\t\t\tperform checkVehicleMass.checkEngineMass {\n\t\t\t\tin mass = massPort.mass;\n\t\t\t}\n\t\t}\n\t\tpart gearbox {\n\t\t\tport massPort: ~MassPort;\n\t\t\tperform checkVehicleMass.checkGearboxMass {\n\t\t\t\tin mass = massPort.mass;\n\t\t\t}\n\t\t}\n\t}\n\taction checkVehicleMass {\n\t\taction checkChassisMass { in mass: Mass; }\n\t\taction checkEngineMass { in mass: Mass; }\n\t\taction checkGearboxMass { in mass: Mass;",
    "package 'VehicleMassBudget' {\n\tattribute def Mass;\n\tpart context {\n\t\tpart user {\n\t\t\tpart vehicle {\n\t\t\t\tpart chassis {\n\t\t\t\t\tpart engine {\n\t\t\t\t\t\tpart transmission {\n\t\t\t\t\t\t\tpart vehicleMassBudget {\n\t\t\t\t\t\t\t\tpart vehicleMassBudget {\n\t\t\t\t\t\t\t\t\tpart vehicleMassBudget {\n\t\t\t\t\t\t\t\t\t\tpart vehicleMassBudget {\n\t\t\t\t\t\t\t\t\t\t\tpart vehicleMassBudget {\n\t\t\t\t\t\t\t\t\t\t\t\tpart vehicleMassBudget {\n\t\t\t\t\t\t\t\t\t\t\t\t\tpart vehicleMassBudget {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart vehicleMassBudget {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart vehicleMassBudget {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart vehicleMassBudget {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart vehicleMassBudget {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart vehicleMassBudget {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart vehicleMassBudget {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart vehicleMassBudget {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart vehicleMassBudget {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart vehicleMassBudget {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart vehicleMassBudget {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart vehicleMassBudget {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart vehicleMassBudget {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart vehicleMassBudget {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart vehicleMassBudget {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart vehicleMassBudget {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart vehicleMassBudget {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart vehicleMassBudget {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart vehicleMassBudget {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t",
    "package 'VehicleMassManager' {\n\tattribute def Mass;\n\tport def MassPort {\n\t\tout mass: Mass;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport massPort: MassPort;\n\t\t\tperform verifyVehicleMass.sendMass {\n\t\t\t\tout mass = massPort.mass;\n\t\t\t}\n\t\t}\n\t\tinterface userToVehicleMassManager connect user.massPort to vehicleMassManager.massPort {\n\t\t\tref flow references verifyVehicleMass.massFlow\n\t\t\t\tfrom source.mass to target.mass; \n\t\t}\n\t\tpart vehicleMassManager {\n\t\t\tport massPort: ~MassPort;\n\t\t\tperform verifyVehicleMass.verifyVehicleMass {\n\t\t\t\tin mass = massPort.mass;\n\t\t\t}\n\t\t}\n\t}\n\taction verifyVehicleMass {\n\t\taction sendMass { out mass: Mass; }\n\t\tsuccession flow massFlow from sendMass.mass to verifyVehicleMass.mass;\n\t\taction verifyVehicleMass { in mass: Mass; }\n\t}\n}\n\n––––– FEW‑SHOT EXAMPLES –––––\n\nInput Requirements:\nI want to be",
    "package 'VehicleWeightSystem' {\n\tattribute def Weight;\n\tport def WeightPort {\n\t\tout weight: Weight;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport weightPort: WeightPort;\n\t\t\tperform checkWeight.sendWeight {\n\t\t\t\tout weight = weightPort.weight;\n\t\t\t}\n\t\t}\n\t\tinterface userToVehicleWeightSystem connect user.weightPort to vehicleWeightSystem.weightPort {\n\t\t\tref flow references checkWeight.weightFlow\n\t\t\t\tfrom source.weight to target.weight; \n\t\t}\n\t\tpart vehicleWeightSystem {\n\t\t\tport weightPort: ~WeightPort;\n\t\t\tperform checkWeight.checkWeight {\n\t\t\t\tin weight = weightPort.weight;\n\t\t\t}\n\t\t}\n\t}\n\taction checkWeight {\n\t\taction sendWeight { out weight: Weight; }\n\t\tsuccession flow weightFlow from sendWeight.weight to checkWeight.weight;\n\t\taction checkWeight { in weight: Weight; }\n\t}\n}\n\nInput Requirement:\nThe system must be able to accurately record and manage the weight of each component, with the weight data for the chassis, engine, and transmission all required as",
    "package 'Vehicle' {\n\tattribute def Mass;\n\tpart context {\n\t\tpart chassis {\n\t\t\tattribute def Mass;\n\t\t}\n\t\tpart engine {\n\t\t\tattribute def Mass;\n\t\t}\n\t\tpart transmission {\n\t\t\tattribute def Mass;\n\t\t}\n\t\tpart vehicle {\n\t\t\tattribute def Mass;\n\t\t\tpart chassis;\n\t\t\tpart engine;\n\t\t\tpart transmission;\n\t\t\tpart vehicle {\n\t\t\t\tpart chassis {\n\t\t\t\t\tattribute def Mass;\n\t\t\t\t}\n\t\t\t\tpart engine {\n\t\t\t\t\tattribute def Mass;\n\t\t\t\t}\n\t\t\t\tpart transmission {\n\t\t\t\t\tattribute def Mass;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tpart chassis {\n\t\t\t\tattribute def Mass;\n\t\t\t}\n\t\t\tpart engine {\n\t\t\t\tattribute def Mass;\n\t\t\t}\n\t\t\tpart transmission {\n\t\t\t\tattribute def Mass;\n\t\t\t}\n\t\t}\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tpart chassis {\n\t\t\t\tattribute def Mass;\n\t\t\t}\n\t\t\tpart engine {\n\t\t\t\tattribute def Mass;\n\t\t\t}\n\t\t\tpart transmission {\n\t\t\t",
    "package 'Maintenance' {\n\tattribute def MaintenanceTime;\n\tattribute def MaintenanceInterval;\n\tattribute def MaxAllowedTemperature;\n\tattribute def MaintenanceStartTime;\n\tattribute def MaintenanceDuration;\n\tattribute def MaintenanceStatus;\n\tport def MaintenanceTimePort;\n\tport def MaintenanceIntervalPort;\n\tport def MaxAllowedTemperaturePort;\n\tport def MaintenanceStartTimePort;\n\tport def MaintenanceDurationPort;\n\tport def MaintenanceStatusPort;\n\tpart context {\n\t\tpart user {\n\t\t\tport maintenanceTimePort: MaintenanceTimePort;\n\t\t\tport maintenanceIntervalPort: MaintenanceIntervalPort;\n\t\t\tport maxAllowedTemperaturePort: MaxAllowedTemperaturePort;\n\t\t\tport maintenanceStartTimePort: MaintenanceStartTimePort;\n\t\t\tport maintenanceDurationPort: MaintenanceDurationPort;\n\t\t\tport maintenanceStatusPort: MaintenanceStatusPort;\n\t\t\tperform checkMaintenanceTime.sendMaintenanceTime {\n\t\t\t\tout maintenanceTime = maintenanceTimePort.maintenanceTime;\n\t\t\t}\n\t\t\tperform checkMaintenanceTime.sendMaintenanceInterval {\n\t\t\t\tout maintenanceInterval = maintenanceIntervalPort.maintenanceInterval;\n\t\t\t}\n\t\t\tperform checkMaintenanceTime.send",
    "package 'Vehicle' {\n\tattribute def Mass;\n\tattribute def FuelMass;\n\tattribute def MaxMass;\n\tport def MassPort {\n\t\tout mass: Mass;\n\t}\n\tport def FuelMassPort {\n\t\tout fuelMass: FuelMass;\n\t}\n\tport def MaxMassPort {\n\t\tout maxMass: MaxMass;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport massPort: MassPort;\n\t\t\tport fuelMassPort: FuelMassPort;\n\t\t\tport maxMassPort: MaxMassPort;\n\t\t\tperform checkMass.check {\n\t\t\t\tout mass = massPort.mass;\n\t\t\t\tout fuelMass = fuelMassPort.fuelMass;\n\t\t\t\tout maxMass = maxMassPort.maxMass;\n\t\t\t}\n\t\t}\n\t\tinterface userToVehicle connect user.massPort to vehicle.massPort {\n\t\t\tref flow references checkMass.massFlow\n\t\t\t\tfrom source.mass to target.mass;\n\t\t}\n\t\tinterface userToVehicle connect user.fuelMassPort to vehicle.fuelMassPort {\n\t\t\tref flow references checkMass.fuelMassFlow\n\t\t\t\tfrom source.fuelMass to",
    "package 'Vehicle' {\n\tpart context {\n\t\tpart vehicle {\n\t\t\tpart engine {\n\t\t\t\tpart clutch {\n\t\t\t\t\tport clutchPort: ClutchPort;\n\t\t\t\t\tperform clutch.connectClutch {\n\t\t\t\t\t\tin clutch = clutchPort.clutch;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpart transmission {\n\t\t\t\t\tport transmissionPort: TransmissionPort;\n\t\t\t\t\tperform transmission.connectTransmission {\n\t\t\t\t\t\tin transmission = transmissionPort.transmission;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart fuelTank {\n\t\t\t\tpart fuel {\n\t\t\t\t\tpart fuelPump {\n\t\t\t\t\t\tport fuelPumpPort: FuelPumpPort;\n\t\t\t\t\t\tperform fuelPump.connectFuelPump {\n\t\t\t\t\t\t\tin fuelPump = fuelPumpPort.fuelPump;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tinterface vehicleToEngine connect vehicle.enginePort to engine.clutchPort {\n\t\t\tref flow references clutch.clutchFlow\n\t\t\t\tfrom source.clutch to target.clutch;\n\t\t}\n\t\tinterface vehicleToFuelTank connect vehicle.fuelTankPort to",
    "package 'Vehicle' {\n\tpart context {\n\t\tpart vehicle {\n\t\t\tpart engine {\n\t\t\t\tpart transmission {\n\t\t\t\t\tpart clutch {\n\t\t\t\t\t\tpart clutchInterface {\n\t\t\t\t\t\t\tpart clutchMotor {\n\t\t\t\t\t\t\t\tpart clutchMotorInterface {\n\t\t\t\t\t\t\t\t\tpart clutchMotorController {\n\t\t\t\t\t\t\t\t\t\tpart clutchMotorControllerInterface {\n\t\t\t\t\t\t\t\t\t\t\tpart clutchMotorControllerController {\n\t\t\t\t\t\t\t\t\t\t\t\tpart clutchMotorControllerControllerInterface {\n\t\t\t\t\t\t\t\t\t\t\t\t\tpart clutchMotorControllerControllerController {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart clutchMotorControllerControllerControllerInterface {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart clutchMotorControllerControllerControllerController {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart clutchMotorControllerControllerControllerControllerInterface {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart clutchMotorControllerControllerControllerControllerController {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart clutchMotorControllerControllerControllerControllerControllerInterface {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart clutchMotorControllerControllerControllerControllerControllerController {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart clutchMotorControllerControllerControllerControllerControllerControllerInterface {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart clutchMotorControllerControllerControllerControllerControllerControllerController {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart clutchMotorControllerControllerControllerControllerControllerControllerControllerInterface {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart clutchMotorControllerControllerControllerControllerControllerControllerControllerController {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart clutchMotorControllerControllerControllerControllerControllerControllerControllerControllerInterface {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart clutch",
    "package 'Vehicle' {\n\tattribute def Mass;\n\tattribute def Torque;\n\tport def MassPort {\n\t\tout mass: Mass;\n\t}\n\tport def TorquePort {\n\t\tout torque: Torque;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport massPort: MassPort;\n\t\t\tperform massControl.sendMass {\n\t\t\t\tout mass = massPort.mass;\n\t\t\t}\n\t\t}\n\t\tinterface userToVehicle connect user.massPort to vehicle.massPort {\n\t\t\tref flow references massControl.massFlow\n\t\t\t\tfrom source.mass to target.mass; \n\t\t}\n\t\tpart vehicle {\n\t\t\tport massPort: ~MassPort;\n\t\t\tperform massControl.produceMass {\n\t\t\t\tin mass = massPort.mass;\n\t\t\t}\n\t\t}\n\t\tpart engine {\n\t\t\tport torquePort: ~TorquePort;\n\t\t\tperform powerTransmission.produceTorque {\n\t\t\t\tin torque = torquePort.torque;\n\t\t\t}\n\t\t}\n\t}\n\taction massControl {\n\t\taction sendMass { out mass:",
    "package 'Vehicle' {\n\tattribute def VehicleAttribute;\n\tattribute def DrivingCycle;\n\tport def VehicleAttributePort {\n\t\tout vehicleAttribute: VehicleAttribute;\n\t}\n\tport def DrivingCyclePort {\n\t\tout drivingCycle: DrivingCycle;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport vehicleAttributePort: VehicleAttributePort;\n\t\t\tperform analyzeVehicle.sendVehicleAttribute {\n\t\t\t\tout vehicleAttribute = vehicleAttributePort.vehicleAttribute;\n\t\t\t}\n\t\t}\n\t\tinterface userToVehicle connect user.vehicleAttributePort to vehicle.vehicleAttributePort {\n\t\t\tref flow references analyzeVehicle.vehicleAttributeFlow\n\t\t\t\tfrom source.vehicleAttribute to target.vehicleAttribute; \n\t\t}\n\t\tpart vehicle {\n\t\t\tport vehicle",
    "package 'Vehicle' {\n\tattribute def CurbWeight;\n\tattribute def Load;\n\tattribute def WheelDiameter;\n\tattribute def TransmissionEfficiency;\n\tattribute def WheelPower;\n\tattribute def Acceleration;\n\tattribute def EnergyConsumption;\n\tattribute def ActualEnginePowerDemand;\n\tattribute def FuelConsumption;\n\tattribute def FuelEconomy;\n\tport def CurbWeightPort;\n\tport def LoadPort;\n\tport def WheelDiameterPort;\n\tport def TransmissionEfficiencyPort;\n\tport def WheelPowerPort;\n\tport def AccelerationPort;\n\tport def EnergyConsumptionPort;\n\tport def ActualEnginePowerDemandPort;\n\tport def FuelConsumptionPort;\n\tport def FuelEconomyPort;\n\tpart context {\n\t\tpart user {\n\t\t\tport curbWeightPort: CurbWeightPort;\n\t\t\tport loadPort: LoadPort;\n\t\t\tport wheelDiameterPort: WheelDiameterPort;\n\t\t\tport transmissionEfficiencyPort: TransmissionEfficiencyPort;",
    "package 'EngineSelectionSystem' {\n\tattribute def EngineType;\n\tattribute def EnginePerformance;\n\tattribute def EngineCost;\n\tport def EngineTypePort;\n\tport def EnginePerformancePort;\n\tport def EngineCostPort;\n\tpart context {\n\t\tpart user {\n\t\t\tport engineTypePort: EngineTypePort;\n\t\t\tperform selectEngine.sendEngineType {\n\t\t\t\tout engineType = engineTypePort.engineType;\n\t\t\t}\n\t\t}\n\t\tinterface userToEngineSelectionSystem connect user.engineTypePort to engineSelectionSystem.engineTypePort {\n\t\t\tref flow references selectEngine.engineTypeFlow\n\t\t\t\tfrom source.engineType to target.engineType; \n\t\t}\n\t\tpart engineSelectionSystem {\n\t\t\tport engineTypePort: ~EngineTypePort;\n\t\t\tperform selectEngine.produceEnginePerformance {\n\t\t\t\tin engineType = engineTypePort.engineType;\n\t\t\t\tout enginePerformance = enginePerformancePort.enginePerformance;\n\t\t\t}\n\t\t\tport enginePerformancePort: EnginePerformancePort;\n\t\t\tperform selectEngine.produceEngineCost {\n\t\t\t\tin engineType = engineTypePort.engineType;\n\t\t\t\tout engineCost = engineCostPort.engineCost",
    "package 'VehicleQualityCheck' {\n\tattribute def Weight;\n\tport def WeightPort {\n\t\tout weight: Weight;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport weightPort: WeightPort;\n\t\t\tperform checkVehicleQuality.collectWeight {\n\t\t\t\tout weight = weightPort.weight;\n\t\t\t}\n\t\t}\n\t\tinterface userToVehicleQualityCheck connect user.weightPort to vehicleQualityCheck.weightPort {\n\t\t\tref flow references checkVehicleQuality.weightFlow\n\t\t\t\tfrom source.weight to target.weight; \n\t\t}\n\t\tpart vehicleQualityCheck {\n\t\t\tport weightPort: ~WeightPort;\n\t\t\tperform checkVehicleQuality.processWeight {\n\t\t\t\tin weight = weightPort.weight;\n\t\t\t\tout weight = weightPort.weight;\n\t\t\t}\n\t\t\tport weightPort: WeightPort;\n\t\t}\n\t\tpart vehicleQualityCheck {\n\t\t\tport weightPort: ~WeightPort;\n\t\t\tperform checkVehicleQuality.evaluateWeight {\n\t\t\t\tin weight = weightPort.weight;\n\t\t\t\tout qualified: Boolean;\n\t\t\t}\n\t\t}\n\t}\n\taction checkVehicleQuality {\n\t\taction collectWeight { out weight: Weight; }\n\t",
    "package 'MassVerificationSystem' {\n\tattribute def Mass;\n\tattribute def Vehicle;\n\tport def MassPort;\n\tport def VehiclePort;\n\tpart context {\n\t\tpart user {\n\t\t\tport vehiclePort: VehiclePort;\n\t\t\tperform verifyVehicle.sendVehicle {\n\t\t\t\tout vehicle = vehiclePort.vehicle;\n\t\t\t}\n\t\t}\n\t\tinterface userToMassVerificationSystem connect user.vehiclePort to massVerificationSystem.vehiclePort {\n\t\t\tref flow references verifyVehicle.vehicleFlow\n\t\t\t\tfrom source.vehicle to target.vehicle; \n\t\t}\n\t\tpart massVerificationSystem {\n\t\t\tport vehiclePort: ~VehiclePort;\n\t\t\tperform verifyVehicle.produceMass {\n\t\t\t\tin vehicle = vehiclePort.vehicle;\n\t\t\t\tout mass = massPort.mass;\n\t\t\t}\n\t\t\tport massPort: MassPort;\n\t\t}\n\t\tpart weighingEquipment {\n\t\t\tport massPort: ~MassPort;\n\t\t\tperform verifyVehicle.measureMass {\n\t\t\t\tin mass = massPort.mass;\n\t\t\t}\n\t\t}\n\t}\n\taction verify",
    "package 'Transportation System' {\n\tpart context {\n\t\tpart user {\n\t\t\tport userPort: ~UserPort;\n\t\t\tperform user.enterVehicle {\n\t\t\t\tin user = userPort.user;\n\t\t\t}\n\t\t\tperform user.exitVehicle {\n\t\t\t\tin user = userPort.user;\n\t\t\t}\n\t\t\tperform user.startDriving {\n\t\t\t\tin user = userPort.user;\n\t\t\t}\n\t\t\tperform user.stopDriving {\n\t\t\t\tin user = userPort.user;\n\t\t\t}\n\t\t\tperform user.startRiding {\n\t\t\t\tin user = userPort.user;\n\t\t\t}\n\t\t\tperform user.stopRiding {\n\t\t\t\tin user = userPort.user;\n\t\t\t}\n\t\t\tperform user.startParking {\n\t\t\t\tin user = userPort.user;\n\t\t\t}\n\t\t\tperform user.stopParking {\n\t\t\t\tin user = userPort.user;\n\t\t\t}\n\t\t\tperform user.startCharging {\n\t\t\t\tin user = userPort.user;\n\t\t\t}\n\t\t\tperform user.stopCharging {\n\t\t\t\tin user = userPort.user;\n\t\t\t}\n\t\t\tperform user.startRecharging",
    "package 'Transportation' {\n\tpart context {\n\t\tpart user {\n\t\t\tport enterVehiclePort;\n\t\t\tperform enterVehicle {\n\t\t\t\tout enterVehicle = enterVehiclePort.enterVehicle;\n\t\t\t}\n\t\t}\n\t\tpart driver {\n\t\t\tport enterVehiclePort: ~EnterVehiclePort;\n\t\t\tperform enterVehicle {\n\t\t\t\tin enterVehicle = enterVehiclePort.enterVehicle;\n\t\t\t}\n\t\t}\n\t\tpart passenger {\n\t\t\tport enterVehiclePort: ~EnterVehiclePort;\n\t\t\tperform enterVehicle {\n\t\t\t\tin enterVehicle = enterVehiclePort.enterVehicle;\n\t\t\t}\n\t\t}\n\t\tpart gasStation {\n\t\t\tport refuelPort;\n\t\t\tperform refuel {\n\t\t\t\tout refuel = refuelPort.refuel;\n\t\t\t}\n\t\t}\n\t\tpart destination {\n\t\t\tport exitVehiclePort;\n\t\t\tperform exitVehicle {\n\t\t\t\tout exitVehicle = exitVehiclePort.exitVehicle;\n\t\t\t}\n\t\t}\n\t}\n\taction enterVehicle {\n\t\taction enterVehicle { out enterVehicle: EnterVehicle; }\n\t\tsuccession flow enterVehicleFlow from enterVehicle.enterVehicle to refuel.enterVehicle;\n\t\taction ref",
    "package 'Vehicle' {\n\tattribute def EngineType;\n\tattribute def TransmissionType;\n\tattribute def CylinderType;\n\tattribute def CylinderSize;\n\tport def EngineTypePort;\n\tport def TransmissionTypePort;\n\tport def CylinderTypePort;\n\tport def CylinderSizePort;\n\tpart context {\n\t\tpart user {\n\t\t\tport engineTypePort: EngineTypePort;\n\t\t\tport transmissionTypePort: TransmissionTypePort;\n\t\t\tport cylinderTypePort: CylinderTypePort;\n\t\t\tport cylinderSizePort: CylinderSizePort;\n\t\t\tperform createVehicle.sendEngineType {\n\t\t\t\tout engineType = engineTypePort.engineType;\n\t\t\t}\n\t\t\tperform createVehicle.sendTransmissionType {\n\t\t\t\tout transmissionType = transmissionTypePort.transmissionType;\n\t\t\t}\n\t\t\tperform createVehicle.sendCylinderType {\n\t\t\t\tout cylinderType = cylinderTypePort.cylinderType;\n\t\t\t",
    "package 'Engine' {\n\tattribute def Cylinders;\n\tattribute def Diameter;\n\tpart context {\n\t\tpart user {\n\t\t\tperform configureEngine.selectCylinders {\n\t\t\t\tout cylinders = cylinders;\n\t\t\t}\n\t\t\tperform configureEngine.selectDiameter {\n\t\t\t\tout diameter = diameter;\n\t\t\t}\n\t\t}\n\t\tpart configureEngine {\n\t\t\taction selectCylinders { out cylinders: Cylinders; }\n\t\t\taction selectDiameter { out diameter: Diameter; }\n\t\t}\n\t}\n}\n\nInput Requirement:\nThis system requires the design of a configurable engine, with a basic structure composed of multiple cylinders. The number of cylinders can be either 4 or 6. Each cylinder is available in two diameters: 70 mm and 100 mm, with the specific selection depending on actual requirements. In terms of engine configurations, the system should support at least two engine variants: a four-cylinder engine and a six-cylinder engine. Users can choose the appropriate combination of cylinder quantity and diameter according to different application scenarios, thereby enabling flexible adjustment of engine performance and size.\n",
    "package 'Vehicle' {\n\tattribute def Engine;\n\tattribute def Transmission;\n\tattribute def CylinderDiameter;\n\tport def EnginePort {\n\t\tout engine: Engine;\n\t}\n\tport def TransmissionPort {\n\t\tout transmission: Transmission;\n\t}\n\tport def CylinderDiameterPort {\n\t\tout cylinderDiameter: CylinderDiameter;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport enginePort: EnginePort;\n\t\t\tport transmissionPort: TransmissionPort;\n\t\t\tport cylinderDiameterPort: CylinderDiameterPort;\n\t\t\tperform selectEngine.sendEngine {\n\t\t\t\tout engine = enginePort.engine;\n\t\t\t}\n\t\t\tperform selectTransmission.sendTransmission {\n\t\t\t\tout transmission = transmissionPort.transmission;\n\t\t\t}\n\t\t\tperform selectCylinderDiameter.sendCylinderDiameter {\n\t\t\t\tout cylinderDiameter = cylinderDiameterPort.cylinderDiameter;\n\t\t\t}\n\t\t}\n\t\tinterface user",
    "package 'System' {\n\tpart context {\n\t\tpart computer {\n\t\t\tpart context {\n\t\t\t\tpart cpu {\n\t\t\t\t\tpart context {\n\t\t\t\t\t\tpart cpu {\n\t\t\t\t\t\t\tpart context {\n\t\t\t\t\t\t\t\tpart cpu {\n\t\t\t\t\t\t\t\t\tpart context {\n\t\t\t\t\t\t\t\t\t\tpart cpu {\n\t\t\t\t\t\t\t\t\t\t\tpart context {\n\t\t\t\t\t\t\t\t\t\t\t\tpart cpu {\n\t\t\t\t\t\t\t\t\t\t\t\t\tpart context {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart cpu {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart context {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart cpu {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart context {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart cpu {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart context {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart cpu {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart context {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart cpu {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart context {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart cpu {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart context {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart cpu {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart context {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart cpu {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart context {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart cpu {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart context {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart cpu {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart context {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart cpu {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart context {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart cpu {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart context {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart cpu {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart context {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart cpu {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart context {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart cpu {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart context {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t",
    "package 'PowertrainSystem' {\n\tpart context {\n\t\tpart logicalLayer {\n\t\t\tpart torqueGenerator {\n\t\t\t\tport torquePort {\n\t\t\t\t\tout torque: Torque;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart powerUnit {\n\t\t\t\tport powerPort {\n\t\t\t\t\tout power: Power;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart powerUnitToTorqueGenerator connect powerUnit.powerPort to torqueGenerator.torquePort {\n\t\t\t\tref flow references powerUnitToTorqueGeneratorFlow from source.power to target.torque;\n\t\t\t}\n\t\t}\n\t\tpart physicalLayer {\n\t\t\tpart powerUnit {\n\t\t\t\tport powerPort {\n\t\t\t\t\tout power: Power;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart torqueGenerator {\n\t\t\t\tport torquePort {\n\t\t\t\t\tout torque: Torque;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart powerUnitToTorqueGenerator connect powerUnit.powerPort to torqueGenerator.torquePort {\n\t\t\t\tref flow references powerUnitToTorqueGeneratorFlow from source.power to target.torque;\n\t\t",
    "package 'Powertrain' {\n\tpart context {\n\t\tpart powertrain {\n\t\t\tpart engine {\n\t\t\t\tpart torqueGenerator {\n\t\t\t\t\tperform generateTorque {\n\t\t\t\t\t\tout torque = torqueGenerator.torque;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tinterface powertrainToEngine connect powertrain.engine to engine.torqueGenerator {\n\t\t\tref flow references generateTorque.torqueFlow\n\t\t\t\tfrom source.torque to target.torque;\n\t\t}\n\t}\n\taction generateTorque {\n\t\taction generateTorque { out torque: Torque; }\n\t}\n}\n\n––––– FEW‑SHOT EXAMPLES –––––\n\nInput Requirements:\nThe system requires the power transmission system to provide power and generate torque. In the logical model, the system possesses the capability to deliver power and generate torque, which is specifically realized through the action of \"generating torque\" by the torque generator component, enabling the transfer and conversion of power. In the physical model, the powertrain includes the engine as a component, and the engine actually performs",
    "package 'VehicleFeatureAnnotationSystem' {\n\tpart context {\n\t\tpart user {\n\t\t\tport seatBeltPort: ~SeatBeltPort;\n\t\t\tperform seatBelt.attachSeatBelt {\n\t\t\t\tin seatBelt = seatBeltPort.seatBelt;\n\t\t\t}\n\t\t}\n\t\tpart seatBelt {\n\t\t\tport seatBeltPort: SeatBeltPort;\n\t\t\tperform seatBelt.attachSeatBelt {\n\t\t\t\tin seatBelt = seatBeltPort.seatBelt;\n\t\t\t}\n\t\t}\n\t\tpart bodyAssembly {\n\t\t\tport bumperPort: ~BumperPort;\n\t\t\tperform bumper.attachBumper {\n\t\t\t\tin bumper = bumperPort.bumper;\n\t\t\t}\n\t\t}\n\t\tpart bumper {\n\t\t\tport bumperPort: BumperPort;\n\t\t\tperform bumper.attachBumper {\n\t\t\t\tin bumper = bumperPort.bumper;\n\t\t\t}\n\t\t}\n\t\tpart keylessEntryDevice {\n\t\t\tport keylessEntryDevice",
    "package 'Vehicle' {\n\tattribute def Velocity;\n\tattribute def Position;\n\tattribute def Acceleration;\n\tattribute def TimeStep;\n\tport def VelocityPort;\n\tport def PositionPort;\n\tport def AccelerationPort;\n\tport def TimeStepPort;\n\tpart context {\n\t\tpart user {\n\t\t\tport velocityPort: VelocityPort;\n\t\t\tport positionPort: PositionPort;\n\t\t\tport accelerationPort: AccelerationPort;\n\t\t\tport timeStepPort: TimeStepPort;\n\t\t\tperform calculateVehicleDynamic.calculateVelocity {\n\t\t\t\tin velocity = velocityPort.velocity;\n\t\t\t\tin position = positionPort.position;\n\t\t\t\tin acceleration = accelerationPort.acceleration;\n\t\t\t\tin timeStep = timeStepPort.timeStep;\n\t\t\t\tout velocity = calculateVehicleDynamic.velocity;\n\t\t\t}\n\t\t\tperform calculateVehicleDynamic.calculatePosition {\n\t\t\t\tin velocity = calculateVehicleDynamic.velocity;\n\t\t\t\tin position = positionPort.position;\n\t\t\t\tin acceleration = accelerationPort.acceleration;\n\t\t\t\tin timeStep = timeStepPort.timeStep;\n\t\t\t\tout position = calculateVehicleDynamic.position;\n\t\t\t}\n\t\t}\n\t\tinterface userTo",
    "package 'Safety Features' {\n\tpart context {\n\t\tpart seatBelt {\n\t\t\tattribute def isMandatory;\n\t\t\tattribute def isSafetyRelevant;\n\t\t\tpart context {\n\t\t\t\tpart driver {\n\t\t\t\t\tattribute def isMandatory;\n\t\t\t\t\tattribute def isSafetyRelevant;\n\t\t\t\t}\n\t\t\t\tpart passenger {\n\t\t\t\t\tattribute def isMandatory;\n\t\t\t\t\tattribute def isSafetyRelevant;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpart airBag {\n\t\t\tattribute def isMandatory;\n\t\t\tattribute def isSafetyRelevant;\n\t\t}\n\t\tpart antiLockBrakingSystem {\n\t\t\tattribute def isMandatory;\n\t\t\tattribute def isSafetyRelevant;\n\t\t}\n\t\tpart bumper {\n\t\t\tattribute def isMandatory;\n\t\t\tattribute def isSafetyRelevant;\n\t\t}\n\t\tpart keylessEntrySystem {\n\t\t\tattribute def isMandatory;\n\t\t\tattribute def isSafetyRelevant",
    "package 'Vehicle' {\n\tpart context {\n\t\tpart user {\n\t\t\tpart seatBelt {\n\t\t\t\tpart driver {\n\t\t\t\t\tpart airbag {\n\t\t\t\t\t\tpart keylessEntry {\n\t\t\t\t\t\t\tpart bumper {\n\t\t\t\t\t\t\t\tpart chassis {\n\t\t\t\t\t\t\t\t\tpart tire {\n\t\t\t\t\t\t\t\t\t\tpart antiLockBrakingSystem {\n\t\t\t\t\t\t\t\t\t\t\tpart safetyFeature {\n\t\t\t\t\t\t\t\t\t\t\t\tpart mandatory {\n\t\t\t\t\t\t\t\t\t\t\t\t\tpart required {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart lawOrIndustryStandard {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart nonMandatory {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart safetyComponent {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart safetyFeature {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart mandatory {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart required {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart lawOrIndustryStandard {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart nonMandatory {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart safetyComponent {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart safetyFeature {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart mandatory {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart required {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart lawOrIndustryStandard {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart nonMandatory {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart safetyComponent {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart safetyFeature {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart mandatory {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart required {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart lawOrIndustryStandard {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart nonMandatory {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart",
    "package 'RiskManagementSystem' {\n\tattribute def Probability;\n\tattribute def Severity;\n\tattribute def CausalRelationship;\n\tattribute def ImpactMechanism;\n\tattribute def RiskScenario;\n\tattribute def Failure;\n\tattribute def Situation;\n\tattribute def Cause;\n\tpart context {\n\t\tpart user {\n\t\t\tpart riskScenario {\n\t\t\t\tpart situation {\n\t\t\t\t\tpart cause {\n\t\t\t\t\t\tpart failure {\n\t\t\t\t\t\t\tpart impactMechanism {\n\t\t\t\t\t\t\t\tpart riskScenario {\n\t\t\t\t\t\t\t\t\tpart situation {\n\t\t\t\t\t\t\t\t\t\tpart cause {\n\t\t\t\t\t\t\t\t\t\t\tpart failure {\n\t\t\t\t\t\t\t\t\t\t\t\tpart impactMechanism {\n\t\t\t\t\t\t\t\t\t\t\t\t\tpart riskScenario {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart situation {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart cause {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart failure {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart impactMechanism {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart riskScenario {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart situation {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart cause {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart failure {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart impactMechanism {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart riskScenario {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart situation {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart cause {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart failure {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart impactMechanism {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart riskScenario {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart situation {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart cause {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart failure {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart impactMe",
    "package 'SystematicRiskMetadataModeling' {\n\tattribute def Scenario;\n\tattribute def Cause;\n\tattribute def Failure;\n\tattribute def Severity;\n\tattribute def Probability;\n\tattribute def CausalRelationship;\n\tattribute def RiskScenario;\n\tport def ScenarioPort {\n\t\tout scenario: Scenario;\n\t}\n\tport def CausePort {\n\t\tout cause: Cause;\n\t}\n\tport def FailurePort {\n\t\tout failure: Failure;\n\t}\n\tport def SeverityPort {\n\t\tout severity: Severity;\n\t}\n\tport def ProbabilityPort {\n\t\tout probability: Probability;\n\t}\n\tport def CausalRelationshipPort {\n\t\tout causalRelationship: CausalRelationship;\n\t}\n\tport def RiskScenarioPort {\n\t\tout riskScenario: RiskScenario;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport scenarioPort: ScenarioPort;\n\t\t\tperform identifyScenario.sendScenario {\n\t\t\t\tout scenario = scenarioPort.scenario;\n\t\t\t}\n\t\t}\n\t\tinterface userToSystem connect user.scenarioPort to system",
    "package 'Battery' {\n\tattribute def BatteryLevel;\n\tattribute def BatteryState;\n\tport def BatteryLevelPort {\n\t\tout batteryLevel: BatteryLevel;\n\t}\n\tport def BatteryStatePort {\n\t\tout batteryState: BatteryState;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport batteryLevelPort: BatteryLevelPort;\n\t\t\tperform monitorBatteryLevel.sendBatteryLevel {\n\t\t\t\tout batteryLevel = batteryLevelPort.batteryLevel;\n\t\t\t}\n\t\t}\n\t\tinterface userToBattery connect user.batteryLevelPort to battery.batteryLevelPort {\n\t\t\tref flow references monitorBatteryLevel.batteryLevelFlow\n\t\t\t\tfrom source.batteryLevel to target.batteryLevel; \n\t\t}\n\t\tpart battery {\n\t\t\tport batteryLevelPort: ~BatteryLevelPort;\n\t\t\tperform monitorBatteryLevel.produceBatteryState {\n\t\t\t\tin",
    "package 'System' {\n\tpart context {\n\t\tpart user {\n\t\t\tport userPort: ~UserPort;\n\t\t\tperform user.receiveUserInput {\n\t\t\t\tin userInput = userPort.userInput;\n\t\t\t}\n\t\t}\n\t\tpart system {\n\t\t\tport systemPort: ~SystemPort;\n\t\t\tperform system.receiveSystemInput {\n\t\t\t\tin systemInput = systemPort.systemInput;\n\t\t\t}\n\t\t}\n\t\tpart userToSystem connect user.userPort to system.systemPort {\n\t\t\tref flow references user.userToSystemFlow\n\t\t\t\tfrom source.userInput to target.systemInput;\n\t\t}\n\t\tpart systemToUser connect system.systemPort to user.userPort {\n\t\t\tref flow references system.systemToUserFlow\n\t\t\t\tfrom source.systemInput to target.userInput;\n\t\t}\n\t}\n\taction user {\n\t\taction receiveUserInput { in userInput: UserInput; }\n\t}\n\taction system {\n\t\taction receiveSystemInput { in systemInput: SystemInput; }\n\t}\n}\n\nInput Requirement:\nThe system must possess a clear capability for structural decomposition, namely, the ability",
    "package 'Automotive System' {\n\tpart context {\n\t\tpart root {\n\t\t\tpart safety {\n\t\t\t\tpart mandatory {\n\t\t\t\t\tpart seatBelt {\n\t\t\t\t\t\tpart safety {\n\t\t\t\t\t\t\tpart mandatory {\n\t\t\t\t\t\t\t\tpart driverSeat {\n\t\t\t\t\t\t\t\t\tpart safety {\n\t\t\t\t\t\t\t\t\t\tpart mandatory {\n\t\t\t\t\t\t\t\t\t\t\tpart driver {\n\t\t\t\t\t\t\t\t\t\t\t\tpart safety {\n\t\t\t\t\t\t\t\t\t\t\t\t\tpart mandatory {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart driverSeatBelt {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart safety {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart mandatory {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart driverSeatBelt {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart safety {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart mandatory {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart driverSeatBelt {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart safety {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart mandatory {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart driverSeatBelt {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart safety {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t",
    "package 'Automobile' {\n\tpart context {\n\t\tpart automobile {\n\t\t\tpart engine {\n\t\t\t\tpart cylinder {\n\t\t\t\t\tpart piston {\n\t\t\t\t\t\tpart crankshaft {\n\t\t\t\t\t\t\tpart camshaft {\n\t\t\t\t\t\t\t\tpart valve {\n\t\t\t\t\t\t\t\t\tpart valve_body {\n\t\t\t\t\t\t\t\t\t\tpart valve_stem {\n\t\t\t\t\t\t\t\t\t\t\tpart valve_cover {\n\t\t\t\t\t\t\t\t\t\t\t\tpart valve_spring {\n\t\t\t\t\t\t\t\t\t\t\t\t\tpart valve_spring_body {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart valve_spring_spring {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart valve_spring_spring_body {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart valve_spring_spring_spring {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart valve_spring_spring_spring_body {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart valve_spring_spring_spring_spring {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart valve_spring_spring_spring_spring_body {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart valve_spring_spring_spring_spring_spring {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart valve_spring_spring_spring_spring_spring_body {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart valve_spring_spring_spring_spring_spring_spring {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart valve_spring_spring_spring_spring_spring_spring_body {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart",
    "package 'Automobile' {\n\tpart context {\n\t\tpart user {\n\t\t\tpart automobile {\n\t\t\t\tpart car {\n\t\t\t\t\tpart automobile {\n\t\t\t\t\t\tpart car {\n\t\t\t\t\t\t\tpart automobile {\n\t\t\t\t\t\t\t\tpart car {\n\t\t\t\t\t\t\t\t\tpart automobile {\n\t\t\t\t\t\t\t\t\t\tpart car {\n\t\t\t\t\t\t\t\t\t\t\tpart automobile {\n\t\t\t\t\t\t\t\t\t\t\t\tpart car {\n\t\t\t\t\t\t\t\t\t\t\t\t\tpart automobile {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart car {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart automobile {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart car {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart automobile {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart car {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart automobile {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart car {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart automobile {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart car {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart automobile {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart car {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart automobile {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart car {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart automobile {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart car {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart automobile {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart car {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart automobile {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart car {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart automobile {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart car {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart automobile {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t",
    "package 'Automobile' {\n\tpart context {\n\t\tpart user {\n\t\t\tpart car {\n\t\t\t\tpart torqueValue {\n\t\t\t\t\tpart user {\n\t\t\t\t\t\tpart torque {\n\t\t\t\t\t\t\tpart torqueValue {\n\t\t\t\t\t\t\t\tpart user {\n\t\t\t\t\t\t\t\t\tpart torqueValue {\n\t\t\t\t\t\t\t\t\t\tpart user {\n\t\t\t\t\t\t\t\t\t\t\tpart torque {\n\t\t\t\t\t\t\t\t\t\t\t\tpart torqueValue {\n\t\t\t\t\t\t\t\t\t\t\t\t\tpart user {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart torque {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart torqueValue {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart user {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart torque {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart torqueValue {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart user {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart torque {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart torqueValue {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart user {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart torque {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart torqueValue {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart user {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart torque {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart torqueValue {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart user {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart torque {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart torqueValue {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart user {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart torque {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart torqueValue {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart user {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart torque {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart torqueValue {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart user {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart torque {",
    "package 'Vehicle' {\n\tpart context {\n\t\tpart user {\n\t\t\tpart vehicle {\n\t\t\t\tpart engine {\n\t\t\t\t\tpart cylinder {\n\t\t\t\t\t\tpart cylinder1;\n\t\t\t\t\t\tpart cylinder2;\n\t\t\t\t\t\tpart cylinder3;\n\t\t\t\t\t\tpart cylinder4;\n\t\t\t\t\t\tpart cylinder5;\n\t\t\t\t\t\tpart cylinder6;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nInput Requirement:\nThe system involves the definition of vehicles, including basic vehicles, engines, and the configuration of engine cylinders. In standard vehicles, each engine contains 4 to 6 cylinders. For small vehicles, the engine is required to contain only 4 cylinders; for large vehicles, the engine needs to be equipped with 6 cylinders. The system should automatically select and configure the appropriate number of engine cylinders according to the vehicle size to meet the practical application requirements of different types of vehicles.\n\nOutput Model:\npackage 'Vehicle' {\n\tpart context {\n\t\tpart user {\n\t\t\tpart vehicle {\n\t\t\t\tpart engine {\n\t\t\t\t\tpart cylinder {\n\t\t\t\t\t\tpart cylinder1;\n\t\t\t\t\t\tpart cylinder2;\n\t\t\t\t\t\tpart",
    "package 'FuelManagementSystem' {\n\tpart context {\n\t\tpart user {\n\t\t\tport fuelFlowPort: FuelFlowPort;\n\t\t\tperform fuelFlow.sendFuelFlow {\n\t\t\t\tout fuelFlow = fuelFlowPort.fuelFlow;\n\t\t\t}\n\t\t}\n\t\tinterface userToFuelManagementSystem connect user.fuelFlowPort to fuelManagementSystem.fuelFlowPort {\n\t\t\tref flow references fuelFlow.fuelFlowFlow\n\t\t\t\tfrom source.fuelFlow to target.fuelFlow; \n\t\t}\n\t\tpart fuelManagementSystem {\n\t\t\tport fuelFlowPort: ~FuelFlowPort;\n\t\t\tperform fuelFlow.manageFuelFlow {\n\t\t\t\tin fuelFlow = fuelFlowPort.fuelFlow;\n\t\t\t}\n\t\t}\n\t\tpart fuelTank {\n\t\t\tport fuelFlowPort: ~FuelFlowPort;\n\t\t\tperform fuelFlow.supplyFuel {\n\t\t\t\tin fuelFlow = fuelFlowPort.fuelFlow;\n\t\t\t}\n\t\t}\n\t\tpart engine {\n\t\t\tport fuelFlowPort: ~FuelFlowPort;\n\t\t\tperform fuelFlow.returnFuel {\n\t\t\t\tin fuelFlow = fuelFlowPort.fuelFlow;\n\t\t\t}\n\t\t}\n\t}\n\taction fuelFlow {",
    "package 'Vehicle' {\n\tattribute def Mass;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tattribute mass: Mass;\n\t\t\tpart frontAxle {\n\t\t\t\tpart axle {\n\t\t\t\t\tpart wheel {\n\t\t\t\t\t\tpart wheel {\n\t\t\t\t\t\t\tpart wheel {\n\t\t\t\t\t\t\t\tpart wheel {\n\t\t\t\t\t\t\t\t\tpart wheel {\n\t\t\t\t\t\t\t\t\t\tpart wheel {\n\t\t\t\t\t\t\t\t\t\t\tpart wheel {\n\t\t\t\t\t\t\t\t\t\t\t\tpart wheel {\n\t\t\t\t\t\t\t\t\t\t\t\t\tpart wheel {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart wheel {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart wheel {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart wheel {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart wheel {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart wheel {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart wheel {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart wheel {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart wheel {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart wheel {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart wheel {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart wheel {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart wheel {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart wheel {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart wheel {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart wheel {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart wheel {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart wheel {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart wheel {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart wheel {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart wheel {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart wheel {"
]