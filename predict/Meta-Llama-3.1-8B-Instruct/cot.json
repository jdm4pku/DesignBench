[
    "// Define the Vehicle class\nclass Vehicle {\n  // Define the attributes\n  mass: Float64;\n  status: VehicleStatus;\n  engine: Engine;\n  driver: Driver;\n}\n\n// Define the VehicleStatus class\nclass VehicleStatus {\n  // Define the attributes\n  gearSetting: GearSetting;\n  acceleratorPedalPosition: AcceleratorPedalPosition;\n}\n\n// Define the GearSetting enumeration\nenum GearSetting {\n  PARK,\n  REVERSE,\n  NEUTRAL,\n  FORWARD\n}\n\n// Define the AcceleratorPedalPosition enumeration\nenum AcceleratorPedalPosition {\n  RELEASED,\n  PARTIALLY_RELEASED,\n  FULLY_RELEASED\n}\n\n// Define the Engine class\nclass Engine {\n  // Define the attributes\n  power: Float64;\n  torque: Float64;\n}\n\n// Define the Driver class\nclass Driver {\n  // Define the attributes\n  name: String;\n  experience: Float64;\n}\n```\n```sysml\n// Define the Vehicle class\nclass Vehicle {\n  // Define the attributes\n  mass: Float64;\n  status: VehicleStatus;\n  engine: Engine;\n  driver: Driver;\n}\n\n// Define the VehicleStatus class\nclass VehicleStatus {\n  // Define the",
    "package VehicleSystem\n\n  entity Vehicle {\n    attribute name: String\n    attribute type: String { \"manuallyOperated\", \"powered\", \"manuallyOperatedPowered\" }\n    attribute driver: Personnel\n    attribute powerDevice: Engine\n  }\n\n  entity Personnel {\n    attribute name: String\n    attribute role: String { \"driver\" }\n  }\n\n  entity Engine {\n    attribute name: String\n    attribute type: String { \"gasoline\", \"diesel\", \"electric\" }\n  }\n\n  relationship Vehicle_has_Personnel {\n    source: Vehicle\n    target: Personnel\n    description: \"The driver of the vehicle\"\n  }\n\n  relationship Vehicle_has_Engine {\n    source: Vehicle\n    target: Engine\n    description: \"The power device of the vehicle\"\n  }\n```\n```sysml\npackage VehicleSystem\n\n  entity Vehicle {\n    attribute name: String\n    attribute type: String { \"manuallyOperated\", \"powered\", \"manuallyOperatedPowered\" }\n    attribute driver: Personnel\n    attribute powerDevice: Engine\n  }\n\n  entity Personnel {\n    attribute name: String\n    attribute role: String { \"driver\" }\n  }\n\n  entity Engine {\n    attribute name",
    "package VehicleStructure\n\nimport { VehicleComponent, Engine, Transmission, Wheel } from './VehicleComponent';\n\nclass Vehicle {\n  quantity: 1..1;\n  components: [VehicleComponent];\n}\n\nclass VehicleComponent {\n  quantity: 1..1;\n  type: VehicleComponentType;\n}\n\nenum VehicleComponentType {\n  Engine,\n  Transmission,\n  Wheel\n}\n\nclass Engine {\n  quantity: 1..1;\n}\n\nclass Transmission {\n  quantity: 1..1;\n}\n\nclass Wheel {\n  quantity: 4;\n}\n```\n\nNote: The code is written in SysML v2 textual grammar. The code defines a package named `VehicleStructure` that imports the `VehicleComponent` class and its subclasses. The code then defines the `Vehicle` class, which has a `quantity` property set to 1..1 and a `components` property that is an array of `VehicleComponent` objects. The `VehicleComponent` class has a `quantity` property set to 1..1 and a `type` property that is an enumeration of `VehicleComponentType`. The `VehicleComponentType` enumeration has three values: `Engine`, `Transmission`, and `Wheel`. The code also defines the `Engine`, `Transmission",
    "package VehicleSystem\n\nimport sysml::core::model::Element\nimport sysml::core::model::Block\nimport sysml::core::model::Package\n\nclass Vehicle {\n  type: VehicleType\n  engine: Engine\n}\n\nclass VehicleType {\n  type: VehicleTypeKind\n  engine: EngineType\n}\n\nenum VehicleTypeKind {\n  Small\n  Large\n}\n\nclass Engine {\n  type: EngineType\n  cylinders: Integer\n}\n\nclass EngineType {\n  type: EngineTypeKind\n  cylinders: Integer\n}\n\nenum EngineTypeKind {\n  Small\n  Large\n}\n\nclass SmallEngine {\n  type: EngineTypeKind\n  cylinders: Integer\n  value: 4\n}\n\nclass LargeEngine {\n  type: EngineTypeKind\n  cylinders: Integer\n  value: 6\n}\n```\n```sysml\npackage VehicleSystem\n\nimport sysml::core::model::Element\nimport sysml::core::model::Block\nimport sysml::core::model::Package\n\nclass Vehicle {\n  type: VehicleType\n  engine: Engine\n}\n\nclass VehicleType {\n  type: VehicleTypeKind\n  engine: EngineType\n}\n\nenum VehicleTypeKind {\n  Small\n ",
    "package traffic_signal_system\n\nimport {sysml} from \"https://sysml-lang.org/v2\";\n\n// Define the traffic signal component\ncomponent TrafficSignal {\n  // Define the color state of the traffic signal\n  enum Color {\n    Green,\n    Yellow,\n    Red\n  }\n\n  // Define the current color state of the traffic signal\n  property CurrentColor: Color = Green;\n\n  // Define the traffic signal component that is in the green state\n  component GreenTrafficSignal {\n    // Define the current color state of the green traffic signal\n    property CurrentColor: Color = Green;\n  }\n}\n\n// Define the traffic signal system\nsystem TrafficSignalSystem {\n  // Define the traffic signal component\n  component TrafficSignal;\n\n  // Define the specific traffic signal component that is in the green state\n  component GreenTrafficSignal;\n}\n```\n\nPlease provide the SysML v2 textual code for the given input requirement. \n\n```sysml\npackage traffic_signal_system\n\nimport {sysml} from \"https://sysml-lang.org/v2\";\n\n// Define the traffic signal component\ncomponent TrafficSignal {\n  // Define the color state of the traffic signal\n  enum Color {\n    Green,\n    Yellow,\n    Red\n  }\n\n",
    "// Define the classification system\nclassificationSystem: ClassificationSystem {\n  // Define the classification levels\n  levels: [\n    { name: \"Unclassified\", code: \"uncl\", color: \"green\" },\n    { name: \"Confidential\", code: \"conf\", color: \"yellow\" },\n    { name: \"Secret\", code: \"secr\", color: \"red\" }\n  ]\n  \n  // Define the grade levels\n  grades: [\n    { name: \"A\", points: 4.0 },\n    { name: \"B\", points: 3.0 },\n    { name: \"C\", points: 2.0 },\n    { name: \"D\", points: 1.0 },\n    { name: \"F\", points: 0.0 }\n  ]\n}\n```\n\n```sysml\n// Define the classification system\nclassificationSystem: ClassificationSystem {\n  // Define the classification levels\n  levels: [\n    { name: \"Unclassified\", code: \"uncl\", color: \"green\" },\n    { name: \"Confidential\", code: \"conf\", color: \"yellow\" },\n    { name: \"Secret\",",
    "package VehicleSystem\n\nimport sysml::core::model::Element\nimport sysml::core::model::Block\nimport sysml::core::model::Port\nimport sysml::core::model::Property\nimport sysml::core::model::ValueProperty\nimport sysml::core::model::String\n\nclass Vehicle {\n  type: VehicleType\n  engine: Engine\n}\n\nclass Engine {\n  type: EngineType\n  cylinders: [Cylinder]\n}\n\nclass Cylinder {\n  type: CylinderType\n  engine: Engine\n}\n\nclass VehicleType {\n  type: String\n  description: String\n  engineType: EngineType\n  numCylinders: Integer\n}\n\nclass EngineType {\n  type: String\n  description: String\n  numCylinders: Integer\n}\n\nclass CylinderType {\n  type: String\n  description: String\n}\n\nenum VehicleType {\n  Small\n  Large\n}\n\nenum EngineType {\n  SmallEngine\n  LargeEngine\n}\n\nenum CylinderType {\n  Standard\n}\n\nvalue VehicleType Small = \"Small vehicle\"\nvalue VehicleType Large = \"Large vehicle\"\nvalue EngineType SmallEngine = \"Small engine\"\nvalue EngineType LargeEngine = \"Large engine\"\nvalue",
    "// Define the Vehicle class\nclass Vehicle {\n  // Define the attributes of the Vehicle class\n  attribute name: String\n  attribute driver: Driver\n  attribute fuelTank: FuelTank\n  attribute qualityAttributes: QualityAttributes\n}\n\n// Define the Driver class\nclass Driver {\n  // Define the attributes of the Driver class\n  attribute name: String\n  attribute age: Integer\n}\n\n// Define the FuelTank class\nclass FuelTank {\n  // Define the attributes of the FuelTank class\n  attribute fuelType: FuelType\n  attribute capacity: Integer\n}\n\n// Define the FuelType class\nclass FuelType {\n  // Define the attributes of the FuelType class\n  attribute name: String\n  attribute description: String\n}\n\n// Define the QualityAttributes class\nclass QualityAttributes {\n  // Define the attributes of the QualityAttributes class\n  attribute reliability: Integer\n  attribute performance: Integer\n}\n\n// Define the VehicleModel class\nclass VehicleModel {\n  // Define the attributes of the VehicleModel class\n  attribute name: String\n  attribute description: String\n  attribute fuel: Fuel\n  attribute personnel: Personnel\n}\n\n// Define the Fuel class\nclass Fuel {\n  //",
    "package automobile_wheel_assembly\n\nimport sysml::v2::core::model::Element\nimport sysml::v2::core::model::Block\nimport sysml::v2::core::model::Port\nimport sysml::v2::core::model::Interface\nimport sysml::v2::core::model::ValueProperty\nimport sysml::v2::core::model::String\n\nclass WheelBearingUnit extends Block {\n  port: WheelBearingUnitPort\n}\n\nclass WheelBearingUnitPort extends Port {\n  interface: WheelBearingUnitInterface\n}\n\nclass WheelBearingUnitInterface extends Interface {\n  valueProperty: WheelBearingUnitValueProperty\n}\n\nclass WheelBearingUnitValueProperty extends ValueProperty {\n  type: String\n  value: \"Wheel Bearing Unit\"\n}\n\nclass Tire extends Block {\n  port: TirePort\n}\n\nclass TirePort extends Port {\n  interface: TireInterface\n}\n\nclass TireInterface extends Interface {\n  valueProperty: TireValueProperty\n}\n\nclass TireValueProperty extends ValueProperty {\n  type: String\n  value: \"Tire\"\n}\n\nclass Bead extends Block {\n  port: BeadPort\n}\n\nclass BeadPort extends Port {\n ",
    "package system\n\n  package fuel_management_system\n\n    class FuelManagementSystem\n      property fuel_tank : FuelTank\n      property engine : Engine\n      end\n\n    class FuelTank\n      property fuel_level : Float\n      property temperature : Float\n      property fuel_in : Float\n      property fuel_out : Float\n      end\n\n    class Engine\n      property fuel_consumption : Float\n      property temperature : Float\n      end\n\n    interface FuelManagementInterface\n      property fuel_in : Float\n      property fuel_out : Float\n      property temperature : Float\n      end\n\n    interface EngineInterface\n      property fuel_consumption : Float\n      property temperature : Float\n      end\n\n    relationship FuelManagementSystem has FuelTank\n    relationship FuelManagementSystem has Engine\n    relationship FuelTank has FuelManagementInterface\n    relationship Engine has EngineInterface\n    end\n```\n```sysml\npackage system\n\n  package fuel_management_system\n\n    class FuelManagementSystem\n      property fuel_tank : FuelTank\n      property engine : Engine\n      end\n\n    class FuelTank\n      property fuel_level : Float\n      end\n\n    class Engine\n      property fuel_consumption : Float\n      end\n\n    interface FuelManagementInterface\n",
    "package VehicleConfigurations\n\nimport sysml::core::Model\nimport sysml::core::Element\nimport sysml::core::Property\nimport sysml::core::Relationship\nimport sysml::core::Block\nimport sysml::core::Port\nimport sysml::core::ValueProperty\nimport sysml::core::StringProperty\nimport sysml::core::EnumerationProperty\nimport sysml::core::BooleanProperty\nimport sysml::core::IntegerProperty\nimport sysml::core::FloatProperty\nimport sysml::core::Package\n\nclass Vehicle extends Block {\n  property mass: FloatProperty = 1750.0\n  property axles: OrderedProperty(Axle) = [frontAxle, rearAxle]\n}\n\nclass Axle extends Block {\n  property mass: FloatProperty\n  property tires: OrderedProperty(Tire) = [tire1, tire2]\n}\n\nclass Tire extends Block {\n  property mass: FloatProperty\n}\n\nclass VehicleConfiguration extends Block {\n  property name: StringProperty\n  property mass: FloatProperty\n  property axles: OrderedProperty(Axle) = [frontAxle, rearAxle]\n}\n\nclass DedicatedFrontAxle extends Axle {\n",
    "package CouplingSystem\n\nimport sysml::core::ModelElement\nimport sysml::core::Package\nimport sysml::core::Block\nimport sysml::core::Port\nimport sysml::core::Interface\nimport sysml::core::Property\nimport sysml::core::Operation\nimport sysml::core::Parameter\nimport sysml::core::ValueProperty\nimport sysml::core::String\n\nclass Vehicle extends Block {\n  property: hasCouplingBall = false\n  property: couplingMechanism = \"tow hitch\"\n  port: couplingPort = Port {\n    interface: CouplingInterface\n  }\n}\n\nclass Trailer extends Block {\n  property: hasCouplingBall = false\n  property: couplingMechanism = \"ball connector\"\n  port: couplingPort = Port {\n    interface: CouplingInterface\n  }\n}\n\nclass CouplingInterface extends Interface {\n  property: couplingType = \"ball connector\"\n  operation: connect = Operation {\n    parameter: vehicle = Parameter {\n      type: Vehicle\n    }\n    parameter: trailer = Parameter {\n      type: Trailer\n    }\n  }\n}\n\nclass CouplingMechanism extends Block {\n  port: couplingPort = Port {\n    interface: Cou",
    "package VehiclePowerTransmissionSystem\n\nimport sysml::v2::core::Core\nimport sysml::v2::blocks::Blocks\nimport sysml::v2::ports::Ports\nimport sysml::v2::flows::Flows\n\nblock Engine {\n  description: \"The engine receives control signals via a fuel command port and is coupled to the transmission through power and clutch ports.\"\n  port FuelCommandPort: Port {\n    description: \"Fuel command port\"\n    flow: Flow {\n      description: \"Fuel command flow\"\n    }\n  }\n  port PowerPort: Port {\n    description: \"Power port\"\n    flow: Flow {\n      description: \"Power flow\"\n    }\n  }\n  port ClutchPort: Port {\n    description: \"Clutch port\"\n    flow: Flow {\n      description: \"Clutch flow\"\n    }\n  }\n}\n\nblock Transmission {\n  description: \"The transmission (gearbox) is coupled to the engine through power and clutch ports.\"\n  port PowerPort: Port {\n    description: \"Power port\"\n    flow: Flow {\n      description: \"Power flow\"\n    }\n  }\n  port ClutchPort: Port {\n    description: \"Clutch port\"\n    flow: Flow",
    "package system\n\nimport sysml::v2::core::model::Element\nimport sysml::v2::core::model::Package\nimport sysml::v2::core::model::Block\nimport sysml::v2::core::model::Port\nimport sysml::v2::core::model::Interface\nimport sysml::v2::core::model::Component\nimport sysml::v2::core::model::Module\n\npackage system {\n  package a11 {\n    component c1 {\n      port pb: Port\n    }\n    component c2 {\n      port pc: Port\n    }\n    component c3 {\n      port pd: Port\n    }\n    component c4 {\n      port pe: Port\n    }\n  }\n  package b11 {\n    block b11 {\n      component c1\n      component c2\n      interface pe: Interface {\n        port pb: Port\n      }\n    }\n  }\n  package b12 {\n    block b12 {\n      component c3\n      component c4\n      interface pf: Interface {\n        port pd: Port\n      }\n    }\n  }\n  package b21 {\n    module b21 {\n      reuse b11\n      reuse b12",
    "package automotive_powertrain\n\nimport sysml::core::model::Element\nimport sysml::core::model::Block\nimport sysml::core::model::Port\nimport sysml::core::model::Property\nimport sysml::core::model::ValueProperty\nimport sysml::core::model::StringProperty\nimport sysml::core::model::BooleanProperty\nimport sysml::core::model::Enumeration\nimport sysml::core::model::Value\n\npackage automotive_powertrain {\n  class Engine {\n    property FuelCommand: ValueProperty {\n      type: sysml::core::model::String\n      value: \"FuelCommand\"\n    }\n    property EngineStarted: BooleanProperty {\n      value: false\n    }\n    property EngineTorque: ValueProperty {\n      type: sysml::core::model::Float\n      value: 0.0\n    }\n  }\n\n  class Transmission {\n    property InputTorque: ValueProperty {\n      type: sysml::core::model::Float\n      value: 0.0\n    }\n    property OutputTorque: ValueProperty {\n      type: sysml::code::model::Float\n      value: 0.0\n    }\n ",
    "// Define the system\nsystem PowertrainControlSystem {\n  // Define the system's purpose\n  purpose: \"Implement the control logic of an automotive powertrain\"\n  \n  // Define the system's functions\n  function StartEngine {\n    // Define the function's purpose\n    purpose: \"Start the engine\"\n    \n    // Define the function's inputs\n    input: FuelControlCommand\n    \n    // Define the function's outputs\n    output: EngineStarted\n  }\n  \n  function GenerateTorque {\n    // Define the function's purpose\n    purpose: \"Generate torque according to the predetermined order\"\n    \n    // Define the function's inputs\n    input: EngineStarted\n    \n    // Define the function's outputs\n    output: TorqueGenerated\n  }\n  \n  function AmplifyTorque {\n    // Define the function's purpose\n    purpose: \"Amplify the generated torque\"\n    \n    // Define the function's inputs\n    input: TorqueGenerated\n    \n    // Define the function's outputs\n    output: AmplifiedTorque\n  }\n  \n  function TransmitTorque {\n    // Define the function's purpose\n    purpose: \"Transmit the amplified torque\"\n    \n    // Define the function's inputs\n    input",
    "// Define the system\nsystem VehiclePowertrainSystem {\n  // Define the system's purpose\n  purpose: \"Integrated management of the vehicle powertrain system\"\n  \n  // Define the system's behavior\n  behavior: [\n    // Define the system's behavior when the engine start signal is activated\n    when EngineStartSignal == true {\n      // Generate the corresponding engine output torque based on the fuel command\n      engineOutputTorque = FuelCommand * EngineEfficiency\n    },\n    // Define the system's behavior when the engine shutdown signal is triggered\n    when EngineShutdownSignal == true {\n      // Terminate the relevant power output process\n      engineOutputTorque = 0\n    }\n  ]\n  \n  // Define the system's components\n  components: [\n    // Define the engine component\n    Engine {\n      // Define the engine's properties\n      properties: [\n        // Define the engine's efficiency\n        EngineEfficiency: 0.8\n      ]\n    },\n    // Define the transmission component\n    Transmission {\n      // Define the transmission's properties\n      properties: [\n        // Define the transmission's amplification factor\n        AmplificationFactor: 2\n      ]\n    },\n    // Define the wheel component\n",
    "package VehicleTrailerPowerConnection\n\nimport sysml::v2::core::Core\nimport sysml::v2::modeling::Modeling\n\nclass Vehicle {\n  property HitchBall: HitchBall\n  property VehicleFrame: VehicleFrame\n  property PowerConnection: PowerConnection\n}\n\nclass Trailer {\n  property TrailerCoupler: TrailerCoupler\n  property TrailerFrame: TrailerFrame\n  property PowerConnection: PowerConnection\n}\n\nclass HitchBall {\n  property HitchBallType: HitchBallType\n  property HitchBallSize: HitchBallSize\n}\n\nclass TrailerCoupler {\n  property CouplerType: CouplerType\n  property CouplerSize: CouplerSize\n}\n\nclass PowerConnection {\n  property ConnectionType: ConnectionType\n  property ConnectionStatus: ConnectionStatus\n}\n\nenum HitchBallType {\n  BallType1\n  BallType2\n}\n\nenum HitchBallSize {\n  BallSize1\n  BallSize2\n}\n\nenum CouplerType {\n  CouplerType1\n  CouplerType2\n}\n\nenum CouplerSize {\n  CouplerSize1\n  CouplerSize2\n}\n\nenum ConnectionType {\n  ConnectionType1\n  ConnectionType2\n}\n\nenum ConnectionStatus {\n  Connected\n",
    "package VehicleTrailerSystem\n\nblock VehicleTrailerSystem\n  description: \"System for managing connection status between vehicle and trailer\"\n  context: \"Vehicle and trailer connection management\"\n  scope: \"Vehicle and trailer\"\n  boundary: \"Vehicle and trailer\"\n  part: \"Vehicle\"\n  part: \"Trailer\"\n  relation: \"Vehicle connects to Trailer\"\n  relation: \"Trailer connects to Vehicle\"\n  constraint: \"Vehicle and Trailer must be connected or disconnected\"\n  constraint: \"Vehicle and Trailer must be in a safe state\"\n  requirement: \"Users can conveniently connect or disconnect the trailer\"\n  requirement: \"Trailer can be safely and reliably coupled to the vehicle\"\n  requirement: \"Trailer can be smoothly detached from the vehicle\"\n  requirement: \"Enhance convenience and safety of vehicle-trailer combinations\"\nend block\n\nblock Vehicle\n  description: \"Vehicle with chassis and tow ball\"\n  context: \"Vehicle connection management\"\n  scope: \"Vehicle\"\n  boundary: \"Vehicle\"\n  part: \"Chassis\"\n  part: \"Tow Ball\"\n  relation: \"Vehicle connects to Trailer\"\n  constraint: \"Vehicle must be in a safe state\"\n  requirement: \"Vehicle must be able to",
    "package VehicleTrailerSystem\n\nblock Vehicle\n  property towBallDevice : Device\n  property chassis : Chassis\n  property hitchingMechanism : Mechanism\n\nblock Trailer\n  property couplerMechanism : Mechanism\n  property trailerChassis : Chassis\n\nblock CouplerMechanism\n  property latch : Latch\n  property disengageMechanism : Mechanism\n\nblock HitchingMechanism\n  property latch : Latch\n  end\n\nblock Chassis\n  property wheels : Wheel\n  end\n\nblock Device\n  property ball : Ball\n  end\n\nblock Mechanism\n  property engage : Engage\n  property disengage : Disengage\n  end\n\nblock Latch\n  property engage : Engage\n  property disengage : Disengage\n  end\n\nblock Engage\n  property action : Action\n  end\n\nblock Disengage\n  property action : Action\n  end\n\nblock Action\n  property execute : Execute\n  end\n\nblock Execute\n  property execute : Execute\n  end\n\nblock Ball\n  property diameter : Diameter\n  end\n\nblock Diameter\n  property value : Value\n  end\n\nblock Value\n  property value : Value\n  end\n``",
    "package Vehicle.FuelSystem\n\nimport sysml::core::model::Element\nimport sysml::core::model::Block\nimport sysml::core::model::Port\nimport sysml::core::model::Interface\nimport sysml::core::model::Parameter\n\nclass FuelTank extends Block {\n  port FuelSupplyPort: Port {\n    direction: Input\n    flow: Fuel\n  }\n  port FuelReturnPort: Port {\n    direction: Output\n    flow: Fuel\n  }\n}\n\nclass Engine extends Block {\n  port FuelInletPort: Port {\n    direction: Input\n    flow: Fuel\n  }\n  port FuelOutletPort: Port {\n    direction: Output\n    flow: Fuel\n  }\n}\n\nclass FuelSystem extends Block {\n  port FuelSupplyInterface: Interface {\n    direction: Input\n    flow: Fuel\n  }\n  port FuelReturnInterface: Interface {\n    direction: Output\n    flow: Fuel\n  }\n  parameter Temperature: Parameter {\n    type: Temperature\n    value: 20°C\n  }\n}\n\nclass FuelSupplyProcess extends Block {\n  port FuelSupplyPort: Port {\n    direction: Input\n    flow: Fuel\n  }\n  port FuelReturnPort: Port",
    "package VehicleFuelDeliverySystem\n\nimport sysml::core::model::Element\nimport sysml::core::model::Block\nimport sysml::core::model::Port\nimport sysml::core::model::Interface\nimport sysml::core::model::Package\n\nclass StorageTank extends Block {\n  name: \"Storage Tank\"\n  description: \"Initial fuel reservoir\"\n  stereotype: \"FuelReservoir\"\n}\n\nclass FuelPump extends Block {\n  name: \"Fuel Pump\"\n  description: \"Delivers fuel to vehicles\"\n  stereotype: \"FuelDeliveryDevice\"\n}\n\nclass VehicleFuelTank extends Block {\n  name: \"Vehicle Fuel Tank\"\n  description: \"Receives and stores delivered fuel\"\n  stereotype: \"FuelStorageContainer\"\n}\n\nclass FuelDeliverySystem extends Block {\n  name: \"Fuel Delivery System\"\n  description: \"End-to-end fuel management system\"\n  stereotype: \"FuelManagementSystem\"\n  composition: [\n    StorageTank,\n    FuelPump,\n    VehicleFuelTank\n  ]\n}\n\ninterface FuelDeliveryInterface extends Interface {\n  name: \"Fuel Delivery Interface\"\n  description: \"Interface for fuel delivery\"\n  stereotype: \"FuelDeliveryInterface\"\n  port: [\n    Port {\n      name",
    "package automobile_assembly_process\n\nimport sysml::v2::core::model::Element\nimport sysml::v2::core::model::Block\nimport sysml::v2::core::model::Port\nimport sysml::v2::core::model::Interface\nimport sysml::v2::core::model::Property\nimport sysml::v2::core::model::ValueProperty\nimport sysml::v2::core::model::StringProperty\nimport sysml::v2::core::model::BooleanProperty\nimport sysml::v2::core::model::EnumerationProperty\nimport sysml::v2::core::model::Operation\nimport sysml::v2::core::model::Behavior\nimport sysml::v2::core::model::Activity\nimport sysml::v2::core::model::UseCase\nimport sysml::v2::core::model::Package\n\nclass VehicleAssembly {\n  property: VehicleAssemblyType = \"vehicle_assembly_without_gearbox_and_engine\"\n  port: VehicleAssemblyPort {\n    input: VehicleAssemblyInput {\n      property: VehicleAssemblyInputType = \"vehicle_assembly_without_gearbox_and_engine\"\n    }\n   ",
    "package VehicleA\n\nimport sysml::core::model::Element\nimport sysml::core::model::Block\nimport sysml::core::model::Package\nimport sysml::core::model::Port\nimport sysml::core::model::Property\nimport sysml::core::model::Operation\nimport sysml::core::model::Parameter\nimport sysml::core::model::ValueProperty\nimport sysml::core::model::StringProperty\nimport sysml::core::model::BooleanProperty\nimport sysml::core::model::Enumeration\nimport sysml::core::model::Constraint\n\nclass VehicleA extends Block {\n  state: State = Off\n  property: Temperature = 0°C\n  property: HealthStatus = Normal\n  property: OperatingState = Off\n  property: BrakePedalPressed = false\n  property: StartSignalReceived = false\n  property: VehicleOnSignalReceived = false\n  property: RestoreToNormalSignalReceived = false\n  property: OverTemperatureSignalSent = false\n  property: DegradedMode = false\n  property: ParkingBrakeApplied = false\n  property: MainControlState = Normal\n  property: TemperatureThreshold = ",
    "package VehicleSystem\n\nimport sysml::core::model::Element\nimport sysml::core::model::Block\nimport sysml::core::model::Port\nimport sysml::core::model::Property\nimport sysml::core::model::ValueProperty\nimport sysml::core::model::String\n\nclass Vehicle {\n  property: startSignal: ValueProperty(String)\n  property: brakePedalPressed: ValueProperty(String)\n  property: temperature: ValueProperty(String)\n  property: status: ValueProperty(String)\n  property: degradedMode: ValueProperty(String)\n  property: healthStatus: ValueProperty(String)\n  property: maintenanceInterval: ValueProperty(String)\n  property: temperatureThreshold: ValueProperty(String)\n  property: fuel: ValueProperty(String)\n  operation: startup: Operation\n  operation: selfInspection: Operation\n  operation: powerSupply: Operation\n  operation: faultRecovery: Operation\n  operation: maintenance: Operation\n}\n\nclass VehicleController {\n  property: controlSignals: ValueProperty(String)\n  property: statusSignals: ValueProperty(String)\n  property: vehicleStatus: ValueProperty(String)\n  operation: receiveControlSignals: Operation\n  operation: processControlSignals: Operation\n ",
    "package VehicleSimulation\n\nimport sysml::core::model::Element\nimport sysml::core::model::Block\nimport sysml::core::model::Package\n\nclass Vehicle {\n  property mass: Real\n  property position: Point\n  property velocity: Vector\n  property acceleration: Vector\n}\n\nclass Road {\n  property slope: Angle\n  property surfaceFrictionCoefficient: Real\n}\n\nclass VehicleState {\n  property vehicle: Vehicle\n  property time: Time\n  property state: State\n}\n\nclass Simulation {\n  property startTime: Time\n  property endTime: Time\n  property snapshotInterval: Time\n  property vehicleStates: List<VehicleState>\n}\n\nclass VehicleDynamicsAnalysis {\n  property vehicle: Vehicle\n  property road: Road\n  property simulation: Simulation\n  property result: Result\n}\n\nclass RoadAdaptabilityAssessment {\n  property road: Road\n  property simulation: Simulation\n  property result: Result\n}\n\nclass VehiclePerformancePrediction {\n  property vehicle: Vehicle\n  property road: Road\n  property simulation: Simulation\n  roperty result: Result\n}\n\npackage VehicleSimulation {\n  element VehicleSimulation {\n    stereotype <<Simulation>>\n  }\n}\n\npackage VehicleSimulation {\n  element Vehicle {\n",
    "package com.example.system\n\nimport com.example.component.Component1\nimport com.example.component.Component2\nimport com.example.component.Component3\nimport com.example.component.Component4\nimport com.example.component.Component5\nimport com.example.component.Component6\n\nclass SubsystemA {\n  enum Config {\n    A = [Component1, Component2]\n    B = [Component2, Component3]\n  }\n}\n\nclass SubsystemB {\n  enum Config {\n    A = [Component4, Component5]\n    B = [Component5, Component6]\n  }\n}\n\nclass Vehicle {\n  enum Config {\n    A = [SubsystemA.Config.A, SubsystemB.Config.B]\n    B = [SubsystemA.Config.B, SubsystemB.Config.B]\n  }\n}\n\nconstraint SubsystemA.Config.B -> SubsystemB.Config.A\nconstraint SubsystemA.Config.B -> not SubsystemA.Config.B\n```\n```sysml\npackage com.example.system\n\nimport com.example.component.Component1\nimport com.example.component.Component2\nimport com.example.component.Component3\nimport com.example.component.Component4\nimport com.example.component.Component5\nimport com.example.component.Component6\n\nclass SubsystemA {\n  enum Config {\n    A = [Component1, Component2]\n   ",
    "package VehiclePlatform\n\nimport sysml::core::model::Element\nimport sysml::core::model::Package\nimport sysml::core::model::Block\nimport sysml::core::model::Port\nimport sysml::core::model::Property\nimport sysml::core::model::Constraint\n\nclass VehiclePlatform extends Package {\n  description: \"Modular vehicle platform with configurable capabilities\"\n  isAbstract: true\n}\n\nclass SubsystemA extends Block {\n  description: \"Subsystem A with variant support\"\n  isAbstract: true\n  ports: [p1]\n  properties: [part1, part2, part3]\n}\n\nclass SubsystemB extends Block {\n  description: \"Subsystem B with variant support\"\n  isAbstract: true\n  ports: [p2]\n  properties: [part4, part5]\n}\n\nclass VehicleConfigA extends Block {\n  description: \"Vehicle configuration A\"\n  isAbstract: true\n  properties: [part1, part2, part3, part4, part5]\n  constraints: [VehicleConfigAConstraint]\n}\n\nclass VehicleConfigB extends Block {\n  description: \"Vehicle configuration B\"\n  isAbstract: true\n  properties: [part1",
    "package VehicleConfigurator\n\nimport sysml::v2::core::model::Element\nimport sysml::v2::core::model::Block\nimport sysml::v2::core::model::Package\n\nclass VehicleConfigurator extends Block {\n  property engine: Engine\n  property transmission: Transmission\n  property wheels: Wheels\n  property performanceRequirement: PerformanceRequirement\n  property userPreference: UserPreference\n  constraint engineCompatibility: engine.compatibleWith(transmission, wheels)\n  constraint transmissionCompatibility: transmission.compatibleWith(engine, wheels)\n  constraint wheelsCompatibility: wheels.compatibleWith(engine, transmission)\n  constraint performanceRequirementConstraint: performanceRequirement.meets(engine, transmission, wheels)\n  constraint userPreferenceConstraint: userPreference.meets(engine, transmission, wheels)\n}\n\nclass Engine extends Block {\n  property engineType: EngineType\n  property enginePower: EnginePower\n  constraint engineTypeConstraint: engineType == \"4-cylinder\" || engineType == \"6-cylinder\"\n  constraint enginePowerConstraint: enginePower >= 100 && enginePower <= 500\n}\n\nclass Transmission extends Block {\n  property transmissionType: TransmissionType\n  constraint transmissionTypeConstraint: transmissionType == \"automatic\" || transmissionType == \"",
    "package VehicleManagementSystem\n\nimport sysml::core::ModelElement\nimport sysml::core::Package\nimport sysml::core::Block\nimport sysml::core::Port\nimport sysml::core::Interface\nimport sysml::core::Requirement\nimport sysml::core::Constraint\n\nclass Vehicle extends Block {\n  attribute mass: Quantity\n  attribute fuelStatus: FuelStatus\n  attribute powertrain: Powertrain\n  attribute reliability: Reliability\n}\n\nclass Engine extends Block {\n  attribute torque: Quantity\n  attribute driveInterface: DriveInterface\n}\n\nclass Transmission extends Block {\n  attribute driveInterface: DriveInterface\n}\n\nclass Powertrain extends Block {\n  attribute engine: Engine\n  attribute transmission: Transmission\n}\n\nclass FuelStatus {\n  attribute massRequirement: Quantity\n  attribute fuelLevel: Quantity\n}\n\nclass Reliability {\n  attribute performance: Quantity\n  attribute durability: Quantity\n}\n\nclass DriveInterface {\n  attribute torque: Quantity\n  attribute speed: Quantity\n}\n\nclass VehicleManagementSystem extends Package {\n  element vehicle: Vehicle\n  element engine: Engine\n  element transmission: Transmission\n  element powertrain: Powertrain\n  element fuelStatus: FuelStatus\n  element reliability: Reliability\n",
    "// Define the system\nsystem VehicleMassComplianceSystem {\n  // Define the system's purpose\n  purpose \"Verify vehicle mass compliance to ensure that the actual mass of the tested vehicles does not exceed the specified maximum permissible mass.\"\n  \n  // Define the system's behavior\n  behavior \"The system compares the measured mass with the required value and determines if the vehicle is compliant or non-compliant.\"\n  \n  // Define the system's inputs\n  input \"MeasuredMass\" : mass\n  \n  // Define the system's outputs\n  output \"ComplianceStatus\" : boolean\n  \n  // Define the system's constraints\n  constraint \"The vehicle's actual mass must not exceed the specified maximum permissible mass.\"\n  \n  // Define the system's properties\n  property \"MaximumPermissibleMass\" : 2500 kg\n  \n  // Define the system's operations\n  operation \"CompareMass\" {\n    // Define the operation's parameters\n    parameter \"MeasuredMass\" : mass\n    parameter \"MaximumPermissibleMass\" : 2500 kg\n    \n    // Define the operation's behavior\n    behavior \"If the measured mass is less than or equal to the maximum permissible mass, then the vehicle is compliant; otherwise, it is non-compliant.\"\n ",
    "package water_supply_network\n\nimport sysml::core::model::Element\nimport sysml::core::model::Block\nimport sysml::core::model::Port\nimport sysml::core::model::Interface\nimport sysml::core::model::Package\n\nclass SpigotBank extends Block {\n  port: SpigotBankPort\n}\n\nclass SpigotBankPort extends Port {\n  interface: SpigotInterface\n}\n\nclass Spigot extends Block {\n  port: SpigotPort\n}\n\nclass SpigotPort extends Port {\n  interface: SpigotInterface\n}\n\nclass SpigotInterface extends Interface {\n  provides: HotWater\n  provides: ColdWater\n}\n\nclass Faucet extends Block {\n  port: FaucetPort\n}\n\nclass FaucetPort extends Port {\n  interface: FaucetInterface\n}\n\nclass FaucetInterface extends Interface {\n  requires: HotWater\n  requires: ColdWater\n}\n\nclass FaucetInlet extends Block {\n  port: FaucetInletPort\n}\n\nclass FaucetInletPort extends Port {\n  interface: FaucetInletInterface\n}\n\nclass FaucetInletInterface extends Interface {\n  provides: HotWater\n  provides: ColdWater",
    "package VehicleQualityAnalysis\n\nblock Vehicle\n  description: \"Vehicle model for quality analysis\"\n  attribute mass: Quantity\n  attribute qualityAttributes: QualityAttributeSet\n\nblock Engine\n  description: \"Engine model for quality analysis\"\n  attribute mass: Quantity\n  attribute qualityAttributes: QualityAttributeSet\n\nblock Transmission\n  description: \"Transmission model for quality analysis\"\n  attribute mass: Quantity\n  attribute qualityAttributes: QualityAttributeSet\n\nblock FrontAxleAssembly\n  description: \"Front axle assembly model for quality analysis\"\n  attribute mass: Quantity\n  attribute qualityAttributeSet: QualityAttributeSet\n\nblock RearAxleAssembly\n  description: \"Rear axle assembly model for quality analysis\"\n  attribute mass: Quantity\n  attribute qualityAttributeSet: QualityAttributeSet\n\nblock QualityAttributeSet\n  description: \"Set of quality attributes for a component\"\n  attribute qualityAttributes: QualityAttribute\n\nblock QualityAttribute\n  description: \"Quality attribute for a component\"\n  attribute name: String\n  attribute value: Quantity\n\nblock AnalysisObjective\n  description: \"Analysis objective for vehicle quality\"\n  attribute name: String\n  attribute description: String\n\nblock AnalysisTask\n  description: \"Analysis task for vehicle quality\"\n  attribute",
    "package VehiclePowertrainConfiguration\n\nimport sysml::core::ModelElement\nimport sysml::core::Package\nimport sysml::core::Block\nimport sysml::core::InternalBlockDiagram\nimport sysml::core::ValueProperty\nimport sysml::core::StringProperty\nimport sysml::core::Enumeration\n\nclass EngineType {\n  type: Enumeration = [\"Inline\", \"V-Type\", \"W-Type\"]\n}\n\nclass EngineConfiguration {\n  type: EngineType\n  cylinders: Integer\n  power: ValueProperty\n  mass: ValueProperty\n  efficiency: ValueProperty\n  reliability: ValueProperty\n  cost: ValueProperty\n}\n\nclass EngineScheme {\n  type: EngineType\n  cylinders: Integer\n  components: InternalBlockDiagram\n  performanceData: InternalBlockDiagram\n  evaluationResults: InternalBlockDiagram\n}\n\nclass VehiclePerformance {\n  type: Enumeration = [\"High\", \"Medium\", \"Low\"]\n}\n\nclass VehicleEconomy {\n  type: Enumeration = [\"High\", \"Medium\", \"Low\"]\n}\n\nclass EngineSolution {\n  type: EngineConfiguration\n  vehiclePerformance: VehiclePerformance\n  vehicleEconomy: VehicleEconomy\n  explanation: StringProperty\n}\n\nclass VehiclePowertrainConfiguration {\n",
    "// Define the system\nsystem VehicleFuelEconomySystem {\n  // Define the requirements\n  requirement UrbanRangeRequirement {\n    description = \"The vehicle's range per gallon must not be less than 25 miles under urban driving conditions.\";\n    constraint = \"range_per_gallon >= 25\";\n  }\n  requirement HighwayRangeRequirement {\n    description = = \"The vehicle's range per gallon must not be less than 30 miles under highway driving conditions.\";\n    constraint = \"range_per_gallon >= 30\";\n  }\n  // Define the parameters\n  parameter VehiclePowertrain {\n    description = \"The vehicle's powertrain characteristics.\";\n  }\n  parameter Load {\n    description = \"The additional load on the vehicle.\";\n  }\n  parameter OperatingConditions {\n    description = \"The standard urban and highway driving scenarios.\";\n  }\n  // Define the analysis\n  analysis FuelConsumptionAnalysis {\n    description = \"Assess fuel consumption under various conditions.\";\n    input = {\n      VehiclePowertrain,\n      Load,\n      OperatingConditions\n    }\n    output = {\n      range_per_gallon\n    }\n  }\n  // Define the system behavior\n  behavior VehicleFuelEconomyBehavior {\n    description = \"Model and analyze key parameters to ensure regulatory fuel",
    "// Define the system\nsystem VehicleMotionSimulator {\n  // Define the system's purpose\n  purpose \"Simulate and analyze the longitudinal dynamic characteristics of vehicle motion\"\n  \n  // Define the system's context\n  context \"Vehicle performance analysis, control strategy development, and driving behavior evaluation\"\n  \n  // Define the system's inputs\n  input VehicleMass \"Vehicle mass\"\n  input InitialPosition \"Initial position\"\n  input InitialVelocity \"Initial velocity\"\n  input PowerOutput \"Power output data\"\n  \n  // Define the system's outputs\n  output Acceleration \"Acceleration\"\n  output Velocity \"Velocity\"\n  output Displacement \"Displacement\"\n  \n  // Define the system's behavior\n  behavior {\n    // Define the system's dynamic equations\n    equation {\n      // Define the time step\n      timeStep = 0.01s\n      \n      // Define the vehicle's acceleration\n      acceleration = (PowerOutput / VehicleMass) - (VehicleMass * Gravity)\n      \n      // Define the vehicle's velocity\n      velocity = velocity + (acceleration * timeStep)\n      \n      // Define the vehicle's position\n      position = position + (velocity * timeStep)\n    }\n  }\n}\n```\nNote: The code is written",
    "package VehicleSystem {\n  class Vehicle {\n    property mass: 2500 kg\n    property structure: VehicleStructure\n  }\n  class VehicleStructure {\n    property frontAxleAssembly: FrontAxleAssembly\n    property rearAxleAssembly: RearAxleAssembly\n  }\n  class FrontAxleAssembly {\n    property mass: 150 kg\n    property frontWheels: [2] FrontWheel\n    property frontAxle: FrontAxle\n  }\n  class FrontAxle {\n    property mass: 50 kg\n    property steeringAngle: 30°\n  }\n  class RearAxleAssembly {\n    property mass: 250 kg\n    property rearWheels: [2] RearWheel\n    property rearAxle: RearAxle\n  }\n  class RearAxle {\n    property mass: 75 kg\n  }\n  class FrontWheel {\n    property mass: 20 kg\n  }\n  class RearWheel {\n    property mass: 25 kg\n  }\n}\n```\n```sysml\npackage VehicleSystem {\n  class Vehicle {\n    property mass: 2500 kg\n    property structure: VehicleStructure\n  }\n  class VehicleStructure {\n    property frontAxleAssembly:",
    "package VehicleSafetySystem {\n  package Vehicle {\n    class Vehicle {\n      property name: String\n      property description: String\n      property safetyFeatures: Set<Feature>\n      property securityFeatures: Set<Feature>\n    }\n  }\n  package Feature {\n    class Feature {\n      property name: String\n      property description: String\n      property isMandatory: Boolean\n    }\n  }\n  package Component {\n    class Component {\n      property name: String\n      property description: String\n      property feature: Feature\n    }\n  }\n  package System {\n    class System {\n      property name: String\n      property description: String\n      property components: Set<Component>\n    }\n  }\n  package View {\n    class View {\n      property name: String\n      property description: String\n      property type: String\n      property components: Set<Component>\n    }\n  }\n  package Filter {\n    class Filter {\n      property name: String\n      property description: String\n      property criteria: String\n      property components: Set<Component>\n    }\n  }\n}\n```\n\n```sysml\npackage VehicleSafetySystem {\n  class Vehicle {\n    property safetyFeatures: Set<Feature> {\n      contains: {\n        Feature(name: \"Seat Belt",
    "// Define the system\nsystem System {\n  // Define the layers\n  layer ApplicationLayer {\n    // Define the attributes\n    attribute x: Number\n    attribute y: Number\n    attribute z: Number {\n      dependsOn: [x, y]\n    }\n  }\n  layer ServiceLayer {\n    // Define the attributes\n    attribute x: Number\n    attribute y: Number\n    attribute z: Number {\n      dependsOn: [x, y]\n    }\n  }\n  layer DataLayer {\n    // Define the attributes\n    attribute x: Number\n    attribute y: Number\n    attribute z: Number {\n      dependsOn: [x, y]\n    }\n  }\n  // Define the relationships between layers\n  relationship ApplicationLayer -> ServiceLayer {\n    uses: [x, y]\n  }\n  relationship ServiceLayer -> DataLayer {\n    reliesOn: [x, y]\n  }\n  // Define the system attributes\n  attribute x: Number\n  attribute y: Number\n  attribute z: Number {\n    dependsOn: [x, y]\n  }\n}\n```\nNote: The code is written in SysML v2 textual grammar. The code defines a system with three",
    "package powertrain\n\nimport io.sysml.lang.modeling\n\nclass PowertrainSystem extends System {\n  description: \"Realize torque generation function\"\n  context: \"Powertrain system\"\n  scope: \"Vehicle\"\n  boundary: \"Powertrain\"\n  port: \"TorqueOutput\"\n  property: \"TorqueGeneration\"\n  constraint: \"Torque > 0 Nm\"\n}\n\nclass Engine extends Component {\n  description: \"Torque generator\"\n  context: \"Powertrain system\"\n  scope: \"Vehicle\"\n  boundary: \"Engine\"\n  port: \"TorqueOutput\"\n  property: \"TorqueGeneration\"\n  constraint: \"Torque > 0 Nm\"\n}\n\nclass TorqueGeneratorFunction extends Function {\n  description: \"Logic layer's torque generator function\"\n  context: \"Powertrain system\"\n  scope: \"Vehicle\"\n  boundary: \"Logic Layer\"\n  port: \"TorqueOutput\"\n  property: \"TorqueGeneration\"\n  constraint: \"Torque > 0 Nm\"\n}\n```\n\nNote: The output model is a SysML 2 textual model. The model includes three classes: PowertrainSystem, Engine, and TorqueGeneratorFunction. Each class has a description, context",
    "// Define the system\nsystem System {\n  // Define the system's functional requirements\n  functionalRequirement FR1: \"Transmit power\"\n  functionalRequirement FR2: \"Output power\"\n  functionalRequirement FR3: \"Generate torque\"\n  \n  // Define the system's non-functional requirements\n  nonFunctionalRequirement NFR1: \"Powertrain must be physically present\"\n  nonFunctionalRequirement NFR2: \"Engine must be physically present\"\n  nonFunctionalRequirement NFR3: \"Torque generator must be logically mapped to engine\"\n  \n  // Define the system's components\n  component Powertrain {\n    // Define the powertrain's parts\n    part Engine {\n      // Define the engine's ports\n      port EnginePort: \"Engine port\"\n    }\n  }\n  \n  // Define the system's connections\n  connection Powertrain.EnginePort -> EnginePort\n}\n```\n\nPlease note that the code is written in SysML v2 textual grammar. \n\nPlease provide the updated code based on the task. \n\n```sysml\n// Define the system\nsystem System {\n  // Define the system's functional requirements\n  functionalRequirement FR1: \"Transmit power\"\n  functionalRequirement FR2: \"",
    "catalogue Vehicle_Safety_and_Anti-theft_Function_Catalogue {\n  description: \"Standardize the basic configuration requirements for key vehicle components in terms of safety and anti-theft performance.\"\n  scope: \"Vehicle\"\n  context: \"Safety and Anti-theft\"\n  classification: \"Function\"\n  type: \"Catalogue\"\n}\n\nfunction Basic_Safety_Component {\n  description: \"Ensure the fundamental personal safety of occupants.\"\n  scope: \"Vehicle\"\n  context: \"Safety\"\n  classification: \"Function\"\n  type: \"Function\"\n}\n\nfunction Front_Seat_Belt {\n  description: \"Provide protection for the driver and passenger.\"\n  scope: \"Vehicle\"\n  context: \"Safety\"\n  classification: \"Function\"\n  type: \"Function\"\n}\n\nfunction Bumper {\n  description: \"Protect the vehicle from damage.\"\n  scope: \"Vehicle\"\n  context: \"Safety\"\n  classification: \"Function\"\n  type: \"Function\"\n}\n\nfunction Driver_Airbag {\n  description: \"Protect the driver in the event of a crash.\"\n  scope: \"Vehicle\"\n  context: \"Safety\"\n  classification: \"Function\"\n  type: \"Function\"\n}\n\nfunction Anti-Lock_Braking_System {\n ",
    "package VehicleFuelSystem\n\nimport sysml::core::model::Element\nimport sysml::core::model::Block\nimport sysml::core::model::Port\nimport sysml::core::model::Interface\nimport sysml::core::model::ValueProperty\nimport sysml::core::model::String\n\nclass Vehicle {\n  type: VehicleType\n  description: \"Vehicle with fuel system\"\n}\n\nclass FuelSystem {\n  type: FuelSystemType\n  description: \"Fuel system for vehicle\"\n  part: FuelTankAssembly\n  part: FuelPump\n  part: ReturnLine\n  part: FuelConsumingUnits\n}\n\nclass FuelTankAssembly {\n  type: FuelTankAssemblyType\n  description: \"Fuel tank assembly\"\n  part: FuelTank\n  part: FuelPump\n}\n\nclass FuelPump {\n  type: FuelPumpType\n  description: \"Fuel pump\"\n  provides: FuelPort\n  requires: FuelPort\n}\n\nclass ReturnLine {\n  type: ReturnLineType\n  description: \"Return line\"\n  provides: FuelPort\n  requires: FuelPort\n}\n\nclass FuelConsumingUnits {\n  type: FuelConsumingUnitsType\n  description:",
    "// Define the system\nsystem Vehicle {\n  // Define the safety features\n  feature SafetyFeatures {\n    // Mandatory safety features\n    feature SeatBelt {\n      // Description\n      description \"Two seat belts are mandatory safety features.\"\n    }\n    feature Airbag {\n      // Description\n      description \"An airbag is installed in the cockpit, but its application is not mandatory.\"\n    }\n    // Required safety components\n    feature Bumper {\n      // Description\n      description \"The vehicle body must be equipped with a bumper, which is a required safety component.\"\n    }\n    // Mandatory safety components\n    feature AntiLockBrakingSystem {\n      // Description\n      description \"The chassis structure is to be fitted with two sets of anti-lock braking systems, although the installation of such braking systems is not mandatory.\"\n    }\n  }\n  // Define the security features\n  feature SecurityFeatures {\n    // Mandatory security features\n    feature AntiTheftAlarm {\n      // Description\n      description \"An anti-theft alarm device should be installed inside the vehicle to enhance security protection.\"\n    }\n    // Required security components\n    feature KeylessEntrySystem {\n      // Description\n      description \"The vehicle body must be equipped with a keyless entry system",
    "package VehicleSafetyAndSecurity\n\nimport { SysML2 } from \"https://sysml2.org/sysml2\";\n\nclass Vehicle {\n  property interior: Interior;\n  property body: Body;\n}\n\nclass Interior {\n  property alarmSystem: AlarmSystem;\n  property seatBelt: SeatBelt;\n  property frontRowSeat: FrontRowSeat;\n  property driverAirbag: DriverAirbag;\n}\n\nclass Body {\n  property vehicleBody: VehicleBody;\n  property bumper: Bumper;\n  property keylessEntrySystem: KeylessEntrySystem;\n}\n\nclass AlarmSystem {\n  property alarmTrigger: AlarmTrigger;\n  property alarmNotification: AlarmNotification;\n}\n\nclass SeatBelt {\n  property seatBeltType: SeatBeltType;\n  property seatBeltStatus: SeatBeltStatus;\n}\n\nclass FrontRowSeat {\n  property seatType: SeatType;\n  property seatStatus: SeatStatus;\n}\n\nclass DriverAirbag {\n  property airbagType: AirbagType;\n  property airbagStatus: AirbagStatus;\n}\n\nclass VehicleBody {\n  property bodyMaterial: BodyMaterial;\n  property bodyType: BodyType;\n}\n\nclass Bumper {\n  property bumperType: BumperType;\n  property bumperStatus:",
    "// Define the security classification levels\nenum SecurityClassification {\n  Unclassified,\n  Confidential,\n  Secret\n}\n\n// Define the component type\ntype Component {\n  id: string\n  name: string\n  securityClassification: SecurityClassification\n}\n\n// Define the system\nsystem System {\n  // Define the components\n  components: [Component]\n}\n```\n\nNote: The code is written in SysML v2 textual grammar. The code defines the security classification levels, component type, and the system with its components. The component type has an attribute for security classification. The system has a list of components. \n\nThis code is a basic representation of the system and its components, and it can be further extended and refined based on the specific requirements of the system. \n\nThe code is written in a way that it can be easily understood and modified by someone familiar with SysML v2 textual grammar. \n\nThe code is also concise and readable, making it easier to maintain and update. \n\nThe code is a good starting point for further development and refinement of the system model. \n\nThe code is written in a way that it can be easily integrated with other models and systems, making it a good choice for large-scale system",
    "package automotive.ecu\n\nimport automotive.ecu.VehicleControlUnit\nimport automotive.ecu.EngineControlUnit\nimport automotive.ecu.BusInterface\nimport automotive.ecu.SensorInterface\n\nblock VehicleControlUnit {\n  description: \"Vehicle Control Unit\"\n  stereotype: \"ECU\"\n  attribute: {\n    busInterface: BusInterface\n  }\n  port: {\n    busInterface: BusInterface\n  }\n  operation: {\n    monitorVehicleState()\n    controlVehicleState()\n  }\n}\n\nblock EngineControlUnit {\n  description: \"Engine Control Unit\"\n  stereotype: \"ECU\"\n  attribute: {\n    busInterface: BusInterface\n  }\n  port: {\n    busInterface: BusInterface\n  }\n  operation: {\n    monitorEngineState()\n    controlEngineState()\n  }\n}\n\nblock BusInterface {\n  description: \"Bus Interface\"\n  stereotype: \"Interface\"\n  attribute: {\n    canBus: CANBus\n  }\n  port: {\n    canBus: CANBus\n  }\n}\n\nblock CANBus {\n  description: \"Controller Area Network Bus\"\n  stereotype: \"Bus\"\n}\n\nblock SensorInterface {\n  description: \"Sensor Interface\"\n  stereotype: \"Interface\"\n  attribute: {\n    sensorData",
    "package BloodGlucoseMeter\n\nimport sysml::v2::core::model::Element\nimport sysml::v2::core::model::Block\nimport sysml::v2::core::model::Package\n\nclass BloodGlucoseMeter {\n  property batteryStatus: BatteryStatus\n  property alarm: Alarm\n  property emergencyResponse: EmergencyResponse\n  property preventiveMeasures: PreventiveMeasures\n  property managementMeasures: ManagementMeasures\n}\n\nclass BatteryStatus {\n  property batteryLevel: Level\n  property batteryType: Type\n  property batteryStatus: Status\n}\n\nclass Alarm {\n  property alarmType: Type\n  property alarmThreshold: Threshold\n  property alarmTrigger: Trigger\n}\n\nclass EmergencyResponse {\n  property emergencyType: Type\n  property emergencyThreshold: Threshold\n  property emergencyTrigger: Trigger\n}\n\nclass PreventiveMeasures {\n  property preventiveType: Type\n  property preventiveThreshold: Threshold\n  property preventiveTrigger: Trigger\n}\n\nclass ManagementMeasures {\n  property managementType: Type\n  property managementThreshold: Threshold\n  property managementTrigger: Trigger\n}\n\nclass Level {\n  property levelValue: Value\n  property levelUnit: Unit\n}\n\nclass Type {\n  property type",
    "package constants\n\nimport io.sysml.lang.SysML\n\nclass Constants {\n  val e: Double = 2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466391932003059921817413596629043572900336768725417773867387\n  val pi: Double = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n  val speedOfLightVacuum: Double = 299792458.0 m\n  val fineStructureConstant: Double = 7.2973525693e-3\n  val electronToProtonMassRatio: Double = 1836.15267389\n  val standardGravitationalAccelerationEarth: Double = 9.80665 m/s^2\n  val amplifierGainCoefficientModelX: Double = 10.0\n}\n```\n```sysml\npackage constants\n\nimport io.sysml.lang.SysML\n\nclass Constants {\n  val e: Double = 2.718281828459045235360",
    "package automotive.tire\n\nimport automotive.tire.Tire\n\nclass Tire {\n  attribute manufacturer: String\n  attribute rimDiameter: Real\n  attribute width: Integer\n}\n\ninstance FrenchTire of Tire {\n  manufacturer = \"Michelin\"\n  rimDiameter = 18.0\n  width = 245\n}\n```\n```sysml\npackage automotive.tire\n\nimport automotive.tire.Tire\n\nclass Tire {\n  attribute manufacturer: String\n  attribute rimDiameter: Real\n  attribute width: Integer\n}\n\ninstance FrenchTire of Tire {\n  manufacturer = \"Michelin\"\n  rimDiameter = 18.0\n  width = 245\n}\n```package automotive.tire\n\nimport automotive.tire.Tire\n\nclass Tire {\n  attribute manufacturer: String\n  attribute rimDiameter: Real\n  attribute width: Integer\n}\n\ninstance FrenchTire of Tire {\n  manufacturer = \"Michelin\"\n  rimDiameter = 18.0\n  width = 245\n}\n```package automotive.tire\n\nimport automotive.tire.Tire\n\nclass Tire {\n  attribute manufacturer: String\n  attribute rimDiameter: Real\n  attribute width",
    "model AutomotiveComponent {\n  Vehicle {\n    mass: 1200 kg\n    length: 4.82 m\n  }\n  Wheel {\n    hubDiameter: 18 in\n    width: 245 mm\n    outerDiameter: (hubDiameter + tireHeight) * 2\n  }\n  Tire {\n    height: 30 in\n  }\n}\n```\n```sysml\nmodel AutomotiveComponent {\n  Vehicle {\n    mass: 1200 kg\n    length: 4.82 m\n  }\n  Wheel {\n    hubDiameter: 18 in\n    width: 245 mm\n    outerDiameter: (hubDiameter + tireHeight) * 2\n  }\n  Tire {\n    height: 30 in\n  }\n}\n```\n```sysml\nmodel AutomotiveComponent {\n  Vehicle {\n    mass: 1200 kg\n    length: 4.82 m\n  }\n  Wheel {\n    hubDiameter: 18 in\n    width: 245 mm\n    outerDiameter: (hubDiameter + tireHeight) * 2\n  }\n  Tire {\n    height: 30 in\n  }\n}\n```\n```sysml\nmodel Automotive",
    "package VehiclePowertrain\n\nimport sysml::core::model::Element\nimport sysml::core::model::Block\nimport sysml::core::model::Package\n\nclass Engine {\n  type: FourCylinder | SixCylinder\n}\n\nclass Transmission {\n  type: Manual | Automatic\n}\n\nclass Vehicle {\n  engine: Engine\n  transmission: Transmission\n  isHighPerformance: Boolean\n}\n\nclass Powertrain {\n  engine: Engine\n  transmission: Transmission\n  validCombinations: Set<PowertrainCombination>\n}\n\nclass PowertrainCombination {\n  engine: Engine\n  transmission: Transmission\n  isPermitted: Boolean\n}\n\ninstance Vehicle {\n  name: \"Vehicle\"\n  engine: Engine {\n    type: SixCylinder\n  }\n  transmission: Transmission {\n    type: Automatic\n  }\n  isHighPerformance: true\n}\n\ninstance Powertrain {\n  name: \"Powertrain\"\n  engine: Engine {\n    type: FourCylinder\n  }\n  transmission: Transmission {\n    type: Manual\n  }\n  validCombinations: Set<PowertrainCombination> {\n    PowertrainCombination {\n      engine: Engine {\n        type: FourCylinder\n      }\n      transmission: Transmission {\n",
    "package automotive\n\nimport automotive::Component\nimport automotive::WheelAssembly\nimport automotive::Wheel\nimport automotive::BrakeDisc\nimport automotive::Tire\n\nclass Vehicle {\n  property mass: 1200 kg\n  property length: 4.82 m\n  property wheelAssemblies: [WheelAssembly]\n}\n\nclass WheelAssembly {\n  property tires: [Tire]\n  property brakeDisc: BrakeDisc\n  property outerDiameter: 18 in\n  property tireWidth: 245 mm\n  property tireHeight: 45 mm\n  property treadDepth: 6.0 mm\n  constraint brakeDiscDiameter < outerDiameter\n  constraint treadDepth >= 3.5 mm\n}\n\nclass Wheel {\n  property rim: Rim\n  property tire: Tire\n  property outerDiameter: 18 in\n  property tireWidth: 245 mm\n  property tireHeight: 45 mm\n  property treadDepth: 6.0 mm\n  constraint treadDepth >= 3.5 mm\n}\n\nclass BrakeDisc {\n  property radius: 95 mm\n  property diameter: 2 * radius\n  constraint diameter < outerDiameter\n}\n\nclass Tire {\n  property width: ",
    "package automotive_fuel_system\n\nblock FuelTankAssembly {\n  description: \"Fuel tank assembly provides an outlet interface for fuel\"\n  interface OutletInterface {\n    port OutletPort {\n      description: \"Fuel outlet port\"\n      flow: Fuel\n    }\n    port ReturnPort {\n      description: \"Fuel return port\"\n      flow: Fuel\n    }\n  }\n}\n\nblock FuelPump {\n  description: \"Fuel pump installed inside the fuel tank assembly\"\n  interface PumpInterface {\n    port PumpPort {\n      description: \"Fuel pump port\"\n      flow: Fuel\n    }\n    port ReturnPort {\n      description: \"Fuel return port\"\n      flow: Fuel\n    }\n  }\n}\n\nblock FuelSystem {\n  description: \"Automotive fuel system\"\n  interface FuelInterface {\n    port FuelPort {\n      description: \"Fuel port\"\n      flow: Fuel\n    }\n  }\n  part FuelTankAssembly {\n    description: \"Fuel tank assembly\"\n  }\n  part FuelPump {\n    description: \"Fuel pump\"\n  }\n  requirement FuelEfficiency {\n    description: \"Fuel can circulate efficiently among all components\"\n  }\n  requirement FuelSafety {\n    description: \"Fuel can circulate safely among all components\"\n  }\n ",
    "package PhysicalQuantitySystem\n\nimport PhysicalQuantity\nimport Unit\nimport QuantityKind\n\nclass PhysicalQuantitySystem {\n  property: {\n    name: string\n    description: string\n    baseQuantityKinds: QuantityKind[]\n    derivedQuantityKinds: QuantityKind[]\n    units: Unit[]\n  }\n}\n\nclass PhysicalQuantity {\n  property: {\n    name: string\n    description: string\n    quantityKind: QuantityKind\n    unit: Unit\n  }\n}\n\nclass Unit {\n  property: {\n    name: string\n    description: string\n    baseUnit: Unit\n    derivedUnit: Unit\n  }\n}\n\nclass QuantityKind {\n  property: {\n    name: string\n    description: string\n    baseQuantityKind: QuantityKind\n    derivedQuantityKind: QuantityKind\n  }\n}\n\ninterface PhysicalQuantitySystem {\n  addQuantityKind(QuantityKind): void\n  removeQuantityKind(QuantityKind): void\n  addUnit(Unit): void\n  removeUnit(Unit): void\n  addPhysicalQuantity(PhysicalQuantity): void\n  removePhysicalQuantity(PhysicalQuantity): void\n}\n\ninterface QuantityKind {\n  addDerivedQuantityKind(QuantityKind): void\n  removeDerivedQuantityKind(QuantityKind): void\n  add",
    "package unit_system_library\n\nimport unit\nimport quantity\n\nclass UnitSystemLibrary {\n  description: \"Standardized unit system library for ISQ and USCustomaryUnits\"\n  purpose: \"Enable interoperability and adaptation between ISQ and USCustomaryUnits\"\n  goal: \"Reduce confusion and errors caused by inconsistent units\"\n  constraint: \"Ensure accuracy and authoritative standardization of all unit types\"\n  context: \"Engineering, scientific research, and daily life\"\n  stakeholder: \"Users, engineers, and researchers\"\n  requirement: \"Accurate and reliable unit conversion and application\"\n  assumption: \"ISQ and USCustomaryUnits are widely used and accepted\"\n  preCondition: \"System is initialized with ISQ and USCustomaryUnits data\"\n  postCondition: \"System provides accurate unit conversion and application\"\n  invariant: \"Unit system library is consistent and up-to-date\"\n}\n\nclass Unit {\n  description: \"Physical quantity unit\"\n  purpose: \"Represent physical quantity unit\"\n  attribute: \"name: String\"\n  attribute: \"symbol: String\"\n  attribute: \"definition: String\"\n  attribute: \"unitType: String\"\n  attribute: \"conversionFactor: Float\"\n}\n\nclass Quantity {\n  description: \"",
    "// Define the system\nsystem HeadlampTiltAdjustmentSystem {\n  // Define the parameters\n  parameter TiltAngle: real = 0..80;\n  parameter TiltAngleRange: real = 50..80;\n  parameter BeamTiltAngle: real = 0..360;\n  parameter BeamTiltAngleRange: real = 50..80;\n  parameter Unit: string = \"degrees\";\n  parameter Precision: real = 0.01;\n  parameter Constants: string = \"pi, e\";\n}\n\n// Define the constraints\nconstraint TiltAngleConstraint: TiltAngle >= 50 and TiltAngle <= 80;\nconstraint BeamTiltAngleConstraint: BeamTiltAngle >= 0 and BeamTiltAngle <= 360;\nconstraint UnitConstraint: Unit = \"degrees\";\nconstraint PrecisionConstraint: Precision = 0.01;\nconstraint ConstantsConstraint: Constants = \"pi, e\";\n```\n```sysml\n// Define the system\nsystem HeadlampTiltAdjustmentSystem {\n  // Define the parameters\n  parameter TiltAngle: real = 0..80;\n  parameter TiltAngleRange: real = 50..80;\n  parameter BeamTiltAngle: real = 0",
    "package system\n\nimport sysml::core::types::*\nimport sysml::core::constraints::*\n\n// Define data types\ntype UnsignedInteger = Integer where value >= 0\ntype UnsignedFloat = Float where value >= 0\ntype DateTime = DateTime\ntype String = String\ntype Boolean = Boolean\n\n// Define status conditions\nenum Status {\n  red = \"critical\"\n  yellow = \"warning\"\n  green = \"normal\"\n}\n\n// Define color labeling for status conditions\ntype StatusColor = Status where value in {red, yellow, green}\n\n// Define physical dimensions\ntype Diameter = Integer where value >= 0 and value <= 80\nenum DiameterOption {\n  Small = 60\n  Medium = 70\n  Large = 80\n}\n\n// Define default initial value for diameter\ntype DiameterValue = DiameterOption where value = Small\n\n// Define system data types\ntype SystemDataType = UnsignedInteger | UnsignedFloat | DateTime | String | Boolean | StatusColor | Diameter | DiameterValue\n```\n```sysml\npackage system\n\nimport sysml::core::types::*\nimport sysml::core::constraints::*\n\n// Define data types\ntype UnsignedInteger = Integer where value >= 0\ntype UnsignedFloat",
    "collection\n  name: SpareParts\n  type: Bag\n  element: SparePart\n  description: Collection of spare parts\n  attributes:\n    - name: id\n      type: Integer\n      description: Unique identifier for the spare part\n    - name: description\n      type: String\n      description: Description of the spare part\n  operations:\n    - name: archive\n      description: Archive a spare part\n    - name: unarchive\n      description: Unarchive a spare part\n\ncollection\n  name: Personnel\n  type: OrderedSet\n  element: Person\n  description: Collection of personnel\n  attributes:\n    - name: id\n      type: Integer\n      description: Unique identifier for the person\n    - name: name\n      type: String\n      description: Name of the person\n  operations:\n    - name: add\n      description: Add a person to the collection\n    - name: remove\n      description: Remove a person from the collection\n\ncollection\n  name: Integers\n  type: List\n  element: Integer\n  description: Collection of integers\n  operations:\n    - name: add\n      description: Add an integer to the collection\n   ",
    "// Define a new package\npackage TireInfo\n\n// Define a new block\nblock Tire {\n  // Define attributes\n  attribute manufacturer : String\n  attribute rimDiameter : Number\n  attribute tireWidth : Number\n  attribute installationPosition : Optional[Vector3D]\n}\n\n// Define a new block\nblock Vector3D {\n  // Define attributes\n  attribute x : Number\n  attribute y : Number\n  attribute z : Number\n}\n```\n\nPlease note that the output model is in SysML v2 textual grammar. The code is written in a specific format, with each line starting with a keyword (e.g., `package`, `block`, `attribute`) followed by the name of the element and its properties. The `//` symbol is used for comments. The `Optional` keyword is used to indicate that the `installationPosition` attribute is optional. The `Vector3D` block is defined separately to represent a 3D vector. The `Number` type is used to represent numerical values. The `String` type is used to represent text values. \n\nPlease provide the SysML v2 textual grammar code that meets the requirements. \n\n```sysml\n// Define a new",
    "package SpacecraftTrajectorySampler\n\nimport sysml::core::model::Element\nimport sysml::core::model::Block\nimport sysml::core::model::Package\nimport sysml::core::model::Class\nimport sysml::core::model::Property\nimport sysml::core::model::Operation\nimport sysml::core::model::Parameter\nimport sysml::core::model::Value\nimport sysml::core::model::String\nimport sysml::core::model::Time\nimport sysml::core::model::Duration\nimport sysml::core::model::Unit\nimport sysml::core::model::Quantity\n\nclass LiftoffTime {\n  property: referenceTime: Time\n  property: utcLiftoffTime: String\n}\n\nclass SamplingPoint {\n  property: time: Time\n  property: position: Quantity\n  property: velocity: Quantity\n}\n\nclass SpacecraftTrajectorySampler {\n  property: liftoffTime: LiftoffTime\n  property: samplingPoints: Sequence<SamplingPoint>\n  operation: sampleTrajectory: LiftoffTime -> Sequence<SamplingPoint>\n}\n\noperation sampleTrajectory(liftoffTime: Lifto",
    "package AlloyManagementSystem\n\nimport sysml::v2::core::Core\nimport sysml::v2::modeling::Modeling\n\nclass Alloy {\n  property massFraction: MassFraction\n  property tensileStrength: TensileStrength\n  property constituentMaterials: [ConstituentMaterial]\n}\n\nclass ConstituentMaterial {\n  property massFraction: MassFraction\n  property material: Material\n}\n\nclass Material {\n  property atomicMass: AtomicMass\n  property scientificUnits: ScientificUnits\n  property value: Value\n}\n\nclass MassFraction {\n  property value: Value\n  property unit: Unit\n}\n\nclass TensileStrength {\n  property value: Value\n  property unit: Unit\n}\n\nclass ScientificUnits {\n  property unit: Unit\n}\n\nclass Unit {\n  property name: String\n  property symbol: String\n}\n\nclass Value {\n  property value: Number\n  property unit: Unit\n}\n\nclass AtomicMass {\n  property value: Number\n  property unit: Unit\n}\n\nclass EngineeringDesign {\n  property scenario: String\n  property requirement: String\n}\n\nclass QualityControl {\n  property scenario: String\n  property requirement: String\n}\n\nclass ScientificResearch {\n  property scenario: String\n  property",
    "package EngineeringMaterialsDB\n\nimport io.github.sysml.v2.model\n\nclass Material {\n  property atomicMass: Float\n  property compositionalInfo: CompositionalInfo\n  property mechanicalProperties: MechanicalProperties\n}\n\nclass CompositionalInfo {\n  property massFractions: Map<String, Float>\n}\n\nclass MechanicalProperties {\n  property tensileStrength: Float\n  property unit: Unit\n}\n\nclass Unit {\n  property name: String\n  property symbol: String\n}\n\nclass Steel_980 extends Material {\n  property compositionalInfo: CompositionalInfo = {\n    massFractions = {\n      \"iron\" = 0.95\n      \"carbon\" = 0.03\n      \"manganese\" = 0.02\n    }\n  }\n  property mechanicalProperties: MechanicalProperties = {\n    tensileStrength = 980\n    unit = Unit = {\n      name = \"Newton per square millimeter\"\n      symbol = \"N/mm²\"\n    }\n  }\n}\n```\n```sysml\npackage EngineeringMaterialsDB\n\nimport io.github.sysml.v2.model\n\nclass Material {\n  property atomicMass: Float\n  property compositionalInfo: CompositionalInfo\n  property mechanicalProperties: MechanicalProperties",
    "package system\n\nimport {Topic, Message, Publisher, Subscriber, Subscription, Server}\n\nclass Topic {\n  name: string\n  description: string\n}\n\nclass Message {\n  content: string\n  topic: Topic\n}\n\nclass Publisher {\n  name: string\n  topic: Topic\n  message: Message\n}\n\nclass Subscriber {\n  name: string\n  topic: Topic\n}\n\nclass Subscription {\n  publisher: Publisher\n  subscriber: Subscriber\n}\n\nclass Server {\n  subscriptions: Subscription[]\n  messages: Message[]\n}\n\nServer {\n  subscriptions: [\n    Subscription {\n      publisher: Publisher {\n        name: \"Producer1\",\n        topic: Topic {\n          name: \"Topic1\",\n          description: \"Topic1 description\"\n        },\n        message: Message {\n          content: \"Hello, world!\",\n          topic: Topic {\n            name: \"Topic1\",\n            description: \"Topic1 description\"\n          }\n        }\n      },\n      subscriber: Subscriber {\n        name: \"Consumer1\",\n        topic: Topic {\n          name: \"Topic1\",\n          description: \"Topic1 description\"\n        }\n      }\n    },\n    Subscription {\n      publisher: Publisher {\n        name: \"Producer2\",\n        topic:",
    "package VehicleFuelSystem\n\nblock VehicleFuelSystem\n  description: \"The vehicle fuel system is responsible for supplying fuel to the engine and returning unused fuel to the tank.\"\n  note: \"The system ensures continuous and stable fuel supply, recycles excess fuel, and optimizes resource utilization.\"\n\nblock FuelTankAssembly\n  description: \"The fuel tank assembly is responsible for supplying fuel to the engine.\"\n  note: \"The fuel tank assembly is connected to the engine through fuel lines.\"\n\nblock Engine\n  description: \"The engine is responsible for consuming fuel and returning unused fuel to the tank.\"\n  note: \"The engine is connected to the fuel tank assembly through fuel lines.\"\n\nblock FuelLines\n  description: \"The fuel lines are responsible for facilitating fuel supply and return between the fuel tank assembly and the engine.\"\n  note: \"The fuel lines are connected to the fuel tank assembly and the engine.\"\n\nblock FuelTemperatureMonitor\n  description: \"The fuel temperature monitor is responsible for monitoring and transmitting information on the fuel temperature.\"\n  note: \"The fuel temperature monitor ensures operational safety and system efficiency.\"\n\nassociation FuelSupply\n  description: \"The fuel supply association represents the flow of fuel from the fuel tank assembly to the engine.\"\n  note:",
    "// Define the system\nsystem System {\n  // Define the participants\n  participant Producer {\n    // Define the ports\n    port Publish {\n      // Define the operations\n      operation publish(topic: string, message: string)\n    }\n  }\n  participant Server {\n    // Define the ports\n    port Subscribe {\n      // Define the operations\n      operation subscribe(topic: string, consumer: string)\n    }\n    port Publish {\n      // Define the operations\n      operation receive(topic: string, message: string)\n    }\n    port Deliver {\n      // Define the operations\n      operation deliver(topic: string, message: string, consumer: string)\n    }\n  }\n  participant Consumer {\n    // Define the ports\n    port Subscribe {\n      // Define the operations\n      operation subscribe(topic: string, consumer: id)\n    }\n  }\n}\n\n// Define the use case\nusecase PublishSubscribe {\n  // Define the actors\n  actor Producer {\n    // Define the goals\n    goal publish(topic: string, message: string)\n  }\n  actor Server {\n    // Define the goals\n    goal receive(topic: string, message: string)\n    goal deliver(topic: string, message: string, consumer: string)\n  }\n  actor Consumer",
    "package VehicleTransportationSystem\n\nimport sysml::core::model::Element\nimport sysml::core::model::Block\nimport sysml::core::model::Package\n\nclass Vehicle {\n  property fuelLevel: Float\n  property maxFuelCapacity: Float\n  property driver: Person\n  property passengers: List[Person]\n}\n\nclass Person {\n  property name: String\n  property age: Integer\n}\n\nclass GasStation {\n  property fuelType: String\n  property fuelPrice: Float\n}\n\nclass TravelTask {\n  property startLocation: Location\n  property endLocation: Location\n  property startTime: DateTime\n  property endTime: DateTime\n}\n\nclass Location {\n  property latitude: Float\n  property longitude: Float\n}\n\nclass RefuelEvent {\n  property fuelLevelBeforeRefuel: Float\n  property fuelLevelAfterRefuel: Float\n  property refuelingLocation: Location\n}\n\nclass BoardingEvent {\n  property boardingLocation: Location\n  property boardingTime: DateTime\n  property passengers: List[Person]\n  property driver: Person\n}\n\nclass AlightingEvent {\n  property alightingLocation: Location\n  property alightingTime: DateTime\n  property passengers: List[Person]\n  property driver",
    "package VehicleFuelManagement\n\nimport sysml::core::Core\nimport sysml::modeling::Modeling\n\nclass VehicleFuelManagementSystem {\n  attribute fuelSupply: FuelSupply\n  attribute fuelReturn: FuelReturn\n  attribute engineUnit: EngineUnit\n  attribute fuelTankAssembly: FuelTankAssembly\n}\n\nclass FuelSupply {\n  attribute fuelOutletPort: FuelOutletPort\n  attribute fuelInletPort: FuelInletPort\n  attribute fuelTemperature: Temperature\n}\n\nclass FuelReturn {\n  attribute fuelReturnPort: FuelReturnPort\n  attribute fuelReturnTemperature: Temperature\n}\n\nclass EngineUnit {\n  attribute fuelInletPort: FuelInletPort\n  attribute fuelOutletPort: FuelOutletPort\n}\n\nclass FuelTankAssembly {\n  attribute fuelTank: FuelTank\n  attribute fuelOutletPort: FuelOutletPort\n  attribute fuelReturnPort: FuelReturnPort\n}\n\nclass FuelTank {\n  attribute fuelCapacity: Capacity\n  attribute fuelLevel: Level\n}\n\nclass FuelOutletPort {\n  attribute portName: String\n  attribute portType: PortType\n  attribute portDirection: PortDirection\n}\n\nclass FuelInletPort {\n  attribute portName: String\n  attribute portType: PortType\n",
    "package VehicleFuelSystem\n\nimport sysml::v2::core::Core\n\nclass FuelTankAssembly {\n  property FuelTank : FuelTank\n  property FuelSupplyPort : FuelSupplyPort\n  property FuelReturnPort : FuelReturnPort\n  property FuelTemperatureSensor : FuelTemperatureSensor\n}\n\nclass Engine {\n  property FuelInterface : FuelInterface\n  property FuelReturnPort : FuelReturnPort\n  property FuelTemperatureSensor : FuelTemperatureSensor\n}\n\nclass FuelInterface {\n  property FuelSupplyPort : FuelSupplyPort\n  property FuelReturnPort : FuelReturnPort\n  parameter FuelTemperature : Float\n}\n\nclass FuelSupplyPort {\n  property FuelFlowRate : Float\n  property FuelPressure : Float\n}\n\nclass FuelReturnPort {\n  property FuelFlowRate : Float\n  parameter FuelTemperature : Float\n}\n\nclass FuelTank {\n  property FuelLevel : Float\n  property FuelTemperature : Float\n}\n\nclass FuelTemperatureSensor {\n  property TemperatureReading : Float\n}\n\nclass Fuel {\n  property FuelType : String\n  property FuelDensity : Float\n}\n\nclass Vehicle {\n  property FuelTankAssembly : FuelTankAssembly\n  property Engine : Engine\n}\n```\n\nNote: The code is written in SysML v2 textual grammar",
    "package com.example.system\n\nimport com.example.system::Scene\nimport com.example.system::Photo\nimport com.example.system::Focusing\nimport com.example.system::IntermediateImage\nimport com.example.system::FinalPhoto\n\nclass System {\n  property: \n    - scene: Scene\n    - photo: Photo\n    - focusing: Focusing\n    - intermediateImage: IntermediateImage\n    - finalPhoto: FinalPhoto\n\n  operation: \n    - captureScene(scene: Scene): IntermediateImage\n    - generateFinalPhoto(intermediateImage: IntermediateImage): FinalPhoto\n    - obtainPhoto(): Photo\n}\n\nclass Scene {\n  property: \n    - sceneId: String\n    - sceneDescription: String\n}\n\nclass Photo {\n  property: \n    - photoId: String\n    - photoDescription: String\n}\n\nclass Focusing {\n  property: \n    - focusingId: String\n    - focusingDescription: String\n}\n\nclass IntermediateImage {\n  property: \n    - intermediateImageId: String\n    - intermediateImageDescription: String\n}\n\nclass FinalPhoto {\n  property: \n    - finalPhotoId: String\n    - finalPhotoDescription: String\n}\n```\n\nSysML v2 Textual Grammar:\n```",
    "package photography_workflow\n\nimport sysml::core::model::Element\nimport sysml::core::model::Block\nimport sysml::core::model::Package\n\npackage photography_workflow {\n  class Scene {\n    property selected: Boolean\n  }\n\n  class Focusing {\n    property focused: Boolean\n  }\n\n  class Shooting {\n    property shot: Boolean\n  }\n\n  class IntermediateImage {\n    property image: String\n  }\n\n  class FinalImage {\n    property image: String\n  }\n\n  class PhotographyWorkflow {\n    property scene: Scene\n    property focusing: Focusing\n    property shooting: Shooting\n    property intermediate_image: IntermediateImage\n    property final_image: FinalImage\n  }\n\n  block PhotographyWorkflow {\n    description: \"The entire workflow is completed sequentially through the two steps of 'Focusing' and 'Shooting'.\"\n    element PhotographyWorkflow\n  }\n\n  package workflow_steps {\n    block Focusing {\n      description: \"The system automatically performs focusing on the selected scene.\"\n      element Focusing\n    }\n\n    block Shooting {\n      description: \"The system carries out the shooting operation based on the focused image.\"\n      element Shooting\n    }\n  }\n}\n```\n\n\n**Note:** The output model is a",
    "package photography_workflow\n\nimport sysml::core::model::Element\nimport sysml::core::model::Block\nimport sysml::core::model::Package\n\nclass Scene {\n  property frame: Frame\n  property image: Image\n}\n\nclass Frame {\n  property scene: Scene\n  property focal_length: Float\n  property aperture: Float\n}\n\nclass Image {\n  property frame: Frame\n  property resolution: Float\n  property brightness: Float\n}\n\nclass Camera {\n  property scene: Scene\n  property image: Image\n  property shooting_mode: Enum { Auto, Manual }\n}\n\nclass PhotographyWorkflow {\n  property camera: Camera\n  property scene: Scene\n  property image: Image\n  property shooting_mode: Enum { Auto, Manual }\n}\n\npackage photography_workflow::subsystem {\n  class FocusingSubsystem {\n    property camera: Camera\n    property scene: Scene\n    property image: Image\n  }\n\n  class ShootingSubsystem {\n    property camera: Camera\n    property scene: Scene\n    property image: Image\n  }\n}\n```\n\n\nPlease note that the output model is a SysML 2 textual model. The model describes the system's structure and behavior using classes, properties, and relationships. The model",
    "package photography_system\n\nimport sysml::core::model::Element\nimport sysml::core::model::Block\nimport sysml::core::model::Package\n\nclass PhotographySystem extends Block {\n  description: \"Automate photography process\"\n  isPartOf: photography_system\n}\n\nclass Scene extends Block {\n  description: \"Shooting scene\"\n  isPartOf: photography_system\n}\n\nclass Image extends Block {\n  description: \"Processed image\"\n  isPartOf: photography_system\n}\n\nclass Photograph extends Block {\n  description: \"Final photograph\"\n  isPartOf: photography_system\n}\n\nclass FocusProcessing extends Block {\n  description: \"Focus processing on scene\"\n  isPartOf: photography_system\n  produces: Image\n}\n\nclass ShootingOperation extends Block {\n  description: \"Convert image into photograph\"\n  isPartOf: photography_system\n  consumes: Image\n  produces: Photograph\n}\n\nclass PhotographyWorkflow extends Block {\n  description: \"Seamless integration of focus processing and shooting operation\"\n  isPartOf: photography_system\n  includes: FocusProcessing, ShootingOperation\n}\n```\n\nNote: The code is written in SysML v2 textual grammar. The code is a model of the system, describing its",
    "package PhotographyWorkflow\n\nimport { SysML2 } from \"https://sysml2.org/sysml2\";\n\nclass Scene {\n  attribute: {\n    name: string;\n  };\n}\n\nclass Image {\n  attribute: {\n    frame: string;\n  };\n}\n\nclass Picture {\n  attribute: {\n    image: Image;\n  };\n}\n\nclass Focus {\n  attribute: {\n    scene: Scene;\n  };\n  operation: {\n    focus: () => Image;\n  };\n}\n\nclass Shoot {\n  attribute: {\n    image: Image;\n  };\n  operation: {\n    shoot: () => Picture;\n  };\n}\n\nclass PhotographyWorkflow {\n  attribute: {\n    scene: Scene;\n  };\n  operation: {\n    start: () => Picture;\n  };\n}\n```\n\nPlease note that the input is a natural language description of a system, and the output is a SysML v2 textual model. The task is to extract key functional/non-functional information from the input and map them to various grammar in SysML v2 textual grammar. \n\nHere is the solution to the problem:\n\n```sysml\npackage PhotographyWorkflow\n\nimport { SysML2 } from \"https://sysml2.org/sysml2\";\n\nclass Scene {\n  attribute: {\n    name",
    "package photography_workflow\n\nimport sysml::core::model::Element\nimport sysml::core::model::Block\nimport sysml::core::model::Package\n\nclass Scene {\n  property selected: Boolean\n}\n\nclass Camera {\n  property focus: Boolean\n  property image: Image\n}\n\nclass Image {\n  property sharpness: Double\n}\n\nclass PhotographyWorkflow {\n  property scene: Scene\n  property camera: Camera\n  property image: Image\n}\n\nclass FocusOperation {\n  property result: Boolean\n}\n\nclass ShootOperation {\n  property result: Boolean\n}\n\nclass PhotographyWorkflowOperation {\n  property sequence: [FocusOperation, ShootOperation]\n}\n\nclass PhotographyWorkflow {\n  property operation: PhotographyWorkflowOperation\n}\n```\n\nNote: The output model is a SysML 2 textual grammar model. The model includes classes, properties, and relationships between them. The classes represent the main entities in the photography workflow, such as Scene, Camera, Image, and PhotographyWorkflow. The properties represent the attributes of these classes, such as selected, focus, image, sharpness, result, and sequence. The relationships between the classes are represented by the properties, such as scene, camera, image, operation, and sequence. The PhotographyWorkflowOperation",
    "package system\n\nimport { sysml } from \"https://sysml.dev/sysml\";\n\n// Define the system\nsystem \"Photography System\" {\n  // Define the system's purpose\n  purpose \"Capture high-quality photographs\"\n  \n  // Define the system's context\n  context \"Workflow for capturing high-quality photographs\"\n  \n  // Define the system's functional requirements\n  functionalRequirement \"Select a scene\"\n  functionalRequirement \"Perform focusing on the scene\"\n  functionalRequirement \"Generate an image\"\n  functionalRequirement \"Evaluate the image for focus quality\"\n  functionalRequirement \"Determine if the image is well-focused\"\n  functionalRequirement \"Proceed with the shooting operation\"\n  functionalRequirement \"Convert the focused image into a photograph\"\n  functionalRequirement \"Produce the final photo\"\n  \n  // Define the system's non-functional requirements\n  nonFunctionalRequirement \"Ensure shooting only takes place when the focus is appropriate\"\n  nonFunctionalRequirement \"Improve the clarity and quality of the resulting photographs\"\n  \n  // Define the system's interfaces\n  interface \"Scene Input\"\n  interface \"Image Output\"\n  interface \"Photograph Output\"\n}\n```\n\n**Step 1: Extract key functional/non-functional information.**\n\n*   Functional Requirements:\n    *",
    "package photography_workflow\n\nimport sysml::core::model::Element\nimport sysml::core::model::Block\nimport sysml::core::model::Package\n\npackage photography_workflow {\n  class Scene {\n    property current_scene: String\n  }\n\n  class Focus {\n    property image: Image\n    operation focus(image: Image): Image\n  }\n\n  class Shooting {\n    property image: Image\n    operation shoot(image: Image): Image\n  }\n\n  class Display {\n    property image: Image\n    operation display(image: Image): Void\n  }\n\n  class PhotographyWorkflow {\n    property scene: Scene\n    property focus: Focus\n    property shooting: Shooting\n    property display: Display\n    operation take_photo(): Void\n  }\n}\n```\n```sysml\npackage photography_workflow {\n  class Scene {\n    property current_scene: String\n  }\n\n  class Focus {\n    property image: Image\n    operation focus(image: Image): Image\n  }\n\n  class Shooting {\n    property image: Image\n    operation shoot(image: Image): Image\n  }\n\n  class Display {\n    property image: Image\n    operation display(image: Image): Void\n  }\n\n  class PhotographyWorkflow {\n    property scene: Scene\n   ",
    "package VehicleBrakingSystem\n\nblock VehicleBrakingSystem\n  description \"Automatic braking control system for vehicles\"\n  property\n    startCondition: Boolean\n      description \"Vehicle key turned to start position\"\n      value \"true\"\n  end property\n  property\n    brakePedalStatus: Boolean\n      description \"Status of brake pedal\"\n      value \"false\"\n  end property\n  property\n    tractionInformation: TractionInformation\n      description \"Traction information such as road adhesion\"\n  end property\n  property\n    brakePressure: Float\n      description \"Brake pressure generated when driver presses brake pedal\"\n  end property\n  property\n    modulationFrequency: Float\n      description \"Modulation frequency during braking process\"\n  end property\n  operation\n    activateSystem: Operation\n      description \"Automatically activate system when vehicle key turned to start position\"\n      parameters\n        startCondition: Boolean\n      end parameters\n      effect\n        startCondition := true\n      end effect\n  end operation\n  operation\n    monitorBrakePedal: Operation\n      description \"Continuously monitor brake pedal status\"\n      parameters\n        brakePedalStatus: Boolean\n      end parameters\n      effect\n        brakePed",
    "// Define the system\nsystem BatteryChargingControlSystem {\n  // Define the system's purpose\n  purpose: \"Ensure healthy charging of the battery and enhance convenience and safety of use.\"\n  \n  // Define the system's functional requirements\n  functionalRequirements: [\n    \"Monitor the current battery level in real time.\",\n    \"Automatically supply charge when the battery level is below 100%.\",\n    \"Automatically terminate the charging process when the battery level reaches or exceeds 100%.\"\n  ]\n  \n  // Define the system's non-functional requirements\n  nonFunctionalRequirements: [\n    \"Ensure safe and efficient charging of the battery.\",\n    \"Minimize manual intervention during the charging process.\"\n  ]\n  \n  // Define the system's components\n  components: [\n    \"Battery\",\n    \"Charging Controller\",\n    \"Power Supply\"\n  ]\n  \n  // Define the system's interfaces\n  interfaces: [\n    \"Battery Level Interface\",\n    \"Charging Control Interface\"\n  ]\n}\n```\n```sysml\n// Define the component\ncomponent Battery {\n  // Define the component's purpose\n  purpose: \"Store electrical energy.\"\n  \n  // Define the component's functional requirements\n  functionalRequirements: [\n    \"Store electrical energy",
    "// Define the system\nsystem BatteryChargingSystem {\n  // Define the system's purpose\n  purpose: \"Automate the battery charging process to ensure safe and reliable charging.\"\n\n  // Define the system's behavior\n  behavior: [\n    // Define the charging process\n    \"Monitor the battery level and replenish it if it is below 100%.\",\n    \"Continue the charging process until the battery level reaches or exceeds 100%.\",\n    \"Automatically terminate the charging process when the battery level reaches or exceeds 100%.\"\n  ]\n\n  // Define the system's constraints\n  constraints: [\n    \"The battery level must be below 100% to replenish it.\",\n    \"The charging process must be fully automated to prevent overcharging.\"\n  ]\n\n  // Define the system's interfaces\n  interfaces: [\n    \"Input: Battery level sensor\",\n    \"Output: Charging control signal\"\n  ]\n}\n```\n```sysml\n// Define the charging process\nprocess ChargingProcess {\n  // Define the process's purpose\n  purpose: \"Continuously monitor and control the battery charging process.\"\n\n  // Define the process's behavior\n  behavior: [\n    \"Monitor the battery level.\",\n    \"Replenish the battery if",
    "// Define the system\nsystem CameraSystem {\n  // Define the system's purpose\n  purpose: \"Capture high-quality photos of various scenes\"\n  \n  // Define the system's context\n  context: \"User selects scene, camera captures photo\"\n  \n  // Define the system's functional requirements\n  functionalRequirements: [\n    \"Obtain clear and realistic image through autofocus\",\n    \"Capture image as photograph\",\n    \"Record and save photos\"\n  ]\n  \n  // Define the system's non-functional requirements\n  nonFunctionalRequirements: [\n    \"High-quality photos\",\n    \"Automatic focusing and imaging\",\n    \"User-friendly interface\"\n  ]\n  \n  // Define the system's components\n  components: [\n    \"Autofocus Subsystem\",\n    \"Imaging Subsystem\"\n  ]\n  \n  // Define the system's interfaces\n  interfaces: [\n    \"User Input Interface\",\n    \"Image Output Interface\"\n  ]\n}\n```\n```sysml\n// Define the autofocus subsystem\nsubsystem AutofocusSubsystem {\n  // Define the subsystem's purpose\n  purpose: \"Obtain clear and realistic image\"\n  \n  // Define the subsystem's context\n  context: \"User selects scene, camera captures photo\"\n  \n  // Define",
    "// Define the system\nsystem DigitalCameraSystem {\n  // Define the requirements\n  requirement \"Automated Shooting Process\" {\n    description: \"The entire shooting process is fully automated.\"\n  }\n  requirement \"Efficient Shooting Experience\" {\n    description: \"The system ensures an efficient and convenient shooting experience.\"\n  }\n  requirement \"High-Quality Photos\" {\n    description: \"The system outputs high-quality photos.\"\n  }\n  \n  // Define the functional components\n  block CameraModule {\n    description: \"The camera module is responsible for capturing images.\"\n  }\n  block ImagingModule {\n    description: \"The imaging module is responsible for generating images that meet the requirements.\"\n  }\n  block FocusModule {\n    description: \"The focus module is responsible for automatically focusing on the selected scene.\"\n  }\n  block SceneSelectionModule {\n    description: \"The scene selection module is responsible for selecting the shooting scene.\"\n  }\n  \n  // Define the relationships between components\n  association \"CameraModule -> ImagingModule\" {\n    description: \"The camera module captures images and sends them to the imaging module for processing.\"\n  }\n  association \"ImagingModule -> FocusModule\" {\n    description: \"The imaging module sends the image requirements to the focus",
    "package VehicleSimulation\n\nimport sysml::core::Model\nimport sysml::core::Element\nimport sysml::core::Relationship\n\nclass Vehicle {\n  attribute mass: Quantity\n  attribute initialPosition: Quantity\n  attribute initialVelocity: Quantity\n  attribute timeStep: Quantity\n  attribute powerInput: Quantity\n  attribute speed: Quantity\n  attribute position: Quantity\n}\n\nclass Simulation {\n  attribute vehicle: Vehicle\n  attribute time: Quantity\n  attribute trajectory: Sequence<Quantity>\n}\n\nclass PowerInput {\n  attribute time: Quantity\n  attribute power: Quantity\n}\n\nclass Trajectory {\n  attribute position: Quantity\n}\n\nclass Quantity {\n  attribute value: Number\n  attribute unit: String\n}\n\nclass Number {\n  attribute value: Double\n}\n\nclass Double {\n  attribute value: Float\n}\n\nclass Float {\n  attribute value: Real\n}\n\nclass Real {\n  attribute value: Decimal\n}\n\nclass Decimal {\n  attribute value: String\n}\n\nclass Sequence {\n  attribute elements: List<Quantity>\n}\n\nclass List {\n  attribute elements: List<Quantity>\n}\n\nclass Time {\n  attribute value: Decimal\n}\n\nclass Position {\n  attribute value: Decimal\n}\n\nclass Speed {\n  attribute value: Decimal\n}\n\nclass",
    "// Define the system\nsystem CameraSystem {\n  // Define the system's purpose\n  purpose: \"Capture and display images\"\n  \n  // Define the system's functional requirements\n  functionalRequirements: [\n    \"Capture images from the scene\",\n    \"Generate images from captured data\",\n    \"Display images on the screen\"\n  ]\n  \n  // Define the system's non-functional requirements\n  nonFunctionalRequirements: [\n    \"Seamless and automatic integration of scene processing, image generation, and photo display\",\n    \"Simple shooting operation\"\n  ]\n  \n  // Define the system's interfaces\n  interfaces: [\n    \"Input: User input of the current scene\",\n    \"Output: Display of the captured photo on the screen\"\n  ]\n  \n  // Define the system's components\n  components: [\n    \"Scene Processing Unit\",\n    \"Image Generation Unit\",\n    \"Display Unit\"\n  ]\n  \n  // Define the system's behaviors\n  behaviors: [\n    \"Focusing process on the scene\",\n    \"Capturing the obtained image\",\n    \"Displaying the captured photo on the screen\"\n  ]\n}\n```\n```sysml\n// Define the Scene Processing Unit\nblock SceneProcessingUnit {\n  // Define the unit's purpose",
    "// Define the system\nsystem CameraSystem {\n  // Define the ports\n  port viewPort: ViewPort {\n    // Define the interfaces\n    interface SelectScene: SelectSceneInterface {\n      // Define the operations\n      operation selectScene(): void\n    }\n  }\n  port displayPort: DisplayPort {\n    // Define the interfaces\n    interface DisplayPicture: DisplayPictureInterface {\n      // Define the operations\n      operation displayPicture(): void\n    }\n  }\n  // Define the components\n  component Camera {\n    // Define the interfaces\n    interface FocusScene: FocusSceneInterface {\n      // Define the operations\n      operation focusScene(): void\n    }\n    interface CaptureImage: CaptureImageInterface {\n      // Define the operations\n      operation captureImage(): void\n    }\n  }\n  component ImageProcessor {\n    // Define the interfaces\n    interface GeneratePicture: GeneratePictureInterface {\n      // Define the operations\n      operation generatePicture(): void\n    }\n  }\n  component Display {\n    // Define the interfaces\n    interface DisplayPicture: DisplayPictureInterface {\n      // Define the operations\n      operation displayPicture(): void\n    }\n  }\n}\n\n// Define the interfaces\ninterface SelectSceneInterface",
    "// Define the system\nsystem System {\n  // Define the sensor management capability\n  capability SensorManagement {\n    // Define the sensor monitoring and updating\n    operation MonitorAndUpdateSensors {\n      // Define the sensor ready condition\n      condition SensorReady {\n        // Define the sensor status\n        property SensorStatus {\n          // Define the ready state\n          value Ready\n        }\n      }\n    }\n  }\n}\n```\n```sysml\n// Define the sensor\nsensor Sensor {\n  // Define the sensor status\n  property SensorStatus {\n    // Define the possible states\n    value Ready | NotReady\n  }\n}\n```\n```sysml\n// Define the system behavior\nbehavior SystemBehavior {\n  // Define the sensor management behavior\n  behavior SensorManagementBehavior {\n    // Define the sensor monitoring and updating\n    operation MonitorAndUpdateSensors {\n      // Define the sensor traversal\n      sequence TraverseSensors {\n        // Define the sensor processing\n        action ProcessSensor {\n          // Define the sensor update\n          action UpdateSensor {\n            // Define the sensor update condition\n            condition SensorReady {\n              // Define the sensor status\n              property SensorStatus {\n                // Define the ready state\n                value Ready\n              }\n            }\n         ",
    "stateMachine {\n  name: \"Vehicle State Machine\"\n  initial: \"off\"\n  states: [\n    { name: \"off\", entry: \"vehicleOffEntry\", exit: \"vehicleOffExit\" },\n    { name: \"starting\", entry: \"vehicleStartingEntry\", exit: \"vehicleStartingExit\" },\n    { name: \"on\", entry: \"vehicleOnEntry\", exit: \"vehicleOnExit\" }\n  ]\n  transitions: [\n    { from: \"off\", to: \"starting\", event: \"vehicleStartSignal\", guard: \"vehicleStartSignalReceived\" },\n    { from: \"starting\", to: \"on\", event: \"vehiclePowerOnSignal\", guard: \"vehiclePowerOnSignalReceived\" },\n    { from: \"on\", to: \"off\", event: \"vehicleShutdownSignal\", guard: \"vehicleShutdownSignalReceived\" }\n  ]\n}\n```\n```sysml\nbehavior {\n  name: \"vehicleOffEntry\"\n  description: \"Vehicle is in off state, no power consumption\"\n}\nbehavior {\n  name: \"vehicleOffExit\"\n  description: \"Vehicle is transitioning out of off state\"\n}\nbehavior {\n  name: \"vehicleStartingEntry\"\n  description: \"Vehicle",
    "// Define the system\nsystem VehicleControlSystem {\n  // Define the states\n  state Off {\n    // Define the transitions\n    transition VehicleStartSignal -> Starting {\n      // Define the guard\n      guard VehicleStartSignal\n    }\n  }\n  state Starting {\n    // Define the transitions\n    transition VehicleOnSignal -> On {\n      // Define the guard\n      guard VehicleOnSignal\n    }\n  }\n  state On {\n    // Define the transitions\n    transition VehicleOffSignal -> Off {\n      // Define the guard\n      guard VehicleOffSignal\n    }\n  }\n}\n```\n```sysml\n// Define the signals\nsignal VehicleStartSignal {\n  // Define the description\n  description \"Signal to start the vehicle\"\n}\nsignal VehicleOnSignal {\n  // Define the description\n  description \"Signal to turn on the vehicle\"\n}\nsignal VehicleOffSignal {\n  // Define the description\n  description \"Signal to turn off the vehicle\"\n}\n``` ```sysml\n// Define the system behavior\nbehavior VehicleControlBehavior {\n  // Define the initial state\n  initial state Off\n  // Define the state machine\n  state machine {\n    // Define the states\n    state Off {\n      // Define the transitions\n     ",
    "// Define the system\nsystem VehiclePowerManagementSystem {\n  // Define the system's purpose\n  purpose \"Manage the power status of a vehicle\";\n  \n  // Define the system's context\n  context \"Vehicle power management system\";\n  \n  // Define the system's boundary\n  boundary \"Vehicle electrical system\";\n  \n  // Define the system's internal structure\n  internalStructure {\n    // Define the system's components\n    component VehicleController {\n      // Define the component's purpose\n      purpose \"Control the vehicle's power status\";\n      \n      // Define the component's ports\n      port \"Vehicle start command\" : in;\n      port \"Vehicle started signal\" : in;\n      port \"Vehicle shutdown command\" : in;\n      port \"Parking brake engagement\" : out;\n      \n      // Define the component's internal structure\n      internalStructure {\n        // Define the component's internal components\n        component PowerSupply {\n          // Define the component's purpose\n          purpose \"Supply power to the vehicle's functional units\";\n          \n          // Define the component's ports\n          port \"Power supply\" : out;\n        }\n        \n        component SelfDiagnosis {\n          // Define the component's purpose\n          purpose \"Perform self-diagnosis operations\";\n          \n         ",
    "stateMachine {\n  name: \"Vehicle State Machine\"\n  initial: \"shutdown\"\n  states: [\n    { name: \"shutdown\", entry: \"shutdown_entry\", exit: \"shutdown_exit\" },\n    { name: \"start-up\", entry: \"start_up_entry\", exit: \"start_up_exit\" },\n    { name: \"running\", entry: \"running_entry\", exit: \"running_exit\" }\n  ]\n  transitions: [\n    { from: \"shutdown\", to: \"start-up\", event: \"vehicle_start_signal\", guard: \"vehicle_in_shutdown_state\" },\n    { from: \"start-up\", to: \"running\", event: \"vehicle_started_signal\", guard: \"vehicle_in_start_up_state\" },\n    { from: \"running\", to: \"shutdown\", event: \"vehicle_shutdown_signal\", guard: \"vehicle_in_running_state\" }\n  ]\n}\n```\n```sysml\noperation {\n  name: \"shutdown_entry\"\n  description: \"Perform shutdown actions\"\n  parameters: [\n    { name: \"vehicle_status\", type: \"VehicleStatus\" }\n  ]\n  return: \"VehicleStatus\"\n  body: \"\"\"\n    vehicle_status = VehicleStatus.SHUTDOWN\n    # Perform shutdown actions\n ",
    "package VehiclePowerManagement\n\nimport sysml::core::model::Element\nimport sysml::core::model::Block\nimport sysml::core::model::Package\n\nclass Vehicle {\n  attribute operatingState: State\n  attribute healthState: HealthState\n}\n\nclass State {\n  attribute value: String\n  attribute isCurrent: Boolean\n}\n\nclass HealthState {\n  attribute value: String\n  attribute isCurrent: Boolean\n}\n\nclass StartSignal {\n  attribute value: String\n}\n\nclass OffSignal {\n  attribute value: String\n}\n\nclass OnSignal {\n  attribute value: String\n}\n\nclass PowerManagementSystem {\n  attribute operatingState: State\n  attribute healthState: HealthState\n  attribute startSignal: StartSignal\n  attribute offSignal: OffSignal\n  attribute onSignal: OnSignal\n}\n\nclass VehiclePowerManagementSystem extends PowerManagementSystem {\n  attribute vehicle: Vehicle\n}\n\nclass VehiclePowerManagementSystemBehavior {\n  operation startVehicle: () -> State\n  operation stopVehicle: () -> State\n  operation switchVehicleToOn: () -> State\n  operation switchVehicleToOff: () -> State\n}\n\nclass VehiclePowerManagementSystemBehavior extends VehiclePowerManagementSystemBehavior {\n  operation startVehicle: ()",
    "package VehicleHealthManagement\n\nimport sysml::core::ModelElement\nimport sysml::core::Package\nimport sysml::core::Block\nimport sysml::core::Port\nimport sysml::core::Property\nimport sysml::core::Operation\nimport sysml::core::Parameter\nimport sysml::core::ValueProperty\nimport sysml::core::StringProperty\nimport sysml::core::BooleanProperty\nimport sysml::core::Enumeration\nimport sysml::core::Constraint\n\nclass VehicleHealthManagement extends ModelElement {\n  package VehicleHealthManagement {\n    class Vehicle extends Block {\n      property Temperature: ValueProperty {\n        type: Float\n        value: 0.0\n      }\n      property MaxAllowableTemperature: ValueProperty {\n        type: Float\n        value: 100.0\n      }\n      property HealthStatus: StringProperty {\n        type: Enumeration {\n          value Normal\n          value Degraded\n        }\n        value: Normal\n      }\n      operation SenseTemperature(): Operation {\n        parameter Temperature: Float\n        return Temperature\n      }\n      operation CompareTemperature(): Operation {\n        parameter Temperature: Float\n        parameter MaxAllowableTemperature: Float\n        return Temperature > MaxAllow",
    "// Define the system\nsystem Server {\n  // Define the states\n  state off {\n    // Define the transitions\n    transition start {\n      // Define the guard\n      guard startCommandReceived {\n        // Define the effect\n        effect {\n          // Transition to the waiting state\n          transition to waiting\n        }\n      }\n    }\n  }\n  state waiting {\n    // Define the transitions\n    transition request {\n      // Define the guard\n      guard requestMessageReceived {\n        // Define the effect\n        effect {\n          // Transition to the response state\n          transition to response\n        }\n      }\n    }\n    transition dailyReset {\n      // Define the guard\n      guard dailyResetTimeReached {\n        // Define the effect\n        effect {\n          // Transition to the off state\n          transition to off\n        }\n      }\n    }\n  }\n  state response {\n    // Define the transitions\n    transition timeout {\n      // Define the guard\n      guard fiveMinutesElapsed {\n        // Define the effect\n        effect {\n          // Transition to the waiting state\n          transition to waiting\n        }\n      }\n    }\n  }\n}\n```\n```sysml\n// Define the system\nsystem Server {\n  // Define the states\n  state",
    "package VehicleStartStopSystem\n\nimport sysml::core::model::Element\nimport sysml::core::model::Block\nimport sysml::core::model::Package\n\nclass StartStopSystem extends Block {\n  property startSignal: Signal\n  property powerOnSignal: Signal\n  property brakePedal: Signal\n  property stopSignal: Signal\n  property controller: Block\n  property selfCheck: Activity\n  property powerSupply: Activity\n  property parkingBrake: Activity\n  property operatingState: State\n  property offState: State\n}\n\nclass StartStopSystem::startSignal extends Signal {\n  property name: \"start signal\"\n  property description: \"Signal to start the vehicle\"\n}\n\nclass StartStopSystem::powerOnSignal extends Signal {\n  property name: \"power-on signal\"\n  property description: \"Signal to power on the vehicle\"\n}\n\nclass StartStopSystem::brakePedal extends Signal {\n  property name: \"brake pedal\"\n  property description: \"Signal to detect brake pedal depression\"\n}\n\nclass StartStopSystem::stopSignal extends Signal {\n  property name: \"stop signal\"\n  property description: \"Signal to stop the vehicle\"\n}\n\nclass StartStopSystem::controller extends Block",
    "package VehicleControlSystem\n\nblock VehicleControlSystem\n  description \"System for controlling vehicle start-stop and status management\"\n  property startSignal: Signal\n  property vehicleOnSignal: Signal\n  property shutdownSignal: Signal\n  property startControlSignal: Signal\n  property vehicleState: Enum { \"off\", \"started\" }\n  property powerSupply: Boolean\n  property selfCheck: Boolean\n  property parkingBrakeApplied: Boolean\n  property vehicleController: Block\n  relationship startSignal->>startControlSignal\n  relationship vehicleOnSignal->>startControlSignal\n  relationship shutdownSignal->>vehicleState\n  relationship vehicleState->>powerSupply\n  relationship vehicleState->>selfCheck\n  relationship vehicleState->>parkingBrakeApplied\n  relationship vehicleState->>vehicleController\n```\n```sysml\npackage VehicleControlSystem\n\nblock Vehicle\n  description \"Vehicle entity\"\n  property vehicleState: Enum { \"off\", \"started\" }\n  property powerSupply: Boolean\n  property selfCheck: Boolean\n  property parkingBrakeApplied: Boolean\n  property vehicleController: Block\n  relationship vehicleState->>powerSupply\n  relationship vehicleState->>selfCheck\n  relationship vehicle",
    "package cruise_control_system\n\nimport sysml::core::model::Element\nimport sysml::core::model::Block\nimport sysml::core::model::Port\nimport sysml::core::model::Property\nimport sysml::core::model::ValueProperty\nimport sysml::core::model::Event\nimport sysml::core::model::Association\n\nclass Driver {\n  property setSpeed: ValueProperty\n}\n\nclass CruiseController {\n  property setSpeedCommand: ValueProperty\n  property actualVehicleSpeed: ValueProperty\n  property fuelControlCommand: ValueProperty\n}\n\nclass Speedometer {\n  property actualVehicleSpeed: ValueProperty\n}\n\nclass Engine {\n  property fuelControlCommand: ValueProperty\n}\n\nclass Vehicle {\n  property actualVehicleSpeed: ValueProperty\n}\n\nassociation Driver--CruiseController {\n  event setSpeedCommand: Event\n}\n\nassociation CruiseController--Speedometer {\n  event actualVehicleSpeed: Event\n}\n\nassociation CruiseController--Engine {\n  event fuelControlCommand: Event\n}\n\nassociation Speedometer--CruiseController {\n  event actualVehicleSpeed: Event\n}\n\nassociation Engine--CruiseController {\n  event fuelControlCommand: Event\n}\n\nblock CruiseControlSystem {\n  part driver: Driver\n",
    "package VehicleCruiseControl\n\nimport sysml::v2::core::Core\n\nclass Vehicle {\n  attribute speed: Real\n}\n\nclass Speedometer {\n  attribute speed: Real\n}\n\nclass Engine {\n  attribute power: Real\n}\n\nclass CruiseController {\n  attribute setSpeed: Real\n  attribute actualSpeed: Real\n  attribute throttleCommand: Real\n  attribute powerAdjustment: Real\n}\n\nclass Driver {\n  attribute setSpeedCommand: Real\n}\n\nclass Operation {\n  attribute setSpeed: Real\n}\n\nclass VehicleSystem {\n  attribute speed: Real\n  attribute power: Real\n}\n\nclass CruiseControl {\n  attribute setSpeed: Real\n  attribute actualSpeed: Real\n  parameter throttleCommand: Real\n  parameter powerAdjustment: Real\n}\n\nclass VehicleCruiseControlSystem {\n  attribute setSpeed: Real\n  attribute actualSpeed: Real\n  attribute throttleCommand: Real\n  attribute powerAdjustment: Real\n}\n\nclass VehicleCruiseControlSystem {\n  attribute setSpeed: Real\n  attribute actualSpeed: Real\n  attribute throttleCommand: Real\n  attribute powerAdjustment: Real\n}\n\nclass VehicleCruiseControlSystem {\n  attribute setSpeed: Real\n  attribute actualSpeed: Real\n",
    "// Define the system\nsystem CruiseControlSystem {\n  // Define the system's purpose\n  purpose \"Automotive cruise control system\";\n  \n  // Define the system's context\n  context \"Vehicle speed control\";\n  \n  // Define the system's boundary\n  boundary \"Vehicle\";\n  \n  // Define the system's internal structure\n  internalStructure {\n    // Define the system's components\n    component Driver {\n      // Define the Driver's purpose\n      purpose \"Send set speed command\";\n      \n      // Define the Driver's context\n      context \"In-vehicle control interface\";\n      \n      // Define the Driver's ports\n      port \"SetSpeedCommandPort\" {\n        // Define the port's type\n        type \"SetSpeedCommand\";\n      }\n    }\n    \n    component CruiseController {\n      // Define the CruiseController's purpose\n      purpose \"Compare set speed with current vehicle speed and generate throttle control command\";\n      \n      // Define the CruiseController's context\n      context \"Vehicle speed control\";\n      \n      // Define the CruiseController's ports\n      port \"SetSpeedPort\" {\n        // Define the port's type\n        type \"SetSpeedCommand\";\n      }\n      \n      port \"CurrentVehicleSpeedPort\" {\n        // Define the",
    "package automotive_cruise_control\n\nimport sysml::core::model::Element\nimport sysml::core::model::Block\nimport sysml::core::model::Package\n\npackage automotive_cruise_control {\n  class Driver {\n    attribute desired_speed: Float\n  }\n\n  class CruiseController {\n    attribute current_speed: Float\n    attribute throttle_instruction: Float\n  }\n\n  class Engine {\n    attribute throttle_control: Float\n  }\n\n  class Speedometer {\n    attribute speed: Float\n  }\n\n  class Vehicle {\n    attribute speed: Float\n  }\n\n  class Command {\n    attribute speed: Float\n  }\n\n  class System {\n    attribute desired_speed: Float\n    attribute current_speed: Float\n    attribute throttle_instruction: Float\n    attribute throttle_control: Float\n  }\n\n  block CruiseControlSystem {\n    part driver: Driver\n    part cruise_controller: CruiseController\n    part engine: Engine\n    part speedometer: Speedometer\n    part vehicle: Vehicle\n    part command: Command\n  }\n\n  operation calculate_throttle_instruction {\n    input: desired_speed: Float\n    input: current_speed: Float\n    output: throttle_instruction: Float\n  }\n\n  operation adjust_throttle {\n    input: throttle",
    "package automotive_cruise_control\n\nimport sysml::v2::core::model::Element\nimport sysml::v2::core::model::Block\nimport sysml::v2::core::model::Port\nimport sysml::v2::core::model::Property\nimport sysml::v2::core::model::ValueProperty\nimport sysml::v2::core::model::String\n\nclass Driver {\n  property set_speed: ValueProperty(String)\n}\n\nclass CruiseControl {\n  property set_speed: ValueProperty(String)\n  property actual_speed: ValueProperty(String)\n  property engine_fuel_control: ValueProperty(String)\n}\n\nclass SpeedSensor {\n  property actual_speed: ValueProperty(String)\n}\n\nclass Engine {\n  property engine_fuel_control: ValueProperty(String)\n}\n\nclass CruiseController {\n  property set_speed: ValueProperty(String)\n  property actual_speed: ValueProperty(String)\n  property engine_fuel_control: ValueProperty(String)\n}\n\nclass CruiseControlInterface {\n  property set_speed: ValueProperty(String)\n}\n\nclass Vehicle {\n  property set_speed: ValueProperty(String)\n  property actual_speed: ValueProperty(String)\n  property engine_fuel_control: ValueProperty(String)\n}\n\nclass DataPort {\n  property data:",
    "package VehicleCruiseControl\n\nimport sysml::core::model::Element\nimport sysml::core::model::Block\nimport sysml::core::model::Port\nimport sysml::core::model::Interface\nimport sysml::core::model::Operation\nimport sysml::core::model::Parameter\nimport sysml::core::model::ValueProperty\nimport sysml::core::model::String\n\nclass VehicleCruiseControlSystem extends Block {\n  // Ports\n  port SetSpeedCommandPort: Port {\n    interface: Interface {\n      operation: Operation {\n        name: \"sendSetSpeedCommand\"\n        parameter: Parameter {\n          name: \"setSpeed\"\n          type: ValueProperty {\n            type: String\n          }\n        }\n      }\n    }\n  }\n\n  port SpeedSensorPort: Port {\n    interface: Interface {\n      operation: Operation {\n        name: \"readSpeed\"\n        parameter: Parameter {\n          name: \"speed\"\n          type: ValueProperty {\n            type: String\n          }\n        }\n      }\n    }\n  }\n\n  port EngineControllerPort: Port {\n    interface: Interface {\n      operation: Operation {\n        name: \"processFuelControlCommand\"\n        parameter: Parameter {\n         ",
    "package VehicleLifecycleManagement\n\nimport sysml::core::model::Element\nimport sysml::core::model::Package\n\nclass Vehicle {\n  property: id: String\n  property: assemblyDate: Date\n  property: deliveryDate: Date\n  property: owner: Owner\n  property: driver: Driver\n  property: scrappingDate: Date\n}\n\nclass Owner {\n  property: id: String\n  property: name: String\n  property: address: String\n}\n\nclass Driver {\n  property: id: String\n  property: name: String\n  property: licenseNumber: String\n}\n\nclass VehicleLifecycle {\n  property: id: String\n  property: vehicle: Vehicle\n  property: stage: Stage\n  property: owner: Owner\n  property: driver: Driver\n  property: deliveryDate: Date\n  property: scrappingDate: Date\n}\n\nenum Stage {\n  ASSEMBLY\n  DELIVERY\n  OWNERSHIP\n  DRIVING\n  SCRAPPING\n}\n\nclass VehicleAssembly {\n  property: id: String\n  property: vehicle: Vehicle\n  property: assemblyDate: Date\n}\n\nclass VehicleDelivery {\n  property: id: String\n  property: vehicle",
    "package Vehicle\n\n  class Vehicle {\n    attribute mass: Quantity\n    attribute operationalStatus: OperationalStatus\n  }\n\n  class OperationalStatus {\n    attribute gearSetting: GearSetting\n    attribute acceleratorPedalPosition: AcceleratorPedalPosition\n  }\n\n  class Engine {\n    attribute operationalStatus: OperationalStatus\n  }\n\n  class Driver {\n    attribute name: String\n  }\n\n  class Wheel {\n    attribute operationalStatus: OperationalStatus\n  }\n\n  class LeftFrontWheel extends Wheel {\n    attribute operationalStatus: OperationalStatus\n  }\n\n  class RightFrontWheel extends Wheel {\n    attribute operationalStatus: OperationalStatus\n  }\n\n  instance vehicle_1: Vehicle {\n    mass = 1500.0\n    operationalStatus = OperationalStatus {\n      gearSetting = Neutral\n      acceleratorPedalPosition = Off\n    }\n  }\n\n  instance leftFrontWheel_1: LeftFrontWheel {\n    operationalStatus = OperationalStatus {\n      gearSetting = Neutral\n      acceleratorPedalPosition = Off\n    }\n  }\n\n  instance rightFrontWheel_1: RightFrontWheel {\n    operationalStatus = OperationalStatus {\n      gearSetting = Neutral\n      acceleratorPedalPosition = Off\n    }\n  }\n\n  instance vehicle_1: Vehicle {\n",
    "package VehicleSystem\n\nimport sysml::core::model::Element\nimport sysml::core::model::Package\nimport sysml::core::model::Block\nimport sysml::core::model::Port\nimport sysml::core::model::Property\nimport sysml::core::model::ValueProperty\nimport sysml::core::model::Association\nimport sysml::core::model::Class\nimport sysml::core::model::Operation\nimport sysml::core::model::Parameter\nimport sysml::core::model::Value\n\npackage VehicleSystem {\n  class Vehicle {\n    property mass: ValueProperty {\n      value: 2000\n    }\n    property gear: ValueProperty {\n      value: 0\n    }\n    property acceleratorPosition: ValueProperty {\n      value: 0.0\n    }\n  }\n  class Engine {\n    property mass: ValueProperty {\n      value: 500\n    }\n    property power: ValueProperty {\n      value: 100\n    }\n  }\n  class Driver {\n    property name: ValueProperty {\n      value: \"John\"\n    }\n    property age: ValueProperty {\n      value: 30\n    }\n  }\n  class Vehicle_1",
    "package Vehicle\n\n  class Vehicle {\n    attribute mass: Number\n    attribute gearPosition: String\n    attribute throttlePedalPosition: Number\n    attribute driver: Driver\n    attribute timeSlice: TimeSlice\n  }\n\n  class Engine {\n    attribute horsepower: Number\n  }\n\n  class Driver {\n    attribute name: String\n  }\n\n  class TimeSlice {\n    attribute time: Number\n    attribute mass: Number\n    attribute gearPosition: String\n    attribute throttlePedalPosition: Number\n    attribute driver: Driver\n  }\n\n  class VehicleState {\n    attribute mass: Number\n    attribute gearPosition: String\n    functional property: \"mass = 2000 kg\"\n    functional property: \"gearPosition = neutral\"\n    functional property: \"throttlePedalPosition = 0\"\n    functional property: \"driver = Alice\"\n  }\n\n  class VehicleState2 {\n    attribute mass: Number\n    attribute gearPosition: String\n    attribute throttlePedalPosition: Number\n    attribute driver: Driver\n    functional property: \"mass = 1500 kg\"\n    functional property: \"gearPosition = second\"\n    functional property: \"throttlePedalPosition = 0.5\"\n    functional property:",
    "package VehicleMassManagement\n\nimport sysml::core::ModelElement\nimport sysml::core::Package\nimport sysml::core::Block\nimport sysml::core::Port\nimport sysml::core::Property\nimport sysml::core::ValueProperty\nimport sysml::core::StringProperty\nimport sysml::core::Enumeration\nimport sysml::core::Value\nimport sysml::core::BooleanValue\nimport sysml::core::IntegerValue\nimport sysml::core::RealValue\n\nclass Vehicle extends Block {\n  property mass: RealValue\n  property components: List[Component]\n}\n\nclass Component extends Block {\n  property mass: RealValue\n  property subcomponents: List[Component]\n  property name: StringProperty\n  property weight: RealValue\n}\n\nclass Engine extends Component {\n  property power: RealValue\n  property fuelType: Enumeration {\n    value gasoline\n    value diesel\n  }\n}\n\nclass Transmission extends Component {\n  property gearCount: IntegerValue\n  property type: Enumeration {\n    value manual\n    value automatic\n  }\n}\n\nclass VehicleMassManagement extends Package {\n  property vehicles: List[Vehicle]\n}\n```\n```sysml\nclass Vehicle extends Block {\n",
    "package VehicleManagementSystem\n\nimport sysml::core::ModelElement\nimport sysml::core::Package\nimport sysml::core::Block\nimport sysml::core::Port\nimport sysml::core::Property\nimport sysml::core::ValueProperty\nimport sysml::core::StringProperty\nimport sysml::core::Enumeration\nimport sysml::core::Value\nimport sysml::core::Constraint\n\nclass Vehicle extends Block {\n  property vin: StringProperty {\n    description: \"Vehicle Identification Number\"\n  }\n  property mass: ValueProperty {\n    description: \"Total mass of the vehicle\"\n  }\n  property components: ValueProperty {\n    description: \"List of vehicle components\"\n  }\n}\n\nclass Component extends Block {\n  property serialNumber: StringProperty {\n    description: \"Unique serial number of the component\"\n  }\n  property mass: ValueProperty {\n    description: \"Mass of the component\"\n  }\n  property subComponents: ValueProperty {\n    description: \"List of subcomponents\"\n  }\n}\n\nclass Engine extends Component {\n  property mass: ValueProperty {\n    description: \"Mass of the engine\"\n  }\n}\n\nclass Transmission extends Component {\n  property mass: ValueProperty {\n    description:",
    "package com.example.massaggregation\n\nimport com.example.massaggregation::simpleThing\nimport com.example.massaggregation::compositeThing\n\nclass simpleThing {\n  attribute simpleMass: Mass\n  attribute totalMass: Mass\n  constraint totalMass = simpleMass\n}\n\nclass compositeThing {\n  attribute simpleMass: Mass\n  attribute totalMass: Mass\n  attribute subcomponents: List<Thing>\n  constraint totalMass = simpleMass + subcomponents.sum(t -> t.totalMass)\n}\n```\n```sysml\npackage com.example.massaggregation\n\nimport com.example.massaggregation::simpleThing\nimport com.example.massaggregation::compositeThing\n\nclass simpleThing {\n  attribute simpleMass: Mass\n  attribute totalMass: Mass\n  constraint totalMass = simpleMass\n}\n\nclass compositeThing {\n  attribute simpleMass: Mass\n  attribute totalMass: Mass\n  attribute subcomponents: List<Thing>\n  constraint totalMass = simpleMass + subcomponents.sum(t -> t.totalMass)\n}\n```\n```sysml\npackage com.example.massaggregation\n\nimport com.example.massaggregation::simpleThing\nimport com.example.massaggregation::compositeThing\n\nclass simpleThing {\n  attribute simpleMass: Mass\n  attribute total",
    "package com.example.massaggregation\n\nimport com.example.massaggregation.MassAggregationSystem\n\nclass MassAggregationSystem {\n  property mass: Mass\n  property subcomponents: Collection[Component]\n  property minMassThreshold: Mass\n  property totalMass: Mass\n  property filteredSubcomponents: Collection[Component]\n}\n\nclass Component {\n  property mass: Mass\n  property subcomponents: Collection[Component]\n}\n\nclass Mass {\n  property value: Number\n}\n\nclass MassFilter {\n  property minMass: Mass\n}\n\nclass MassAggregationSystem {\n  operation calculateTotalMass(): Mass {\n    if (minMassThreshold > 0) {\n      filteredSubcomponents = subcomponents.filter(component => component.mass >= minMassThreshold)\n      totalMass = mass + filteredSubcomponents.sum(component => component.mass)\n    } else {\n      totalMass = mass + subcomponents.sum(component => component.mass)\n    }\n  }\n}\n```\n\nNote: The code is written in SysML v2 textual grammar. The code is a model of the system described in the input requirement. The code defines classes, properties, and operations for the system. The classes are `MassAggregationSystem`, `Component`, `Mass`, and `MassFilter`. The",
    "package VehicleDynamics\n\nimport sysml::core::model::Element\nimport sysml::core::model::Block\nimport sysml::core::model::ValueProperty\nimport sysml::core::model::Operation\n\nclass VehicleDynamics extends Block {\n  value WheelPower: ValueProperty\n  value AerodynamicDragCoefficient: ValueProperty\n  value FrictionCoefficient: ValueProperty\n  value VehicleMass: ValueProperty\n  value Speed: ValueProperty\n  value PowerOutput: ValueProperty\n  value Acceleration: ValueProperty\n  value Position: ValueProperty\n}\n\nclass VehicleDynamicsCalculator extends Block {\n  value WheelPower: ValueProperty\n  value AerodynamicDragCoefficient: ValueProperty\n  value FrictionCoefficient: ValueProperty\n  value VehicleMass: ValueProperty\n  value Speed: ValueProperty\n  value PowerOutput: ValueProperty\n  value Acceleration: ValueProperty\n  value Position: ValueProperty\n  \n  operation CalculatePowerOutput() {\n    PowerOutput = WheelPower / (AerodynamicDragCoefficient * FrictionCoefficient)\n  }\n  \n  operation CalculateAcceleration() {\n    Acceleration = PowerOutput / VehicleMass\n  }\n  \n  operation CalculateSpeed()",
    "package VehicleSimulation\n\nimport sysml::core::ModelElement\nimport sysml::core::Package\nimport sysml::core::Block\nimport sysml::core::Port\nimport sysml::core::Property\nimport sysml::core::ValueProperty\nimport sysml::core::StringProperty\nimport sysml::core::Enumeration\nimport sysml::core::Value\nimport sysml::core::Constraint\n\npackage VehicleSimulation {\n  class Vehicle {\n    property mass: ValueProperty {\n      value: 1500.0\n      unit: \"kg\"\n    }\n    property aerodynamicDragCoefficient: ValueProperty {\n      value: 0.5\n      unit: \"Cd\"\n    }\n    property rollingResistanceCoefficient: ValueProperty {\n      value: 0.01\n      unit: \"Crr\"\n    }\n    property wheelEndOutputPower: ValueProperty {\n      value: 100.0\n      unit: \"kW\"\n    }\n    property timeStep: ValueProperty {\n      value: 0.1\n      unit: \"s\"\n    }\n    property initialSpeed: ValueProperty {\n      value: 50.0\n      unit: \"km/h\"\n    }\n    property initialPosition",
    "// Vehicle Dynamics Model\nmodel VehicleDynamics {\n  // Input Parameters\n  parameter mass: Float64 = 1500.0;\n  parameter wheelPower: Float64 = 100.0;\n  parameter aerodynamicDragCoefficient: Float64 = 0.5;\n  parameter rollingResistanceCoefficient: Float64 = 0.1;\n  parameter initialSpeed: Float64 = 50.0;\n  parameter initialPosition: Float64 = 0.0;\n\n  // State Variables\n  state speed: Float64;\n  state position: Float64;\n\n  // Behavior\n  behavior drivingDynamics {\n    // Initial Conditions\n    initial {\n      speed = initialSpeed;\n      position = initialPosition;\n    }\n\n    // Time-Dependent Behavior\n    when time > 0 {\n      // Update Speed and Position\n      speed = speed - (aerodynamicDragCoefficient * speed^2 + rollingResistanceCoefficient * speed);\n      position = position + speed;\n    }\n  }\n}\n```\nNote: The code is written in SysML v2 textual grammar. The model is a simple representation of a vehicle dynamics system, with input parameters, state variables, and a behavior that updates the state variables over time. The behavior",
    "package VehicleDynamicConstraints\n\nimport sysml::core::Model\nimport sysml::core::Element\nimport sysml::core::Block\nimport sysml::core::Port\nimport sysml::core::Property\nimport sysml::core::ValueProperty\nimport sysml::core::StringProperty\nimport sysml::core::Enumeration\nimport sysml::core::Constraint\nimport sysml::core::Activity\nimport sysml::core::Package\n\npackage VehicleDynamicConstraints {\n  model VehicleDynamicConstraints {\n    element Vehicle {\n      block Vehicle {\n        port Input {\n          property InitialPosition {\n            valueProperty InitialPositionValue\n          }\n          property InitialVelocity {\n            valueProperty InitialVelocityValue\n          }\n          property VehicleMass {\n            valueProperty VehicleMassValue\n          }\n          property WheelEndDrivePower {\n            valueProperty WheelEndDrivePowerValue\n          }\n          property TimeInterval {\n            valueProperty TimeIntervalValue\n          }\n        }\n        block Dynamics {\n          port Input {\n            property DragCoefficient {\n              valueProperty DragCoefficientValue\n            }\n            property FrictionCoefficient {\n              valueProperty FrictionCoefficientValue\n            }\n          }\n          port Output {\n            property Acceleration {\n              valueProperty AccelerationValue\n            }\n",
    "package VehicleWeightManagement\n\nimport sysml::core::model::Element\nimport sysml::core::model::Block\nimport sysml::core::model::ValueProperty\nimport sysml::core::model::Constraint\n\nclass Vehicle {\n  property mass: ValueProperty = 0 kg\n  property maxWeight: ValueProperty = 2500 kg\n  property chassisMass: ValueProperty = 0 kg\n  property engineMass: ValueProperty = 0 kg\n  property gearboxMass: ValueProperty = 0 kg\n  constraint weightLimit: Constraint = \"mass <= maxWeight\"\n  constraint overweightWarning: Constraint = \"mass > maxWeight\"\n}\n\nclass Chassis {\n  property mass: ValueProperty = 0 kg\n}\n\nclass Engine {\n  property mass: ValueProperty = 0 kg\n}\n\nclass Gearbox {\n  property mass: ValueProperty = 0 kg\n}\n```\n```sysml\npackage VehicleWeightManagement\n\nimport sysml::core::model::Element\nimport sysml::core::model::Block\nimport sysml::core::model::ValueProperty\nimport sysml::core::model::Constraint\n\nclass Vehicle {\n  property mass: ValueProperty = 0 kg\n  property",
    "package VehicleBudgetingSystem\n\nimport sysml::core::ModelElement\nimport sysml::core::Package\nimport sysml::core::Block\nimport sysml::core::Port\nimport sysml::core::Property\nimport sysml::core::ValueProperty\nimport sysml::core::StringProperty\nimport sysml::core::Enumeration\nimport sysml::core::Constraint\n\nclass VehicleBudgetingSystem extends ModelElement {\n  package VehicleBudgetingSystem {\n    class Vehicle extends Block {\n      property massLimit: ValueProperty {\n        value: 2500\n        unit: \"kg\"\n      }\n      property componentMasses: ValueProperty {\n        value: 0\n        unit: \"kg\"\n      }\n      property engineMass: ValueProperty {\n        value: 0\n        unit: \"kg\"\n      }\n      property transmissionMass: ValueProperty {\n        value: 0\n        unit: \"kg\"\n      }\n      port inputMass: Port {\n        type: ValueProperty\n        direction: \"in\"\n      }\n      port outputResult: Port {\n        type: ValueProperty\n        direction: \"out\"\n      }\n      constraint massExceedsLimit: Constraint {\n        expression: \"componentMass",
    "package VehicleMassComplianceSystem\n\nimport sysml::core::ModelElement\nimport sysml::core::Package\nimport sysml::core::Block\nimport sysml::core::ValueProperty\nimport sysml::core::String\n\nclass Vehicle {\n  property mass: ValueProperty {\n    type: Number\n    description: \"Total mass of the vehicle\"\n  }\n  property chassisMass: ValueProperty {\n    type: Number\n    description: \"Mass of the chassis\"\n  }\n  property engineMass: ValueProperty {\n    type: Number\n    description: \"Mass of the engine\"\n  }\n  property transmissionMass: ValueProperty {\n    type: Number\n    description: \"Mass of the transmission\"\n  }\n  property maxMass: ValueProperty {\n    type: Number\n    description: \"Maximum allowed mass of the vehicle\"\n  }\n  operation checkMassCompliance: Operation {\n    description: \"Verify if the total mass of the vehicle is within the allowed limit\"\n    parameters: {\n      mass: ValueProperty {\n        type: Number\n        description: \"Total mass of the vehicle\"\n      }\n      maxMass: ValueProperty {\n        type: Number\n        description: \"Maximum allowed mass of the vehicle\"\n",
    "// Define the system\nsystem VehicleWeightManagementSystem {\n  // Define the system's purpose\n  purpose \"Ensure the combined weight of main vehicle components does not exceed 2,500 kilograms\"\n  \n  // Define the system's functional requirements\n  functionalRequirement \"Accurately record and manage the weight of each component\"\n  functionalRequirement \"Sum the weights of the chassis, engine, and transmission\"\n  functionalRequirement \"Provide a warning or impose restrictions when the total weight exceeds the specified limit\"\n  \n  // Define the system's non-functional requirements\n  nonFunctionalRequirement \"Ensure product legality, compliance, and safety\"\n  nonFunctionalRequirement \"Comply with relevant regulatory requirements\"\n  \n  // Define the system's inputs\n  input \"Weight of the chassis\"\n  input \"Weight of the engine\"\n  input \"Weight of the transmission\"\n  \n  // Define the system's outputs\n  output \"Total weight of the vehicle\"\n  output \"Warning or restrictions when the total weight exceeds the specified limit\"\n}\n```\n```sysml\n// Define the component\ncomponent MainVehicleComponents {\n  // Define the component's purpose\n  purpose \"Main vehicle components including the chassis, engine, and transmission\"\n  \n  // Define the component's properties",
    "package VehicleSystem\n\n  package Vehicle\n    class Vehicle {\n      attribute mass: kg\n      attribute initialVelocity: m/s\n      attribute finalVelocity: m/s\n      attribute appliedForce: N\n      attribute time: s\n      attribute period: s\n    }\n\n  package VehicleComponents\n    class Chassis {\n      attribute mass: kg\n    }\n\n    class Engine {\n      attribute mass: kg\n    }\n\n    class Transmission {\n      attribute mass: kg\n    }\n\n  package VehicleConstraints\n    class TotalMassConstraint {\n      constraint totalMass <= 2500 kg\n    }\n\n    class DynamicConstraint {\n      constraint mass > 0\n      constraint force * time = mass * (finalVelocity - initialVelocity)\n    }\n```\n```sysml\nendpackage\n```  ```sysml\nendmodel\n```  ```sysml\nendmodel\n```  ```sysml\nendmodel\n```  ```sysml\nendmodel\n```  ```sysml\nendmodel\n```  ```sysml\nendmodel\n```  ```sysml\nendmodel\n```  ```sysml\nendmodel\n```  ```sysml\nendmodel\n```  ```sysml\nendmodel\n```  ```",
    "package VehicleMaintenanceSystem\n\nimport sysml::core::model::Element\nimport sysml::core::model::Block\nimport sysml::core::model::Package\n\nclass Vehicle {\n  property nextMaintenanceTime: Time\n  property maintenanceInterval: Time\n  property maxAllowedTemperature: Temperature\n  property status: Status\n}\n\nenum Status {\n  healthy\n  underMaintenance\n}\n\nclass MaintenanceSchedule {\n  property scheduledMaintenanceTime: Time\n  property actualMaintenanceStartTime: Time\n  property maintenanceDuration: Time\n}\n\nclass VehicleStatus {\n  property status: Status\n  property nextMaintenanceTime: Time\n}\n\nclass VehicleHealthStatus {\n  property healthStatus: HealthStatus\n  property nextMaintenanceTime: Time\n}\n\nenum HealthStatus {\n  normal\n  abnormal\n}\n\nclass MaintenanceInterval {\n  property interval: Time\n}\n\nclass Temperature {\n  property value: TemperatureValue\n}\n\nclass TemperatureValue {\n  property value: Number\n}\n\nclass Time {\n  property value: Number\n}\n\nclass Number {\n  property value: Integer\n}\n\nclass Integer {\n  property value: Integer\n}\n```\n\n```sysml\npackage VehicleMaintenanceSystem\n\nimport sysml::core::model::Element\nimport",
    "// Define the system\nsystem Vehicle {\n  // Define the properties\n  property maxMassLimit: 2500 kg;\n  property fuelMass: 100 kg;\n  property engineSpeed: 5000 rpm;\n  property engineTorque: 200 Nm;\n  property transmissionTorque: 150 Nm;\n  property clutchInterface: ClutchInterface;\n  \n  // Define the constraints\n  constraint totalMass <= maxMassLimit;\n  constraint fuelMass > 0;\n  \n  // Define the behaviors\n  behavior engineBehavior {\n    // Define the inputs\n    input engineSpeed: 5000 rpm;\n    \n    // Define the outputs\n    output engineTorque: 200 Nm;\n  }\n  \n  behavior transmissionBehavior {\n    // Define the inputs\n    input transmissionTorque: 150 Nm;\n    \n    // Define the outputs\n    output vehicleTorque: 120 Nm;\n  }\n  \n  behavior clutchInterfaceBehavior {\n    // Define the inputs\n    input engineTorque: 200 Nm;\n    \n    // Define the outputs\n    output transmissionTorque: 150 Nm;\n  }\n}\n```\n```sysml\n// Define the interface\ninterface ClutchInterface {\n",
    "// Vehicle Requirements\nrequirement VehicleMassRequirement:\n  description: \"The vehicle's total mass must not exceed 2000 kg with a full fuel tank.\"\n  constraint: \"mass <= 2000 kg\"\n  context: \"Vehicle with full fuel tank\"\n\nrequirement VehicleMassRequirement_EmptyFuelTank:\n  description: \"The vehicle's total mass must not exceed 1500 kg with an empty fuel tank.\"\n  constraint: \"mass <= 1500 kg\"\n  context: \"Vehicle with empty fuel tank\"\n\nrequirement EngineTorqueRequirement:\n  description: \"The engine must be capable of transmitting its generated torque to the transmission via the clutch interface.\"\n  constraint: \"torque >= 0 Nm\"\n  context: \"Engine and transmission interface\"\n\nrequirement EnginePerformanceRequirement:\n  description: \"The engine is required to deliver the necessary torque according to the speed-torque curve (see Table 1).\"\n  constraint: \"torque = speed * torque_coefficient\"\n  context: \"Engine performance\"\n\nrequirement VehicleSafetyRequirement:\n  description: \"The system aims to regulate vehicle mass control, as well as the interface and performance of the powertrain, thereby ensuring the safety of vehicle design and the effectiveness of",
    "package Vehicle\n\n  element Vehicle\n    attribute mass_fueled: Quantity\n      value: 2000 kg\n    attribute mass_empty: Quantity\n      value: 1500 kg\n    attribute engine: Engine\n  end element\n\n  element Engine\n    attribute torque: Quantity\n      value: 500 Nm\n    attribute speed: Quantity\n      value: 5000 rpm\n    attribute clutch_interface: ClutchInterface\n  end element\n\n  element ClutchInterface\n    attribute torque_transmitted: Quantity\n      value: 400 Nm\n  end element\n```\n```sysml\npackage Performance\n  element PerformanceTable\n    attribute torque: Quantity\n      value: 500 Nm\n    attribute speed: Quantity\n      value: 5000 rpm\n  end element\n```\n```sysml\npackage Requirements\n  element Requirement\n    attribute description: String\n      value: \"The vehicle's total mass must not exceed 2000 kilograms when fully fueled.\"\n    attribute constraint: Constraint\n      value: mass_fueled <= 2000 kg\n  end element\n\n  element Requirement\n    attribute description: String\n      value: \"The engine must be capable of effectively transmitting its",
    "requirement \"Vehicle Mass Control\"\n  description: \"The actual mass of the vehicle must not exceed the specified limit.\"\n  constraint: \"mass <= 2000 kg when fuel tank is full\"\n  constraint: \"mass <= 1500 kg when fuel tank is empty\"\n  constraint: \"mass = curb mass + fuel mass\"\nrequirement \"Power Transmission\"\n  description: \"The engine must be capable of generating the specified torque characteristics at various speeds.\"\n  constraint: \"torque >= specified torque at speed >= 1000 rpm\"\n  constraint: \"torque >= specified torque at speed >= 2000 rpm\"\n  constraint: \"torque >= specified torque at speed >= 3000 rpm\"\nrequirement \"Clutch Interface\"\n  description: \"The generated torque must be effectively transmitted to the gearbox through the clutch interface to ensure smooth power delivery.\"\n  constraint: \"torque transmitted to gearbox >= 90% of generated torque\"\n```\n```sysml\npackage \"Vehicle System\"\n  element \"Vehicle\"\n    attribute \"mass\"\n    attribute \"curb mass\"\n    attribute \"fuel mass\"\n    attribute \"torque\"\n    attribute \"speed\"\n  element \"Engine\"\n    attribute \"torque\"\n    attribute \"",
    "package VehiclePerformanceAnalysis\n\nimport sysml::core::model::Model\nimport sysml::core::model::Element\nimport sysml::core::model::Block\nimport sysml::core::model::Port\nimport sysml::core::model::Property\nimport sysml::core::model::ValueProperty\nimport sysml::core::model::StringProperty\nimport sysml::core::model::Enumeration\nimport sysml::core::model::Value\nimport sysml::core::model::Constraint\n\nclass Vehicle {\n  property: CurbWeight: ValueProperty\n  property: Payload: ValueProperty\n  property: WheelDiameter: ValueProperty\n  property: TransmissionEfficiency: ValueProperty\n  property: FuelEconomyUrban: ValueProperty\n  property: FuelEconomyHighway: ValueProperty\n}\n\nclass DrivingCycle {\n  property: TimeStampedPosition: ValueProperty\n  property: TimeStampedSpeed: ValueProperty\n}\n\nclass EnginePower {\n  property: RequiredPower: ValueProperty\n  property: Acceleration: ValueProperty\n}\n\nclass VehiclePerformance {\n  property: FuelEconomy: ValueProperty\n  property: EnergyConsumption: ValueProperty\n}\n\nclass ComplianceVerification {\n  property",
    "// Define the system\nsystem VehicleFuelEconomySimulation {\n  // Define the system's purpose\n  purpose \"Perform simulation analysis on vehicle fuel economy\";\n  \n  // Define the system's context\n  context \"Urban and highway driving scenarios\";\n  \n  // Define the system's requirements\n  requirement \"Exceed 30 miles per gallon\";\n  \n  // Define the system's parameters\n  parameter CurbWeight: number;\n  parameter Load: number;\n  parameter WheelDiameter: number;\n  parameter TransmissionEfficiency: number;\n  \n  // Define the system's variables\n  variable WheelPower: number;\n  variable Acceleration: number;\n  variable EnergyConsumption: number;\n  variable EnginePowerDemand: number;\n  variable FuelConsumption: number;\n  variable FuelEconomy: number;\n  \n  // Define the system's functions\n  function CalculateWheelPower: number {\n    // Calculate the required wheel power based on driving trajectories and speed variations\n  }\n  \n  function ApplyVehicleDynamics: number {\n    // Apply vehicle dynamics to calculate acceleration and energy consumption\n  }\n  \n  function EstimateEnginePowerDemand: number {\n    // Estimate the actual engine power demand\n  }\n  \n  function CalculateFuelConsumption: number",
    "// Define the system\nsystem EngineSelectionSystem {\n  // Define the engine types\n  enum EngineType {\n    FourCylinder,\n    SixCylinder\n  }\n\n  // Define the performance indicators\n  enum PerformanceIndicator {\n    Power,\n    Mass,\n    Efficiency,\n    Cost\n  }\n\n  // Define the evaluation function\n  function EvaluationFunction(PerformanceIndicator[] indicators) {\n    // TO DO: implement the evaluation function\n  }\n\n  // Define the engine selection algorithm\n  function EngineSelectionAlgorithm(EngineType[] engineTypes) {\n    // TO DO: implement the engine selection algorithm\n  }\n\n  // Define the system behavior\n  behavior {\n    // Initialize the system\n    initialize {\n      // Initialize the engine types\n      engineTypes = EngineType.FourCylinder | EngineType.SixCylinder\n    }\n\n    // Select the optimal engine\n    selectOptimalEngine {\n      // Calculate the performance indicators for each engine type\n      performanceIndicators = calculatePerformanceIndicators(engineTypes)\n\n      // Evaluate each engine type using the evaluation function\n      evaluations = evaluateEngines(performanceIndicators)\n\n      // Select the optimal engine based on the evaluation results\n      optimalEngine = selectOptimalEngine(evaluations",
    "package VehicleWeightCheck\n\nimport sysml::core::ModelElement\nimport sysml::core::Package\nimport sysml::core::Block\nimport sysml::core::Class\nimport sysml::core::Property\nimport sysml::core::Operation\nimport sysml::core::Parameter\nimport sysml::core::ValueProperty\nimport sysml::core::StringProperty\nimport sysml::core::BooleanProperty\nimport sysml::core::Enumeration\nimport sysml::core::Constraint\n\npackage VehicleWeightCheck {\n  class Vehicle {\n    property weight: ValueProperty {\n      type: sysml::core::Real\n      value: 2500\n    }\n  }\n\n  class WeightCheck {\n    property result: ValueProperty {\n      type: sysml::core::Boolean\n    }\n    operation checkWeight: Operation {\n      parameter vehicle: Parameter {\n        type: Vehicle\n      }\n      constraint weight <= 2500: Constraint {\n        type: sysml::core::Real\n      }\n    }\n  }\n\n  class Test {\n    property data: ValueProperty {\n      type: sysml::core::Real\n    }\n    operation collectData: Operation {\n      parameter vehicle: Parameter {\n        type:",
    "package VehicleMassVerificationSystem\n\nblock VehicleMassVerificationSystem\n  description \"System for verifying the mass of vehicles\"\n  property massLimit: 2500 kg\n  property vehicle: Vehicle\n  property weighingEquipment: WeighingEquipment\n  property massVerificationUnit: MassVerificationUnit\n\nblock Vehicle\n  description \"Vehicle to be inspected\"\n  property mass: 0 kg\n\nblock WeighingEquipment\n  description \"Equipment for measuring the mass of a vehicle\"\n  property measurement: 0 kg\n\nblock MassVerificationUnit\n  description \"Unit for processing and evaluating mass data\"\n  property result: \"qualified\" | \"unqualified\"\n\nblock MassVerificationProcess\n  description \"Process for verifying the mass of a vehicle\"\n  property vehicle: Vehicle\n  property weighingEquipment: WeighingEquipment\n  property massVerificationUnit: MassVerificationUnit\n  property massLimit: 2500 kg\n  operation measureMass: \"Measure the mass of the vehicle using the weighing equipment\"\n  operation evaluateMass: \"Evaluate the measured mass data using the mass verification unit\"\n  operation determineResult: \"Determine the result of the mass verification process\"\n  operation outputResult: \"Output the result of the mass verification process\"\n``",
    "package transportation_system\n\nimport sysml::core::model::Element\nimport sysml::core::model::Block\nimport sysml::core::model::Package\n\nclass Vehicle {\n  attribute driver: Person\n  attribute passengers: List[Person]\n  attribute capacity: Integer = 5\n  attribute safetyFeatures: List[Feature]\n  attribute comfortFeatures: List[Feature]\n}\n\nclass Person {\n  attribute name: String\n  attribute age: Integer\n  attribute role: String\n}\n\nclass Feature {\n  attribute name: String\n  attribute description: String\n}\n\nclass TransportationSystem {\n  attribute vehicle: Vehicle\n  attribute infrastructure: List[Infrastructure]\n  attribute environmentalFactors: List[Factor]\n}\n\nclass Infrastructure {\n  attribute name: String\n  attribute description: String\n}\n\nclass Factor {\n  attribute name: String\n  attribute description: String\n}\n\nclass RideExperience {\n  attribute comfort: String\n  attribute convenience: String\n}\n\nclass DailyTask {\n  attribute taskType: String\n  attribute taskDescription: String\n}\n\nclass TransportationTask {\n  attribute taskType: String\n  attribute taskDescription: String\n  attribute vehicle: Vehicle\n  attribute passengers: List[Person]\n  attribute infrastructure: List[",
    "package transportation_system\n\nimport { \n  \"https://sysml.dev/v2/grammar/transportation_system/transportation_system\"\n}\n\nclass Vehicle {\n  attribute driver: Person\n  attribute passengers: List[Person]\n  attribute fuelLevel: Float\n  attribute location: Location\n  attribute speed: Float\n}\n\nclass Person {\n  attribute name: String\n  attribute age: Int\n}\n\nclass Location {\n  attribute latitude: Float\n  attribute longitude: Float\n}\n\nclass GasStation {\n  attribute location: Location\n  attribute fuelType: String\n}\n\nclass TransportationSystem {\n  attribute vehicle: Vehicle\n  attribute driver: Person\n  attribute passengers: List[Person]\n  attribute gasStations: List[GasStation]\n  attribute routes: List[Route]\n}\n\nclass Route {\n  attribute start: Location\n  attribute end: Location\n  attribute distance: Float\n}\n\nclass System {\n  attribute name: String\n  attribute description: String\n  attribute requirements: List[Requirement]\n}\n\nclass Requirement {\n  attribute id: String\n  attribute description: String\n  attribute type: String\n}\n\nclass Interaction {\n  attribute type: String\n  attribute description: String\n}\n\nclass SystemInteraction {\n  attribute type:",
    "package VehicleConfigurator\n\nimport sysml::core::model::Element\nimport sysml::core::model::Package\nimport sysml::core::model::Block\nimport sysml::core::model::Port\nimport sysml::core::model::Property\nimport sysml::core::model::ValueProperty\nimport sysml::core::model::String\nimport sysml::core::model::Enumeration\nimport sysml::core::model::Constraint\n\nclass VehicleConfigurator extends Package {\n  class Engine extends Block {\n    class EngineType extends Enumeration {\n      value FourCylinder = \"FourCylinder\"\n      value SixCylinder = \"SixCylinder\"\n    }\n    class CylinderCount extends ValueProperty {\n      value Four = 4\n      value Six = 6\n    }\n    class CylinderDiameter extends ValueProperty {\n      value Small = 70\n      value Large = 100\n    }\n  }\n  class Transmission extends Block {\n    class TransmissionType extends Enumeration {\n      value Manual = \"Manual\"\n      value Automatic = \"Automatic\"\n    }\n  }\n  class Vehicle extends Block {\n    class EnginePort extends Port {\n      value EngineType: EngineType\n      value CylinderCount: CylinderCount\n",
    "package Engine\n\nimport {sysml} from \"https://sysml.dev/sysml\";\n\n// Define the Engine class\nclass Engine {\n  // Define the engine configuration\n  configuration: EngineConfiguration;\n}\n\n// Define the EngineConfiguration class\nclass EngineConfiguration {\n  // Define the number of cylinders\n  numberOfCylinders: Number;\n  // Define the cylinder diameter\n  cylinderDiameter: Number;\n}\n\n// Define the EngineVariant class\nclass EngineVariant {\n  // Define the engine variant name\n  name: String;\n  // Define the engine configuration\n  configuration: EngineConfiguration;\n}\n\n// Define the EngineVariant instances\ninstance \"FourCylinderEngine\" of EngineVariant {\n  name = \"FourCylinderEngine\";\n  configuration = {\n    numberOfCylinders = 4;\n    cylinderDiameter = 70;\n  };\n}\n\ninstance \"SixCylinderEngine\" of EngineVariant {\n  name = \"SixCylinderEngine\";\n  configuration = {\n    numberOfCylinders = 6;\n    cylinderDiameter = 100;\n  };\n}\n\n// Define the Engine instances\ninstance \"Engine\" of Engine {\n  configuration = {\n    numberOfCylinders = 4;\n    cylinderDiameter = 70;\n ",
    "package automotive\n\nimport automotive.engine\nimport automotive.transmission\n\nclass Engine {\n  attribute diameter: 70mm | 100mm\n  attribute cylinders: 4 | 6\n}\n\nclass Transmission {\n  attribute type: manual | automatic\n}\n\nclass Vehicle {\n  attribute engine: Engine\n  attribute transmission: Transmission\n}\n\nconstraint Engine.engineType == 4 -> Transmission.type == manual\nconstraint Engine.engineType == 6 -> Transmission.type == automatic\n```\n```sysml\npackage automotive\n\nimport automotive.engine\nimport automotive.transmission\n\nclass Engine {\n  attribute diameter: 70mm | 100mm\n  attribute cylinders: 4 | 6\n}\n\nclass Transmission {\n  attribute type: manual | automatic\n}\n\nclass Vehicle {\n  attribute engine: Engine\n  attribute transmission: Transmission\n}\n\nconstraint Engine.engineType == 4 -> Transmission.type == manual\nconstraint Engine.engineType == 6 -> Transmission.type == automatic\n```package automotive\n\nimport automotive.engine\nimport automotive.transmission\n\nclass Engine {\n  attribute diameter: 70mm | 100mm\n  attribute cylinders: 4 | 6\n}\n\nclass Transmission {\n  attribute type: manual | automatic\n}\n\nclass Vehicle {\n  attribute",
    "system SystemAssembly {\n  description: \"System Assembly\"\n  part: ComputerSubsystem {\n    description: \"Computer Subsystem\"\n    part: SoftwareDesign {\n      description: \"Software Design\"\n      property: MessageFormat {\n        description: \"Message Format\"\n        type: String\n      }\n      property: DataFormat {\n        description: \"Data Format\"\n        type: String\n      }\n    }\n  }\n  part: StorageSubsystem {\n    description: \"Storage Subsystem\"\n    property: MessageFormat {\n      description: \"Message Format\"\n      type: String\n    }\n    property: DataFormat {\n      description: \"Data Format\"\n      type: String\n    }\n  }\n}\n```\n```sysml\nsystem ComputerSubsystem {\n  description: \"Computer Subsystem\"\n  property: SoftwareDesign {\n    description: \"Software Design\"\n    property: MessageFormat {\n      description: \"Message Format\"\n      type: String\n    }\n    property: DataFormat {\n      description: \"Data Format\"\n      type: String\n    }\n  }\n}\n```\n```sysml\nsystem StorageSubsystem {\n  description: \"Storage Subsystem\"\n  property: MessageFormat {\n    description: \"Message Format\"\n    type: String\n  }\n",
    "package powertrain_system\n\nimport sysml::core::model::Element\nimport sysml::core::model::Block\nimport sysml::core::model::Port\nimport sysml::core::model::Interface\nimport sysml::core::model::Requirement\nimport sysml::core::model::Allocation\n\npackage powertrain_system.logical_layer\n  element PowerUnit\n  element TorqueGenerator\n  element PowerSource\n\npackage powertrain_system.physical_layer\n  element Engine\n  element Transmission\n  element Battery\n\npackage powertrain_system.logical_layer\n  interface PowerOutput\n    port Power\n  end interface\n\npackage powertrain_system.logical_layer\n  interface TorqueOutput\n    port Torque\n  end interface\n\npackage powertrain_system.logical_layer\n  requirement PowerGeneration\n    description \"The power unit must be able to generate power.\"\n  end requirement\n\npackage powertrain_system.logical_layer\n  requirement TorqueGeneration\n    description \"The torque generator must be able to generate torque.\"\n  end requirement\n\npackage powertrain_system.physical_layer\n  allocation PowerUnit -> Engine\n    description \"The power unit in the logical layer is mapped to the engine in the physical layer.\"\n  end allocation\n\npackage powertrain",
    "package powerTransmissionSystem\n\nimport sysml::v2::core::model::Model\nimport sysml::v2::core::model::Package\nimport sysml::v2::core::model::Block\nimport sysml::v2::core::model::Port\nimport sysml::v2::core::model::Interface\nimport sysml::v2::core::model::Operation\nimport sysml::v2::core::model::Parameter\nimport sysml::v2::core::model::ValueProperty\nimport sysml::v2::core::model::String\n\npackage powerTransmissionSystem {\n  model PowerTransmissionSystem {\n    package Powertrain {\n      block Engine {\n        port PowerInput: PowerInputPort {\n          interface PowerInputInterface {\n            operation GenerateTorque {\n              parameter Torque: ValueProperty {\n                value: \"torque\"\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n```sysml\npackage powerTransmissionSystem\n\nimport sysml::v2::core::model::Model\nimport sysml::v2::core::model::Package\nimport sysml::v2::core::model::Block\nimport sysml::v2::",
    "package VehicleFeatureAnnotationSystem\n\nimport sysml::v2::core::Core\nimport sysml::v2::modeling::Modeling\n\nclass Vehicle {\n  property: name = \"Vehicle\"\n  property: description = \"Vehicle feature annotation system\"\n  property: version = \"1.0\"\n}\n\nclass InteriorAssembly {\n  property: name = \"Interior Assembly\"\n  property: description = \"Interior components of the vehicle\"\n  property: version = \"1.0\"\n}\n\nclass BodyAssembly {\n  property: name = \"Body Assembly\"\n  property: description = \"Body components of the vehicle\"\n  property: version = \"1.0\"\n}\n\nclass SeatBelt {\n  property: name = \"Seat Belt\"\n  property: description = \"Safety feature for vehicle occupants\"\n  property: version = \"1.0\"\n}\n\nclass DriverAirbag {\n  property: name = \"Driver Airbag\"\n  property: description = \"Safety feature for vehicle occupants\"\n  property: version = \"1.2\"\n}\n\nclass Bumper {\n  property: name = \"Bumper\"\n  property: description = \"Protection feature for vehicle body\"\n  property: version = \"1.0\"\n}\n\nclass AntiTheftAlarm",
    "// Define the system\nsystem VehicleDynamicAnalysisSystem {\n  // Define the system's purpose\n  purpose \"Automated simulation and analysis of vehicle dynamic behavior\"\n  \n  // Define the system's functional requirements\n  functionalRequirement \"Input vehicle's initial velocity\"\n  functionalRequirement \"Input vehicle's initial position\"\n  functionalRequirement \"Input acceleration at a specific moment\"\n  functionalRequirement \"Input time step\"\n  functionalRequirement \"Automatically calculate vehicle's velocity and position after the specified time step\"\n  functionalRequirement \"Output vehicle's velocity and position\"\n  \n  // Define the system's non-functional requirements\n  nonFunctionalRequirement \"Ensure accurate data transfer\"\n  nonFunctionalRequirement \"Ensure reliable output of simulation results\"\n  nonFunctionalRequirement \"Enable users to conveniently obtain key dynamic parameters\"\n  \n  // Define the system's physical model\n  physicalModel \"Vehicle's physical model\"\n  \n  // Define the system's integration with ModelCenter analysis tool\n  integration \"ModelCenter analysis tool\"\n}\n```\n```sysml\n// Define the vehicle's physical model\nphysicalModel VehiclePhysicalModel {\n  // Define the physical model's parameters\n  parameter \"Vehicle's mass\"\n  parameter \"Vehicle's moment of inertia\"\n  parameter \"Vehicle's damping coefficient",
    "package Car {\n  package Body {\n    class Bumper {\n      @Safety\n      isMandatory: true\n    }\n  }\n  package Interior {\n    class SeatBelt {\n      @Safety\n      isMandatory: true\n    }\n    class SeatBelt {\n      @Safety\n      isMandatory: true\n    }\n  }\n  package SafetyFeatures {\n    package MandatorySafetyFeatures {\n      class Bumper {\n        @Safety\n        isMandatory: true\n      }\n    }\n    class SeatBelt {\n      @Safety\n      isMandatory: true\n    }\n    class SeatBelt {\n      @Safety\n      isMandatory: true\n    }\n  }\n  package WheelAssembly {\n    class Wheel {\n      isMandatory: true\n    }\n    class Wheel {\n      isMandatory: true\n    }\n    class AntiLockBrakingSystem {\n      @Safety\n      isMandatory: false\n    }\n  }\n}\n```\n```sysml\npackage Car {\n  package Body {\n    class Bumper {\n      @Safety\n      isMandatory: true\n    }\n  }\n  package Interior {\n    class SeatBelt {\n      @Safety\n      isMandatory: true\n",
    "package VehicleSafetyComplianceSystem\n\nimport { SysML2 } from \"https://sysml2.org/sysml2\";\n\nclass Vehicle {\n  property seatBelt1: SeatBelt;\n  property seatBelt2: SeatBelt;\n  property driverAirbag: Airbag;\n  property bumper: Bumper;\n  property keylessEntry: KeylessEntry;\n  property chassis: Chassis;\n}\n\nclass SeatBelt {\n  property mandatory: true;\n}\n\nclass Airbag {\n  property mandatory: false;\n}\n\nclass Bumper {\n  property mandatory: true;\n}\n\nclass KeylessEntry {\n  property mandatory: false;\n}\n\nclass Chassis {\n  property numberOfTires: 4;\n  property abs: AntiLockBrakingSystem;\n}\n\nclass AntiLockBrakingSystem {\n  property mandatory: false;\n}\n\nclass SafetyFeature {\n  property name: string;\n  property description: string;\n  property mandatory: boolean;\n}\n\nclass SafetyComponent {\n  property name: string;\n  property description: string;\n  property mandatory: boolean;\n}\n\nclass VehicleSafetyComplianceSystem {\n  property safetyFeatures: SafetyFeature[];\n  property safetyComponents: SafetyComponent[];\n}\n```\n\nNote: The code is written in SysML 2",
    "package risk_management_system\n\nimport { SysML2 } from \"https://sysml2.org/sysml2\";\n\nclass Situation {\n  attribute cause: Cause;\n  attribute failure: Failure;\n  attribute probability: Probability;\n  attribute severity: Severity;\n}\n\nclass Cause {\n  attribute description: String;\n  attribute probability: Probability;\n}\n\nclass Failure {\n  attribute description: String;\n  attribute severity: Severity;\n}\n\nclass Probability {\n  attribute value: Number;\n  attribute unit: String;\n}\n\nclass Severity {\n  attribute value: Number;\n  attribute unit: String;\n}\n\nclass RiskScenario {\n  attribute situation: Situation;\n  attribute cause: Cause;\n  attribute failure: Failure;\n  attribute probability: Probability;\n  attribute severity: Severity;\n}\n\nclass RiskManagementSystem {\n  attribute situation: Situation;\n  attribute risk_scenario: RiskScenario;\n}\n\nassociation RiskManagementSystem_has_Situation {\n  source: RiskManagementSystem;\n  target: Situation;\n  description: \"The system manages a situation.\";\n}\n\nassociation RiskManagementSystem_has_RiskScenario {\n  source: RiskManagementSystem;\n  target: RiskScenario;\n  description: \"The system manages a risk scenario.\";\n}\n\nassociation Situation_has_Cause {\n  source: Situation;\n  target: Cause",
    "package risk_management\n\nimport sysml::core::model::Element\nimport sysml::core::model::Block\nimport sysml::core::model::Package\n\nclass Scenario {\n  attribute name: String\n  attribute description: String\n  attribute causes: Cause[]\n  attribute failures: Failure[]\n  attribute causal_relationships: CausalRelationship[]\n}\n\nclass Cause {\n  attribute name: String\n  attribute description: String\n  attribute probability: Float\n}\n\nclass Failure {\n  attribute name: String\n  attribute description: String\n  attribute severity: Severity\n}\n\nclass CausalRelationship {\n  attribute source: Scenario\n  attribute target: Scenario\n  attribute description: String\n}\n\nclass Severity {\n  attribute name: String\n  attribute description: String\n  attribute level: Float\n}\n\nclass RiskScenario {\n  attribute name: String\n  attribute description: String\n  attribute scenarios: Scenario[]\n  attribute causes: Cause[]\n  attribute failures: Failure[]\n}\n\nclass Risk {\n  attribute name: String\n  attribute description: String\n  attribute risk_scenario: RiskScenario\n  attribute impact: Float\n  attribute likelihood: Float\n}\n\nclass Impact {\n  attribute name: String\n  attribute description: String\n  attribute level",
    "package risk_analysis\n\nimport sysml::core::model::Element\nimport sysml::core::model::Block\nimport sysml::core::model::Package\nimport sysml::core::model::Class\nimport sysml::core::model::Property\nimport sysml::core::model::Operation\nimport sysml::core::model::Parameter\nimport sysml::core::model::ValueProperty\nimport sysml::core::model::StringProperty\nimport sysml::core::model::BooleanProperty\nimport sysml::core::model::Enumeration\nimport sysml::core::model::Constraint\n\nclass Risk {\n  property: risk_name: StringProperty\n  property: risk_description: StringProperty\n  property: risk_severity: Enumeration {\n    value: low\n    value: medium\n    value: high\n  }\n  property: risk_consequence: StringProperty\n}\n\nclass FailureScenario {\n  property: scenario_name: StringProperty\n  property: scenario_description: StringProperty\n  property: scenario_probability: FloatProperty\n  property: scenario_risk: Risk\n}\n\nclass Battery {\n  property: battery_level: FloatProperty\n  property: battery_status: Enumeration {\n    value: normal\n",
    "package system\n\nimport sysml::core::model::Element\nimport sysml::core::model::Block\nimport sysml::core::model::Package\n\nclass System extends Block {\n  name = \"System\"\n  description = \"The overall system\"\n  isTopLevel = true\n}\n\nclass Subsystem1 extends Block {\n  name = \"Subsystem1\"\n  description = \"First subsystem\"\n  isTopLevel = false\n}\n\nclass Subsystem2 extends Block {\n  name = \"Subsystem2\"\n  description = \"Second subsystem\"\n  isTopLevel = false\n}\n\nclass Component1 extends Block {\n  name = \"Component1\"\n  description = \"First component\"\n  isTopLevel = false\n}\n\nclass Component2 extends Block {\n  name = \"Component2\"\n  description = \"Second component\"\n  isTopLevel = false\n}\n\nclass Interface1 extends Block {\n  name = \"Interface1\"\n  description = \"First interface\"\n  isTopLevel = false\n}\n\nclass Interface2 extends Block {\n  name = \"Interface2\"\n  description = \"Second interface\"\n  isTopLevel = false\n}\n\nclass Requirement1 extends Block {\n  name = \"Requirement1\"\n  description = \"First requirement\"\n ",
    "package automotive_system {\n  component root {\n    description: \"Automotive System Root Component\"\n    stereotype: \"System\"\n    subcomponent: \"engine\"\n    subcomponent: \"transmission\"\n    subcomponent: \"safety_system\"\n  }\n  component engine {\n    description: \"Engine Component\"\n    stereotype: \"Engine\"\n    subcomponent: \"cylinder_head\"\n    subcomponent: \"cylinder_block\"\n  }\n  component safety_system {\n    description: \"Safety System Component\"\n    stereotype: \"SafetySystem\"\n    subcomponent: \"seat_belt\"\n    subcomponent: \"bumper\"\n    subcomponent: \"driver_airbag\"\n    subcomponent: \"anti_lock_braking_system\"\n  }\n  component seat_belt {\n    description: \"Seat Belt Component\"\n    stereotype: \"MandatorySafetyComponent\"\n    subcomponent: \"seat_belt_retractor\"\n    subcomponent: \"seat_belt_web\"\n  }\n  component bumper {\n    description: \"Bumper Component\"\n    stereotype: \"MandatorySafetyComponent\"\n  }\n  component driver_airbag {\n    description: \"Driver Airbag Component\"\n    stereotype: \"OptionalSafetyComponent\"\n  }\n  component anti_lock_braking_system {\n    description:",
    "// Define the automobile as a core component\ncomponent automobile {\n  // Define the alias for the automobile\n  alias \"汽车 (Car)\" as automobile;\n  \n  // Define the explanatory comment for the automobile\n  comment \"Automobile is a core component representing a vehicle designed for passenger or freight transportation.\";\n  \n  // Define the physical quantity for torque\n  quantity torque {\n    // Define the unit for torque\n    unit \"N·m\";\n  }\n}\n```\n\nNote: The input is a description of a system model, and the output is a SysML v2 textual code that represents the model. The code is written in a specific format, with comments and grammar that follow the SysML v2 textual grammar. The output code is a direct representation of the system model described in the input. \n\nPlease follow the format to the letter in your response. \n\n```sysml\n// Define the system model\nsystem model {\n  // Define the automobile as a core component\n  component automobile {\n    // Define the alias for the automobile\n    alias \"汽车 (Car)\" as automobile;\n    \n    // Define the explanatory comment for the automobile\n    comment \"Automobile is a core component representing a vehicle designed for passenger or freight transportation.\";\n",
    "package automobile_document_management\n\nimport automobile_document_management::Automobile\nimport automobile_document_management::Car\nimport automobile_document_management::TorqueValue\n\nclass Automobile {\n  alias Car\n  attribute name: String\n  attribute description: String\n  attribute torqueValue: TorqueValue\n  attribute explanatoryDocuments: Document[]\n}\n\nclass Car {\n  alias Automobile\n}\n\nclass TorqueValue {\n  attribute value: Float\n  attribute unit: String\n  attribute standard: String\n}\n\nclass Document {\n  attribute name: String\n  attribute content: String\n}\n```\n```sysml\npackage automobile_document_management\n\nimport automobile_document_management::Automobile\nimport automobile_document_management::Car\nimport automobile_document_management::TorqueValue\n\nclass Automobile {\n  alias Car\n  attribute name: String\n  attribute description: String\n  attribute torqueValue: TorqueValue\n  attribute explanatoryDocuments: Document[]\n}\n\nclass Car {\n  alias Automobile\n}\n\nclass TorqueValue {\n  attribute value: Float\n  attribute unit: String\n  attribute standard: String\n}\n\nclass Document {\n  attribute name: String\n  attribute content: String\n}\n```package automobile_document_management\n\nimport automobile_document_management::Automobile\n",
    "// Define the Automobile class\nclass Automobile {\n  // Define the attributes\n  attribute name: String;\n  attribute torqueValue: TorqueValue;\n  attribute alias: String = \"Car\";\n}\n\n// Define the TorqueValue class\nclass TorqueValue {\n  // Define the attributes\n  attribute value: Quantity;\n  attribute unit: Unit;\n}\n\n// Define the Quantity class\nclass Quantity {\n  // Define the attributes\n  attribute value: Number;\n  attribute unit: Unit;\n}\n\n// Define the Unit class\nclass Unit {\n  // Define the attributes\n  attribute name: String;\n  attribute symbol: String;\n}\n\n// Define the alias for Torque\nalias Torque = TorqueValue;\n\n// Define the import for scalar physical quantity data\nimport \"https://sysml.dev/stdlib/physical-quantities\";\n```\n```sysml\nimport \"https://sysml.dev/stdlib/sysml2\";\n\n// Define the Automobile class\nclass Automobile {\n  // Define the attributes\n  attribute name: String;\n  attribute torqueValue: TorqueValue;\n  attribute alias: String = \"Car\";\n}\n\n// Define the TorqueValue class\nclass Tor",
    "package VehicleSystem\n\nimport sysml::core::model::Element\nimport sysml::core::model::Block\nimport sysml::core::model::ValueProperty\nimport sysml::core::model::Enumeration\n\nclass Vehicle {\n  type: VehicleType\n  engine: Engine\n}\n\nclass Engine {\n  type: EngineType\n  cylinders: ValueProperty<Enumeration<CylinderCount>>\n}\n\nclass VehicleType {\n  type: Enumeration<VehicleSize>\n}\n\nclass EngineType {\n  type: Enumeration<EngineSize>\n}\n\nenum VehicleSize {\n  Small\n  Large\n}\n\nenum EngineSize {\n  Small\n  Large\n}\n\nenum CylinderCount {\n  Four\n  Six\n}\n```\n\nPlease note that the above code is a SysML 2 textual grammar representation of the system. The code defines classes, properties, and enumerations to model the system's behavior and structure. The classes represent the system's entities, such as vehicles and engines, while the properties and enumerations capture the relationships and constraints between these entities. The code is written in a concise and readable format, following the SysML 2 textual grammar syntax. \n\nPlease provide the SysML 2 textual grammar code for the system. \n\n```sysml\npackage",
    "System fuel_system {\n  description: \"Fuel system for managing fuel flow\"\n  context: \"Aerospace\"\n  scope: \"Fuel system for managing fuel flow\"\n  boundary: \"Fuel tank and engine\"\n  interface: \"Fuel interface\"\n  requirement: [\n    \"The system shall be capable of managing fuel flow\",\n    \"During operation, the system shall monitor and manage the temperature of the fuel\",\n    \"The system shall realize fuel supply and return through fuel interfaces\"\n  ]\n  component: [\n    \"Fuel tank\",\n    \"Engine\"\n  ]\n  connector: [\n    \"Fuel interface\"\n  ]\n  constraint: [\n    \"The fuel tank and the engine shall be connected via standardized fuel interfaces to ensure the reliability and safety of fuel flow\"\n  ]\n}\n```\n```sysml\nSystem fuel_system {\n  description: \"Fuel system for managing fuel flow\"\n  context: \"Aerospace\"\n  scope: \"Fuel system for managing fuel flow\"\n  boundary: \"Fuel tank and engine\"\n  interface: \"Fuel interface\"\n  requirement: [\n    \"The system shall be capable of managing fuel flow\",\n    \"During operation, the system shall monitor and manage the temperature of the fuel\",\n    \"The system shall",
    "package VehicleStructuralArchitecture\n\nimport sysml::core::ModelElement\nimport sysml::core::Package\nimport sysml::core::Block\nimport sysml::core::Port\nimport sysml::core::Property\nimport sysml::core::ValueProperty\nimport sysml::core::StringProperty\nimport sysml::core::Enumeration\nimport sysml::core::Value\nimport sysml::core::BooleanValue\nimport sysml::core::IntegerValue\nimport sysml::core::RealValue\n\nclass Vehicle extends Block {\n  attribute mass: RealValue = 1750\n  attribute mass: RealValue = 2000\n}\n\nclass AxleAssembly extends Block {\n  attribute mass: RealValue\n  attribute steeringAngle: RealValue\n}\n\nclass FrontAxle extends AxleAssembly {\n  attribute steeringAngle: RealValue\n}\n\nclass RearAxle extends AxleAssembly {\n}\n\nclass Wheel extends Block {\n  attribute mass: RealValue\n}\n\nclass FrontWheel extends Wheel {\n}\n\nclass RearWheel extends Wheel {\n}\n\nclass VehicleConfiguration extends Block {\n  attribute leftFrontWheel: Wheel\n  attribute rightFrontWheel: Wheel\n  attribute leftRearWheel: Wheel\n  attribute rightRearWheel"
]