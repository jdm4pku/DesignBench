[
    "package 'Vehicle' {\n\tattribute def VehicleMass;\n\tattribute def VehicleStatus;\n\tattribute def Engine;\n\tattribute def Driver;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tattribute VehicleMass;\n\t\t\tattribute VehicleStatus;\n\t\t\tassociation engine: Engine;\n\t\t\tassociation driver: Driver;\n\t\t\tperform vehicleStatus.updateStatus {\n\t\t\t\tin gearSetting = vehicleStatus.gearSetting;\n\t\t\t\tin acceleratorPedalPosition = vehicleStatus.acceleratorPedalPosition;\n\t\t\t}\n\t\t}\n\t\tpart engine {\n\t\t\tattribute Engine;\n\t\t\tperform engineStatus.updateStatus {\n\t\t\t\tin engineSpeed = engineStatus.engineSpeed;\n\t\t\t}\n\t\t}\n\t\tpart driver {\n\t\t\tattribute Driver;\n\t\t\tperform driverStatus.updateStatus {\n\t\t\t\tin driverName = driverStatus.driverName;\n\t\t\t}\n\t\t}\n\t}\n\taction vehicleStatus {\n\t\tattribute def GearSetting;\n\t\tattribute def AcceleratorPedalPosition;\n\t\taction updateStatus { in gearSetting; in acceleratorPedalPosition; }\n\t}\n\taction engineStatus {\n\t\tattribute def EngineSpeed;\n\t\taction updateStatus { in engineSpeed; }\n\t}\n\taction driverStatus {\n\t\tattribute def DriverName;\n\t\taction updateStatus { in driverName; }\n\t}\n} \n––",
    "package 'Vehicle' {\n\tattribute def VehicleType;\n\tattribute def Driver;\n\tattribute def PowerDevice;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tattribute vehicleType: VehicleType;\n\t\t\tattribute driver: Driver;\n\t\t\tattribute powerDevice: PowerDevice;\n\t\t\tpart manuallyOperatedVehicle {\n\t\t\t\tattribute driver: Driver;\n\t\t\t}\n\t\t\tpart poweredVehicle {\n\t\t\t\tattribute powerDevice: PowerDevice;\n\t\t\t}\n\t\t\tpart manuallyOperatedPoweredVehicle {\n\t\t\t\tattribute driver: Driver;\n\t\t\t\tattribute powerDevice: PowerDevice;\n\t\t\t}\n\t\t}\n\t\tpart personnel {\n\t\t\tattribute name: String;\n\t\t}\n\t\tpart engine {\n\t\t\tattribute name: String;\n\t\t}\n\t}\n} \n––––– YOUR TURN –––––\n\nInput Requirement:\nThe system is designed to model a simple elevator system. The elevator is controlled by a control panel, which is connected to the elevator car. The control panel has buttons for up, down, and stop. The elevator car has a door that can be opened or closed. The elevator can move up or down, and the door can be opened or closed. The system also includes a safety feature that prevents the elevator from moving if the door is not closed.\n\nOutput Model:\n",
    "package 'Vehicle' {\n\tpackage 'Components' {\n\t\tclass VehicleComponent {\n\t\t\tattribute def name;\n\t\t\tattribute def description;\n\t\t}\n\t\tclass Engine extends VehicleComponent {\n\t\t\tattribute def horsepower;\n\t\t}\n\t\tclass Transmission extends VehicleComponent {\n\t\t\tattribute def gearCount;\n\t\t}\n\t\tclass Wheel extends VehicleComponent {\n\t\t\tattribute def diameter;\n\t\t}\n\t}\n\tclass Vehicle {\n\t\tattribute def name;\n\t\tattribute def description;\n\t\tattribute def engine: Engine;\n\t\tattribute def transmission: Transmission;\n\t\tattribute def wheels: [Wheel];\n\t}\n\tpackage 'Structures' {\n\t\tclass VehicleStructure {\n\t\t\tattribute def name;\n\t\t\tattribute def description;\n\t\t\tattribute def vehicle: Vehicle;\n\t\t\tattribute def components: [VehicleComponent];\n\t\t}\n\t}\n}\n––––– YOUR TURN –––––\n\nInput Requirement:\nThe system needs to define and describe a manufacturing process for producing a product, in which the process consists of multiple stages. Each stage is composed of multiple tasks, and each task is associated with a specific resource. The overall process should reflect the sequential relationships and quantity requirements among the various stages and tasks—for example, a stage must be executed after another stage, and",
    "package 'Vehicle' {\n\tattribute def VehicleType;\n\tattribute def EngineType;\n\tattribute def Cylinders;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tattribute vehicleType: VehicleType;\n\t\t\tattribute engineType: EngineType;\n\t\t\tattribute cylinders: Cylinders;\n\t\t\tpart engine {\n\t\t\t\tattribute engineType: EngineType;\n\t\t\t\tattribute cylinders: Cylinders;\n\t\t\t\tpart cylinder {\n\t\t\t\t\tattribute cylinders: Cylinders;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpart smallVehicle {\n\t\t\tattribute vehicleType: VehicleType;\n\t\t\tattribute engineType: EngineType;\n\t\t\tattribute cylinders: Cylinders;\n\t\t\tpart engine {\n\t\t\t\tattribute engineType: EngineType;\n\t\t\t\tattribute cylinders: Cylinders;\n\t\t\t\tpart cylinder {\n\t\t\t\t\tattribute cylinders: Cylinders;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpart largeVehicle {\n\t\t\tattribute vehicleType: VehicleType;\n\t\t\tattribute engineType: EngineType;\n\t\t\tattribute cylinders: Cylinders;\n\t\t\tpart engine {\n\t\t\t\tattribute engineType: EngineType;\n\t\t\t\tattribute cylinders: Cylinders;\n\t\t\t\tpart cylinder {\n\t\t\t\t\tattribute cylinders: Cylinders;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n",
    "package 'Traffic Signal System' {\n\tattribute def Color;\n\tattribute def TrafficSignal;\n\tpart context {\n\t\tpart trafficSignal {\n\t\t\tattribute color: Color;\n\t\t\tperform trafficSignalManagement.produceTrafficSignal {\n\t\t\t\tout trafficSignal = trafficSignal;\n\t\t\t}\n\t\t}\n\t\tpart trafficSignalManagement {\n\t\t\tperform trafficSignalManagement.produceGreenTrafficSignal {\n\t\t\t\tout trafficSignal = trafficSignal;\n\t\t\t}\n\t\t}\n\t\tpart greenTrafficSignal {\n\t\t\tattribute color: Color;\n\t\t\tperform trafficSignalManagement.produceGreenTrafficSignal {\n\t\t\t\tout trafficSignal = trafficSignal;\n\t\t\t}\n\t\t}\n\t}\n\taction trafficSignalManagement {\n\t\taction produceTrafficSignal { out trafficSignal: TrafficSignal; }\n\t\taction produceGreenTrafficSignal { out trafficSignal: TrafficSignal; }\n\t}\n}\n––––– YOUR TURN –––––\n\nInput Requirement:\nThe system shall be able to display the current time on the display screen, and the display screen shall be able to display the current time in both 12-hour and 24-hour formats. The system shall also be able to display the current date on the display screen.\n\nOutput Model:\npackage 'Display Screen' {\n\tattribute def Time;\n\tattribute def Date;\n\tattribute def",
    "package 'Information Classification' {\n\tattribute def Classification;\n\tattribute def Code;\n\tattribute def Color;\n\tattribute def Grade;\n\tattribute def Score;\n\tenum def Classification {\n\t\tunclassified,\n\t\tconfidential,\n\t\tsecret\n\t}\n\tenum def Grade {\n\t\tA,\n\t\tB,\n\t\tC,\n\t\tD,\n\t\tF\n\t}\n\tpackage 'Classification Levels' {\n\t\tclass def Unclassified {\n\t\t\tattribute def Code: Code := 'uncl';\n\t\t\tattribute def Color: Color := 'green';\n\t\t}\n\t\tclass def Confidential {\n\t\t\tattribute def Code: Code := 'conf';\n\t\t\tattribute def Color: Color := 'yellow';\n\t\t}\n\t\tclass def Secret {\n\t\t\tattribute def Code: Code := 'secr';\n\t\t\tattribute def Color: Color := 'red';\n\t\t}\n\t}\n\tpackage 'Grade Levels' {\n\t\tclass def A {\n\t\t\tattribute def Score: Score := 4.0;\n\t\t}\n\t\tclass def B {\n\t\t\tattribute def Score: Score := 3.0;\n\t\t}\n\t\tclass def C {\n\t\t\tattribute def Score: Score := 2.0;\n\t\t}\n\t\tclass def D {\n\t\t\tattribute def Score:",
    "package 'Vehicle' {\n\tattribute def VehicleType;\n\tattribute def Engine;\n\tattribute def Cylinder;\n\tport def EnginePort {\n\t\tout engine: Engine;\n\t}\n\tpart context {\n\t\tpart smallVehicle {\n\t\t\tport enginePort: EnginePort;\n\t\t\tperform engineConfig.produceEngine {\n\t\t\t\tin vehicleType = smallVehicle.vehicleType;\n\t\t\t\tout engine = enginePort.engine;\n\t\t\t}\n\t\t}\n\t\tpart largeVehicle {\n\t\t\tport enginePort: EnginePort;\n\t\t\tperform engineConfig.produceEngine {\n\t\t\t\tin vehicleType = largeVehicle.vehicleType;\n\t\t\t\tout engine = enginePort.engine;\n\t\t\t}\n\t\t}\n\t\tpart engineConfig {\n\t\t\tport enginePort: ~EnginePort;\n\t\t\tperform engineConfig.produceEngine {\n\t\t\t\tin vehicleType;\n\t\t\t\tout engine: Engine;\n\t\t\t}\n\t\t\tpart engine {\n\t\t\t\tport cylinderPort: ~CylinderPort;\n\t\t\t\tperform engineConfig.produceCylinders {\n\t\t\t\t\tin vehicleType;\n\t\t\t\t\tout cylinder: Cylinder;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart cylinder {\n\t\t\t\tport cylinderPort: ~CylinderPort;\n\t\t\t\tperform engineConfig.produceCylinders {\n\t\t\t\t\tin vehicleType;\n\t\t\t\t\tout cylinder: Cylinder;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpart engine",
    "package 'Vehicle' {\n\tattribute def VehicleType;\n\tattribute def DriverInfo;\n\tattribute def FuelType;\n\tattribute def FuelCapacity;\n\tattribute def VehicleInfo;\n\tattribute def Personnel;\n\tattribute def FuelTank;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tattribute VehicleType;\n\t\t\tattribute DriverInfo;\n\t\t\tattribute FuelTank;\n\t\t\tattribute VehicleInfo;\n\t\t\tattribute Personnel;\n\t\t\tattribute FuelCapacity;\n\t\t\tattribute FuelType;\n\t\t\tport fuelPort: ~FuelTankPort;\n\t\t\tperform vehicleInfo.provideVehicleInfo {\n\t\t\t\tout vehicleInfo = vehicleInfoPort.vehicleInfo;\n\t\t\t}\n\t\t\tport vehicleInfoPort: ~VehicleInfoPort;\n\t\t}\n\t\tpart fuelTank {\n\t\t\tattribute FuelType;\n\t\t\tattribute FuelCapacity;\n\t\t\tattribute FuelTank;\n\t\t\tport fuelPort: ~FuelTankPort;\n\t\t\tperform fuelTankInfo.provideFuelTankInfo {\n\t\t\t\tout fuelTankInfo = fuelTankInfoPort.fuelTankInfo;\n\t\t\t}\n\t\t\tport fuelTankInfoPort: ~FuelTankInfoPort;\n\t\t}\n\t\tpart vehicleInfo {\n\t\t\tattribute VehicleInfo;\n\t\t\tattribute Personnel;\n\t\t\tattribute DriverInfo;\n\t\t\tattribute VehicleType;\n\t\t\tperform vehicleInfo.provide",
    "package 'Automobile Wheel Assembly' {\n\tattribute def WheelBearingUnit;\n\tattribute def Tire;\n\tattribute def Bead;\n\tattribute def Hub;\n\tattribute def Rim;\n\tattribute def BoltMountingHole;\n\tattribute def ThreadedHole;\n\tattribute def BoltConnection;\n\tpart context {\n\t\tpart wheelBearingUnit {\n\t\t\tpart hub {\n\t\t\t\tport boltMountingHolePort: BoltMountingHole;\n\t\t\t\tpart threadedHole {\n\t\t\t\t\tport threadedHolePort: ThreadedHole;\n\t\t\t\t\tperform boltConnection.connectBolt {\n\t\t\t\t\t\tin boltMountingHole = boltMountingHolePort.boltMountingHole;\n\t\t\t\t\t\tin threadedHole = threadedHolePort.threadedHole;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpart rim {\n\t\t\t\t\tport rimPort: Rim;\n\t\t\t\t\tperform boltConnection.connectRim {\n\t\t\t\t\t\tin rim = rimPort.rim;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart tire {\n\t\t\t\tpart bead {\n\t\t\t\t\tport beadPort: Bead;\n\t\t\t\t\tperform tireAssembly.connectBead {\n\t\t\t\t\t\tin bead = beadPort.bead;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpart boltConnection {\n\t\t\t\t\tport boltMountingHolePort: ~BoltMountingH",
    "package 'Fuel Management System' {\n\tattribute def FuelSupply;\n\tattribute def ReturnFlow;\n\tattribute def Temperature;\n\tport def FuelSupplyPort {\n\t\tout fuelSupply: FuelSupply;\n\t}\n\tport def ReturnFlowPort {\n\t\tin returnFlow: ReturnFlow;\n\t}\n\tport def TemperaturePort {\n\t\tin temperature: Temperature;\n\t}\n\tpart context {\n\t\tpart fuelTank {\n\t\t\tport fuelSupplyPort: ~FuelSupplyPort;\n\t\t\tport returnFlowPort: ~ReturnFlowPort;\n\t\t\tperform fuelManagement.provideFuelSupply {\n\t\t\t\tout fuelSupply = fuelSupplyPort.fuelSupply;\n\t\t\t}\n\t\t\tperform fuelManagement.receiveReturnFlow {\n\t\t\t\tin returnFlow = returnFlowPort.returnFlow;\n\t\t\t}\n\t\t\tperform fuelManagement.transmitTemperature {\n\t\t\t\tin temperature = temperaturePort.temperature;\n\t\t\t}\n\t\t}\n\t\tpart engine {\n\t\t\tport fuelSupplyPort: ~FuelSupplyPort;\n\t\t\tport returnFlowPort: ~ReturnFlowPort;\n\t\t\tport temperaturePort: ~TemperaturePort;\n\t\t\tperform fuelManagement.consumeFuelSupply {\n\t\t\t\tin fuelSupply = fuelSupplyPort.fuelSupply;\n\t\t\t}\n\t\t\tperform fuelManagement.returnExcessFuel {\n\t\t\t\tout returnFlow = returnFlowPort.returnFlow;\n\t\t\t}\n\t\t\tperform",
    "package 'Vehicle' {\n\tattribute def mass;\n\tattribute def steeringAngle;\n\tattribute def orderedTires;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tattribute mass = 1750;\n\t\t\tpart frontAxle {\n\t\t\t\tattribute mass;\n\t\t\t\tpart tire1 {\n\t\t\t\t\tattribute mass;\n\t\t\t\t}\n\t\t\t\tpart tire2 {\n\t\t\t\t\tattribute mass;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart rearAxle {\n\t\t\t\tattribute mass;\n\t\t\t\tpart tire1 {\n\t\t\t\t\tattribute mass;\n\t\t\t\t}\n\t\t\t\tpart tire2 {\n\t\t\t\t\tattribute mass;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpart vehicle1_c1 {\n\t\t\tattribute mass = 2000;\n\t\t\tpart frontAxle {\n\t\t\t\tattribute mass;\n\t\t\t\tpart tire1 {\n\t\t\t\t\tattribute mass;\n\t\t\t\t\tname = \"tire1\";\n\t\t\t\t}\n\t\t\t\tpart tire2 {\n\t\t\t\t\tattribute mass;\n\t\t\t\t\tname = \"tire2\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart rearAxle {\n\t\t\t\tattribute mass;\n\t\t\t\tpart tire1 {\n\t\t\t\t\tattribute mass;\n\t\t\t\t}\n\t\t\t\tpart tire2 {\n\t\t\t\t\tattribute mass;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tclass Vehicle {\n\t\tattribute mass;\n\t}\n\tclass FrontAxle {\n\t\t",
    "package 'Coupling System' {\n\tattribute def CouplingMechanism;\n\tattribute def Hitch;\n\tattribute def Trailer;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport hitchPort: Hitch;\n\t\t\tperform couplingMechanism.connectVehicle {\n\t\t\t\tin hitch = hitchPort.hitch;\n\t\t\t}\n\t\t}\n\t\tpart hitch {\n\t\t\tport couplingBallPort: CouplingMechanism;\n\t\t\tperform couplingMechanism.produceCouplingBall {\n\t\t\t\tout couplingBall = couplingBallPort.couplingMechanism;\n\t\t\t}\n\t\t\tport trailerConnectorPort: CouplingMechanism;\n\t\t\tperform couplingMechanism.produceTrailerConnector {\n\t\t\t\tout trailerConnector = trailerConnectorPort.couplingMechanism;\n\t\t\t}\n\t\t}\n\t\tpart trailer {\n\t\t\tport connectorPort: CouplingMechanism;\n\t\t\tperform couplingMechanism.connectTrailer {\n\t\t\t\tin connector = connectorPort.couplingMechanism;\n\t\t\t}\n\t\t}\n\t}\n\taction couplingMechanism {\n\t\taction connectVehicle { in hitch: Hitch; }\n\t\tsuccession flow vehicleFlow from connectVehicle.hitch to produceCouplingBall.couplingBall;\n\t\taction produceCouplingBall { out couplingBall: CouplingMechanism; }\n\t\tsuccession flow ballFlow from produce",
    "package 'Vehicle Power Transmission System' {\n\tattribute def FuelCmd;\n\tattribute def Power;\n\tattribute def ClutchCmd;\n\tattribute def Torque;\n\tattribute def Speed;\n\tattribute def Angle;\n\tattribute def Force;\n\tattribute def Acceleration;\n\tattribute def Velocity;\n\tattribute def Position;\n\tattribute def Time;\n\tattribute def Temperature;\n\tattribute def Pressure;\n\tattribute def FlowRate;\n\tattribute def Flow;\n\tattribute def Energy;\n\tattribute def PowerLoss;\n\tattribute def Efficiency;\n\tattribute def Mass;\n\tattribute def Inertia;\n\tattribute def MomentOfInertia;\n\tattribute def AngularVelocity;\n\tattribute def AngularAcceleration;\n\tattribute def AngularMomentum;\n\tattribute def AngularDisplacement;\n\tattribute def LinearVelocity;\n\tattribute def LinearAcceleration;\n\tattribute def LinearMomentum;\n\tattribute def LinearDisplacement;\n\tattribute def LinearForce;\n\tattribute def LinearTorque;\n\tattribute def LinearEnergy;\n\tattribute def LinearPower;\n\tattribute def LinearPowerLoss;\n\tattribute def LinearEfficiency;\n\tattribute def LinearMass;\n\tattribute def LinearInertia;\n\tattribute def LinearMomentOfInertia;\n\tattribute def LinearAngular",
    "package 'Multi-Architecture System' {\n\tpackage 'a11' {\n\t\tpart b11 {\n\t\t\tpart c1 {\n\t\t\t\tport pb: pe;\n\t\t\t\tport pc: pd;\n\t\t\t}\n\t\t\tpart c2 {\n\t\t\t\tport pb: pe;\n\t\t\t\tport pc: pd;\n\t\t\t}\n\t\t\tinterface pe connect c1.pb to c2.pb;\n\t\t}\n\t\tpart b12 {\n\t\t\tpart c3 {\n\t\t\t\tport pd: pf;\n\t\t\t\tport pc: pd;\n\t\t\t}\n\t\t\tpart c4 {\n\t\t\t\tport pd: pf;\n\t\t\t\tport pc: pd;\n\t\t\t}\n\t\t\tinterface pf connect c3.pd to c4.pd;\n\t\t}\n\t}\n\tpackage 'a21' {\n\t\tpart b21 {\n\t\t\tpart c1: ~c1;\n\t\t\tpart c2: ~c2;\n\t\t\tpart c3: ~c3;\n\t\t\tpart c4: ~c4;\n\t\t\tinterface pe connect c1.pb to c2.pb;\n\t\t\tinterface pf connect c3.pd to c4.pd;\n\t\t}\n\t\tpart b22 {\n\t\t\tpart c1: ~c1;\n\t\t\tpart c2: ~c2;\n\t\t",
    "package 'Automotive Powertrain' {\n\tattribute def FuelCmd;\n\tattribute def EngineTorque;\n\tattribute def DrivingForce;\n\tattribute def EngineStatus;\n\tattribute def ShutdownCmd;\n\tattribute def PowerTransmission;\n\tattribute def PowerDistribution;\n\tport def FuelCmdPort {\n\t\tout fuelCmd: FuelCmd;\n\t}\n\tport def ShutdownCmdPort {\n\t\tout shutdownCmd: ShutdownCmd;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport fuelCmdPort: FuelCmdPort;\n\t\t\tperform powertrainControl.sendFuelCmd {\n\t\t\t\tout fuelCmd = fuelCmdPort.fuelCmd;\n\t\t\t}\n\t\t\tport shutdownCmdPort: ShutdownCmdPort;\n\t\t\tperform powertrainControl.sendShutdownCmd {\n\t\t\t\tout shutdownCmd = shutdownCmdPort.shutdownCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToPowertrain connect user.fuelCmdPort to powertrain.fuelCmdPort {\n\t\t\tref flow references powertrainControl.fuelCmdFlow\n\t\t\t\tfrom source.fuelCmd to target.fuelCmd;\n\t\t}\n\t\tinterface userToPowertrain connect user.shutdownCmdPort to powertrain.shutdownCmdPort {\n\t\t\tref flow references powertrainControl.shutdownCmdFlow\n\t\t\t\tfrom source.shutdownCmd to target.shutdownCmd;\n\t\t}\n\t\tpart power",
    "package 'Automotive Powertrain' {\n\tattribute def FuelCmd;\n\tattribute def StallSignal;\n\tattribute def EngineState;\n\tattribute def Torque;\n\tattribute def Power;\n\tattribute def WheelTorque;\n\tattribute def EngineSpeed;\n\tattribute def GearPosition;\n\tattribute def FuelLevel;\n\tattribute def EngineTemp;\n\tattribute def OilLevel;\n\tattribute def CoolantLevel;\n\tattribute def BatteryVoltage;\n\tattribute def BatteryCurrent;\n\tattribute def BatteryTemp;\n\tattribute def BatteryState;\n\tattribute def PowerStage;\n\tattribute def PowerStageState;\n\tattribute def PowerStageTorque;\n\tattribute def PowerStagePower;\n\tattribute def PowerStageWheelTorque;\n\tattribute def PowerStageEngineSpeed;\n\tattribute def PowerStageGearPosition;\n\tattribute def PowerStageFuelLevel;\n\tattribute def PowerStageEngineTemp;\n\tattribute def PowerStageOilLevel;\n\tattribute def PowerStageCoolantLevel;\n\tattribute def PowerStageBatteryVoltage;\n\tattribute def PowerStageBatteryCurrent;\n\tattribute def PowerStageBatteryTemp;\n\tattribute def PowerStageBatteryState;\n\tattribute def PowerStageState;\n\tattribute def PowerStageTorque;\n\tattribute def PowerStagePower;\n\tattribute def PowerStageWheelTorque;\n\tattribute",
    "package 'Vehicle Powertrain System' {\n\tattribute def FuelCmd;\n\tattribute def EngineStartCmd;\n\tattribute def EngineShutdownCmd;\n\tattribute def Torque;\n\tattribute def Power;\n\tpart context {\n\t\tpart driver {\n\t\t\tport fuelCmdPort: FuelCmdPort;\n\t\t\tperform powertrainControl.sendFuelCmd {\n\t\t\t\tout fuelCmd = fuelCmdPort.fuelCmd;\n\t\t\t}\n\t\t}\n\t\tinterface driverToPowertrain connect driver.fuelCmdPort to powertrain.fuelCmdPort {\n\t\t\tref flow references powertrain.fuelCmdFlow\n\t\t\t\tfrom source.fuelCmd to target.fuelCmd; \n\t\t}\n\t\tpart powertrain {\n\t\t\tport fuelCmdPort: ~FuelCmdPort;\n\t\t\tperform powertrainControl.generateEngineTorque {\n\t\t\t\tin fuelCmd = fuelCmdPort.fuelCmd;\n\t\t\t\tout torque = torquePort.torque;\n\t\t\t}\n\t\t\tport torquePort: TorquePort;\n\t\t}\n\t\tpart transmission {\n\t\t\tport torquePort: ~TorquePort;\n\t\t\tperform powertrainControl.amplifyTorque {\n\t\t\t\tin torque = torquePort.torque;\n\t\t\t\tout torque = torquePort.torque;\n\t\t\t}\n\t\t}\n\t\tpart wheel {\n\t\t\tport torquePort: ~Tor",
    "package 'Trailer Coupling' {\n\tattribute def CouplingCmd;\n\tattribute def Power;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport hitchPort: HitchPort;\n\t\t\tperform couplingRegion.produceHitch {\n\t\t\t\tin couplingCmd = hitchPort.couplingCmd;\n\t\t\t}\n\t\t}\n\t\tpart trailer {\n\t\t\tport couplerPort: CouplerPort;\n\t\t\tperform couplingRegion.produceCoupler {\n\t\t\t\tin couplingCmd = couplerPort.couplingCmd;\n\t\t\t}\n\t\t}\n\t\tpart couplingRegion {\n\t\t\tport hitchPort: ~HitchPort;\n\t\t\tport couplerPort: ~CouplerPort;\n\t\t\tperform couplingRegion.connect {\n\t\t\t\tin hitch = hitchPort.hitch;\n\t\t\t\tin coupler = couplerPort.coupler;\n\t\t\t}\n\t\t\tperform couplingRegion.disconnect {\n\t\t\t\tin hitch = hitchPort.hitch;\n\t\t\t\tin coupler = couplerPort.coupler;\n\t\t\t}\n\t\t}\n\t}\n\taction couplingRegion {\n\t\taction produceHitch { in couplingCmd; out hitch: Hitch; }\n\t\taction produceCoupler { in couplingCmd; out coupler: Coupler; }\n\t}\n}\n––––– YOUR TURN –––––\n\nInput Requirement:\nThe system shall be",
    "package 'VehicleTrailerSystem' {\n\tattribute def ConnectionStatus;\n\tattribute def HitchingStatus;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tpart chassis {\n\t\t\t\tport towBallPort: ~TowBallPort;\n\t\t\t}\n\t\t\tpart towBall {\n\t\t\t\tport towBallPort: TowBallPort;\n\t\t\t}\n\t\t}\n\t\tpart trailer {\n\t\t\tpart coupler {\n\t\t\t\tport couplerPort: CouplerPort;\n\t\t\t}\n\t\t\tpart trailerFrame {\n\t\t\t\tport couplerPort: ~CouplerPort;\n\t\t\t}\n\t\t}\n\t\tinterface vehicleToTrailer connect vehicle.towBallPort to trailer.couplerPort {\n\t\t\tref flow references hitchingFlow\n\t\t\t\tfrom source.towBall to target.coupler;\n\t\t}\n\t}\n\taction hitching {\n\t\tsuccession flow hitchingFlow from vehicle.towBallPort.towBall to trailer.couplerPort.coupler;\n\t}\n} \n––––– YOUR TURN –––––\n\nInput Requirement:\nThe system is designed to manage the inventory of a warehouse. The system includes a warehouse, a warehouse manager, and a warehouse inventory. The warehouse manager is responsible for adding, removing, and updating items in the inventory. The warehouse inventory is a collection of items,",
    "package 'Trailer Connection' {\n\tattribute def ConnectionState;\n\tattribute def HitchingState;\n\tattribute def UnhitchingState;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tpart chassis {\n\t\t\t\tpart towBall {\n\t\t\t\t\tport towBallPort: ~CouplerPort;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart coupler {\n\t\t\t\tport couplerPort: CouplerPort;\n\t\t\t}\n\t\t\tperform trailerConnection.connectTrailer {\n\t\t\t\tin couplerPort = coupler.couplerPort;\n\t\t\t\tout towBallPort = towBall.towBallPort;\n\t\t\t}\n\t\t}\n\t\tpart trailer {\n\t\t\tpart coupler {\n\t\t\t\tport couplerPort: CouplerPort;\n\t\t\t}\n\t\t\tpart chassis {\n\t\t\t\tpart hitch {\n\t\t\t\t\tport hitchPort: ~CouplerPort;\n\t\t\t\t}\n\t\t\t}\n\t\t\tperform trailerConnection.connectTrailer {\n\t\t\t\tin couplerPort = coupler.couplerPort;\n\t\t\t\tout hitchPort = hitch.hitchPort;\n\t\t\t}\n\t\t}\n\t\tpart trailerConnection {\n\t\t\tperform connectTrailer {\n\t\t\t\tin couplerPort: CouplerPort;\n\t\t\t\tin hitchPort: CouplerPort;\n\t\t\t\tout connectionState: ConnectionState;\n\t\t\t}\n\t\t\tperform disconnectTrailer {\n\t\t\t\tin",
    "package 'Fuel System' {\n\tattribute def FuelSupply;\n\tattribute def FuelReturn;\n\tattribute def Temperature;\n\tport def FuelSupplyPort {\n\t\tout fuelSupply: FuelSupply;\n\t}\n\tport def FuelReturnPort {\n\t\tin fuelReturn: FuelReturn;\n\t}\n\tpart context {\n\t\tpart fuelTank {\n\t\t\tport fuelSupplyPort: ~FuelSupplyPort;\n\t\t\tperform fuelSupplyProcess.provideFuel {\n\t\t\t\tout fuelSupply = fuelSupplyPort.fuelSupply;\n\t\t\t}\n\t\t}\n\t\tpart engine {\n\t\t\tport fuelReturnPort: ~FuelReturnPort;\n\t\t\tperform fuelSupplyProcess.returnFuel {\n\t\t\t\tin fuelReturn = fuelReturnPort.fuelReturn;\n\t\t\t}\n\t\t}\n\t\tpart fuelSupplyProcess {\n\t\t\tperform fuelSupplyProcess.provideFuel {\n\t\t\t\tin temperature = temperaturePort.temperature;\n\t\t\t}\n\t\t\tperform fuelSupplyProcess.returnFuel {\n\t\t\t\tin temperature = temperaturePort.temperature;\n\t\t\t}\n\t\t\tpart temperatureMonitor {\n\t\t\t\tport temperaturePort: ~TemperaturePort;\n\t\t\t\tperform fuelSupplyProcess.monitorTemperature {\n\t\t\t\t\tin temperature = temperaturePort.temperature;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpart temperatureMonitor {\n\t\t\tport temperaturePort: ~TemperaturePort;\n\t\t\tperform fuelSupplyProcess.monitorTemperature {\n\t\t\t\tin",
    "package 'Fuel Delivery System' {\n\tattribute def Fuel;\n\tattribute def FuelLevel;\n\tattribute def MaxCapacity;\n\tattribute def FlowRate;\n\tattribute def Pressure;\n\tattribute def Temperature;\n\tattribute def Viscosity;\n\tattribute def FuelPumpCmd;\n\tattribute def TankCmd;\n\tattribute def VehicleCmd;\n\tattribute def StorageTankCmd;\n\tattribute def VehicleTankCmd;\n\tattribute def FuelTankCmd;\n\tattribute def FuelPumpStatus;\n\tattribute def TankStatus;\n\tattribute def VehicleStatus;\n\tattribute def StorageTankStatus;\n\tattribute def VehicleTankStatus;\n\tattribute def FuelTankStatus;\n\tattribute def Flow;\n\tattribute def PressureDrop;\n\tattribute def TemperatureDrop;\n\tattribute def ViscosityDrop;\n\tattribute def FuelPumpCmdFlow;\n\tattribute def TankCmdFlow;\n\tattribute def VehicleCmdFlow;\n\tattribute def StorageTankCmdFlow;\n\tattribute def VehicleTankCmdFlow;\n\tattribute def FuelTankCmdFlow;\n\tattribute def FuelPumpStatusFlow;\n\tattribute def TankStatusFlow;\n\tattribute def VehicleStatusFlow;\n\tattribute def StorageTankStatusFlow;\n\tattribute def VehicleTankStatusFlow;\n\tattribute def FuelTankStatusFlow;\n\tattribute def FlowFlow;\n\tattribute",
    "package 'Automobile Assembly' {\n\tattribute def VehicleAssembly;\n\tattribute def GearboxAssembly;\n\tattribute def EngineAssembly;\n\tattribute def FullyAssembledVehicle;\n\tpart context {\n\t\tpart vehicleAssembly {\n\t\t\tattribute VehicleAssembly;\n\t\t\tpart gearboxAssembly {\n\t\t\t\tattribute GearboxAssembly;\n\t\t\t\tpart engineAssembly {\n\t\t\t\t\tattribute EngineAssembly;\n\t\t\t\t\tpart fullyAssembledVehicle {\n\t\t\t\t\t\tattribute FullyAssembledVehicle;\n\t\t\t\t\t\tattribute gearbox: GearboxAssembly;\n\t\t\t\t\t\tattribute engine: EngineAssembly;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\taction assemblyProcess {\n\t\tsequence flow from vehicleAssembly to gearboxAssembly;\n\t\tsequence flow from gearboxAssembly to engineAssembly;\n\t\tsequence flow from engineAssembly to fullyAssembledVehicle;\n\t}\n} \n––––– YOUR TURN –––––\n\nInput Requirement:\nThe system shall provide a model of the process for manufacturing a custom bicycle, which involves a series of sequential steps: first, the frame is manufactured, then the wheels are attached to the frame, followed by the installation of the brakes, gears, and pedals. The final step is the assembly of the handlebars, seatpost, and saddle. The model should capture the sequence of these steps and the relationships between the components",
    "package 'VehicleA' {\n\tattribute def BrakePedalState;\n\tattribute def StartSignal;\n\tattribute def VehicleOnSignal;\n\tattribute def RestoreToNormalSignal;\n\tattribute def OverTemperatureSignal;\n\tattribute def Temperature;\n\tattribute def ParkingBrakeApplied;\n\tattribute def VehicleState;\n\tattribute def HealthState;\n\tattribute def MaintenanceState;\n\tattribute def DegradedState;\n\tattribute def NormalState;\n\tattribute def StartingState;\n\tattribute def RunningState;\n\tattribute def OffState;\n\tattribute def HealthManagementState;\n\tattribute def VehicleControllerState;\n\tattribute def VehicleControllerStateTransition;\n\tattribute def VehicleStateTransition;\n\tattribute def HealthStateTransition;\n\tattribute def MaintenanceStateTransition;\n\tattribute def DegradedStateTransition;\n\tattribute def NormalStateTransition;\n\tattribute def StartingStateTransition;\n\tattribute def RunningStateTransition;\n\tattribute def OffStateTransition;\n\tattribute def HealthManagementStateTransition;\n\tattribute def VehicleControllerStateTransition;\n\tpackage 'VehicleController' {\n\t\tattribute def VehicleControllerState;\n\t\tattribute def VehicleControllerStateTransition;\n\t}\n\tpart context {\n\t\tpart",
    "package 'Vehicle System' {\n\tattribute def VehicleStatus;\n\tattribute def VehicleHealth;\n\tattribute def Temperature;\n\tattribute def BrakePedalState;\n\tattribute def StartSignal;\n\tattribute def VehicleControllerStatus;\n\tattribute def Fuel;\n\tattribute def MaintenanceInterval;\n\tattribute def TemperatureThreshold;\n\tattribute def DegradedMode;\n\tattribute def NormalMode;\n\tattribute def AbnormalMode;\n\tattribute def ShutdownState;\n\tattribute def StartupState;\n\tattribute def SelfInspectionState;\n\tattribute def PowerSupplyState;\n\tattribute def WarningSignal;\n\tattribute def ControlSignal;\n\tattribute def StatusSignal;\n\tattribute def MaintenanceSignal;\n\tattribute def FaultSignal;\n\tattribute def RecoverySignal;\n\tattribute def NormalSignal;\n\tattribute def AbnormalSignal;\n\tattribute def DegradedSignal;\n\tattribute def ShutdownSignal;\n\tattribute def StartupSignal;\n\tattribute def SelfInspectionSignal;\n\tattribute def PowerSupplySignal;\n\tattribute def VehicleControllerConfig;\n\tattribute def VehicleConfig;\n\tattribute def VehicleAttributes;\n\tattribute def VehicleControllerAttributes;\n\tattribute def VehicleAttributesConfig;\n\tattribute def VehicleControllerAttributesConfig;\n\tattribute def VehicleAttributesConfigured;\n\tattribute def VehicleControllerAttributesConfigured;\n\tattribute def VehicleAttributes",
    "package 'VehicleSimulation' {\n\tattribute def Vehicle;\n\tattribute def Road;\n\tattribute def Time;\n\tattribute def State;\n\tattribute def Snapshot;\n\tattribute def Simulation;\n\tattribute def VehiclePerformance;\n\tattribute def RoadAdaptability;\n\tport def VehiclePort {\n\t\tin vehicle: Vehicle;\n\t}\n\tport def RoadPort {\n\t\tin road: Road;\n\t}\n\tport def TimePort {\n\t\tin time: Time;\n\t}\n\tport def StatePort {\n\t\tin state: State;\n\t}\n\tport def SnapshotPort {\n\t\tin snapshot: Snapshot;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport vehiclePort: VehiclePort;\n\t\t\tport roadPort: RoadPort;\n\t\t\tport timePort: TimePort;\n\t\t\tperform simulation.produceSimulation {\n\t\t\t\tin vehicle = vehiclePort.vehicle;\n\t\t\t\tin road = roadPort.road;\n\t\t\t\tin time = timePort.time;\n\t\t\t}\n\t\t\tport snapshotPort: SnapshotPort;\n\t\t\tperform simulation.recordSnapshot {\n\t\t\t\tin snapshot = snapshotPort.snapshot;\n\t\t\t}\n\t\t}\n\t\tpart simulation {\n\t\t\tport vehiclePort: ~VehiclePort;\n\t\t\tport roadPort: ~RoadPort;\n\t\t\tport timePort: ~TimePort;\n\t\t\tport statePort: StatePort;\n\t\t\tperform simulation.produce",
    "package 'Automotive Product Configuration' {\n\tattribute def SubsystemA;\n\tattribute def SubsystemB;\n\tattribute def Component1;\n\tattribute def Component2;\n\tattribute def Component3;\n\tattribute def Component4;\n\tattribute def Component5;\n\tattribute def Component6;\n\tattribute def ConfigurationA;\n\tattribute def ConfigurationB;\n\tattribute def Constraint1;\n\tattribute def Constraint2;\n\tpart context {\n\t\tpart automobile {\n\t\t\tattribute def selectedSubsystemA;\n\t\t\tattribute def selectedSubsystemB;\n\t\t\tperform configureSubsystemA {\n\t\t\t\tin selectedSubsystemA;\n\t\t\t\tout subsystemA = subsystemA[selectedSubsystemA];\n\t\t\t}\n\t\t\tperform configureSubsystemB {\n\t\t\t\tin selectedSubsystemB;\n\t\t\t\tout subsystemB = subsystemB[selectedSubsystemB];\n\t\t\t}\n\t\t\tperform checkConstraint {\n\t\t\t\tin subsystemA, subsystemB;\n\t\t\t\tout constraint = constraint1;\n\t\t\t}\n\t\t}\n\t\tpart subsystemA {\n\t\t\tattribute def Component1;\n\t\t\tattribute def Component2;\n\t\t\tattribute def Component3;\n\t\t",
    "package 'Modular Vehicle Platform' {\n\tattribute def Subsystem;\n\tattribute def Component;\n\tattribute def Port;\n\tattribute def Variant;\n\tattribute def Configuration;\n\tattribute def Constraint;\n\tpart context {\n\t\tpart user {\n\t\t\tport userPort: UserPort;\n\t\t\tperform configureVehicle.sendConfiguration {\n\t\t\t\tin configuration = userPort.configuration;\n\t\t\t}\n\t\t}\n\t\tinterface userToPlatform connect user.userPort to platform.userPort {\n\t\t\tref flow references configureVehicle.configurationFlow\n\t\t\t\tfrom source.userPort to target.platform.userPort; \n\t\t}\n\t\tpart platform {\n\t\t\tport userPort: UserPort;\n\t\t\tperform configureVehicle.produceConfiguration {\n\t\t\t\tin configuration = userPort.configuration;\n\t\t\t\tout subsystems = subsystems;\n\t\t\t}\n\t\t\tpart subsystems {\n\t\t\t\tpart subsystemA {\n\t\t\t\t\tport p1: Port;\n\t\t\t\t\tperform configureVehicle.produceSubsystem {\n\t\t\t\t\t\tin configuration = userPort.configuration;\n\t\t\t\t\t\tout subsystem = subsystemA;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpart subsystemB {\n\t\t\t\t\tport p2: Port;\n\t\t\t\t\tperform configureVehicle.produceSubsystem {\n\t\t\t\t\t\tin configuration = userPort.configuration;\n\t\t\t\t\t\tout subsystem = subsystemB;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpart configureVehicle {\n\t\t",
    "package 'VehicleConfigurator' {\n\tattribute def Engine;\n\tattribute def Transmission;\n\tattribute def Wheels;\n\tattribute def PerformanceRequirement;\n\tattribute def UserPreference;\n\tattribute def VehicleModelVariant;\n\tattribute def ConfigurationConstraint;\n\tpart context {\n\t\tpart user {\n\t\t\tport userPreferencePort: UserPreferencePort;\n\t\t\tperform configureVehicle.sendUserPreference {\n\t\t\t\tin userPreference = userPreferencePort.userPreference;\n\t\t\t}\n\t\t}\n\t\tinterface userToConfigurator connect user.userPreferencePort to configurator.userPreferencePort {\n\t\t\tref flow references configureVehicle.userPreferenceFlow\n\t\t\t\tfrom source.userPreference to target.userPreference;\n\t\t}\n\t\tpart configurator {\n\t\t\tport userPreferencePort: ~UserPreferencePort;\n\t\t\tperform configureVehicle.configureVehicle {\n\t\t\t\tin userPreference = userPreferencePort.userPreference;\n\t\t\t\tout engine = enginePort.engine;\n\t\t\t\tout transmission = transmissionPort.transmission;\n\t\t\t\tout wheels = wheelsPort.wheels;\n\t\t\t}\n\t\t\tport enginePort: EnginePort;\n\t\t\tport transmissionPort: TransmissionPort;\n\t\t\tport wheelsPort: WheelsPort;\n\t\t}\n\t\tpart engine {\n\t\t\tport enginePort: ~EnginePort;\n\t\t\tperform configureVehicle.configureEngine {\n\t\t\t\tin userPreference = userPreferencePort.userPreference;\n\t\t\t",
    "package 'Automotive System' {\n\t// ... (your code here)\n} \n––––– YOUR TURN –––––\n\nInput Requirement:\nThe system shall provide a user interface to allow users to input their personal data, such as name, age, and address, and to display the entered data in a readable format. The system shall also provide a feature to allow users to edit their personal data. The system shall be able to store the entered data in a database and retrieve it when needed. The user interface shall be designed to be user-friendly and accessible. The system shall be able to handle multiple users and their data simultaneously. The system shall be able to handle errors and exceptions that may occur during data entry and retrieval.\n\nOutput Model:\npackage 'Personal Data Management System' {\n\t// ... (your code here)\n} \n––––– YOUR TURN –––––\n\nInput Requirement:\nThe system shall provide a user interface to allow users to input their personal data, such as name, age, and address, and to display the entered data in a readable format. The system shall also provide a feature to allow users to edit their personal data. The system shall be able to store the entered data in a database and retrieve it when needed. The system shall be able to",
    "package 'Vehicle Mass Compliance System' {\n\tattribute def Vehicle;\n\tattribute def WeighingEquipment;\n\tattribute def TestOperator;\n\tattribute def MaxPermissibleMass;\n\tattribute def ActualMass;\n\tattribute def ComplianceStatus;\n\tport def VehiclePort {\n\t\tin vehicle: Vehicle;\n\t}\n\tport def WeighingEquipmentPort {\n\t\tin weighingEquipment: WeighingEquipment;\n\t}\n\tport def TestOperatorPort {\n\t\tin testOperator: TestOperator;\n\t}\n\tport def MaxPermissibleMassPort {\n\t\tin maxPermissibleMass: MaxPermissibleMass;\n\t}\n\tport def ActualMassPort {\n\t\tout actualMass: ActualMass;\n\t}\n\tport def ComplianceStatusPort {\n\t\tout complianceStatus: ComplianceStatus;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport vehiclePort: VehiclePort;\n\t\t}\n\t\tpart weighingEquipment {\n\t\t\tport weighingEquipmentPort: WeighingEquipmentPort;\n\t\t}\n\t\tpart testOperator {\n\t\t\tport testOperatorPort: TestOperatorPort;\n\t\t}\n\t\tpart vehicleMassComplianceSystem {\n\t\t\tport vehiclePort: ~VehiclePort;\n\t\t\tport weighingEquipmentPort: ~WeighingEquipmentPort;\n\t\t\tport testOperatorPort: ~TestOperatorPort;\n\t\t\tport maxPermissibleMassPort: ~",
    "package 'Water Supply Network' {\n\tattribute def WaterType;\n\tattribute def WaterFlow;\n\tpart context {\n\t\tpart spigotBank {\n\t\t\tport spigotBankIn: ~WaterFlow;\n\t\t\tport spigotBankOut: WaterFlow;\n\t\t\tperform waterSupply.produceWater {\n\t\t\t\tin waterType = waterTypeBank.waterType;\n\t\t\t\tout waterFlow = spigotBankOut.waterFlow;\n\t\t\t}\n\t\t\tpart waterTypeBank {\n\t\t\t\tattribute waterType: WaterType;\n\t\t\t}\n\t\t}\n\t\tpart spigot {\n\t\t\tport spigotIn: ~WaterFlow;\n\t\t\tport spigotOut: WaterFlow;\n\t\t\tperform waterSupply.produceWater {\n\t\t\t\tin waterType = waterTypeBank.waterType;\n\t\t\t\tout waterFlow = spigotOut.waterFlow;\n\t\t\t}\n\t\t\tpart waterTypeBank {\n\t\t\t\tattribute waterType: WaterType;\n\t\t\t}\n\t\t}\n\t\tpart faucet {\n\t\t\tport faucetIn: ~WaterFlow;\n\t\t\tport faucetOut: WaterFlow;\n\t\t\tperform waterSupply.produceWater {\n\t\t\t\tin waterType = waterTypeBank.waterType;\n\t\t\t\tout waterFlow = faucetOut.waterFlow;\n\t\t\t}\n\t\t\tpart waterTypeBank {\n\t\t\t\tattribute water",
    "package 'Vehicle Quality Analysis' {\n\tattribute def Vehicle;\n\tattribute def Component;\n\tattribute def QualityData;\n\tattribute def AnalysisObjective;\n\tattribute def AnalysisTask;\n\tattribute def AnalysisPlan;\n\tattribute def UseCase;\n\tattribute def Requirement;\n\tattribute def Mass;\n\tattribute def Engine;\n\tattribute def Transmission;\n\tattribute def FrontAxleAssembly;\n\tattribute def RearAxleAssembly;\n\tpart context {\n\t\tpart user {\n\t\t\tport userPort: UserPort;\n\t\t\tperform vehicleQualityAnalysis.provideQualityData {\n\t\t\t\tin userPort = userPort;\n\t\t\t}\n\t\t}\n\t\tinterface userToVehicle connect user.userPort to vehicle.userPort {\n\t\t\tref flow references vehicleQualityAnalysis.provideQualityDataFlow\n\t\t\t\tfrom source.userPort to target.userPort; \n\t\t}\n\t\tpart vehicle {\n\t\t\tport userPort: ~UserPort;\n\t\t\tattribute def vehicleMass: Mass;\n\t\t\tperform vehicleQualityAnalysis.calculateVehicleMass {\n\t\t\t\tin userPort = userPort;\n\t\t\t\tout vehicleMass = vehicleMass;\n\t\t\t}\n\t\t\tperform vehicleQualityAnalysis.aggregateQualityData {\n\t\t\t\tin userPort = userPort;\n\t\t\t}\n\t\t}\n\t\tpart vehicleQualityAnalysis {\n\t\t\tport userPort: ~UserPort;\n\t\t",
    "package 'Vehicle Powertrain Configuration' {\n\tattribute def EngineType;\n\tattribute def PerformanceIndicators;\n\tattribute def EngineConfiguration;\n\tattribute def EvaluationModel;\n\tattribute def TradeOffAnalysisMethod;\n\tattribute def EngineSchemes;\n\tattribute def EvaluationResults;\n\tattribute def OptimalEngineSolution;\n\tattribute def RationalityExplanation;\n\tattribute def DecisionTraceability;\n\tpart context {\n\t\tpart user {\n\t\t\tport engineTypePort: EngineTypePort;\n\t\t\tperform engineConfiguration.produceEngineConfiguration {\n\t\t\t\tin engineType = engineTypePort.engineType;\n\t\t\t}\n\t\t}\n\t\tinterface userToEngineConfiguration connect user.engineTypePort to engineConfiguration.engineTypePort {\n\t\t\tref flow references engineConfiguration.produceEngineConfigurationFlow\n\t\t\t\tfrom source.engineType to target.engineType;\n\t\t}\n\t\tpart engineConfiguration {\n\t\t\tport engineTypePort: ~EngineTypePort;\n\t\t\tattribute engineType: EngineType;\n\t\t\tperform engineAssembly.assembleEngineComponents {\n\t\t\t\tin engineType = engineTypePort.engineType;\n\t\t\t}\n\t\t\tperform tradeOffAnalysis.evaluateEngineSchemes {\n\t\t\t\tin engineType = engineTypePort.engineType;\n\t\t\t}\n\t\t\tperform evaluationModel.evaluateEngineSchemes {\n\t\t\t\tin engineType = engineTypePort",
    "package 'FuelEconomy' {\n\tattribute def FuelEconomy;\n\tattribute def VehiclePowertrain;\n\tattribute def Load;\n\tattribute def OperatingConditions;\n\tattribute def FuelConsumption;\n\tattribute def RegulatoryTargets;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport powertrainPort: ~VehiclePowertrain;\n\t\t\tport loadPort: ~Load;\n\t\t\tport operatingConditionsPort: ~OperatingConditions;\n\t\t\tperform fuelEconomyAnalysis {\n\t\t\t\tin powertrain = powertrainPort.powertrain;\n\t\t\t\tin load = loadPort.load;\n\t\t\t\tin operatingConditions = operatingConditionsPort.operatingConditions;\n\t\t\t\tout fuelConsumption = fuelConsumptionPort.fuelConsumption;\n\t\t\t}\n\t\t\tport fuelConsumptionPort: ~FuelConsumption;\n\t\t}\n\t\tpart regulatory {\n\t\t\tport regulatoryTargetsPort: ~RegulatoryTargets;\n\t\t\tperform regulatoryCheck {\n\t\t\t\tin regulatoryTargets = regulatoryTargetsPort.regulatoryTargets;\n\t\t\t\tout regulatoryCompliance = regulatoryCompliancePort.regulatoryCompliance;\n\t\t\t}\n\t\t\tport regulatoryCompliancePort: ~RegulatoryCompliance;\n\t\t}\n\t\tpart analysis {\n\t\t\tperform fuelEconomyAnalysis {\n\t\t\t\tin fuelConsumption = fuelConsumptionPort.fuelConsumption;\n\t\t\t\tout fuelEconomy = fuelEconomy",
    "package 'Vehicle Dynamics Simulator' {\n\tattribute def VehicleMass;\n\tattribute def InitialPosition;\n\tattribute def InitialVelocity;\n\tattribute def PowerOutputData;\n\tattribute def TimeStep;\n\tattribute def Acceleration;\n\tattribute def Velocity;\n\tattribute def Displacement;\n\tpart context {\n\t\tpart user {\n\t\t\tport userToSimulatorPort: UserToSimulatorPort;\n\t\t\tperform vehicleDynamicsSimulator.sendInputData {\n\t\t\t\tin vehicleMass = userToSimulatorPort.vehicleMass;\n\t\t\t\tin initialPosition = userToSimulatorPort.initialPosition;\n\t\t\t\tin initialVelocity = userToSimulatorPort.initialVelocity;\n\t\t\t\tin powerOutputData = userToSimulatorPort.powerOutputData;\n\t\t\t\tin timeStep = userToSimulatorPort.timeStep;\n\t\t\t}\n\t\t}\n\t\tpart vehicleDynamicsSimulator {\n\t\t\tport userToSimulatorPort: ~UserToSimulatorPort;\n\t\t\tperform vehicleDynamicsSimulator.calculateVehicleMotion {\n\t\t\t\tin vehicleMass = userToSimulatorPort.vehicleMass;\n\t\t\t\tin initialPosition = userToSimulatorPort.initialPosition;\n\t\t\t\tin initialVelocity = userToSimulatorPort.initialVelocity;\n\t\t\t\tin powerOutputData = userToSimulatorPort.powerOutputData;\n\t\t\t\tin timeStep = user",
    "package 'Vehicle' {\n\tattribute def Mass;\n\tattribute def SteeringAngle;\n\tattribute def AxleMass;\n\tattribute def WheelMass;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tattribute mass: Mass = 2500;\n\t\t\tpart frontAxleAssembly {\n\t\t\t\tattribute mass: AxleMass = 150;\n\t\t\t\tpart frontWheels {\n\t\t\t\t\tattribute mass: WheelMass = 20;\n\t\t\t\t}\n\t\t\t\tpart frontAxle {\n\t\t\t\t\tattribute mass: AxleMass = 30;\n\t\t\t\t\tattribute steeringAngle: SteeringAngle = 45;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart rearAxleAssembly {\n\t\t\t\tattribute mass: AxleMass = 250;\n\t\t\t\tpart rearWheels {\n\t\t\t\t\tattribute mass: WheelMass = 20;\n\t\t\t\t}\n\t\t\t\tpart rearAxle {\n\t\t\t\t\tattribute mass: AxleMass = 220;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n} \n––––– YOUR TURN –––––\n\nInput Requirement:\nThe system shall be able to perform a series of tasks in a specific order, with each task being a separate function that can be executed independently. The system shall be able to handle multiple tasks concurrently, and the order in which tasks are executed shall be determined by",
    "package 'Vehicle Safety and Security' {\n\tattribute def Mandatory;\n\tattribute def Optional;\n\tattribute def SafetyFeature;\n\tattribute def SecurityFeature;\n\tattribute def Component;\n\tattribute def Subsystem;\n\tattribute def TreeStructure;\n\tattribute def Table;\n\tattribute def Filter;\n\tattribute def Visualization;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tpart safetyFeatures {\n\t\t\t\tpart seatBelt {\n\t\t\t\t\tattribute mandatory = true;\n\t\t\t\t\tattribute safetyFeature = true;\n\t\t\t\t}\n\t\t\t\tpart airbag {\n\t\t\t\t\tattribute mandatory = false;\n\t\t\t\t\tattribute safetyFeature = true;\n\t\t\t\t}\n\t\t\t\tpart bumper {\n\t\t\t\t\tattribute mandatory = true;\n\t\t\t\t\tattribute safetyFeature = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart securityFeatures {\n\t\t\t\tpart alarm {\n\t\t\t\t\tattribute mandatory = false;\n\t\t\t\t\tattribute securityFeature = true;\n\t\t\t\t}\n\t\t\t\tpart keylessEntry {\n\t\t\t\t\tattribute mandatory = false;\n\t\t\t\t\tattribute securityFeature = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart components {\n\t\t\t\tpart antiLockBrakingSystem {\n\t\t\t\t\tattribute mandatory = false;\n\t\t\t\t\tattribute safetyFeature = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart subsystems {\n\t\t\t\tpart engine {\n\t\t\t\t\tpart components {\n\t\t\t\t\t\tpart fuelPump {\n\t\t\t\t\t\t\tattribute mandatory",
    "package 'Layered System' {\n\tpackage 'Application Layer' {\n\t\tattribute def x;\n\t\tattribute def y;\n\t\tattribute def z {\n\t\t\tdef dependsOn = [x, y];\n\t\t}\n\t}\n\tpackage 'Service Layer' {\n\t\tattribute def x;\n\t\tattribute def y;\n\t\tattribute def z {\n\t\t\tdef dependsOn = [x, y];\n\t\t}\n\t}\n\tpackage 'Data Layer' {\n\t\tattribute def x;\n\t\tattribute def y;\n\t\tattribute def z {\n\t\t\tdef dependsOn = [x, y];\n\t\t}\n\t}\n\tpackage 'System' {\n\t\tpart applicationLayer: ApplicationLayer;\n\t\tpart serviceLayer: ServiceLayer;\n\t\tpart dataLayer: DataLayer;\n\t\tinterface applicationToService connect applicationLayer to serviceLayer {\n\t\t\tref flow references serviceLayer.xFlow\n\t\t\t\tfrom source.x to target.x;\n\t\t\tref flow references serviceLayer.yFlow\n\t\t\t\tfrom source.y to target.y;\n\t\t\tref flow references serviceLayer.zFlow\n\t\t\t\tfrom source.z to target.z;\n\t\t}\n\t\tinterface serviceToData connect serviceLayer to dataLayer {\n\t\t\tref flow references dataLayer.xFlow\n\t\t\t\tfrom source.x to target.x;\n\t\t\tref",
    "package 'Torque Generation System' {\n\tattribute def Torque;\n\tattribute def PowerOutput;\n\tpart context {\n\t\tpart powertrain {\n\t\t\tpart engine {\n\t\t\t\tperform torqueGeneration.produceTorque {\n\t\t\t\t\tout torque = torqueGeneration.torque;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart transmission {\n\t\t\t\tperform torqueGeneration.transmitTorque {\n\t\t\t\t\tin torque = torqueGeneration.torque;\n\t\t\t\t\tout powerOutput = powerOutputGeneration.powerOutput;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpart logicLayer {\n\t\t\tpart torqueGenerator {\n\t\t\t\tperform torqueGeneration.produceTorque {\n\t\t\t\t\tout torque = torqueGeneration.torque;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart powerOutputGenerator {\n\t\t\t\tperform powerOutputGeneration.generatePowerOutput {\n\t\t\t\t\tout powerOutput = powerOutputGeneration.powerOutput;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpart torqueGeneration {\n\t\t\tperform produceTorque { out torque: Torque; }\n\t\t\tperform transmitTorque { in torque: Torque; out powerOutput: PowerOutput; }\n\t\t}\n\t\tpart powerOutputGeneration {\n\t\t\tperform generatePowerOutput { out powerOutput: PowerOutput; }\n\t\t}\n\t}\n\tconstraint def TorqueGreaterThanZero {\n\t\tinv: Torque > ",
    "package 'Powertrain' {\n\tattribute def Power;\n\tattribute def Torque;\n\tport def PowerPort {\n\t\tout power: Power;\n\t}\n\tport def TorquePort {\n\t\tout torque: Torque;\n\t}\n\tpart context {\n\t\tpart powertrain {\n\t\t\tport powerPort: PowerPort;\n\t\t\tport torquePort: TorquePort;\n\t\t\tpart engine {\n\t\t\t\tport powerPort: ~PowerPort;\n\t\t\t\tport torquePort: ~TorquePort;\n\t\t\t\tperform powertrain.producePower {\n\t\t\t\t\tin power = powerPort.power;\n\t\t\t\t\tout power = powerPort.power;\n\t\t\t\t}\n\t\t\t\tperform powertrain.produceTorque {\n\t\t\t\t\tin torque = torquePort.torque;\n\t\t\t\t\tout torque = torquePort.torque;\n\t\t\t\t}\n\t\t\t}\n\t\t\tperform powertrain.producePower {\n\t\t\t\tin power = powerPort.power;\n\t\t\t\tout power = powerPort.power;\n\t\t\t}\n\t\t\tperform powertrain.produceTorque {\n\t\t\t\tin torque = torquePort.torque;\n\t\t\t\tout torque = torquePort.torque;\n\t\t\t}\n\t\t}\n\t\tpart torqueGenerator {\n\t\t\tport powerPort: ~PowerPort;\n\t\t\tport torquePort: ~TorquePort;\n\t\t\tperform powertrain.produceTorque {\n\t\t\t\tin torque = torque",
    "package 'Vehicle Safety and Anti-theft Function Catalogue' {\n\tattribute def SafetyFeature;\n\tattribute def AntiTheftFeature;\n\tattribute def MandatorySafetyFeature;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tpart body {\n\t\t\t\tpart interior {\n\t\t\t\t\tpart frontSeatBelt {\n\t\t\t\t\t\tattribute def safetyFeature: SafetyFeature;\n\t\t\t\t\t\tattribute def mandatorySafetyFeature: MandatorySafetyFeature;\n\t\t\t\t\t}\n\t\t\t\t\tpart bumper {\n\t\t\t\t\t\tattribute def safetyFeature: SafetyFeature;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpart driverAirbag {\n\t\t\t\t\tattribute def safetyFeature: SafetyFeature;\n\t\t\t\t\tattribute def antiTheftFeature: AntiTheftFeature;\n\t\t\t\t}\n\t\t\t\tpart antiLockBrakingSystem {\n\t\t\t\t\tattribute def safetyFeature: SafetyFeature;\n\t\t\t\t\tattribute def antiTheftFeature: AntiTheftFeature;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart alarmSystem {\n\t\t\t\tattribute def antiTheftFeature: AntiTheftFeature;\n\t\t\t}\n\t\t\tpart keylessEntrySystem {\n\t\t\t\tattribute def antiTheftFeature: AntiTheftFeature;\n\t\t\t}\n\t\t}\n\t}\n} \n––––– YOUR TURN –––––\n\nInput Requirement:\nThe system shall be able to perform the following tasks: \n1.  The system shall be",
    "package 'Fuel System' {\n\tattribute def FuelTemperature;\n\tattribute def FuelFlowRate;\n\tattribute def Pressure;\n\tattribute def ReturnFlowRate;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tpart fuelSystem {\n\t\t\t\tpart fuelTankAssembly {\n\t\t\t\t\tpart fuelTank {\n\t\t\t\t\t\tport fuelInPort: ~FuelInPort;\n\t\t\t\t\t\tport fuelOutPort: ~FuelOutPort;\n\t\t\t\t\t}\n\t\t\t\t\tpart fuelPump {\n\t\t\t\t\t\tport fuelInPort: ~FuelInPort;\n\t\t\t\t\t\tport fuelOutPort: ~FuelOutPort;\n\t\t\t\t\t\tperform fuelFlow.provideFuel {\n\t\t\t\t\t\t\tin fuelInPort = fuelInPort;\n\t\t\t\t\t\t\tout fuelOutPort = fuelOutPort;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpart fuelFlow {\n\t\t\t\t\tperform fuelFlow.provideFuel {\n\t\t\t\t\t\tin fuelInPort = fuelTankAssembly.fuelTank.fuelInPort;\n\t\t\t\t\t\tout fuelOutPort = fuelPump.fuelOutPort;\n\t\t\t\t\t}\n\t\t\t\t\tperform fuelFlow.returnFuel {\n\t\t\t\t\t\tin fuelInPort = fuelPump.fuelOutPort;\n\t\t\t\t\t\tout fuelOutPort = fuelTankAssembly.fuelTank.fuelOutPort;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpart fuelTemperatureMonitor {\n\t\t\t\t\tperform fuelTemperatureMonitor.monitorFuelTemperature {\n\t\t\t\t\t\tin",
    "package 'Vehicle' {\n\tattribute def SeatBelt;\n\tattribute def Airbag;\n\tattribute def AntiTheftAlarm;\n\tattribute def Bumper;\n\tattribute def KeylessEntry;\n\tattribute def Wheel;\n\tattribute def AntiLockBrakingSystem;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tpart interior {\n\t\t\t\tpart cockpit {\n\t\t\t\t\tpart seat {\n\t\t\t\t\t\tpart seatbelt1: SeatBelt;\n\t\t\t\t\t\tpart seatbelt2: SeatBelt;\n\t\t\t\t\t}\n\t\t\t\t\tpart airbag: Airbag;\n\t\t\t\t}\n\t\t\t\tpart antiTheftAlarm: AntiTheftAlarm;\n\t\t\t}\n\t\t\tpart body {\n\t\t\t\tpart bumper: Bumper;\n\t\t\t\tpart keylessEntry: KeylessEntry;\n\t\t\t}\n\t\t\tpart chassis {\n\t\t\t\tpart wheel1: Wheel;\n\t\t\t\tpart wheel2: Wheel;\n\t\t\t\tpart antiLockBrakingSystem1: AntiLockBrakingSystem;\n\t\t\t\tpart antiLockBrakingSystem2: AntiLockBrakingSystem;\n\t\t\t}\n\t\t}\n\t}\n\tpackage 'SafetyAndSecurity' {\n\t\tattribute def Mandatory;\n\t\tattribute def Optional;\n\t\tattribute def Required;\n\t\tattribute def Enhanced;\n\t\tpart context {\n\t\t\tpart safety {\n\t\t\t\tpart seatBeltSafety {\n\t\t\t\t\tpart seatbelt1: SeatB",
    "package 'Vehicle Safety and Security' {\n\tattribute def Safety;\n\tattribute def Security;\n\tpart context {\n\t\tpart interior {\n\t\t\tpart alarmSystem {\n\t\t\t\tperform safetyAndSecurity.provideSecurity {\n\t\t\t\t\tin security = securityPort.security;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart seatBelt {\n\t\t\t\tperform safetyAndSecurity.provideSafety {\n\t\t\t\t\tin safety = safetyPort.safety;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart driverAirbag {\n\t\t\t\tperform safetyAndSecurity.provideSafety {\n\t\t\t\t\tin safety = safetyPort.safety;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart frontRowSeats {\n\t\t\t\tperform safetyAndSecurity.provideSafety {\n\t\t\t\t\tin safety = safetyPort.safety;\n\t\t\t\t}\n\t\t\t}\n\t\t\tport safetyPort: ~SafetyPort;\n\t\t\tport securityPort: ~SecurityPort;\n\t\t}\n\t\tpart bodyAssembly {\n\t\t\tpart vehicleBody {\n\t\t\t\tperform safetyAndSecurity.provideSafety {\n\t\t\t\t\tin safety = safetyPort.safety;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart bumper {\n\t\t\t\tperform safetyAndSecurity.provideSafety {\n\t\t\t\t\tin safety = safetyPort.safety;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart keylessEntrySystem {\n\t\t\t\tperform safetyAndSecurity.provideSecurity {\n\t\t\t\t\tin security = securityPort.security",
    "package 'SecurityClassification' {\n\tattribute def SecurityClassification;\n\tattribute def ClassificationLevel;\n\tenum def ClassificationLevel {\n\t\t'Unclassified',\n\t\t'Confidential',\n\t\t'Secret'\n\t}\n\tpart context {\n\t\tpart component {\n\t\t\tattribute securityClassification: SecurityClassification;\n\t\t\tattribute classificationLevel: ClassificationLevel;\n\t\t}\n\t\tpart classifier {\n\t\t\tperform classifyComponent {\n\t\t\t\tin component = component;\n\t\t\t\tout classification = classificationLevel;\n\t\t\t}\n\t\t}\n\t}\n\taction classifyComponent {\n\t\tin component: component;\n\t\tout classification: ClassificationLevel;\n\t}\n} \n––––– YOUR TURN –––––\n\nInput Requirement:\nThe system shall be able to display a list of all components that are currently in use, along with their corresponding usage status, such as \"In Use,\" \"Available,\" or \"Offline.\" The system should be able to update the usage status of each component in real-time, reflecting any changes in their operational status.\n\nOutput Model:\npackage 'ComponentUsage' {\n\tattribute def UsageStatus;\n\tenum def UsageStatus {\n\t\t'In Use',\n\t\t'Available',\n\t\t'Offline'\n\t}\n\tpart context {\n\t\tpart component {\n\t\t\tattribute usageStatus: UsageStatus;\n\t\t}\n\t",
    "package 'Automotive ECU' {\n\tattribute def VehicleState;\n\tattribute def EngineState;\n\tattribute def SensorData;\n\tattribute def ControlCommand;\n\tattribute def BusIF;\n\tattribute def CANBus;\n\tpart context {\n\t\tpart VehicleControlUnit {\n\t\t\tport busIF: BusIF;\n\t\t\tperform vehicleControl.sendControlCommand {\n\t\t\t\tin controlCommand = busIF.controlCommand;\n\t\t\t}\n\t\t\tport sensorDataPort: ~SensorDataPort;\n\t\t}\n\t\tpart EngineControlUnit {\n\t\t\tport busIF: BusIF;\n\t\t\tperform engineControl.sendControlCommand {\n\t\t\t\tin controlCommand = busIF.controlCommand;\n\t\t\t}\n\t\t\tport sensorDataPort: ~SensorDataPort;\n\t\t}\n\t\tpart CANBus {\n\t\t\tport busIF1: BusIF;\n\t\t\tport busIF2: BusIF;\n\t\t\tperform vehicleControl.sendVehicleState {\n\t\t\t\tin vehicleState = busIF1.vehicleState;\n\t\t\t}\n\t\t\tperform engineControl.sendEngineState {\n\t\t\t\tin engineState = busIF2.engineState;\n\t\t\t}\n\t\t}\n\t\tpart SensorDataPort {\n\t\t\tport sensorData: SensorData;\n\t\t}\n\t}\n\taction vehicleControl {\n\t\taction sendControlCommand { in controlCommand: ControlCommand; }\n",
    "package 'Blood Glucose Meter' {\n\tattribute def BatteryStatus;\n\tattribute def Alarm;\n\tattribute def EmergencyResponse;\n\tpart context {\n\t\tpart user {\n\t\t\tport batteryStatusPort: ~BatteryStatusPort;\n\t\t\tperform batteryStatusMonitor.sendBatteryStatus {\n\t\t\t\tin batteryStatus = batteryStatusPort.batteryStatus;\n\t\t\t}\n\t\t}\n\t\tinterface userToBloodGlucoseMeter connect user.batteryStatusPort to bloodGlucoseMeter.batteryStatusPort {\n\t\t\tref flow references batteryStatusFlow\n\t\t\t\tfrom source.batteryStatus to target.batteryStatus;\n\t\t}\n\t\tpart bloodGlucoseMeter {\n\t\t\tport batteryStatusPort: BatteryStatusPort;\n\t\t\tperform batteryStatusMonitor.produceBatteryStatus {\n\t\t\t\tin batteryStatus = batteryStatusPort.batteryStatus;\n\t\t\t\tout alarm = alarmPort.alarm;\n\t\t\t\tout emergencyResponse = emergencyResponsePort.emergencyResponse;\n\t\t\t}\n\t\t\tport alarmPort: AlarmPort;\n\t\t\tport emergencyResponsePort: EmergencyResponsePort;\n\t\t}\n\t\tpart batteryStatusMonitor {\n\t\t\tport batteryStatusPort: ~BatteryStatusPort;\n\t\t\tperform batteryStatusMonitor.produceBatteryStatus {\n\t\t\t\tin batteryStatus = batteryStatusPort.batteryStatus;\n\t\t\t\tout alarm = alarmPort.alarm;\n\t\t\t\tout emergency",
    "package 'Constants' {\n\tattribute def MathConstants;\n\tattribute def PhysicalConstants;\n\tattribute def ScenarioConstants;\n\tattribute def MathConstants {\n\t\tconstant def e: Real;\n\t\tconstant def pi: Real;\n\t}\n\tattribute def PhysicalConstants {\n\t\tconstant def speedOfLight: Real;\n\t\tconstant def fineStructureConstant: Real;\n\t\tconstant def electronToProtonMassRatio: Real;\n\t}\n\tattribute def ScenarioConstants {\n\t\tconstant def standardGravitationalAcceleration: Real;\n\t\tconstant def amplifierGainCoefficient: Real;\n\t}\n} \n––––– YOUR TURN –––––\n\nInput Requirement:\nThe system shall be able to perform a series of complex calculations involving multiple variables and mathematical operations, including matrix operations, polynomial evaluations, and numerical integrations. The system should be able to handle a wide range of mathematical functions, including trigonometric, exponential, and logarithmic functions, as well as statistical functions like mean, median, and standard deviation. Furthermore, the system should be able to perform symbolic manipulations, such as simplifying expressions and solving equations, and support advanced mathematical operations like tensor calculus and differential equations.\n\nOutput Model:\npackage 'Math' {\n\tattribute def MathFunctions;\n\tattribute def MatrixOperations",
    "package 'Automotive Components' {\n\tattribute def Manufacturer;\n\tattribute def RimDiameter;\n\tattribute def Width;\n\tclass Tire {\n\t\tattribute Manufacturer: Manufacturer;\n\t\tattribute RimDiameter: Real;\n\t\tattribute Width: Integer;\n\t}\n\tclass FrenchTire extends Tire {\n\t\tattribute Manufacturer: String = 'Michelin';\n\t\tattribute RimDiameter: Real = 18.0;\n\t\tattribute Width: Integer = 245;\n\t}\n\tclass GermanTire extends Tire {\n\t\tattribute Manufacturer: String = 'Continental';\n\t\tattribute RimDiameter: Real = 19.0;\n\t\tattribute Width: Integer = 255;\n\t}\n}\n––––– YOUR TURN –––––\n\nInput Requirement:\nThe system needs to provide a model for a smart home system that can control and monitor various devices, such as lights, thermostats, and security cameras. The system should be able to track the status of each device, including whether it is on or off, and allow users to control the devices remotely. The system should also be able to send notifications to users when a device is turned on or off, or when a security camera detects motion.\n\nOutput Model:\npackage 'Smart Home' {\n\tattribute def Device",
    "package 'Automotive Component Model' {\n\tattribute def Vehicle;\n\tattribute def Wheel;\n\tattribute def Tire;\n\tattribute def Mass;\n\tattribute def Length;\n\tattribute def HubDiameter;\n\tattribute def Width;\n\tattribute def OuterDiameter;\n\tattribute def TireHeight;\n\tattribute def Unit;\n\tenum def Unit {\n\t\t'kg' = 'kilogram',\n\t\t'lb' = 'pound',\n\t\t'm' = 'meter',\n\t\t'ft' = 'foot',\n\t\t'inch' = 'inch',\n\t\t'mm' = 'millimeter'\n\t}\n\tclass Vehicle {\n\t\tattribute def mass: Mass;\n\t\tattribute def length: Length;\n\t\tattribute def leftFrontWheel: Wheel;\n\t\tattribute def rightFrontWheel: Wheel;\n\t}\n\tclass Wheel {\n\t\tattribute def hubDiameter: HubDiameter;\n\t\tattribute def width: Width;\n\t\tattribute def outerDiameter: OuterDiameter;\n\t\tattribute def tire: Tire;\n\t}\n\tclass Tire {\n\t\tattribute def height: TireHeight;\n\t}\n\tpackage 'Dimensions' {\n\t\tclass Mass {\n\t\t\tattribute def value: Number;\n\t\t\tattribute def unit: Unit;\n\t\t}\n\t\tclass",
    "package 'Powertrain' {\n\tattribute def Engine;\n\tattribute def Transmission;\n\tenum def EngineType {\n\t\tFOUR_CYLINDER,\n\t\tSIX_CYLINDER\n\t}\n\tenum def TransmissionType {\n\t\tMANUAL,\n\t\tAUTOMATIC\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tattribute engineType: EngineType;\n\t\t\tattribute transmissionType: TransmissionType;\n\t\t\tperform configurePowertrain {\n\t\t\t\tin engineType = engineType;\n\t\t\t\tin transmissionType = transmissionType;\n\t\t\t}\n\t\t}\n\t\tpart powertrain {\n\t\t\tattribute engine: Engine;\n\t\t\tattribute transmission: TransmissionType;\n\t\t\tperform configurePowertrain {\n\t\t\t\tin engine = engine;\n\t\t\t\tin transmission = transmission;\n\t\t\t}\n\t\t}\n\t}\n\taction configurePowertrain {\n\t\tif engineType = SIX_CYLINDER then\n\t\t\tengine = SIX_CYLINDER;\n\t\telse\n\t\t\tengine = FOUR_CYLINDER;\n\t\tif transmissionType = AUTOMATIC then\n\t\t\ttransmission = AUTOMATIC;\n\t\telse\n\t\t\ttransmission = MANUAL;\n\t\tif (engine = SIX_CYLINDER and transmission = AUTOMATIC) or (engine = FOUR_CYLINDER and transmission = MANUAL) then\n\t\t\t// valid powertrain combination\n\t\telse",
    "package 'Automotive Components' {\n\tattribute def Mass;\n\tattribute def Length;\n\tattribute def WheelAssembly;\n\tattribute def BrakeDisc;\n\tattribute def Rim;\n\tattribute def Tire;\n\tattribute def TreadDepth;\n\tattribute def BrakeDiscDiameter;\n\tattribute def OuterDiameter;\n\tattribute def Radius;\n\tattribute def Diameter;\n\tattribute def Width;\n\tattribute def Height;\n\tattribute def SafetyClearance;\n\tattribute def FitmentRequirement;\n\t\n\tpart context {\n\t\tpart vehicle {\n\t\t\tattribute Mass = 1200;\n\t\t\tattribute Length = 4.82;\n\t\t\tpart wheelAssembly {\n\t\t\t\tattribute WheelAssembly;\n\t\t\t\tpart wheel {\n\t\t\t\t\tattribute Rim;\n\t\t\t\t\tattribute Tire;\n\t\t\t\t\tattribute Diameter = 18;\n\t\t\t\t\tattribute Width = 245;\n\t\t\t\t\tattribute Height = 45;\n\t\t\t\t\tattribute OuterDiameter = Diameter * 1.25;\n\t\t\t\t\tattribute TreadDepth = 6.0;\n\t\t\t\t\tattribute TreadDepth >= 3.5;\n\t\t\t\t}\n\t\t\t\tpart brakeDisc {\n\t\t\t\t\tattribute BrakeDisc;\n\t\t\t\t\tattribute Radius = 95;\n\t\t\t\t\tattribute BrakeDiscDiameter = 2 * Radius;\n\t\t\t\t\tattribute BrakeDiscDiameter < OuterDiameter;\n",
    "package 'Automotive Fuel System' {\n\tattribute def FuelTemperature;\n\tattribute def FuelFlow;\n\tpart context {\n\t\tpart fuelTankAssembly {\n\t\t\tport outletPort: OutletPort;\n\t\t\tport returnPort: ReturnPort;\n\t\t\tperform fuelPump.provideFuel {\n\t\t\t\tin outletPort = outletPort;\n\t\t\t\tin returnPort = returnPort;\n\t\t\t}\n\t\t}\n\t\tpart fuelPump {\n\t\t\tport outletPort: ~OutletPort;\n\t\t\tport returnPort: ~ReturnPort;\n\t\t\tperform fuelTankAssembly.receiveFuel {\n\t\t\t\tin outletPort = outletPort;\n\t\t\t\tin returnPort = returnPort;\n\t\t\t}\n\t\t\tperform fuelTankAssembly.provideFuel {\n\t\t\t\tin outletPort = outletPort;\n\t\t\t\tin returnPort = returnPort;\n\t\t\t}\n\t\t}\n\t\tpart fuelTank {\n\t\t\tport outletPort: OutletPort;\n\t\t\tport returnPort: ReturnPort;\n\t\t\tperform fuelPump.provideFuel {\n\t\t\t\tin outletPort = outletPort;\n\t\t\t\tin returnPort = returnPort;\n\t\t\t}\n\t\t}\n\t}\n\taction fuelPump {\n\t\tsequence flow provideFuel from fuelTankAssembly.provideFuel to fuelTankAssembly.receiveFuel;\n\t\tsequence flow receiveFuel from fuelTankAssembly.receiveFuel to fuelTank",
    "package 'PhysicalQuantitySystem' {\n\tattribute def PhysicalQuantity;\n\tattribute def Unit;\n\tattribute def BaseQuantity;\n\tattribute def DerivedQuantity;\n\tattribute def QuantityKind;\n\tattribute def UnitKind;\n\tattribute def QuantitySystem;\n\tattribute def UnitSystem;\n\tattribute def BaseUnit;\n\tattribute def DerivedUnit;\n\tattribute def QuantitySystemKind;\n\tattribute def UnitSystemKind;\n\tattribute def PhysicalQuantityKind;\n\tattribute def UnitKindKind;\n\tattribute def BaseQuantityKind;\n\tattribute def DerivedQuantityKind;\n\tattribute def QuantityKindKind;\n\tattribute def UnitKindKindKind;\n\tattribute def QuantitySystemKindKind;\n\tattribute def UnitSystemKindKind;\n\tattribute def PhysicalQuantityKindKind;\n\tattribute def BaseQuantityKindKind;\n\tattribute def DerivedQuantityKindKind;\n\tattribute def QuantityKindKindKind;\n\tattribute def UnitKindKindKindKind;\n\tattribute def QuantitySystemKindKindKind;\n\tattribute def UnitSystemKindKindKind;\n\tattribute def PhysicalQuantityKindKindKind;\n\tattribute def BaseQuantityKindKindKind;\n\tattribute def DerivedQuantityKindKindKind;\n\tattribute def QuantityKindKindKindKind;\n\tattribute def UnitKindKindKindKindKind;\n\tattribute def QuantitySystemKindKindKindKind;\n\tattribute",
    "package 'UnitSystem' {\n\tattribute def Unit;\n\tattribute def Quantity;\n\tattribute def Conversion;\n\tpart context {\n\t\tpart unitSystem {\n\t\t\tperform unitConversion {\n\t\t\t\tin unit = unitSystem.unit;\n\t\t\t\tin quantity = unitSystem.quantity;\n\t\t\t\tout conversion = unitSystem.conversion;\n\t\t\t}\n\t\t}\n\t\tpart isq {\n\t\t\tattribute def isqUnit: Unit;\n\t\t\tattribute def isqQuantity: Quantity;\n\t\t\tperform unitConversion {\n\t\t\t\tin unit = isq.isqUnit;\n\t\t\t\tin quantity = isq.isqQuantity;\n\t\t\t\tout conversion = unitSystem.conversion;\n\t\t\t}\n\t\t}\n\t\tpart uscu {\n\t\t\tattribute def uscuUnit: Unit;\n\t\t\tattribute def uscuQuantity: Quantity;\n\t\t\tperform unitConversion {\n\t\t\t\tin unit = uscu.uscuUnit;\n\t\t\t\tin quantity = uscu.uscuQuantity;\n\t\t\t\tout conversion = unitSystem.conversion;\n\t\t\t}\n\t\t}\n\t}\n\taction unitConversion {\n\t\tsequence flow conversionFlow from unitConversion.inUnit to unitConversion.outConversion;\n\t}\n}\n––––– YOUR TURN –––––\n\nInput Requirement:\nThe system shall provide a user-friendly interface for managing and monitoring the status of various sensors and actuators",
    "package 'HeadlampTiltAdjustment' {\n\tattribute def TiltAngle;\n\tattribute def ValidRange;\n\tattribute def Unit;\n\tattribute def Precision;\n\tattribute def Constants;\n\tpart context {\n\t\tpart headlamp {\n\t\t\tattribute def tiltAngle: TiltAngle;\n\t\t\tperform headlampTiltAdjustment.verifyTiltAngle {\n\t\t\t\tin tiltAngle = tiltAngle;\n\t\t\t}\n\t\t}\n\t\tpart headlampTiltAdjustment {\n\t\t\tattribute def validRange: ValidRange;\n\t\t\tattribute def unit: Unit;\n\t\t\tattribute def precision: Precision;\n\t\t\tattribute def constants: Constants;\n\t\t\tperform headlampTiltAdjustment.verifyTiltAngle {\n\t\t\t\tin tiltAngle = headlamp.tiltAngle;\n\t\t\t\tout valid = validRange;\n\t\t\t}\n\t\t}\n\t}\n\taction headlampTiltAdjustment {\n\t\taction verifyTiltAngle { in tiltAngle: TiltAngle; out valid: ValidRange; }\n\t}\n}\n––––– YOUR TURN –––––\n\nInput Requirement:\nThe system shall be able to detect and respond to the presence of a person in the room, using a combination of infrared sensors and a camera. The system shall be able to detect a person in the room when the",
    "package 'DataTypes' {\n\tenumeration def StatusColor {\n\t\tred;\n\t\tyellow;\n\t\tgreen;\n\t}\n\tenumeration def SeverityLevel {\n\t\tcritical;\n\t\twarning;\n\t\tnormal;\n\t}\n\tenumeration def DiameterOption {\n\t\tSmall(60);\n\t\tMedium(70);\n\t\tLarge(80);\n\t}\n\tpackage 'CoreDataTypes' {\n\t\ttype def Uint {\n\t\t\tconstraint nonNegative;\n\t\t}\n\t\ttype def Ufloat {\n\t\t\tconstraint nonNegative;\n\t\t}\n\t\ttype def DateTime;\n\t\ttype def String;\n\t\ttype def Boolean;\n\t}\n\tpackage 'PhysicalDimensions' {\n\t\ttype def Diameter {\n\t\t\tparameter def diameterOption: DiameterOption;\n\t\t\tdefault diameterOption = Small;\n\t\t}\n\t}\n\tpackage 'Status' {\n\t\ttype def Status {\n\t\t\tparameter def color: StatusColor;\n\t\t\tparameter def severityLevel: SeverityLevel;\n\t\t}\n\t}\n}\n––––– YOUR TURN –––––\n\nInput Requirement:\nThe system shall be able to handle multiple users, each with their own unique identifier, and support user authentication and authorization. The system shall also be able to manage user roles, with each role having a set of permissions that define",
    "package 'Collection Management' {\n\tattribute def Bag;\n\tattribute def List;\n\tattribute def Set;\n\tattribute def OrderedSet;\n\tattribute def Person;\n\tattribute def Real;\n\tpart context {\n\t\tpart collectionManager {\n\t\t\tperform collectionManagement {\n\t\t\t\tin bag = bag;\n\t\t\t\tin list = list;\n\t\t\t\tin set = set;\n\t\t\t\tin orderedSet = orderedSet;\n\t\t\t\tin person = person;\n\t\t\t\tin real = real;\n\t\t\t}\n\t\t\tpart bag {\n\t\t\t\tattribute def sparePart;\n\t\t\t\tperform bagManagement {\n\t\t\t\t\tin sparePart = sparePart;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart list {\n\t\t\t\tattribute def integer;\n\t\t\t\tperform listManagement {\n\t\t\t\t\tin integer = integer;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart set {\n\t\t\t\tattribute def string;\n\t\t\t\tperform setManagement {\n\t\t\t\t\tin string = string;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart orderedSet {\n\t\t\t\tattribute def person;\n\t\t\t\tperform orderedSetManagement {\n\t\t\t\t\tin person = person;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart person {\n\t\t\t\tattribute def name;\n\t\t\t\tattribute def age;\n\t\t\t\tperform personManagement {\n\t\t\t\t\tin name = name;\n\t\t\t\t\tin age = age;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart real {\n\t\t\t\tattribute",
    "package 'Tire' {\n\tattribute def Manufacturer;\n\tattribute def RimDiameter;\n\tattribute def TireWidth;\n\tattribute def InstallationPosition;\n\tattribute def Unit;\n\tpackage 'TireSpec' {\n\t\tclass TireSpec {\n\t\t\tattribute def Manufacturer: Manufacturer;\n\t\t\tattribute def RimDiameter: RimDiameter;\n\t\t\tattribute def TireWidth: TireWidth;\n\t\t\tattribute def InstallationPosition: InstallationPosition;\n\t\t}\n\t}\n\tclass Tire {\n\t\tattribute def spec: TireSpec;\n\t\tattribute def unit: Unit;\n\t}\n\tclass TireSpecFactory {\n\t\toperation def createTireSpec {\n\t\t\tin manufacturer: Manufacturer;\n\t\t\tin rimDiameter: RimDiameter;\n\t\t\tin tireWidth: TireWidth;\n\t\t\tin installationPosition: InstallationPosition;\n\t\t\tout spec: TireSpec;\n\t\t}\n\t}\n}\n––––– YOUR TURN –––––\n\nInput Requirement:\nThe system needs to support a structured description of a vehicle's engine. The engine should be able to be described in terms of its type (e.g., gasoline, diesel, hybrid), its displacement (in liters), and its number of cylinders. The system should be able to distinguish between different types of engines and be able to record all the aforementioned attributes",
    "package 'Spacecraft Trajectory Recorder' {\n\tattribute def Time;\n\tattribute def Position;\n\tattribute def Velocity;\n\tattribute def SamplingPoint;\n\tpart context {\n\t\tpart spacecraft {\n\t\t\tperform trajectoryRecorder.recordSamplingPoint {\n\t\t\t\tin time = timeAttribute.time;\n\t\t\t\tin position = positionAttribute.position;\n\t\t\t\tin velocity = velocityAttribute.velocity;\n\t\t\t}\n\t\t}\n\t\tpart trajectoryRecorder {\n\t\t\tperform trajectoryRecorder.recordSamplingPoint {\n\t\t\t\tin time = timeAttribute.time;\n\t\t\t\tin position = positionAttribute.position;\n\t\t\t\tin velocity = velocityAttribute.velocity;\n\t\t\t}\n\t\t}\n\t\tpart samplingPoint {\n\t\t\tattribute def time: Time;\n\t\t\tattribute def position: Position;\n\t\t\tattribute def velocity: Velocity;\n\t\t}\n\t}\n\taction trajectoryRecorder {\n\t\taction recordSamplingPoint { in time: Time; in position: Position; in velocity: Velocity; }\n\t}\n}\n––––– YOUR TURN –––––\n\nInput Requirement:\nThe system shall be able to display the current temperature of the engine in real-time, and the system shall be able to display the current temperature of the engine in a graphical format, such as a bar chart or a line graph. The system shall also be able to display the historical temperature data of the engine",
    "package 'Materials Science' {\n\tattribute def AtomicMass;\n\tattribute def MassFraction;\n\tattribute def TensileStrength;\n\tattribute def ScientificUnit;\n\tattribute def Value;\n\tpart context {\n\t\tpart material {\n\t\t\tattribute atomicMass: AtomicMass;\n\t\t\tattribute massFraction: MassFraction;\n\t\t\tattribute tensileStrength: TensileStrength;\n\t\t\tattribute scientificUnit: ScientificUnit;\n\t\t\tattribute value: Value;\n\t\t}\n\t\tpart alloy {\n\t\t\tattribute atomicMass: AtomicMass;\n\t\t\tattribute massFraction: MassFraction;\n\t\t\tattribute tensileStrength: TensileStrength;\n\t\t\tattribute scientificUnit: ScientificUnit;\n\t\t\tattribute value: Value;\n\t\t\tassociation def componentMaterials {\n\t\t\t\trole def material: material;\n\t\t\t\trole def massFraction: MassFraction;\n\t\t\t}\n\t\t}\n\t\tpart instance {\n\t\t\tattribute name: String;\n\t\t\tattribute material: material;\n\t\t\tattribute alloy: alloy;\n\t\t\tassociation def properties {\n\t\t\t\trole def property: material;\n\t\t\t\trole def value: Value;\n\t\t\t}\n\t\t}\n\t}\n\taction calculateTensileStrength {\n\t\tparameter def material: material;\n\t\tparameter def massFraction: MassFraction;\n\t\t",
    "package 'EngineeringMaterialsDatabase' {\n\tattribute def AtomicMass;\n\tattribute def CompositionalInfo;\n\tattribute def MechanicalPropertyIndicators;\n\tattribute def MassFraction;\n\tattribute def TensileStrength;\n\tattribute def EngineeringUnit;\n\tpart context {\n\t\tpart material {\n\t\t\tattribute atomicMass: AtomicMass;\n\t\t\tattribute compositionalInfo: CompositionalInfo;\n\t\t\tattribute mechanicalPropertyIndicators: MechanicalPropertyIndicators;\n\t\t\tattribute massFraction: MassFraction;\n\t\t\tattribute tensileStrength: TensileStrength;\n\t\t\tattribute engineeringUnit: EngineeringUnit;\n\t\t}\n\t\tpart materialType {\n\t\t\tattribute materialType: String;\n\t\t}\n\t\tpart constituentMaterial {\n\t\t\tattribute constituentMaterial: String;\n\t\t\tattribute massFraction: MassFraction;\n\t\t}\n\t\tpart materialInstance {\n\t\t\tattribute materialInstance: String;\n\t\t\tattribute material: material;\n\t\t\tattribute constituentMaterials: constituentMaterial[];\n\t\t}\n\t}\n\taction materialManagement {\n\t\tsequence flow materialEntry from materialManagement.materialEntry to materialManagement.materialDescription;\n\t\taction materialEntry {\n\t\t\tin materialType: materialType.materialType;\n\t\t\tin constituentMaterials: constituentMaterial[];\n\t\t\tout material: material;\n\t\t}\n\t\taction materialDescription {\n",
    "package 'PubSub' {\n\tattribute def Topic;\n\tattribute def Message;\n\tattribute def Subscription;\n\tattribute def Publisher;\n\tattribute def Subscriber;\n\tattribute def Server;\n\tattribute def SubscriptionStatus;\n\tattribute def MessageStatus;\n\tattribute def SubscriptionFlow;\n\tattribute def MessageFlow;\n\tattribute def PublisherFlow;\n\tattribute def SubscriberFlow;\n\tpart context {\n\t\tpart server {\n\t\t\tport subscriptionPort: SubscriptionPort;\n\t\t\tport messagePort: MessagePort;\n\t\t\tperform messageDistribution {\n\t\t\t\tin subscription = subscriptionPort.subscription;\n\t\t\t\tin message = messagePort.message;\n\t\t\t\tout messageFlow = messageFlow;\n\t\t\t}\n\t\t\tport subscriptionPort: SubscriptionPort {\n\t\t\t\tin subscription: Subscription;\n\t\t\t}\n\t\t\tport messagePort: MessagePort {\n\t\t\t\tin message: Message;\n\t\t\t}\n\t\t\tport messageFlowPort: MessageFlowPort {\n\t\t\t\tout messageFlow: MessageFlow;\n\t\t\t}\n\t\t}\n\t\tpart publisher {\n\t\t\tport messagePort: MessagePort;\n\t\t\tperform publishMessage {\n\t\t\t\tin message = messagePort.message;\n\t\t\t\tout messageFlow = messageFlow;\n\t\t\t}\n\t\t\tport messagePort: MessagePort {\n\t\t\t\tout message: Message;\n\t\t\t}\n\t\t}\n\t\tpart subscriber {\n\t\t\tport subscriptionPort: SubscriptionPort;\n\t\t",
    "package 'Vehicle Fuel System' {\n\tattribute def FuelSupplyCmd;\n\tattribute def FuelReturnCmd;\n\tattribute def FuelTemperature;\n\tpart context {\n\t\tpart fuelTankAssembly {\n\t\t\tport fuelSupplyCmdPort: ~FuelSupplyCmdPort;\n\t\t\tperform fuelSupply.produceFuel {\n\t\t\t\tin fuelSupplyCmd = fuelSupplyCmdPort.fuelSupplyCmd;\n\t\t\t\tout fuel = fuelSupply.fuel;\n\t\t\t}\n\t\t\tport fuelReturnCmdPort: ~FuelReturnCmdPort;\n\t\t\tperform fuelReturn.consumeFuel {\n\t\t\t\tin fuelReturnCmd = fuelReturnCmdPort.fuelReturnCmd;\n\t\t\t\tout fuel = fuelReturn.fuel;\n\t\t\t}\n\t\t\tport fuelTemperaturePort: ~FuelTemperaturePort;\n\t\t\tperform fuelTemperatureMonitor.measureFuelTemperature {\n\t\t\t\tin fuel = fuelSupply.fuel;\n\t\t\t\tout fuelTemperature = fuelTemperaturePort.fuelTemperature;\n\t\t\t}\n\t\t}\n\t\tpart engine {\n\t\t\tport fuelSupplyCmdPort: FuelSupplyCmdPort;\n\t\t\tperform fuelSupply.consumeFuel {\n\t\t\t\tin fuelSupplyCmd = fuelSupplyCmdPort.fuelSupplyCmd;\n\t\t\t\tout fuel = fuelSupply.fuel;\n\t\t\t}\n\t\t\tport fuelReturnCmdPort: FuelReturnCmdPort;\n\t\t\tperform fuelReturn.produceFuel {\n\t\t\t\tin fuel",
    "package 'PubSub' {\n\tattribute def Topic;\n\tattribute def Message;\n\tattribute def Subscription;\n\tattribute def SubscriptionRequest;\n\tattribute def PublishRequest;\n\tpart context {\n\t\tpart server {\n\t\t\tport publishPort: PublishPort;\n\t\t\tport subscribePort: SubscribePort;\n\t\t\tperform messageDistribution {\n\t\t\t\tin publishRequest = publishPort.publishRequest;\n\t\t\t\tin subscriptionRequest = subscribePort.subscriptionRequest;\n\t\t\t\tout message = messageDistributionServer.message;\n\t\t\t}\n\t\t\tport messageDistributionServer: MessageDistributionServerPort;\n\t\t}\n\t\tpart producer {\n\t\t\tport publishPort: PublishPort;\n\t\t\tperform messagePublishing {\n\t\t\t\tin publishRequest = publishPort.publishRequest;\n\t\t\t\tout message = messagePublishingProducer.message;\n\t\t\t}\n\t\t\tport messagePublishingProducer: MessagePublishingProducerPort;\n\t\t}\n\t\tpart consumer {\n\t\t\tport subscribePort: SubscribePort;\n\t\t\tperform messageReceiving {\n\t\t\t\tin subscriptionRequest = subscribePort.subscriptionRequest;\n\t\t\t\tout message = messageReceivingConsumer.message;\n\t\t\t}\n\t\t\tport messageReceivingConsumer: MessageReceivingConsumerPort;\n\t\t}\n\t}\n\taction messageDistribution {\n\t\taction messageDistributionServer { out message: Message; }\n\t\tsuccession flow messageFlow from messagePublishingProducer.message to message",
    "package 'Transportation System' {\n\tattribute def FuelLevel;\n\tattribute def MaxTankCapacity;\n\tattribute def UserCount;\n\tattribute def RefuelCmd;\n\tattribute def RefuelLocation;\n\tattribute def EnvironmentalFactors;\n\tattribute def TravelTask;\n\tattribute def VehicleStatus;\n\tattribute def SafetyStatus;\n\tattribute def BoardingStatus;\n\tattribute def AlightingStatus;\n\tattribute def RefuelingStatus;\n\tattribute def TravelStatus;\n\tattribute def UserStatus;\n\tattribute def VehicleType;\n\tattribute def VehicleCapacity;\n\tattribute def VehicleSpeed;\n\tattribute def VehicleLocation;\n\tattribute def VehicleDirection;\n\tattribute def VehicleFuelType;\n\tattribute def VehicleFuelEfficiency;\n\tattribute def VehicleSafetyFeatures;\n\tattribute def VehicleMaintenanceStatus;\n\tattribute def VehicleRegistrationStatus;\n\tattribute def VehicleInsuranceStatus;\n\tattribute def VehicleTaxStatus;\n\tattribute def VehicleParkingStatus;\n\tattribute def VehicleTrafficStatus;\n\tattribute def VehicleWeatherStatus;\n\tattribute def VehicleRoadStatus;\n\tattribute def VehicleTrafficLightStatus;\n\tattribute def VehiclePedestrianStatus;\n\tattribute def VehicleVehicleStatus;\n\tattribute def VehicleEmergencyStatus;\n\tattribute def VehicleAlarmStatus;\n\tattribute def VehicleWarningStatus;\n\tattribute def VehicleNotificationStatus",
    "package 'Fuel Management System' {\n\tattribute def FuelTemperature;\n\tattribute def FuelSupply;\n\tattribute def FuelReturn;\n\tpart context {\n\t\tpart fuelTank {\n\t\t\tport fuelOutletPort: ~FuelSupply;\n\t\t\tattribute fuelTemperature: FuelTemperature;\n\t\t\tperform fuelSupply.sendFuel {\n\t\t\t\tin fuelTemperature = fuelTemperature;\n\t\t\t\tout fuel = fuelOutletPort.fuelSupply;\n\t\t\t}\n\t\t}\n\t\tpart engine {\n\t\t\tport fuelInletPort: ~FuelSupply;\n\t\t\tattribute fuelTemperature: FuelTemperature;\n\t\t\tperform fuelSupply.receiveFuel {\n\t\t\t\tin fuel = fuelInletPort.fuelSupply;\n\t\t\t\tout fuelTemperature = fuelTemperature;\n\t\t\t}\n\t\t}\n\t\tpart fuelSupply {\n\t\t\tport fuelOutletPort: FuelSupply;\n\t\t\tattribute fuelTemperature: FuelTemperature;\n\t\t\tperform fuelSupply.sendFuel {\n\t\t\t\tin fuelTemperature = fuelTemperature;\n\t\t\t\tout fuel = fuelOutletPort.fuelSupply;\n\t\t\t}\n\t\t\tport fuelReturnPort: ~FuelReturn;\n\t\t\tperform fuelSupply.receiveFuelReturn {\n\t\t\t\tin fuel = fuelReturnPort.fuelReturn;\n\t\t\t\tout fuelTemperature = fuelTemperature;\n\t\t\t}\n\t\t}\n\t\tpart fuelReturn {\n\t\t\tport fuelReturnPort: FuelReturn;\n\t\t\t",
    "package 'Fuel System' {\n\tattribute def FuelTemperature;\n\tattribute def FuelFlowRate;\n\tattribute def FuelLevel;\n\tpart context {\n\t\tpart FuelTankAssembly {\n\t\t\tport fuelSupplyPort: ~FuelSupplyPort;\n\t\t\tport fuelReturnPort: ~FuelReturnPort;\n\t\t\tperform fuelSupply.provideFuel {\n\t\t\t\tin fuelFlowRate = fuelSupplyPort.fuelFlowRate;\n\t\t\t\tout fuel = fuelSupplyPort.fuel;\n\t\t\t}\n\t\t\tperform fuelReturn.acceptFuel {\n\t\t\t\tin fuel = fuelReturnPort.fuel;\n\t\t\t\tout fuelFlowRate = fuelReturnPort.fuelFlowRate;\n\t\t\t}\n\t\t\tperform fuelSupply.provideFuelTemperature {\n\t\t\t\tin fuelSupplyPort.fuelSupplyPort;\n\t\t\t\tout fuelTemperature = fuelSupplyPort.fuelTemperature;\n\t\t\t}\n\t\t\tperform fuelReturn.provideFuelTemperature {\n\t\t\t\tin fuelReturnPort.fuelReturnPort;\n\t\t\t\tout fuelTemperature = fuelReturnPort.fuelTemperature;\n\t\t\t}\n\t\t}\n\t\tpart Engine {\n\t\t\tport fuelSupplyPort: FuelSupplyPort;\n\t\t\tport fuelReturnPort: FuelReturnPort;\n\t\t\tperform fuelSupply.useFuel {\n\t\t\t\tin fuel = fuelSupplyPort.fuel;\n\t\t\t\tout fuelFlowRate = fuelSupplyPort.fuelFlowRate;\n",
    "package 'Camera' {\n\tattribute def Photo;\n\tattribute def Scene;\n\tattribute def FocusedImage;\n\tattribute def FinalPhoto;\n\tpart context {\n\t\tpart user {\n\t\t\tport scenePort: ScenePort;\n\t\t\tperform capturePhoto.sendScene {\n\t\t\t\tin scene = scenePort.scene;\n\t\t\t}\n\t\t}\n\t\tinterface userToCamera connect user.scenePort to camera.scenePort {\n\t\t\tref flow references capturePhoto.sceneFlow\n\t\t\t\tfrom source.scene to target.scene;\n\t\t}\n\t\tpart camera {\n\t\t\tport scenePort: ~ScenePort;\n\t\t\tperform capturePhoto.focusScene {\n\t\t\t\tin scene = scenePort.scene;\n\t\t\t\tout focusedImage = focusedImagePort.focusedImage;\n\t\t\t}\n\t\t\tport focusedImagePort: FocusedImagePort;\n\t\t\tperform capturePhoto.captureFinalPhoto {\n\t\t\t\tin focusedImage = focusedImagePort.focusedImage;\n\t\t\t\tout finalPhoto = finalPhotoPort.finalPhoto;\n\t\t\t}\n\t\t\tport finalPhotoPort: FinalPhotoPort;\n\t\t}\n\t\tpart imageProcessing {\n\t\t\tport focusedImagePort: ~FocusedImagePort;\n\t\t\tperform capturePhoto.generateIntermediateImage {\n\t\t\t\tin focusedImage = focusedImagePort.focusedImage;\n\t\t\t\tout intermediateImage = intermediateImagePort.intermediateImage;\n\t\t\t}\n\t\t",
    "package 'Photography Workflow' {\n\tattribute def Scene;\n\tattribute def Image;\n\tattribute def Photograph;\n\tpart context {\n\t\tpart user {\n\t\t\tport scenePort: ScenePort;\n\t\t\tperform photographyWorkflow.producePhotograph {\n\t\t\t\tin scene = scenePort.scene;\n\t\t\t}\n\t\t}\n\t\tinterface userToPhotographyWorkflow connect user.scenePort to photographyWorkflow.scenePort {\n\t\t\tref flow references photographyWorkflow.sceneFlow\n\t\t\t\tfrom source.scene to target.scene;\n\t\t}\n\t\tpart photographyWorkflow {\n\t\t\tport scenePort: ScenePort;\n\t\t\tperform photographyWorkflow.focusScene {\n\t\t\t\tin scene = scenePort.scene;\n\t\t\t\tout image = imagePort.image;\n\t\t\t}\n\t\t\tport imagePort: ImagePort;\n\t\t\tperform photographyWorkflow.shootImage {\n\t\t\t\tin image = imagePort.image;\n\t\t\t\tout photograph = photographPort.photograph;\n\t\t\t}\n\t\t\tport photographPort: PhotographPort;\n\t\t}\n\t}\n\taction photographyWorkflow {\n\t\taction focusScene { in scene; out image: Image; }\n\t\tsuccession flow sceneFlow from focusScene.scene to shootImage.scene;\n\t\taction shootImage { in image; out photograph: Photograph; }\n\t}\n}\n––––– YOUR TURN –––––\n\nInput Requirement:\nThe system is designed",
    "package 'Photography System' {\n\tattribute def Scene;\n\tattribute def Image;\n\tattribute def Photograph;\n\tpart context {\n\t\tpart user {\n\t\t\tport scenePort: ScenePort;\n\t\t\tperform photographyWorkflow.frameScene {\n\t\t\t\tin scene = scenePort.scene;\n\t\t\t}\n\t\t\tperform photographyWorkflow.shootScene {\n\t\t\t\tin image = photographyWorkflow.focusScene.image;\n\t\t\t}\n\t\t}\n\t\tpart photographyWorkflow {\n\t\t\tpart focusScene {\n\t\t\t\tperform photographyWorkflow.focusScene {\n\t\t\t\t\tin scene = scenePort.scene;\n\t\t\t\t\tout image = image;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart shootScene {\n\t\t\t\tperform photographyWorkflow.shootScene {\n\t\t\t\t\tin image = focusScene.image;\n\t\t\t\t\tout photograph = photograph;\n\t\t\t\t}\n\t\t\t}\n\t\t\tsequence flow photographyWorkflowFlow from frameScene to shootScene;\n\t\t}\n\t\tpart imageProcessing {\n\t\t\tpart imageConverter {\n\t\t\t\tperform imageProcessing.convertImage {\n\t\t\t\t\tin image = photographyWorkflow.focusScene.image;\n\t\t\t\t\tout image = image;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\taction photographyWorkflow {\n\t\taction frameScene { in scene: Scene; out image: Image; }\n\t\tsuccession flow focusSceneFlow from frameScene.image to shootScene.image;\n\t\taction focusScene {",
    "package 'Photography System' {\n\tattribute def Scene;\n\tattribute def Image;\n\tattribute def Photograph;\n\tport def ScenePort {\n\t\tin scene: Scene;\n\t}\n\tport def ImagePort {\n\t\tout image: Image;\n\t}\n\tport def PhotographPort {\n\t\tout photograph: Photograph;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport scenePort: ScenePort;\n\t\t\tperform photographyProcess.sendScene {\n\t\t\t\tin scene = scenePort.scene;\n\t\t\t}\n\t\t}\n\t\tinterface userToPhotographySystem connect user.scenePort to photographySystem.scenePort {\n\t\t\tref flow references photographyProcess.sceneFlow\n\t\t\t\tfrom source.scene to target.scene;\n\t\t}\n\t\tpart photographySystem {\n\t\t\tport scenePort: ~ScenePort;\n\t\t\tperform photographyProcess.processScene {\n\t\t\t\tin scene = scenePort.scene;\n\t\t\t\tout image = imagePort.image;\n\t\t\t}\n\t\t\tport imagePort: ImagePort;\n\t\t\tperform photographyProcess.shootImage {\n\t\t\t\tin image = imagePort.image;\n\t\t\t\tout photograph = photographPort.photograph;\n\t\t\t}\n\t\t\tport photographPort: PhotographPort;\n\t\t}\n\t}\n\taction photographyProcess {\n\t\taction sendScene { in scene: Scene; }\n\t\tsuccession flow sceneFlow from sendScene.scene to processScene",
    "package 'PhotographyWorkflow' {\n\tattribute def Scene;\n\tattribute def Image;\n\tattribute def Picture;\n\tattribute def FocusCmd;\n\tattribute def ShootCmd;\n\tport def FocusCmdPort {\n\t\tout focusCmd : FocusCmd;\n\t}\n\tport def ShootCmdPort {\n\t\tout shootCmd : ShootCmd;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport focusCmdPort: FocusCmdPort;\n\t\t\tport shootCmdPort: ShootCmdPort;\n\t\t\tperform photographyWorkflow.sendFocusCmd {\n\t\t\t\tout focusCmd = focusCmdPort.focusCmd;\n\t\t\t}\n\t\t\tperform photographyWorkflow.sendShootCmd {\n\t\t\t\tout shootCmd = shootCmdPort.shootCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToPhotographyWorkflow connect user.focusCmdPort to photographyWorkflow.focusCmdPort {\n\t\t\tref flow references photographyWorkflow.focusFlow\n\t\t\t\tfrom source.focusCmd to target.focusCmd; \n\t\t}\n\t\tinterface userToPhotographyWorkflow connect user.shootCmdPort to photographyWorkflow.shootCmdPort {\n\t\t\tref flow references photographyWorkflow.shootFlow\n\t\t\t\tfrom source.shootCmd to target.shootCmd; \n\t\t}\n\t\tpart photographyWorkflow {\n\t\t\tport focusCmdPort: ~FocusCmdPort;\n\t\t\tport shootCmdPort:",
    "package 'Photography Workflow' {\n\tattribute def Scene;\n\tattribute def Image;\n\tattribute def Focus;\n\tattribute def Photo;\n\tattribute def Camera;\n\tattribute def User;\n\tpart context {\n\t\tpart user {\n\t\t\tport scenePort: ScenePort;\n\t\t\tperform photographyWorkflow.focusScene {\n\t\t\t\tin scene = scenePort.scene;\n\t\t\t}\n\t\t\tperform photographyWorkflow.takePhoto {\n\t\t\t\tin focus = focusPort.focus;\n\t\t\t}\n\t\t}\n\t\tpart camera {\n\t\t\tport scenePort: ~ScenePort;\n\t\t\tport focusPort: FocusPort;\n\t\t\tperform photographyWorkflow.produceImage {\n\t\t\t\tin scene = scenePort.scene;\n\t\t\t\tin focus = focusPort.focus;\n\t\t\t\tout image = imagePort.image;\n\t\t\t}\n\t\t\tport imagePort: ImagePort;\n\t\t}\n\t\tpart photographyWorkflow {\n\t\t\tperform photographyWorkflow.focusScene {\n\t\t\t\tout focus = focusPort.focus;\n\t\t\t}\n\t\t\tperform photographyWorkflow.takePhoto {\n\t\t\t\tin focus = focusPort.focus;\n\t\t\t\tout photo = photoPort.photo;\n\t\t\t}\n\t\t\tpart focusScene {\n\t\t\t\tperform photographyWorkflow.produceFocusedImage {\n\t\t\t\t\tin scene = scenePort.scene;\n\t\t\t\t\tin focus = focusPort.focus;\n\t\t\t\t\tout image = imagePort.image;\n\t\t\t\t}\n\t\t\t",
    "package 'Photography System' {\n\tattribute def Scene;\n\tattribute def Image;\n\tattribute def Photo;\n\tattribute def FocusQuality;\n\tattribute def ShootingStatus;\n\tport def ScenePort {\n\t\tin scene: Scene;\n\t}\n\tport def ImagePort {\n\t\tin image: Image;\n\t}\n\tport def PhotoPort {\n\t\tout photo: Photo;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport scenePort: ScenePort;\n\t\t\tperform capturePhoto.sendScene {\n\t\t\t\tin scene = scenePort.scene;\n\t\t\t}\n\t\t}\n\t\tinterface userToPhotographySystem connect user.scenePort to photographySystem.scenePort {\n\t\t\tref flow references capturePhoto.sceneFlow\n\t\t\t\tfrom source.scene to target.scene; \n\t\t}\n\t\tpart photographySystem {\n\t\t\tport scenePort: ~ScenePort;\n\t\t\tperform capturePhoto.focusScene {\n\t\t\t\tin scene = scenePort.scene;\n\t\t\t\tout image = imagePort.image;\n\t\t\t}\n\t\t\tport imagePort: ImagePort;\n\t\t\tperform capturePhoto.evaluateFocus {\n\t\t\t\tin image = imagePort.image;\n\t\t\t\tout focusQuality = focusQualityPort.focusQuality;\n\t\t\t}\n\t\t\tport focusQualityPort: FocusQualityPort;\n\t\t\tperform capturePhoto.shootPhoto {\n\t\t\t\tin focusQuality = focusQualityPort.focus",
    "package 'Photography Workflow' {\n\tattribute def Photo;\n\tattribute def Scene;\n\tattribute def FocusedImage;\n\tattribute def ShootingResult;\n\tattribute def DisplayedPhoto;\n\tattribute def FocusingResult;\n\tattribute def ShootingResult;\n\tattribute def DisplayedPhoto;\n\tattribute def PhotoTaken;\n\tattribute def FocusingResult;\n\tattribute def ShootingResult;\n\tattribute def DisplayedPhoto;\n\tattribute def PhotoTaken;\n\tattribute def FocusingResult;\n\tattribute def ShootingResult;\n\tattribute def DisplayedPhoto;\n\tattribute def PhotoTaken;\n\tattribute def FocusingResult;\n\tattribute def ShootingResult;\n\tattribute def DisplayedPhoto;\n\tattribute def PhotoTaken;\n\tattribute def FocusingResult;\n\tattribute def ShootingResult;\n\tattribute def DisplayedPhoto;\n\tattribute def PhotoTaken;\n\tattribute def FocusingResult;\n\tattribute def ShootingResult;\n\tattribute def DisplayedPhoto;\n\tattribute def PhotoTaken;\n\tattribute def FocusingResult;\n\tattribute def ShootingResult;\n\tattribute def DisplayedPhoto;\n\tattribute def PhotoTaken;\n\tattribute def FocusingResult;\n\tattribute def ShootingResult;\n\tattribute def DisplayedPhoto;\n\tattribute def PhotoTaken;\n\tattribute def FocusingResult;\n\tattribute def Shooting",
    "package 'Automatic Braking Control' {\n\tattribute def BrakeCmd;\n\tattribute def TractionInfo;\n\tattribute def BrakePressure;\n\tattribute def ModulationFrequency;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport brakeCmdPort: BrakeCmdPort;\n\t\t\tperform brakingControl.sendBrakeCmd {\n\t\t\t\tout brakeCmd = brakeCmdPort.brakeCmd;\n\t\t\t}\n\t\t}\n\t\tinterface vehicleToBrakingControl connect vehicle.brakeCmdPort to brakingControl.brakeCmdPort {\n\t\t\tref flow references brakingControl.brakeCmdFlow\n\t\t\t\tfrom source.brakeCmd to target.brakeCmd; \n\t\t}\n\t\tpart brakingControl {\n\t\t\tport brakeCmdPort: ~BrakeCmdPort;\n\t\t\tperform brakingControl.evaluateTraction {\n\t\t\t\tin brakeCmd = brakeCmdPort.brakeCmd;\n\t\t\t\tout tractionInfo = tractionInfoPort.tractionInfo;\n\t\t\t}\n\t\t\tport tractionInfoPort: TractionInfoPort;\n\t\t\tperform brakingControl.adjustBrakePressure {\n\t\t\t\tin tractionInfo = tractionInfoPort.tractionInfo;\n\t\t\t\tout brakePressure = brakePressurePort.brakePressure;\n\t\t\t}\n\t\t\tport brakePressurePort: BrakePressurePort;\n\t\t\tperform brakingControl.adjustModulationFrequency {\n\t\t\t\tin brakePressure = brakePressure",
    "package 'BatteryChargingControl' {\n\tattribute def BatteryLevel;\n\tattribute def ChargingCmd;\n\tport def BatteryLevelPort {\n\t\tout batteryLevel: BatteryLevel;\n\t}\n\tport def ChargingCmdPort {\n\t\tout chargingCmd: ChargingCmd;\n\t}\n\tpart context {\n\t\tpart battery {\n\t\t\tport batteryLevelPort: ~BatteryLevelPort;\n\t\t\tport chargingCmdPort: ~ChargingCmdPort;\n\t\t\tperform batteryChargingControl.monitorBatteryLevel {\n\t\t\t\tin batteryLevel = batteryLevelPort.batteryLevel;\n\t\t\t}\n\t\t\tperform batteryChargingControl.produceChargingCmd {\n\t\t\t\tin batteryLevel = batteryLevelPort.batteryLevel;\n\t\t\t\tout chargingCmd = chargingCmdPort.chargingCmd;\n\t\t\t}\n\t\t}\n\t\tpart batteryChargingControl {\n\t\t\tport batteryLevelPort: ~BatteryLevelPort;\n\t\t\tport chargingCmdPort: ~ChargingCmdPort;\n\t\t\tperform batteryChargingControl.monitorBatteryLevel {\n\t\t\t\tin batteryLevel = batteryLevelPort.batteryLevel;\n\t\t\t\tif batteryLevel < 100 then {\n\t\t\t\t\tperform batteryChargingControl.produceChargingCmd {\n\t\t\t\t\t\tin batteryLevel = batteryLevelPort.batteryLevel;\n\t\t\t\t\t\tout chargingCmd = chargingCmdPort.chargingCmd;\n\t\t\t\t\t}\n\t\t\t\t}\n",
    "package 'BatteryCharger' {\n\tattribute def BatteryLevel;\n\tattribute def ChargingCmd;\n\tport def ChargingCmdPort {\n\t\tout chargingCmd : ChargingCmd;\n\t}\n\tpart context {\n\t\tpart charger {\n\t\t\tport chargingCmdPort: ~ChargingCmdPort;\n\t\t\tperform chargingCycle.produceChargingCmd {\n\t\t\t\tin chargingCmd = chargingCmdPort.chargingCmd;\n\t\t\t}\n\t\t\tport chargingCmdPort: ~ChargingCmdPort;\n\t\t}\n\t\tpart battery {\n\t\t\tport chargingCmdPort: ~ChargingCmdPort;\n\t\t\tperform chargingCycle.consumeChargingCmd {\n\t\t\t\tin chargingCmd = chargingCmdPort.chargingCmd;\n\t\t\t}\n\t\t\tperform chargingCycle.produceBatteryLevel {\n\t\t\t\tout batteryLevel = batteryLevel;\n\t\t\t}\n\t\t}\n\t\tpart chargingCycle {\n\t\t\tperform chargingCycle.produceChargingCmd {\n\t\t\t\tout chargingCmd = chargingCmd;\n\t\t\t}\n\t\t\tsuccession flow chargingCmdFlow from produceChargingCmd.chargingCmd to consumeChargingCmd.chargingCmd;\n\t\t\tperform chargingCycle.consumeChargingCmd {\n\t\t\t\tin chargingCmd;\n\t\t\t}\n\t\t\tperform chargingCycle.produceBatteryLevel {\n\t\t\t\tout batteryLevel = batteryLevel;\n\t\t\t}\n\t\t\tsuccession flow batteryLevel",
    "package 'Camera' {\n\tattribute def Scene;\n\tattribute def Photo;\n\tattribute def FocusingResult;\n\tattribute def ImagingResult;\n\tpart context {\n\t\tpart user {\n\t\t\tport scenePort: ScenePort;\n\t\t\tperform capturePhoto.sendScene {\n\t\t\t\tout scene = scenePort.scene;\n\t\t\t}\n\t\t}\n\t\tinterface userToCamera connect user.scenePort to camera.scenePort {\n\t\t\tref flow references capturePhoto.sceneFlow\n\t\t\t\tfrom source.scene to target.scene;\n\t\t}\n\t\tpart camera {\n\t\t\tport scenePort: ~ScenePort;\n\t\t\tperform autofocus.produceFocusingResult {\n\t\t\t\tin scene = scenePort.scene;\n\t\t\t\tout focusingResult = focusingResultPort.focusingResult;\n\t\t\t}\n\t\t\tport focusingResultPort: FocusingResultPort;\n\t\t\tperform imaging.captureImage {\n\t\t\t\tin focusingResult = focusingResultPort.focusingResult;\n\t\t\t\tout imagingResult = imagingResultPort.imagingResult;\n\t\t\t}\n\t\t\tport imagingResultPort: ImagingResultPort;\n\t\t\tperform capturePhoto.producePhoto {\n\t\t\t\tin imagingResult = imagingResultPort.imagingResult;\n\t\t\t\tout photo = photoPort.photo;\n\t\t\t}\n\t\t\tport photoPort: PhotoPort;\n\t\t}\n\t\tpart autofocus {\n\t\t\tport scenePort: ~ScenePort",
    "package 'Digital Camera' {\n\tattribute def Scene;\n\tattribute def Focus;\n\tattribute def Image;\n\tattribute def Photo;\n\tpart context {\n\t\tpart user {\n\t\t\tport scenePort: ScenePort;\n\t\t\tperform shootScene.sendScene {\n\t\t\t\tout scene = scenePort.scene;\n\t\t\t}\n\t\t}\n\t\tinterface userToCamera connect user.scenePort to camera.scenePort {\n\t\t\tref flow references shootScene.sceneFlow\n\t\t\t\tfrom source.scene to target.scene;\n\t\t}\n\t\tpart camera {\n\t\t\tport scenePort: ~ScenePort;\n\t\t\tperform shootScene.focusOnScene {\n\t\t\t\tin scene = scenePort.scene;\n\t\t\t\tout focus = focusPort.focus;\n\t\t\t}\n\t\t\tport focusPort: FocusPort;\n\t\t\tperform shootScene.generateImage {\n\t\t\t\tin focus = focusPort.focus;\n\t\t\t\tout image = imagePort.image;\n\t\t\t}\n\t\t\tport imagePort: ImagePort;\n\t\t\tperform shootScene.captureImage {\n\t\t\t\tin image = imagePort.image;\n\t\t\t\tout photo = photoPort.photo;\n\t\t\t}\n\t\t\tport photoPort: PhotoPort;\n\t\t}\n\t\tpart imagingModule {\n\t\t\tport imagePort: ~ImagePort;\n\t\t\tperform shootScene.producePhoto {\n\t\t\t\tin image = imagePort.image;\n\t\t\t\tout photo = photo",
    "package 'Vehicle Simulator' {\n\tattribute def VehicleMass;\n\tattribute def InitialPosition;\n\tattribute def InitialVelocity;\n\tattribute def TimeStep;\n\tattribute def PowerInput;\n\tattribute def VehiclePosition;\n\tattribute def VehicleSpeed;\n\tpart context {\n\t\tpart user {\n\t\t\tport userPort: UserPort;\n\t\t\tperform vehicleSimulation.sendSimulationData {\n\t\t\t\tin vehicleMass = userPort.vehicleMass;\n\t\t\t\tin initialPosition = userPort.initialPosition;\n\t\t\t\tin initialVelocity = userPort.initialVelocity;\n\t\t\t\tin timeStep = userPort.timeStep;\n\t\t\t\tin powerInput = userPort.powerInput;\n\t\t\t}\n\t\t}\n\t\tpart vehicleSimulation {\n\t\t\tport userPort: ~UserPort;\n\t\t\tperform vehicleSimulation.calculateVehiclePosition {\n\t\t\t\tin vehicleMass = userPort.vehicleMass;\n\t\t\t\tin initialPosition = userPort.initialPosition;\n\t\t\t\tin initialVelocity = userPort.initialVelocity;\n\t\t\t\tin timeStep = userPort.timeStep;\n\t\t\t\tin powerInput = userPort.powerInput;\n\t\t\t\tout vehiclePosition = vehiclePositionPort.vehiclePosition;\n\t\t\t\tout vehicleSpeed = vehicleSpeedPort.vehicleSpeed;\n\t\t\t}\n\t\t\tport vehiclePositionPort: VehiclePositionPort;\n\t\t\tport vehicleSpeedPort: VehicleSpeedPort;\n\t\t}\n\t\tpart trajectory {\n\t\t\tport vehicle",
    "package 'Camera' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tattribute def Image;\n\tattribute def Photo;\n\tattribute def Display;\n\tattribute def Scene;\n\tattribute def FocusingResult;\n\tattribute def CapturedImage;\n\tattribute def DisplayedPhoto;\n\tattribute def ShootingResult;\n\tattribute def UserInput;\n\tattribute def UserView;\n\tattribute def SystemState;\n\tattribute def SystemEvent;\n\tattribute def SystemError;\n\tattribute def SystemLog;\n\tattribute def SystemStatus;\n\tattribute def SystemAlarm;\n\tattribute def SystemNotification;\n\tattribute def SystemMessage;\n\tattribute def SystemWarning;\n\tattribute def SystemInfo;\n\tattribute def SystemConfig;\n\tattribute def SystemSetting;\n\tattribute def SystemParameter;\n\tattribute def SystemProperty;\n\tattribute def SystemResource;\n\tattribute def SystemCapability;\n\tattribute def SystemFunction;\n\tattribute def SystemService;\n\tattribute def SystemInterface;\n\tattribute def SystemAPI;\n\tattribute def SystemProtocol;\n\tattribute def SystemStandard;\n\tattribute def SystemSpecification;\n\tattribute def SystemRequirement;\n\tattribute def SystemConstraint;\n\tattribute def SystemDependency;\n\tattribute def SystemRelationship;\n\tattribute def SystemInteraction;\n\tattribute def SystemBehavior;\n\tattribute def SystemPerformance;\n",
    "package 'Camera' {\n\tattribute def Scene;\n\tattribute def Image;\n\tattribute def Picture;\n\tattribute def Display;\n\tport def viewPort: Scene;\n\tport def displayPort: Display;\n\tpart context {\n\t\tpart user {\n\t\t\tport viewPort: viewPort;\n\t\t\tperform cameraControl.produceImage {\n\t\t\t\tin scene = viewPort.scene;\n\t\t\t\tout image = imagePort.image;\n\t\t\t}\n\t\t}\n\t\tinterface userToCamera connect user.viewPort to camera.viewPort {\n\t\t\tref flow references cameraControl.imageFlow\n\t\t\t\tfrom source.viewPort to target.viewPort; \n\t\t}\n\t\tpart camera {\n\t\t\tport viewPort: ~viewPort;\n\t\t\tport imagePort: Image;\n\t\t\tperform cameraControl.captureImage {\n\t\t\t\tin image = imagePort.image;\n\t\t\t\tout picture = picturePort.picture;\n\t\t\t}\n\t\t\tport picturePort: Picture;\n\t\t\tport displayPort: ~Display;\n\t\t}\n\t\tpart display {\n\t\t\tport displayPort: ~Display;\n\t\t\tperform cameraControl.displayPicture {\n\t\t\t\tin picture = picturePort.picture;\n\t\t\t}\n\t\t}\n\t}\n\taction cameraControl {\n\t\taction produceImage { in scene: Scene; out image: Image; }\n\t\tsuccession flow imageFlow from produceImage.image to capture",
    "package 'SensorManagement' {\n\tattribute def SensorStatus;\n\tattribute def SensorUpdateCmd;\n\tattribute def Sensor;\n\tpart context {\n\t\tpart sensorManager {\n\t\t\tport sensorStatusPort: SensorStatusPort;\n\t\t\tperform sensorManagement.updateSensorStatus {\n\t\t\t\tin sensorStatus = sensorStatusPort.sensorStatus;\n\t\t\t}\n\t\t\tport sensorUpdateCmdPort: SensorUpdateCmdPort;\n\t\t\tperform sensorManagement.sendSensorUpdateCmd {\n\t\t\t\tin sensorUpdateCmd = sensorUpdateCmdPort.sensorUpdateCmd;\n\t\t\t}\n\t\t\tport sensorPort: SensorPort;\n\t\t\tperform sensorManagement.registerSensor {\n\t\t\t\tin sensor = sensorPort.sensor;\n\t\t\t}\n\t\t}\n\t\tpart sensor {\n\t\t\tport sensorStatusPort: ~SensorStatusPort;\n\t\t\tperform sensorManagement.sendSensorStatus {\n\t\t\t\tout sensorStatus = sensorStatusPort.sensorStatus;\n\t\t\t}\n\t\t\tport sensorUpdateCmdPort: ~SensorUpdateCmdPort;\n\t\t\tperform sensorManagement.receiveSensorUpdateCmd {\n\t\t\t\tin sensorUpdateCmd = sensorUpdateCmdPort.sensorUpdateCmd;\n\t\t\t}\n\t\t\tport sensorUpdatePort: SensorUpdatePort;\n\t\t\tperform sensorManagement.updateSensor {\n\t\t\t\tin sensorUpdateCmd = sensorUpdatePort.sensorUpdateCmd;\n\t\t\t}\n\t\t}\n\t\tpart sensorManagement {\n\t\t\tport",
    "package 'Vehicle State Management' {\n\tattribute def VehicleState;\n\tattribute def VehicleStartSignal;\n\tattribute def VehiclePowerOnSignal;\n\tattribute def VehicleShutdownSignal;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tattribute state: VehicleState;\n\t\t\tperform vehicleStateManagement.produceVehicleState {\n\t\t\t\tin vehicleStartSignal = vehicleStartSignalPort.vehicleStartSignal;\n\t\t\t\tin vehiclePowerOnSignal = vehiclePowerOnSignalPort.vehiclePowerOnSignal;\n\t\t\t\tin vehicleShutdownSignal = vehicleShutdownSignalPort.vehicleShutdownSignal;\n\t\t\t}\n\t\t\tport vehicleStartSignalPort: ~VehicleStartSignalPort;\n\t\t\tport vehiclePowerOnSignalPort: ~VehiclePowerOnSignalPort;\n\t\t\tport vehicleShutdownSignalPort: ~VehicleShutdownSignalPort;\n\t\t}\n\t\tpart vehicleStateManagement {\n\t\t\tperform vehicleStateManagement.produceVehicleState {\n\t\t\t\tin vehicleStartSignal;\n\t\t\t\tin vehiclePowerOnSignal;\n\t\t\t\tin vehicleShutdownSignal;\n\t\t\t\tout vehicleState;\n\t\t\t}\n\t\t}\n\t}\n\taction vehicleStateManagement {\n\t\tsequence flow vehicleStateFlow from vehicleStartSignal to vehiclePowerOnSignal to vehicleShutdownSignal;\n\t\tsequence flow vehicleStateSequence from vehicleStartSignal to vehiclePowerOnSignal to vehicleShutdownSignal;\n\t\ttransition transition1 from vehicle",
    "package 'VehicleStatus' {\n\tattribute def VehicleStatus;\n\tattribute def VehicleStartSignal;\n\tattribute def VehicleOnSignal;\n\tattribute def VehicleOffSignal;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tperform vehicleStatus.produceVehicleStatus {\n\t\t\t\tout vehicleStatus = vehicleStatus;\n\t\t\t}\n\t\t\tport vehicleStatusPort: ~VehicleStatusPort;\n\t\t}\n\t\tpart vehicleStatus {\n\t\t\tport vehicleStatusPort: VehicleStatusPort;\n\t\t\tperform vehicleStatus.produceVehicleStatus {\n\t\t\t\tin vehicleStatus;\n\t\t\t\tout vehicleStatus = vehicleStatus;\n\t\t\t}\n\t\t}\n\t\tpart vehicleController {\n\t\t\tport vehicleStartSignalPort: ~VehicleStartSignalPort;\n\t\t\tport vehicleOnSignalPort: ~VehicleOnSignalPort;\n\t\t\tport vehicleOffSignalPort: ~VehicleOffSignalPort;\n\t\t\tperform vehicleStatus.produceVehicleStatus {\n\t\t\t\tin vehicleStatus;\n\t\t\t\tout vehicleStatus = vehicleStatus;\n\t\t\t}\n\t\t\tperform vehicleStatus.produceVehicleStatus {\n\t\t\t\tin vehicleStartSignal = vehicleStartSignalPort.vehicleStartSignal;\n\t\t\t\tout vehicleStatus = vehicleStatus;\n\t\t\t}\n\t\t\tperform vehicleStatus.produceVehicleStatus {\n\t\t\t\tin vehicleOnSignal = vehicleOnSignalPort.vehicleOnSignal;\n\t\t\t\tout vehicleStatus = vehicleStatus;\n",
    "package 'Vehicle Power Management' {\n\tattribute def VehicleState;\n\tattribute def VehicleStartCmd;\n\tattribute def VehicleStartedCmd;\n\tattribute def VehicleShutdownCmd;\n\tattribute def ParkingBrakeEngagedCmd;\n\tattribute def PowerSupply;\n\tattribute def SelfDiagnosisResult;\n\tattribute def FunctionalUnitPower;\n\tpart context {\n\t\tpart user {\n\t\t\tport vehicleStartCmdPort: VehicleStartCmdPort;\n\t\t\tport vehicleShutdownCmdPort: VehicleShutdownCmdPort;\n\t\t\tport parkingBrakeEngagedCmdPort: ParkingBrakeEngagedCmdPort;\n\t\t\tperform vehiclePowerManagement.sendVehicleStartCmd {\n\t\t\t\tout vehicleStartCmd = vehicleStartCmdPort.vehicleStartCmd;\n\t\t\t}\n\t\t\tperform vehiclePowerManagement.sendVehicleShutdownCmd {\n\t\t\t\tout vehicleShutdownCmd = vehicleShutdownCmdPort.vehicleShutdownCmd;\n\t\t\t}\n\t\t\tperform vehiclePowerManagement.sendParkingBrakeEngagedCmd {\n\t\t\t\tout parkingBrakeEngagedCmd = parkingBrakeEngagedCmdPort.parkingBrakeEngagedCmd;\n\t\t\t}\n\t\t}\n\t\tpart vehiclePowerManagement {\n\t\t\tport vehicleStartCmdPort: ~VehicleStartCmdPort;\n\t\t\tport vehicleShutdownCmdPort: ~VehicleShutdownCmdPort;\n\t\t\tport parkingBrakeEngagedCmdPort:",
    "package 'Vehicle' {\n\tattribute def VehicleStatus;\n\tattribute def VehicleState;\n\tattribute def VehicleStartSignal;\n\tattribute def VehicleShutdownSignal;\n\tpart context {\n\t\tpart user {\n\t\t\tport vehicleStartPort: VehicleStartPort;\n\t\t\tport vehicleShutdownPort: VehicleShutdownPort;\n\t\t\tperform vehicleControl.produceVehicleStartSignal {\n\t\t\t\tout vehicleStartSignal = vehicleStartPort.vehicleStartSignal;\n\t\t\t}\n\t\t\tperform vehicleControl.produceVehicleShutdownSignal {\n\t\t\t\tout vehicleShutdownSignal = vehicleShutdownPort.vehicleShutdownSignal;\n\t\t\t}\n\t\t}\n\t\tpart vehicleControl {\n\t\t\tport vehicleStartPort: ~VehicleStartPort;\n\t\t\tport vehicleShutdownPort: ~VehicleShutdownPort;\n\t\t\tperform vehicleControl.produceVehicleStartSignal {\n\t\t\t\tin vehicleStartSignal = vehicleStartPort.vehicleStartSignal;\n\t\t\t\tout vehicleStatus = vehicleStatusPort.vehicleStatus;\n\t\t\t}\n\t\t\tperform vehicleControl.produceVehicleShutdownSignal {\n\t\t\t\tin vehicleShutdownSignal = vehicleShutdownPort.vehicleShutdownSignal;\n\t\t\t\tout vehicleStatus = vehicleStatusPort.vehicleStatus;\n\t\t\t}\n\t\t\tpart vehicleStatus {\n\t\t\t\tport vehicleStatusPort: VehicleStatusPort;\n\t\t\t}\n\t\t}\n\t\tpart vehicle {\n\t\t\tport vehicleStatusPort: ~VehicleStatusPort;\n\t\t\t",
    "package 'Vehicle Power Management' {\n\tattribute def VehicleState;\n\tattribute def StartSignal;\n\tattribute def OnSignal;\n\tattribute def OffSignal;\n\tpart context {\n\t\tpart user {\n\t\t\tport startSignalPort: StartSignalPort;\n\t\t\tport onSignalPort: OnSignalPort;\n\t\t\tport offSignalPort: OffSignalPort;\n\t\t\tperform vehiclePowerManagement.sendStartSignal {\n\t\t\t\tout startSignal = startSignalPort.startSignal;\n\t\t\t}\n\t\t\tperform vehiclePowerManagement.sendOnSignal {\n\t\t\t\tout onSignal = onSignalPort.onSignal;\n\t\t\t}\n\t\t\tperform vehiclePowerManagement.sendOffSignal {\n\t\t\t\tout offSignal = offSignalPort.offSignal;\n\t\t\t}\n\t\t}\n\t\tpart vehiclePowerManagement {\n\t\t\tport startSignalPort: ~StartSignalPort;\n\t\t\tport onSignalPort: ~OnSignalPort;\n\t\t\tport offSignalPort: ~OffSignalPort;\n\t\t\tperform vehiclePowerManagement.transitionToStart {\n\t\t\t\tin startSignal = startSignalPort.startSignal;\n\t\t\t}\n\t\t\tperform vehiclePowerManagement.transitionToOn {\n\t\t\t\tin onSignal = onSignalPort.onSignal;\n\t\t\t}\n\t\t\tperform vehiclePowerManagement.transitionToOff {\n\t\t\t\tin offSignal = offSignalPort.offSignal;\n\t\t\t}\n\t\t\t",
    "package 'Vehicle Health Monitoring' {\n\tattribute def VehicleHealthStatus;\n\tattribute def VehicleTemperature;\n\tattribute def MaintenanceStatus;\n\tattribute def MaintenanceTime;\n\tattribute def NextMaintenanceTime;\n\tattribute def MaxAllowableTemperature;\n\tattribute def ScheduledMaintenanceInterval;\n\tattribute def OverTemperatureWarning;\n\tattribute def MaintenanceCompleted;\n\tattribute def NormalOperatingStatus;\n\tattribute def DegradedOperatingStatus;\n\tattribute def MaintenanceStatusDuration;\n\t\n\tpart context {\n\t\tpart vehicle {\n\t\t\tattribute vehicleHealthStatus: VehicleHealthStatus;\n\t\t\tattribute vehicleTemperature: VehicleTemperature;\n\t\t\tattribute maintenanceStatus: MaintenanceStatus;\n\t\t\tattribute maintenanceTime: MaintenanceTime;\n\t\t\tattribute nextMaintenanceTime: NextMaintenanceTime;\n\t\t\tattribute maxAllowableTemperature: MaxAllowableTemperature;\n\t\t\tattribute scheduledMaintenanceInterval: ScheduledMaintenanceInterval;\n\t\t\tattribute overTemperatureWarning: OverTemperatureWarning;\n\t\t\tattribute maintenanceCompleted: MaintenanceCompleted;\n\t\t\tattribute normalOperatingStatus: NormalOperatingStatus;\n\t\t\tattribute degradedOperatingStatus: DegradedOperatingStatus;\n\t\t\tattribute maintenanceStatusDuration: MaintenanceStatusDuration;\n\t\t\tperform vehicleHealthStatusManagement.sendOverTemperatureWarning {\n\t\t\t\tin vehicleTemperature = vehicle.vehicleTemperature;\n\t\t\t\tin maxAllowableTemperature = vehicle.max",
    "package 'Server' {\n\tattribute def Clock;\n\tattribute def State;\n\tattribute def Request;\n\tattribute def Response;\n\tattribute def PowerState;\n\tport def RequestPort {\n\t\tin request: Request;\n\t}\n\tport def ClockPort {\n\t\tout clock: Clock;\n\t}\n\tpart context {\n\t\tpart server {\n\t\t\tport requestPort: ~RequestPort;\n\t\t\tport clockPort: ~ClockPort;\n\t\t\tperform timedClockBehavior {\n\t\t\t\tin clock = clockPort.clock;\n\t\t\t\tout state = state;\n\t\t\t\tout powerState = powerState;\n\t\t\t}\n\t\t}\n\t\tpart timedClockBehavior {\n\t\t\tperform startup {\n\t\t\t\tin clock = clockPort.clock;\n\t\t\t\tout state = off;\n\t\t\t\tout powerState = off;\n\t\t\t}\n\t\t\tperform waiting {\n\t\t\t\tin clock = clockPort.clock;\n\t\t\t\tin request = requestPort.request;\n\t\t\t\tout state = response;\n\t\t\t}\n\t\t\tperform response {\n\t\t\t\tin clock = clockPort.clock;\n\t\t\t\tin request = requestPort.request;\n\t\t\t\tout state = waiting;\n\t\t\t}\n\t\t\tperform dailyReset {\n\t\t\t\tin clock = clockPort.clock;\n\t\t\t\tout state = off;\n\t\t\t\tout powerState = off;\n\t\t\t}\n\t\t}\n\t}\n\taction timedClockBehavior {\n\t\tsequence startup",
    "package 'StartStop' {\n\tattribute def StartStopCmd;\n\tattribute def PowerOnCmd;\n\tattribute def BrakePedalCmd;\n\tattribute def StartSignal;\n\tattribute def StopSignal;\n\tattribute def ParkingBrakeCmd;\n\tattribute def VehicleState;\n\tattribute def PowerSupplyCmd;\n\tattribute def SelfCheckCmd;\n\tattribute def PowerSupply;\n\tattribute def VehicleStatus;\n\tattribute def ControllerCmd;\n\tattribute def ControllerStatus;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport startStopCmdPort: StartStopCmdPort;\n\t\t\tperform startStopProcess.sendStartStopCmd {\n\t\t\t\tout startStopCmd = startStopCmdPort.startStopCmd;\n\t\t\t}\n\t\t}\n\t\tinterface vehicleToStartStop connect vehicle.startStopCmdPort to startStop.startStopCmdPort {\n\t\t\tref flow references startStopCmdFlow\n\t\t\t\tfrom source.startStopCmd to target.startStopCmd; \n\t\t}\n\t\tpart startStop {\n\t\t\tport startStopCmdPort: ~StartStopCmdPort;\n\t\t\tperform startStopProcess.produceStartStopCmd {\n\t\t\t\tin startStopCmd = startStopCmdPort.startStopCmd;\n\t\t\t\tout startStopCmd = startStopCmdPort.startStopCmd;\n\t\t\t}\n\t\t\tport startStopCmdPort:",
    "package 'VehicleControl' {\n\tattribute def VehicleState;\n\tattribute def StartSignal;\n\tattribute def VehicleOnSignal;\n\tattribute def BrakePedalSignal;\n\tattribute def ShutdownSignal;\n\tattribute def ParkingBrakeSignal;\n\tattribute def PowerSupply;\n\tattribute def SelfCheckResult;\n\tattribute def StartControlSignal;\n\tattribute def VehicleController;\n\tattribute def Vehicle;\n\tpart context {\n\t\tpart driver {\n\t\t\tport startSignalPort: StartSignalPort;\n\t\t\tport vehicleOnSignalPort: VehicleOnSignalPort;\n\t\t\tport brakePedalSignalPort: BrakePedalSignalPort;\n\t\t\tport shutdownSignalPort: ShutdownSignalPort;\n\t\t\tperform vehicleControl.sendStartSignal {\n\t\t\t\tout startSignal = startSignalPort.startSignal;\n\t\t\t}\n\t\t\tperform vehicleControl.sendVehicleOnSignal {\n\t\t\t\tout vehicleOnSignal = vehicleOnSignalPort.vehicleOnSignal;\n\t\t\t}\n\t\t\tperform vehicleControl.sendBrakePedalSignal {\n\t\t\t\tout brakePedalSignal = brakePedalSignalPort.brakePedalSignal;\n\t\t\t}\n\t\t\tperform vehicleControl.sendShutdownSignal {\n\t\t\t\tout shutdownSignal = shutdownSignalPort.shutdownSignal;\n\t\t\t}\n\t\t}\n\t\tpart vehicleControl {\n\t\t\tport startSignalPort: ~StartSignalPort;\n",
    "package 'CruiseControl' {\n\tattribute def SetSpeedCmd;\n\tattribute def FuelCtrlCmd;\n\tattribute def VehicleSpeed;\n\tattribute def DesiredSpeed;\n\tpart context {\n\t\tpart driver {\n\t\t\tport setSpeedCmdPort: SetSpeedCmdPort;\n\t\t\tperform cruiseControl.sendSetSpeedCmd {\n\t\t\t\tout setSpeedCmd = setSpeedCmdPort.setSpeedCmd;\n\t\t\t}\n\t\t}\n\t\tinterface driverToCruiseController connect driver.setSpeedCmdPort to cruiseController.setSpeedCmdPort {\n\t\t\tref flow references cruiseControl.setSpeedCmdFlow\n\t\t\t\tfrom source.setSpeedCmd to target.setSpeedCmd;\n\t\t}\n\t\tpart cruiseController {\n\t\t\tport setSpeedCmdPort: ~SetSpeedCmdPort;\n\t\t\tperform cruiseControl.produceFuelCtrlCmd {\n\t\t\t\tin setSpeedCmd = setSpeedCmdPort.setSpeedCmd;\n\t\t\t\tout fuelCtrlCmd = fuelCtrlCmdPort.fuelCtrlCmd;\n\t\t\t}\n\t\t\tport fuelCtrlCmdPort: FuelCtrlCmdPort;\n\t\t}\n\t\tpart speedometer {\n\t\t\tport vehicleSpeedPort: VehicleSpeedPort;\n\t\t\tperform cruiseControl.sendVehicleSpeed {\n\t\t\t\tout vehicleSpeed = vehicleSpeedPort.vehicleSpeed;\n\t\t\t}\n\t\t}\n\t\tinterface speedometerToCruiseController",
    "package 'CruiseControl' {\n\tattribute def SetSpeedCmd;\n\tattribute def RealTimeSpeed;\n\tattribute def ThrottleCmd;\n\tattribute def VehicleSpeed;\n\tattribute def PowerOutput;\n\tpart context {\n\t\tpart driver {\n\t\t\tport setSpeedCmdPort: SetSpeedCmdPort;\n\t\t\tperform cruiseControl.sendSetSpeedCmd {\n\t\t\t\tout setSpeedCmd = setSpeedCmdPort.setSpeedCmd;\n\t\t\t}\n\t\t}\n\t\tinterface driverToCruiseControl connect driver.setSpeedCmdPort to cruiseControl.setSpeedCmdPort {\n\t\t\tref flow references speedAcquisitionFlow\n\t\t\t\tfrom source.setSpeedCmd to target.setSpeedCmd;\n\t\t}\n\t\tpart cruiseControl {\n\t\t\tport setSpeedCmdPort: ~SetSpeedCmdPort;\n\t\t\tperform speedAcquisition.produceRealTimeSpeed {\n\t\t\t\tin setSpeedCmd = setSpeedCmdPort.setSpeedCmd;\n\t\t\t\tout realTimeSpeed = realTimeSpeedPort.realTimeSpeed;\n\t\t\t}\n\t\t\tport realTimeSpeedPort: RealTimeSpeedPort;\n\t\t\tperform speedComparison.generateThrottleCmd {\n\t\t\t\tin setSpeedCmd = setSpeedCmdPort.setSpeedCmd;\n\t\t\t\tin realTimeSpeed = realTimeSpeedPort.realTimeSpeed;\n\t\t\t\tout throttleCmd = throttleCmdPort.throttle",
    "package 'CruiseControl' {\n\tattribute def SetSpeedCmd;\n\tattribute def ThrottleCmd;\n\tattribute def VehicleSpeed;\n\tattribute def SpeedDiff;\n\tattribute def EngineOutput;\n\tport def SetSpeedCmdPort {\n\t\tout setSpeedCmd : SetSpeedCmd;\n\t}\n\tport def ThrottleCmdPort {\n\t\tout throttleCmd : ThrottleCmd;\n\t}\n\tport def VehicleSpeedPort {\n\t\tin vehicleSpeed : VehicleSpeed;\n\t}\n\tpart context {\n\t\tpart driver {\n\t\t\tport setSpeedCmdPort: SetSpeedCmdPort;\n\t\t\tperform cruiseController.sendSetSpeedCmd {\n\t\t\t\tout setSpeedCmd = setSpeedCmdPort.setSpeedCmd;\n\t\t\t}\n\t\t}\n\t\tinterface driverToCruiseController connect driver.setSpeedCmdPort to cruiseController.setSpeedCmdPort {\n\t\t\tref flow references sendSetSpeedCmdFlow\n\t\t\t\tfrom source.setSpeedCmd to target.setSpeedCmd;\n\t\t}\n\t\tpart cruiseController {\n\t\t\tport setSpeedCmdPort: ~SetSpeedCmdPort;\n\t\t\tport vehicleSpeedPort: ~VehicleSpeedPort;\n\t\t\tperform calculateSpeedDiff {\n\t\t\t\tin setSpeedCmd = setSpeedCmdPort.setSpeedCmd;\n\t\t\t\tin vehicleSpeed = vehicleSpeedPort.vehicleSpeed;\n\t\t\t\tout speedDiff = speedDiff",
    "package 'CruiseControl' {\n\tattribute def SpeedCmd;\n\tattribute def ThrottleCmd;\n\tattribute def VehicleSpeed;\n\tattribute def EngineSpeed;\n\tpart context {\n\t\tpart driver {\n\t\t\tport speedCmdPort: SpeedCmdPort;\n\t\t\tperform speedCmdFlow.sendSpeedCmd {\n\t\t\t\tout speedCmd = speedCmdPort.speedCmd;\n\t\t\t}\n\t\t}\n\t\tinterface driverToCruiseControl connect driver.speedCmdPort to cruiseControl.speedCmdPort {\n\t\t\tref flow references speedCmdFlow\n\t\t\t\tfrom source.speedCmd to target.speedCmd; \n\t\t}\n\t\tpart cruiseControl {\n\t\t\tport speedCmdPort: ~SpeedCmdPort;\n\t\t\tperform speedCmdFlow.calculateThrottleCmd {\n\t\t\t\tin speedCmd = speedCmdPort.speedCmd;\n\t\t\t\tout throttleCmd = throttleCmdPort.throttleCmd;\n\t\t\t}\n\t\t\tport throttleCmdPort: ThrottleCmdPort;\n\t\t}\n\t\tpart speedometer {\n\t\t\tport vehicleSpeedPort: VehicleSpeedPort;\n\t\t\tperform speedCmdFlow.provideVehicleSpeed {\n\t\t\t\tout vehicleSpeed = vehicleSpeedPort.vehicleSpeed;\n\t\t\t}\n\t\t}\n\t\tpart engine {\n\t\t\tport throttleCmdPort: ~ThrottleCmdPort;\n\t\t\tperform speedCmdFlow.adjustEngineSpeed {\n\t\t\t\tin",
    "package 'CruiseControl' {\n\tattribute def SetSpeedCmd;\n\tattribute def ActualSpeed;\n\tattribute def EngineFuelCmd;\n\tport def SetSpeedCmdPort {\n\t\tout setSpeedCmd: SetSpeedCmd;\n\t}\n\tport def ActualSpeedPort {\n\t\tin actualSpeed: ActualSpeed;\n\t}\n\tport def EngineFuelCmdPort {\n\t\tout engineFuelCmd: EngineFuelCmd;\n\t}\n\tpart context {\n\t\tpart driver {\n\t\t\tport setSpeedCmdPort: SetSpeedCmdPort;\n\t\t\tperform cruiseControl.sendSetSpeedCmd {\n\t\t\t\tout setSpeedCmd = setSpeedCmdPort.setSpeedCmd;\n\t\t\t}\n\t\t}\n\t\tinterface driverToCruiseControl connect driver.setSpeedCmdPort to cruiseControl.setSpeedCmdPort {\n\t\t\tref flow references cruiseControl.setSpeedFlow\n\t\t\t\tfrom source.setSpeedCmd to target.setSpeedCmd; \n\t\t}\n\t\tpart cruiseControl {\n\t\t\tport setSpeedCmdPort: ~SetSpeedCmdPort;\n\t\t\tperform cruiseControl.produceActualSpeed {\n\t\t\t\tin setSpeedCmd = setSpeedCmdPort.setSpeedCmd;\n\t\t\t\tout actualSpeed = actualSpeedPort.actualSpeed;\n\t\t\t}\n\t\t\tport actualSpeedPort: ActualSpeedPort;\n\t\t\tperform cruiseControl.compareSpeeds {\n\t\t\t\tin set",
    "package 'CruiseControl' {\n\tattribute def SetSpeedCmd;\n\tattribute def FuelCtrlCmd;\n\tattribute def SpeedInfo;\n\tattribute def FuelFlow;\n\tport def SetSpeedCmdPort {\n\t\tout setSpeedCmd : SetSpeedCmd;\n\t}\n\tport def SpeedInfoPort {\n\t\tin speedInfo: SpeedInfo;\n\t}\n\tport def FuelCtrlCmdPort {\n\t\tin fuelCtrlCmd: FuelCtrlCmd;\n\t}\n\tport def FuelFlowPort {\n\t\tout fuelFlow: FuelFlow;\n\t}\n\tpart context {\n\t\tpart driver {\n\t\t\tport setSpeedCmdPort: SetSpeedCmdPort;\n\t\t\tperform cruiseController.sendSetSpeedCmd {\n\t\t\t\tout setSpeedCmd = setSpeedCmdPort.setSpeedCmd;\n\t\t\t}\n\t\t}\n\t\tinterface driverToCruiseController connect driver.setSpeedCmdPort to cruiseController.setSpeedCmdPort {\n\t\t\tref flow references sendSetSpeedCmdFlow\n\t\t\t\tfrom source.setSpeedCmd to target.setSpeedCmd;\n\t\t}\n\t\tpart cruiseController {\n\t\t\tport setSpeedCmdPort: ~SetSpeedCmdPort;\n\t\t\tperform speedSensor.readSpeedInfo {\n\t\t\t\tout speedInfo = speedInfoPort.speedInfo;\n\t\t\t}\n\t\t\tport speedInfoPort: SpeedInfoPort;\n\t\t\tperform cruiseController.calculate",
    "package 'Vehicle Lifecycle Management' {\n\tattribute def Vehicle;\n\tattribute def Ownership;\n\tattribute def Driver;\n\tattribute def DeliveryDate;\n\tattribute def ScrappingInfo;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tattribute vehicle: Vehicle;\n\t\t\tattribute deliveryDate: DeliveryDate;\n\t\t\tattribute scrappingInfo: ScrappingInfo;\n\t\t\tpart assembly {\n\t\t\t\tpart delivery {\n\t\t\t\t\tattribute deliveryDate: DeliveryDate;\n\t\t\t\t\tpart ownership {\n\t\t\t\t\t\tpart owner {\n\t\t\t\t\t\t\tattribute owner: Ownership;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpart driver {\n\t\t\t\t\t\t\tpart driving {\n\t\t\t\t\t\t\t\tattribute driver: Driver;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\taction vehicleLifecycle {\n\t\tsequence flow from assembly to delivery;\n\t\tsequence flow from delivery to ownership;\n\t\tsequence flow from ownership to driver;\n\t\tsequence flow from driver to scrapping;\n\t}\n} \n––––– YOUR TURN –––––\n\nInput Requirement:\nThe system shall be able to manage and track the inventory of a warehouse. The warehouse shall be able to store and manage multiple types of products, each with its own unique characteristics, such as product name, quantity, and unit price. The system shall be able to track the movement of products in and",
    "package 'Vehicle' {\n\tattribute def mass;\n\tattribute def operationalStatus;\n\tattribute def gearSetting;\n\tattribute def acceleratorPedalPosition;\n\tpart context {\n\t\tpart driver {\n\t\t\treference def driver;\n\t\t}\n\t\tpart engine {\n\t\t\tattribute def engineMass;\n\t\t\tattribute def engineOperationalStatus;\n\t\t}\n\t\tpart vehicle {\n\t\t\tattribute def vehicleMass;\n\t\t\tattribute def vehicleOperationalStatus;\n\t\t\tattribute def gearSetting;\n\t\t\tattribute def acceleratorPedalPosition;\n\t\t\treference def driver;\n\t\t\treference def engine;\n\t\t\tpart context {\n\t\t\t\tpart leftFrontWheel {\n\t\t\t\t\tattribute def leftFrontWheelMass;\n\t\t\t\t\tattribute def leftFrontWheelOperationalStatus;\n\t\t\t\t}\n\t\t\t\tpart rightFrontWheel {\n\t\t\t\t\tattribute def rightFrontWheelMass;\n\t\t\t\t\tattribute def rightFrontWheelOperationalStatus;\n\t\t\t\t}\n\t\t\t\tpart leftRearWheel {\n\t\t\t\t\tattribute def leftRearWheelMass;\n\t\t\t\t\tattribute def leftRearWheelOperationalStatus;\n\t\t\t\t}\n\t\t\t\tpart rightRearWheel {\n\t\t\t\t\tattribute def rightRearWheelMass;\n\t\t\t\t\tattribute def rightRearWheelOperationalStatus;\n\t\t\t\t}\n\t\t\t\tpart vehicle_1 {\n\t\t\t\t\tattribute def vehicleMass;\n",
    "package 'Vehicle System' {\n\tattribute def Vehicle;\n\tattribute def Engine;\n\tattribute def Driver;\n\tpart context {\n\t\tpart Vehicle_1 {\n\t\t\tattribute mass: 2000;\n\t\t\tattribute gear: 0;\n\t\t\tattribute acceleratorPosition: 0.0;\n\t\t\tattribute mass: 1500;\n\t\t\tattribute gear: 2;\n\t\t\tattribute acceleratorPosition: 0.5;\n\t\t}\n\t\tpart Vehicle {\n\t\t\tattribute mass: 0;\n\t\t\tattribute gear: 0;\n\t\t\tattribute acceleratorPosition: 0.0;\n\t\t}\n\t\tpart Engine {\n\t\t\tattribute power: 0;\n\t\t}\n\t\tpart Driver {\n\t\t\tattribute name: '';\n\t\t}\n\t}\n}\n––––– YOUR TURN –––––\n\nInput Requirement:\nThe system shall be able to display a list of all available vehicles in the system, including their make, model, and year. The system shall also be able to display the details of a specific vehicle, including its make, model, year, and engine type. The system shall be able to add a new vehicle to the system, including its make, model, year, and engine type. The system shall be able to remove a vehicle from the",
    "package 'Vehicle' {\n\tattribute def Mass;\n\tattribute def GearPosition;\n\tattribute def ThrottlePedalPosition;\n\tattribute def Driver;\n\tattribute def Engine;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tattribute mass: Mass;\n\t\t\tattribute gearPosition: GearPosition;\n\t\t\tattribute throttlePedalPosition: ThrottlePedalPosition;\n\t\t\tattribute driver: Driver;\n\t\t\tattribute engine: Engine;\n\t\t\tpart timeSlice1 {\n\t\t\t\tattribute mass = 2000;\n\t\t\t\tattribute gearPosition = 'Neutral';\n\t\t\t\tattribute throttlePedalPosition = 0;\n\t\t\t\tattribute driver = 'Alice';\n\t\t\t}\n\t\t\tpart timeSlice2 {\n\t\t\t\tattribute mass = 1500;\n\t\t\t\tattribute gearPosition = 'Second';\n\t\t\t\tattribute throttlePedalPosition = 0.5;\n\t\t\t\tattribute driver = 'Bob';\n\t\t\t}\n\t\t}\n\t}\n}\n––––– YOUR TURN –––––\n\nInput Requirement:\nThe system is designed to model a simple banking system, which allows users to create accounts, deposit and withdraw money, and transfer funds between accounts. The system also supports the expression and tracking of account balances and transaction history. The system has two types of users: administrators and regular users. Administr",
    "package 'Vehicle Mass Management' {\n\tattribute def Mass;\n\tattribute def Component;\n\tattribute def Composite;\n\tattribute def Simple;\n\tattribute def Vehicle;\n\tattribute def Engine;\n\tattribute def Transmission;\n\tattribute def Body;\n\tattribute def Subcomponent;\n\tattribute def TotalMass;\n\tattribute def ComponentMass;\n\tattribute def SubcomponentMass;\n\tattribute def EngineMass;\n\tattribute def TransmissionMass;\n\tattribute def BodyMass;\n\tattribute def SubcomponentMass;\n\tattribute def MassInfo;\n\tattribute def MassUnit;\n\tattribute def MassValue;\n\tattribute def MassUnit;\n\tattribute def MassValue;\n\tattribute def MassUnit;\n\tattribute def MassValue;\n\tattribute def MassUnit;\n\tattribute def MassValue;\n\tattribute def MassUnit;\n\tattribute def MassValue;\n\tattribute def MassUnit;\n\tattribute def MassValue;\n\tattribute def MassUnit;\n\tattribute def MassValue;\n\tattribute def MassUnit;\n\tattribute def MassValue;\n\tattribute def MassUnit;\n\tattribute def MassValue;\n\tattribute def MassUnit;\n\tattribute def MassValue;\n\tattribute def MassUnit;\n\tattribute def MassValue;\n\tattribute def MassUnit;\n\tattribute def MassValue;\n\tattribute def MassUnit;\n\tattribute def",
    "package 'Vehicle Mass Management' {\n\tattribute def Mass;\n\tattribute def SerialNumber;\n\tattribute def VIN;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tattribute def mass: Mass;\n\t\t\tattribute def vin: VIN;\n\t\t\tpart context {\n\t\t\t\tpart component {\n\t\t\t\t\tattribute def mass: Mass;\n\t\t\t\t\tattribute def serialNumber: SerialNumber;\n\t\t\t\t\tpart context {\n\t\t\t\t\t\tpart subComponent {\n\t\t\t\t\t\t\tattribute def mass: Mass;\n\t\t\t\t\t\t\tattribute def serialNumber: SerialNumber;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tperform vehicleMassManagement {\n\t\t\t\tin mass = mass;\n\t\t\t\tin vin = vin;\n\t\t\t\tin components = component;\n\t\t\t}\n\t\t}\n\t\tpart vehicleMassManagement {\n\t\t\tperform calculateTotalMass {\n\t\t\t\tin mass = vehicle.mass;\n\t\t\t\tin components = vehicle.component;\n\t\t\t\tout totalMass = totalMass;\n\t\t\t}\n\t\t\tperform filterMass {\n\t\t\t\tin mass = vehicle.mass;\n\t\t\t\tin components = vehicle.component;\n\t\t\t\tin threshold = threshold;\n\t\t\t\tout filteredMass = filteredMass;\n\t\t\t}\n\t\t}\n\t}\n\taction vehicleMassManagement {\n\t\taction calculateTotalMass { in mass; in components; out totalMass; }\n\t\tsuccession flow massFlow from calculateTotalMass.totalMass",
    "package 'MassAggregation' {\n\tattribute def simpleMass;\n\tattribute def totalMass;\n\tpart context {\n\t\tpart simpleThing {\n\t\t\tattribute simpleMass;\n\t\t\tattribute totalMass = simpleMass;\n\t\t}\n\t\tpart compositeThing {\n\t\t\tattribute simpleMass;\n\t\t\tattribute totalMass;\n\t\t\tpart subcomponents {\n\t\t\t\tpart subcomponent {\n\t\t\t\t\tattribute simpleMass;\n\t\t\t\t\tattribute totalMass;\n\t\t\t\t}\n\t\t\t}\n\t\t\tattribute totalMass = simpleMass + subcomponents.totalMass;\n\t\t}\n\t}\n} \n––––– YOUR TURN –––––\n\nInput Requirement:\nThe system shall be able to automatically generate a report that includes the total number of components, the total mass of all components, and the total volume of all components. The report shall be generated at the end of each production cycle.\n\nOutput Model:\npackage 'ProductionReporting' {\n\tattribute def componentCount;\n\tattribute def totalMass;\n\tattribute def totalVolume;\n\tpart context {\n\t\tpart productionCycle {\n\t\t\tperform generateReport {\n\t\t\t\tout componentCount = componentCount;\n\t\t\t\tout totalMass = totalMass;\n\t\t\t\tout totalVolume = totalVolume;\n\t\t\t}\n\t\t}\n\t\tpart component {\n\t\t\tattribute componentCount;\n\t\t\tattribute totalMass;\n",
    "package 'MassAggregation' {\n\tattribute def Mass;\n\tattribute def Subcomponent;\n\tattribute def MinMassThreshold;\n\tpart context {\n\t\tpart object {\n\t\t\tattribute def basicMass: Mass;\n\t\t\tattribute def subcomponents: Subcomponent[];\n\t\t\tperform massAggregation.calculateTotalMass {\n\t\t\t\tin basicMass = basicMass;\n\t\t\t\tin subcomponents = subcomponents;\n\t\t\t\tout totalMass = totalMass;\n\t\t\t}\n\t\t}\n\t\tpart massAggregation {\n\t\t\tperform massAggregation.calculateTotalMass {\n\t\t\t\tin basicMass: Mass;\n\t\t\t\tin subcomponents: Subcomponent[];\n\t\t\t\tout totalMass: Mass;\n\t\t\t}\n\t\t\tperform massAggregation.filterSubcomponents {\n\t\t\t\tin subcomponents: Subcomponent[];\n\t\t\t\tin minMassThreshold: Mass;\n\t\t\t\tout filteredSubcomponents: Subcomponent[];\n\t\t\t}\n\t\t\tperform massAggregation.aggregateMass {\n\t\t\t\tin basicMass: Mass;\n\t\t\t\tin filteredSubcomponents: Subcomponent[];\n\t\t\t\tout totalMass: Mass;\n\t\t\t}\n\t\t}\n\t}\n\taction massAggregation {\n\t\taction calculateTotalMass { in basicMass: Mass; in subcomponents: Subcomponent[]; out totalMass: Mass; }\n\t\taction filterSubcomponents { in subcomponents: Subcomponent[];",
    "package 'Vehicle Dynamics' {\n\tattribute def PowerOutput;\n\tattribute def Acceleration;\n\tattribute def Speed;\n\tattribute def Position;\n\tattribute def AvailablePower;\n\tattribute def EffectivePower;\n\tattribute def Mass;\n\tattribute def DragCoefficient;\n\tattribute def FrictionCoefficient;\n\tattribute def WheelPower;\n\tattribute def Time;\n\tattribute def Displacement;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tperform calculateAvailablePower {\n\t\t\t\tin wheelPower, dragCoefficient, frictionCoefficient, mass;\n\t\t\t\tout availablePower;\n\t\t\t}\n\t\t\tperform calculateAcceleration {\n\t\t\t\tin effectivePower, mass, speed;\n\t\t\t\tout acceleration;\n\t\t\t}\n\t\t\tperform calculateSpeed {\n\t\t\t\tin acceleration, initialSpeed, time;\n\t\t\t\tout speed;\n\t\t\t}\n\t\t\tperform calculateDisplacement {\n\t\t\t\tin speed, time;\n\t\t\t\tout displacement;\n\t\t\t}\n\t\t}\n\t}\n\taction calculateAvailablePower {\n\t\toperation calculateAvailablePowerOp {\n\t\t\tin wheelPower, dragCoefficient, frictionCoefficient, mass;\n\t\t\tout availablePower;\n\t\t}\n\t}\n\taction calculateAcceleration {\n\t\toperation calculateAccelerationOp {\n\t\t\tin effectivePower, mass, speed;\n\t\t\tout acceleration;\n\t\t}\n\t}\n\taction calculateSpeed {\n\t\toperation calculateSpeedOp {\n\t\t",
    "package 'Vehicle Dynamics Simulator' {\n\tattribute def Vehicle;\n\tattribute def TimeStep;\n\tattribute def AerodynamicDragCoefficient;\n\tattribute def RollingResistanceCoefficient;\n\tattribute def WheelEndOutputPower;\n\tattribute def TotalVehicleMass;\n\tattribute def InitialSpeed;\n\tattribute def InitialPosition;\n\tattribute def AvailableDrivingPower;\n\tattribute def VehicleAcceleration;\n\tattribute def VehicleSpeed;\n\tattribute def VehiclePosition;\n\tpart context {\n\t\tpart user {\n\t\t\tport userParamsPort: UserParamsPort;\n\t\t\tperform vehicleDynamicsSimulator.computeVehicleDynamics {\n\t\t\t\tin userParams = userParamsPort.userParams;\n\t\t\t}\n\t\t}\n\t\tinterface userToSimulator connect user.userParamsPort to simulator.userParamsPort {\n\t\t\tref flow references vehicleDynamicsSimulator.userParamsFlow\n\t\t\t\tfrom source.userParams to target.userParams; \n\t\t}\n\t\tpart vehicleDynamicsSimulator {\n\t\t\tport userParamsPort: ~UserParamsPort;\n\t\t\tperform vehicleDynamicsSimulator.determineAvailableDrivingPower {\n\t\t\t\tin userParams = userParamsPort.userParams;\n\t\t\t\tout availableDrivingPower = availableDrivingPowerPort.availableDrivingPower;\n\t\t\t}\n\t\t\tport availableDrivingPowerPort: AvailableDrivingPowerPort;\n\t\t\tperform vehicleDynamics",
    "package 'Vehicle Dynamics' {\n\tattribute def VehicleMass;\n\tattribute def WheelPower;\n\tattribute def AerodynamicDragCoefficient;\n\tattribute def RollingResistanceCoefficient;\n\tattribute def InitialSpeed;\n\tattribute def InitialPosition;\n\tattribute def TimeStep;\n\tattribute def VehicleSpeed;\n\tattribute def VehiclePosition;\n\tattribute def VehicleAcceleration;\n\tattribute def VehicleDisplacement;\n\tattribute def AirResistance;\n\tattribute def FrictionalResistance;\n\tpart context {\n\t\tpart user {\n\t\t\tport userInputPort: UserInputPort;\n\t\t\tperform vehicleDynamics.computeVehicleDynamics {\n\t\t\t\tin vehicleMass = userInputPort.vehicleMass;\n\t\t\t\tin wheelPower = userInputPort.wheelPower;\n\t\t\t\tin aerodynamicDragCoefficient = userInputPort.aerodynamicDragCoefficient;\n\t\t\t\tin rollingResistanceCoefficient = userInputPort.rollingResistanceCoefficient;\n\t\t\t\tin initialSpeed = userInputPort.initialSpeed;\n\t\t\t\tin initialPosition = userInputPort.initialPosition;\n\t\t\t\tin timeStep = userInputPort.timeStep;\n\t\t\t}\n\t\t}\n\t\tpart vehicleDynamics {\n\t\t\tport userInputPort: ~UserInputPort;\n\t\t\tperform vehicleDynamics.updateVehicleStates {\n\t\t\t\tin vehicleMass = userInputPort.vehicleMass;\n\t\t\t\tin wheelPower = userInputPort.wheelPower;\n\t\t\t\tin aerodynamicDragCoefficient",
    "package 'Vehicle Dynamics' {\n\tattribute def InitialPosition;\n\tattribute def InitialVelocity;\n\tattribute def VehicleMass;\n\tattribute def WheelEndDrivePower;\n\tattribute def TimeInterval;\n\tattribute def DragCoefficient;\n\tattribute def FrictionCoefficient;\n\tattribute def Acceleration;\n\tattribute def FinalVelocity;\n\tattribute def FinalPosition;\n\tpart context {\n\t\tpart user {\n\t\t\tport inputPort: InputPort;\n\t\t\tperform vehicleDynamics.sendInput {\n\t\t\t\tin initialPosition = inputPort.initialPosition;\n\t\t\t\tin initialVelocity = inputPort.initialVelocity;\n\t\t\t\tin vehicleMass = inputPort.vehicleMass;\n\t\t\t\tin wheelEndDrivePower = inputPort.wheelEndDrivePower;\n\t\t\t\tin timeInterval = inputPort.timeInterval;\n\t\t\t\tin dragCoefficient = inputPort.dragCoefficient;\n\t\t\t\tin frictionCoefficient = inputPort.frictionCoefficient;\n\t\t\t}\n\t\t}\n\t\tpart vehicleDynamics {\n\t\t\tport inputPort: ~InputPort;\n\t\t\tperform vehicleDynamics.solveDynamicEquations {\n\t\t\t\tin initialPosition = inputPort.initialPosition;\n\t\t\t\tin initialVelocity = inputPort.initialVelocity;\n\t\t\t\tin vehicleMass = inputPort.vehicleMass;\n\t\t\t\tin wheelEndDrivePower = inputPort.wheelEndDrivePower;\n\t\t\t\tin timeInterval = inputPort.timeInterval;\n",
    "package 'Vehicle Mass Management' {\n\tattribute def MaxWeight;\n\tattribute def ChassisMass;\n\tattribute def EngineMass;\n\tattribute def GearboxMass;\n\tattribute def TotalMass;\n\tattribute def OverweightWarning;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tattribute ChassisMass;\n\t\t\tattribute EngineMass;\n\t\t\tattribute GearboxMass;\n\t\t\tperform vehicleMassManagement.calculateTotalMass {\n\t\t\t\tin chassisMass = ChassisMass;\n\t\t\t\tin engineMass = EngineMass;\n\t\t\t\tin gearboxMass = GearboxMass;\n\t\t\t\tout totalMass = TotalMass;\n\t\t\t}\n\t\t\tperform vehicleMassManagement.checkWeightLimit {\n\t\t\t\tin totalMass = TotalMass;\n\t\t\t\tout overweightWarning = OverweightWarning;\n\t\t\t}\n\t\t}\n\t\tpart vehicleMassManagement {\n\t\t\tattribute MaxWeight;\n\t\t\tperform vehicleMassManagement.calculateTotalMass {\n\t\t\t\tin maxWeight = MaxWeight;\n\t\t\t\tout totalMass = TotalMass;\n\t\t\t}\n\t\t\tperform vehicleMassManagement.checkWeightLimit {\n\t\t\t\tin maxWeight = MaxWeight;\n\t\t\t\tin totalMass = TotalMass;\n\t\t\t\tout overweightWarning = OverweightWarning;\n\t\t\t}\n\t\t}\n\t}\n\taction vehicleMassManagement {\n\t\taction calculateTotalMass { in maxWeight; out totalMass:",
    "package 'Vehicle Mass Budget' {\n\tattribute def Mass;\n\tattribute def MassLimit;\n\tattribute def Component;\n\tattribute def Engine;\n\tattribute def Transmission;\n\tpart context {\n\t\tpart user {\n\t\t\tport massInputPort: MassInputPort;\n\t\t\tperform massBudgeting.provideMass {\n\t\t\t\tin mass = massInputPort.mass;\n\t\t\t}\n\t\t}\n\t\tinterface userToVehicle connect user.massInputPort to vehicle.massInputPort {\n\t\t\tref flow references massFlow\n\t\t\t\tfrom source.mass to target.mass;\n\t\t}\n\t\tpart vehicle {\n\t\t\tport massInputPort: ~MassInputPort;\n\t\t\tattribute mass: Mass;\n\t\t\tattribute massLimit: MassLimit;\n\t\t\tattribute componentMass: Mass;\n\t\t\tattribute engineMass: Mass;\n\t\t\tattribute transmissionMass: Mass;\n\t\t\tperform massBudgeting.calculateTotalMass {\n\t\t\t\tin mass = massInputPort.mass;\n\t\t\t\tout mass = mass;\n\t\t\t}\n\t\t\tperform massBudgeting.checkMassLimit {\n\t\t\t\tin mass = mass;\n\t\t\t\tin massLimit = massLimit;\n\t\t\t\tout result: Result;\n\t\t\t}\n\t\t}\n\t\tpart massBudgeting {\n\t\t\tperform massBudgeting.provideMass {\n\t\t\t\tin mass: Mass;\n\t\t\t}\n\t\t\t",
    "package 'Vehicle Mass Management' {\n\tattribute def Mass;\n\tattribute def VehicleMassLimit;\n\tattribute def ChassisMass;\n\tattribute def EngineMass;\n\tattribute def TransmissionMass;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tattribute def totalMass: Mass;\n\t\t\tperform vehicleMassVerification.verifyVehicleMass {\n\t\t\t\tin chassisMass = chassis.chassisMass;\n\t\t\t\tin engineMass = engine.engineMass;\n\t\t\t\tin transmissionMass = transmission.transmissionMass;\n\t\t\t\tin vehicleMassLimit = vehicleMassLimit;\n\t\t\t\tout result = vehicleMassVerificationResult;\n\t\t\t}\n\t\t\tpart chassis {\n\t\t\t\tattribute def chassisMass: Mass;\n\t\t\t}\n\t\t\tpart engine {\n\t\t\t\tattribute def engineMass: Mass;\n\t\t\t}\n\t\t\tpart transmission {\n\t\t\t\tattribute def transmissionMass: Mass;\n\t\t\t}\n\t\t}\n\t\tpart vehicleMassVerification {\n\t\t\tattribute def vehicleMassVerificationResult: Boolean;\n\t\t\tperform vehicleMassVerification.verifyVehicleMass {\n\t\t\t\tin chassisMass: Mass;\n\t\t\t\tin engineMass: Mass;\n\t\t\t\tin transmissionMass: Mass;\n\t\t\t\tin vehicleMassLimit: Mass;\n\t\t\t\tout result: Boolean;\n\t\t\t}\n\t\t}\n\t}\n\taction vehicleMassVerification {\n\t\tsequence flow verifyVehicleMass from receiveMassData to verifyVehicleMass",
    "package 'Weight Management' {\n\tattribute def Weight;\n\tattribute def Component;\n\tattribute def TotalWeight;\n\tattribute def Warning;\n\tattribute def Restriction;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport weightPort: WeightPort;\n\t\t\tperform weightManagement.produceTotalWeight {\n\t\t\t\tin weight = weightPort.weight;\n\t\t\t}\n\t\t\tport weightPort: WeightPort;\n\t\t}\n\t\tpart weightManagement {\n\t\t\tport weightPort: ~WeightPort;\n\t\t\tperform weightManagement.checkWeightLimit {\n\t\t\t\tin weight = weightPort.weight;\n\t\t\t\tout warning = warningPort.warning;\n\t\t\t\tout restriction = restrictionPort.restriction;\n\t\t\t}\n\t\t\tport warningPort: WarningPort;\n\t\t\tport restrictionPort: RestrictionPort;\n\t\t}\n\t\tpart component {\n\t\t\tport weightPort: ~WeightPort;\n\t\t\tperform weightManagement.recordComponentWeight {\n\t\t\t\tin weight = weightPort.weight;\n\t\t\t}\n\t\t}\n\t}\n\taction weightManagement {\n\t\taction recordComponentWeight { in weight: Weight; }\n\t\tsuccession flow weightFlow from recordComponentWeight.weight to checkWeightLimit.weight;\n\t\taction checkWeightLimit { in weight: Weight; out warning: Warning; out restriction: Restriction; }\n\t}\n}\n––––– YOUR TURN –––––",
    "package 'Vehicle' {\n\tattribute def Mass;\n\tattribute def InitialVelocity;\n\tattribute def FinalVelocity;\n\tattribute def AppliedForce;\n\tattribute def Time;\n\tattribute def ChangeInVelocity;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tpart chassis {\n\t\t\t\tattribute mass: Mass;\n\t\t\t}\n\t\t\tpart engine {\n\t\t\t\tattribute mass: Mass;\n\t\t\t}\n\t\t\tpart transmission {\n\t\t\t\tattribute mass: Mass;\n\t\t\t}\n\t\t\tperform vehicleDynamics {\n\t\t\t\tin initialVelocity = initialVelocity;\n\t\t\t\tin mass = chassis.mass + engine.mass + transmission.mass;\n\t\t\t\tin appliedForce = appliedForce;\n\t\t\t\tin time = time;\n\t\t\t\tout changeInVelocity = changeInVelocity;\n\t\t\t}\n\t\t}\n\t\tinterface vehicleToVehicle connect vehicle.vehicleDynamics to vehicle.vehicleDynamics {\n\t\t\tref flow references vehicleDynamicsFlow\n\t\t\t\tfrom source.vehicleDynamics to target.vehicleDynamics; \n\t\t}\n\t}\n\taction vehicleDynamics {\n\t\tparameter mass > 0;\n\t\tparameter force = mass * acceleration;\n\t\tparameter changeInVelocity = force / mass * time;\n\t\tparameter acceleration = appliedForce / mass;\n\t}\n} \n––––– YOUR TURN –––––\n\nInput Requirement:\nThe system is designed",
    "package 'VehicleMaintenance' {\n\tattribute def Vehicle;\n\tattribute def MaintenanceSchedule;\n\tattribute def Temperature;\n\tattribute def VehicleStatus;\n\tattribute def MaintenanceInterval;\n\tattribute def MaxAllowedTemperature;\n\tattribute def MaintenanceDuration;\n\tattribute def MaintenanceStartTime;\n\tattribute def PreviousHealthyStateEndTime;\n\tattribute def ActualMaintenanceStartTime;\n\tattribute def ScheduledMaintenanceTime;\n\tattribute def NextMaintenanceTime;\n\tattribute def MaintenanceTimeElapsed;\n\tattribute def MaintenanceInitiated;\n\tattribute def MaintenanceCompleted;\n\tattribute def VehicleHealthStatus;\n\tattribute def MaintenanceStatus;\n\tattribute def TimeElapsed;\n\tattribute def TimeElapsedSinceLastMaintenance;\n\tattribute def TimeElapsedSincePreviousHealthyState;\n\tattribute def TimeElapsedSinceScheduledMaintenance;\n\tattribute def TimeElapsedSinceMaintenanceStart;\n\tattribute def TimeElapsedSinceMaintenanceEnd;\n\tattribute def TimeElapsedSincePreviousMaintenance;\n\tattribute def TimeElapsedSinceVehicleStatusChange;\n\tattribute def TimeElapsedSinceVehicleHealthStatusChange;\n\tattribute def TimeElapsedSinceMaintenanceStatusChange;\n\tattribute def TimeElapsedSinceMaintenanceInitiated;\n\tattribute def TimeElapsedSinceMaintenanceCompleted;\n\tattribute def TimeElapsedSinceScheduledMaintenanceTime;\n\tattribute def TimeElapsedSinceActualMaintenanceStartTime;\n\tattribute def TimeElapsedSincePreviousHealthyStateEndTime",
    "package 'Vehicle' {\n\tattribute def MaxMass;\n\tattribute def FuelMass;\n\tattribute def EngineSpeed;\n\tattribute def EngineTorque;\n\tattribute def ClutchTorque;\n\tattribute def TransmissionTorque;\n\tattribute def DriveSystemTorque;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tattribute def mass: Real;\n\t\t\tattribute def fuelMass: Real;\n\t\t\tperform massLimitCheck {\n\t\t\t\tin maxMass = MaxMass;\n\t\t\t\tin fuelMass = FuelMass;\n\t\t\t\tout mass = mass;\n\t\t\t}\n\t\t\tperform engineTorqueCalculation {\n\t\t\t\tin engineSpeed = EngineSpeed;\n\t\t\t\tout engineTorque = EngineTorque;\n\t\t\t}\n\t\t\tperform clutchTorqueCalculation {\n\t\t\t\tin engineTorque = EngineTorque;\n\t\t\t\tin clutchTorque = ClutchTorque;\n\t\t\t\tout transmissionTorque = TransmissionTorque;\n\t\t\t}\n\t\t\tperform driveSystemTorqueCalculation {\n\t\t\t\tin transmissionTorque = TransmissionTorque;\n\t\t\t\tout driveSystemTorque = DriveSystemTorque;\n\t\t\t}\n\t\t}\n\t\tpart engine {\n\t\t\tattribute def speed: Real;\n\t\t\tattribute def torque: Real;\n\t\t\tperform engineTorqueCalculation {\n\t\t\t\tin speed = EngineSpeed;\n",
    "package 'Vehicle' {\n\tattribute def maxMassFullTank;\n\tattribute def maxMassEmptyTank;\n\tattribute def engineTorque;\n\tattribute def speed;\n\tattribute def clutchInterface;\n\tattribute def transmission;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tattribute maxMassFullTank = 2000;\n\t\t\tattribute maxMassEmptyTank = 1500;\n\t\t\tport enginePort: ~EnginePort;\n\t\t\tperform vehicleMassControl.produceMass {\n\t\t\t\tin engineTorque = enginePort.engineTorque;\n\t\t\t\tin speed = speedPort.speed;\n\t\t\t\tout mass = vehicleMass;\n\t\t\t}\n\t\t\tport speedPort: ~SpeedPort;\n\t\t\tperform vehicleMassControl.produceDryMass {\n\t\t\t\tout dryMass = vehicleMassControl.dryMass;\n\t\t\t}\n\t\t\tpart engine {\n\t\t\t\tport enginePort: EnginePort;\n\t\t\t\tattribute engineTorque;\n\t\t\t\tperform powertrainInterface.produceTorque {\n\t\t\t\t\tin speed = speedPort.speed;\n\t\t\t\t\tout torque = engineTorque;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart transmission {\n\t\t\t\tport transmissionPort: ~TransmissionPort;\n\t\t\t\tperform powertrainInterface.produceClutchInterface {\n\t\t\t\t\tin torque = enginePort.engineTorque;\n\t\t\t\t\tout clutchInterface = transmissionPort.clutchInterface",
    "package 'Vehicle' {\n\tattribute def Mass;\n\tattribute def EngineTorque;\n\tattribute def EngineSpeed;\n\tattribute def ClutchInterface;\n\tattribute def TransmissionSystem;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tattribute mass: Mass;\n\t\t\tattribute emptyMass: Mass;\n\t\t\tattribute maxMass: Mass;\n\t\t\tattribute maxEmptyMass: Mass;\n\t\t\tattribute maxMassValue: <<value=2000>>2000;\n\t\t\tattribute maxEmptyMassValue: <<value=1500>>1500;\n\t\t\tperform vehiclePerformance.produceVehiclePerformance {\n\t\t\t\tin mass = mass;\n\t\t\t\tin emptyMass = emptyMass;\n\t\t\t}\n\t\t\tpart engine {\n\t\t\t\tattribute torque: EngineTorque;\n\t\t\t\tattribute speed: EngineSpeed;\n\t\t\t\tperform enginePerformance.produceEnginePerformance {\n\t\t\t\t\tin torque = torque;\n\t\t\t\t\tin speed = speed;\n\t\t\t\t}\n\t\t\t\tpart transmission {\n\t\t\t\t\tattribute transmissionSystem: TransmissionSystem;\n\t\t\t\t\tattribute clutchInterface: ClutchInterface;\n\t\t\t\t\tperform vehiclePerformance.produceTransmissionPerformance {\n\t\t\t\t\t\tin transmissionSystem = transmissionSystem;\n\t\t\t\t\t\tin clutchInterface = clutchInterface;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpart vehiclePerformance {\n\t\t\tperform produceVehiclePerformance {\n\t\t\t\tout",
    "package 'Vehicle' {\n\tattribute def MassLimit;\n\tattribute def CurbMass;\n\tattribute def FuelMass;\n\tattribute def EngineTorque;\n\tattribute def ClutchTorque;\n\tattribute def GearboxTorque;\n\tattribute def VehicleMass;\n\tattribute def FuelLevel;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tattribute def mass: VehicleMass;\n\t\t\tattribute def fuelLevel: FuelLevel;\n\t\t\tattribute def curbMass: CurbMass;\n\t\t\tattribute def fuelMass: FuelMass;\n\t\t\tperform vehicleMassControl.produceVehicleMass {\n\t\t\t\tin curbMass = curbMass;\n\t\t\t\tin fuelMass = fuelMass;\n\t\t\t\tout mass = mass;\n\t\t\t}\n\t\t\tperform powerTransmission.produceClutchTorque {\n\t\t\t\tin engineTorque = engineTorque;\n\t\t\t\tin clutchTorque = clutchTorque;\n\t\t\t\tout gearboxTorque = gearboxTorque;\n\t\t\t}\n\t\t}\n\t\tpart vehicleMassControl {\n\t\t\tattribute def massLimit: MassLimit;\n\t\t\tattribute def maxMassFullTank: 2000;\n\t\t\tattribute def maxMassEmptyTank: 1500;\n\t\t\tperform vehicleMassControl.produceVehicleMass {\n\t\t\t\tin curbMass = vehicle.curbMass;\n\t\t\t\tin fuel",
    "package 'Vehicle Performance Analysis' {\n\tattribute def Vehicle;\n\tattribute def DrivingCycle;\n\tattribute def EnginePower;\n\tattribute def Acceleration;\n\tattribute def Position;\n\tattribute def FuelEconomy;\n\tattribute def EnergyConsumptionTarget;\n\tattribute def ComplianceVerification;\n\tattribute def ConfigurationOptions;\n\tpart context {\n\t\tpart user {\n\t\t\tport vehicleAttributesPort: VehicleAttributesPort;\n\t\t\tport drivingCyclePort: DrivingCyclePort;\n\t\t\tperform vehiclePerformanceAnalysis.sendVehicleAttributes {\n\t\t\t\tin vehicleAttributes = vehicleAttributesPort.vehicleAttributes;\n\t\t\t}\n\t\t\tperform vehiclePerformanceAnalysis.sendDrivingCycle {\n\t\t\t\tin drivingCycle = drivingCyclePort.drivingCycle;\n\t\t\t}\n\t\t\tperform vehiclePerformanceAnalysis.calculateEnginePower {\n\t\t\t\tin vehicleAttributes = vehicleAttributesPort.vehicleAttributes;\n\t\t\t\tin drivingCycle = drivingCyclePort.drivingCycle;\n\t\t\t}\n\t\t\tperform vehiclePerformanceAnalysis.calculateAcceleration {\n\t\t\t\tin vehicleAttributes = vehicleAttributesPort.vehicleAttributes;\n\t\t\t\tin drivingCycle = drivingCyclePort.drivingCycle;\n\t\t\t}\n\t\t\tperform vehiclePerformanceAnalysis.calculatePosition {\n\t\t\t\tin vehicleAttributes = vehicleAttributesPort.vehicleAttributes;\n\t\t\t\tin drivingCycle = drivingCyclePort.drivingCycle;\n\t\t\t}\n\t\t\tperform vehiclePerformanceAnalysis.calculateFuelEconomy {\n\t\t\t",
    "package 'Vehicle Fuel Economy Simulator' {\n\tattribute def UrbanDrivingScenario;\n\tattribute def HighwayDrivingScenario;\n\tattribute def VehicleParameters;\n\tattribute def DrivingTrajectory;\n\tattribute def SpeedVariation;\n\tattribute def WheelPower;\n\tattribute def Acceleration;\n\tattribute def EnergyConsumption;\n\tattribute def EnginePowerDemand;\n\tattribute def FuelConsumption;\n\tattribute def FuelEconomy;\n\tpart context {\n\t\tpart user {\n\t\t\tport urbanDrivingScenarioPort: UrbanDrivingScenarioPort;\n\t\t\tport highwayDrivingScenarioPort: HighwayDrivingScenarioPort;\n\t\t\tport vehicleParametersPort: VehicleParametersPort;\n\t\t\tport drivingTrajectoryPort: DrivingTrajectoryPort;\n\t\t\tport speedVariationPort: SpeedVariationPort;\n\t\t\tperform simulationAnalysis.sendUrbanDrivingScenario {\n\t\t\t\tin urbanDrivingScenario = urbanDrivingScenarioPort.urbanDrivingScenario;\n\t\t\t}\n\t\t\tperform simulationAnalysis.sendHighwayDrivingScenario {\n\t\t\t\tin highwayDrivingScenario = highwayDrivingScenarioPort.highwayDrivingScenario;\n\t\t\t}\n\t\t\tperform simulationAnalysis.sendVehicleParameters {\n\t\t\t\tin vehicleParameters = vehicleParametersPort.vehicleParameters;\n\t\t\t}\n\t\t\tperform simulationAnalysis.sendDrivingTrajectory {\n\t\t\t\tin drivingTrajectory = drivingTrajectoryPort.drivingTrajectory;\n\t\t\t}\n\t\t",
    "package 'EngineSelector' {\n\tattribute def EngineType;\n\tattribute def PerformanceIndicators;\n\tattribute def EvaluationFunction;\n\tattribute def OptimalEngine;\n\tport def EngineTypePort {\n\t\tin engineType: EngineType;\n\t}\n\tport def PerformanceIndicatorsPort {\n\t\tin performanceIndicators: PerformanceIndicators;\n\t}\n\tport def EvaluationFunctionPort {\n\t\tin evaluationFunction: EvaluationFunction;\n\t}\n\tport def OptimalEnginePort {\n\t\tout optimalEngine: OptimalEngine;\n\t}\n\tpart context {\n\t\tpart engineSelector {\n\t\t\tport engineTypePort: EngineTypePort;\n\t\t\tport performanceIndicatorsPort: PerformanceIndicatorsPort;\n\t\t\tport evaluationFunctionPort: EvaluationFunctionPort;\n\t\t\tport optimalEnginePort: OptimalEnginePort;\n\t\t\tperform engineSelection {\n\t\t\t\tin engineType = engineTypePort.engineType;\n\t\t\t\tin performanceIndicators = performanceIndicatorsPort.performanceIndicators;\n\t\t\t\tin evaluationFunction = evaluationFunctionPort.evaluationFunction;\n\t\t\t\tout optimalEngine = optimalEnginePort.optimalEngine;\n\t\t\t}\n\t\t}\n\t\tpart engine {\n\t\t\tport engineTypePort: ~EngineTypePort;\n\t\t\tport performanceIndicatorsPort: ~PerformanceIndicatorsPort;\n\t\t\tperform enginePerformance {\n\t\t\t\tin engineType = engineTypePort.engine",
    "package 'Vehicle Quality Check' {\n\tattribute def CurbWeight;\n\tattribute def EvaluationResult;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tattribute def curbWeight: CurbWeight;\n\t\t\tperform vehicleWeightCheck.collectWeightData {\n\t\t\t\tout weightData = vehicleWeightData;\n\t\t\t}\n\t\t}\n\t\tpart vehicleWeightCheck {\n\t\t\tattribute def weightData: VehicleWeightData;\n\t\t\tperform vehicleWeightCheck.processWeightData {\n\t\t\t\tin weightData = weightData;\n\t\t\t\tout evaluationResult = evaluationResult;\n\t\t\t}\n\t\t\tperform vehicleWeightCheck.evaluateWeight {\n\t\t\t\tin evaluationResult = evaluationResult;\n\t\t\t\tout evaluationResult = evaluationResult;\n\t\t\t}\n\t\t}\n\t\tpart vehicleWeightData {\n\t\t\tattribute def weightData: VehicleWeightData;\n\t\t}\n\t}\n\taction vehicleWeightCheck {\n\t\taction collectWeightData { out weightData: VehicleWeightData; }\n\t\tsuccession flow weightFlow from collectWeightData.weightData to processWeightData.weightData;\n\t\taction processWeightData { in weightData: VehicleWeightData; out evaluationResult: EvaluationResult; }\n\t\tsuccession flow evaluationFlow from processWeightData.evaluationResult to evaluateWeight.evaluationResult;\n\t\taction evaluateWeight { in evaluationResult: EvaluationResult; out",
    "package 'MassVerification' {\n\tattribute def Mass;\n\tattribute def Vehicle;\n\tattribute def WeighingEquipment;\n\tattribute def MassVerificationUnit;\n\tattribute def Qualified;\n\tattribute def Unqualified;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport massPort: MassPort;\n\t\t\tperform massVerification.processMass {\n\t\t\t\tin mass = massPort.mass;\n\t\t\t}\n\t\t}\n\t\tpart weighingEquipment {\n\t\t\tport massPort: ~MassPort;\n\t\t\tperform massVerification.produceMassReading {\n\t\t\t\tout mass = massPort.mass;\n\t\t\t}\n\t\t}\n\t\tpart massVerificationUnit {\n\t\t\tport massPort: ~MassPort;\n\t\t\tperform massVerification.evaluateMass {\n\t\t\t\tin mass = massPort.mass;\n\t\t\t\tout qualified = qualifiedPort.qualified;\n\t\t\t}\n\t\t\tport qualifiedPort: QualifiedPort;\n\t\t}\n\t}\n\taction massVerification {\n\t\taction processMass { in mass: Mass; }\n\t\tsuccession flow massFlow from produceMassReading.mass to evaluateMass.mass;\n\t\taction produceMassReading { out mass: Mass; }\n\t\tsuccession flow qualifiedFlow from evaluateMass.qualified to qualifiedPort.qualified;\n\t\taction evaluateMass { in mass: Mass; out qualified: Qualified; }\n\t}\n}\n––––– YOUR",
    "package 'Transportation System' {\n\tattribute def VehicleCapacity;\n\tattribute def Safety;\n\tattribute def Comfort;\n\tattribute def EnvironmentalSustainability;\n\tattribute def InfrastructureCompatibility;\n\tattribute def RideExperience;\n\tattribute def Convenience;\n\tattribute def TaskCompletion;\n\tattribute def HumanNeeds;\n\tattribute def DailyTransportation;\n\tattribute def DriverNeeds;\n\tattribute def PassengerNeeds;\n\tattribute def Vehicle;\n\tattribute def Driver;\n\tattribute def Passenger;\n\tattribute def Infrastructure;\n\tattribute def Environment;\n\tattribute def Task;\n\tattribute def Ride;\n\tattribute def VehicleOperation;\n\tattribute def VehicleControl;\n\tattribute def VehicleSafety;\n\tattribute def VehicleComfort;\n\tattribute def VehicleEnvironmentalSustainability;\n\tattribute def VehicleInfrastructureCompatibility;\n\tattribute def VehicleRideExperience;\n\tattribute def VehicleConvenience;\n\tattribute def VehicleTaskCompletion;\n\tattribute def VehicleHumanNeeds;\n\tattribute def VehicleDailyTransportation;\n\tattribute def VehicleDriverNeeds;\n\tattribute def VehiclePassengerNeeds;\n\tattribute def VehicleVehicleOperation;\n\tattribute def VehicleVehicleControl;\n\tattribute def VehicleVehicleSafety;\n\tattribute def VehicleVehicleComfort;\n\tattribute def VehicleVehicleEnvironmentalSustainability;\n\tattribute def VehicleVehicleInfrastructureCompatibility;\n\tattribute def VehicleVehicleRide",
    "package 'Transportation System' {\n\tattribute def Vehicle;\n\tattribute def Driver;\n\tattribute def Passenger;\n\tattribute def GasStation;\n\tattribute def Destination;\n\tattribute def StartingPoint;\n\tattribute def EnvironmentalConditions;\n\tattribute def Fuel;\n\tattribute def RefuelCmd;\n\tattribute def ExitCmd;\n\tattribute def EnterCmd;\n\tattribute def OperateCmd;\n\tattribute def NavigationCmd;\n\tattribute def SafetyCmd;\n\tattribute def ComfortCmd;\n\tattribute def ConvenienceCmd;\n\tattribute def PrimaryNeeds;\n\tattribute def DailyTransportation;\n\tattribute def TransportationScenarios;\n\tattribute def TransportationProcess;\n\tattribute def VehicleCapacity;\n\tattribute def VehicleType;\n\tattribute def VehicleSize;\n\tattribute def VehicleWeight;\n\tattribute def VehicleSpeed;\n\tattribute def VehicleAcceleration;\n\tattribute def VehicleBraking;\n\tattribute def VehicleStability;\n\tattribute def VehicleSafety;\n\tattribute def VehicleComfort;\n\tattribute def VehicleConvenience;\n\tattribute def VehicleNavigation;\n\tattribute def VehicleRefueling;\n\tattribute def VehicleExiting;\n\tattribute def VehicleEntering;\n\tattribute def VehicleOperating;\n\tattribute def VehicleSafetyFeatures;\n\tattribute def VehicleComfortFeatures;\n\tattribute def VehicleConvenienceFeatures;\n\tattribute def VehicleNavigationFeatures;\n\t",
    "package 'VehicleConfig' {\n\tattribute def EngineType;\n\tattribute def TransmissionType;\n\tattribute def CylinderCount;\n\tattribute def EngineDiameter;\n\tattribute def TransmissionType;\n\tattribute def EngineType;\n\tattribute def CylinderCount;\n\tattribute def EngineDiameter;\n\tattribute def TransmissionType;\n\tattribute def EngineType;\n\tattribute def CylinderCount;\n\tattribute def EngineDiameter;\n\tattribute def TransmissionType;\n\tattribute def EngineType;\n\tattribute def CylinderCount;\n\tattribute def EngineDiameter;\n\tattribute def TransmissionType;\n\tattribute def EngineType;\n\tattribute def CylinderCount;\n\tattribute def EngineDiameter;\n\tattribute def TransmissionType;\n\tattribute def EngineType;\n\tattribute def CylinderCount;\n\tattribute def EngineDiameter;\n\tattribute def TransmissionType;\n\tattribute def EngineType;\n\tattribute def CylinderCount;\n\tattribute def EngineDiameter;\n\tattribute def TransmissionType;\n\tattribute def EngineType;\n\tattribute def CylinderCount;\n\tattribute def EngineDiameter;\n\tattribute def TransmissionType;\n\tattribute def EngineType;\n\tattribute def CylinderCount;\n\tattribute def EngineDiameter;\n\tattribute def TransmissionType;\n\tattribute def EngineType;\n\tattribute def CylinderCount;\n\tattribute def EngineDiameter;\n",
    "package 'Configurable Engine' {\n\tattribute def CylinderQuantity;\n\tattribute def CylinderDiameter;\n\tattribute def EngineVariant;\n\tpart context {\n\t\tpart engine {\n\t\t\tattribute CylinderQuantity;\n\t\t\tattribute CylinderDiameter;\n\t\t\tattribute EngineVariant;\n\t\t\tpart cylinder {\n\t\t\t\tattribute CylinderDiameter;\n\t\t\t}\n\t\t\tassociation engineToCylinder {\n\t\t\t\trole engine {\n\t\t\t\t\tattribute CylinderQuantity;\n\t\t\t\t}\n\t\t\t\trole cylinder {\n\t\t\t\t\tattribute CylinderDiameter;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpart engineVariant {\n\t\t\tattribute EngineVariant;\n\t\t\tassociation engineVariantToEngine {\n\t\t\t\trole engineVariant {\n\t\t\t\t\tattribute EngineVariant;\n\t\t\t\t}\n\t\t\t\trole engine {\n\t\t\t\t\tattribute CylinderQuantity;\n\t\t\t\t\tattribute CylinderDiameter;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tclass EngineVariant {\n\t\tattribute EngineVariant;\n\t}\n\tclass Cylinder {\n\t\tattribute CylinderDiameter;\n\t}\n\tclass Engine {\n\t\tattribute CylinderQuantity;\n\t\tattribute CylinderDiameter;\n\t\tattribute EngineVariant;\n\t}\n}\n––––– YOUR TURN –––––\n\nInput Requirement:\nThe system shall be able to display a list of available products, including their names, prices, and descriptions. The",
    "package 'Automotive Configuration Space' {\n\tattribute def Engine;\n\tattribute def Transmission;\n\tattribute def CylinderDiameter;\n\tenum EngineType {\n\t\tFOUR_CYLINDER,\n\t\tSIX_CYLINDER\n\t}\n\tenum TransmissionType {\n\t\tMANUAL,\n\t\tAUTOMATIC\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tattribute engine: Engine;\n\t\t\tattribute transmission: Transmission;\n\t\t\tattribute cylinderDiameter: CylinderDiameter;\n\t\t\tperform configureVehicle {\n\t\t\t\tin engine = engine;\n\t\t\t\tin transmission = transmission;\n\t\t\t\tin cylinderDiameter = cylinderDiameter;\n\t\t\t}\n\t\t}\n\t\tpart engine {\n\t\t\tattribute engineType: EngineType;\n\t\t\tattribute cylinderCount: Integer;\n\t\t\tperform configureEngine {\n\t\t\t\tin engineType = engineType;\n\t\t\t\tin cylinderCount = cylinderCount;\n\t\t\t}\n\t\t}\n\t\tpart transmission {\n\t\t\tattribute transmissionType: TransmissionType;\n\t\t\tperform configureTransmission {\n\t\t\t\tin transmissionType = transmissionType;\n\t\t\t}\n\t\t}\n\t}\n\taction configureVehicle {\n\t\tsequence flow configureVehicleFlow from configureEngine to configureTransmission;\n\t\tperform configureEngine {\n\t\t\tin engine = engine;\n\t\t\tin cylinderCount = engine.engineType == EngineType.FOUR_CY",
    "package 'System Assembly' {\n\tpackage 'Software Design' {\n\t\tattribute def MessageFormat;\n\t\tattribute def DataFormat;\n\t}\n\tpackage 'Computer Subsystem' {\n\t\tattribute def ComputerFunctionality;\n\t\tattribute def MessageFormat;\n\t\tattribute def DataFormat;\n\t\tport def MessagePort {\n\t\t\tin message: MessageFormat;\n\t\t}\n\t\tport def DataPort {\n\t\t\tin data: DataFormat;\n\t\t}\n\t\tpart context {\n\t\t\tpart computer {\n\t\t\t\tport messagePort: MessagePort;\n\t\t\t\tport dataPort: DataPort;\n\t\t\t\tperform softwareDesign.produceMessage {\n\t\t\t\t\tout message = messagePort.message;\n\t\t\t\t}\n\t\t\t\tperform softwareDesign.produceData {\n\t\t\t\t\tout data = dataPort.data;\n\t\t\t\t}\n\t\t\t}\n\t\t\tinterface computerToSoftware connect computer.messagePort to softwareDesign.messagePort {\n\t\t\t\tref flow references softwareDesign.messageFlow\n\t\t\t\t\tfrom source.message to target.message;\n\t\t\t}\n\t\t\tinterface computerToSoftware connect computer.dataPort to softwareDesign.dataPort {\n\t\t\t\tref flow references softwareDesign.dataFlow\n\t\t\t\t\tfrom source.data to target.data;\n\t\t\t}\n\t\t\tpart softwareDesign {\n\t\t\t\tport messagePort: ~MessagePort;\n\t\t\t\tport dataPort: ~DataPort;\n\t\t\t\tperform",
    "package 'Powertrain System' {\n\t// Add your SysML 2.0 model here\n} \n––––– YOUR TURN –––––\n\nInput Requirement:\nThe system shall be able to detect and respond to the presence of a person in the room. The system shall be able to detect the person's location and distance from the system. The system shall be able to track the person's movement and provide a warning if the person is approaching the system. The system shall be able to detect the person's identity and provide personalized information based on the person's identity.\n\nOutput Model:\npackage 'Presence Detection System' {\n\t// Add your SysML 2.0 model here\n} \n––––– YOUR TURN –––––\n\nInput Requirement:\nThe system shall be able to detect and respond to the presence of a person in the room. The system shall be able to detect the person's location and distance from the system. The system shall be able to track the person's movement and provide a warning if the person is approaching the system. The system shall be able to detect the person's identity and provide personalized information based on the person's identity. The system shall be able to communicate with other systems in the building to provide a comprehensive view of the building's occupancy",
    "package 'Powertrain' {\n\tattribute def Power;\n\tattribute def Torque;\n\tport def PowerPort {\n\t\tout power: Power;\n\t}\n\tport def TorquePort {\n\t\tout torque: Torque;\n\t}\n\tpart context {\n\t\tpart powertrain {\n\t\t\tport powerPort: ~PowerPort;\n\t\t\tport torquePort: ~TorquePort;\n\t\t\tperform powerGeneration.producePower {\n\t\t\t\tin power = powerPort.power;\n\t\t\t}\n\t\t\tperform torqueGeneration.produceTorque {\n\t\t\t\tin torque = torquePort.torque;\n\t\t\t}\n\t\t}\n\t\tpart powerGeneration {\n\t\t\tport powerPort: ~PowerPort;\n\t\t\tperform powerGeneration.producePower {\n\t\t\t\tin power = powerPort.power;\n\t\t\t}\n\t\t}\n\t\tpart torqueGeneration {\n\t\t\tport torquePort: ~TorquePort;\n\t\t\tperform torqueGeneration.produceTorque {\n\t\t\t\tin torque = torquePort.torque;\n\t\t\t}\n\t\t}\n\t}\n\taction powerGeneration {\n\t\taction producePower { in power: Power; }\n\t}\n\taction torqueGeneration {\n\t\taction produceTorque { in torque: Torque; }\n\t}\n\tallocates powertrain.powerPort to powerGeneration.powerPort;\n\tallocates powertrain.torquePort to torqueGeneration",
    "package 'VehicleFeatureAnnotation' {\n\tattribute def SafetyConfig;\n\tattribute def SecurityConfig;\n\tpart context {\n\t\tpart interior {\n\t\t\tpart seatBelt {\n\t\t\t\tattribute def SafetyFunction;\n\t\t\t\tattribute def ProtectionFunction;\n\t\t\t}\n\t\t\tpart frontSeat {\n\t\t\t\tattribute def SafetyFunction;\n\t\t\t\tattribute def ProtectionFunction;\n\t\t\t}\n\t\t\tpart driverAirbag {\n\t\t\t\tattribute def SafetyFunction;\n\t\t\t\tattribute def ProtectionFunction;\n\t\t\t}\n\t\t\tpart alarmSystem {\n\t\t\t\tattribute def SecurityFunction;\n\t\t\t\tattribute def ProtectionFunction;\n\t\t\t}\n\t\t}\n\t\tpart bodyAssembly {\n\t\t\tpart bodyShell {\n\t\t\t\tattribute def SafetyFunction;\n\t\t\t\tattribute def ProtectionFunction;\n\t\t\t}\n\t\t\tpart bumper {\n\t\t\t\tattribute def SafetyFunction;\n\t\t\t\tattribute def ProtectionFunction;\n\t\t\t}\n\t\t\tpart keylessEntryDevice {\n\t\t\t\tattribute def SecurityFunction;\n\t\t\t\tattribute def ProtectionFunction;\n\t\t\t}\n\t\t}\n\t}\n\taction annotateVehicle {\n\t\tsequence flow annotateInterior from interior to bodyAssembly;\n\t\tsequence flow annotateBody from bodyAssembly to annotateVehicle;\n\t}\n}\n––––– YOUR TURN –––––\n\nInput Requirement:\nThe system is a smart home automation system that integrates various devices and sensors to control",
    "package 'Vehicle Dynamics Simulator' {\n\tattribute def InitialVelocity;\n\tattribute def InitialPosition;\n\tattribute def Acceleration;\n\tattribute def TimeStep;\n\tattribute def Velocity;\n\tattribute def Position;\n\tpart context {\n\t\tpart user {\n\t\t\tport inputPort: InputPort {\n\t\t\t\tin initialVelocity: InitialVelocity;\n\t\t\t\tin initialPosition: InitialPosition;\n\t\t\t\tin acceleration: Acceleration;\n\t\t\t\tin timeStep: TimeStep;\n\t\t\t}\n\t\t\tperform simulation.sendInput {\n\t\t\t\tin input = inputPort.initialVelocity;\n\t\t\t\tin input = inputPort.initialPosition;\n\t\t\t\tin input = inputPort.acceleration;\n\t\t\t\tin input = inputPort.timeStep;\n\t\t\t}\n\t\t}\n\t\tpart simulation {\n\t\t\tport inputPort: ~InputPort;\n\t\t\tperform simulation.produceOutput {\n\t\t\t\tin input = inputPort.initialVelocity;\n\t\t\t\tin input = inputPort.initialPosition;\n\t\t\t\tin input = inputPort.acceleration;\n\t\t\t\tin input = inputPort.timeStep;\n\t\t\t\tout output = outputPort.velocity;\n\t\t\t\tout output = outputPort.position;\n\t\t\t}\n\t\t\tport outputPort: OutputPort {\n\t\t\t\tout velocity: Velocity;\n\t\t\t\tout position: Position;\n\t\t\t}\n\t\t}\n\t\tpart modelCenter {\n\t\t\tport inputPort: ~InputPort;\n\t\t",
    "package 'Car' {\n\tpackage 'Safety Features' {\n\t\tpart driverAirbag {\n\t\t\t@Safety;\n\t\t\t@isMandatory=false;\n\t\t}\n\t\tpart keylessEntrySystem {\n\t\t\t@Safety;\n\t\t\t@isMandatory=false;\n\t\t}\n\t\tpart wheelAssembly {\n\t\t\t@Safety;\n\t\t\t@isMandatory=false;\n\t\t}\n\t\tpart seatBelt1 {\n\t\t\t@Safety;\n\t\t\t@isMandatory=true;\n\t\t}\n\t\tpart seatBelt2 {\n\t\t\t@Safety;\n\t\t\t@isMandatory=true;\n\t\t}\n\t}\n\tpackage 'Mandatory Safety Features' {\n\t\tpart bumper {\n\t\t\t@Safety;\n\t\t\t@isMandatory=true;\n\t\t}\n\t}\n\tpart wheelAssembly {\n\t\t@Safety;\n\t\t@isMandatory=false;\n\t}\n\tpart driverAirbag {\n\t\t@Safety;\n\t\t@isMandatory=false;\n\t}\n\tpart keylessEntrySystem {\n\t\t@Safety;\n\t\t@isMandatory=false;\n\t}\n\tpart seatBelt1 {\n\t\t@Safety;\n\t\t@isMandatory=true;\n\t}\n\tpart seatBelt2 {\n\t\t@Safety;\n\t\t@isMandatory=true",
    "package 'Vehicle Safety Compliance' {\n\tattribute def SafetyFeature;\n\tattribute def Mandatory;\n\tattribute def NonMandatory;\n\tattribute def RequiredByLaw;\n\tattribute def IndustryStandard;\n\tattribute def SeatBelt;\n\tattribute def Airbag;\n\tattribute def Bumper;\n\tattribute def KeylessEntry;\n\tattribute def ABS;\n\tattribute def Tire;\n\tattribute def SafetyComponent;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tpart interior {\n\t\t\t\tpart seatBelt1 {\n\t\t\t\t\tattribute mandatory: Mandatory;\n\t\t\t\t\tattribute safetyFeature: SeatBelt;\n\t\t\t\t}\n\t\t\t\tpart seatBelt2 {\n\t\t\t\t\tattribute mandatory: Mandatory;\n\t\t\t\t\tattribute safetyFeature: SeatBelt;\n\t\t\t\t}\n\t\t\t\tpart airbag {\n\t\t\t\t\tattribute mandatory: NonMandatory;\n\t\t\t\t\tattribute safetyFeature: Airbag;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart body {\n\t\t\t\tpart bumper {\n\t\t\t\t\tattribute mandatory: Mandatory;\n\t\t\t\t\tattribute safetyFeature: Bumper;\n\t\t\t\t}\n\t\t\t\tpart keylessEntry {\n\t\t\t\t\tattribute mandatory: NonMandatory;\n\t\t\t\t\tattribute safetyFeature: KeylessEntry;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart chassis {\n\t\t\t\tpart tire {\n\t\t\t\t\tattribute mandatory: Mandatory;\n\t\t\t\t\tattribute safetyFeature: Tire;\n\t\t\t",
    "package 'RiskManagement' {\n\tattribute def Situation;\n\tattribute def Cause;\n\tattribute def Failure;\n\tattribute def Probability;\n\tattribute def Severity;\n\tpart context {\n\t\tpart riskManager {\n\t\t\tperform riskAnalysis {\n\t\t\t\tin situation = situation;\n\t\t\t\tin cause = cause;\n\t\t\t\tin failure = failure;\n\t\t\t\tin probability = probability;\n\t\t\t\tin severity = severity;\n\t\t\t}\n\t\t\tperform scenarioEvaluation {\n\t\t\t\tin situation = situation;\n\t\t\t\tin cause = cause;\n\t\t\t\tin failure = failure;\n\t\t\t}\n\t\t}\n\t\tpart riskModel {\n\t\t\tpart situation {\n\t\t\t\tattribute situation: Situation;\n\t\t\t\tpart cause {\n\t\t\t\t\tattribute cause: Cause;\n\t\t\t\t\tpart failure {\n\t\t\t\t\t\tattribute failure: Failure;\n\t\t\t\t\t\tattribute probability: Probability;\n\t\t\t\t\t\tattribute severity: Severity;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart scenario {\n\t\t\t\tpart situation: ~situation;\n\t\t\t\tpart cause: ~cause;\n\t\t\t\tpart failure: ~failure;\n\t\t\t}\n\t\t}\n\t}\n\taction riskAnalysis {\n\t\tsuccession flow situationFlow from situation.situation to cause.cause;\n\t\tsuccession flow causeFlow from cause.cause to failure.failure;\n\t\tsuccession flow failureFlow from failure.failure to riskManager.riskAnalysis;\n\t}\n\taction",
    "package 'RiskManagement' {\n\tattribute def Scenario;\n\tattribute def Cause;\n\tattribute def Failure;\n\tattribute def Severity;\n\tattribute def Probability;\n\tattribute def CausalRelationship;\n\tattribute def RiskScenario;\n\tattribute def System;\n\tattribute def ScenarioType;\n\tattribute def FailureType;\n\tattribute def RiskAnalysis;\n\tattribute def Decision;\n\tattribute def Integration;\n\tattribute def SystemEngineering;\n\tattribute def Metadata;\n\tattribute def ModelingLanguage;\n\tattribute def Environment;\n\tattribute def Engineering;\n\tattribute def Analysis;\n\tattribute def Management;\n\tattribute def Identification;\n\tattribute def DecisionMaking;\n\tattribute def IntegrationEnvironment;\n\tattribute def SystemEngineeringEnvironment;\n\tattribute def RiskPropagation;\n\tattribute def Chain;\n\tattribute def ScenarioDescription;\n\tattribute def CauseDescription;\n\tattribute def FailureDescription;\n\tattribute def SeverityDescription;\n\tattribute def ProbabilityDescription;\n\tattribute def CausalRelationshipDescription;\n\tattribute def RiskScenarioDescription;\n\tattribute def SystemDescription;\n\tattribute def ScenarioTypeDescription;\n\tattribute def FailureTypeDescription;\n\tattribute def RiskAnalysisDescription;\n\tattribute def DecisionDescription;\n\tattribute def IntegrationDescription;\n\tattribute def SystemEngineeringDescription;\n\tattribute def MetadataDescription;\n\tattribute def ModelingLanguageDescription;\n\tattribute def",
    "package 'RiskAnalysis' {\n\tattribute def Risk;\n\tattribute def Severity;\n\tattribute def Failure;\n\tattribute def State;\n\tattribute def Threshold;\n\tpart context {\n\t\tpart equipment {\n\t\t\tpart battery {\n\t\t\t\tattribute def level: Threshold;\n\t\t\t\tperform riskAnalysis.monitorBatteryLevel {\n\t\t\t\t\tin level = level;\n\t\t\t\t}\n\t\t\t}\n\t\t\tperform riskAnalysis.analyzeBatteryAging {\n\t\t\t\tin level = battery.level;\n\t\t\t}\n\t\t}\n\t\tpart riskAnalysis {\n\t\t\tperform riskAnalysis.detectRisk {\n\t\t\t\tin level = battery.level;\n\t\t\t\tin aging = analyzeBatteryAging.aging;\n\t\t\t}\n\t\t\tperform riskAnalysis.analyzeFailure {\n\t\t\t\tin risk = detectRisk.risk;\n\t\t\t}\n\t\t\tperform riskAnalysis.determineState {\n\t\t\t\tin risk = analyzeFailure.risk;\n\t\t\t\tin threshold = Threshold;\n\t\t\t}\n\t\t\tperform riskAnalysis.shutdownDevice {\n\t\t\t\tin state = determineState.state;\n\t\t\t}\n\t\t\tperform riskAnalysis.assignSeverity {\n\t\t\t\tin risk = analyzeFailure.risk;\n\t\t\t}\n\t\t}\n\t}\n\taction riskAnalysis {\n\t\taction monitorBatteryLevel { in level: Threshold; }\n\t\tsuccession flow batteryLevelFlow from monitorBatteryLevel.level to analyzeBatteryAging.level;\n",
    "package 'System' {\n\tpackage 'System Structure' {\n\t\tpackage 'System Components' {\n\t\t\tpart 'System Controller' {\n\t\t\t\tattribute def 'System State';\n\t\t\t\tattribute def 'System Configuration';\n\t\t\t\tport def 'System Interface' {\n\t\t\t\t\tout systemState : SystemState;\n\t\t\t\t\tout systemConfig : SystemConfiguration;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart 'System Subsystem 1' {\n\t\t\t\tattribute def 'Subsystem 1 State';\n\t\t\t\tattribute def 'Subsystem 1 Configuration';\n\t\t\t\tport def 'Subsystem 1 Interface' {\n\t\t\t\t\tout subsystem1State : Subsystem1State;\n\t\t\t\t\tout subsystem1Config : Subsystem1Configuration;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart 'System Subsystem 2' {\n\t\t\t\tattribute def 'Subsystem 2 State';\n\t\t\t\tattribute def 'Subsystem 2 Configuration';\n\t\t\t\tport def 'Subsystem 2 Interface' {\n\t\t\t\t\tout subsystem2State : Subsystem2State;\n\t\t\t\t\tout subsystem2Config : Subsystem2Configuration;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpackage 'System Interfaces' {\n\t\t\tinterface 'System Controller to Subsystem 1' connect SystemController.SystemInterface to Subsystem1.Subsystem1Interface {\n\t\t\t\tref flow references SystemController.SystemStateFlow\n",
    "package 'Automotive System' {\n\tpackage 'Components' {\n\t\tpackage 'Root Component' {\n\t\t\tpackage 'Subsystem 1' {\n\t\t\t\tpackage 'Component 1' {\n\t\t\t\t\tattribute def safetyAttribute;\n\t\t\t\t\tattribute def functionalAttribute;\n\t\t\t\t\tport def interfacePort {\n\t\t\t\t\t\tout interface : Interface;\n\t\t\t\t\t}\n\t\t\t\t\tpart context {\n\t\t\t\t\t\tpart component {\n\t\t\t\t\t\t\tport interfacePort: ~interfacePort;\n\t\t\t\t\t\t\tperform subsystem1.produceComponentOutput {\n\t\t\t\t\t\t\t\tin interface = interfacePort.interface;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpart subsystem1 {\n\t\t\t\t\t\t\tport interfacePort: ~interfacePort;\n\t\t\t\t\t\t\tperform rootComponent.produceSubsystemOutput {\n\t\t\t\t\t\t\t\tin interface = interfacePort.interface;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpackage 'Component 2' {\n\t\t\t\t\tattribute def safetyAttribute;\n\t\t\t\t\tattribute def functionalAttribute;\n\t\t\t\t\tport def interfacePort {\n\t\t\t\t\t\tout interface : Interface;\n\t\t\t\t\t}\n\t\t\t\t\tpart context {\n\t\t\t\t\t\tpart component {\n\t\t\t\t\t\t\tport interfacePort: ~interfacePort;\n\t\t\t\t\t\t\tperform subsystem1.produceComponentOutput {\n\t\t\t\t\t\t\t\tin interface = interfacePort.interface;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpart subsystem1 {\n\t\t\t\t\t\t\tport interfacePort: ~interfacePort;\n\t\t\t\t\t\t\tperform rootComponent.produceSubsystemOutput",
    "package 'Automotive' {\n\t// Core component representing an automobile\n\tcomponent '汽车' {\n\t\t// Alias for easier communication and usage\n\t\talias '汽车 (Car)';\n\t\t// Explanatory comment for better understanding\n\t\t// This component represents a vehicle designed for road use.\n\t\t// It is a self-propelled, motorized vehicle with four wheels.\n\t}\n\t// Physical quantity representing torque\n\tquantity '扭矩' {\n\t\t// Explanatory comment for better understanding\n\t\t// Torque is a measure of rotational force that causes an object to rotate.\n\t\t// It is typically measured in units of Newton-meters (N·m).\n\t}\n\t// Association between the automobile component and the torque quantity\n\tassociation '汽车与扭矩' {\n\t\t// Explanatory comment for better understanding\n\t\t// This association represents the relationship between an automobile and its torque output.\n\t\t// It is used to express the characteristics of an automobile in terms of torque.\n\t}\n} \n––––– YOUR TURN –––––\n\nInput Requirement:\nThe system shall provide a user interface that allows users to input their name, age, and occupation. The system shall then display a personalized",
    "package 'AutomobileDocumentManagement' {\n\tattribute def Automobile;\n\tattribute def Car;\n\tattribute def TorqueValue;\n\tattribute def Document;\n\tattribute def Alias;\n\tattribute def ExplanatoryDocument;\n\tpart context {\n\t\tpart user {\n\t\t\tport userPort: UserPort;\n\t\t\tperform documentManagement.provideInformation {\n\t\t\t\tin user = userPort.user;\n\t\t\t}\n\t\t}\n\t\tinterface userToDocumentManagement connect user.userPort to documentManagement.userPort {\n\t\t\tref flow references provideInformationFlow\n\t\t\t\tfrom source.user to target.user;\n\t\t}\n\t\tpart documentManagement {\n\t\t\tport userPort: ~UserPort;\n\t\t\tprovideInformation {\n\t\t\t\tin user;\n\t\t\t\tout automobile = automobilePort.automobile;\n\t\t\t\tout car = automobilePort.car;\n\t\t\t\tout torqueValue = torqueValuePort.torqueValue;\n\t\t\t\tout document = documentPort.document;\n\t\t\t\tout alias = aliasPort.alias;\n\t\t\t\tout explanatoryDocument = explanatoryDocumentPort.explanatoryDocument;\n\t\t\t}\n\t\t\tport automobilePort: AutomobilePort;\n\t\t\tport carPort: ~CarPort;\n\t\t\tport torqueValuePort: TorqueValuePort;\n\t\t\tport documentPort: DocumentPort;\n\t\t\tport aliasPort: AliasPort;\n\t\t\tport explanatoryDocumentPort: ExplanatoryDocument",
    "package 'Automobile' {\n\talias Car = Automobile;\n\tattribute def TorqueValue;\n\tattribute def Torque = TorqueValue;\n\tpackage 'PhysicalQuantity' {\n\t\tattribute def ScalarPhysicalQuantity;\n\t\tattribute def TorqueValue = ScalarPhysicalQuantity;\n\t}\n\tpart context {\n\t\tpart automobile {\n\t\t\tattribute def torqueValue: TorqueValue;\n\t\t\tattribute def torque: Torque;\n\t\t}\n\t\tpart physicalQuantity {\n\t\t\tattribute def scalarPhysicalQuantity: ScalarPhysicalQuantity;\n\t\t\tattribute def torqueValue: TorqueValue;\n\t\t}\n\t}\n}\n––––– YOUR TURN –––––\n\nInput Requirement:\nThe system needs to be able to manage and represent information related to the operation of a coffee machine. The system should support the representation of CoffeeMachine objects and allow users to refer to coffee machines using the alias \"CoffeeMaker.\" It should also facilitate the handling and importing of basic physical quantities such as temperature values (TemperatureValue), and support the use of \"Temperature\" as an alias for temperature value. Furthermore, the system should be able to flexibly import and manage various scalar physical quantity data to meet the requirements of coffee machine-related data processing and modeling.\n\nOutput Model:\npackage 'CoffeeMachine' {\n\talias",
    "package 'Vehicle' {\n\tattribute def VehicleSize;\n\tattribute def Engine;\n\tattribute def Cylinders;\n\tenum def VehicleSize {\n\t\tSmall,\n\t\tStandard,\n\t\tLarge\n\t}\n\tclass def Engine {\n\t\tattribute def Cylinders;\n\t}\n\tclass def Vehicle {\n\t\tattribute def VehicleSize;\n\t\tattribute def Engine;\n\t\tattribute def Cylinders;\n\t}\n\tclass def SmallVehicle {\n\t\tattribute def VehicleSize;\n\t\tattribute def Engine;\n\t\tattribute def Cylinders;\n\t}\n\tclass def StandardVehicle {\n\t\tattribute def VehicleSize;\n\t\tattribute def Engine;\n\t\tattribute def Cylinders;\n\t}\n\tclass def LargeVehicle {\n\t\tattribute def VehicleSize;\n\t\tattribute def Engine;\n\t\tattribute def Cylinders;\n\t}\n\tclass def EngineCylinders {\n\t\tattribute def Cylinders;\n\t}\n\toperation def configureEngineCylinders {\n\t\tin vehicleSize: VehicleSize;\n\t\tout engineCylinders: EngineCylinders;\n\t}\n\toperation def getEngineCylinders {\n\t\tin engine: Engine;\n\t\tout cylinders: Cylinders;\n\t}\n\toperation def setEngineCylinders {\n\t\tin engine: Engine;\n\t",
    "package 'Fuel Management' {\n\tattribute def FuelFlow;\n\tattribute def FuelTemperature;\n\tattribute def FuelSupply;\n\tattribute def FuelReturn;\n\tport def FuelTankPort {\n\t\tout fuelFlow: FuelFlow;\n\t}\n\tport def EnginePort {\n\t\tin fuelFlow: FuelFlow;\n\t}\n\tpart context {\n\t\tpart fuelTank {\n\t\t\tport fuelTankPort: FuelTankPort;\n\t\t\tperform fuelManagement.provideFuel {\n\t\t\t\tout fuelFlow = fuelTankPort.fuelFlow;\n\t\t\t}\n\t\t}\n\t\tpart engine {\n\t\t\tport enginePort: EnginePort;\n\t\t\tperform fuelManagement.consumeFuel {\n\t\t\t\tin fuelFlow = enginePort.fuelFlow;\n\t\t\t}\n\t\t}\n\t\tpart fuelManagement {\n\t\t\tperform fuelManagement.provideFuel {\n\t\t\t\tin fuelFlow = fuelTank.fuelTankPort.fuelFlow;\n\t\t\t\tout fuelFlow = engine.enginePort.fuelFlow;\n\t\t\t}\n\t\t\tperform fuelManagement.monitorFuelTemperature {\n\t\t\t\tin fuelFlow = fuelTank.fuelTankPort.fuelFlow;\n\t\t\t\tout fuelTemperature = fuelTemperature;\n\t\t\t}\n\t\t}\n\t}\n\taction fuelManagement {\n\t\taction provideFuel { in fuelFlow; out fuelFlow; }\n\t\tsuccession flow fuelFlow from provideFuel.fuel",
    "package 'Vehicle' {\n\tattribute def mass;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tattribute mass = 1750;\n\t\t\tpart frontAxle {\n\t\t\t\tpart axleComponents {\n\t\t\t\t\tpart wheel1;\n\t\t\t\t\tpart wheel2;\n\t\t\t\t}\n\t\t\t\tpart rearAxle {\n\t\t\t\t\tpart axleComponents {\n\t\t\t\t\t\tpart wheel3;\n\t\t\t\t\t\tpart wheel4;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart rearAxle {\n\t\t\t\tpart axleComponents {\n\t\t\t\t\tpart wheel5;\n\t\t\t\t\tpart wheel6;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpart frontAxle {\n\t\t\tattribute steeringAngle;\n\t\t\tpart axleComponents {\n\t\t\t\tpart wheel1;\n\t\t\t\tpart wheel2;\n\t\t\t}\n\t\t}\n\t\tpart rearAxle {\n\t\t\tpart axleComponents {\n\t\t\t\tpart wheel3;\n\t\t\t\tpart wheel4;\n\t\t\t}\n\t\t}\n\t}\n}\n––––– YOUR TURN –––––\n\nInput Requirement:\nThe system is a simple elevator system with a single elevator car and a control panel. The elevator car is equipped with a door, a floor indicator, and a button panel. The control panel is connected to the elevator car and allows users to select the desired floor. The elevator car moves between floors, and the door opens and closes as the car approaches and"
]