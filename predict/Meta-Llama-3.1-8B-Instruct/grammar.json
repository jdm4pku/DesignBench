[
    "package VehicleSystem {\n  package Vehicle {\n    class Vehicle {\n      attribute mass: Float;\n      attribute status: VehicleStatus;\n      attribute engine: Engine;\n      attribute driver: Driver;\n    }\n  }\n  package Engine {\n    class Engine {\n      attribute power: Float;\n      attribute torque: Float;\n    }\n  }\n  package Personnel {\n    class Driver {\n      attribute name: String;\n      attribute age: Integer;\n    }\n  }\n  package VehicleStatus {\n    class VehicleStatus {\n      attribute gearSetting: GearSetting;\n      attribute acceleratorPedalPosition: AcceleratorPedalPosition;\n    }\n  }\n  package Enum {\n    enum GearSetting {\n      PARK\n      NEUTRAL\n      REVERSE\n      FIRST\n      SECOND\n      THIRD\n      FOURTH\n      FIFTH\n    }\n    enum AcceleratorPedalPosition {\n      IDLE\n      ACCELERATING\n      BRAKING\n    }\n  }\n}\n```\n\n––––––––––––––––––––––––––––––––––\n\nNote: The above code is a subset of the full SysML v2 grammar. The code is written in a simplified format for readability. The actual SysML v2 code may have",
    "package VehicleSystem {\n  package Vehicle {\n    class Vehicle {\n      attribute driver: Personnel;\n      attribute powerDevice: Engine;\n    }\n    class ManuallyOperatedVehicle {\n      attribute driver: Personnel;\n    }\n    class PoweredVehicle {\n      attribute powerDevice: Engine;\n    }\n    class ManuallyOperatedPoweredVehicle {\n      attribute driver: Personnel;\n      attribute powerDevice: Engine;\n    }\n  }\n  package Entity {\n    class Personnel {\n      attribute name: String;\n    }\n    class Engine {\n      attribute power: Double;\n    }\n  }\n}\n```\n\n––––– SysML v2 BNF (subset) –––––\n\n––––––––––––––––––––––––––––––––––\n\nInput Requirement:\nThe system shall be able to model various types of vehicles, including cars, trucks, and motorcycles. The system shall be able to model vehicles with different numbers of wheels, including vehicles with two, three, and four wheels. The system shall be able to model vehicles with different types of engines, including gasoline, diesel, and electric engines. The system shall be able to model vehicles with different types of transmissions, including manual and automatic transmissions. The system shall be able to model vehicles with",
    "package VehicleStructure\n\nimport OMG::SysML::v2::Core::Package\nimport OMG::SysML::v2::Core::Block\nimport OMG::SysML::v2::Core::BlockDefinition\nimport OMG::SysML::v2::Core::Port\nimport OMG::SysML::v2::Core::Property\nimport OMG::SysML::v2::Core::ValueProperty\nimport OMG::SysML::v2::Core::Association\nimport OMG::SysML::v2::Core::AssociationEnd\nimport OMG::SysML::v2::Core::Constraint\n\npackage VehicleStructure {\n  class Vehicle extends Block {\n    property name: String\n    property description: String\n  }\n\n  class VehicleComponent extends Block {\n    property name: String\n    property description: String\n  }\n\n  class Engine extends VehicleComponent {\n    property horsepower: Integer\n  }\n\n  class Transmission extends VehicleComponent {\n    property gearCount: Integer\n  }\n\n  class Wheel extends VehicleComponent {\n    property diameter: Float\n  }\n\n  class VehicleConfiguration extends Block {\n    property name: String\n    property description: String\n    property vehicleType: String\n  }\n\n  class VehicleComponentType extends Block {\n",
    "package VehicleSystem\n\nblock Vehicle\n  property type: VehicleType\n  property engine: Engine\n\nblock VehicleType\n  property name: String\n  property engineType: EngineType\n\nblock Engine\n  property type: EngineType\n  property cylinders: Integer\n\nblock EngineType\n  property name: String\n  property cylinders: Integer\n\nblock SmallEngine\n  property type: EngineType\n  property cylinders: Integer\n\nblock LargeEngine\n  property type: EngineType\n  property cylinders: Integer\n\nblock SmallVehicle\n  property type: VehicleType\n  property engine: Engine\n\nblock LargeVehicle\n  property type: VehicleType\n  property engine: Engine\n```\n\n––––––––––––––––––––––––––––––––––\n\nNote: The BNF grammar is a subset of SysML v2 and is used to define the structure of the textual model. The input requirement is a natural-language description of the system, and the output system model is the textual representation of the system in SysML v2. \n\nPlease provide the SysML v2 code that corresponds to the given natural-language requirements. package VehicleSystem\n\nblock Vehicle\n  property type: VehicleType\n",
    "package traffic_signal_system\n\nimport \"http://www.omg.org/spec/SysML/2.0\"\n\nclass TrafficSignal {\n  attribute Color: Color\n  attribute State: State\n}\n\nenum Color {\n  Green\n  Yellow\n  Red\n}\n\nenum State {\n  Go\n  Stop\n}\n\nclass SpecificTrafficSignal extends TrafficSignal {\n  attribute State: State = Go\n}\n```\n\n––––––––––––––––––––––––––––––––––\n\nPlease create a textual model for the following natural-language requirements:\n\nThe system shall be able to display the current color of the traffic light. The system shall be able to display the current state of the traffic light. The system shall be able to change the color of the traffic light from green to yellow. The system shall be able to change the color of the traffic light from yellow to red. The system shall be able to change the color of the traffic light from red to green. The system shall be able to change the state of the traffic light from go to stop. The system shall be able to change the state of the traffic light from stop to go. The system shall be able to change the state of the traffic light from go to go. The system shall",
    "package org.example.system\n\nimport org.omg.sysml.lang.SysMLPackage\n\nclass InformationClassificationManagementMechanism extends SysMLPackage::System {\n  property: classificationLevel = \"Unclassified\"\n  property: classificationCode = \"uncl\"\n  property: classificationColor = \"green\"\n  property: gradeLevel = \"A\"\n  property: gradeScore = 4.0\n}\n\nclass ConfidentialInformation extends InformationClassificationManagementMechanism {\n  property: classificationLevel = \"Confidential\"\n  property: classificationCode = \"conf\"\n  classificationColor = \"yellow\"\n}\n\nclass SecretInformation extends InformationClassificationManagementMechanism {\n  property: classificationLevel = \"Secret\"\n  property: classificationCode = \"secr\"\n  classificationColor = \"red\"\n}\n\nclass GradeClassification extends InformationClassificationManagementMechanism {\n  property: gradeLevel = \"B\"\n  property: gradeScore = 3.0\n}\n\nclass UnclassifiedInformation extends InformationClassificationManagementMechanism {\n  property: classificationLevel = \"Unclassified\"\n  property: classificationCode = \"uncl\"\n  property: classificationColor = \"green\"\n}\n```\n\n––––– SysML v2 BNF (subset) –––––\n\n––––––––––",
    "package VehicleSystem\n\nblock Vehicle\n  property Engine\n  end\n\nblock Engine\n  property Cylinders\n  end\n\nblock Cylinders\n  property Number\n  end\n\nblock SmallVehicle\n  property Engine\n  end\n\nblock LargeVehicle\n  end\n\nblock Engine_SmallVehicle\n  property Cylinders\n  end\n\nblock Engine_LargeVehicle\n  property Cylinders\n  end\n\npackage VehicleSystem\n  relationship Vehicle has-a Engine\n  relationship Engine has-a Cylinders\n  relationship SmallVehicle has-a Engine\n  relationship LargeVehicle has-a Engine\n  relationship Engine_SmallVehicle has-a Cylinders\n  relationship Engine_LargeVehicle has-a Cylinders\nend\n```\n\nHowever, the above model is not complete. We need to add the following constraints:\n\n1. The number of cylinders in the engine of a small vehicle is 4.\n2. The number of cylinders in the engine of a large vehicle is 6.\n3. The number of cylinders in the engine of a small vehicle is not greater than 4.\n4. The number of cylinders in the engine of a large vehicle is not greater than 6.\n\nTo add these constraints, we need to create a",
    "package VehicleModeling\n\nimport \"http://www.omg.org/spec/SysML/2.0#SysML\"\n\nclass Vehicle {\n  attribute driverInfo : Driver\n  attribute fuelTank : FuelTank\n  attribute qualityAttributes : QualityAttributes\n  association vehicleHasFuelTank : FuelTank\n  association vehicleHasDriver : Driver\n}\n\nclass Driver {\n  attribute name : String\n  attribute age : Integer\n}\n\nclass FuelTank {\n  attribute fuelType : FuelType\n  attribute capacity : Integer\n}\n\nclass FuelType {\n  attribute name : String\n  attribute description : String\n}\n\nclass QualityAttributes {\n  attribute performance : Integer\n  attribute reliability : Integer\n}\n\nclass Personnel {\n  attribute name : String\n  attribute role : String\n}\n\nclass Fuel {\n  attribute name : String\n  attribute description : String\n}\n\nassociation vehicleHasFuelTank : Vehicle -> FuelTank\nassociation vehicleHasDriver : Vehicle -> Driver\nassociation fuelTankHasFuel : FuelTank -> Fuel\nassociation personnelWorksOn : Personnel -> Vehicle\n```\n\n––––––––––––––––––––––––––––––––––\n\nNote: The above code is a subset of the OMG SysML v2 BNF grammar. The code",
    "package automobile_wheel_assembly\n\nimport automobile_wheel_assembly::wheel_bearing_unit\nimport automobile_wheel_assembly::tire\nimport automobile_wheel_assembly::bead\nimport automobile_wheel_assembly::hub\nimport automobile_wheel_assembly::rim\nimport automobile_wheel_assembly::bolt_mounting_hole\nimport automobile_wheel_assembly::threaded_hole\nimport automobile_wheel_assembly::bolt_connection\n\nclass WheelAssembly {\n  property: name = \"Automobile Wheel Assembly\"\n  property: description = \"This system is designed to describe the structure of an automobile wheel assembly.\"\n}\n\nclass WheelBearingUnit {\n  property: name = \"Wheel Bearing Unit\"\n  property: description = \"The wheel bearing unit is a component of the wheel assembly.\"\n}\n\nclass Tire {\n  property: name = \"Tire\"\n  property: description = \"The tire is a component of the wheel assembly.\"\n  property: sealed = true\n}\n\nclass Bead {\n  property: name = \"Bead\"\n  property: description = \"The bead is a component of the wheel assembly.\"\n}\n\nclass Hub {\n  property: name = \"Hub\"\n  property: description = \"The hub is a component of the wheel assembly.\"\n  property: mounting",
    "package com.example.fuel_management_system\n\nimport com.example.fuel_management_system::FuelTankAssembly\nimport com.example.fuel_management_system::Engine\nimport com.example.fuel_management_system::FuelSupplyInterface\nimport com.example.fuel_management_system::FuelReturnInterface\nimport com.example.fuel_management_system::TemperatureSensor\n\nclass FuelManagementSystem extends System {\n  -- attributes\n  attribute fuelSupplyInterface : FuelSupplyInterface\n  attribute fuelReturnInterface : FuelReturnInterface\n  attribute temperatureSensor : TemperatureSensor\n\n  -- operations\n  operation startFuelSupply() : Void\n  operation stopFuelSupply() : Void\n  operation monitorFuelStatus() : Void\n\n  -- relationships\n  relationship fuelTankAssembly : FuelTankAssembly\n  relationship engine : Engine\n}\n\nclass FuelTankAssembly extends System {\n  -- attributes\n  attribute fuelTank : Tank\n  attribute fuelPort : Port\n\n  -- operations\n  operation supplyFuel() : Void\n  operation returnFuel() : Void\n}\n\nclass Engine extends System {\n  -- attributes\n  attribute enginePort : Port\n\n  -- operations\n  operation consumeFuel() : Void\n  operation returnExcessFuel() : Void\n}\n\nclass FuelSupplyInterface extends Interface {\n  -- attributes",
    "package VehicleConfigurations {\n  package Vehicle {\n    class Vehicle {\n      attribute mass: Float = 1750;\n      attribute axles: OrderedCollection {\n        item frontAxle: Axle;\n        item rearAxle: Axle;\n      };\n    }\n    class Axle {\n      attribute mass: Float;\n      attribute tires: OrderedCollection {\n        item frontTire: Tire;\n        item rearTire: Tire;\n      };\n    }\n    class Tire {\n      attribute mass: Float;\n    }\n  }\n  package VehicleConfigurations {\n    class VehicleConfiguration {\n      attribute name: String;\n      attribute vehicle: Vehicle;\n      attribute frontAxle: Axle;\n      attribute rearAxle: Axle;\n    }\n  }\n}\n```\n\n––––– SysML v2 BNF (subset) –––––\n\n––––––––––––––––––––––––––––––––––\n\nInput Requirement:\nThe system shall be able to handle multiple vehicle configurations, each with its own set of attributes and relationships. The system shall support the creation of new vehicle configurations and the modification of existing ones. The system shall allow users to add, remove, and reorder components within a vehicle configuration. The system shall provide",
    "package VehicleTrailerCouplingSystem\n\nimport sysml::core::CorePackage\nimport sysml::requirements::RequirementsPackage\nimport sysml::blocks::BlocksPackage\nimport sysml::ports::PortsPackage\nimport sysml::parameters::ParametersPackage\nimport sysml::valueTypes::ValueTypesPackage\n\npackage VehicleTrailerCouplingSystem {\n  block Vehicle {\n    property VehicleType : String\n    property CouplingMechanism : CouplingMechanism\n  }\n  block Trailer {\n    property TrailerType : String\n    property CouplingMechanism : CouplingMechanism\n  }\n  block CouplingMechanism {\n    property CouplingType : String\n    property Hitch : Hitch\n  }\n  block Hitch {\n    property HitchType : String\n    property CouplingBall : CouplingBall\n  }\n  block CouplingBall {\n    property BallType : String\n  }\n  block Connector {\n    property ConnectorType : String\n  }\n  package VehicleHitch {\n    block Vehicle {\n      reference Hitch : Hitch\n    }\n    block Hitch {\n      reference CouplingBall : CouplingBall\n    }\n  }\n  package TrailerHitch {\n    block Trailer {\n      reference Hitch : Hitch\n    }\n   ",
    "package VehiclePowerTransmissionSystem\n\nimport 'http://www.omg.org/spec/SysML/2.0#SysML'\n\nclass Engine {\n  port FuelCommandPort : Port\n  port PowerPort : Port\n  port ClutchPort : Port\n}\n\nclass Transmission {\n  port PowerPort : Port\n  port ClutchPort : Port\n}\n\nclass Clutch {\n  port PowerPort : Port\n  port ClutchPort : Port\n}\n\nclass Driveshaft {\n  port PowerPort : Port\n}\n\nclass RearAxleAssembly {\n  port PowerPort : Port\n  port DifferentialPort : Port\n  port LeftHalfShaftPort : Port\n  port RightHalfShaftPort : Port\n}\n\nclass Differential {\n  port PowerPort : Port\n  port LeftHalfShaftPort : Port\n  param LeftHalfShaftPort : Port\n  param RightHalfShaftPort : Port\n}\n\nclass HalfShaft {\n  port PowerPort : Port\n}\n\nclass Wheel {\n  port PowerPort : Port\n  port RoadInterfacePort : Port\n}\n\nclass Vehicle {\n  part Engine : Engine\n  part Transmission : Transmission\n  part Clutch : Clutch\n  part Driveshaft : Driveshaft\n",
    "package system\n\nimport sysml::core::model::Block\nimport sysml::core::model::Port\nimport sysml::core::model::Interface\nimport sysml::core::model::Signal\nimport sysml::core::model::Association\n\nclass System {\n  name: \"Multi-Architecture System\"\n  description: \"Integrated management of multi-architecture systems\"\n  decomposition: [\n    {\n      name: \"b11\"\n      description: \"Subsystem b11\"\n      decomposition: [\n        {\n          name: \"c1\"\n          description: \"Component c1\"\n          ports: [\n            {\n              name: \"pb\"\n              direction: \"out\"\n              type: \"pe\"\n            }\n          ]\n        },\n        {\n          name: \"c2\"\n          description: \"Component c2\"\n          ports: [\n            {\n              name: \"pc\"\n              direction: \"in\"\n              type: \"pe\"\n            }\n          ]\n        }\n      ]\n      associations: [\n        {\n          name: \"pe\"\n          type: \"Interface\"\n          source: \"c1\"\n          target: \"c2\"\n        }\n      ]\n    },\n    {\n      name: \"b12\"\n      description: \"Subsystem",
    "package automotive_powertrain {\n  block AutomotivePowertrain {\n    property FuelCommand : Command {\n      description \"Input of fuel commands\"\n    }\n    property EngineStartStopControl : Control {\n      description \"Engine start-stop control\"\n    }\n    property PowerTransmissionDistribution : PowerTransmissionDistribution {\n      description \"Support for power transmission and distribution\"\n    }\n    part Engine {\n      description \"Engine\"\n    }\n    part Transmission {\n      description \"Transmission\"\n    }\n    part Driveshaft {\n      description \"Driveshaft\"\n    }\n    part LeftWheel {\n      description \"Left wheel\"\n    }\n    part RightWheel {\n      description \"Right wheel\"\n    }\n    port FuelCommandInput : InputPort {\n      description \"Input of fuel commands\"\n    }\n    port EngineStartStopControlInput : InputPort {\n      description \"Engine start-stop control\"\n    }\n    port PowerTransmissionDistributionOutput : OutputPort {\n      description \"Support for power transmission and distribution\"\n    }\n    port EngineTorqueOutput : OutputPort {\n      description \"Engine torque\"\n    }\n    port TransmissionTorqueOutput : OutputPort {\n      description \"Transmission torque\"\n    }\n    port DriveshaftTorqueOutput : OutputPort {\n      description \"Driveshaft torque\"\n   ",
    "package automotive_powertrain\n\nblock AutomotivePowertrain {\n  description: \"Automotive powertrain control logic\"\n  stereotype: <<System>> \n  context: \"Automotive powertrain control logic\"\n  element: \n    EngineStartCommand\n    FuelControlCommand\n    StallSignal\n    TorqueGeneration\n    TorqueAmplification\n    TorqueTransmission\n    TorqueDistribution\n    PowerDelivery\n    EngineStartControl\n    EngineShutdownControl\n    PowerTransmissionProcess\n  }\n```\n\n––––– SysML v2 BNF (subset) –––––\n\n––––––––––––––––––––––––––––––––––\n\nInput Requirement:\nThe system shall be able to handle a maximum of 5 fuel control commands per second. The system shall be able to handle a maximum of 10 stall signals per second. The shall be able to handle a maximum of 5 engine start commands per second. The system shall be able to handle a maximum of 10 engine shutdown commands per second. The system shall be able to handle a maximum of 5 power transmission process commands per second.\n\nOutput System Model:package automotive_powertrain\n\nblock AutomotivePowertrain {\n  description:",
    "package VehiclePowertrainSystem\n\nimport 'http://www.omg.org/spec/SysML/2.0#SysML'\n\nblock VehiclePowertrainSystem\n  property: fuelCommand : Command\n  property: engineStartSignal : Signal\n  property: engineShutdownSignal : Signal\n  end\n\nblock Engine\n  property: engineOutputTorque : Torque\n  property: fuelCommand : Command\n  end\n\nblock Transmission\n  property: torque : Torque\n  end\n\nblock Wheels\n  property: torque : Torque\n  end\n\nblock PowerDistribution\n  property: torque : Torque\n  end\n\nblock PowerDemandResponse\n  property: powerDemand : Power\n  end\n\nblock AutomaticControl\n  property: powerDemandResponse : PowerDemandResponse\n  end\n\nblock Vehicle\n  property: powerDemandResponse : PowerDemandResponse\n  end\n```\n\n––––– SysML v2 BNF (subset) –––––\n\n––––––––––––––––––––––––––––––––––package <package_name> {\n  import <import_statement> {\n    <import_statement> {\n      ...\n    }\n  }\n  block <block_name>",
    "package VehicleTrailerSystem {\n  package Vehicle {\n    class VehicleFrame {\n      property HitchBall : HitchBall;\n    }\n  }\n  package Trailer {\n    class TrailerFrame {\n      property TrailerCoupler : TrailerCoupler;\n    }\n  }\n  package HitchingMechanism {\n    class HitchingMechanism {\n      property HitchBall : HitchBall;\n      property TrailerCoupler : TrailerCoupler;\n    }\n  }\n  package PowerConnection {\n    class PowerConnection {\n      property VehicleFrame : VehicleFrame;\n      property TrailerFrame : TrailerFrame;\n    }\n  }\n  package PowerDisconnection {\n    class PowerDisconnection {\n      property VehicleFrame : VehicleFrame;\n      property TrailerFrame : TrailerFrame;\n    }\n  }\n}\n```\n\n––––– SysML v2 BNF (subset) –––––\n\n––––––––––––––––––––––––––––––––––\n\nInput Requirement:\nThe system shall be able to connect the trailer to the vehicle in a safe and reliable manner. The system shall be able to disconnect the trailer from the vehicle in a safe and reliable manner. The system shall be able to connect and disconnect the trailer from the vehicle multiple times without any damage to the vehicle or the",
    "package VehicleTrailerSystem\n\nblock VehicleTrailerSystem\n  description \"System to manage connection status between vehicle and trailer\"\n  property \"number of vehicles\" : Integer\n  property \"number of trailers\" : Integer\n  block Vehicle\n    description \"Vehicle with chassis and tow ball\"\n    property \"chassis\" : Chassis\n    property \"tow ball\" : TowBall\n  endblock\n  block Trailer\n    description \"Trailer with coupler and trailer frame\"\n    property \"coupler\" : Coupler\n    property \"trailer frame\" : TrailerFrame\n  endblock\n  block HitchingOperation\n    description \"Hitching operation between trailer and vehicle\"\n    property \"tow ball\" : TowBall\n    property \"coupler\" : Coupler\n  endblock\n  block UnhitchingOperation\n    description \"Unhitching operation between trailer and vehicle\"\n    property \"tow ball\" : TowBall\n    property \"coupler\" : Coupler\n  endblock\nendblock\n```\n\n––––– SysML v2 BNF (subset) –––––\n\n––––––––––––––––––––––––––––––",
    "package VehicleTrailerSystem\n\nblock Vehicle\n  property Chassis\n  property TowBallDevice\n\nblock Trailer\n  property TrailerChassis\n  property CouplerMechanism\n\nblock CouplerMechanism\n  property InternalStructure\n\nblock HitchingOperation\n  property Vehicle\n  property Trailer\n  property CouplerMechanism\n\nblock UnhitchingOperation\n  property Vehicle\n  property Trailer\n  property CouplerMechanism\n\npackage HitchingAndUnhitchingOperations\n  block HitchingOperation\n  block UnhitchingOperation\n```\n\n––––– SysML v2 BNF (subset) –––––\n\n––––––––––––––––––––––––––––––––––package <identifier> {\n  block <identifier> {\n    property <identifier> [ <identifier> ]*\n  }\n  block <identifier> {\n    property <identifier> [ <identifier> ]*\n  }\n  ...\n}\n\nblock <identifier> {\n  property <identifier> [ <identifier> ]*\n}\n\npackage <identifier> {\n  block <identifier>\n  block <identifier>\n  ...\n}\n```\n\n––––– SysML v2 BNF (subset) –",
    "package Vehicle.Fuel.System\n\nblock FuelSystem\n  description: \"Fuel system of motor vehicles\"\n  stereotype: <<System>> \n  property: \n    FuelSupplyPort: \n      description: \"Fuel supply port of the fuel tank\"\n      stereotype: <<Port>> \n      type: FuelTank\n    FuelReturnPort: \n      description: \"Fuel return port of the engine\"\n      stereotype: <<Port>> \n      type: Engine\n    FuelFlowProcess: \n      description: \"Fuel flow process between the fuel tank and the engine\"\n      stereotype: <<Process>> \n      type: FuelSupplyAndReturn\n  package: \n    FuelTankAssembly: \n      description: \"Fuel tank assembly\"\n      stereotype: <<Assembly>> \n      part: \n        FuelTank: \n          description: \"Fuel tank\"\n          stereotype: <<Component>> \n          port: \n            FuelSupplyPort: \n              description: \"Fuel supply port of the fuel tank\"\n              stereotype: <<Port>> \n              type: FuelSupplyPort\n            FuelReturnPort: \n              description: \"Fuel return port of the fuel tank\"\n              stereotype: <<Port>> \n              type: FuelReturnPort\n    EngineAssembly: \n      description:",
    "package VehicleFuelDeliverySystem\n\nblock VehicleFuelDeliverySystem\n  description: \"This system is designed to provide vehicles with efficient fuel delivery services.\"\n  note: \"The system includes a storage tank as the initial fuel reservoir, from which fuel is extracted and delivered to vehicles via a fuel pump.\"\n\nblock StorageTank\n  description: \"Initial fuel reservoir\"\n  note: \"Fuel is extracted and delivered to vehicles via a fuel pump.\"\n\nblock FuelPump\n  description: \"Delivers fuel to vehicles\"\n  note: \"Fuel is extracted from the storage tank and delivered to vehicles.\"\n\nblock Vehicle\n  description: \"Vehicle that receives fuel\"\n  note: \"The vehicle has a fuel tank used to receive and store the delivered fuel, as well as to monitor both the maximum capacity and the current fuel level in real-time.\"\n\nblock FuelTank\n  description: \"Receives and stores delivered fuel\"\n  note: \"Monitors both the maximum capacity and the current fuel level in real-time.\"\n\nblock FuelFlow\n  description: \"Flow path of the fuel\"\n  note: \"Output from the storage tank, passes through the fuel pump, and ultimately enters the vehicle’s fuel tank.\"\n\nblock EndToEndFuelManagement\n  description: \"",
    "package automobile_assembly_process\n\nimport sysml::core::Block\nimport sysml::core::InternalBlockDiagram\nimport sysml::core::Package\n\npackage automobile_assembly_process {\n  package vehicle_assembly {\n    class VehicleAssembly {\n      property vehicle_assembly_id : String\n      property vehicle_assembly_status : String\n    }\n  }\n\n  package gearbox_assembly {\n    class GearboxAssembly {\n      property gearbox_assembly_id : String\n      property gearbox_assembly_status : String\n    }\n  }\n\n  package engine_assembly {\n    class EngineAssembly {\n      property engine_assembly_id : String\n      property engine_assembly_status : String\n    }\n  }\n\n  package final_assembly_line {\n    class FinalAssemblyLine {\n      property final_assembly_line_id : String\n      property final_assembly_line_status : String\n    }\n  }\n\n  package fully_assembled_vehicle {\n    class FullyAssembledVehicle {\n      property fully_assembled_vehicle_id : String\n      property fully_assembled_vehicle_status : String\n      property gearbox : GearboxAssembly\n      property engine : EngineAssembly\n    }\n  }\n\n  internal block diagram automobile_assembly_process {\n    block VehicleAssembly\n    block GearboxAssembly\n    block Engine",
    "package VehicleA\n\nblock VehicleA\n  property startSignal : Boolean\n  property brakePedalPressed : Boolean\n  property vehicleOnSignal : Boolean\n  property temperature : Real\n  property safetyThreshold : Real\n  property restoreToNormalSignal : Boolean\n  property startUpSignal : Boolean\n  param startUpSignal : Boolean\n  param restoreToNormalSignal : Boolean\n  param safetyThreshold : Real\n  param temperature : Real\n  param vehicleOnSignal : Boolean\n  param brakePedalPressed : Boolean\n  param startSignal : Boolean\n  param vehicleOnSignal : Boolean\n  param startSignal : Boolean\n  param brakePedalPressed : Boolean\n  param vehicleOnSignal : Boolean\n  param startSignal : Boolean\n  param brakePedalPressed : Boolean\n  param vehicleOnSignal : Boolean\n  param startSignal : Boolean\n  param brakePedalPressed : Boolean\n  param vehicleOnSignal : Boolean\n  param startSignal : Boolean\n  param brakePedalPressed : Boolean\n  param vehicleOnSysml\n  param vehicleOnSysml\n  param vehicleOnSysml\n  param vehicleOnSysml\n  param vehicleOnSysml\n  param vehicleOn",
    "package VehicleSystem {\n  package Vehicle {\n    class Vehicle {\n      attribute startSignal: Boolean;\n      attribute brakePedalPressed: Boolean;\n      attribute shutdownState: State;\n      attribute selfInspection: Activity;\n      attribute powerSupply: Activity;\n      attribute temperature: Real;\n      attribute overheating: Boolean;\n      attribute degradedMode: State;\n      attribute safety: Boolean;\n      parameter fuel: Real;\n      parameter maintenanceInterval: Real;\n      parameter temperatureThreshold: Real;\n    }\n  }\n  package VehicleController {\n    class VehicleController {\n      attribute controlSignals: Signal;\n      attribute statusSignals: Signal;\n      attribute startSignal: Signal;\n      attribute shutdownSignal: Signal;\n      attribute degradedModeSignal: Signal;\n      attribute safetySignal: Signal;\n      parameter configuration: Configuration;\n    }\n  }\n  package System {\n    class System {\n      attribute vehicle: Vehicle;\n      attribute vehicleController: VehicleController;\n      parameter configuration: Configuration;\n    }\n  }\n}\n```package VehicleSystem {\n  package Vehicle {\n    class Vehicle {\n      operation startVehicle() {\n        if (startSignal and brakePedalPressed) {\n          selfInspection();\n          powerSupply();\n        }\n      }\n      operation selfInspection()",
    "package VehicleSimulationSystem\n\nblock VehicleSimulationSystem\n  description: \"This system is designed for spatiotemporal simulation of the dynamic behavior of vehicles on roads at different moments.\"\n  stereotype <<System>> \n\nblock Vehicle\n  description: \"Vehicle entity\"\n  stereotype <<Entity>> \n\nblock Road\n  description: \"Road entity\"\n  stereotype <<Entity>> \n\nblock VehicleState\n  description: \"Vehicle state\"\n  stereotype <<Value>> \n\nblock RoadState\n  description: \"Road state\"\n  stereotype <<Value>> \n\nblock Simulation\n  description: \"Simulation process\"\n  stereotype <<Process>> \n\nblock TimeSeries\n  description: \"Time series data\"\n  stereotype <<Value>> \n\nblock VehicleParameters\n  description: \"Vehicle parameters\"\n  stereotype <<Value>> \n\nblock RoadParameters\n  description: \"Road parameters\"\n  stereotype <<Value>> \n\nblock Snapshot\n  description: \"Snapshot of vehicle and road state\"\n  stereotype <<Value>> \n\nblock VehiclePerformance\n  description: \"Vehicle performance analysis\"\n  stereotype <<Value>> \n\nblock RoadAdaptability\n  description: \"Road adaptability assessment\"\n  stereotype <<Value>> \n\nassociation VehicleSimulationSystem-Simulation\n  description: \"The system supports simulation",
    "package com.example.system;\n\nimport com.example.component.Component1;\nimport com.example.component.Component2;\nimport com.example.component.Component3;\nimport com.example.component.Component4;\nimport com.example.component.Component5;\nimport com.example.component.Component6;\n\nimport com.example.subsystem.SubsystemA;\nimport com.example.subsystem.SubsystemB;\n\nimport com.example.vehicle.Vehicle;\nimport com.example.vehicle.VehicleConfiguration;\n\nclass VehicleConfiguration {\n  property name: String;\n  property subsystemA: SubsystemA;\n  property subsystemB: SubsystemB;\n}\n\nclass SubsystemA {\n  property name: String;\n  property component1: Component1;\n  property component2: Component2;\n  property component3: Component3;\n  property configuration: Configuration;\n}\n\nclass SubsystemB {\n  property name: String;\n  property component4: Component4;\n  property component5: Component5;\n  property component6: Component6;\n  property configuration: Configuration;\n}\n\nclass Configuration {\n  property name: String;\n  property component1: Component1;\n  property component2: Component2;\n  property component3: Component3;\n  property component4: Component4;\n  property component5: Component5;\n  property component6: Component6;\n}\n\n",
    "package VehiclePlatform\n\nimport sysml::core::CorePackage\nimport sysml::requirements::RequirementsPackage\nimport sysml::blocks::BlocksPackage\nimport sysml::ports::PortsPackage\nimport sysml::parameters::ParametersPackage\nimport sysml::behaviors::BehaviorsPackage\nimport sysml::constraints::ConstraintsPackage\n\npackage VehiclePlatform {\n  package SubsystemA {\n    class SubsystemA extends CorePackage::Block {\n      property quantity: Integer\n      property type: String\n      property internalComponents: Set<CorePackage::Block>\n    }\n  }\n\n  package SubsystemB {\n    class SubsystemB extends CorePackage::Block {\n      property quantity: Integer\n      property type: String\n      property internalComponents: Set<CorePackage::Block>\n    }\n  }\n\n  package VehicleConfigA {\n    class VehicleConfigA extends CorePackage::Block {\n      property parameter: ParametersPackage::Parameter\n      property behavior: BehaviorsPackage::Behavior\n      property structure: BlocksPackage::Block\n    }\n  }\n\n  package VehicleConfigB {\n    class VehicleConfigB extends CorePackage::Block {\n      property parameter: ParametersPackage::Parameter\n      property behavior: BehaviorsPackage::Behavior\n      property structure",
    "package VehicleConfigurator {\n  block VehicleConfigurator {\n    property PerformanceRequirement : String {\n      value : [\"High\", \"Standard\"];\n    }\n    property UserPreference : String {\n      value : [\"Sporty\", \"Economical\"];\n    }\n    property Engine : Engine {\n      constraint : EngineSelection;\n    }\n    property Transmission : Transmission {\n      constraint : TransmissionSelection;\n    }\n    property Wheels : Wheels {\n      constraint : WheelsSelection;\n    }\n    operation ConfigureVehicle {\n      parameter : PerformanceRequirement;\n      parameter : UserPreference;\n      return : VehicleConfiguration;\n    }\n  }\n  block Engine {\n    property EngineType : String {\n      value : [\"4-cylinder\", \"6-cylinder\"];\n    }\n    constraint EngineSelection {\n      expression : EngineType = \"6-cylinder\" and PerformanceRequirement = \"High\";\n    }\n  }\n  block Transmission {\n    property TransmissionType : String {\n      value : [\"Manual\", \"Automatic\"];\n    }\n    constraint TransmissionSelection {\n      expression : TransmissionType = \"Automatic\" and PerformanceRequirement = \"High\";\n    }\n  }\n  block Wheels {\n    property WheelType : String {\n      value : [\"Narrow-rim\", \"Wide-rim\"];\n    }\n    constraint WheelsSelection {\n",
    "package VehicleManagementSystem {\n  package Vehicle {\n    class Vehicle {\n      property mass: Mass;\n      property fuelStatus: FuelStatus;\n      property powertrain: Powertrain;\n      property reliability: Reliability;\n    }\n  }\n  package Engine {\n    class Engine {\n      property torque: Torque;\n      property driveInterface: DriveInterface;\n    }\n  }\n  package Transmission {\n    class Transmission {\n      property driveInterface: DriveInterface;\n    }\n    interface DriveInterface {\n      property torque: Torque;\n    }\n  }\n  package Mass {\n    class Mass {\n      property maxMass: Double;\n    }\n  }\n  package FuelStatus {\n    class FuelStatus {\n      property fuelLevel: Double;\n    }\n  }\n  package Powertrain {\n    class Powertrain {\n      property engine: Engine;\n      property transmission: Transmission;\n    }\n  }\n  package Reliability {\n    class Reliability {\n      property performance: Performance;\n      property durability: Durability;\n    }\n  }\n  package Performance {\n    class Performance {\n      property speed: Double;\n    }\n  }\n  package Durability {\n    class Durability {\n      property lifespan: Double;\n    }\n  }\n}\n```\n\n––––– SysML v2 BNF",
    "package VehicleMassComplianceSystem\n\nblock VehicleMassComplianceSystem\n  description: \"This system is designed to verify vehicle mass compliance\"\n  note: \"Ensure that the actual mass of the tested vehicles does not exceed the specified maximum permissible mass\"\n\nblock Vehicle\n  description: \"A vehicle participating in the mass compliance test\"\n  attribute: mass (Float, \"Actual mass of the vehicle in kilograms\")\n  attribute: maxPermissibleMass (Float, \"Maximum permissible mass of the vehicle in kilograms\")\n\nblock WeighingEquipment\n  description: \"Equipment used to measure the mass of a vehicle\"\n  attribute: massReading (Float, \"Mass reading of the vehicle in kilograms\")\n\nblock TestOperator\n  description: \"Person responsible for operating the weighing equipment\"\n  attribute: name (String, \"Name of the test operator\")\n\nblock MassComplianceResult\n  description: \"Result of the mass compliance test\"\n  attribute: compliant (Boolean, \"Whether the vehicle is compliant with the mass limit\")\n  attribute: massDifference (Float, \"Difference between the measured mass and the maximum permissible mass\")\n\nblock TestSession\n  description: \"A sequence of tests performed on multiple vehicles\"\n  attribute: vehicle (Vehicle, \"Vehicle being",
    "package com.example.water_supply_network\n\nimport com.example.water_supply_network::SpigotBank\nimport com.example.water_supply_network::Spigot\nimport com.example.water_supply_network::Faucet\nimport com.example.water_supply_network::FaucotInlet\n\nclass System {\n  name: \"Water Supply Network\"\n  description: \"Delivers hot and cold water to faucets\"\n  isAbstract: true\n}\n\nclass SpigotBank {\n  name: \"Main Supply Pipe\"\n  description: \"Delivers hot and cold water\"\n  isAbstract: true\n}\n\nclass Spigot {\n  name: \"Interface\"\n  description: \"Connects SpigotBank to Faucet\"\n  isAbstract: true\n}\n\nclass Faucet {\n  name: \"Faucet\"\n  description: \"Receives hot and cold water\"\n  isAbstract: true\n}\n\nclass FaucetInlet {\n  name: \"Hot and Cold Water Inlet\"\n  description: \"Receives hot and cold water\"\n  isAbstract: true\n}\n\nclass WaterSupply {\n  name: \"Water Supply\"\n  description: \"Delivers hot and cold water\"\n  isAbstract: false\n}\n\nclass WaterUsagePoint {\n",
    "Package \"Vehicle Quality Analysis System\" {\n  Block \"Vehicle\" {\n    Property \"mass\" : Real;\n    Property \"components\" : Set {\n      Element \"Engine\" : Block;\n      Element \"Transmission\" : Block;\n      Element \"Front Axle Assembly\" : Block;\n      Element \"Rear Axle Assembly\" : Block;\n    };\n  }\n  Block \"Component\" {\n    Property \"mass\" : Real;\n  }\n  Block \"Analysis Objective\" {\n    Property \"description\" : String;\n    Property \"analysisTasks\" : Set {\n      Element \"Task\" : Block;\n    };\n  }\n  Block \"Task\" {\n    Property \"description\" : String;\n    Property \"analysisPlan\" : String;\n  }\n  Block \"Use Case\" {\n    Property \"description\" : String;\n    Property \"analysisRequirements\" : Set {\n      Element \"Requirement\" : Block;\n    };\n  }\n  Block \"Requirement\" {\n    Property \"description\" : String;\n    Property \"analysisObjectives\" : Set {\n      Element \"Analysis Objective\" : Block;\n    };\n  }\n}\n```\n\n––––– SysML v2 BNF (subset) –––––\n\n––––––––––––––––",
    "package VehiclePowertrainConfiguration\n\nimport OMG::SysML::v2::Core::Package\nimport OMG::SysML::v2::Core::Block\nimport OMG::SysML::v2::Core::BlockDefinition\nimport OMG::SysML::v2::Core::Element\nimport OMG::SysML::v2::Core::Relationship\nimport OMG::SysML::v2::Core::ValueProperty\nimport OMG::SysML::v2::Core::String\n\npackage VehiclePowertrainConfiguration {\n  package Engine {\n    class EngineType {\n      attribute power : ValueProperty {\n        type : String;\n        value : \"Power\";\n      };\n      attribute mass : ValueProperty {\n        type : String;\n        value : \"Mass\";\n      };\n      attribute efficiency : ValueProperty {\n        type : String;\n        value : \"Efficiency\";\n      };\n      attribute reliability : ValueProperty {\n        type : String;\n        value : \"Reliability\";\n      };\n      attribute cost : ValueProperty {\n        type : String;\n        value : \"Cost\";\n      };\n    }\n  }\n  package EngineStructure {\n    class EngineStructure {\n      attribute cylinders : ValueProperty {\n        type : String;\n        value : \"Cylinders\";\n     ",
    "package VehicleFuelEconomy\n\nblock VehicleFuelEconomySystem\n  property RangePerGallonUrban : Real\n  property RangePerGallonHighway : Real\n  property FuelEconomyTestLoadUrban : Real\n  property FuelEconomyTestLoadHighway : Real\n  property VehiclePowertrain : <<Association>> VehiclePowertrain\n  property OperatingConditions : <<Association>> OperatingConditions\n  property Load : <<Association>> Load\n  property FuelConsumption : <<Association>> FuelConsumption\n  property RegulatoryRequirements : <<Association>> RegulatoryRequirements\n  property PerformanceRequirements : <<Association>> PerformanceRequirements\n  property FuelEconomyTargets : <<Association>> FuelEconomyTargets\n  constraint RangePerGallonUrban >= 25\n  constraint RangePerGallonHighway >= 30\n  constraint FuelEconomyTestLoadUrban = 1000\n  constraint FuelEconomyTestLoadHighway = 1000\n  constraint FuelConsumption = (VehiclePowertrain * Load * OperatingConditions) / RangePerGallonUrban\n  constraint FuelConsumption = (VehiclePowertrain * Load * OperatingConditions) / RangePerGallonHighway\n  constraint RegulatoryRequirements = (PerformanceRequirements * FuelEconomyTargets)\n",
    "package VehicleSimulation\n\nimport sysml::core::CorePackage\nimport sysml::requirements::RequirementsPackage\nimport sysml::blocks::BlocksPackage\nimport sysml::parameters::ParametersPackage\nimport sysml::behaviors::BehaviorsPackage\nimport sysml::allocations::AllocationsPackage\nimport sysml::ports::PortsPackage\nimport sysml::packages::PackagesPackage\n\npackage VehicleSimulation {\n  package Requirements {\n    requirement \"Simulate and analyze longitudinal dynamic characteristics of vehicle motion\"\n      : \"This system is designed to simulate and analyze the longitudinal (straight-line) dynamic characteristics of vehicle motion.\"\n      : \"Users can input vehicle mass parameters, initial position, initial velocity, and a set of segmented power output data.\"\n      : \"Based on the input power and operating conditions, the system will successively calculate the vehicle’s acceleration, velocity, and position at each moment using dynamic equations with a specified time step.\"\n      : \"It will then output the sequences of acceleration, velocity variation, and displacement throughout the vehicle's entire motion process.\"\n      : \"This provides data support and a decision-making basis for applications such as vehicle performance analysis, control strategy development, and driving behavior evaluation.\"\n  }\n  package Blocks {\n    block",
    "package VehicleSystem {\n  block Vehicle {\n    property Mass { value: 2500 }\n    part FrontAxleAssembly {\n      property Mass { value: 150 }\n      part FrontWheel1 { }\n      part FrontWheel2 { }\n      part FrontAxle {\n        property Mass { value: 50 }\n        property SteeringAngle { value: 30 }\n      }\n    }\n    part RearAxleAssembly {\n      property Mass { value: 250 }\n      part RearWheel1 { }\n      part RearWheel2 { }\n      part RearAxle {\n        property Mass { value: 100 }\n      }\n    }\n  }\n}\n```\n––––––––––––––––––––––––––––––––––\n\nNote: The BNF grammar is a subset of SysML v2 and is used to define the structure of the textual model. The input requirement is a natural-language description of the vehicle system model, and the output is the corresponding SysML v2 textual model. \n\nPlease provide the SysML v2 textual model that corresponds to the given natural-language requirements. package VehicleSystem {\n  block Vehicle {\n    property Mass { value: 2500 }\n    part FrontAxleAssembly {\n",
    "package VehicleSafetySystem {\n  package Vehicle {\n    block Vehicle {\n      property VehicleID : string\n      property VehicleType : string\n      property SafetyFeatures : {SafetyFeature}\n      property SecurityFeatures : {SecurityFeature}\n    }\n  }\n  package SafetyFeature {\n    block SeatBelt : SafetyFeature {\n      property Mandatory : boolean\n    }\n    block Airbag : SafetyFeature {\n      property Mandatory : boolean\n    }\n    block Bumper : SafetyFeature {\n      parameter Mandatory : boolean\n    }\n  }\n  package SecurityFeature {\n    block Alarm : SecurityFeature {\n      property Mandatory : boolean\n    }\n    block KeylessEntry : SecurityFeature {\n      property Mandatory : boolean\n    }\n  }\n}\n```\n\n––––– SysML v2 BNF (subset) –––––\n\n––––––––––––––––––––––––––––––––––package <package_name> {\n  block <block_name> {\n    property <property_name> : <type>\n    property <property_name> : <type>\n    ...\n  }\n  package <package_name> {\n    block <block_name> {\n      property <property_name> : <type>\n      ...\n    }\n",
    "package System\n\nimport { SysML::Core::Package } from 'https://sysml.org/sysml-core/package.json';\n\nclass System {\n  attribute x: Number;\n  attribute y: Number;\n  attribute z: Number;\n  dependency ApplicationLayer on System;\n  dependency ServiceLayer on System;\n  dependency DataLayer on System;\n  association ApplicationLayer -> ServiceLayer;\n  association ServiceLayer -> DataLayer;\n  constraint clearDivisionOfResponsibilities;\n  constraint smoothDataFlow;\n  constraint functionalCalls;\n}\n\nclass ApplicationLayer {\n  attribute applicationAttribute: String;\n  dependency System on ApplicationLayer;\n  constraint applicationConstraint;\n}\n\nclass ServiceLayer {\n  attribute serviceAttribute: String;\n  dependency System on ServiceLayer;\n  dependency DataLayer on ServiceLayer;\n  constraint serviceConstraint;\n}\n\nclass DataLayer {\n  attribute dataAttribute: String;\n  dependency System on DataLayer;\n  constraint dataConstraint;\n}\n```\n\n––––––––––––––––––––––––––––––––––\n\nPlease create the OMG SysML v2 textual model for the given natural-language requirements. package System\n\nimport { SysML::Core::Package } from 'https://sysml.org/sysml-core/package.json';\n\nclass",
    "package powertrain_system\n\nblock PowertrainSystem\n  property torqueGenerationRequirement : Requirement\n  property torqueGenerator : Block\n  property engine : Block\n  property transmission : Block\n\nblock TorqueGenerationRequirement\n  property torqueGreaterThanZero : Constraint\n  property drivingCapability : Constraint\n\nblock TorqueGenerator\n  property torqueGenerationFunction : Function\n  property logicLayer : Layer\n  property physicalLayer : Layer\n\nblock Engine\n  property engineTorque : Property\n  property enginePower : Property\n\nblock Transmission\n  property transmissionTorque : Property\n  property transmissionPower : Property\n\nconstraint TorqueGreaterThanZero\n  property value : Value\n  end\n\nconstraint DrivingCapability\n  property value : Value\n  end\n\nfunction TorqueGenerationFunction\n  property input : Input\n  property output : Output\n  end\n\nlayer LogicLayer\n  property torqueGeneratorFunction : Function\n  end\n\nlayer PhysicalLayer\n  property engine : Block\n  property transmission : Block\n  end\n```\n\n––––––––––––––––––––––––––––––––––\n\nNote: The BNF grammar is a subset of SysML v2 and is used to define the structure of the textual model.",
    "package com.example.system;\n\nimport com.example.component;\nimport com.example.engine;\nimport com.example.powertrain;\nimport com.example.torque_generator;\n\nmodel System {\n  element System {\n    name: \"Power Transmission System\";\n    description: \"System for transmitting and outputting power\";\n    isAbstract: false;\n  }\n  element PowerTransmissionSystem {\n    name: \"Power Transmission System\";\n    description: \"System for transmitting and outputting power\";\n    isAbstract: false;\n    isRealizedBy: System;\n  }\n  element TorqueGenerator {\n    name: \"Torque Generator\";\n    description: \"Component responsible for generating torque\";\n    isAbstract: false;\n  }\n  element Engine {\n    name: \"Engine\";\n    description: \"Component responsible for executing torque generation\";\n    isAbstract: false;\n  }\n  element Powertrain {\n    name: \"Powertrain\";\n    description: \"Physical component containing the engine\";\n    isAbstract: false;\n  }\n  element SystemRealization {\n    name: \"System Realization\";\n    description: \"Mapping of logical functions to physical implementation\";\n    isAbstract: false;\n",
    "package Vehicle_Safety_and_Anti-theft_Function_Catalogue\n\nimport Foundation\n\nclass Vehicle_Safety_and_Anti-theft_Function_Catalogue {\n  property Catalogue_Name : String\n  property Catalogue_Description : String\n  property Catalogue_Version : String\n  property Catalogue_Date : Date\n  property Catalogue_Status : String\n  property Catalogue_Author : String\n  property Catalogue_Revision_History : String\n}\n\nclass Vehicle_Component {\n  property Component_Name : String\n  property Component_Description : String\n  property Component_Type : String\n  property Component_Status : String\n  property Component_Author : String\n  property Component_Revision_History : String\n}\n\nclass Safety_Component {\n  property Component_Name : String\n  property Component_Description : String\n  property Component_Type : String\n  property Component_Status : String\n  property Component_Author : String\n  property Component_Revision_History : String\n  property Mandatory : Boolean\n}\n\nclass Anti_Theft_Component {\n  property Component_Name : String\n  property Component_Description : String\n  property Component_Type : String\n  property Component_Status : String\n  property Component_Author : String\n  property Component_Revision_H",
    "package VehicleFuelSystem\n\nblock VehicleFuelSystem\n  description: \"Complete fuel supply and return management functions for vehicles\"\n  stereotype: <<System>> \n\nblock FuelTankAssembly\n  description: \"Fuel tank assembly integrating fuel pump and fuel tank\"\n  stereotype: <<Assembly>> \n\nblock FuelPump\n  description: \"Pressurizes fuel from tank and delivers to fuel-consuming units\"\n  stereotype: <<Component>> \n\nblock FuelTank\n  description: \"Stores fuel for the vehicle\"\n  stereotype: <<Component>> \n\nblock ReturnLine\n  description: \"Allows unused fuel to return to the tank\"\n  stereotype: <<Component>> \n\nblock FuelConsumingUnit\n  description: \"Consumes fuel from the fuel pump\"\n  stereotype: <<Component>> \n\nblock FuelTemperatureSensor\n  description: \"Monitors and transmits real-time fuel temperature information\"\n  stereotype: <<Sensor>> \n\nblock FuelFlowPath\n  description: \"Overall fuel flow path and interface definitions\"\n  stereotype: <<Interface>> \n\nblock DataFlow\n  description: \"Data flow between components\"\n  stereotype: <<Interface>> \n\nblock FuelFlow\n  description: \"Fuel flow between components\"\n  stereotype: <<Interface>> \n\npackage VehicleFuelSystem",
    "package Vehicle {\n  package Safety {\n    class SeatBelt {\n      property name: String\n      property mandatory: Boolean\n    }\n    class Airbag {\n      property name: String\n      property mandatory: Boolean\n    }\n  }\n  package Security {\n    class AntiTheftAlarm {\n      property name: String\n    }\n    class Bumper {\n      property name: String\n      property mandatory: Boolean\n    }\n    class KeylessEntry {\n      property name: String\n    }\n  }\n  package Chassis {\n    class Wheel {\n      property name: String\n    }\n    class AntiLockBrakingSystem {\n      property name: String\n      property mandatory: Boolean\n    }\n  }\n  package Identification {\n    class Component {\n      property name: String\n      property classification: String\n    }\n  }\n  package Classification {\n    class Function {\n      property name: String\n      property criticality: String\n    }\n  }\n  package Regulation {\n    class Requirement {\n      property name: String\n      property description: String\n    }\n  }\n}\n```package Vehicle {\n  class Vehicle {\n    property name: String\n    property safetyComponents: Safety::Component[]\n    property securityComponents: Security",
    "package VehicleSafetyAndSecurity {\n  block VehicleSafetyAndSecuritySystem {\n    part AlarmSystem : AlarmSystemBlock;\n    part SeatBeltSystem : SeatBeltSystemBlock;\n    part FrontRowSeats : FrontRowSeatsBlock;\n    part DriversAirbag : DriversAirbagBlock;\n    part VehicleBody : VehicleBodyBlock;\n    part Bumper : BumperBlock;\n    part KeylessEntrySystem : KeylessEntrySystemBlock;\n  }\n}\n```\n\n––––––––––––––––––––––––––––––––––\n\nInput Requirement:\nThe vehicle safety and security component system shall be designed to meet the following requirements:\n\n1. The alarm system shall be able to detect and alert the driver of any potential security threats.\n2. The seat belt system shall be able to restrain the driver and passengers during driving.\n3. The front row seats shall be designed to provide a comfortable and safe driving experience for the driver and passengers.\n4. The driver’s airbag shall be designed to deploy in the event of a collision to protect the driver.\n5. The vehicle body shall be designed to withstand impacts and protect the occupants.\n6. The bumper shall be designed to absorb and distribute the forces of an impact.\n7. The",
    "package com.example.system\n\nimport com.example.system.security_classification\n\nclass Component {\n  attribute security_classification: security_classification\n  attribute label: String\n}\n\nclass SecurityClassification {\n  attribute name: String\n  attribute level: String\n}\n\nclass System {\n  attribute components: Component[]\n}\n\nclass SecurityClassificationLevel {\n  attribute name: String\n  attribute level: String\n}\n\nenum SecurityClassificationLevel {\n  Unclassified\n  Confidential\n  Secret\n}\n\nenum SecurityClassification {\n  Unclassified\n  Confidential\n  Secret\n}\n```\n\n––––––––––––––––––––––––––––––––––\n\nNote: The code is written in SysML v2 textual model syntax. The `package` keyword is used to define a package, `import` is used to import a package, `class` is used to define a class, `attribute` is used to define an attribute, `enum` is used to define an enumeration, and `[]` is used to define an array. \n\nPlease write the SysML v2 textual model code that meets the given requirements. package com.example.system\n\nimport com.example.system.security_classification\n\nclass Component {\n  attribute security_classification: security_classification\n",
    "package VehicleECU\n\nimport 'http://www.omg.org/spec/SysML/2.0#SysML'\n\nblock VehicleECU {\n  description: \"Typical automotive Electronic Control Unit (ECU) communication and control model\"\n  stereotype: \"ECU\"\n  property: \"CAN bus\"\n  property: \"BusIF\"\n  property: \"Vehicle Control Unit\"\n  property: \"Engine Control Unit\"\n  property: \"Sensor Data Exchange\"\n}\n\nblock VehicleControlUnit {\n  description: \"Vehicle Control Unit (VCU)\"\n  stereotype: \"VCU\"\n  property: \"BusIF\"\n  property: \"CAN bus\"\n  property: \"Vehicle State\"\n  property: \"Engine State\"\n}\n\nblock EngineControlUnit {\n  description: \"Engine Control Unit (ECU)\"\n  stereotype: \"ECU\"\n  property: \"BusIF\"\n  property: \"CAN bus\"\n  property: \"Engine State\"\n  property: \"Vehicle State\"\n}\n\nblock BusInterface {\n  description: \"Bus Interface (BusIF)\"\n  stereotype: \"BusIF\"\n  property: \"CAN bus\"\n  property: \"Vehicle Control Unit\"\n  property: \"Engine Control Unit\"\n}\n\nblock SensorDataExchange {\n  description:",
    "package com.example.system\n\nimport com.example.system.BloodGlucoseMeter\nimport com.example.system.BatteryStatus\nimport com.example.system.Alarm\nimport com.example_system.EmergencyResponse\n\nclass System {\n  name: \"Blood Glucose Meter System\"\n  description: \"Ensure high reliability and safety of the blood glucose meter during use\"\n  isDerivedFrom: \"ISO 13485:2016\"\n  isCompliantWith: \"ISO 13485:2016\"\n  isVerifiedBy: \"Rigorous approval process\"\n  isManagedBy: \"Management measures for key risk scenarios\"\n}\n\nclass BloodGlucoseMeter {\n  name: \"Blood Glucose Meter\"\n  description: \"Measure blood glucose levels\"\n  isDerivedFrom: \"ISO 15197:2013\"\n  isCompliantWith: \"ISO 15197:2013\"\n  isVerifiedBy: \"Calibration and validation process\"\n  isManagedBy: \"Maintenance and calibration schedule\"\n}\n\nclass BatteryStatus {\n  name: \"Battery Status\"\n  description: \"Detect battery status and alert user\"\n  isDerivedFrom: \"ISO 13485:2016\"\n  isCompliantWith: \"ISO 13485:2016",
    "package com.example.scientific_constants\n\nimport com.example.science_mathematics\nimport com.example.science_physics\nimport com.example.science_context\n\nclass Constants {\n  property e: Real = 2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466391932003059921817413596629043572900336768587\n  property pi: Real = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n  property speed_of_light: Real = 299792458.0 m/s\n  property fine_structure_constant: Real = 7.2973525693e-3\n  property electron_to_proton_mass_ratio: Real = 1836.15267389\n  property standard_gravitational_acceleration: Real = 9.80665 m/s^2\n  property amplifier_gain_coefficient: Real = 10.0\n}\n\nclass ConstantsContext {\n  property context: String = \"Model X\"\n}\n\nclass ConstantsContextExtension {\n  property",
    "package automotive.tires\n\nimport automotive.tire\n\nclass Tire {\n  attribute manufacturer : String\n  attribute rimDiameter : Real\n  attribute width : Integer\n}\n\nclass FrenchTire : Tire {\n  attribute brand : String\n}\n\ninstance FrenchTire1 : FrenchTire {\n  manufacturer = \"Michelin\"\n  rimDiameter = 18.0\n  width = 245\n  brand = \"French\"\n}\n```\n\n––––––––––––––––––––––––––––––––––\n\nPlease provide the OMG SysML v2 textual model based on the given natural-language requirements. package automotive.tires\n\nimport automotive.tire\n\nclass Tire {\n  attribute manufacturer : String\n  attribute rimDiameter : Real\n  attribute width : Integer\n}\n\nclass FrenchTire : Tire {\n  attribute brand : String\n}\n\ninstance FrenchTire1 : FrenchTire {\n  manufacturer = \"Michelin\"\n  rimDiameter = 18.0\n  width = 245\n  brand = \"French\"\n}\n```  |package automotive.tires\n\nimport automotive.tire\n\nclass Tire {\n  attribute manufacturer : String\n  attribute rimDiameter",
    "package automotive_component_model\n\nimport automotive_component_model::Vehicle\nimport automotive_component_model::Wheel\nimport automotive_component_model::Tire\n\nclass Vehicle {\n  attribute mass: Quantity {\n    unit: kg\n    value: 1200\n  }\n  attribute length: Quantity {\n    unit: m\n    value: 4.82\n  }\n  attribute front_wheels: [Wheel] {\n    multiplicity: 2\n  }\n}\n\nclass Wheel {\n  attribute hub_diameter: Quantity {\n    unit: in\n    value: 18\n  }\n  attribute width: Quantity {\n    unit: mm\n    value: 245\n  }\n  attribute outer_diameter: Quantity {\n    unit: in\n    value: 24\n  }\n  attribute tire: Tire {\n    multiplicity: 1\n  }\n}\n\nclass Tire {\n  attribute height: Quantity {\n    unit: in\n    value: 30\n  }\n}\n\nclass Quantity {\n  attribute value: Number\n  attribute unit: Unit\n}\n\nclass Unit {\n  attribute name: String\n  attribute conversion: [Conversion]\n}\n\nclass Conversion {\n  attribute from_unit: Unit\n  attribute to_unit: Unit\n  attribute conversion_factor: Number\n",
    "package VehiclePowertrain {\n  block Vehicle {\n    attribute EngineType : EngineType;\n    attribute TransmissionType : TransmissionType;\n    attribute IsHighPerformance : Boolean;\n  }\n  block EngineType {\n    enumeration FourCylinder;\n    enumeration SixCylinder;\n  }\n  block TransmissionType {\n    enumeration Manual;\n    enumeration Automatic;\n  }\n  constraint EngineType_Constraint {\n    (IsHighPerformance = true) => (EngineType = SixCylinder);\n    (IsHighPerformance = false) => (EngineType = FourCylinder);\n  }\n  constraint TransmissionType_Constraint {\n    (EngineType = FourCylinder) => (TransmissionType = Manual);\n    (EngineType = SixCylinder) => (TransmissionType = Automatic);\n  }\n  constraint Powertrain_Constraint {\n    (EngineType = FourCylinder) && (TransmissionType = Manual) || \n    (EngineType = SixCylinder) && (TransmissionType = Automatic);\n  }\n}\n```\n––––––––––––––––––––––––––––––––––\n\nPlease create the textual model for the following natural-language requirements:\n\nThe vehicle's powertrain must be configured to meet the following requirements:\n\n1. The vehicle must be equipped with",
    "package automotive_system\n\nimport automotive_system::Component\nimport automotive_system::Constraint\nimport automotive_system::Requirement\nimport automotive_system::System\n\nSystem automotive_system {\n  name: \"Automotive System\"\n  description: \"Modeling the structural and functional constraints of automotive components\"\n  version: \"1.0\"\n  requirements: [\n    Requirement {\n      id: \"R1\"\n      name: \"Total Mass\"\n      description: \"The vehicle has a total mass of 1200 kilograms\"\n      value: 1200\n      unit: \"kg\"\n    },\n    Requirement {\n      id: \"R2\"\n      name: \"Length\"\n      description: \"The vehicle has a length of 4.82 meters\"\n      value: 4.82\n      unit: \"m\"\n    },\n    Requirement {\n      id: \"R3\"\n      name: \"Wheel Assembly\"\n      description: \"Each wheel assembly consists of a set of tires and the corresponding brake disc\"\n    },\n    Requirement {\n      id: \"R4\"\n      name: \"Wheel Composition\"\n      description: \"A single wheel is composed of a rim and a tire\"\n    },\n    Requirement {\n      id: \"R5\"\n      name: \"R",
    "package automotive_fuel_system {\n  block fuel_tank_assembly {\n    port outlet_interface {\n      flow fuel\n    }\n    port return_interface {\n      flow fuel\n    }\n  }\n  block fuel_pump {\n    port fuel_inlet {\n      flow fuel\n    }\n    port fuel_outlet {\n      flow fuel\n    }\n  }\n  block fuel_system {\n    block fuel_tank_assembly\n    block fuel_pump\n  }\n  package fuel_system_monitoring {\n    block fuel_temperature_monitor {\n      port fuel_temperature_sensor {\n        flow fuel_temperature\n      }\n      port fuel_temperature_transmitter {\n        flow fuel_temperature\n      }\n    }\n  }\n}\n```\n––––––––––––––––––––––––––––––––––\n\nNote: The BNF grammar is a subset of SysML v2 and is used to define the structure of the textual model. The input requirement is a natural-language description of the system, and the output system model is the SysML v2 textual model that represents the system. \n\nPlease provide the SysML v2 textual model that represents the system described in the input requirement. package automotive_fuel_system {\n  block fuel_tank",
    "package PhysicalQuantitySystem\n\nimport PhysicalQuantity\nimport Unit\n\nblock PhysicalQuantitySystem {\n  description: \"System for managing physical quantities and units\"\n  stereotype: <<System>> \n  property PhysicalQuantity[] physicalQuantities\n  property Unit[] units\n  property PhysicalQuantity[] basePhysicalQuantities\n  property PhysicalQuantity[] derivedPhysicalQuantities\n  property PhysicalQuantity[] supplementaryPhysicalQuantities\n  property PhysicalQuantity[] coherentPhysicalQuantities\n  property PhysicalQuantity[] incoherentPhysicalQuantities\n  property PhysicalQuantity[] fundamentalPhysicalQuantities\n  property PhysicalQuantity[] compositePhysicalQuantities\n  property PhysicalQuantity[] dimensionlessPhysicalQuantities\n  property PhysicalQuantity[] otherPhysicalQuantities\n  property PhysicalQuantity[] importedPhysicalQuantities\n  property PhysicalQuantity[] extendedPhysicalQuantities\n  property PhysicalQuantity[] physicalQuantityExtensions\n  property PhysicalQuantity[] physicalQuantityImports\n  property PhysicalQuantity[] physicalQuantityExclusions\n  property PhysicalQuantity[] physicalQuantityInclusions\n  property PhysicalQuantity[] physicalQuantityAssociations\n  property PhysicalQuantity[] physicalQuantityDerivations\n  property PhysicalQuantity[] physicalQuantitySupplements\n  property PhysicalQuantity[] physicalQuantityCoherences\n  property PhysicalQuantity[] physicalQuantity",
    "package UnitSystemLibrary\n\nimport { SysML } from 'https://sysml.org/sysml';\n\nclass UnitSystem {\n  description: 'Standardized unit system library for ISQ and USCustomaryUnits';\n  purpose: 'Enable interoperability and adaptation between ISQ and USCustomaryUnits';\n  goal: 'Reduce confusion and errors caused by inconsistent units';\n  constraint: 'Ensure accuracy and authoritative standardization of all unit types';\n  context: 'Engineering, scientific research, and daily life';\n}\n\nclass Unit {\n  description: 'Physical quantity unit';\n  purpose: 'Support conversion and application of various units';\n  goal: 'Reduce confusion and errors caused by inconsistent units';\n  constraint: 'Ensure accuracy and authoritative standardization of all unit types';\n  context: 'Engineering, scientific research, and daily life';\n}\n\nclass ISQUnit {\n  description: 'International System of Quantities unit';\n  purpose: 'Support conversion and application of ISQ units';\n  goal: 'Reduce confusion and errors caused by inconsistent units';\n  constraint: 'Ensure accuracy and authoritative standardization of all unit types';\n  context: 'Engineering, scientific research, and daily life';\n}\n\nclass USCustomaryUnit {\n  description: 'United States Custom",
    "package HeadlampTiltAdjustmentSystem\n\nimport org.omg.sysml.v2_0.core::Block\nimport org.omg.sysml.v2_0.core::Package\nimport org.omg.sysml.v2_0.core::Requirement\nimport org.omg.sysml.v2_0.core::ValueProperty\nimport org.omg.sysml.v2_0.core::Real\nimport org.omg.sysml.v2_0.core::Interval\nimport org.omg.sysml.v2_0.core::Unit\nimport org.omg.sysml.v2_0.core::SIUnit\n\nclass HeadlampTiltAdjustmentSystem extends Package {\n  class HeadlampTiltAdjustmentSystemRequirements extends Package {\n    class HeadlampTiltAngleRequirement extends Requirement {\n      name: \"Headlamp Tilt Angle Requirement\"\n      description: \"The tilt angle of the headlamp beam must be between 50 degrees and 80 degrees.\"\n      value: HeadlampTiltAngleInterval\n    }\n  }\n  class HeadlampTiltAngleInterval extends Interval {\n    lowerBound: Real { value: 50; unit: SIUnit::Degree }\n    upperBound: Real { value: 80; unit: SIUnit::Degree }\n  }\n}\n```\n\n––",
    "package mypackage\n\nblock System\n  property unsignedInteger unsignedInt\n  property unsignedFloat unsignedFloat\n  property dateTime dateTime\n  property string str\n  property boolean bool\n  property enumeration Status\n    value red\n    value yellow\n    value green\n  endEnumeration\n  property enumeration Color\n    value red\n    value yellow\n    value green\n  endEnumeration\n  property enumeration Dimension\n    value Small(60 mm)\n    value Medium(70 mm)\n    value Large(80 mm)\n  endEnumeration\n  property diameter : Dimension = Small(60 mm)\n  property status : Status = red\n  property color : Color = red\n  endBlock\nendPackage\n```\n\n––––––––––––––––––––––––––––––––––\n\nNote: The BNF grammar is a subset of SysML v2 and is not a complete grammar. The code is written in a simplified format and is not intended to be a production-ready model. ––––––\n\nPlease provide the SysML v2 code that meets the given requirements. package mypackage\n\nblock System\n  property unsignedInteger unsignedInt\n  property unsignedFloat unsignedFloat\n  property dateTime",
    "package com.example.system;\n\nimport com.example.system.Person;\n\nclass Bag {\n  type: BagType;\n  elements: List<BagElement>;\n}\n\nclass BagElement {\n  type: BagElementType;\n  value: String;\n}\n\nenum BagType {\n  SPARE_PARTS\n}\n\nenum BagElementType {\n  SPARE_PART\n}\n\nclass List {\n  type: ListType;\n  elements: List<ListElement>;\n}\n\nclass ListElement {\n  type: ListElementType;\n  value: String;\n}\n\nenum ListType {\n  INTEGER\n}\n\nenum ListElementType {\n  INTEGER_VALUE\n}\n\nclass Set {\n  type: SetType;\n  elements: List<SetElement>;\n}\n\nclass SetElement {\n  type: SetElementType;\n  value: String;\n}\n\nenum SetType {\n  STRING\n}\n\nenum SetElementType {\n  STRING_VALUE\n}\n\nclass OrderedSet {\n  type: OrderedSetType;\n  elements: List<OrderedSetElement>;\n}\n\nclass OrderedSetElement {\n  type: OrderedSetElementType;\n  value: Person;\n}\n\nenum OrderedSetType {\n  PERSONNEL\n}\n\nenum OrderedSetElementType {\n  PERSON\n}\n\nclass Person {\n  name: String;\n  age: Integer;\n}\n\nclass Array {\n  type: ArrayType;\n  elements:",
    "package TireInfo\n\nimport { SysML::Core::Package } from 'https://sysml.org/sysml-core';\nimport { SysML::Core::Block } from 'https://sysml.org/sysml-core';\nimport { SysML::Core::Association } from 'https://sysml.org/sysml-core';\nimport { SysML::Core::Property } from 'https://sysml.org/sysml-core';\nimport { SysML::Core::Value } from 'https://sysml.org/sysml-core';\nimport { SysML::Core::String } from 'https://sysml.org/sysml-core';\nimport { SysML::Core::Integer } from 'https://sysml.org/sysml-core';\nimport { SysML::Core::Real } from 'https://sysml.org/sysml-core';\nimport { SysML::Core::Package } from 'https://sysml.org/sysml-core';\nimport { SysML::Core::Block } from 'https://sysml.org/sysml-core';\nimport { SysML::Core::Association } from 'https://sysml.org/sysml-core';\nimport { SysML::Core::Property } from 'https://sysml.org/sysml-core';\nimport { SysML::Core::",
    "package ascent_phase_sampling\n\nimport sysml::core::core::Package\nimport sysml::core::core::Block\nimport sysml::core::core::Element\nimport sysml::core::core::ValueProperty\nimport sysml::core::core::Time\nimport sysml::core::core::TimePoint\nimport sysml::core::core::Real\nimport sysml::core::core::Unit\nimport sysml::core::core::String\n\nclass AscentPhaseSampling {\n  package AscentPhaseSampling {\n    class SamplingPoint {\n      property time: TimePoint\n      property position: ValueProperty {\n        type: Real\n        unit: Unit {\n          kind: Length\n          value: 1\n        }\n      }\n      property velocity: ValueProperty {\n        type: Real\n        unit: Unit {\n          kind: Speed\n          value: 1\n        }\n      }\n    }\n  }\n}\n```\n\n––––––––––––––––––––––––––––––––––\n\nPlease provide the SysML v2 textual model that corresponds to the given natural-language requirements. package ascent_phase_sampling\n\nimport sysml::core::core::Package\nimport sys",
    "package com.example.materials_science\n\nimport com.example.materials_science::Alloy\nimport com.example.materials_science::Material\nimport com.example.materials_science::Metal\nimport com.example.materials_science::Property\nimport com.example.materials_science::Unit\n\npackage com.example.materials_science::Alloy\n\nclass Alloy extends com.example.materials_science::Material {\n  property massFraction : [0..1] real\n  property tensileStrength : real\n  property unit : Unit\n  property components : [0..*] Material\n}\n\npackage com.example.materials_science::Material\n\nclass Material {\n  property atomicMass : real\n  property unit : Unit\n}\n\npackage com.example.materials_science::Metal\n\nclass Metal extends com.example.materials_science::Material {\n  property scientificName : String\n}\n\npackage com.example.materials_science::Property\n\nclass Property {\n  property name : String\n  property value : real\n  property unit : Unit\n}\n\npackage com.example.materials_science::Unit\n\nclass Unit {\n  property name : String\n  property symbol : String\n}\n\npackage com.example.materials_science::AlloyInstance\n\nclass AlloyInstance extends",
    "package com.example.materials_database\n\nimport com.example.materials_database::Material\nimport com.example.materials_database::MaterialProperty\nimport com.example.materials_database::MaterialType\n\nclass Material {\n  id: String\n  name: String\n  description: String\n  type: MaterialType\n  properties: Set<MaterialProperty>\n}\n\nclass MaterialType {\n  id: String\n  name: String\n  description: String\n  properties: Set<MaterialProperty>\n}\n\nclass MaterialProperty {\n  id: String\n  name: String\n  description: String\n  unit: String\n  value: Float\n  material: Material\n}\n\nclass Steel {\n  id: String\n  name: String\n  description: String\n  type: MaterialType\n  properties: Set<MaterialProperty>\n  composition: Set<MaterialComposition>\n}\n\nclass MaterialComposition {\n  id: String\n  material: Material\n  massFraction: Float\n  constituent: Material\n}\n\nclass Steel_980 {\n  id: String\n  name: String\n  description: String\n  type: MaterialType\n  properties: Set<MaterialProperty>\n  composition: Set<MaterialComposition>\n  tensileStrength: Float\n  unit:",
    "package com.example.pubsub\n\nimport com.example.pubsub.Topic\nimport com.example.pubsub.Producer\nimport com.example.pubsub.Consumer\nimport com.example.pubsub.Message\n\nclass System {\n  name: \"PubSub System\"\n  description: \"Publish-Subscribe message interaction model\"\n  stereotype: \"System\"\n\n  package com.example.pubsub {\n    class Topic {\n      name: String\n      stereotype: \"Topic\"\n    }\n\n    class Producer {\n      name: String\n      stereotype: \"Producer\"\n      publishes: Sequence<Topic>\n    }\n\n    class Consumer {\n      name: String\n      stereotype: \"Consumer\"\n      subscribes: Sequence<Topic>\n    }\n\n    class Message {\n      name: String\n      stereotype: \"Message\"\n      content: String\n    }\n\n    class Server {\n      name: String\n      stereotype: \"Server\"\n      receives: Sequence<Message>\n      distributes: Sequence<Message>\n    }\n\n    class Subscription {\n      name: String\n      stereotype: \"Subscription\"\n      topic: Topic\n      consumer: Consumer\n    }\n\n    class Publish {\n      name: String\n      stereotype: \"Publish\"\n      producer: Producer\n      message: Message\n    }\n\n    class Subscribe {\n      name: String\n     ",
    "package VehicleFuelSystem\n\nblock VehicleFuelSystem\n  description: \"This system is designed to describe the basic structure and operating principles of a vehicle fuel system.\"\n  note: \"The vehicle is equipped with a fuel tank assembly and an engine, which are connected through fuel lines to facilitate fuel supply and return.\"\n\nblock FuelTankAssembly\n  description: \"The fuel tank assembly is responsible for supplying fuel to the engine, and after combustion and usage, the engine returns the unused portion of the fuel back to the fuel tank.\"\n\nblock Engine\n  description: \"The engine is responsible for consuming fuel and returning the unused portion back to the fuel tank.\"\n\nblock FuelLine\n  description: \"The fuel line is a connection between the fuel tank assembly and the engine to facilitate fuel supply and return.\"\n\nblock FuelTemperatureMonitor\n  description: \"The fuel temperature monitor is responsible for monitoring and transmitting information on the fuel temperature to ensure operational safety and system efficiency.\"\n\nassociation VehicleFuelSystem_FuelTankAssembly\n  description: \"The vehicle fuel system is composed of a fuel tank assembly.\"\n  end1: VehicleFuelSystem\n  end2: FuelTankAssembly\n\nassociation VehicleFuelSystem_Engine\n  description: \"The vehicle fuel system is composed of an",
    "package com.example.publish_subscribe_system\n\nimport com.example.publish_subscribe_system::Topic\nimport com.example.publish_subscribe_system::Producer\nimport com.example.publish_subscribe_system::Consumer\nimport com.example.publish_subscribe_system::Server\n\nclass System {\n  name: \"Publish Subscribe System\"\n  description: \"A system implementing a publish-subscribe message flow architecture\"\n  stereotype: \"System\"\n}\n\nclass Topic {\n  name: \"Topic\"\n  description: \"A specific subject of discussion\"\n  stereotype: \"Topic\"\n}\n\nclass Producer {\n  name: \"Producer\"\n  description: \"A participant that publishes messages to the server\"\n  stereotype: \"Producer\"\n}\n\nclass Consumer {\n  name: \"Consumer\"\n  description: \"A participant that subscribes to specific topics via the server\"\n  stereotype: \"Consumer\"\n}\n\nclass Server {\n  name: \"Server\"\n  description: \"A participant that manages subscriptions and message delivery\"\n  stereotype: \"Server\"\n}\n\nassociation Server->Topic {\n  name: \"Server manages topics\"\n  description: \"The server manages the topics and their subscriptions\"\n  stereotype: \"Association\"\n}\n\nassociation Producer->Server {\n  name: \"Producer publishes messages\"\n  description: \"The producer publishes messages to the server\"\n ",
    "package VehicleTransportationSystem\n\nblock VehicleTransportationSystem\n  description: \"This system is designed to provide transportation services for users.\"\n  context: \"Users (the driver and up to four passengers) can enter the vehicle, and the driver is responsible for operating the vehicle to complete travel tasks.\"\n\n  part driver: Driver\n  part passengers: [Passenger, 4]\n\n  constraint: \"During vehicle use, if the fuel level falls below 10% of the maximum tank capacity, the driver may go to a gas station to refuel, thus ensuring the vehicle can continue operating.\"\n\n  behavior: \n    sequence:\n      - \"Users enter the vehicle.\"\n      - \"The driver operates the vehicle to complete travel tasks.\"\n      - \"During vehicle use, if the fuel level falls below 10% of the maximum tank capacity, the driver goes to a gas station to refuel.\"\n      - \"Environmental factors are taken into account throughout the process.\"\n      - \"After transportation is completed, all individuals exit the vehicle safely.\"\n\n  package Vehicle\n    block Vehicle\n      description: \"A vehicle used for transportation.\"\n      part fuelTank: FuelTank\n      part engine: Engine\n      part wheels: Wheels\n\n      behavior: \n",
    "package VehicleFuelManagementSystem\n\nblock VehicleFuelManagementSystem\n  description: \"This system is designed to provide fuel supply and return management functions for vehicles.\"\n  stereotype <<System>> \n\nblock FuelTankAssembly\n  description: \"The fuel tank supplies fuel to the engine through a fuel outlet port that connects to the engine’s fuel inlet port, and can also receive fuel return from the engine.\"\n  stereotype <<Assembly>> \n\nblock EngineUnit\n  description: \"The engine and fuel tank are connected via fuel interfaces, enabling both forward flow (supply) and reverse flow (return) of fuel to meet the engine’s normal operation requirements and ensure an efficient fuel circulation system.\"\n  stereotype <<Unit>> \n\nblock FuelInterface\n  description: \"Port information includes attributes such as fuel temperature, ensuring that relevant parameters can be monitored in real time during both supply and return processes.\"\n  stereotype <<Interface>> \n\nblock FuelOutletPort\n  description: \"The fuel outlet port that connects to the engine’s fuel inlet port.\"\n  stereotype <<Port>> \n\nblock FuelInletPort\n  description: \"The engine’s fuel inlet port.\"\n  stereotype <<Port>> \n\nblock FuelReturnPort\n  description: \"The port that receives fuel return from the engine",
    "package VehicleFuelSystem\n\nblock VehicleFuelSystem\n  description \"Vehicle fuel system management\"\n  stereotype <<System>> \n\nblock FuelTankAssembly\n  description \"Fuel tank assembly\"\n  stereotype <<Component>> \n\nblock Engine\n  description \"Engine\"\n  stereotype <<Component>> \n\nblock FuelInterface\n  description \"Fuel interface\"\n  stereotype <<Interface>> \n\nblock FuelSupplyPort\n  description \"Fuel supply port\"\n  stereotype <<Port>> \n\nblock FuelReturnPort\n  description \"Fuel return port\"\n  description \"Fuel return port\"\n  stereotype <<Port>> \n\nblock FuelTemperatureSensor\n  description \"Fuel temperature sensor\"\n  stereotype <<Sensor>> \n\nblock FuelFlow\n  description \"Fuel flow\"\n  stereotype <<Flow>> \n\nblock FuelSupply\n  description \"Fuel supply\"\n  stereotype <<Flow>> \n\nblock FuelReturn\n  description \"Fuel return\"\n  stereotype <<Flow>> \n\nblock FuelTemperature\n  description \"Fuel temperature\"\n  stereotype <<Property>> \n\nblock FuelLevel\n  description \"Fuel level\"\n  stereotype <<Property>> \n\nblock FuelPressure\n  description \"Fuel pressure\"\n  stereotype <<Property>> \n\nblock FuelFlowRate\n  description \"Fuel flow rate\"\n  stereotype <<Property>> \n\nblock FuelTemperatureInformation",
    "package com.example.system;\n\nimport com.example.system.*;\n\nblock System {\n  property SystemName: 'Scene Capture System';\n  property Description: 'A system that captures photos from real-world scenes.';\n  property Version: '1.0';\n  property Author: 'John Doe';\n\n  part Camera {\n    property CameraName: 'Camera';\n    property Description: 'A camera that captures photos.';\n  }\n\n  part SceneSelector {\n    property SceneSelectorName: 'Scene Selector';\n    property Description: 'A component that selects scenes to capture.';\n  }\n\n  part FocusingModule {\n    property FocusingModuleName: 'Focusing Module';\n    property Description: 'A module that performs focusing for the selected scene.';\n  }\n\n  part ImageGenerator {\n    property ImageGeneratorName: 'Image Generator';\n    property Description: 'A component that generates an intermediate image.';\n  }\n\n  part PhotoCaptureModule {\n    property PhotoCaptureModuleName: 'Photo Capture Module';\n    property Description: 'A module that captures the final photo.';\n  }\n\n  part OutputModule {\n    property OutputModuleName: 'Output Module';\n    property Description: 'A module that outputs the final photo.';\n  }\n\n  port CameraPort {\n    property CameraPortName: 'Camera Port';\n   ",
    "package photography_workflow\n\nblock PhotographyWorkflow\n  description: \"This system is designed to support the photography workflow, enabling the complete process from focusing on a scene to producing the final image.\"\n  stereotype: <<System>> \n  part Focusing\n    description: \"The user first selects or sets a scene to be photographed; the system then automatically performs focusing on the selected scene and generates an intermediate image.\"\n    stereotype: <<Process>> \n  part Shooting\n    description: \"The system carries out the shooting operation based on the focused image, thereby outputting the final photograph.\"\n    stereotype: <<Process>> \n  constraint: \"The entire workflow is completed sequentially through the two steps of “Focusing” and “Shooting,” ensuring that the image has achieved clear focus before shooting and resulting in high-quality photo output.\"\n  constraint: \"The system operation process is concise and coherent, enabling users to efficiently obtain the desired photographs.\"\n\nblock Focusing\n  description: \"The user first selects or sets a scene to be photographed; the system then automatically performs focusing on the selected scene and generates an intermediate image.\"\n  stereotype: <<Process>> \n\nblock Shooting\n  description: \"The system carries out the shooting operation based on the focused image, thereby outputting",
    "package photography_system {\n  package requirements {\n    requirement R1 {\n      id: \"R1\"\n      name: \"Select a scene\"\n      description: \"The user selects a specific scene\"\n    }\n    requirement R2 {\n      id: \"R2\"\n      name: \"Perform focusing process\"\n      description: \"The system performs a focusing process on the selected scene to generate an image\"\n    }\n    requirement R3 {\n      id: \"R3\"\n      name: \"Shoot the scene\"\n      description: \"The system carries out the shooting process to produce a final photograph\"\n    }\n    requirement R4 {\n      id: \"R4\"\n      name: \"Automate workflow\"\n      description: \"The overall workflow automatically completes the focusing and shooting steps\"\n    }\n  }\n}\n```\n\n––––– SysML v2 BNF (subset) –––––\n\n––––––––––––––––––––––––––––––––––package <package_name> {\n  package <package_name> {\n    <element> {\n      id: <id>\n      name: <name>\n      description: <description>\n    }\n    <element> {\n      id: <id>\n",
    "package photography_system {\n  block PhotographySystem {\n    description: \"Automate photography process\"\n    requirement: \"Automate photography process\"\n    constraint: \"No user intervention in focusing or shooting details\"\n    part: {\n      block FocusProcessor {\n        description: \"Perform focus processing on the scene\"\n        requirement: \"Generate image suitable for shooting\"\n        constraint: \"No user intervention in focusing details\"\n      }\n      block Shooter {\n        description: \"Convert image into a photograph\"\n        requirement: \"Obtain final photograph\"\n        constraint: \"No user intervention in shooting details\"\n      }\n    }\n  }\n}\n```\n\n––––––––––––––––––––––––––––––––––\n\nPlease create a SysML v2 textual model based on the following natural-language requirements:\n\nThe system shall be able to perform a series of tasks in a specific order. The tasks are: (1) capture an image, (2) process the image, and (3) display the processed image. The system shall be able to handle multiple images and perform the tasks in parallel for each image. The system shall be able to handle errors and exceptions that may occur during the tasks. The system shall be able to recover from errors and exceptions",
    "Package PhotographyWorkflow {\n  Block PhotographyWorkflow {\n    Property userInput: String {\n      Description: \"Input scene to be photographed\"\n    }\n    Operation focus: {\n      Description: \"Focus on the captured scene\"\n    }\n    Operation shoot: {\n      Description: \"Perform shooting operation on the focused image\"\n    }\n    Operation output: {\n      Description: \"Output the required photograph\"\n    }\n    ValueProperty image: Image {\n      Description: \"Frame of image generated by focusing\"\n    }\n    ValueProperty picture: Picture {\n      Description: \"Photograph produced by shooting\"\n    }\n  }\n  Block Scene {\n    Property scene: String {\n      Description: \"Scene to be photographed\"\n    }\n  }\n  Block Image {\n    Property image: String {\n      Description: \"Frame of image\"\n    }\n  }\n  Block Picture {\n    Property picture: String {\n      Description: \"Photograph\"\n    }\n  }\n}\n```\n\n––––––––––––––––––––––––––––––––––\n\nPlease create a SysML v2 textual model based on the given natural-language requirements.Package PhotographyWorkflow {\n  Block PhotographyWorkflow {\n    Property user_input: String {\n      Description: \"Input",
    "package photography_workflow\n\nimport sysml::core::CorePackage\nimport sysml::requirements::RequirementsPackage\nimport sysml::blocks::BlocksPackage\nimport sysml::parameters::ParametersPackage\nimport sysml::behaviors::BehaviorsPackage\nimport sysml::constraints::ConstraintsPackage\n\npackage photography_workflow::system {\n  name: \"Photography Workflow System\"\n  description: \"System designed to support the photography workflow\"\n  stereotype: \"System\"\n}\n\npackage photography_workflow::system::requirements {\n  name: \"Photography Workflow Requirements\"\n  description: \"Requirements for the photography workflow system\"\n  stereotype: \"Requirements\"\n}\n\npackage photography_workflow::system::requirements::req_001 {\n  name: \"Select Scene\"\n  description: \"Select a scene to capture as a photograph\"\n  stereotype: \"Functional\"\n}\n\npackage photography_workflow::system::requirements::req_002 {\n  name: \"Focus Scene\"\n  description: \"Focus the selected scene to ensure optimal image sharpness\"\n  stereotype: \"Functional\"\n}\n\npackage photography_workflow::system::requirements::req_003 {\n  name: \"Take Photo\"\n  description: \"Take the photo if the focus is clear\"\n  stereotype: \"Functional\"\n}\n\npackage photography_workflow",
    "package com.example.workflow_photography_system\n\nimport com.example.workflow_photography_system::Scene\nimport com.example.workflow_photography_system::Image\nimport com.example.workflow_photography_system::Photograph\n\nclass Workflow {\n  property: focus_quality: FocusQuality\n  property: scene: Scene\n  property: image: Image\n  property: photograph: Photograph\n  operation: focus: (scene: Scene) -> Image\n  operation: evaluate_focus: (image: Image) -> FocusQuality\n  operation: shoot: (image: Image) -> Photograph\n  operation: link: (scene: Scene) -> (Photograph)\n}\n\nclass Scene {\n  property: scene_id: String\n  property: scene_description: String\n}\n\nclass Image {\n  property: image_id: String\n  property: image_data: String\n  property: focus_quality: FocusQuality\n}\n\nclass Photograph {\n  property: photograph_id: String\n  property: photograph_data: String\n}\n\nenum FocusQuality {\n  GOOD\n  FAIR\n  POOR\n}\n```\n\n––––––––––––––––––––––––––––––––––\n\nPlease create a textual model for the following natural-language requirements:\n\nThe",
    "package photography_workflow\n\nimport sysml::core::CorePackage\nimport sysml::requirements::RequirementsPackage\nimport sysml::blocks::BlocksPackage\nimport sysml::parameters::ParametersPackage\nimport sysml::activities::ActivitiesPackage\nimport sysml::value_types::ValueTypesPackage\n\npackage photography_workflow::system {\n  name: \"Photography Workflow System\"\n  description: \"A system designed to implement a complete photography workflow.\"\n  stereotype: \"System\"\n}\n\npackage photography_workflow::system::requirements {\n  name: \"Photography Workflow Requirements\"\n  description: \"Requirements for the Photography Workflow System.\"\n  stereotype: \"Requirements\"\n}\n\npackage photography_workflow::system::requirements::req_1 {\n  name: \"Trigger 'take photo' operation once\"\n  description: \"The user only needs to trigger the 'take photo' operation once.\"\n  stereotype: \"Functional\"\n}\n\npackage photography_workflow::system::requirements::req_2 {\n  name: \"Automate subsequent steps\"\n  description: \"The system will automatically complete all subsequent steps.\"\n  stereotype: \"Functional\"\n}\n\npackage photography_workflow::system::requirements::req_3 {\n  name: \"Acquire current shooting scene\"\n  description: \"The system acquires",
    "package VehicleBrakingSystem\n\nblock VehicleBrakingSystem\n  property BrakingControlFunction\n  property AutomaticActivation\n  property BrakePedalStatus\n  property TractionInformation\n  property BrakePressure\n  property ModulationFrequency\n  property SafeBrakingPerformance\n  property DrivingSafety\n  property Comfort\n\nblock AutomaticActivation\n  property KeyPosition\n  property SystemActivation\n\nblock BrakePedalStatus\n  property BrakePedalPressure\n  property BrakePedalPosition\n\nblock TractionInformation\n  property RoadAdhesion\n  property TractionVariation\n\nblock BrakingControlFunction\n  property BrakePressureAdjustment\n  property ModulationFrequencyAdjustment\n\nblock SafeBrakingPerformance\n  property VehicleSpeed\n  property BrakingDistance\n\nblock DrivingSafety\n  package DrivingSafetyRequirements\n    block CollisionAvoidance\n      property CollisionDetection\n      property WarningSystem\n    end block CollisionAvoidance\n    block EmergencyBraking\n      property EmergencyBrakingSystem\n      property BrakingAssistance\n    end block EmergencyBraking\n  end package DrivingSafetyRequirements\nend block DrivingSafety\n\nblock Comfort\n  property SmoothBraking\n  property ReducedVibration\nend block Comfort\n```\n\n––––––––",
    "package BatteryChargingSystem\n\nimport OMG::SysML::v2::Core::Package\n\nclass BatteryChargingSystem extends Package {\n  attribute batteryLevel : Real\n  attribute isCharging : Boolean\n  attribute isTerminated : Boolean\n  attribute chargingRate : Real\n  attribute batteryCapacity : Real\n  attribute maxChargingRate : Real\n  attribute minChargingRate : Real\n  require batteryLevel >= 0\n  require batteryLevel <= 100\n  require isCharging = (batteryLevel < 100)\n  require isTerminated = (batteryLevel >= 100)\n  require chargingRate >= minChargingRate\n  require chargingRate <= maxChargingRate\n  require batteryCapacity > 0\n}\n\nclass Battery extends Package {\n  attribute capacity : Real\n  attribute currentLevel : Real\n  require capacity > 0\n  require currentLevel >= 0\n  require currentLevel <= capacity\n}\n\nclass ChargingController extends Package {\n  attribute chargingRate : Real\n  attribute maxChargingRate : Real\n  attribute minChargingRate : Real\n  require chargingRate >= minChargingRate\n  require chargingRate <= maxChargingRate\n}\n\nclass ChargingProcess extends Package",
    "package BatteryChargingSystem\n\nimport OMG::SysML::v2::Core::Package\n\nclass BatteryChargingSystem {\n  attribute batteryLevel : Percentage\n  attribute chargingStatus : ChargingStatus\n  operation chargeBattery {\n    pre: batteryLevel < 100\n    post: batteryLevel = 100\n  }\n  operation terminateCharging {\n    pre: batteryLevel >= 100\n    post: chargingStatus = Terminated\n  }\n}\n\nenum ChargingStatus {\n  Charging\n  Terminated\n}\n\nenum Percentage {\n  0\n  25\n  50\n  75\n  100\n}\n\n```\n\n––––––––––––––––––––––––––––––––––\n\nPlease provide the SysML v2 code that meets the given requirements. package BatteryChargingSystem\n\nimport OMG::SysML::v2::Core::Package\n\nclass BatteryChargingSystem {\n  attribute batteryLevel : Percentage\n  attribute chargingStatus : ChargingStatus\n  operation chargeBattery {\n    pre: batteryLevel < 100\n    post: batteryLevel = 100\n  }\n  operation terminateCharging {\n    pre: batteryLevel >= 100\n    post: charging",
    "package com.example.camera_system\n\nimport com.example.camera_system::CameraSystem\nimport com.example.camera_system::Scene\nimport com.example.camera_system::User\n\nclass CameraSystem extends System {\n  property: \n    - camera: Camera\n    - autofocus: Autofocus\n    - imaging: Imaging\n    - scene: Scene\n    - user: User\n  behavior: \n    - takePhoto: \n      - precondition: scene != null\n      - postcondition: photoTaken = true\n      - action: \n        - autofocus.focus()\n        - imaging.capture()\n        - photoTaken = true\n  end\n}\n\nclass Camera extends Component {\n  property: \n    - lens: Lens\n    - sensor: Sensor\n  behavior: \n    - focus: \n      - precondition: objectInFocus != null\n      - postcondition: objectInFocus = null\n      - action: \n        - lens.adjust()\n        - sensor.adjust()\n  end\n}\n\nclass Autofocus extends Component {\n  property: \n    - algorithm: Algorithm\n  behavior: \n    - focus: \n      - precondition: objectInFocus != null\n      - postcondition: objectInFocus = null\n      - action: \n        - algorithm.run",
    "package com.example.digitalcamera\n\nblock DigitalCamera\n  property\n    description: \"Digital camera system\"\n  end\n\n  package com.example.digitalcamera.shootingprocess\n  block ShootingProcess\n    property\n      description: \"Shooting process of digital camera\"\n    end\n\n    package com.example.digitalcamera.shootingprocess.viewfinding\n    block ViewFinding\n      property\n        description: \"Viewfinding process of digital camera\"\n      end\n    end\n\n    package com.example.digitalcamera.shootingprocess.focus\n    block Focus\n      property\n        description: \"Focus process of digital camera\"\n      end\n    end\n\n    package com.example.digitalcamera.shootingprocess.imaging\n    block Imaging\n      property\n        description: \"Imaging process of digital camera\"\n      end\n    end\n\n    package com.example.digitalcamera.shootingprocess.control\n    block Control\n      property\n        description: \"Control process of digital camera\"\n      end\n    end\n\n    relationship\n      ViewFinding ->> Focus\n      Focus ->> Imaging\n      Imaging ->> Control\n    end\n  end\n\n  package com.example.digitalcamera.shootingprocess.control\n  block Control\n    property\n      description: \"Control process of digital",
    "package VehicleSimulation\n\nimport OMG::SysML::v2::Core::Package\nimport OMG::SysML::v2::Core::Block\nimport OMG::SysML::v2::Core::BlockDefinition\nimport OMG::SysML::v2::Core::Element\nimport OMG::SysML::v2::Core::Port\nimport OMG::SysML::v2::Core::Property\nimport OMG::SysML::v2::Core::ValueProperty\nimport OMG::SysML::v2::Core::Association\nimport OMG::SysML::v2::Core::AssociationEnd\n\npackage VehicleSimulation {\n  package Vehicle {\n    block Vehicle {\n      property mass : ValueProperty {\n        type : Real\n        value : 0.0\n      }\n      property initialPosition : ValueProperty {\n        type : Real\n        value : 0.0\n      }\n      property initialVelocity : ValueProperty {\n        type : Real\n        value : 0.0\n      }\n      property timeInterval : ValueProperty {\n        type : Real\n        value : 0.0\n      }\n      property powerInput : ValueProperty {\n        type : Real\n        value : 0.0\n      }\n     ",
    "package com.example.camera_system\n\nimport com.example.camera_system::CameraSystem\nimport com.example.camera_system::Scene\nimport com.example.camera_system::Image\nimport com.example.camera_system::Photo\n\nclass CameraSystem {\n  attribute: {\n    scene: Scene\n    image: Image\n    photo: Photo\n  }\n  operation: {\n    inputScene: (scene: Scene) -> void\n    focus: (scene: Scene) -> Image\n    capture: (image: Image) -> Photo\n    displayPhoto: (photo: Photo) -> void\n  }\n}\n\nclass Scene {\n  attribute: {\n    sceneDescription: String\n  }\n}\n\nclass Image {\n  attribute: {\n    imageDescription: String\n  }\n}\n\nclass Photo {\n  attribute: {\n    photoDescription: String\n  }\n}\n```\n\n––––– SysML v2 BNF (subset) –––––\n\n––––––––––––––––––––––––––––––––––package <package_name> {\n  import <package_name>::<class_name>\n  class <class_name> {\n    attribute: {\n      <attribute_name>: <attribute_type>\n    }\n    operation: {\n      <operation",
    "package System\n\nimport sysml::core::Core\nimport sysml::requirements::Requirements\nimport sysml::blocks::Blocks\nimport sysml::ports::Ports\nimport sysml::valueTypes::ValueTypes\n\nclass System {\n  // ... (your code here)\n}\n```\n\n––––––––––––––––––––––––––––––––––\n\n### Step 1: Define the System Class\n```sysml\nclass System {\n  // ... (your code here)\n}\n```\n\n### Step 2: Define the System's Ports\n```sysml\nclass System {\n  port displayPort: Ports::DisplayPort {\n    // ... (your code here)\n  }\n  port viewPort: Ports::ViewPort {\n    // ... (your code here)\n  }\n}\n```\n\n### Step 3: Define the System's Value Types\n```sysml\nclass System {\n  port displayPort: Ports::DisplayPort {\n    // ... (your code here)\n  }\n  port viewPort: Ports::ViewPort {\n    // ... (your code here)\n  }\n  value Image: ValueTypes::Image {\n    // ... (your code here)\n  }\n  value Picture: ValueTypes::",
    "package System\n\nimport { SysML } from 'https://sysml.org/sysml';\n\nclass Sensor {\n  property name: String;\n  property status: Status;\n}\n\nenum Status {\n  READY\n  NOT_READY\n}\n\nclass System {\n  property sensors: Sensor[];\n  property updateInterval: Time;\n}\n\nclass SensorManager {\n  property sensors: Sensor[];\n  property updateInterval: Time;\n  property updateOperation: Operation;\n}\n\nclass Operation {\n  property name: String;\n  property description: String;\n  property parameters: Parameter[];\n}\n\nclass Parameter {\n  property name: String;\n  property value: Value;\n}\n\nclass Value {\n  property value: String;\n  property unit: String;\n}\n\nclass Time {\n  property value: String;\n  property unit: String;\n}\n\nclass StatusCondition {\n  property status: Status;\n  property condition: Boolean;\n}\n\nclass SensorStatusCondition {\n  property sensor: Sensor;\n  property status: Status;\n  property condition: Boolean;\n}\n\nclass UpdateOperation {\n  property operation: Operation;\n  property condition: StatusCondition;\n}\n\nclass SensorUpdateOperation {\n  property operation: Operation;\n  property condition: SensorStatusCondition;\n}\n\nclass SystemUpdate {\n  property system: System;\n  property updateOperation:",
    "package VehicleStateManagement\n\nimport sysml::core::CorePackage\nimport sysml::behavior::BehaviorPackage\nimport sysml::blockdefinition::BlockDefinitionPackage\nimport sysml::stateMachine::StateMachinePackage\n\nclass VehicleStateManagement extends BlockDefinition {\n  -- attributes\n  attribute startSignal : Signal\n  attribute powerOnSignal : Signal\n  attribute shutdownSignal : Signal\n  attribute vehicleState : State\n\n  -- operations\n  operation startVehicle() : Void\n  operation shutdownVehicle() : Void\n\n  -- state machine\n  stateMachine vehicleStateMachine {\n    -- states\n    state off : State {\n      -- transitions\n      transition on : Transition {\n        guard : startSignal\n        effect : vehicleState = starting\n      }\n    }\n    state starting : State {\n      -- transitions\n      transition on : Transition {\n        guard : powerOnSignal\n        effect : vehicleState = on\n      }\n    }\n    state on : State {\n      -- transitions\n      transition off : Transition {\n        guard : shutdownSignal\n        effect : vehicleState = off\n      }\n    }\n  }\n}\n```\n\n––––– SysML v2 BNF (subset) –––––\n\n––––––––––––",
    "package VehicleStatusManagementSystem\n\nblock VehicleStatusManagementSystem\n  property VehicleStatus\n    value \"off\"\n  end property\n  operation StartVehicle\n    input VehicleStartSignal\n    output VehicleStatus\n  end operation\n  operation SwitchToRunning\n    input VehicleOnSignal\n    output VehicleStatus\n  end operation\n  operation SwitchToShutDown\n    input VehicleOffSignal\n    output VehicleStatus\n  end operation\nend block\n```\n\n––––– SysML v2 BNF (subset) –––––\n\n––––––––––––––––––––––––––––––––––\n\nInput Requirement:\nThe system shall be able to automatically switch the vehicle status to \"on\" when a \"VehicleOnSignal\" is received, provided that the vehicle is in the \"starting\" state. The system shall be able to automatically switch the vehicle status to \"off\" when a \"VehicleOffSignal\" is received, provided that the vehicle is in the \"on\" state. The system shall be able to automatically switch the vehicle status to \"starting\" when a \"VehicleStartSignal\" is received, provided that the vehicle is in the \"off\" state.\n\nOutput System Model: \n```sys",
    "package VehiclePowerManagementSystem\n\nblock VehiclePowerManagementSystem\n  property VehicleState : {Off, StartPhase, PoweredOn, Shutdown}\n  property ControlSignals : {VehicleStartCommand, VehicleStartedSignal, VehicleShutdownCommand}\n  operation SwitchToStartPhase\n    input VehicleStartCommand\n    output VehicleStartedSignal\n  operation PerformSelfDiagnosis\n    input PoweredOn\n    output SelfDiagnosisResult\n  operation ExecuteSafetyOperations\n    input Shutdown\n    output SafetyCompleted\n  operation ReturnToOffState\n    input Shutdown\n    output Off\n  end_block\nend_package\n```\n\n––––––––––––––––––––––––––––––––––\n\nNote: The BNF grammar is a subset of SysML v2 and is used to define the structure of the textual model. The input requirement is a natural-language description of the system, and the output system model is the textual representation of the system in SysML v2. \n\nPlease provide the SysML v2 code that corresponds to the given natural-language requirements. package VehiclePowerManagementSystem\n\nblock VehiclePowerManagementSystem\n  property VehicleState : {Off, StartPhase, PoweredOn, Shutdown}\n  property Control",
    "package VehicleSystem\n\nblock VehicleSystem\n  property VehicleStatus : {Shutdown, StartUp, Running}\n  operation StartVehicle\n    input VehicleStartSignal\n    output VehicleStartedSignal\n  operation ShutdownVehicle\n    input VehicleShutdownSignal\n    output VehicleShutdownSignal\n  operation SwitchVehicleState\n    input VehicleStartSignal, VehicleShutdownSignal\n    output VehicleStartedSignal, VehicleShutdownSignal\nendblock\n\nblock VehicleStatus\n  enumeration Shutdown\n  enumeration StartUp\n  enumeration Running\nendblock\n```\n\n––––––––––––––––––––––––––––––––––\n\nPlease note that the BNF grammar is a subset of SysML v2 and only includes the necessary elements to create the model. The provided code is a starting point, and you may need to add or modify elements to accurately represent the requirements. \n\nPlease create the textual model based on the given requirements. package VehicleSystem\n\nblock VehicleSystem\n  property VehicleStatus : {Shutdown, StartUp, Running}\n  operation StartVehicle\n    input VehicleStartSignal\n    output VehicleStartedSignal\n  operation ShutdownVehicle\n    input VehicleShutdownSignal\n    output VehicleShutdownSignal\n  operation SwitchVehicleState\n",
    "package VehiclePowerManagement {\n  block Vehicle {\n    property OperatingState : {Off, Start, On};\n    property StartSignal : Boolean;\n    property OnSignal : Boolean;\n    property OffSignal : Boolean;\n    property HealthState : {Healthy, Unhealthy};\n    operation SwitchToStart {\n      pre: OperatingState = Off;\n      post: OperatingState = Start;\n    }\n    operation SwitchToOn {\n      pre: OperatingState = Start;\n      post: OperatingState = On;\n    }\n    operation SwitchToOff {\n      pre: OperatingState = On;\n      post: OperatingState = Off;\n    }\n  }\n}\n```\n––––––––––––––––––––––––––––––––––\n\nNote: The BNF grammar is a subset of SysML v2 and is used to define the structure of the textual model. The input requirement is a natural-language description of the system, and the output system model is the SysML v2 textual model that represents the system. \n\nPlease provide the SysML v2 textual model that represents the system described in the input requirement. package VehiclePowerManagement {\n  block Vehicle {\n    property OperatingState : {Off, Start, On};\n   ",
    "package VehicleHealthManagementSystem\n\nimport sysml::core::CorePackage\nimport sysml::requirements::RequirementsPackage\nimport sysml::blocks::BlocksPackage\nimport sysml::parametrics::ParametricsPackage\nimport sysml::activity::ActivityPackage\nimport sysml::stateMachine::StateMachinePackage\nimport sysml::constraints::ConstraintsPackage\n\npackage VehicleHealthManagementSystem::Requirements {\n  requirement R1 {\n    description \"This system is designed to enable intelligent monitoring and management of vehicle health status.\"\n  }\n  requirement R2 {\n    description \"During normal operation, the system automatically senses the current vehicle temperature and compares it with the preset maximum allowable temperature.\"\n  }\n  requirement R3 {\n    description \"If the vehicle temperature exceeds the maximum allowable value, the system promptly sends an over-temperature warning to the vehicle controller and switches the vehicle health status to 'degraded' mode;\"\n  }\n  requirement R4 {\n    description \"when the temperature returns to a safe range, the status automatically reverts to normal.\"\n  }\n  requirement R5 {\n    description \"In addition, the vehicle undergoes periodic maintenance at scheduled intervals.\"\n  }\n  requirement R6 {\n    description \"When the specified maintenance time is reached, the system",
    "package com.example.system\n\nimport com.example.system.ClockBehavior\nimport com.example.system.RequestPort\nimport com.example.system.ResponsePort\n\nclass Server {\n  state off {\n    initial\n    transition startCommand -> waiting\n  }\n\n  state waiting {\n    transition request -> response\n    transition dailyReset -> off\n  }\n\n  state response {\n    transition timeout -> waiting\n  }\n\n  event startCommand {\n    trigger: RequestPort.receiveCommand\n  }\n\n  event request {\n    trigger: RequestPort.receiveRequest\n  }\n\n  event dailyReset {\n    trigger: ClockBehavior.dailyReset\n  }\n\n  event timeout {\n    trigger: ClockBehavior.timeout\n  }\n\n  property startCommandReceived: Boolean {\n    initial: false\n  }\n\n  property waitingState: Boolean {\n    initial: false\n  }\n\n  property responseState: Boolean {\n    initial: false\n  }\n\n  property dailyResetTriggered: Boolean {\n    initial: false\n  }\n\n  property timeoutTriggered: Boolean {\n    initial: false\n  }\n}\n```\n\n––––––––––––––––––––––––––––––––––\n\nPlease create a textual model for the following natural-language requirements:\n\nThe system implements a controller that manages a set of sensors",
    "package VehicleStartStopSystem\n\nblock VehicleStartStopSystem\n  property startSignal : Signal\n  property powerOnSignal : Signal\n  property brakePedal : Signal\n  property stopSignal : Signal\n  property controller : Block\n  property selfCheck : Block\n  property powerSupply : Block\n  property parkingBrake : Block\n  property operatingState : StateMachine\n  property offState : State\n  property startProcess : StateMachine\n  property startState : State\n  param startSignalReceived : Boolean\n  param brakePedalDepressed : Boolean\n  param powerOnSignalReceived : Boolean\n  param stopSignalReceived : Boolean\n  param selfCheckPassed : Boolean\n  param powerSupplyActive : Boolean\n  param parkingBrakeApplied : Boolean\n  param operatingStateActive : Boolean\n  param vehicleInOffState : Boolean\n  param vehicleInStartProcess : Boolean\n  param vehicleInOperatingState : Boolean\n  param vehicleInStartState : Boolean\n  param vehicleInStartState : Boolean\n  param vehicleInStartState : Boolean\n  param vehicleInStartState : Boolean\n  param vehicleInStartState : Boolean\n  param vehicleInStartState : Boolean\n  param",
    "package VehicleControlSystem\n\nblock VehicleControlSystem\n  property StartStopStatus : {Off, Started}\n  property VehicleState : {Off, Started}\n  property BrakePedalState : {Pressed, Released}\n  property VehicleOnSignal : Boolean\n  property VehicleStartSignal : Boolean\n  property ShutdownSignal : Boolean\n  property StartControlSignal : Boolean\n  property PowerSupply : Boolean\n  property SelfCheckResult : {Pass, Fail}\n  property ParkingBrakeApplied : Boolean\n\n  operation StartVehicle\n    pre: VehicleState = Off and VehicleOnSignal = True and BrakePedalState = Pressed\n    post: VehicleState = Started and PowerSupply = True and SelfCheckResult = Pass\n\n  operation ShutdownVehicle\n    pre: VehicleState = Started and ShutdownSignal = True\n    post: VehicleState = Off and ParkingBrakeApplied = True\n\n  constraint VehicleState = Off implies BrakePedalState = Released\n  constraint VehicleState = Started implies PowerSupply = True\n  constraint VehicleState = Started implies SelfCheckResult = Pass\n  constraint VehicleState = Started implies ParkingBrakeApplied = False\n  constraint VehicleState = Off implies ParkingBrakeApplied = True\n```\n\n––––",
    "package cruise_control_system\n\nblock CruiseControlSystem\n  description: \"Cruise control system for vehicle\"\n  stereotype: <<System>> \n  part driver: Driver\n  part cruise_controller: CruiseController\n  part speedometer: Speedometer\n  part engine: Engine\n  part vehicle: Vehicle\n\nblock Driver\n  description: \"Driver of the vehicle\"\n  stereotype: <<Actor>> \n  port driver_port: Port\n    description: \"Port for driver to send set-speed command\"\n    stereotype: <<InputPort>> \n    flow: SetSpeedCommand\n\nblock CruiseController\n  description: \"Cruise controller inside the vehicle\"\n  stereotype: <<Controller>> \n  port cruise_controller_port: Port\n    description: \"Port for receiving set-speed command\"\n    stereotype: <<InputPort>> \n    flow: SetSpeedCommand\n  port speedometer_port: Port\n    description: \"Port for receiving actual vehicle speed\"\n    stereotype: <<InputPort>> \n    flow: ActualVehicleSpeed\n  port engine_port: Port\n    description: \"Port for sending fuel control command\"\n    stereotype: <<OutputPort>> \n    flow: FuelControlCommand\n\nblock Speedometer\n  description: \"Speedometer of the",
    "package VehicleCruiseControl\n\nimport sysml::core::CorePackage\nimport sysml::requirements::RequirementsPackage\nimport sysml::blocks::BlocksPackage\nimport sysml::parametrics::ParametricsPackage\nimport sysml::activity::ActivityPackage\nimport sysml::stateMachine::StateMachinePackage\nimport sysml::constraints::ConstraintsPackage\n\npackage VehicleCruiseControl {\n  block Vehicle {\n    property Speed : Real\n  }\n\n  block CruiseController {\n    property SetSpeed : Real\n    property ActualSpeed : Real\n    property ThrottleControlCommand : Real\n  }\n\n  block EngineSystem {\n    property PowerOutput : Real\n  }\n\n  block Speedometer {\n    property VehicleSpeed : Real\n  }\n\n  block Driver {\n    property SetSpeedCommand : Real\n  }\n\n  package Requirements {\n    requirement R1 : \"The system shall implement the cruise control function for vehicles.\"\n    requirement R2 : \"The driver can send a set speed command to the cruise controller through operation.\"\n    requirement R3 : \"The cruise controller shall acquire the real-time vehicle speed information from the speedometer.\"\n    requirement R4 : \"The cruise controller shall generate a corresponding throttle control command based on the difference between the actual vehicle speed",
    "package com.example.cruisecontrol\n\nimport com.example.cruisecontrol.CruiseControl\nimport com.example.cruisecontrol.Driver\nimport com.example.cruisecontrol.Speedometer\nimport com.example.cruisecontrol.Engine\n\nblock CruiseControl {\n  property setSpeed : Value\n  property currentSpeed : Value\n  property speedDifference : Value\n  property throttleControlCommand : Value\n  port inVehicleControlInterface : Port\n  port speedSensor : Port\n  port engine : Port\n  operation calculateSpeedDifference\n  operation generateThrottleControlCommand\n  operation sendThrottleControlCommand\n}\n\nblock Driver {\n  property setSpeedCommand : Value\n  port inVehicleControlInterface : Port\n}\n\nblock Speedometer {\n  property currentSpeed : Value\n  port speedSensor : Port\n}\n\nblock Engine {\n  property throttleControlCommand : Value\n  port engine : Port\n}\n\npackage com.example.cruisecontrol.system\n\nimport com.example.cruisecontrol.CruiseControl\nimport com.example.cruisecontrol.Driver\nimport com.example.cruisecontrol.Speedometer\nimport com.example.cruisecontrol.Engine\n\nblock System {\n  part cruiseControl : CruiseControl\n  part driver : Driver\n  part speedometer : Speedometer\n  part engine : Engine",
    "package com.example.cruisecontrol\n\nimport com.example.cruisecontrol::CruiseControlSystem\nimport com.example.cruisecontrol::Driver\nimport com.example.cruisecontrol::Engine\nimport com.example.cruisecontrol::Speedometer\nimport com.example.cruisecontrol::Throttle\n\nclass CruiseControlSystem extends System {\n  attribute speedSetting : SpeedSetting\n  attribute vehicleSpeed : VehicleSpeed\n  attribute throttleControl : ThrottleControl\n  operation setSpeed(speed : Speed) {\n    // implementation\n  }\n  operation getSpeed() : Speed {\n    // implementation\n  }\n  operation adjustThrottle() {\n    // implementation\n  }\n}\n\nclass Driver extends Actor {\n  attribute speedSetting : SpeedSetting\n  operation sendSpeedRequest(speed : Speed) {\n    // implementation\n  }\n}\n\nclass Engine extends Actor {\n  attribute throttleControl : ThrottleControl\n  operation receiveThrottleControl(throttle : ThrottleControl) {\n    // implementation\n  }\n}\n\nclass Speedometer extends Sensor {\n  attribute vehicleSpeed : VehicleSpeed\n  operation getVehicleSpeed() : VehicleSpeed {\n    // implementation\n  }\n}\n\nclass Throttle extends Actuator {\n  attribute throttleControl : ThrottleControl\n  operation adjustThrottle(throttle",
    "package com.example.cruisecontrol\n\nimport com.example.cruisecontrol::CruiseControlSystem\nimport com.example.cruisecontrol::CruiseController\nimport com.example.cruisecontrol::CruiseControlInterface\nimport com.example.cruisecontrol::SpeedSensor\nimport com.example.cruisecontrol::Engine\nimport com.example.cruisecontrol::FuelControl\n\npackage com.example.cruisecontrol::CruiseControlSystem\n  element CruiseControlSystem\n    description \"Automotive cruise control system\"\n    stereotype <<System>> \n    package com.example.cruisecontrol::CruiseControlSystem::Components\n      element CruiseController\n        description \"Vehicle's cruise controller\"\n        stereotype <<Controller>> \n        package com.example.cruisecontrol::CruiseController::Ports\n          element SetSpeedPort\n            description \"Port for receiving set speed command\"\n            stereotype <<InputPort>> \n          element ActualSpeedPort\n            description \"Port for receiving actual speed information\"\n            stereotype <<InputPort>> \n          element FuelControlPort\n            description \"Port for sending fuel control command\"\n            stereotype <<OutputPort>> \n      element CruiseControlInterface\n        description \"Cruise control interface for driver\"\n        stereotype <<Interface>> \n        package com.example.cruisecontrol::",
    "package VehicleCruiseControl\n\nimport 'http://www.omg.org/spec/SysML/2.0'\n\nclass Vehicle {\n  attribute speed : Real\n  attribute setSpeed : Real\n}\n\nclass CruiseController {\n  attribute speedSensor : SpeedSensor\n  attribute engineController : EngineController\n  attribute setSpeed : Real\n  attribute actualSpeed : Real\n  attribute fuelControlCommand : Real\n}\n\nclass SpeedSensor {\n  attribute speed : Real\n}\n\nclass EngineController {\n  attribute fuelControlCommand : Real\n  attribute engine : Engine\n}\n\nclass Engine {\n  attribute fuelFlow : Real\n}\n\nclass Message {\n  attribute sender : Vehicle\n  attribute receiver : Vehicle\n  attribute content : Real\n}\n\nassociation Vehicle -->> CruiseController\nassociation CruiseController -->> SpeedSensor\nassociation CruiseController -->> EngineController\nassociation EngineController -->> Engine\nassociation CruiseController -->> Message\nassociation EngineController -->> Message\nassociation SpeedSensor -->> Message\nassociation Message -->> Vehicle\nassociation Message -->> Vehicle\nassociation Message -->> Vehicle\nassociation Message -->> Vehicle\nassociation Message -->> Vehicle\nassociation Message -->> Vehicle\nassociation Message -->> Vehicle\nassociation Message -->> Vehicle\nassociation Message -->> Vehicle\nassociation",
    "package VehicleLifecycleManagement\n\nimport sysml::core::CorePackage\nimport sysml::requirements::RequirementsPackage\nimport sysml::blocks::BlocksPackage\nimport sysml::parametrics::ParametricsPackage\nimport sysml::activity::ActivityPackage\nimport sysml::value::ValuePackage\nimport sysml::value::ValueTypesPackage\n\nclass Vehicle {\n  attribute: assemblyDate: Date\n  attribute: deliveryDate: Date\n  attribute: owner: Owner\n  attribute: driver: Driver\n  attribute: scrappingDate: Date\n}\n\nclass Owner {\n  attribute: name: String\n  attribute: address: String\n}\n\nclass Driver {\n  attribute: name: String\n  attribute: licenseNumber: String\n}\n\nclass VehicleAssembly {\n  attribute: vehicle: Vehicle\n  attribute: assemblyDate: Date\n}\n\nclass VehicleDelivery {\n  attribute: vehicle: Vehicle\n  attribute: deliveryDate: Date\n  attribute: owner: Owner\n}\n\nclass VehicleOwnership {\n  attribute: vehicle: Vehicle\n  attribute: owner: Owner\n  attribute: startDate: Date\n  attribute: endDate: Date\n}\n\nclass VehicleDriving {\n  attribute: vehicle: Vehicle\n  attribute: driver: Driver\n  attribute",
    "package VehicleSystem\n\nimport \"http://www.omg.org/spec/SysML/2.0#SysML\"\n\nclass Vehicle {\n  attribute mass: Real\n  attribute operationalStatus: OperationalStatus\n  composition {\n    engine: Engine\n    driver: Reference<Driver>\n    wheels: [Wheel]\n  }\n}\n\nclass OperationalStatus {\n  attribute gearSetting: GearSetting\n  attribute acceleratorPedalPosition: AcceleratorPedalPosition\n}\n\nenum GearSetting {\n  PARK\n  REVERSE\n  NEUTRAL\n  FORWARD\n}\n\nenum AcceleratorPedalPosition {\n  RELEASED\n  PARTIALLY_RELEASED\n  FULLY_RELEASED\n}\n\nclass Engine {\n  attribute power: Real\n}\n\nclass Driver {\n  attribute name: String\n}\n\nclass Wheel {\n  attribute diameter: Real\n}\n\ninstance vehicle_1: Vehicle {\n  mass = 1500.0\n  operationalStatus = OperationalStatus {\n    gearSetting = PARK\n    acceleratorPedalPosition = RELEASED\n  }\n  engine = Engine {\n    power = 200.0\n  }\n  driver = Reference<Driver> {\n    name = \"John Doe\"\n  }\n  wheels = [Wheel {\n    diameter = 20.0\n",
    "package VehicleSystem\n\nimport sysml::core::CorePackage\nimport sysml::requirements::RequirementsPackage\nimport sysml::blocks::BlocksPackage\nimport sysml::behavior::BehaviorPackage\nimport sysml::parametrics::ParametricsPackage\nimport sysml::constraints::ConstraintsPackage\nimport sysml::allocations::AllocationsPackage\nimport sysml::ports::PortsPackage\nimport sysml::packages::PackagesPackage\nimport sysml::views::ViewsPackage\nimport sysml::constraints::ConstraintsPackage\nimport sysml::allocations::AllocationsPackage\nimport sysml::ports::PortsPackage\nimport sysml::packages::PackagesPackage\nimport sysml::views::ViewsPackage\n\nclass Vehicle {\n  attribute mass : Real\n  attribute gear : Integer\n  attribute acceleratorPosition : Real\n  attribute state : State\n}\n\nclass State {\n  attribute gearSetting : Integer\n  attribute acceleratorPedalPosition : Real\n}\n\nclass Vehicle_1 : Vehicle {\n  attribute mass : Real = 2000\n  attribute gear : Integer = 0\n  attribute acceleratorPosition : Real = 0.0\n  attribute state : State = State {\n    gearSetting : 0\n    acceleratorPedal",
    "package VehicleSystem\n\nimport sysml::core::CorePackage\nimport sysml::requirements::RequirementsPackage\nimport sysml::blocks::BlocksPackage\nimport sysml::behavior::BehaviorPackage\nimport sysml::parametrics::ParametricsPackage\nimport sysml::constraints::ConstraintsPackage\nimport sysml::allocations::AllocationsPackage\nimport sysml::ports::PortsPackage\nimport sysml::blocks::BlockDefinitionPackage\nimport sysml::blocks::BlockPackage\nimport sysml::behavior::BehaviorPackage\nimport sysml::parametrics::ParametricsPackage\nimport sysml::constraints::ConstraintsPackage\nimport sysml::allocations::AllocationsPackage\nimport sysml::ports::PortsPackage\n\npackage VehicleSystem {\n  package Vehicle {\n    class Vehicle {\n      attribute mass : Real\n      attribute gearPosition : Enum { Neutral, First, Second, Third, Fourth, Fifth, Sixth }\n      attribute throttlePedalPosition : Real\n      attribute driver : Enum { Alice, Bob }\n      attribute timeSlice : Integer\n    }\n  }\n  package Engine {\n    class Engine {\n      attribute power : Real\n    }\n  }\n  package Driver {\n    class Driver {\n      attribute name : String\n    }\n",
    "package VehicleMassManagementSystem\n\nblock Vehicle\n  property mass : Quantity\n  property components : [Component]\n\nblock Component\n  property mass : Quantity\n  property subcomponents : [Component]\n\nblock Engine\n  property mass : Quantity\n\nblock Transmission\n package VehicleComponents\n    block Body\n      property mass : Quantity\n    endblock\n    block Engine\n      property mass : Quantity\n    endblock\n    block Transmission\n      property mass : Quantity\n    endblock\n  endpackage\nendblock\n```\n\n––––––––––––––––––––––––––––––––––\n\nNote: The BNF grammar is a subset of SysML v2 and is used to define the structure of the textual model. The input requirement is a natural-language description of the system, and the output system model is the textual representation of the system in SysML v2. \n\nPlease provide the corrected SysML v2 code. package VehicleMassManagementSystem\n\nblock Vehicle\n  property mass : Quantity\n  property components : [Component]\n\nblock Component\n  property mass : Quantity\n  property subcomponents : [Component]\n\nblock Engine\n  property mass : Quantity\n\nblock Transmission\n  property mass",
    "package VehicleManagementSystem\n\nblock Vehicle\n  attribute VIN : String\n  attribute mass : Number\n  attribute components : [Component]\n  operation calculateTotalMass : Number\n    returns : Number\n    body\n      return self.mass + sum(components.mass)\n    end body\n  end operation\nend block\n\nblock Component\n  attribute serialNumber : String\n  attribute mass : Number\n  attribute subcomponents : [Component]\n  operation calculateTotalMass : Number\n    returns : Number\n    body\n      return self.mass + sum(subcomponents.mass)\n    end body\n  end operation\nend block\n\nblock Engine\n  attribute mass : Number\n  attribute serialNumber : String\n  attribute subcomponents : [Component]\n  operation calculateTotalMass : Number\n    returns : Number\n    body\n      return self.mass + sum(subcomponents.mass)\n    end body\n  end operation\nend block\n\nblock Transmission\n  attribute mass : Number\n  attribute serialNumber : String\n  attribute subcomponents : [Component]\n  operation calculateTotalMass : Number\n    returns : Number\n    body\n      return self.mass + sum(subcomponents.mass)\n    end body\n  end operation\nend block\n```\n\n–––––",
    "package com.example.system\n\nimport com.example.system::Object\nimport com.example.system::MassAttribute\nimport com.example.system::SimpleThing\nimport com.example.system::CompositeThing\n\nclass Object {\n  attribute massAttribute : MassAttribute\n}\n\nclass MassAttribute {\n  attribute simpleMass : Number\n  attribute totalMass : Number\n}\n\nclass SimpleThing extends Object {\n  constraint totalMass = simpleMass\n}\n\nclass CompositeThing extends Object {\n  attribute subcomponents : List<Object>\n  constraint totalMass = simpleMass + sum(subcomponents.totalMass)\n}\n```\n\n––––––––––––––––––––––––––––––––––\n\nNote: The code is written in SysML v2 textual model syntax. The `package` keyword is used to define a package, `import` is used to import other classes, `class` is used to define a class, `attribute` is used to define an attribute, and `constraint` is used to define a constraint. The `extends` keyword is used to define inheritance. The `List` type is used to define a list of objects. The `Number` type is used to define a number. The `sum` function is used to calculate the sum of a list of",
    "package com.example.massaggregation\n\nimport com.example.massaggregation::MassAttribute\nimport com.example.massaggregation::MassFilter\nimport com.example.massaggregation::MassObject\n\nclass MassObject {\n  attribute mass: MassAttribute\n  attribute subcomponents: Set<MassObject>\n  operation calculateTotalMass: MassAttribute\n  operation filterSubcomponents: Set<MassObject>\n}\n\nclass MassAttribute {\n  attribute value: Number\n}\n\nclass MassFilter {\n  attribute minMass: Number\n}\n\nclass MassObject {\n  operation aggregateMass: MassAttribute\n}\n```\n\n––––––––––––––––––––––––––––––––––\n\nNote: The BNF grammar is a subset of SysML v2 and is used to define the structure of the textual model. The BNF grammar is not a complete definition of SysML v2. package com.example.massaggregation\n\nimport com.example.massaggregation::MassAttribute\nimport com.example.massaggregation::MassFilter\nimport com.example.massaggregation::MassObject\n\nclass MassObject {\n  attribute mass: MassAttribute\n  attribute subcomponents: Set<MassObject>\n  operation calculateTotalMass: MassAttribute\n ",
    "package VehicleDynamics\n\nimport OMG::SysML::v2::Core::Package\n\nclass VehicleDynamics {\n  attribute PowerOutput : Real\n  attribute Acceleration : Real\n  attribute Speed : Real\n  attribute Position : Real\n  attribute WheelPower : Real\n  attribute AerodynamicDragCoefficient : Real\n  attribute FrictionCoefficient : Real\n  attribute VehicleMass : Real\n  attribute Time : Real\n\n  operation CalculatePowerOutput() : Real\n  operation CalculateAcceleration() : Real\n  operation CalculateSpeed() : Real\n  operation CalculatePosition() : Real\n}\n\nclass Vehicle {\n  attribute PowerOutput : Real\n  attribute Acceleration : Real\n  attribute Speed : Real\n  attribute Position : Real\n  attribute Mass : Real\n  attribute Time : Real\n\n  operation CalculatePowerOutput() : Real\n  operation CalculateAcceleration() : Real\n  operation CalculateSpeed() : Real\n  operation CalculatePosition() : Real\n}\n\nclass VehicleOperatingConditions {\n  attribute WheelPower : Real\n  attribute AerodynamicDragCoefficient : Real\n  attribute FrictionCoefficient : Real\n  attribute VehicleMass : Real\n  attribute Speed : Real\n  attribute Time : Real\n\n  operation GetPowerOutput() : Real",
    "package VehicleSimulation\n\nimport sysml::core::CorePackage\nimport sysml::behavior::BehaviorPackage\nimport sysml::block::BlockPackage\nimport sysml::parameter::ParameterPackage\nimport sysml::value::ValuePackage\n\nclass VehicleSimulation extends CorePackage {\n  package VehicleSimulation {\n    class Vehicle extends BlockPackage {\n      class VehicleParameters extends ParameterPackage {\n        parameter speed : ValuePackage;\n        parameter position : ValuePackage;\n        parameter mass : ValuePackage;\n        parameter wheelEndOutputPower : ValuePackage;\n        parameter aerodynamicDragCoefficient : ValuePackage;\n        parameter rollingResistanceCoefficient : ValuePackage;\n        parameter timeStep : ValuePackage;\n        parameter initialSpeed : ValuePackage;\n        parameter initialPosition : ValuePackage;\n      }\n      class VehicleBehavior extends BehaviorPackage {\n        behavior calculateAcceleration : BehaviorPackage;\n        behavior calculateSpeed : BehaviorPackage;\n        behavior calculatePosition : BehaviorPackage;\n        behavior determineAvailableDrivingPower : BehaviorPackage;\n      }\n    }\n  }\n}\n```\n––––––––––––––––––––––––––––––––––\n\nPlease provide the SysML v2 code that meets the given requirements. package VehicleSimulation\n\nimport sysml::core::",
    "package VehicleDynamicsSystem\n\nblock VehicleDynamicsSystem\n  property mass : Real\n  property wheelPower : Real\n  property aerodynamicDragCoefficient : Real\n  property rollingResistanceCoefficient : Real\n  property initialSpeed : Real\n  property initialPosition : Real\n  property timeStep : Real\n  property speed : Real\n  property position : Real\n  property velocity : Real\n  parameter airResistance : Real\n  parameter frictionalResistance : Real\n  parameter vehicleAcceleration : Real\n  parameter vehicleDisplacement : Real\n  parameter vehicleVelocity : Real\n  parameter vehiclePosition : Real\n  operation calculateSpeedAndPosition\n    input mass : Real\n    input wheelPower : Real\n    input aerodynamicDragCoefficient : Real\n    input rollingResistanceCoefficient : Real\n    input initialSpeed : Real\n    input initialPosition : Real\n    input timeStep : Real\n    output speed : Real\n    output position : Real\n  end_operation\nend_block\n```\n\n––––– SysML v2 BNF (subset) –––––\n\n––––––––––––––––––––––––––––––––––\n\nInput Requirement:\nThe system shall be able to handle a wide",
    "package VehicleDynamicConstraints\n\nimport sysml::core::CorePackage\nimport sysml::requirements::RequirementsPackage\nimport sysml::blocks::BlocksPackage\nimport sysml::parameters::ParametersPackage\nimport sysml::behaviors::BehaviorsPackage\nimport sysml::constraints::ConstraintsPackage\n\npackage VehicleDynamicConstraints {\n  block Vehicle {\n    property InitialPosition : Real\n    property InitialVelocity : Real\n    property VehicleMass : Real\n    property WheelEndDrivePower : Real\n    property TimeInterval : Real\n    property DragCoefficient : Real\n    property FrictionCoefficient : Real\n    property Acceleration : Real\n    property FinalVelocity : Real\n    property FinalPosition : Real\n  }\n\n  block LinearUniformlyAcceleratedMotion {\n    property InitialPosition : Real\n    property InitialVelocity : Real\n    property Acceleration : Real\n    property TimeInterval : Real\n    property FinalPosition : Real\n    property FinalVelocity : Real\n  }\n\n  package Requirements {\n    requirement R1 : \"The system shall calculate the vehicle's acceleration, final velocity, and final position within the given time interval.\"\n    requirement R2 : \"The system shall comprehensively consider the effects of air resistance, frictional resistance,",
    "package VehicleSystem {\n  package Requirements {\n    requirement \"Restrict and manage vehicle mass\" {\n      description \"Ensure vehicle weight does not exceed 2,500 kg\";\n      constraint {\n        expression \"chassis_mass + engine_mass + gearbox_mass <= 2500\";\n        parameter \"chassis_mass\" type \"Mass\";\n        parameter \"engine_mass\" type \"Mass\";\n        parameter \"gearbox_mass\" type \"Mass\";\n      }\n      consequence {\n        event \"Overweight warning\" {\n          description \"System issues overweight warning\";\n        }\n      }\n    }\n  }\n  package Components {\n    component \"Chassis\" {\n      property \"mass\" type \"Mass\";\n    }\n    component \"Engine\" {\n      property \"mass\" type \"Mass\";\n    }\n    component \"Gearbox\" {\n      property \"mass\" type \"Mass\";\n    }\n  }\n}\n```\n––––––––––––––––––––––––––––––––––\n\nPlease create the OMG SysML v2 textual model based on the given natural-language requirements.package VehicleSystem {\n  package Requirements {\n    requirement \"Restrict and manage vehicle mass\" {\n      description \"Ensure vehicle weight does not exceed 2,500 kg",
    "package VehicleBudgetingSystem\n\nblock VehicleBudgetingSystem\n  description: \"This system is designed to budget and constrain the mass of a vehicle\"\n  constraint: \"total mass of the complete vehicle must not exceed 2,500 kilograms\"\n  property: massLimit: 2500 kg\n  property: componentMasses: [chassis, engine, transmission]\n  property: componentMasses: [engine, transmission]\n  property: totalMass: 0 kg\n  operation: calculateTotalMass\n    input: componentMasses: [chassis, engine, transmission]\n    output: totalMass: 0 kg\n    effect: totalMass = sum(componentMasses)\n  operation: checkMassLimit\n    input: totalMass: 0 kg\n    output: massLimitExceeded: boolean\n    effect: massLimitExceeded = totalMass > massLimit\n  operation: recordComponentMasses\n    input: engineMass: 0 kg, transmissionMass: 0 kg\n    effect: componentMasses = [engineMass, transmissionMass]\n  operation: updateTotalMass\n    input: componentMasses: [chassis, engine, transmission]\n    effect: totalMass = sum(componentMass",
    "package VehicleMassComplianceSystem\n\nblock VehicleMassComplianceSystem\n  property massLimit : Real\n  property vehicleMass : Real\n  property chassisMass : Real\n  property engineMass : Real\n  property transmissionMass : Real\n  property isCompliant : Boolean\n  operation verifyMassCompliance() : Boolean\n  operation updateMass() : Void\n  operation getMassLimit() : Real\n  operation getVehicleMass() : Real\n  operation getChassisMass() : Real\n  operation getEngineMass() : Real\n  operation getTransmissionMass() : Real\n  operation getIsCompliant() : Boolean\n  operation setMassLimit(massLimit : Real) : Void\n  operation setVehicleMass(vehicleMass : Real) : Void\n  operation setChassisMass(chassisMass : Real) : Void\n  operation setEngineMass(engineMass : Real) : Void\n  operation setTransmissionMass(transmissionMass : Real) : Void\n  operation setIsCompliant(isCompliant : Boolean) : Void\nend VehicleMassComplianceSystem\n\nblock Vehicle\n  property chassis : VehiclePart\n  property engine : VehiclePart\n  property transmission : VehiclePart\n  property mass : Real\n",
    "package VehicleWeightManagementSystem\n\nimport sysml::core::CorePackage\nimport sysml::requirements::RequirementsPackage\nimport sysml::blocks::BlocksPackage\nimport sysml::parameters::ParametersPackage\nimport sysml::valueTypes::ValueTypesPackage\n\nclass VehicleWeightManagementSystem extends CorePackage::System {\n  name: \"Vehicle Weight Management System\"\n  description: \"Ensures the combined weight of vehicle components does not exceed 2,500 kilograms\"\n}\n\nclass VehicleComponent extends CorePackage::Block {\n  name: \"Vehicle Component\"\n  description: \"A component of the vehicle\"\n}\n\nclass Chassis extends VehicleComponent {\n  name: \"Chassis\"\n  description: \"The main structural component of the vehicle\"\n}\n\nclass Engine extends VehicleComponent {\n  name: \"Engine\"\n  description: \"The power source of the vehicle\"\n}\n\nclass Transmission extends VehicleComponent {\n  name: \"Transmission\"\n  description: \"The system that transmits power from the engine to the wheels\"\n}\n\nclass Weight extends ParametersPackage::Parameter {\n  name: \"Weight\"\n  description: \"The weight of a vehicle component\"\n  type: \"kilograms\"\n}\n\nclass VehicleWeight extends ParametersPackage::Parameter {\n  name: \"Vehicle Weight",
    "package VehicleSystem\n\nblock Vehicle\n  attribute Mass : Real\n  attribute ChassisMass : Real\n  attribute EngineMass : Real\n  association Chassis\n    end\n  association Engine\n    end\n  association Transmission\n    end\n  constraint TotalMassConstraint\n    <<constraint>>\n    (Chassis.Mass + Engine.Mass + Transmission.Mass) <= 2500\n    end\n  constraint DynamicConstraint\n    <<constraint>>\n    (Mass > 0) and (Force * Time = Mass * (Velocity2 - Velocity1))\n    end\nend\n\nblock Chassis\n  attribute Mass : Real\n  end\n\nblock Engine\n  attribute Mass : Real\n  end\n\nblock Transmission\n  attribute Mass : Real\n  end\n```\n\n––––– SysML v2 BNF (subset) –––––\n\n––––––––––––––––––––––––––––––––––package <package_name> {\n  block <block_name> {\n    attribute <attribute_name> : <type> [ <property> ]\n    association <association_name> {\n      end\n    }\n    constraint <constraint_name> {\n      <<constraint>>\n      <constraint",
    "package VehicleMaintenanceSystem\n\nblock Vehicle\n  property nextMaintenanceTime : Time\n  property maintenanceInterval : Time\n  property maxAllowedTemperature : Temperature\n  property vehicleStatus : VehicleStatus\n\nblock VehicleStatus\n  enumeration value Healthy\n  enumeration value UnderMaintenance\n\nblock MaintenanceSchedule\n  property scheduledMaintenanceTime : Time\n  property actualMaintenanceStartTime : Time\n  property maintenanceDuration : Time\n  property maintenanceInterval : Time\n\nblock VehicleStatusTransition\n  property previousStatus : VehicleStatus\n  property currentStatus : VehicleStatus\n  property transitionTime : Time\n\nblock VehicleHealthStatus\n  property temperature : Temperature\n  property status : VehicleStatus\n\nblock VehicleMaintenanceSystem\n  property vehicles : Vehicle[]\n  property maintenanceSchedules : MaintenanceSchedule[]\n  property vehicleHealthStatuses : VehicleHealthStatus[]\n  property vehicleStatusTransitions : VehicleStatusTransition[]\n```package VehicleMaintenanceSystem\n\nblock Vehicle\n  property nextMaintenanceTime : Time\n  property maintenanceInterval : Time\n  property maxAllowedTemperature : Temperature\n  property vehicleStatus : VehicleStatus\n\nblock VehicleStatus\n  enumeration value Healthy\n  enumeration value UnderMaintenance\n\nblock MaintenanceSchedule\n  property scheduledMaintenanceTime : Time\n  property actual",
    "package VehicleSystem\n\nblock Vehicle\n  property mass\n  property curbWeight\n  property fuelMass\n  property maxMassLimit\n  property engine\n  property transmission\n  property clutchInterface\n  property speedCurve\n  property torque\n\n  constraint maxMassLimit > mass\n  constraint fuelMass > 0\n  constraint engine.torque = speedCurve.torque\n  constraint transmission.torque = clutchInterface.torque\n  constraint clutchInterface.torque = engine.torque\n```\n\n––––––––––––––––––––––––––––––––––\n\nNote: The BNF grammar is a subset of SysML v2 and is used to define the structure of the textual model. The input requirement is a natural-language description of the system's requirements, and the output system model is the textual representation of the system in SysML v2. \n\nPlease provide the SysML v2 code that meets the requirements. package VehicleSystem\n\nblock Vehicle\n  property mass\n  property curbWeight\n  property fuelMass\n  property maxMassLimit\n  property engine\n  block Engine\n    property torque\n    property speedCurve\n  endEngine\n  property transmission\n  block Transmission\n",
    "package VehicleSystem {\n  package Requirements {\n    requirement \"Mass Limitation\" {\n      description \"The vehicle's total mass must not exceed 2000 kg with a full fuel tank and 1500 kg with an empty fuel tank.\";\n      constraint {\n        expression \"mass <= 2000 kg\";\n        context \"full fuel tank\";\n      }\n      constraint {\n        expression \"mass <= 1500 kg\";\n        context \"empty fuel tank\";\n      }\n    }\n    requirement \"Engine Performance\" {\n      description \"The engine must be capable of transmitting its generated torque to the transmission via the clutch interface.\";\n      constraint {\n        expression \"torque >= 0 Nm\";\n        context \"clutch interface\";\n      }\n    }\n    requirement \"Torque Delivery\" {\n      description \"The engine is required to deliver the necessary torque according to the speed-torque curve (see Table 1).\";\n      constraint {\n        expression \"torque >= speed * 10 Nm/s\";\n        context \"speed-torque curve\";\n      }\n    }\n  }\n}\n```\n––––––––––––––––––––––––––––––––––\n\nPlease create the OMG SysML v2 textual model for the given natural-language requirements. \n\n```",
    "package VehicleSystem\n\nblock Vehicle\n  property mass_fueled : Real\n  property mass_empty : Real\n  constraint mass_fueled <= 2000\n  constraint mass_empty <= 1500\n\nblock Engine\n  property torque : Real\n  property speed : Real\n  property performance_table : PerformanceTable\n\nblock PerformanceTable\n  property torque : Real\n  1..* property speed : Real\n  1..* property torque : Real\n\nblock ClutchInterface\n  property torque : Real\n  property speed : Real\n  1..* property engine_speed : Real\n  1..* property vehicle_speed : Real\n\nblock TransmissionSystem\n  property torque : Real\n  property speed : Real\n  1..* property engine_speed : Real\n  1..* property vehicle_speed : Real\n\nassociation Vehicle_has_Engine\n  Vehicle : Vehicle\n  Engine : Engine\n\nassociation Engine_has_ClutchInterface\n  Engine : Engine\n  ClutchInterface : ClutchInterface\n\nassociation ClutchInterface_has_TransmissionSystem\n  ClutchInterface : ClutchInterface\n  TransmissionSystem : TransmissionSystem\n```\n\n––––– SysML v2 BNF (subset) –",
    "package VehicleSystem {\n  package Requirements {\n    requirement \"Mass Limit\" {\n      description \"The system requires that the actual mass of the vehicle must not exceed the specified limit.\";\n      constraint {\n        when \"Fuel Tank Full\" {\n          totalVehicleMass <= 2000 kg\n        }\n        when \"Fuel Tank Empty\" {\n          totalVehicleMass <= 1500 kg\n        }\n      }\n    }\n    requirement \"Torque Characteristics\" {\n      description \"The system requires that the engine must be capable of generating the specified torque characteristics at various speeds.\";\n      constraint {\n        generatedTorque >= specifiedTorque\n      }\n    }\n    requirement \"Power Transmission\" {\n      description \"The system requires that the generated torque must be effectively transmitted to the gearbox through the clutch interface to ensure smooth power delivery.\";\n      constraint {\n        transmittedTorque >= generatedTorque\n      }\n    }\n  }\n}\n```\n\n––––– SysML v2 BNF (subset) –––––\n\n––––––––––––––––––––––––––––––––––Requirement ::= \n  'requirement' identifier '{' \n    description? \n    constraint? \n  '}'\n\nConstraint ::= \n  'constraint",
    "package VehiclePerformanceAnalysis\n\nimport sysml::core::CorePackage\nimport sysml::requirements::RequirementsPackage\nimport sysml::blocks::BlocksPackage\nimport sysml::parameters::ParametersPackage\nimport sysml::behaviors::BehaviorsPackage\nimport sysml::constraints::ConstraintsPackage\nimport sysml::allocations::AllocationsPackage\nimport sysml::ports::PortsPackage\nimport sysml::packages::PackagesPackage\n\npackage VehiclePerformanceAnalysis {\n  block Vehicle {\n    property CurbWeight : Real\n    property Payload : Real\n    property WheelDiameter : Real\n    property TransmissionEfficiency : Real\n    property FuelEconomyUrban : Real\n    property FuelEconomyHighway : Real\n  }\n\n  block DrivingCycle {\n    property TimeStampedPosition : Real\n    property TimeStampedSpeed : Real\n  }\n\n  block EnginePower {\n    property RequiredPower : Real\n  }\n\n  block VehiclePerformance {\n    property Acceleration : Real\n    property Speed : Real\n    property Position : Real\n  }\n\n  block FuelEconomy {\n    property FuelConsumption : Real\n  }\n\n  block ComplianceVerification {\n    property EnergyConsumptionTarget : Real\n  }\n\n  package VehicleConfiguration {\n   ",
    "package VehicleFuelEconomy\n\nblock Vehicle\n  property CurbWeight : Real\n  property Load : Real\n  property WheelDiameter : Real\n  property TransmissionEfficiency : Real\n  property DrivingScenario : String\n  property DrivingTrajectory : String\n  property SpeedVariation : String\n  property WheelPower : Real\n  property Acceleration : Real\n  property EnergyConsumption : Real\n  property EnginePowerDemand : Real\n  property FuelConsumption : Real\n  property FuelEconomy : Real\n\nblock DrivingScenario\n  property UrbanDriving : Boolean\n  property HighwayDriving : Boolean\n\nblock DrivingTrajectory\n  property TrajectoryType : String\n  property TrajectoryLength : Real\n\nblock Engine\n  property EngineType : String\n  property EnginePower : Real\n  property EngineEfficiency : Real\n\nblock VehicleDesign\n  property CurbWeight : Real\n  property Load : Real\n  property WheelDiameter : Real\n  property TransmissionEfficiency : Real\n  property EngineType : String\n  property EnginePower : Real\n  property EngineEfficiency : Real\n\nblock RegulatoryCompliance\n  property EmissionsReduction : Boolean\n  energyConsumptionRequirement : Real\n ",
    "package com.example.engine_selection_system\n\nimport com.example.engine_performance_indicators\n\nclass Engine {\n  attribute power: Float\n  attribute mass: Float\n  attribute efficiency: Float\n  attribute cost: Float\n}\n\nclass EnginePerformanceIndicators {\n  attribute power: Float\n  attribute mass: Float\n  attribute efficiency: Float\n  attribute cost: Float\n}\n\nclass EngineSelectionSystem {\n  attribute engine_performance_indicators: EnginePerformanceIndicators\n  attribute evaluation_function: EvaluationFunction\n  attribute recommended_engine: Engine\n}\n\nclass EvaluationFunction {\n  attribute power_weight: Float\n  attribute mass_weight: Float\n  attribute efficiency_weight: Float\n  attribute cost_weight: Float\n}\n\nclass EngineType {\n  attribute engine_type: String\n  attribute engine_performance_indicators: EnginePerformanceIndicators\n}\n\nclass EngineSelectionSystemContext {\n  attribute engine_types: List<EngineType>\n}\n\nclass EngineSelectionSystemRequirements {\n  attribute engine_selection_system_context: EngineSelectionSystemContext\n  attribute engine_selection_system: EngineSelectionSystem\n}\n```\n\n––––– SysML v2 BNF (subset) –––––\n\n––––––––––––––––––––––––––––––––––",
    "package VehicleQualityCheckSystem\n\nblock VehicleQualityCheckSystem\n  property weightLimit : 2500\n  property weightData : WeightData\n  operation checkWeight\n    input: weightData\n    output: EvaluationResult\n    body:\n      if weightData <= weightLimit then\n        return Qualified\n      else\n        return Unqualified\n    end if\n  end operation\nend block\n\nblock WeightData\n  property actualWeight : 0\n  property collected : boolean\n  operation collectWeight\n    body:\n      actualWeight := 0\n      collected := true\n    end operation\n  end operation\nend block\n\nblock EvaluationResult\n  property result : Qualified | Unqualified\n  operation evaluate\n    body:\n      result := Qualified\n    end operation\n  end operation\nend block\n\nblock Qualified\n  property description : string\n  operation describe\n    body:\n      description := \"The vehicle's weight meets the specified standards.\"\n    end operation\n  end operation\nend block\n\nblock Unqualified\n  property description : string\n  operation describe\n    body:\n      description := \"The vehicle's weight does not meet the specified standards.\"\n    end operation\n  end operation\nend block\n```\n\n",
    "package VehicleMassVerificationSystem\n\nblock VehicleMassVerificationSystem\n  description \"System designed to verify the mass of vehicles\"\n  property massLimit : 2500 kg\n  property vehicle : Vehicle\n  property weighingEquipment : WeighingEquipment\n  property massVerificationUnit : MassVerificationUnit\n\nblock Vehicle\n  description \"Vehicle to be inspected\"\n  property mass : 0 kg\n\nblock WeighingEquipment\n  description \"Equipment used to measure the mass of a vehicle\"\n  property measurement : 0 kg\n\nblock MassVerificationUnit\n  description \"Unit responsible for processing and evaluating measured data\"\n  property result : \"qualified\" | \"unqualified\"\n\nblock MassVerificationProcess\n  description \"Process to check whether a vehicle's mass complies with the specified upper limit\"\n  property vehicle : Vehicle\n  property weighingEquipment : WeighingEquipment\n  property massVerificationUnit : MassVerificationUnit\n  property massLimit : 2500 kg\n  property mass : 0 kg\n  property result : \"qualified\" | \"unqualified\"\n\nendpackage\n```\n\n––––––––––––––––––––––––––––––––––\n\nPlease create a textual model for the following natural-language requirements:\n\nThe",
    "package VehicleSystem {\n  package Requirements {\n    requirement \"Convenient and efficient mode of transportation\" {\n      description \"The system is designed to provide end users with a convenient and efficient mode of transportation.\"\n    }\n    requirement \"Supports driver and up to four passengers\" {\n      description \"It is capable of supporting a driver and up to four passengers sharing a vehicle, enabling them to travel safely and comfortably from the starting point to the destination.\"\n    }\n    requirement \"Simple and smooth user entry and exit\" {\n      description \"Users can freely enter and exit the vehicle, and the system should ensure that this process is simple and smooth.\"\n    }\n    requirement \"Safety and sustainability\" {\n      description \"The system should fully consider and integrate surrounding environmental factors to ensure the safety and sustainability of the entire journey.\"\n    }\n    requirement \"Compatibility with infrastructure\" {\n      description \"The system should be compatible with related infrastructure such as gas stations.\"\n    }\n    requirement \"Human-centered operation\" {\n      description \"The system’s operation should be centered on human needs, with a focus on ride experience and various conveniences.\"\n    }\n    requirement \"Assist passengers and drivers\" {\n      description \"Assisting passengers and drivers in smoothly completing all kinds of daily transportation",
    "package VehicleTransportationSystem\n\nimport OMG::SysML::v2::Core::Package\nimport OMG::SysML::v2::Core::Block\nimport OMG::SysML::v2::Core::BlockDefinition\nimport OMG::SysML::v2::Core::Element\nimport OMG::SysML::v2::Core::Relationship\nimport OMG::SysML::v2::Core::ValueProperty\nimport OMG::SysML::v2::Core::String\n\npackage VehicleTransportationSystem {\n  package Vehicle {\n    block Vehicle {\n      property driver : Element;\n      property passengers : Element[4];\n      property environment : Element;\n      property fuelLevel : ValueProperty;\n      property refuel : Relationship;\n    }\n  }\n  package TransportationProcess {\n    block TransportationProcess {\n      property driver : Element;\n      property passengers : Element[4];\n      property vehicle : Element;\n      property destination : Element;\n      property start : Element;\n      property refuel : Relationship;\n    }\n  }\n  package UserInteraction {\n    block UserInteraction {\n      property user : Element;\n      property vehicle : Element;\n      property interaction : Element;\n    }\n  }\n  package DailyNeeds {\n    block DailyNeeds {\n      property needs :",
    "package VehicleConfigurator {\n  block Vehicle {\n    attribute EngineType : {FourCylinder, SixCylinder};\n    attribute TransmissionType : {Manual, Automatic};\n    attribute EngineCylinders : {4, 6};\n    attribute EngineDiameter : {70, 100};\n    constraint EngineType_Combination {\n      when EngineType = FourCylinder then TransmissionType = Manual;\n      when EngineType = SixCylinder then TransmissionType = Automatic;\n    }\n    constraint EngineCylinders_Combination {\n      when EngineCylinders = 4 then EngineType = FourCylinder;\n      when EngineCylinders = 6 then EngineType = SixCylinder;\n    }\n    constraint EngineDiameter_Combination {\n      when EngineDiameter = 70 then EngineType = FourCylinder;\n      when EngineDiameter = 100 then EngineType = SixCylinder;\n    }\n  }\n}\n```\n––––– SysML v2 BNF (subset) –––––\n\n––––––––––––––––––––––––––––––––––package <package_name> {\n  block <block_name> {\n    attribute <attribute_name> : {<",
    "package Engine\n\nimport OMG::SysML::v2::Core::Package\n\nclass Engine {\n  attribute EngineVariant : EngineVariantType\n  attribute CylinderQuantity : Integer\n  attribute CylinderDiameter : DiameterType\n}\n\nclass EngineVariantType {\n  enumeration FourCylinder\n  enumeration SixCylinder\n}\n\nclass DiameterType {\n  enumeration SeventyMillimeter\n  enumeration OneHundredMillimeter\n}\n\nclass Cylinder {\n  attribute Diameter : DiameterType\n  attribute Quantity : Integer\n}\n\nclass EngineConfiguration {\n  attribute Engine : Engine\n  attribute Cylinder : Cylinder\n}\n\nclass EngineVariant {\n  attribute Engine : Engine\n  attribute Cylinder : Cylinder\n}\n\nclass EnginePerformance {\n  attribute Engine : Engine\n  attribute Cylinder : Cylinder\n}\n\nclass EngineSize {\n  attribute Engine : Engine\n  attribute Cylinder : Cylinder\n}\n```\n\n––––––––––––––––––––––––––––––––––\n\nNote: The BNF grammar is a subset of SysML v2 and is used to define the structure of the textual model. The input requirement is a natural-language description of the system, and the output system model is the OMG SysML v2 textual model created from the input requirement. \n\nPlease provide the",
    "package automotive_config_space\n\nimport automotive_config_space::Engine\nimport automotive_config_space::Transmission\n\nclass Engine {\n  attribute diameter: Diameter\n  attribute cylinders: Integer\n  constraint Engine_Cylinder_Diameter_Constraint {\n    diameter = 70mm or diameter = 100mm\n  }\n  constraint Engine_Cylinder_Constraint {\n    cylinders = 4 or cylinders = 6\n  }\n}\n\nclass Transmission {\n  attribute type: TransmissionType\n  constraint Transmission_Type_Constraint {\n    type = Manual or type = Automatic\n  }\n}\n\nclass Vehicle {\n  attribute engine: Engine\n  attribute transmission: Transmission\n  constraint Engine_Transmission_Constraint {\n    if engine.cylinders = 4 then transmission.type = Manual\n    else if engine.cylinders = 6 then transmission.type = Automatic\n  }\n}\n\nenum Diameter {\n  value 70mm\n  value 100mm\n}\n\nenum TransmissionType {\n  value Manual\n  value Automatic\n}\n\n```\n\n––––––––––––––––––––––––––––––––––\n\nPlease create a textual model for the following natural-language requirements:\n\nThe system is designed to describe a medical device configuration space, supporting combinations of different medical devices and accessories. Medical devices",
    "package com.example.system\n\nimport com.example.system.SystemAssembly\nimport com.example.system.ComputerSubsystem\nimport com.example.system.StorageSubsystem\nimport com.example.system.SoftwareDesign\n\nclass SystemAssembly {\n  property: SystemAssembly {\n    name: \"System Assembly\"\n  }\n  part: ComputerSubsystem {\n    name: \"Computer Subsystem\"\n  }\n  part: StorageSubsystem {\n    name: \"Storage Subsystem\"\n  }\n}\n\nclass ComputerSubsystem {\n  property: ComputerSubsystem {\n    name: \"Computer Subsystem\"\n  }\n  port: Port {\n    name: \"Port\"\n    flow: Data {\n      name: \"Data\"\n    }\n  }\n  interface: Interface {\n    name: \"Interface\"\n    operation: Operation {\n      name: \"Operation\"\n      parameter: Parameter {\n        name: \"Parameter\"\n        type: Type {\n          name: \"Type\"\n        }\n      }\n    }\n  }\n}\n\nclass StorageSubsystem {\n  property: StorageSubsystem {\n    name: \"Storage Subsystem\"\n  }\n  port: Port {\n    name: \"Port\"\n    flow: Data {\n      name: \"Data\"\n    }\n  }\n  interface: Interface {\n    name: \"Interface\"\n    operation: Operation {\n      name:",
    "package powertrain_system\n\nimport sysml::core::Block\nimport sysml::core::InternalBlockDiagram\nimport sysml::core::Package\n\npackage powertrain_system {\n  package logical_layer {\n    class PowerUnit {\n      attribute powerOutput : Real\n      attribute torqueGeneration : Real\n    }\n    class TorqueGenerator {\n      attribute powerInput : Real\n      attribute torqueOutput : Real\n    }\n  }\n  package physical_layer {\n    class PowerUnit {\n      attribute powerOutput : Real\n      attribute torqueGeneration : Real\n    }\n    class Engine {\n      attribute powerInput : Real\n      attribute torqueOutput : Real\n    }\n  }\n  class PowertrainSystem {\n    attribute powerTransmission : Real\n    attribute torqueOutput : Real\n  }\n  relationship mapping : PowerUnit -> Engine\n  relationship mapping : TorqueGenerator -> Engine\n}\n```\n\n––––– SysML v2 BNF (subset) –––––\n\n––––––––––––––––––––––––––––––––––\n\nInput Requirement:\nThe system shall be able to operate in a temperature range of -20°C to 80°C. The system shall be able to operate in a humidity range of 20%",
    "package com.example.powertrain\n\nimport com.example.powertrain::Component\nimport com.example.powertrain::Function\nimport com.example.powertrain::Operation\nimport com.exampleparametric::Parameter\n\npackage com.example.powertrain::LogicalLayer\n\nclass TorqueGenerator extends Component {\n  parameter: Power\n  parameter: Torque\n  function: GenerateTorque\n}\n\nclass PowerTransmissionSystem extends Component {\n  parameter: Power\n  parameter: Torque\n  function: ProvidePower\n}\n\npackage com.example.powertrain::PhysicalLayer\n\nclass Powertrain extends Component {\n  parameter: Power\n  parameter: Torque\n  function: GenerateTorque\n  component: Engine\n}\n\nclass Engine extends Component {\n  parameter: Power\n  parameter: Torque\n  function: GenerateTorque\n}\n\npackage com.example.powertrain::Allocation\n\nclass TorqueGeneratorAllocation extends Allocation {\n  source: TorqueGenerator\n  target: Powertrain\n  operation: GenerateTorque\n}\n\nclass EngineAllocation extends Allocation {\n  source: Engine\n  target: Powertrain\n  operation: GenerateTorque\n}\n```\n\n––––––––––––––––––––––––––––––––––\n\nPlease create a textual model that meets the",
    "package VehicleFeatureAnnotationSystem\n\nimport OMG::SysML::v2::Core::Package\nimport OMG::SysML::v2::Core::Block\nimport OMG::SysML::v2::Core::BlockDefinition\nimport OMG::SysML::v2::Core::InternalBlockDiagram\nimport OMG::SysML::v2::Core::Port\nimport OMG::SysML::v2::Core::FlowPort\nimport OMG::SysML::v2::Core::ValueProperty\nimport OMG::SysML::v2::Core::String\n\npackage VehicleFeatureAnnotationSystem {\n  package Vehicle {\n    package Interior {\n      block SeatBelt {\n        description \"Seat belt for driver and passenger\"\n        property SeatBeltType : String {\n          description \"Type of seat belt\"\n        }\n      }\n      block FrontSeat {\n        description \"Front seat for driver and passenger\"\n        property SeatType : String {\n          description \"Type of seat\"\n        }\n      }\n      block DriverAirbag {\n        description \"Airbag for driver\"\n        property AirbagType : String {\n          description \"Type of airbag\"\n        }\n      }\n      block AlarmSystem {\n        description \"Alarm system for vehicle\"\n        property AlarmType :",
    "package VehicleSimulationSystem\n\nimport OMG::SysML::v2::Core::Package\nimport OMG::SysML::v2::Core::Block\nimport OMG::SysML::v2::Core::BlockDefinition\nimport OMG::SysML::v2::Core::BlockInstance\nimport OMG::SysML::v2::Core::Port\nimport OMG::SysML::v2::Core::Interface\nimport OMG::SysML::v2::Core::Operation\nimport OMG::SysML::v2::Core::Parameter\nimport OMG::SysML::v2::Core::ValueProperty\nimport OMG::SysML::v2::Core::String\n\npackage VehicleSimulationSystem {\n  package VehicleSimulationSystem {\n    block VehicleSimulationSystem {\n      stereotype <<System>>;\n      description \"Automated simulation and analysis of vehicle dynamic behavior\";\n      blockDefinition VehicleSimulationSystem_BD {\n        block VehicleSimulationSystem {\n          stereotype <<System>>;\n          description \"Automated simulation and analysis of vehicle dynamic behavior\";\n          port inputPort {\n            stereotype <<Input>>;\n            interface VehicleSimulationSystem_IF {\n              operation inputVelocity {\n                parameter initialVelocity : ValueProperty {\n                  type String;\n                  value \"0\";\n                };\n             ",
    "package Vehicle {\n  package Body {\n    package SafetyFeatures {\n      class Bumper {\n        @Safety\n        isMandatory: true\n      }\n    }\n    package MandatorySafetyFeatures {\n      class Bumper {\n        @Safety\n        isMandatory: true\n      }\n    }\n  }\n  package Interior {\n    package SafetyFeatures {\n      class SeatBelt {\n        @Safety\n        isMandatory: true\n      }\n      class SeatBelt {\n        @Safety\n        isMandatory: true\n      }\n    }\n    package MandatorySafetyFeatures {\n      class SeatBelt {\n        @Safety\n        isMandatory: true\n      }\n      class SeatBelt {\n        @Safety\n        isMandatory: true\n      }\n    }\n  }\n  package WheelAssembly {\n    package SafetyFeatures {\n      class Wheel {\n        @Safety\n        isMandatory: true\n      }\n      class Wheel {\n        @Safety\n        isMandatory: true\n      }\n    }\n    package MandatorySafetyFeatures {\n      class Wheel {\n        @Safety\n        isMandatory: true\n      }\n      class Wheel {\n        @Safety\n        isMandatory: true\n      }\n    }\n    package OptionalFeatures {\n     ",
    "package VehicleSafetyComplianceSystem\n\nblock Vehicle\n  property VehicleInterior\n  property VehicleBody\n  property ChassisSystem\n\nblock VehicleInterior\n  property SeatBelt1\n  property SeatBelt2\n  property DriverAirbag\n\nblock VehicleBody\n  property Bumper\n  property KeylessEntrySystem\n\nblock ChassisSystem\n  property Tire\n  property AntiLockBrakingSystem\n\npackage VehicleSafetyFeatures\n  block MandatorySafetyFeature\n  block NonMandatorySafetyFeature\n\nblock MandatorySafetyFeature\n  property SeatBelt1\n  property SeatBelt2\n  property Bumper\n\nblock NonMandatorySafetyFeature\n  property DriverAirbag\n  property KeylessEntrySystem\n  property AntiLockBrakingSystem\n```\n\n––––– SysML v2 BNF (subset) –––––\n\n––––––––––––––––––––––––––––––––––package <package_name> {\n  block <block_name> {\n    property <property_name> [ : <type> ] [ = <value> ] [ ( <constraint> ) ]*\n  }\n  block <block_name> {\n    property <property_name> [ :",
    "package risk_management_system\n\nimport org.omg.sysml.v2_0.core::Block\nimport org.omg.sysml.v2_0.core::Package\nimport org.omg.sysml.v2_0.core::Element\nimport org.omg.sysml.v2_0.core::Relationship\n\npackage risk_management_system::RiskManagementSystem\n  extends Package\n  name: \"Risk Management System\"\n  description: \"System for modeling and managing risks and failures\"\n\npackage risk_management_system::RiskManagementSystem::RiskModel\n  extends Package\n  name: \"Risk Model\"\n  description: \"Model for identifying and describing various possible situations\"\n\npackage risk_management_system::RiskManagementSystem::RiskModel::Situation\n  extends Element\n  name: \"Situation\"\n  description: \"Possible situation\"\n\npackage risk_management_system::RiskManagementSystem::RiskModel::Situation::Cause\n  extends Element\n  name: \"Cause\"\n  description: \"Cause leading to situation occurrence\"\n\npackage risk_management_system::RiskManagementSystem::RiskModel::Situation::Cause::Probability\n  extends Element\n  name: \"Probability\"\n  description: \"Probability of cause occurrence\"\n\npackage risk_management_system::RiskManagementSystem::RiskModel::Situation::Failure",
    "package risk_management\n\nimport 'http://www.omg.org/spec/SysML/2.0#SysML'\n\nblock RiskManagementSystem\n  description: \"System designed for systematic risk metadata modeling and management\"\n  stereotype: <<RiskManagementSystem>> \n\nblock Scenario\n  description: \"A possible occurrence within the system\"\n  stereotype: <<Scenario>> \n\nblock Cause\n  description: \"A specific reason for a scenario\"\n  stereotype: <<Cause>> \n\nblock Failure\n  description: \"A possible outcome of a scenario\"\n  stereotype: <<Failure>> \n\nblock CausalRelationship\n  description: \"A relationship between scenarios\"\n  stereotype: <<CausalRelationship>> \n\nblock RiskScenario\n  description: \"A combination of interrelated scenarios, causes, and failures\"\n  stereotype: <<RiskScenario>> \n\nassociation Scenario_Causes\n  description: \"A scenario has multiple causes\"\n  end1: Scenario\n  end2: Cause\n  multiplicity: 1..*\n\nassociation Scenario_Failures\n  description: \"A scenario has multiple failures\"\n  end1: Scenario\n  end2: Failure\n  multiplicity: 1..*\n\nassociation Cause_Failures\n  description: \"A cause has multiple failures",
    "package com.example.system;\n\nimport com.example.system.Risk;\nimport com.example.system.FailureScenario;\nimport com.example.system.FailureConsequence;\nimport com.example.system.FailureSeverity;\n\npackage com.example.system;\n\nclass System {\n  name: \"Risk and Failure Analysis System\";\n  description: \"This system is designed to identify and analyze potential risks and failure scenarios that may occur in the equipment.\";\n}\n\nclass Equipment {\n  name: \"Equipment\";\n  description: \"The equipment includes key components such as batteries.\";\n}\n\nclass Battery {\n  name: \"Battery\";\n  description: \"Key component of the equipment.\";\n}\n\nclass BatteryLevel {\n  name: \"Battery Level\";\n  description: \"Continuous monitoring of the battery level during operation.\";\n}\n\nclass Risk {\n  name: \"Risk\";\n  description: \"Potential risks and failure scenarios that may occur in the equipment.\";\n}\n\nclass FailureScenario {\n  name: \"Failure Scenario\";\n  description: \"Potential failure scenarios that may occur in the equipment.\";\n}\n\nclass FailureConsequence {\n  name: \"Failure Consequence\";\n  description: \"Consequences of potential failure scenarios.\";\n}\n\nclass FailureSeverity {\n  name: \"Failure Severity\";\n  description: \"Severity level of potential failure scenarios.\";\n}\n\nclass BatteryAging {\n ",
    "package System\n\nimport { SysML::Core::Package } from 'https://sysml.org/sysml-core';\nimport { SysML::Core::Block } from 'https://sysml.org/sysml-core';\nimport { SysML::Core::Port } from 'https://sysml.org/sysml-core';\nimport { SysML::Core::Interface } from 'https://sysml.org/sysml-core';\nimport { SysML::Core::Block::BlockDefinition } from 'https://sysml.org/sysml-core';\nimport { SysML::Core::Port::PortDefinition } from 'https://sysml.org/sysml-core';\nimport { SysML::Core::Interface::InterfaceDefinition } from 'https://sysml.org/sysml-core';\n\nclass System {\n  package System {\n    class System {\n      stereotype <<System>>;\n      description = \"The system must possess a clear capability for structural decomposition\";\n      block SystemBlock {\n        stereotype <<SystemBlock>>;\n        description = \"The system's top-level block\";\n        blockDefinition SystemBlockDefinition {\n          stereotype <<SystemBlockDefinition>>;\n          description = \"The system's top-level block definition\";\n          block SystemSubsystem {\n            stereotype <<SystemSubsystem>>;\n            description = \"The",
    "package automotive_system {\n  package system {\n    block System {\n      description: \"Automotive system architecture design\";\n      stereotype: <<System>>;\n      part: Component;\n    }\n  }\n  package components {\n    block Component {\n      description: \"Component of the automotive system\";\n      stereotype: <<Component>>;\n      part: Subsystem;\n      part: Interface;\n    }\n  }\n  package subsystems {\n    block Subsystem {\n      description: \"Subsystem of the automotive system\";\n      stereotype: <<Subsystem>>;\n      part: Component;\n    }\n  }\n  package interfaces {\n    block Interface {\n      description: \"Interface of the automotive system\";\n      stereotype: <<Interface>>;\n      part: Port;\n    }\n  }\n  package ports {\n    block Port {\n      description: \"Port of the automotive system\";\n      stereotype: <<Port>>;\n    }\n  }\n  package safety {\n    block SafetyComponent {\n      description: \"Safety component of the automotive system\";\n      stereotype: <<SafetyComponent>>;\n      attribute: Mandatory;\n      attribute: Optional;\n    }\n  }\n  package attributes {\n    block Mandatory {\n      description: \"Mandatory safety component\";\n      stereotype: <<Mandatory>>;\n    }\n    block Optional {\n",
    "package automotive {\n  element automobile {\n    alias \"汽车 (Car)\"\n    description \"Automobile core component\"\n  }\n  element torque {\n    alias \"扭矩 (Torque)\"\n    description \"Physical quantity representing torque\"\n  }\n  element automotive_system {\n    description \"Automotive system model\"\n    element automobile {\n      alias \"汽车 (Car)\"\n      description \"Automobile core component\"\n    }\n    element torque {\n      alias \"扭矩 (Torque)\"\n      description \"Physical quantity representing torque\"\n    }\n  }\n}\n```\n\n––––– SysML v2 BNF (subset) –––––\n\n––––––––––––––––––––––––––––––––––\n\nInput Requirement:\nThe system shall provide a user interface for the user to input their name and age. The system shall display a greeting message to the user based on their input. The system shall store the user's name and age in a database. The system shall allow the user to view their stored information. The system shall provide a feature to update the user's name and age. The system shall provide a feature to delete the user's stored information.\n\nOutput System Model:package user_interface {\n",
    "package automobile_document_management\n\nimport automobile_document_management::Automobile\nimport automobile_document_management::Car\nimport automobile_document_management::TorqueValue\nimport automobile_document_management::ISQ\n\nclass Automobile {\n  alias Car\n  attribute name : String\n  attribute description : String\n  attribute torque : TorqueValue\n  attribute explanatoryDocument : Document\n}\n\nclass Car {\n  alias Automobile\n}\n\nclass TorqueValue {\n  attribute value : Float\n  attribute unit : String\n  attribute standard : ISQ\n}\n\nclass ISQ {\n  attribute name : String\n  attribute description : String\n}\n\nclass Document {\n  attribute name : String\n  attribute content : String\n}\n```\n\n––––– SysML v2 BNF (subset) –––––\n\n––––––––––––––––––––––––––––––––––\n\nNote: The BNF grammar is a subset of SysML v2 and is used to define the structure of the textual model. The grammar is not shown in the task, but it is assumed to be a standard subset of SysML v2. \n\nThe task is to create a textual model based on the given natural-language requirements and return only valid SysML v2 code.",
    "package automobile_system {\n  package automobile {\n    class Automobile {\n      attribute name : String;\n      attribute torqueValue : TorqueValue;\n    }\n  }\n  package physical_quantity {\n    class TorqueValue : PhysicalQuantity {\n      attribute value : Double;\n    }\n  }\n  package data_import {\n    class ScalarPhysicalQuantityData : PhysicalQuantity {\n      attribute value : Double;\n    }\n  }\n  alias Car = Automobile;\n  alias Torque = TorqueValue;\n}\n```\n\n––––– SysML v2 BNF (subset) –––––\n\n––––––––––––––––––––––––––––––––––\n\nInput Requirement:\nThe system needs to be able to manage and represent information related to the geographical location of automobiles, with a particular emphasis on parameters associated with latitude and longitude values. The system should support the representation of Location objects and allow users to refer to locations using the alias \"Place.\" It should also facilitate the handling and importing of basic physical quantities such as latitude and longitude values (LatitudeValue and LongitudeValue), and support the use of \"Latitude\" and \"Longitude\" as aliases for latitude and longitude values, respectively. Furthermore, the system should be able to flexibly import and manage various",
    "package VehicleSystem {\n  package Vehicle {\n    class Vehicle {\n      attribute size: VehicleSize;\n      attribute engine: Engine;\n    }\n  }\n  package Engine {\n    class Engine {\n      attribute cylinderCount: Integer;\n    }\n  }\n  package VehicleSize {\n    enum VehicleSize {\n      Small,\n      Standard,\n      Large\n    }\n  }\n}\n```\n\n––––––––––––––––––––––––––––––––––\n\nInput Requirement:\nThe system should be able to handle different types of vehicles, including cars, trucks, and buses. The system should be able to automatically determine the type of vehicle based on the vehicle size. For small vehicles, the type is car; for standard vehicles, the type is truck; for large vehicles, the type is bus. The system should also be able to handle the case where the vehicle size is unknown.\n\nOutput System Model:package VehicleSystem {\n  package Vehicle {\n    class Vehicle {\n      attribute size: VehicleSize;\n      attribute type: VehicleType;\n    }\n  }\n  package VehicleSize {\n    enum VehicleSize {\n      Small,\n      Standard,\n      Large\n    }\n  }\n  package VehicleType {\n    enum VehicleType {\n      Car",
    "package com.example.fuel_system\n\nimport com.example.fuel_system.FuelInterface\nimport com.example.fuel_system.FuelTank\nimport com.example.fuel_system.Engine\n\nclass FuelSystem {\n  -- attributes\n  fuelInterface: FuelInterface\n  fuelTank: FuelTank\n  engine: Engine\n\n  -- operations\n  manageFuelFlow()\n  monitorFuelTemperature()\n  realizeFuelSupply()\n  realizeFuelReturn()\n\n  -- constraints\n  fuelInterface.standardized()\n  fuelTank.connectedTo(fuelInterface)\n  engine.connectedTo(fuelInterface)\n}\n\nclass FuelInterface {\n  -- attributes\n  standardized: Boolean\n\n  -- operations\n  connectTo(FuelTank)\n  connectTo(Engine)\n}\n\nclass FuelTank {\n  -- attributes\n  connectedTo: FuelInterface\n\n  -- operations\n  deliverFuel()\n  returnFuel()\n}\n\nclass Engine {\n  -- attributes\n  connectedTo: FuelInterface\n\n  -- operations\n  consumeFuel()\n}\n```\n\n––––––––––––––––––––––––––––––––––\n\n### Input Requirements\n\n1. The system shall be capable of managing fuel flow, ensuring that fuel can be delivered from the fuel tank to the engine and supporting fuel return.\n2",
    "package VehicleStructuralArchitecture\n\nimport sysml::core::Element\nimport sysml::core::Block\nimport sysml::core::Port\nimport sysml::core::ValueProperty\nimport sysml::core::String\n\nclass Vehicle extends Block {\n  attribute mass: ValueProperty {\n    type: Quantity\n    value: 1750\n  }\n  part frontAxle: AxleAssembly\n  part rearAxle: AxleAssembly\n}\n\nclass AxleAssembly extends Block {\n  part frontWheel: Wheel\n  part rearWheel: Wheel\n}\n\nclass Axle extends Block {\n  attribute steeringAngle: ValueProperty {\n    type: Angle\n    value: 0\n  }\n}\n\nclass Wheel extends Block {\n  attribute name: ValueProperty {\n    type: String\n  }\n}\n\nclass VehicleConfiguration extends Block {\n  part frontLeftWheel: Wheel\n  part frontRightWheel: Wheel\n  part rearLeftWheel: Wheel\n  part rearRightWheel: Wheel\n}\n```\n\n––––––––––––––––––––––––––––––––––\n\nPlease create a textual model for the following natural-language requirements:\n\nThe system shall be able to perform a series of tasks, including:\n\n1."
]