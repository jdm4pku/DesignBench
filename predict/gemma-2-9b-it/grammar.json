[
    "package VehicleSystem\n\n  Block Vehicle {\n    Property vehicleMass : Real\n    Property currentStatus : String\n    \n    Block Engine {\n      Property engineType : String\n    }\n    \n    Block Driver {\n      Property driverName : String\n    }\n    \n    Association vehicle_has_engine {\n      Vehicle -- Engine\n    }\n    \n    Association vehicle_has_driver {\n      Vehicle -- Driver\n    }\n  }\n\nendpackage",
    "package VehicleModelingSystem {\n\n  // Block Definitions\n  block Vehicle {\n    ownedAttribute vehicleType : String\n    ownedAttribute isPowered : Boolean\n  }\n\n  block ManuallyOperatedVehicle {\n    extends Vehicle\n  }\n\n  block PoweredVehicle {\n    extends Vehicle\n  }\n\n  block ManuallyOperatedPoweredVehicle {\n    extends Vehicle\n  }\n\n  block Personnel {\n  }\n\n  block Engine {\n  }\n\n  // Relationship Definitions\n  relationship Drives {\n    source : Personnel\n    target : ManuallyOperatedVehicle\n  }\n\n  relationship PoweredBy {\n    source : Engine\n    target : PoweredVehicle\n  }\n\n  // Constraint Definitions\n  constraint ManuallyOperatedVehicle_Constraint {\n    context ManuallyOperatedVehicle\n    effect isPowered = False\n  }\n\n  constraint PoweredVehicle_Constraint {\n    context PoweredVehicle\n    effect isPowered = True\n  }\n\n}",
    "package VehicleStructure\n\n  Block Vehicle {\n    Property name : String\n    Property modelYear : Integer\n    \n    Part Composition engine : Engine\n    Part Composition transmission : Transmission\n    Part Composition wheels : Wheel [ multiplicity = 4 ]\n  }\n\n  Block Component {\n    Property name : String\n  }\n\n  Block Engine extends Component {\n  }\n\n  Block Transmission extends Component {\n  }\n\n  Block Wheel extends Component {\n  }\n\nendpackage",
    "Block: Vehicle\n  {\n    Property: type\n      {\n        Type: String\n      }\n  }\n\nBlock: SmallVehicle\n  {\n    IsA: Vehicle\n  }\n\nBlock: LargeVehicle\n  {\n    IsA: Vehicle\n  }\n\nBlock: Engine\n  {\n    Property: cylinderCount\n      {\n        Type: Integer\n      }\n  }\n\nBlock: SmallEngine\n  {\n    IsA: Engine\n    Property: cylinderCount\n      {\n        Value: 4\n      }\n  }\n\nBlock: LargeEngine\n  {\n    IsA: Engine\n    Property: cylinderCount\n      {\n        Value: 6\n      }\n  }\n\nBlock: Cylinder\n  {\n    Property: count\n      {\n        Type: Integer\n      }\n  }\n\nPart: SmallVehicle\n  {\n    Part: Engine\n      {\n        Part: SmallEngine\n      }\n  }\n\nPart: LargeVehicle\n  {\n    Part: Engine\n      {\n        Part: LargeEngine\n      }\n  }\n",
    "Block: TrafficSignalSystem\n  \n  Block: TrafficSignal\n    Property: color\n      Type: Enumeration\n      Literal: green\n      Literal: yellow\n      Literal: red\n    \n    Block: GreenTrafficSignal\n      Generalization: TrafficSignal\n      Property: state\n        Type: String\n        Value: \"go\"",
    "Block: System\n  Property: InformationClassification\n    Type: String\n    Value: \"Traffic Light\"\n  Property: InformationLevels\n    Type: Enumeration\n    Literal: Unclassified\n    Literal: Confidential\n    Literal: Secret\n  Property: InformationCodes\n    Type: String\n    Value: \"uncl\"\n    Value: \"conf\"\n    Value: \"secr\"\n  Property: InformationColors\n    Type: String\n    Value: \"Green\"\n    Value: \"Yellow\"\n    Value: \"Red\"\n  Property: GradeLevels\n    Type: Enumeration\n    Literal: A\n    Literal: B\n    Literal: C\n    Literal: D\n    Literal: F\n  Property: GradeScores\n    Type: Real\n    Value: 4.0\n    Value: 3.0\n    Value: 2.0\n    Value: 1.0\n    Value: 0.0",
    "Block: Vehicle\n  {\n    Property: type\n      {\n        Type: String\n        Value: \"Small\" or \"Large\"\n      }\n  }\n\nBlock: Engine\n  {\n    Property: cylinderCount\n      {\n        Type: Integer\n        Value: 4 to 6\n      }\n  }\n\nBlock: Cylinder\n  {\n    Property: role\n      {\n        Type: String\n        Value: \"Fundamental\"\n      }\n  }\n\nBlock: SmallVehicle\n  {\n    Generalization: Vehicle\n  }\n\nBlock: LargeVehicle\n  {\n    Generalization: Vehicle\n  }\n\nBlock: SmallVehicleEngine\n  {\n    Part: Engine\n  }\n\nBlock: LargeVehicleEngine\n  {\n    Part: Engine\n  }\n\nConstraint:\n  {\n    Name: \"EngineCylinderCount\"\n    Description: \"The engine cylinder count must be between 4 and 6.\"\n    Expression: Engine.cylinderCount >= 4 and Engine.cylinderCount <= 6\n  }",
    "package VehicleModelingSystem {\n\n  // Block Definitions\n  block Vehicle {\n    \n    // Property\n    property fuelTankCapacity : Real\n    property fuelType : String\n    property driverName : String\n    property driverLicense : String\n    \n    // Part\n    part fuelTank : FuelTank\n    \n    // Requirement\n    requirement \"Vehicle should have a fuel tank\"\n    \n  }\n\n  block FuelTank {\n    \n    // Property\n    property fuelType : String\n    property capacity : Real\n    \n  }\n\n  block Fuel {\n    \n    // Property\n    property type : String\n    \n  }\n\n  block Personnel {\n    \n    // Property\n    property name : String\n    property license : String\n    \n  }\n\n  // Association\n  association Vehicle -- fuelTank : FuelTank\n  association Vehicle -- driver : Personnel\n  association FuelTank -- fuel : Fuel\n\n}\n",
    "System WheelAssembly {\n  \n  Block WheelBearingUnit {\n    \n  }\n  \n  Block Tire {\n    \n  }\n  \n  Block Bead {\n    \n  }\n  \n  Block Hub {\n    \n  }\n  \n  Block Rim {\n    \n  }\n  \n  Block BoltMountingHole {\n    \n  }\n  \n  Block ThreadedHole {\n    \n  }\n  \n  Block BoltConnection {\n    \n  }\n  \n  Property Sealed {\n    Type Boolean\n    Value True\n  }\n  \n  Property Fastened {\n    Type Boolean\n    Value True\n  }\n  \n  Relationship ConnectsTo {\n    Source Tire\n    Target Bead\n    Type ConnectsTo\n  }\n  \n  Relationship ConnectsTo {\n    Source Bead\n    Target Rim\n    Type ConnectsTo\n  }\n  \n  Relationship ConnectsTo {\n    Source Rim\n    Target Hub\n    Type ConnectsTo\n  }\n  \n  Relationship ConnectsTo {\n    Source Hub\n    Target BoltMountingHole\n    Type ConnectsTo\n  }\n",
    "Block: System\n  {\n    Name = \"Fuel Management System\"\n    Description = \"This system is designed to achieve effective management of fuel flow. It consists of two main components: the fuel tank assembly and the engine. The fuel tank supplies fuel to the engine through a dedicated port, and can also receive excess fuel returned from the engine. Throughout the entire fuel transfer process, temperature information can be detected and transmitted at the interface to ensure the safety and efficiency of fuel supply. Users can obtain real-time data on fuel supply, return flow, and related temperature parameters, enabling visualized monitoring and precise control of fuel flow status. This effectively meets the engine's requirements for fuel management during operation.\"\n  }\n\nBlock: FuelTankAssembly\n  {\n    Name = \"Fuel Tank Assembly\"\n  }\n\nBlock: Engine\n  {\n    Name = \"Engine\"\n  }\n\nProperty: FuelSupplyPort\n  {\n    Name = \"Fuel Supply Port\"\n    Type = \"Port\"\n    Block = \"FuelTankAssembly\"\n  }\n\nProperty: FuelReturnPort\n  {\n    Name = \"Fuel Return Port\"\n    Type = \"Port\"\n    Block = \"Engine",
    "package VehicleConfigurationModel {\n\n  Block Vehicle {\n    Property mass : Real = 1750.0;\n    \n    Part frontAxle : Axle;\n    Part rearAxle : Axle;\n  }\n\n  Block Axle {\n    Property mass : Real;\n    \n    Part tire : Tire;\n    Part tire : Tire;\n  }\n\n  Block Tire {\n    Property mass : Real;\n  }\n\n  Block vehicle1_c1 : Vehicle {\n    Property mass : Real = 2000.0;\n    \n    Part frontAxle : DedicatedFrontAxle;\n  }\n\n  Block DedicatedFrontAxle : Axle {\n    Property steeringAngle : Real;\n  }\n\n}",
    "package CouplingSystem\n\n  Block Vehicle {\n    Property VehicleID : String\n    Block HitchReference {\n      Block Connector {\n        Property BallDiameter : Real\n      }\n    }\n  }\n\n  Block Trailer {\n    Property TrailerID : String\n    Block HitchReference {\n      Block Connector {\n        Property BallDiameter : Real\n      }\n    }\n  }\n\n  Relationship Connects {\n    Vehicle to HitchReference\n    HitchReference to Trailer\n  }\n\nend CouplingSystem",
    "Block: VehiclePowerTransmissionSystem\n  {\n    Property: name \"Vehicle Power Transmission System\"\n    Property: description \"This project aims to design and model a typical vehicle power transmission system, mainly including the engine, transmission (gearbox), clutch, driveshaft, rear axle assembly (including differential and left/right half-shafts), wheels, and the interface for interaction with the road surface. The engine receives control signals via a fuel command port and is coupled to the transmission through power and clutch ports. Power is transmitted via the driveshaft to the rear axle assembly. The rear axle assembly includes a differential that connects separately to the left and right half-shafts, delivering power to the rear wheels through interfaces between the shafts and wheels. Each rear wheel is equipped with interfaces to both the rear axle and the road, enabling power output to the ground. The interfaces between the internal components of the system are clearly defined, allowing for flexible combination and hierarchical decomposition at various levels and within major assemblies. This supports port and component binding, redefinition, and multi-level nesting, ensuring clear transmission of power and command flows among the components. The system is designed to be modular and reconfigurable, meeting the needs of vehicle dynamics modeling, simulation,",
    "Block: System\n  \n  Property: name\n    Value: \"Multi-Architecture System\"\n\n  Block: b11\n    Property: name\n      Value: \"Subsystem b11\"\n    Block: c1\n      Property: name\n        Value: \"Component c1\"\n      Port: pb\n        Property: name\n          Value: \"pb\"\n    Block: c2\n      Property: name\n        Value: \"Component c2\"\n    Interface: pe\n      Property: name\n        Value: \"pe\"\n    Connector: c1_pe\n      Source: c1.pb\n      Target: pe\n    Connector: c1_c2\n      Source: c1.pb\n      Target: c2.pb\n\n  Block: b12\n    Property: name\n      Value: \"Subsystem b12\"\n    Block: c3\n      Property: name\n        Value: \"Component c3\"\n    Port: pd\n      Property: name\n        Value: \"pd\"\n    Block: c4\n      Property: name\n        Value: \"Component c4\"\n    Interface: pf\n      Property: name",
    "System AutomotivePowertrain {\n  \n  Property fuelCommand {\n    Type : String\n  }\n  \n  Property engineState {\n    Type : Enumeration {\n      Value : \"Off\"\n      Value : \"On\"\n    }\n  }\n  \n  Property torque {\n    Type : Real\n  }\n  \n  Property drivingForce {\n    Type : Real\n  }\n  \n  Block Engine {\n    \n    Property torqueOutput {\n      Type : Real\n    }\n    \n    Action startEngine {\n      Trigger : engineState = \"Off\"\n      Effect : engineState = \"On\"\n    }\n    \n    Action stopEngine {\n      Trigger : engineState = \"On\"\n      Effect : engineState = \"Off\"\n    }\n    \n  }\n  \n  Block Transmission {\n    \n    Property torqueInput {\n      Type : Real\n    }\n    \n    Property torqueOutput {\n      Type : Real\n    }\n    \n  }\n  \n  Block Driveshaft {\n    \n    Property torqueInput {\n      Type : Real\n    }\n    \n    Property torqueOutput",
    "System PowertrainControlSystem {\n  \n  Requirement {\n    name = \"Engine Start and Shutdown Control\";\n    description = \"Supports engine start and shutdown control.\";\n  }\n  Requirement {\n    name = \"Fuel Command to Wheel Torque\";\n    description = \"Supports the entire power transmission process from fuel commands to actual wheel output torque.\";\n  }\n  Requirement {\n    name = \"Efficient and Coordinated Power Delivery\";\n    description = \"Ensures efficient and coordinated power delivery.\";\n  }\n  Requirement {\n    name = \"Reliable Power Response\";\n    description = \"Provides users with a reliable power response.\";\n  }\n  Requirement {\n    name = \"Handling Experience\";\n    description = \"Provides users with a reliable handling experience.\";\n  }\n  Requirement {\n    name = \"Stall Signal Handling\";\n    description = \"When a stall signal is detected, the relevant operational processes will be halted as required.\";\n  }\n  \n  Block Engine {\n    \n  }\n  Block FuelControlSystem {\n    \n  }\n  Block TorqueGenerator {\n    \n  }\n  Block Transmission {\n    \n  }\n  Block",
    "block System {\n  \n  requirement \"This system can achieve integrated management of the vehicle powertrain system according to the driver's fuel input command.\"\n  requirement \"When the engine start signal is activated, the system first generates the corresponding engine output torque based on the fuel command, then amplifies and transmits the torque sequentially through the transmission, and subsequently distributes the torque to each wheel, thereby achieving effective management and distribution of the vehicle's output power.\"\n  requirement \"When the engine shutdown signal is triggered, the relevant power output process is terminated.\"\n  requirement \"This entire process ensures that the vehicle performs automatic control accurately and efficiently in terms of power demand response, torque transmission, and power distribution, thereby enhancing the driving experience and improving energy efficiency.\"\n  \n  \n  \n}",
    "System [name=\"Power Connection and Disconnection System\"] {\n  \n  Block [name=\"Vehicle\"] {\n    \n    Property [name=\"Structural Frame\"] {\n      Type = \"Structural Frame\"\n    }\n    \n    Block [name=\"Hitch Ball\"] {\n      Property [name=\"Location\"] {\n        Type = \"Point\"\n      }\n      \n      Property [name=\"Diameter\"] {\n        Type = \"Dimension\"\n      }\n    }\n  }\n  \n  Block [name=\"Trailer\"] {\n    \n    Property [name=\"Structural Frame\"] {\n      Type = \"Structural Frame\"\n    }\n    \n    Block [name=\"Trailer Coupler\"] {\n      Property [name=\"Location\"] {\n        Type = \"Point\"\n      }\n      \n      Property [name=\"Compatibility\"] {\n        Type = \"Hitch Ball Diameter\"\n      }\n    }\n  }\n  \n  Block [name=\"Hitching Mechanism\"] {\n    \n    Interface [name=\"Connection Interface\"] {\n      Property [name=\"Connection State\"] {\n        Type = \"Boolean\"\n      }\n    }\n    \n    ",
    "System VehicleTrailerConnectionSystem {\n  \n  Block Vehicle {\n    Property chassis : String\n    Property towBall : String\n  }\n  \n  Block Trailer {\n    Property coupler : String\n    Property trailerFrame : String\n  }\n  \n  Connector Connection {\n    End vehicleEnd : Vehicle::towBall\n    End trailerEnd : Trailer::coupler\n  }\n  \n}",
    "package VehicleTrailerConnection\n\n  block Vehicle {\n    part Chassis\n    part TowBallDevice\n  }\n\n  block Trailer {\n    part TrailerChassis\n    part CouplerMechanism {\n      connector CouplingPoint\n    }\n  }\n\n  connector TowBall {\n    end VehicleEnd\n    end TrailerEnd\n  }\n\n  relationship Connects {\n    source Vehicle\n    target Trailer\n    end VehicleEnd\n    end TrailerEnd\n    multiplicity 1..1\n  }\n\n  usecase Hitch {\n    actor User\n    extend Connects\n  }\n\n  usecase UnHitch {\n    actor User\n    extend Connects\n  }",
    "System FuelSystem {\n  \n  Requirement fuelTankSupply {\n    text = \"The fuel tank is capable of providing fuel to the engine.\"\n  }\n  \n  Requirement engineReturnFuel {\n    text = \"The engine can return a portion of the fuel to the fuel tank.\"\n  }\n  \n  Requirement fuelFlowMonitoring {\n    text = \"The system can monitor key parameters such as temperature to ensure the safety and efficiency of fuel supply.\"\n  }\n  \n  Requirement interfaceConnections {\n    text = \"The entire fuel system is designed to support interface connections between different components, ensuring smooth and well-integrated fuel supply routes.\"\n  }\n  \n  Requirement stabilityAndReliability {\n    text = \"The fuel system is designed to meet the requirements for stability and reliability of fuel supply during vehicle operation.\"\n  }\n  \n}",
    "System FuelDeliverySystem {\n  \n  Block StorageTank {\n    Property Capacity : Real\n    Property FuelLevel : Real\n  }\n  \n  Block FuelPump {\n    Property Efficiency : Real\n  }\n  \n  Block VehicleFuelTank {\n    Property Capacity : Real\n    Property FuelLevel : Real\n  }\n  \n  Flow FuelFlow {\n    Source StorageTank\n    Target FuelPump\n  }\n  \n  Flow FuelDelivery {\n    Source FuelPump\n    Target VehicleFuelTank\n  }\n  \n  Requirement FuelManagement {\n    Description \"The system focuses on the transfer and quantity changes of fuel at each stage, ensuring that vehicles can obtain the required fuel in a timely, safe, and accurate manner to meet normal operation needs.\"\n  }\n}",
    "System [name=\"AutomobileAssemblyProcess\"] {\n  Block [name=\"VehicleAssembly\"] {\n    Property [name=\"GearboxInstalled\", type=\"Boolean\"]\n    Property [name=\"EngineInstalled\", type=\"Boolean\"]\n  }\n  Block [name=\"Gearbox\"] {\n    Property [name=\"Functional\", type=\"Boolean\"]\n  }\n  Block [name=\"Engine\"] {\n    Property [name=\"Functional\", type=\"Boolean\"]\n  }\n  Activity [name=\"AssemblyProcess\"] {\n    ActivityNode [name=\"Start\", type=\"Initial\"]\n    ActivityNode [name=\"InstallGearbox\", type=\"Action\"]\n    ActivityNode [name=\"InstallEngine\", type=\"Action\"]\n    ActivityNode [name=\"End\", type=\"Final\"]\n    Flow [source=\"Start\", target=\"InstallGearbox\"]\n    Flow [source=\"InstallGearbox\", target=\"InstallEngine\"]\n    Flow [source=\"InstallEngine\", target=\"End\"]\n  }\n  Requirement [name=\"SequentialAssembly\"] {\n    text=\"The assembly process must be sequential.\"\n  }\n  Requirement [name=\"FunctionalComponents\"] {\n    text=\"The fully assembled vehicle should",
    "package VehicleControlSystem\n\n  Block VehicleControlSystem {\n    \n    Property \"OperatingState\" {\n      Type: Enumeration\n      Value: Off, Starting, Running, HealthManagement, Maintenance, Degraded, Normal\n    }\n    \n    Property \"Temperature\" {\n      Type: Real\n    }\n    \n    Requirement \"StartUpRequirement\" {\n      text: \"The vehicle can only transition from the Off state to the Starting state when the brake pedal is pressed and a start signal is received; subsequently, it enters the Running state upon receiving a vehicle-on signal.\"\n    }\n    \n    Requirement \"RunningStateRequirement\" {\n      text: \"Once switched to the Running state, the system will automatically perform self-checks, supply power to the vehicle, and automatically apply the parking brake when exiting this state.\"\n    }\n    \n    Requirement \"HealthMonitoringRequirement\" {\n      text: \"The system also features self-perception of health, being capable of real-time detection and output of the vehicle’s temperature; when the temperature exceeds a safety threshold, the system will switch the vehicle to a degraded mode and send an over-temperature signal to the controller.\"\n    }",
    "System VehicleBehaviorModelingSystem {\n  \n  Block Vehicle {\n    \n    Property fuel : Real;\n    Property maintenanceInterval : Time;\n    Property temperatureThreshold : Real;\n    \n    State Shutdown {\n      Transition startTransition : Triggered by (brakePedalPressed and startSignalReceived)\n    }\n    State Startup {\n      Transition selfInspectionTransition : Triggered by (selfInspectionCompleted)\n      Transition powerSupplyTransition : Triggered by (powerSupplyCompleted)\n      Transition operationalTransition : Triggered by (powerSupplyCompleted)\n    }\n    State Operational {\n      Transition shutdownTransition : Triggered by (shutdownCommand)\n      Transition degradedTransition : Triggered by (overheatingDetected)\n    }\n    State Degraded {\n      Transition recoveryTransition : Triggered by (faultRecovered)\n    }\n    \n    Behavior overheatWarning {\n      Trigger overheatingDetected\n      Action sendWarningSignalToController\n    }\n    \n    Behavior maintenance {\n      Trigger maintenanceIntervalReached\n      Action performMaintenance\n    }\n    \n    Behavior faultRecovery {\n      Trigger faultDetected\n      Action recoverFromFault\n    }\n  }\n  \n  Block",
    "package VehicleDynamicsSimulation\n\n  Block VehicleDynamicsSimulation {\n    \n    Property mass : Real\n    Property position : Real\n    Property velocity : Real\n    Property acceleration : Real\n    Property roadSlope : Real\n    Property surfaceFriction : Real\n    \n    Activity startUp {\n      \n    }\n    Activity drivingProcess {\n      \n    }\n    Activity shutDown {\n      \n    }\n    \n    Block Road {\n      \n    }\n    \n    Block Vehicle {\n      \n    }\n    \n    Requirement snapshotRecording {\n      description: \"Support snapshot recording at multiple moments within the simulation time series\"\n    }\n    Requirement vehicleDynamicsAnalysis {\n      description: \"Provide detailed data to support vehicle dynamics analysis\"\n    }\n    Requirement roadAdaptabilityAssessment {\n      description: \"Help users predict vehicle performance under specific road and time conditions in a virtual environment\"\n    }\n    \n  }\n\n\n",
    "package ConfigurationManagementSystem\n\n  Block Automobile {\n    Property \"Main System\" : String = \"Automotive Product\"\n    \n    Block SubsystemA {\n      Property \"Configuration\" : String\n      \n      Block Configuration1 {\n        Property \"Components\" : String = \"Component 1, Component 2\"\n      }\n      \n      Block Configuration2 {\n        Property \"Components\" : String = \"Component 2, Component 3\"\n      }\n      \n      Constraint \"Subsystem A Configuration Constraint\" {\n        \"If Configuration2 of Subsystem A is selected, then Subsystem B must select Configuration3, or Subsystem A must not be Configuration2.\"\n      }\n    }\n    \n    Block SubsystemB {\n      Property \"Configuration\" : String\n      \n      Block Configuration1 {\n        Property \"Components\" : String = \"Component 4, Component 5\"\n      }\n      \n      Block Configuration2 {\n        Property \"Components\" : String = \"Component 5, Component 6\"\n      }\n    }\n    \n    Block ConfigurationA {\n      Property \"Description\" : String = \"Predefined Configuration A\"\n      \n      SubsystemA.",
    "package VehicleConfigurationSystem\n\n  Block VehiclePlatform {\n    \n    Property configurableCapabilities : Boolean = true\n    \n    Block SubsystemA {\n      Property variantType : String\n      \n      Block Component1 {\n        Property partNumber : String\n      }\n      \n      Block Component2 {\n        Property partNumber : String\n      }\n      \n      Port p1\n    }\n    \n    Block SubsystemB {\n      Property variantType : String\n      \n      Block Component3 {\n        Property partNumber : String\n      }\n      \n      Block Component4 {\n        Property partNumber : String\n      }\n      \n      Port p2\n    }\n    \n    Connector Connection {\n      end1 : SubsystemA::p1\n      end2 : SubsystemB::p2\n    }\n    \n    Configuration VehicleConfigA {\n      \n    }\n    \n    Configuration VehicleConfigB {\n      \n    }\n  }\nend VehicleConfigurationSystem",
    "Block: System\n  {\n    Name = \"Vehicle Configuration System\"\n    Description = \"This system is designed to provide flexible solutions for vehicle product line configuration, capable of automatically matching suitable combinations of engines, transmissions, and wheels based on different performance requirements and user preferences. For example, when high performance is required, the system will configure a 6-cylinder engine, automatic transmission, and wide-rim wheels, ensuring compatibility among these components. For standard performance requirements, a combination of a 4-cylinder engine, manual transmission, and narrow-rim wheels is offered. The system enforces a series of configuration constraints to ensure that each configuration scheme meets vehicle performance and component compatibility requirements, preventing unreasonable combinations. Ultimately, it enables customized vehicles tailored to individual user needs. Additionally, the system supports the selection of multiple vehicle model variants, allowing enterprises to quickly respond to market demands and achieve flexible expansion and management of their product lines.\"\n  }\n  \n  Property: PerformanceRequirement\n    {\n      Type = \"String\"\n      Description = \"Performance requirement of the vehicle\"\n    }\n  \n  Property: EngineType\n    {\n      Type = \"String\"\n      Description = \"Type of engine\"\n",
    "package VehicleManagementSystem {\n\n  // Block Definitions\n  block Vehicle {\n    property Mass : Real\n    property FuelStatus : String\n  }\n\n  block Engine {\n    property Torque : Real\n  }\n\n  block Transmission {\n  }\n\n  block DriveInterface {\n  }\n\n  // Requirement Definitions\n  requirement MassLimit {\n    text \"Vehicle mass shall not exceed the defined maximum mass.\"\n  }\n\n  requirement FuelRequirement {\n    text \"Vehicle fuel status shall comply with the defined requirements.\"\n  }\n\n  requirement PowerDelivery {\n    text \"Engine shall output torque and be effectively connected to the transmission via a drive interface.\"\n  }\n\n  requirement Reliability {\n    text \"Vehicle shall meet specified performance and durability throughout its lifecycle.\"\n  }\n\n  // Allocation\n  allocate MassLimit to Vehicle.Mass\n  allocate FuelRequirement to Vehicle.FuelStatus\n  allocate PowerDelivery to Engine, Transmission, DriveInterface\n  allocate Reliability to Vehicle\n\n}",
    "package VehicleMassComplianceSystem\n\n  Block VehicleMassComplianceSystem {\n    Property \"Maximum Permissible Mass\" : Real = 2500\n    Property \"Test Status\" : String = \"Pending\"\n    \n    Requirement \"Verify Vehicle Mass Compliance\" {\n      text = \"This system is designed to verify vehicle mass compliance to ensure that the actual mass of the tested vehicles does not exceed the specified maximum permissible mass.\"\n    }\n    \n    Requirement \"Measure Vehicle Mass\" {\n      text = \"Each participating vehicle must have its actual mass measured using weighing equipment operated by a test operator.\"\n    }\n    \n    Requirement \"Compare Measured Mass\" {\n      text = \"The system then compares the measured mass with the required value (e.g., a maximum permissible mass of 2,500 kilograms).\"\n    }\n    \n    Requirement \"Determine Compliance\" {\n      text = \"If the vehicle's actual mass is less than or equal to the strictly defined upper limit, it is considered compliant; otherwise, it is deemed non-compliant.\"\n    }\n    \n    Requirement \"Support Sequential Testing\" {\n      text = \"The system supports sequential testing and result determination",
    "Block: System\n  {\n    Property: name\n      value: \"Water Supply Network\"\n    Property: description\n      value: \"This system is designed to implement a water supply network that delivers hot and cold water from a main supply pipe (SpigotBank) through corresponding interfaces (Spigot) to one or more faucets (Faucet). Each faucet is equipped with hot and cold water inlets (FaucetInlet). The system is required to reliably deliver hot and cold water from the respective outlets of the main supply pipe to the corresponding inlets of all downstream faucets, ensuring simultaneous supply to multiple water usage points. Additionally, the system must guarantee correct connection and smooth transmission of the hot and cold water pipelines, thereby meeting the basic requirements for distributed hot and cold water supply in various settings.\"\n  }\n\nBlock: SpigotBank\n  {\n    Property: name\n      value: \"Main Supply Pipe\"\n  }\n\nBlock: Spigot\n  {\n    Property: name\n      value: \"Interface\"\n  }\n\nBlock: Faucet\n  {\n    Property: name\n      value: \"Faucet\"\n  }\n\nBlock: FaucetInlet\n  {\n    Property:",
    "package VehicleQualityAnalysisSystem {\n\n  Block VehicleQualityAnalysisSystem {\n    \n    Property totalMass : Real;\n    \n    Requirement req_quality_data_input {\n      text = \"Users can input quality data for each component.\";\n    }\n    Requirement req_mass_calculation {\n      text = \"The system will automatically aggregate and calculate the total mass of the vehicle.\";\n    }\n    Requirement req_quality_analysis_requirements {\n      text = \"The system supports the definition of quality analysis requirements.\";\n    }\n    Requirement req_analysis_use_cases {\n      text = \"The system supports the formulation of analysis use cases.\";\n    }\n    Requirement req_analysis_task_generation {\n      text = \"Based on set analysis objectives, it can automatically generate analysis tasks and plans.\";\n    }\n    Requirement req_requirements_tracking {\n      text = \"Achieving comprehensive evaluation and requirements tracking for vehicle quality.\";\n    }\n    Requirement req_design_optimization {\n      text = \"Provides scientific support for vehicle design and performance optimization.\";\n    }\n    Requirement req_development_efficiency {\n      text = \"Improving overall development efficiency and",
    "Block: System\n  {\n    Name = \"Vehicle Powertrain Configuration System\"\n    Description = \"This system aims to provide optimal solutions for vehicle powertrain configuration, focusing primarily on the trade-off analysis of engine types to select the engine configuration that performs best across multiple key performance indicators, including power, mass, efficiency, reliability, and cost.\"\n    \n    Property: power\n      {\n        Name = \"Power\"\n        Type = \"Real\"\n      }\n    Property: mass\n      {\n        Name = \"Mass\"\n        Type = \"Real\"\n      }\n    Property: efficiency\n      {\n        Name = \"Efficiency\"\n        Type = \"Real\"\n      }\n    Property: reliability\n      {\n        Name = \"Reliability\"\n        Type = \"Real\"\n      }\n    Property: cost\n      {\n        Name = \"Cost\"\n        Type = \"Real\"\n      }\n    \n    Requirement: engine_tradeoff_analysis\n      {\n        Description = \"The system supports modeling of various engine structures (such as four-cylinder engines, six-cylinder engines, etc.), and is capable of automatically assembling related components,",
    "Block: System\n  {\n    Name = \"Vehicle Fuel Economy System\"\n    Description = \"This system is designed to ensure that vehicle fuel economy meets relevant regulatory and performance requirements.\"\n    \n    Property: RangePerGallonUrban\n      {\n        Name = \"RangePerGallonUrban\"\n        Type = \"Real\"\n        Value = \"25\"\n        Unit = \"miles\"\n      }\n    Property: RangePerGallonHighway\n      {\n        Name = \"RangePerGallonHighway\"\n        Type = \"Real\"\n        Value = \"30\"\n        Unit = \"miles\"\n      }\n    Property: FuelEconomyUnit\n      {\n        Name = \"FuelEconomyUnit\"\n        Type = \"String\"\n        Value = \"miles per gallon\"\n      }\n    Property: Load\n      {\n        Name = \"Load\"\n        Type = \"Real\"\n        Value = \"1000\"\n        Unit = \"pounds\"\n      }\n    \n    Requirement: FuelEconomyRequirement\n      {\n        Name = \"FuelEconomyRequirement\"\n        Description = \"The measured fuel economy must meet the minimum requirements",
    "package VehicleDynamicsSimulator\n\n  Block VehicleDynamicsSimulator {\n    \n    Property mass : Real\n    Property initialPosition : Real\n    Property initialVelocity : Real\n    Property powerOutput : PowerOutputSequence\n    Property timeStep : Real\n    \n    Requirement req_1 : \"This system is designed to simulate and analyze the longitudinal (straight-line) dynamic characteristics of vehicle motion.\"\n    Requirement req_2 : \"Users can input vehicle mass parameters, initial position, initial velocity, and a set of segmented power output data.\"\n    Requirement req_3 : \"Based on the input power and operating conditions, the system will successively calculate the vehicle’s acceleration, velocity, and position at each moment using dynamic equations with a specified time step.\"\n    Requirement req_4 : \"It will then output the sequences of acceleration, velocity variation, and displacement throughout the vehicle's entire motion process.\"\n    Requirement req_5 : \"This provides data support and a decision-making basis for applications such as vehicle performance analysis, control strategy development, and driving behavior evaluation.\"\n    \n    \n    \n  }\n\n  \n  \n  \n  \n  package Vehicle",
    "package VehicleSystem\n\n  Block Vehicle {\n    Property mass : Real = 2500.0;\n    \n    Block FrontAxleAssembly {\n      Property mass : Real = 150.0;\n      \n      Block FrontAxle {\n        Property mass : Real;\n        Property steeringAngle : Angle;\n      }\n      \n      Block FrontWheel {\n        Property mass : Real;\n      }\n      \n      FrontWheel * 2\n      FrontAxle\n    }\n    \n    Block RearAxleAssembly {\n      Property mass : Real = 250.0;\n      \n      Block RearAxle {\n        Property mass : Real;\n      }\n      \n      Block RearWheel {\n        Property mass : Real;\n      }\n      \n      RearWheel * 2\n      RearAxle\n    }\n  }\nend VehicleSystem",
    "System VehicleSafetySecuritySystem {\n  \n  Requirement \"This system is designed to manage and display vehicle safety and security-related features and components, ensuring that users can intuitively understand the safety and security configurations of the entire vehicle and its constituent parts.\"\n  Requirement \"The vehicle includes components such as seat belts, airbags, and alarm devices.\"\n  Requirement \"Among these, seat belts and bumpers are mandatory safety features, while airbags and anti-lock braking systems are optional safety features.\"\n  Requirement \"Additionally, the vehicle is equipped with security devices such as alarms and keyless entry systems.\"\n  Requirement \"The system is capable of filtering and organizing all vehicle-related components based on safety or security features, and visualizing them in forms such as tree structures or tables.\"\n  Requirement \"This enables end users to quickly review the safety configurations of the whole vehicle and its sub-systems, clearly distinguishing between mandatory and non-mandatory safety functions, thereby achieving comprehensive management and transparent display of the vehicle’s safety and security features.\"\n  \n  Block SeatBelt {\n    Property \"Mandatory\" : Boolean = true\n  }\n  Block Airbag {\n    Property \"Mandatory\" : Boolean = false\n  }\n  Block",
    "Block: System\n  {\n    Property: x\n    Property: y\n    Property: z\n    \n    Block: ApplicationLayer\n      {\n        Usage: ServiceLayer\n      }\n    Block: ServiceLayer\n      {\n        Usage: DataLayer\n      }\n    Block: DataLayer\n      {\n      }\n  }**Note:**\n\n* This is a simplified example. \n* You may need to use additional SysML elements (e.g., Requirements, Constraints, Ports, Connectors) to fully capture the requirements.\n* The provided BNF is a subset of the full SysML v2 grammar.\n\n\n\nLet me know if you have any other requirements you'd like me to model. \n",
    "Block: TorqueGenerationSystem\n  {\n    Requirement: TorqueGenerationRequirement\n      {\n        text: \"The system should include relevant components capable of generating torque, and it is required that the torque produced during operation must be greater than zero newton-meters to ensure driving capability.\"\n      }\n    Requirement: LogicLayerAllocationRequirement\n      {\n        text: \"During the design and implementation process, the logic layer's torque generator function should be effectively allocated and mapped to the physical layer of the powertrain (including actual components such as the engine), thereby ensuring the actual generation and transmission of torque to meet the overall vehicle power output requirements.\"\n      }\n    Property: Torque\n      {\n        type: Real\n        unit: \"newton-meters\"\n        constraint: \"Torque > 0\"\n      }\n  }",
    "Block: System\n  Property: power_transmission\n    Type: Boolean\n    Value: True\n  Property: power_output\n    Type: Boolean\n    Value: True\n  Property: torque_generation\n    Type: Boolean\n    Value: True\n  Block: TorqueGenerator\n    Property: function_name\n      Type: String\n      Value: Torque Generation\n  Block: Powertrain\n    Block: Engine\n      Property: function_name\n        Type: String\n        Value: Torque Generation\n  Allocation: System.TorqueGenerator --> Powertrain.Engine",
    "package VehicleSafetyAndAntitheftFunctionCatalogue\n\n  requirement \"BasicSafetyComponents\" {\n    description \"At a minimum, basic safety components such as front seat belts and bumpers must be installed on the body and interior to ensure the fundamental personal safety of occupants.\"\n  }\n\n  requirement \"SafetyFeatures\" {\n    description \"Certain components, such as the driver’s airbag and anti-lock braking system, are characterized as safety features but may or may not be mandatory depending on specific configurations.\"\n  }\n\n  requirement \"SecurityComponents\" {\n    description \"The vehicle should also be equipped with security components such as an alarm system and a keyless entry system, so as to enhance the overall security and protective capability of the vehicle.\"\n  }\n\n  requirement \"MandatorySafetyComponents\" {\n    description \"The catalogue distinguishes and describes all components that affect safety, all components that affect anti-theft, components that affect both safety and anti-theft, as well as all mandatory safety components, in order to meet regulatory requirements and users’ needs for the most basic safety and protection functions of the vehicle.\"\n  }\n\nendpackage",
    "Block: FuelSystem\n  {\n    Property: FuelTemperature\n      Type: Real\n      Unit: Celsius\n    Property: FuelLevel\n      Type: Real\n      Unit: Percentage\n    Block: FuelTankAssembly\n      {\n        Block: FuelPump\n          {\n            FlowPort: FuelOut\n              Direction: Out\n            FlowPort: FuelReturn\n              Direction: In\n          }\n        Block: FuelTank\n          {\n            FlowPort: FuelIn\n              Direction: In\n            FlowPort: FuelOut\n              Direction: Out\n          }\n      }\n    Block: FuelConsumerUnits\n      {\n        FlowPort: FuelIn\n          Direction: In\n      }\n    Flow: FuelFlow\n      Source: FuelTankAssembly::FuelOut\n      Target: FuelConsumerUnits::FuelIn\n    Flow: FuelReturnFlow\n      Source: FuelConsumerUnits::FuelIn\n      Target: FuelTankAssembly::FuelReturn\n    Requirement: FuelTemperatureMonitoring\n      {\n        Description: \"Monitor and transmit real-time fuel temperature information.\"\n      }\n    Requirement: FuelFlowManagement\n      {\n        Description: \"Ensure reliable fuel supply and effective",
    "Block: Vehicle\n  Property: Seat Belts\n    Value: 2\n    Type: Integer\n  Property: Airbag\n    Value: Optional\n    Type: Boolean\n  Property: Anti-Theft Alarm\n    Value: Required\n    Type: Boolean\n  Property: Bumper\n    Value: Required\n    Type: Boolean\n  Property: Keyless Entry\n    Value: Required\n    Type: Boolean\n  Property: Wheels\n    Value: 2\n    Type: Integer\n  Property: Anti-Lock Braking Systems\n    Value: 2\n    Type: Integer\n  Property: Safety and Security Compliance\n    Value: Classified\n    Type: String",
    "package VehicleSafetyAndSecurity\n\n  Block VehicleSafetyAndSecuritySystem {\n    \n    Property safetyFeatures {\n      Value \"Seat belts, airbags, bumpers\"\n    }\n    \n    Property securityFeatures {\n      Value \"Onboard alarm, keyless entry system\"\n    }\n    \n    Block Interior {\n      \n      Block AlarmSystem {\n      }\n      \n      Block SeatBelts {\n      }\n      \n      Block FrontRowSeats {\n      }\n      \n      Block DriversAirbag {\n      }\n    }\n    \n    Block BodyAssembly {\n      \n      Block VehicleBody {\n      }\n      \n      Block Bumper {\n      }\n      \n      Block KeylessEntrySystem {\n      }\n    }\n    \n  }\n  \nendpackage",
    "Block: System\n  Property: securityClassification\n    Type: String\n    Value: Unclassified, Confidential, Secret\n\nBlock: Component\n  Property: securityClassification\n    Type: String\n    Value: Unclassified, Confidential, Secret\n\nConstraint:\n  Name: SecurityClassificationRequired\n  Description: Every component must be clearly assigned a security classification level.\n  Expression: self.securityClassification <> \"\"\n\nConstraint:\n  Name: ConfidentialComponentAttribute\n  Description: When a component is marked as \"Confidential,\" the system should be able to recognize and display its corresponding classification attribute.\n  Expression: if self.securityClassification = \"Confidential\" then self.securityClassificationAttribute <> \"\" endif",
    "System ECU_Communication_Control {\n  \n  Block VCU {\n    \n    Block BusIF_VCU {\n      \n      Property CAN_Bus_Interface : Interface\n    }\n    \n    Property Vehicle_State_Monitor : Property\n    Property Vehicle_Control_Actuator : Property\n  }\n  \n  Block ECU {\n    \n    Block BusIF_ECU {\n      \n      Property CAN_Bus_Interface : Interface\n    }\n    \n    Property Engine_State_Monitor : Property\n    Property Engine_Control_Actuator : Property\n  }\n  \n  Connector CAN_Bus {\n    \n    End VCU_BusIF_End {\n      \n      connect to BusIF_VCU\n    }\n    \n    End ECU_BusIF_End {\n      \n      connect to BusIF_ECU\n    }\n  }\n  \n  Property Sensor_Data_Interface : Interface\n}",
    "Block: System\n  {\n    Property: Reliability\n      Type: Real\n      Value: 0.99\n    Property: Safety\n      Type: Real\n      Value: 0.99\n    Requirement: REQ-001\n      Text: \"This system is designed to ensure high reliability and safety of the blood glucose meter during use.\"\n    Requirement: REQ-002\n      Text: \"When the battery is depleted or cannot be charged, the system should be able to automatically detect the battery status and promptly alert the user to prevent failure to measure blood glucose levels due to battery issues, as well as potential treatment delays resulting from such failures.\"\n    Requirement: REQ-003\n      Text: \"To prevent the aforementioned failure scenarios, the system requires the implementation of preventive measures for battery status, and it must have appropriate alarm and emergency response mechanisms in case of abnormalities in the blood glucose measurement function.\"\n    Requirement: REQ-004\n      Text: \"Furthermore, the related system requirements have undergone rigorous approval, and management measures have been established for key risk scenarios to ensure that patients can receive timely, continuous, and safe therapeutic support under all circumstances.\"\n  }\n",
    "Block: System\n  Property: e\n    Type: Real\n    Value: 2.718281828459045\n    Unit: 1\n  Property: pi\n    Type: Real\n    Value: 3.141592653589793\n    Unit: 1\n  Property: speed_of_light\n    Type: Real\n    Value: 299792458\n    Unit: m/s\n  Property: fine_structure_constant\n    Type: Real\n    Value: 1.007297352569\n    Unit: 1\n  Property: electron_to_proton_mass_ratio\n    Type: Real\n    Value: 1836.15267343\n    Unit: 1\n  Property: gravitational_acceleration\n    Type: Real\n    Value: 9.80665\n    Unit: m/s^2\n  Property: amplifier_gain_coefficient\n    Type: Real\n    Value: 10\n    ",
    "package TireSpecification\n\n  Block Tire {\n    Property Manufacturer : String\n    Property RimDiameter : Real\n    Property Width : Integer\n  }\n\n  Block FrenchTire {\n    extends Tire\n  }\n\n  Instance tireInstance {\n    type FrenchTire\n    Manufacturer = \"Michelin\"\n    RimDiameter = 18.0\n    Width = 245\n  }",
    "package AutomotiveComponentModel {\n\n  Block Vehicle {\n    Property mass : Real = 1200 kg;\n    Property length : Real = 4.82 m;\n    \n    Part leftWheel : Wheel;\n    Part rightWheel : Wheel;\n  }\n\n  Block Wheel {\n    Property hubDiameter : Real = 18 in;\n    Property width : Real = 245 mm;\n    \n    Part tire : Tire;\n  }\n\n  Block Tire {\n    # Tire properties\n  }\n\n}\n",
    "Block: VehiclePowertrain\n  \n  Property: EngineType\n    Type: Enumeration\n    Value:\n      FourCylinder\n      SixCylinder\n  \n  Property: TransmissionType\n    Type: Enumeration\n    Value:\n      Manual\n      Automatic\n  \n  Constraint: EngineTypeConstraint\n    Text: \"If the vehicle is a high-performance model, it must be equipped with a SixCylinder engine; otherwise, a FourCylinder engine must be used.\"\n  \n  Constraint: TransmissionTypeConstraint\n    Text: \"There are only two valid powertrain combinations: either a FourCylinder engine with a Manual transmission, or a SixCylinder engine with an Automatic transmission. No other combinations are permitted.\"\n\n\nBlock: VehiclePowertrain\n  Property: EngineType\n    Type: Enumeration\n    Value:\n      FourCylinder\n      SixCylinder\n  Property: TransmissionType\n    Type: Enumeration\n    Value:\n      Manual\n      Automatic\n  Constraint: EngineTypeConstraint\n    Text: \"If the vehicle is a high-performance model, it must be equipped with a SixCylinder engine; otherwise, a FourCylinder engine must be used.\"\n  Constraint:",
    "package AutomotiveSystem\n\n  Block Vehicle {\n    Property mass : Real = 1200;\n    Property length : Real = 4.82;\n    \n    Part wheelAssembly : WheelAssembly\n  }\n\n  Block WheelAssembly {\n    Part tire : Tire\n    Part brakeDisc : BrakeDisc\n  }\n\n  Block Tire {\n    Property rimDiameter : Real = 18;\n    Property tireWidth : Real = 245;\n    Property tireHeight : Real = 45;\n    Property treadDepth : Real = 6.0;\n    Property treadDepthMin : Real = 3.5;\n  }\n\n  Block BrakeDisc {\n    Property radius : Real = 95;\n  }\n\n  Block Wheel {\n    Part rim : Rim\n    Part tire : Tire\n  }\n\n  Block Rim {\n    Property diameter : Real = 18;\n  }\n\n  Constraint wheelAssembly_brakeDisc_clearance {\n    Vehicle.wheelAssembly.brakeDisc.diameter < Vehicle.wheelAssembly.tire.outerDiameter\n  }\n\nendpackage",
    "System FuelSystem {\n  \n  Block FuelTankAssembly {\n    \n    Property FuelOutlet {\n      Type Outlet\n      Direction Out\n    }\n    \n    Property ReturnFuelOutlet {\n      Type Outlet\n      Direction In\n    }\n    \n  }\n  \n  Block FuelPump {\n    \n    Property FuelIn {\n      Type Inlet\n      Direction In\n    }\n    \n    Property FuelOut {\n      Type Outlet\n      Direction Out\n    }\n    \n    Property ReturnFuelIn {\n      Type Inlet\n      Direction In\n    }\n    \n  }\n  \n  Block Engine {\n    \n    Property FuelIn {\n      Type Inlet\n      Direction In\n    }\n    \n  }\n  \n  Requirement FuelCirculation {\n    Description \"Fuel can circulate efficiently and safely among all components\"\n  }\n  \n  Requirement FuelSupply {\n    Description \"Meeting the vehicle's overall requirements for fuel supply and return functions\"\n  }\n  \n  Requirement NormalFuelSupply {\n    Description \"Ensuring normal fuel supply to the engine\"\n  }\n  \n  Requirement FuelTemperatureMonitoring {\n    Description",
    "Block: System\n  Property: supportsPhysicalQuantities\n    Type: Boolean\n    Value: True\n  Property: managesPhysicalQuantityData\n    Type: Boolean\n    Value: True\n  Property: coversBasePhysicalQuantities\n    Type: String\n    Value: \"length, mass, time, electric current, temperature, amount of substance, luminous intensity\"\n  Property: allowsImportExtension\n    Type: Boolean\n    Value: True\n  Property: ensuresAccurateRepresentation\n    Type: Boolean\n    Value: True\n  Property: ensuresConsistencyOfInformation\n    Type: Boolean\n    Value: True\n  Property: facilitatesDataProcessing\n    Type: Boolean\n    Value: True\n  Property: facilitatesUnitConversion\n    Type: Boolean\n    Value: True\n  Property: meetsDiverseRequirements\n    Type: Boolean\n    Value: True",
    "package SystemLibrary\n\n  Block: SystemLibrary {\n    requiredProperty: \"Name\" : String\n    requiredProperty: \"Version\" : String\n    requiredProperty: \"Description\" : String\n    requiredProperty: \"Author\" : String\n    requiredProperty: \"Copyright\" : String\n    requiredProperty: \"License\" : String\n    requiredProperty: \"Units\" : UnitLibrary\n  }\n\n  Block: UnitLibrary {\n    requiredProperty: \"Name\" : String\n    requiredProperty: \"Version\" : String\n    requiredProperty: \"Description\" : String\n    requiredProperty: \"Author\" : String\n    requiredProperty: \"Copyright\" : String\n    requiredProperty: \"License\" : String\n    requiredProperty: \"ISQUnits\" : ISQUnitLibrary\n    requiredProperty: \"USCustomaryUnits\" : USCustomaryUnitLibrary\n  }\n\n  Block: ISQUnitLibrary {\n    requiredProperty: \"Name\" : String\n    requiredProperty: \"Version\" : String\n    requiredProperty: \"Description\" : String\n    requiredProperty: \"Author\" : String\n    requiredProperty: \"Copyright\" : String\n    requiredProperty: \"",
    "Block: HeadlampTiltAdjustmentSystem\n  Property: TiltAngle\n    Type: Real\n    Unit: Degree\n    Constraint: 50 <= TiltAngle <= 80\n  Property: SystemUnits\n    Type: String\n    Value: SI",
    "package SystemModel {\n\n  // Data Types\n  DataType unsignedInteger : Integer {\n    constraint NonNegative : value >= 0\n  }\n\n  DataType unsignedFloat : Float {\n    constraint NonNegative : value >= 0\n  }\n\n  DataType dateTime : DateTime\n  DataType string : String\n  DataType boolean : Boolean\n\n  // Status Colors\n  Enumeration StatusLevel {\n    Literal critical : \"Red\"\n    Literal warning : \"Yellow\"\n    Literal normal : \"Green\"\n  }\n\n  // Physical Dimensions\n  Property diameter : Diameter {\n    type : Dimension\n    default : Small\n  }\n\n  Enumeration Diameter {\n    Literal Small : \"60 mm\"\n    Literal Medium : \"70 mm\"\n    Literal Large : \"80 mm\"\n  }\n\n  // ... (other elements as needed)\n\n}",
    "Block: System\n  Property: spareParts : Bag<SparePart>\n  Property: integers : List<Integer>\n  Property: strings : Set<String>\n  Property: personnel : OrderedSet<Person>\n  Property: nestedCollections : List<Set<Person>>\n  Property: realNumbers : Array[4, Real]",
    "Block: TireInfo\n\n  Property: Manufacturer\n    Type: String\n\n  Property: RimDiameter\n    Type: Real\n    Unit: inch\n\n  Property: TireWidth\n    Type: Real\n    Unit: inch\n\n  Property: InstallationPosition\n    Type: Vector3D\n    Visibility: Optional\n",
    "Block: System\n  Property: liftoffTime\n    Type: Time\n    Unit: s\n  Property: utcLiftoffTime\n    Type: Time\n    Unit: s\n  Property: position\n    Type: Point\n    Unit: m\n  Property: velocity\n    Type: Vector\n    Unit: m/s\n  Requirement: trajectorySampling\n    Textual: \"The system is required to sample and record the trajectory of the spacecraft during the ascent phase. The system should use the mission liftoff time as the reference time zero, measured in seconds, and be able to take the UTC liftoff time of the mission (for example, 22:42:32.924534 on August 23, 2020) as the reference time. The system should collect key parameters including the position and velocity of the spacecraft at different time points. Each set of sampled data must associate a specific time point with the corresponding position and velocity data. Both the three-dimensional position and velocity should be described in a Cartesian coordinate system, with units of meters and meters per second, respectively. The system should record multiple sampling points during the ascent phase, with each sampling point",
    "package AlloySystem\n\n  Block AlloySystem {\n    \n    Property atomicMass : Real\n    Property massFraction : Real\n    Property tensileStrength : Real\n    \n    Part material : Material\n    Part alloy : Alloy\n    \n    Requirement req_alloy_composition : \"The alloy can be composed of two or more materials combined according to specified mass fractions.\"\n    Requirement req_alloy_properties : \"The system supports standardized modeling of important mechanical properties—for example, tensile strength—allowing the use of derived SI units (such as newtons per square millimeter) for expression.\"\n    Requirement req_material_definition : \"The system can define and manage the basic characteristics of different substances, materials, and metals, such as atomic mass.\"\n    Requirement req_alloy_instance : \"The system enables the creation of instances for common metals (such as iron, carbon, manganese) and typical alloys (such as steel 980), assigning scientific units and real or standard values to their properties.\"\n    Requirement req_data_management : \"With this system, users can conveniently view, edit, and expand the composition and property data of metallic materials and alloys, thus providing a data foundation and support for scenarios such as",
    "package EngineeringMaterialsDatabase\n\n  // Block: EngineeringMaterial\n  block EngineeringMaterial {\n    \n    // Property: atomicMass\n    property atomicMass : Real\n    \n    // Property: composition\n    property composition : String\n    \n    // Property: mechanicalProperties\n    property mechanicalProperties : MechanicalProperties\n\n  }\n\n  // Block: MechanicalProperties\n  block MechanicalProperties {\n    \n    // Property: tensileStrength\n    property tensileStrength : Real\n    \n    // Property: unit\n    property unit : String\n    \n  }\n\n  // Block: MetalAlloy\n  block MetalAlloy {\n    \n    // Property: constituentMaterials\n    property constituentMaterials : Composition\n    \n    // Inherited from EngineeringMaterial\n    atomicMass : Real\n    composition : String\n    mechanicalProperties : MechanicalProperties\n    \n  }\n\n  // Block: Composition\n  block Composition {\n    \n    // Property: ironMassFraction\n    property ironMassFraction : Real\n    \n    // Property: carbonMassFraction\n    property carbonMassFraction : Real\n    \n    // Property: manganeseMassFraction\n    property manganeseMassFraction : Real\n    \n  }\n\n  // Example",
    "package PubSubSystem\n\n  block System {\n    \n    property Topic {\n      type String\n    }\n    \n    property Message {\n      type String\n    }\n    \n    port Producer {\n      connector ProducerConnector\n    }\n    \n    port Consumer {\n      connector ConsumerConnector\n    }\n    \n    connector ProducerConnector {\n      end ProducerEnd\n    }\n    \n    connector ConsumerConnector {\n      end ConsumerEnd\n    }\n    \n    requirement PublishMessage {\n      text \"The system needs to implement a typical Publish-Subscribe (Pub-Sub) message interaction model, supporting message producers to publish messages on specific topics to the server, while consumers can subscribe to topics of interest through the server.\"\n    }\n    \n    requirement ReceiveMessage {\n      text \"The system requires that when a producer publishes a new message, the server is able to promptly receive the published information and, according to the existing topic subscription relationships, distribute and deliver the message to the corresponding subscribers, ensuring that subscribers can accurately and promptly receive the message content of the topics they follow.\"\n    }\n    \n    requirement SubscribeTopic {\n      text \"Users only need to declare the topics",
    "Block: FuelSystem\n  {\n    Name = \"Fuel System\"\n    Description = \"This system is designed to describe the basic structure and operating principles of a vehicle fuel system.\"\n    \n    Property: FuelTemperature\n      {\n        Name = \"Fuel Temperature\"\n        Type = \"Real\"\n      }\n    \n    Part: FuelTankAssembly\n      {\n        Name = \"Fuel Tank Assembly\"\n        Description = \"Responsible for supplying fuel to the engine.\"\n      }\n    \n    Part: Engine\n      {\n        Name = \"Engine\"\n        Description = \"Consumes fuel and returns unused portion to the fuel tank.\"\n      }\n    \n    Part: FuelLines\n      {\n        Name = \"Fuel Lines\"\n        Description = \"Connect the fuel tank assembly and the engine.\"\n      }\n    \n    Flow: FuelFlow\n      {\n        Source = FuelTankAssembly\n        Target = Engine\n        Description = \"Fuel supply from tank to engine.\"\n      }\n    \n    Flow: FuelReturnFlow\n      {\n        Source = Engine\n        Target = FuelTankAssembly\n        Description = \"Return of unused fuel from engine to tank",
    "package PublishSubscribeSystem\n\n  Block Producer {\n    Property topic : String\n    Property message : String\n  }\n\n  Block Server {\n    Property topics : String\n    Property subscribers : String\n  }\n\n  Block Consumer {\n    Property topic : String\n  }\n\n  Requirement REQ_PUBLISH {\n    text: \"Producers can publish topic messages to the server\"\n  }\n\n  Requirement REQ_SUBSCRIBE {\n    text: \"Consumers can subscribe to specific topics via the server\"\n  }\n\n  Requirement REQ_DELIVERY {\n    text: \"Upon successful subscription, when a new message related to the topic is published, the server needs to push and deliver the message to all consumers who have subscribed to that topic\"\n  }\n\n  Requirement REQ_RELIABILITY {\n    text: \"The entire process includes consumers sending subscription requests to the server, producers publishing messages to the server, and after receiving the messages, the server sending them to all corresponding subscribers, thus achieving reliable message publishing and distribution and ensuring efficient information exchange between different users\"\n  }\n\n  Flow publish {\n    source: Producer\n    target: Server\n    data: message\n  }\n\n  Flow subscribe {",
    "package TransportationSystem\n\n  Block \"TransportationSystem\" {\n    Property \"FuelLevel\" : Real\n    Property \"EnvironmentalConditions\" : String\n    \n    Requirement \"UserBoarding\" {\n      text \"Users can enter the vehicle.\"\n    }\n    Requirement \"DriverOperation\" {\n      text \"The driver is responsible for operating the vehicle to complete travel tasks.\"\n    }\n    Requirement \"Refueling\" {\n      text \"If the fuel level falls below 10% of the maximum tank capacity, the driver may go to a gas station to refuel.\"\n    }\n    Requirement \"EnvironmentalAwareness\" {\n      text \"Environmental factors will be taken into account throughout the process.\"\n    }\n    Requirement \"SafeExit\" {\n      text \"After transportation is completed, all individuals exit the vehicle safely.\"\n    }\n    Requirement \"EfficientTravel\" {\n      text \"This system focuses on facilitating user boarding, timely refueling during the journey, and ensuring the smooth boarding and alighting of passengers and the driver, thereby guaranteeing an efficient and safe travel experience.\"\n    }\n    \n    \n    \n  }\n  \nendpackage\n\n",
    "System FuelSupplyReturnManagement {\n  \n  Block FuelTankAssembly {\n    \n    Property fuelTemperature : Real\n    \n    Port fuelOutlet : FlowPort {\n      Direction = Out\n      Type = Fuel\n    }\n    \n  }\n  \n  Block EngineUnit {\n    \n    Port fuelInlet : FlowPort {\n      Direction = In\n      Type = Fuel\n    }\n    \n    Port fuelReturn : FlowPort {\n      Direction = In\n      Type = Fuel\n    }\n    \n  }\n  \n  Connector fuelConnection {\n    \n    Source = FuelTankAssembly.fuelOutlet\n    Target = EngineUnit.fuelInlet\n    \n  }\n  \n  Connector fuelReturnConnection {\n    \n    Source = EngineUnit.fuelReturn\n    Target = FuelTankAssembly.fuelOutlet\n    \n  }\n  \n}",
    "Block: FuelSystem\n  {\n    Name = \"Fuel System\"\n    Description = \"This system is used for vehicle fuel system management and is required to achieve efficient supply and return of fuel.\"\n  }\n  \n  Part: FuelTankAssembly\n    {\n      Name = \"Fuel Tank Assembly\"\n      Description = \"Core component responsible for storing fuel.\"\n    }\n  \n  Part: Engine\n    {\n      Name = \"Engine\"\n      Description = \"Core component responsible for consuming fuel.\"\n    }\n  \n  Property: FuelTemperature\n    {\n      Name = \"Fuel Temperature\"\n      Type = \"Real\"\n      Description = \"Current temperature of the fuel.\"\n    }\n  \n  Flow: FuelSupplyFlow\n    {\n      Source = FuelTankAssembly\n      Target = Engine\n      Direction = \"SourceToTarget\"\n      Description = \"Flow of fuel from the fuel tank to the engine.\"\n    }\n  \n  Flow: FuelReturnFlow\n    {\n      Source = Engine\n      Target = FuelTankAssembly\n      Direction = \"SourceToTarget\"\n      Description = \"Flow of unused fuel from the engine back to",
    "Block: System\n  Property: name \"System\"\n  Property: description \"Enables users to obtain photos from real-world scenes.\"\n  \n  Block: CaptureProcess\n    Property: name \"CaptureProcess\"\n    Property: description \"Captures photos from real-world scenes.\"\n    \n    Activity: Focus\n      Property: name \"Focus\"\n      Property: description \"Automatically performs focusing for the selected scene.\"\n      \n      Activity: GenerateIntermediateImage\n        Property: name \"GenerateIntermediateImage\"\n        Property: description \"Generates an intermediate image based on the focused image.\"\n      \n    Activity: CapturePhoto\n      Property: name \"CapturePhoto\"\n      Property: description \"Captures and outputs the final photo based on the focused image.\"\n    \n  Requirement: Req1\n    Property: id \"REQ-001\"\n    Property: text \"Users can directly obtain photos that meet their requirements from the selected scene.\"\n    \n  Requirement: Req2\n    Property: id \"REQ-002\"\n    Property: text \"The system completes the focusing and shooting processes automatically in the background, without requiring manual intervention at each step.\"\n  ",
    "Block: System\n  {\n    Property: name\n      Value: \"Photography System\"\n    Property: description\n      Value: \"This system is designed to support the photography workflow, enabling the complete process from focusing on a scene to producing the final image.\"\n  }\n\nBlock: Focusing\n  {\n    Property: name\n      Value: \"Focusing\"\n    Property: description\n      Value: \"The system automatically performs focusing on the selected scene and generates an intermediate image.\"\n  }\n\nBlock: Shooting\n  {\n    Property: name\n      Value: \"Shooting\"\n    Property: description\n      Value: \"The system carries out the shooting operation based on the focused image, thereby outputting the final photograph.\"\n  }\n\nRelationship: Sequence\n  {\n    Source: System\n    Target: Focusing\n    Target: Shooting\n  }",
    "Block: System\n  {\n    Property: name \"Photography Workflow System\"\n    Property: description \"This system is designed to support photography workflows, allowing users to frame and capture a scene. First, the user selects a specific scene, and the system performs a focusing process on the selected scene to generate an image. Then, based on this image, the system carries out the shooting process to produce a final photograph. The overall workflow automatically completes the focusing and shooting steps, ensuring that users can conveniently convert the scenes they see into high-quality photographs without manually handling intermediate image processing and conversion tasks.\"\n  }\n\nBlock: SceneSelection\n  {\n    Property: name \"Scene Selection\"\n    Property: description \"The user selects a specific scene.\"\n  }\n\nBlock: Focusing\n  {\n    Property: name \"Focusing\"\n    Property: description \"The system performs a focusing process on the selected scene to generate an image.\"\n  }\n\nBlock: ImageGeneration\n  {\n    Property: name \"Image Generation\"\n    Property: description \"An image is generated.\"\n  }\n\nBlock: Shooting\n  {\n    Property: name \"Shooting\"\n    Property: description \"The system carries",
    "block System {\n  \n  requirement \"This system is designed to automate the photography process.\"\n  requirement \"Users only need to provide a shooting scene, and the system will first perform focus processing on the scene to generate an image suitable for shooting.\"\n  requirement \"It will then convert the image into a photograph through a shooting operation.\"\n  requirement \"The entire process is seamlessly integrated, requiring no in-depth user intervention in focusing or shooting details.\"\n  requirement \"This simplifies the photography workflow, helping users obtain the final photograph easily and efficiently.\"\n  \n  activity FocusProcessing {\n    input \"shooting scene\"\n    output \"image suitable for shooting\"\n  }\n  \n  activity ShootingOperation {\n    input \"image suitable for shooting\"\n    output \"photograph\"\n  }\n}\n",
    "package PhotographyWorkflow\n\n  Block PhotographyWorkflow {\n    \n    Property name = \"PhotographyWorkflow\";\n    \n    Block User {\n      \n      Action InputScene {\n        \n        Parameter scene : Scene;\n      }\n    }\n    \n    Block Scene {\n      \n    }\n    \n    Block Image {\n      \n    }\n    \n    Block Picture {\n      \n    }\n    \n    Block Focus {\n      \n      Action Focus {\n        \n        Input Image;\n        Output Image;\n      }\n    }\n    \n    Block Shoot {\n      \n      Action Shoot {\n        \n        Input Image;\n        Output Picture;\n      }\n    }\n    \n    Flow Focus {\n      \n      Source User;\n      Target Focus;\n      \n      Data Flow scene : Scene;\n    }\n    \n    Flow Focus {\n      \n      Source Focus;\n      Target Image;\n      \n      Data Flow image : Image;\n    }\n    \n    Flow Shoot {\n      \n      Source Image;\n      Target Shoot;\n      \n      Data Flow image : Image;\n    }\n    \n    Flow",
    "Block: System\n  {\n    Property: name \"Photography System\"\n    Property: description \"This system is designed to support the photography workflow, allowing users to select a scene and capture it as a photograph. In the shooting process, the selected scene is first focused to ensure optimal image sharpness. If the camera detects that the focus is clear, it will proceed to take the photo, generating the final image. The entire process automatically performs focusing and shooting operations in sequence, providing users with a convenient one-click shooting experience while ensuring the clarity and quality of the photos.\"\n  }\n\nBlock: SceneSelection\n  {\n    Property: name \"Scene Selection\"\n    Property: description \"Allows users to select a scene to be captured.\"\n  }\n\nBlock: Focusing\n  {\n    Property: name \"Focusing\"\n    Property: description \"Focuses on the selected scene to ensure optimal image sharpness.\"\n  }\n\nBlock: FocusDetection\n  {\n    Property: name \"Focus Detection\"\n    Property: description \"Detects if the focus is clear.\"\n  }\n\nBlock: Shooting\n  {\n    Property: name \"Shooting\"\n    Property: description \"Captures the selected scene",
    "package PhotographySystem\n\n  requirement \"REQ-001\" {\n    description \"This system is designed to support users in a workflow for capturing high-quality photographs.\"\n  }\n\n  requirement \"REQ-002\" {\n    description \"Users can select a scene.\"\n  }\n\n  requirement \"REQ-003\" {\n    description \"The system first performs focusing on the scene and generates an image.\"\n  }\n\n  requirement \"REQ-004\" {\n    description \"The system evaluates the image for focus quality.\"\n  }\n\n  requirement \"REQ-005\" {\n    description \"If the image is determined to be well-focused, the system proceeds with the shooting operation.\"\n  }\n\n  requirement \"REQ-006\" {\n    description \"The system converts the focused image into a photograph.\"\n  }\n\n  requirement \"REQ-007\" {\n    description \"The system produces the final photo required by the user.\"\n  }\n\n  requirement \"REQ-008\" {\n    description \"The entire shooting process is automatically linked from scene input to photo output.\"\n  }\n\n  requirement \"REQ",
    "package PhotographyWorkflow\n\n  Block PhotographySystem {\n    Property \"UserTrigger\" : Boolean\n    Property \"FocusResult\" : Image\n    Property \"FinalPhotograph\" : Image\n\n    Activity \"TakePhoto\" {\n      ActivityNode \"AcquireScene\"\n      ActivityNode \"Focus\" {\n        Input \"Scene\" : FocusResult\n        Output \"FocusResult\" : FocusResult\n      }\n      ActivityNode \"Shoot\" {\n        Input \"FocusResult\" : FocusResult\n        Output \"FinalPhotograph\" : FinalPhotograph\n      }\n      ActivityNode \"DisplayPhoto\" {\n        Input \"FinalPhotograph\" : FinalPhotograph\n      }\n    }\n\n    Requirement \"UserTrigger\" {\n      text = \"The user only needs to trigger the 'take photo' operation once.\"\n    }\n    Requirement \"AutomaticWorkflow\" {\n      text = \"The system automatically completes all subsequent steps.\"\n    }\n    Requirement \"FocusFunction\" {\n      text = \"The system automatically performs the focusing process.\"\n    }\n    Requirement \"ShootingOperation\" {\n      text = \"The system executes the shooting operation to produce the final photograph.\"\n    }\n    Requirement \"DisplayResult\"",
    "System \"Automatic Braking Control System\" {\n  Property \"Activation State\" {\n    Type \"Boolean\"\n    Value \"False\"\n  }\n  Property \"Brake Pedal Pressure\" {\n    Type \"Real\"\n  }\n  Property \"Road Adhesion\" {\n    Type \"Real\"\n  }\n  Property \"Brake Pressure\" {\n    Type \"Real\"\n  }\n  Property \"Modulation Frequency\" {\n    Type \"Real\"\n  }\n  Block \"Vehicle\" {\n    Port \"Brake Pedal\" {\n      Direction \"Input\"\n    }\n    Port \"Traction Sensor\" {\n      Direction \"Input\"\n    }\n    Port \"Brake Actuator\" {\n      Direction \"Output\"\n    }\n  }\n  Block \"Automatic Braking Control Unit\" {\n    Interface \"Control Interface\" {\n      Property \"Brake Pedal Pressure\" {\n        Direction \"Input\"\n      }\n      Property \"Road Adhesion\" {\n        Direction \"Input\"\n      }\n      Property \"Brake Pressure\" {\n        Direction \"Output\"\n      }\n      Property \"Modulation Frequency\" {\n        Direction \"",
    "package BatteryChargingSystem\n\n  requirement \"REQ-001\" {\n    text = \"This system is designed for automatic monitoring and control of the battery charging process, ensuring that the battery can be safely and efficiently fully charged.\"\n  }\n\n  requirement \"REQ-002\" {\n    text = \"The battery charging control system needs to monitor the current battery level in real time, automatically supplying charge when the battery level is below 100%; when the battery level reaches or exceeds 100%, the charging process is automatically terminated without manual intervention.\"\n  }\n\n  requirement \"REQ-003\" {\n    text = \"The core functions of this system include battery capacity monitoring, automatic charging, and charging termination control, aiming to ensure healthy charging of the battery and to enhance convenience and safety of use.\"\n  }\n\n  block BatteryChargingSystem {\n    \n    part Battery {\n      \n    }\n    \n    part Charger {\n      \n    }\n  }\n\nendpackage",
    "Block: System\n  Property: batteryLevel\n    Type: Real\n    Unit: Percentage\n  Property: chargingStatus\n    Type: String\n    Value: \"Off\"\n  Behavior: ChargingProcess\n    Trigger: batteryLevel < 100\n    Action:\n      Charging\n      Monitor batteryLevel\n      If batteryLevel >= 100 then\n        Stop Charging\n      End If\n    \n  \n",
    "package CameraSystem\n\n  Block Camera {\n    Property sceneSelection : String\n    Property imageQuality : String\n    \n    Part autofocusSubsystem : Block\n    Part imagingSubsystem : Block\n    \n    Requirement req_autofocus : \"The autofocus subsystem shall automatically focus on objects within the scene.\"\n    Requirement req_imaging : \"The imaging subsystem shall capture the focused image as a photograph.\"\n    Requirement req_imageSaving : \"All photos taken shall be recorded and saved by the system.\"\n    Requirement req_userInterface : \"Users shall only need to select or confirm the scene to be photographed.\"\n    Requirement req_highQuality : \"The camera shall generate high-quality photos for the user.\"\n    \n    \n    Activity takePhoto {\n      ActivityNode sceneSelectionInput\n      ActivityNode autofocusExecution\n      ActivityNode imageCapture\n      ActivityNode imageSaving\n      \n      Flow autofocusExecution -> imageCapture\n      Flow imageCapture -> imageSaving\n    }\n  }\nendpackage",
    "System Camera {\n  Requirement \"This system is designed to implement the shooting process of a digital camera, enabling users to complete the entire procedure from viewfinding and focusing to imaging with a single, simple operation. Users only need to select the shooting scene; the camera will then automatically focus on the selected scene and generate an image that meets the requirements, after which the imaging module will capture and produce the final photo. The entire shooting process is fully automated without the need for users to manually adjust the focus or initiate imaging. All functional modules collaborate to complete the entire process of shooting and image acquisition, ensuring an efficient and convenient shooting experience and outputting high-quality photos.\"\n  Block View {\n    Block Viewfind {\n      \n    }\n    Block Focus {\n      \n    }\n    Block Imaging {\n      \n    }\n  }\n}\n\n",
    "package VehicleSimulationSystem\n\n  Block VehicleSimulationSystem {\n    \n    Property mass : Real\n    Property initialPosition : Real\n    Property initialVelocity : Real\n    Property timeStep : Real\n    Property powerInputSequence : Sequence[Real]\n\n    Requirement req1 {\n      text = \"This system is designed to simulate a vehicle with a known mass moving along a one-dimensional straight path, predicting its position over time based on a given time-varying power input sequence.\"\n    }\n    Requirement req2 {\n      text = \"Users are required to provide the vehicle's mass, initial position, initial velocity, the time interval of each simulation step, as well as the power input at each time step.\"\n    }\n    Requirement req3 {\n      text = \"The system sequentially calculates the vehicle's speed and position at each moment according to the input data, and outputs the trajectory of the vehicle's position at each time step.\"\n    }\n    Requirement req4 {\n      text = \"This helps users analyze the vehicle's motion behavior under different power inputs.\"\n    }\n\n  }\n\nendpackage",
    "package CameraSystem\n\n  Block CameraSystem {\n    \n    Property sceneInput : String\n    Property focusedImage : Image\n    Property capturedPhoto : Photo\n    Property displayedPhoto : Photo\n\n    Activity capturePhoto {\n      ActivityNode focusScene {\n        Input sceneInput\n        Output focusedImage\n      }\n      ActivityNode captureImage {\n        Input focusedImage\n        Output capturedPhoto\n      }\n      ActivityNode displayPhoto {\n        Input capturedPhoto\n        Output displayedPhoto\n      }\n    }\n  }\nend CameraSystem",
    "package CameraSystem\n\n  Block CameraSystem {\n    Property viewPort : ViewPort\n    Property displayPort : DisplayPort\n    \n    Activity workflow {\n      ActivityNode selectScene {\n        Input viewPort\n      }\n      ActivityNode focusScene {\n        Input selectScene\n        Output Image\n      }\n      ActivityNode captureImage {\n        Input focusScene\n        Output Picture\n      }\n      ActivityNode displayPicture {\n        Input captureImage\n        Output displayPort\n      }\n    }\n  }\n\nend CameraSystem",
    "Block: System\n  Property: sensorCount\n    Type: Integer\n  Property: sensorStatus\n    Type: String\n  Block: Sensor\n    Property: status\n      Type: String\n      Value: \"ready\"\n  Activity: UpdateSensor\n    Input: sensor\n      Type: Sensor\n    Output: updatedSensor\n      Type: Sensor\n    Activity: TraverseSensors\n      Input:\n      Output: sensorList\n        Type: List[Sensor]\n    Activity: ProcessSensor\n      Input: sensor\n        Type: Sensor\n      Output: updatedSensor\n        Type: Sensor\n    Activity: UpdateSensorStatus\n      Input: sensor\n        Type: Sensor\n      Output: updatedSensor\n        Type: Sensor",
    "package VehicleStateManagementSystem\n\n  Block VehicleStateManagementSystem {\n    \n    Property vehicleState {\n      Type: Enumeration\n      Value: off, starting, on\n    }\n    \n    Activity vehicleStart {\n      Trigger: vehicleStartSignal\n      Effect: vehicleState = starting\n    }\n    \n    Activity vehiclePowerOn {\n      Trigger: vehiclePowerOnSignal\n      Effect: vehicleState = on\n    }\n    \n    Activity vehicleShutdown {\n      Trigger: vehicleShutdownSignal\n      Effect: vehicleState = off\n    }\n  }\n\nendpackage",
    "Block: VehicleStatusManagementSystem\n  {\n    Property: InitialState\n      Type: State\n      Value: \"off\"\n  }\n  \n  State: off\n  State: starting\n  State: on\n  \n  Transition: StartTransition\n    Source: off\n    Target: starting\n    Trigger: VehicleStartSignal\n  \n  Transition: OnTransition\n    Source: starting\n    Target: on\n    Trigger: VehicleOnSignal\n  \n  Transition: OffTransition\n    Source: on\n    Target: off\n    Trigger: VehicleOffSignal",
    "System VehiclePowerManagementSystem {\n  \n  Block Vehicle {\n    \n    Property PowerState {\n      Type Enumeration {\n        Value Off\n        Value StartPhase\n        Value PoweredOn\n        Value Shutdown\n      }\n    }\n    \n    Property UserCommand {\n      Type String\n    }\n    \n    Property VehicleStartedSignal {\n      Type Boolean\n    }\n    \n    Property SafetyOperationsCompleted {\n      Type Boolean\n    }\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
    "Block: VehicleSystem\n  \n  Property: vehicleStatus\n    Type: Enumeration\n    EnumerationLiteral: shutdown\n    EnumerationLiteral: start-up\n    EnumerationLiteral: running\n\n  Property: userSignal\n    Type: Enumeration\n    EnumerationLiteral: start\n    EnumerationLiteral: stop\n\n  State: shutdown\n  State: start-up\n  State: running\n\n  Transition: startTransition\n    Source: shutdown\n    Target: start-up\n    Trigger: userSignal = start\n\n  Transition: stopTransition\n    Source: running\n    Target: shutdown\n    Trigger: userSignal = stop\n\n  Transition: startCompleteTransition\n    Source: start-up\n    Target: running\n    Trigger: vehicleStartedSignal\n\n\n",
    "Block: VehiclePowerManagementSystem\n  {\n    Property: OperatingState\n      Type: Enumeration\n      Value: Off, Start, On\n    Property: HealthState\n      Type: Enumeration\n      Value: Healthy, Warning, Critical\n    Block: Vehicle\n      {\n        Property: StartSignal\n          Type: Boolean\n        Property: OnSignal\n          Type: Boolean\n        Property: OffSignal\n          Type: Boolean\n      }\n    Block: PowerManagementLogic\n      {\n        Activity: PowerManagementFlow\n          {\n            ActivityNode: StartVehicle\n              Trigger: Vehicle.StartSignal\n              Effect: Vehicle.OperatingState = Start\n            ActivityNode: CompleteStartup\n              Trigger: Completion of StartVehicle\n              Effect: Vehicle.OperatingState = On\n            ActivityNode: TurnOnVehicle\n              Trigger: Vehicle.OnSignal\n              Effect: Vehicle.OperatingState = On\n            ActivityNode: TurnOffVehicle\n              Trigger: Vehicle.OffSignal\n              Effect: Vehicle.OperatingState = Off\n          }\n      }\n  }",
    "Block: VehicleHealthMonitoringSystem\n  \n  Property: vehicleTemperature\n  Property: maximumAllowableTemperature\n  Property: vehicleHealthStatus\n  Property: maintenanceCycleTime\n  \n  Block: VehicleController\n  \n  Block: Vehicle\n  \n  Activity: TemperatureMonitoring\n    ActivityNode: SenseVehicleTemperature\n    ActivityNode: CompareTemperature\n    ActivityNode: SendOverTemperatureWarning\n    ActivityNode: SetVehicleHealthStatusToDegraded\n    ActivityNode: SetVehicleHealthStatusToNormal\n  \n  Activity: MaintenanceManagement\n    ActivityNode: CheckMaintenanceTime\n    ActivityNode: EnterMaintenanceStatus\n    ActivityNode: UpdateMaintenanceCycleTime\n    ActivityNode: ExitMaintenanceStatus",
    "package ServerSystem\n\n  Block Server {\n    Property localClock : Time\n    Port requestPort : Port\n    State off {\n      Transition start : trigger = \"start\" command received\n    }\n    State waiting {\n      Transition request : trigger = \"request\" message received\n    }\n    State response {\n      Duration fiveMinutes\n      Transition backToWaiting : trigger = time elapsed\n    }\n    Constraint dailyOff {\n      time = \"11:59:00\"\n      State = off\n    }\n  }\n\nendpackage",
    "System VehicleStartStopSystem {\n  \n  Property offState {\n    Type Boolean;\n    Value False;\n  }\n  \n  Property operatingState {\n    Type Boolean;\n    Value False;\n  }\n  \n  Property parkingBrakeApplied {\n    Type Boolean;\n    Value False;\n  }\n  \n  Block StartProcess {\n    \n    Activity start {\n      Trigger startSignal;\n      Action {\n        StateTransition offState -> startState;\n      }\n    }\n    \n    Activity powerOn {\n      Trigger powerOnSignal;\n      Condition brakePedalDepressed;\n      Action {\n        StateTransition startState -> runningState;\n        Send startSignal to Controller;\n      }\n    }\n    \n    Activity selfCheck {\n      Trigger operatingState;\n      Action {\n        // Self-check logic\n      }\n    }\n    \n    Activity stop {\n      Trigger stopSignal;\n      Action {\n        StateTransition runningState -> offState;\n      }\n    }\n    \n    Activity parkingBrake {\n      Trigger operatingState -> offState;\n      Action {\n        parking",
    "System VehicleStartStopSystem {\n  \n  Block VehicleController {\n    \n  }\n  \n  Block Vehicle {\n    \n  }\n  \n  Block Driver {\n    \n  }\n  \n  Property VehicleState {\n    Type: Enumeration\n    Value: {Off, StartUp, Started, Shutdown}\n  }\n  \n  Property BrakePedalDepressed {\n    Type: Boolean\n  }\n  \n  Property VehicleOnSignal {\n    Type: Boolean\n  }\n  \n  Property StartControlSignal {\n    Type: Boolean\n  }\n  \n  Property ShutdownSignal {\n    Type: Boolean\n  }\n  \n  Property ParkingBrakeApplied {\n    Type: Boolean\n  }\n  \n  Requirement StartVehicle {\n    Trigger: Driver.StartVehicleSignal\n    Effect: VehicleController.StartControlSignal = True\n  }\n  \n  Requirement ShutdownVehicle {\n    Trigger: Driver.ShutdownSignal\n    Effect: VehicleController.ShutdownControlSignal = True\n  }\n  \n  Requirement SafetyCheck {\n    Trigger: VehicleState = Started\n    Effect: VehicleController.SelfCheck()\n  }",
    "package CruiseControlSystem\n\n  Block CruiseControlSystem {\n    \n    Property \"DesiredSpeed\" : Real\n    Property \"ActualSpeed\" : Real\n    \n    Block Driver {\n      \n      Action \"SetDesiredSpeed\" (DesiredSpeed : Real)\n    }\n    \n    Block CruiseController {\n      \n      Action \"ReceiveSetSpeedCommand\" (DesiredSpeed : Real)\n      Action \"ReceiveActualSpeed\" (ActualSpeed : Real)\n      Action \"GenerateFuelControlCommand\" (FuelControlCommand : Real)\n    }\n    \n    Block Speedometer {\n      \n      Action \"TransmitActualSpeed\" (ActualSpeed : Real)\n    }\n    \n    Block Engine {\n      \n      Action \"AdjustOutput\" (FuelControlCommand : Real)\n    }\n    \n    Block Vehicle {\n      \n    }\n    \n    Flow \"SetSpeedCommand\" from Driver to CruiseController\n    Flow \"ActualSpeed\" from Speedometer to CruiseController\n    Flow \"FuelControlCommand\" from CruiseController to Engine\n    \n  }\n\nend CruiseControlSystem",
    "package CruiseControlSystem\n\n  Block CruiseController {\n    Property setSpeed : Real\n    Property actualSpeed : Real\n    Property throttleCommand : Real\n\n    Operation setSpeed(setSpeed : Real)\n    Operation getActualSpeed() : Real\n    Operation generateThrottleCommand() : Real\n  }\n\n  Block Vehicle {\n    Property speed : Real\n  }\n\n  Block EngineSystem {\n    Operation receiveThrottleCommand(throttleCommand : Real)\n  }\n\n  Block Driver {\n    Operation sendSetSpeedCommand(setSpeed : Real)\n  }\n\n  Requirement cruiseControlFunction {\n    text = \"This system is designed to implement the cruise control function for vehicles.\"\n  }\n\n  Requirement automaticSpeedControl {\n    text = \"The entire process realizes the automatic response to the driver's intent, improving driving comfort and safety.\"\n  }\n\n  Block Speedometer {\n    Property speed : Real\n  }\n\n  Dependency CruiseController -- Speedometer : getActualSpeed\n  Dependency CruiseController -- Vehicle : actualSpeed\n  Dependency CruiseController -- EngineSystem : throttleCommand\n  Dependency Driver -- CruiseController : setSpeed\n  Dependency Speedometer -- Vehicle : speed\n  ",
    "Block: CruiseControlSystem\n  {\n    Property: SetSpeed\n      Type: Real\n    Property: CurrentSpeed\n      Type: Real\n    Property: ThrottleCommand\n      Type: Real\n    Property: EngineOutput\n      Type: Real\n    \n    Block: Driver\n      {\n        Action: SendSetSpeedCommand\n          Input: SetSpeed\n      }\n    Block: SpeedSensor\n      {\n        Action: ProvideCurrentSpeed\n          Output: CurrentSpeed\n      }\n    Block: CruiseController\n      {\n        Action: CompareSetSpeedAndCurrentSpeed\n          Input: SetSpeed\n          Input: CurrentSpeed\n          Output: SpeedDifference\n        Action: CalculateThrottleCommand\n          Input: SpeedDifference\n          Output: ThrottleCommand\n        Action: SendThrottleCommandToEngine\n          Input: ThrottleCommand\n      }\n    Block: Engine\n      {\n        Action: AdjustEngineOutput\n          Input: ThrottleCommand\n          Output: EngineOutput\n      }\n    \n    Flow: SendSetSpeedCommand\n      Source: Driver\n      Target: CruiseController\n    Flow: ProvideCurrentSpeed\n      Source: SpeedSensor\n      Target: CruiseController\n    Flow",
    "block CruiseControlSystem {\n  \n  property SpeedSetting {\n    type Real\n  }\n  \n  property VehicleSpeed {\n    type Real\n  }\n  \n  port DriverInput {\n    type Command\n  }\n  \n  port EngineOutput {\n    type ThrottleControl\n  }\n  \n  behavior CruiseControl {\n    \n    activity Start {\n      \n      action ReceiveSpeedSetting {\n        input DriverInput\n      }\n      \n      action CalculateThrottle {\n        input SpeedSetting\n        input VehicleSpeed\n        output ThrottleControl\n      }\n      \n      action SendThrottleCommand {\n        output EngineOutput\n      }\n    }\n  }\n}",
    "Block: CruiseControlSystem\n  {\n    Property: TargetSpeed\n    Property: ActualSpeed\n    Property: EngineFuelControlCommand\n    \n    Block: CruiseControlInterface\n      {\n        Property: SetSpeedCommand\n      }\n    \n    Block: CruiseController\n      {\n        Property: SpeedSensorData\n        Property: EngineOutputCommand\n      }\n    \n    Block: SpeedSensor\n      {\n        Property: Speed\n      }\n    \n    Block: Engine\n      {\n        Property: FuelControl\n      }\n    \n    Requirement: REQ_001\n      {\n        text: \"The system shall enable the driver to set a target speed through the cruise control interface.\"\n      }\n    Requirement: REQ_002\n      {\n        text: \"The vehicle shall automatically detect the current speed.\"\n      }\n    Requirement: REQ_003\n      {\n        text: \"The vehicle shall automatically adjust the engine output to maintain steady vehicle speed.\"\n      }\n    Requirement: REQ_004\n      {\n        text: \"When the driver sends a set speed command via the cruise control interface, the instruction",
    "Block: CruiseControlSystem\n  {\n    Property: setSpeed\n      Type: Real\n    Property: actualSpeed\n      Type: Real\n    Property: fuelControlCommand\n      Type: String\n    Property: engineStatus\n      Type: String\n    \n    Block: CruiseController\n      {\n        Property: cruiseStatus\n          Type: Boolean\n      }\n    \n    Block: SpeedSensor\n      {\n        Property: speedReading\n          Type: Real\n      }\n    \n    Block: EngineController\n      {\n        Property: engineCommand\n          Type: String\n      }\n    \n    Block: Engine\n      {\n        Property: fuelFlow\n          Type: Real\n      }\n    \n    Requirement: REQ_001\n      {\n        Text: \"The system shall provide a message interaction mechanism for vehicles equipped with cruise control functionality.\"\n      }\n    Requirement: REQ_002\n      {\n        Text: \"Drivers can send set speed commands, which are first processed by the cruise controller upon receipt.\"\n      }\n    Requirement: REQ_003\n      {\n        Text: \"The cruise controller then reads real",
    "Block: VehicleLifecycleManagementSystem\n  \n  Property: deliveryDate\n    Type: Date\n  \n  Property: owner\n    Type: String\n  \n  Property: driver\n    Type: String\n  \n  Property: scrappingDate\n    Type: Date\n  \n  Block: Vehicle\n    \n    Property: assemblyDate\n      Type: Date\n    \n    Property: deliveryDate\n      Type: Date\n    \n    Property: owner\n      Type: String\n    \n    Property: driver\n      Type: String\n    \n    Property: scrappingDate\n      Type: Date\n    \n    Relationship: hasDeliveryDate\n      Source: Vehicle\n      Target: VehicleLifecycleManagementSystem\n      Multiplicity: 1\n    \n    Relationship: hasOwner\n      Source: Vehicle\n      Target: VehicleLifecycleManagementSystem\n      Multiplicity: 1\n    \n    Relationship: hasDriver\n      Source: Vehicle\n      Target: VehicleLifecycleManagementSystem\n      Multiplicity: 1\n    \n    Relationship: hasScrappingDate\n      Source: Vehicle\n      Target: VehicleLifecycleManagementSystem\n      Multiplicity: 1\n  \n  Relationship: manages\n",
    "Block: Vehicle\n  {\n    Property: mass\n    Property: operationalStatus\n      {\n        Property: gearSetting\n        Property: acceleratorPedalPosition\n      }\n  }\n\nBlock: Engine\n  {\n    \n  }\n\nBlock: Driver\n  {\n    \n  }\n\nBlock: Wheel\n  {\n    \n  }\n\nBlock: LeftFrontWheel\n  {\n    \n  }\n\nBlock: RightFrontWheel\n  {\n    \n  }\n\nInstance: vehicle_1\n  {\n    Part: Engine\n    Part: Driver\n    Part: LeftFrontWheel\n    Part: RightFrontWheel\n  }\n",
    "package VehicleSystem\n\n  Block Vehicle\n    Property mass : Real\n    Property gearSetting : Integer\n    Property acceleratorPosition : Real\n\n  Block Vehicle_1\n    InstanceOf Vehicle\n\n  Block Engine\n    Property power : Real\n\n  Block Driver\n    Property experience : Integer\n\n  Relationship hasEngine\n    From Vehicle\n    To Engine\n\n  Relationship hasDriver\n    From Vehicle\n    To Driver\n\n  Activity InitialState\n    ActivityNode start\n    ActivityNode vehicleMass = 2000\n    ActivityNode gearSetting = 0\n    ActivityNode acceleratorPosition = 0.0\n    ActivityNode end\n\n  Activity NextState\n    ActivityNode vehicleMass = 1500\n    ActivityNode gearSetting = 2\n    ActivityNode acceleratorPosition = 0.5\n    ActivityNode end\n\n  Requirement describeVehicleAttributes\n    Text \"This system is used to describe a composite system comprising vehicles, engines, and drivers, in which each vehicle possesses attributes such as mass and state. The state of a vehicle includes gear setting and accelerator pedal position. The system provides a specific vehicle instance, 'Vehicle_1', which has different attributes at two different time points: at the initial",
    "package VehicleModel {\n\n  Block Vehicle {\n    Property mass : Real;\n    Property gearPosition : String;\n    Property throttlePosition : Real;\n    \n    Part engine : Engine;\n    \n    Reference driver : Driver;\n  }\n\n  Block Engine {\n    \n  }\n\n  Block Driver {\n    Property name : String;\n  }\n\n  ValueSpecification InitialMass {\n    value : 2000.0\n  }\n\n  ValueSpecification InitialGear {\n    value : \"Neutral\"\n  }\n\n  ValueSpecification InitialThrottle {\n    value : 0.0\n  }\n\n  ValueSpecification FinalMass {\n    value : 1500.0\n  }\n\n  ValueSpecification FinalGear {\n    value : \"Second\"\n  }\n\n  ValueSpecification FinalThrottle {\n    value : 0.5\n  }\n\n  \n}\n",
    "package VehicleMassSystem {\n\n  Block Vehicle {\n    \n    Property Mass : Real\n    \n    Block Body {\n      Property Mass : Real\n    }\n    \n    Block Engine {\n      Property Mass : Real\n    }\n    \n    Block Transmission {\n      Property Mass : Real\n    }\n    \n    \n    \n  }\n}",
    "Block: Vehicle\n  Property: VIN (String)\n  Property: Mass (Real)\n  \nBlock: Component\n  Property: SerialNumber (String)\n  Property: Mass (Real)\n  \nBlock: Engine\n  Specialization: Component\n  \nBlock: Transmission\n  Specialization: Component\n  \nRelationship: hasPart\n  From: Vehicle\n  To: Component\n  \nRelationship: hasPart\n  From: Component\n  To: Component\n  \nConstraint: TotalMass\n  From: Vehicle\n  Expression: self.Mass = sum(self.hasPart.Mass)",
    "package MassAggregationSystem\n\n  Block MassAggregationSystem {\n    Property simpleMass : Real\n    Property totalMass : Real\n    \n    Block simpleThing {\n      Property simpleMass : Real\n      Property totalMass : Real\n      \n      Constraint totalMass = simpleMass\n    }\n    \n    Block compositeThing {\n      Property simpleMass : Real\n      Property totalMass : Real\n      \n      Part subcomponent : compositeThing\n      \n      Constraint totalMass = simpleMass + subcomponent.totalMass\n    }\n  }\nend MassAggregationSystem",
    "System MassManagementSystem {\n  \n  Property massThreshold : Real;\n  \n  Block Object {\n    Property basicMass : Real;\n    \n    Block Subcomponent {\n      Property mass : Real;\n    }\n    \n    Reference subcomponents : Subcomponent*;\n    \n    Calculation totalMass : Real = basicMass + sum(subcomponents.mass);\n    \n    Calculation filteredTotalMass : Real = basicMass + sum(subcomponents.mass | subcomponents.mass >= massThreshold);\n  }\n  \n}",
    "Block: VehicleDynamicsSystem\n  Property: powerOutput\n    Type: Real\n  Property: acceleration\n    Type: Real\n  Property: speed\n    Type: Real\n  Property: position\n    Type: Real\n  Requirement: Req_001\n    Text: \"The system must be capable of calculating the core parameters of vehicle dynamics, including the vehicle's power output, acceleration, speed, and position under various operating conditions.\"\n  Requirement: Req_002\n    Text: \"It should accurately calculate the vehicle’s actual available power output based on key input parameters such as wheel power, aerodynamic drag coefficient, friction coefficient, vehicle mass, and speed.\"\n  Requirement: Req_003\n    Text: \"Additionally, the system should be able to deduce the vehicle’s acceleration based on effective power, mass, and current speed, and utilize the obtained acceleration, initial speed, and time to calculate the vehicle’s speed at any given moment.\"\n  Requirement: Req_004\n    Text: \"Furthermore, the system should have the capability to estimate vehicle displacement based on speed and time, helping end-users comprehensively analyze and predict the dynamic performance of the vehicle under",
    "System VehicleDynamicsSimulation {\n  \n  Requirement \"This system is designed to simulate and compute the dynamic behavior of vehicles during straight-line driving, taking into account influencing factors such as aerodynamic drag and rolling resistance.\"\n  Requirement \"By utilizing the wheel-end output power and the total vehicle mass, the system dynamically calculates the vehicle's acceleration, speed, and position.\"\n  Requirement \"Given the initial speed and position, as well as a specified time step, and by comprehensively considering parameters such as the aerodynamic drag coefficient and rolling resistance coefficient, the system first determines the available driving power under current conditions, then calculates the vehicle's acceleration accordingly, and further derives the new speed and position of the vehicle at the end of the time step.\"\n  Requirement \"The system allows users to flexibly set key parameters and can provide accurate physical modeling and computational foundations for applications such as straight-line driving performance analysis, energy consumption simulation, and driving strategy optimization.\"\n  \n  Property \"Initial Speed\"\n  Property \"Initial Position\"\n  Property \"Time Step\"\n  Property \"Aerodynamic Drag Coefficient\"\n  Property \"Rolling Resistance Coefficient\"\n  Property \"Wheel-end Output Power\"\n  Property \"Total Vehicle Mass",
    "package VehicleDynamicsModel {\n\n  Block VehicleDynamicsSystem {\n    \n    Property mass : Real;\n    Property wheelPower : Real;\n    Property dragCoefficient : Real;\n    Property rollingResistanceCoefficient : Real;\n    Property initialSpeed : Real;\n    Property initialPosition : Real;\n    \n    Requirement req_vehicleDynamicsCalculation {\n      text = \"The system automatically calculates and updates the vehicle's speed and position at each time step.\";\n    }\n    \n    Requirement req_comprehensiveDynamicsModeling {\n      text = \"The system comprehensively accounts for the effects of air resistance and frictional resistance on vehicle dynamics.\";\n    }\n    \n    Requirement req_dynamicStatePrediction {\n      text = \"The system uses this information to predict the vehicle's velocity, acceleration, displacement, and other dynamic states over time.\";\n    }\n    \n    Requirement req_performanceAnalysis {\n      text = \"This assists end users in analyzing vehicle performance under different operating conditions.\";\n    }\n    \n    Requirement req_automationAndEfficiency {\n      text = \"thereby enabling the automation and efficient management of vehicle dynamics simulation.\";\n    }\n    \n  }\n}",
    "System VehicleDynamics {\n  \n  Requirement {\n    name = \"Initial Position\";\n    type = \"Input\";\n    description = \"The initial position of the vehicle.\";\n  }\n  Requirement {\n    name = \"Initial Velocity\";\n    type = \"Input\";\n    description = \"The initial velocity of the vehicle.\";\n  }\n  Requirement {\n    name = \"Vehicle Mass\";\n    type = \"Input\";\n    description = \"The mass of the vehicle.\";\n  }\n  Requirement {\n    name = \"Wheel-end Drive Power\";\n    type = \"Input\";\n    description = \"The power delivered to the wheels.\";\n  }\n  Requirement {\n    name = \"Time Interval\";\n    type = \"Input\";\n    description = \"The duration of the simulation.\";\n  }\n  Requirement {\n    name = \"Drag Coefficient\";\n    type = \"Input\";\n    description = \"The coefficient of air resistance.\";\n  }\n  Requirement {\n    name = \"Friction Coefficient\";\n    type = \"Input\";\n    description = \"The coefficient of friction.\";\n  }\n  \n  Property {\n    name",
    "package VehicleWeightManagementSystem\n\n  Block Vehicle {\n    Property Mass : Real\n    Property MaxMass : Real = 2500\n    \n    Block Chassis {\n      Property Mass : Real\n    }\n    \n    Block Engine {\n      Property Mass : Real\n    }\n    \n    Block Gearbox {\n      Property Mass : Real\n    }\n    \n    Constraint TotalMass <= MaxMass {\n      Expression (Chassis.Mass + Engine.Mass + Gearbox.Mass) <= MaxMass\n    }\n    \n    Action OverweightWarning {\n      Trigger TotalMass > MaxMass\n      Effect \"Issue an overweight warning\"\n    }\n  }\n\nendpackage",
    "Block: VehicleMassBudgetingSystem\n  {\n    Property: massLimit\n      {\n        Type: Real\n        Value: 2500\n        Unit: kilogram\n      }\n    Property: componentMasses\n      {\n        Type: Real\n        Unit: kilogram\n      }\n    Block: Chassis\n      {\n        Property: mass\n          {\n            Type: Real\n            Unit: kilogram\n          }\n      }\n    Block: Engine\n      {\n        Property: mass\n          {\n            Type: Real\n            Unit: kilogram\n          }\n      }\n    Block: Transmission\n      {\n        Property: mass\n          {\n            Type: Real\n            Unit: kilogram\n          }\n      }\n    Constraint: massConstraint\n      {\n        Expression: componentMasses >= massLimit\n        Description: \"Total mass of vehicle components exceeds the limit\"\n      }\n  }",
    "Block: VehicleMassManagementSystem\n  {\n    Property: TotalMass\n      {\n        Type: Real\n        Value: 2500\n      }\n    Property: ChassisMass\n      {\n        Type: Real\n      }\n    Property: EngineMass\n      {\n        Type: Real\n      }\n    Property: TransmissionMass\n      {\n        Type: Real\n      }\n    Constraint: MassLimit\n      {\n        Expression: ChassisMass + EngineMass + TransmissionMass <= TotalMass\n      }\n  }Block: Vehicle\n  {\n    Part: Chassis\n      {\n        Property: Mass\n          {\n            Type: Real\n          }\n      }\n    Part: Engine\n      {\n        Property: Mass\n          {\n            Type: Real\n          }\n      }\n    Part: Transmission\n      {\n        Property: Mass\n          {\n            Type: Real\n          }\n      }\n  }\n\n\n",
    "Block: VehicleWeightManagementSystem\n  Property: MaxWeight {Value: 2500 kg}\n  Property: ChassisWeight {Type: Real}\n  Property: EngineWeight {Type: Real}\n  Property: TransmissionWeight {Type: Real}\n  Property: TotalWeight {Type: Real, Derived: true}\n  Constraint: TotalWeight <= MaxWeight\n  \n  Block: Chassis\n    Property: Weight {Type: Real}\n  \n  Block: Engine\n    Property: Weight {Type: Real}\n  \n  Block: Transmission\n    Property: Weight {Type: Real}\n  \n  Activity: WeightManagement\n    Input: ChassisWeight\n    Input: EngineWeight\n    Input: TransmissionWeight\n    Activity: CalculateTotalWeight\n      Output: TotalWeight\n    Activity: CheckWeightLimit\n      Input: TotalWeight\n      Output: Warning\n      Output: Restriction",
    "package VehicleSystem\n\n  Block Vehicle {\n    Property Mass : Real = 0.0\n    \n    Block Chassis {\n      Property Mass : Real = 0.0\n    }\n    \n    Block Engine {\n      Property Mass : Real = 0.0\n    }\n    \n    Block Transmission {\n      Property Mass : Real = 0.0\n    }\n    \n    Constraint TotalMassConstraint {\n      Vehicle.Mass <= 2500.0\n    }\n    \n    Activity DynamicBehavior {\n      Parameter InitialVelocity : Real\n      Parameter FinalVelocity : Real\n      Parameter Mass : Real\n      Parameter AppliedForce : Real\n      Parameter Time : Real\n      \n      Constraint MassConstraint {\n        Mass > 0.0\n      }\n      \n      Constraint DynamicConstraint {\n        AppliedForce * Time = Mass * (FinalVelocity - InitialVelocity)\n      }\n    }\n  }\nendpackage",
    "package VehicleMaintenanceSystem\n\n  Block VehicleMaintenanceSystem {\n    Property \"nextMaintenanceTime\" : Time\n    Property \"maintenanceInterval\" : Time\n    Property \"maxTemperature\" : Temperature\n    Property \"vehicleStatus\" : String\n    \n    Requirement \"maintenanceTimeReached\" : \"The system will automatically determine whether the vehicle has reached the maintenance time.\"\n    Requirement \"maintenanceStartTimeLater\" : \"The actual maintenance start time must be later than the scheduled maintenance time.\"\n    Requirement \"maintenanceInitiationDelay\" : \"The maintenance must be initiated within 2 seconds after the previous healthy state ends.\"\n    Requirement \"maintenanceDurationLimit\" : \"The duration of the maintenance must not exceed 48 hours.\"\n    Requirement \"maintenancePostponement\" : \"After the maintenance is completed, the vehicle’s next maintenance time will be automatically postponed according to the maintenance interval.\"\n    Requirement \"healthStatusRestoration\" : \"After the maintenance is completed, its health status will be restored to normal.\"\n\n    \n  }\n\nendpackage",
    "Block: Vehicle\n  Property: mass\n    Type: Real\n    Value: \n  Property: fuelMass\n    Type: Real\n    Value: \n  Property: maxMassLimit\n    Type: Real\n    Value: \n  Constraint: mass <= maxMassLimit\n  Constraint: fuelMass > 0\n\nBlock: Engine\n  Property: torque\n    Type: Real\n    Value: \n  Property: speed\n    Type: Real\n    Value: \n\nBlock: Transmission\n  Property: torque\n    Type: Real\n    Value: \n\nBlock: Clutch\n  Property: torque\n    Type: Real\n    Value: \n\nRelationship: drives\n  Source: Engine\n  Target: Transmission\n  Type: Flow\n\nRelationship: transmits\n  Source: Transmission\n  Target: Vehicle\n  Type: Flow\n\nConstraint: Engine.torque = Transmission.torque\nConstraint: Transmission.torque = Vehicle.torque",
    "Block: Vehicle\n  Property: TotalMass\n    Value: 2000 kg\n    Condition: FuelTank = Full\n  Property: TotalMass\n    Value: 1500 kg\n    Condition: FuelTank = Empty\n  \nBlock: Engine\n  Property: Torque\n    Value: see Table 1\n    Condition: Speed = see Speed-Torque Curve\n  \nBlock: Transmission\n  Property: Torque\n    Value: see Engine Torque\n  \nBlock: Clutch\n  Property: Interface\n    Value: Engine to Transmission\n  \nRequirement: VehicleMassControl\n  Description: The system aims to regulate vehicle mass control.\nRequirement: PowertrainInterface\n  Description: The engine must be capable of transmitting its generated torque to the transmission via the clutch interface.\nRequirement: PowertrainPerformance\n  Description: The engine is required to deliver the necessary torque according to the speed-torque curve.",
    "Block: Vehicle\n  Property: Mass_Full\n    Value: 2000 kg\n  Property: Mass_Empty\n    Value: 1500 kg\n\nBlock: Engine\n  Property: Torque_Generated\n    Type: Real\n    Unit: Nm\n  Block: Clutch\n    Interface: Torque_Transmission\n      Property: Torque_Capacity\n        Value: 500 Nm\n\n  Block: Transmission\n    Interface: Torque_Reception\n      Property: Torque_Capacity\n        Value: 500 Nm\n\n  Requirement: Engine_Torque_Variation\n    Description: \"The engine's generated torque should vary with speed, conforming to the relevant performance table specifications.\"\n  Requirement: Mass_Requirement\n    Description: \"The vehicle's total mass must not exceed 2000 kilograms when fully fueled, and should not be higher than 1500 kilograms when empty.\"\n  Requirement: Power_Interface_Requirement\n    Description: \"The design of both the vehicle and its engine must meet these critical requirements for mass and power interface to ensure overall vehicle performance and safety.\"\n\n  Connector: Engine_to_Clutch\n    End1: Engine\n    ",
    "Block: Vehicle\n  Property: Mass\n    Type: Real\n    Unit: kg\n  Property: CurbMass\n    Type: Real\n    Unit: kg\n  Property: FuelMass\n    Type: Real\n    Unit: kg\n  Property: Torque\n    Type: Real\n    Unit: Nm\n  Requirement: MassLimit_FullTank\n    Text: \"The actual mass of the vehicle must not exceed 2000 kg when the fuel tank is full.\"\n    Constraint: Vehicle.Mass <= 2000\n  Requirement: MassLimit_EmptyTank\n    Text: \"The actual mass of the vehicle must not exceed 1500 kg when the fuel tank is empty.\"\n    Constraint: Vehicle.Mass <= 1500\n  Requirement: TorqueCharacteristics\n    Text: \"The engine must be capable of generating the specified torque characteristics at various speeds.\"\n  Requirement: TorqueTransmission\n    Text: \"The generated torque must be effectively transmitted to the gearbox through the clutch interface to ensure smooth power delivery.\"",
    "Block: VehiclePerformanceAnalyzer\n  \n  Property: curbWeight\n    Type: Real\n  Property: payload\n    Type: Real\n  Property: wheelDiameter\n    Type: Real\n  Property: transmissionEfficiency\n    Type: Real\n  Property: fuelEconomyUrban\n    Type: Real\n  Property: fuelEconomyHighway\n    Type: Real\n  \n  Requirement: req_fuelEconomyTarget\n    Text: \"The vehicle shall achieve a fuel economy of over 30 miles per gallon under given scenarios and vehicle configurations.\"\n  \n  UseCase: analyzeVehiclePerformance\n    Actor: User\n    Description: \"The user analyzes the dynamic performance of a vehicle.\"\n    \n    Flow:\n      Start\n      User inputs vehicle attributes (curbWeight, payload, wheelDiameter, transmissionEfficiency, fuelEconomyUrban, fuelEconomyHighway)\n      User inputs driving cycle (time-stamped position and speed information)\n      System calculates engine power, acceleration, and other dynamic parameters\n      System calculates vehicle fuel economy throughout the driving cycle\n      System verifies compliance with fuel economy target (req_fuelEconomyTarget)\n      End",
    "package VehicleFuelEconomySimulation\n\n  requirement FuelEconomyRequirement {\n    description \"The vehicle fuel economy should exceed 30 miles per gallon.\"\n  }\n\n  block Vehicle {\n    property CurbWeight : Real\n    property Load : Real\n    property WheelDiameter : Real\n    property TransmissionEfficiency : Real\n    \n    \n    \n  }\n\n  block DrivingScenario {\n    property UrbanDriving : Boolean\n    property HighwayDriving : Boolean\n    property DrivingTrajectory : String\n    property SpeedVariation : Real\n  }\n\n  block FuelEconomyAnalysis {\n    input Vehicle\n    input DrivingScenario\n    output FuelConsumption : Real\n    output FuelEconomy : Real\n  }\n\n  activity FuelEconomySimulation {\n    start\n    activity_node CalculateWheelPower\n    activity_node ApplyVehicleDynamics\n    activity_node EstimateEnginePowerDemand\n    activity_node CalculateFuelConsumption\n    activity_node CalculateFuelEconomy\n    end\n  }\n",
    "Block: EngineSelectionSystem\n  {\n    Property: engineType\n      {\n        Type: Enumeration\n        Literal: \"Four-Cylinder\"\n        Literal: \"Six-Cylinder\"\n      }\n    Property: power\n      {\n        Type: Real\n      }\n    Property: mass\n      {\n        Type: Real\n      }\n    Property: efficiency\n      {\n        Type: Real\n      }\n    Property: cost\n      {\n        Type: Real\n      }\n    Property: evaluationScore\n      {\n        Type: Real\n      }\n    Requirement: Req_001\n      {\n        Text: \"The system shall aggregate and calculate key performance indicators for each engine type.\"\n      }\n    Requirement: Req_002\n      {\n        Text: \"The system shall use a unified evaluation function to comprehensively assess each engine.\"\n      }\n    Requirement: Req_003\n      {\n        Text: \"The system shall automatically screen and recommend the optimal engine selection.\"\n      }\n  }",
    "Block: VehicleCurbWeightCheck\n\n  Property: curbWeightLimit\n    Type: Real\n    Value: 2500\n\n  Property: evaluationResult\n    Type: String\n    Value: \"Qualified\" | \"Unqualified\"\n\n  Requirement: R1\n    Text: \"The curb weight of each vehicle must be less than or equal to 2,500 kilograms.\"\n    Trace: [Requirement: R1]\n\n  Activity: VehicleCurbWeightCheckProcess\n    ActivityNode: DataCollection\n    ActivityNode: DataProcessing\n    ActivityNode: WeightEvaluation\n    ActivityNode: ResultOutput\n\n    ActivityEdge: DataCollection -> DataProcessing\n    ActivityEdge: DataProcessing -> WeightEvaluation\n    ActivityEdge: WeightEvaluation -> ResultOutput\n\n",
    "package VehicleMassVerificationSystem\n\n  Block Vehicle {\n    Property mass : Real\n  }\n\n  Block WeighingEquipment {\n    Property accuracy : Real\n  }\n\n  Block MassVerificationUnit {\n    Property verificationThreshold : Real = 2500\n  }\n\n  Activity MassInspection {\n    Input Vehicle\n    Input WeighingEquipment\n    Output Qualified : Boolean\n    ActivityStep MeasureMass {\n      Input Vehicle\n      Output measuredMass : Real\n    }\n    ActivityStep VerifyMass {\n      Input measuredMass\n      Input MassVerificationUnit\n      Output Qualified : Boolean\n    }\n  }\n\nendpackage",
    "Block: System\n  {\n    Name = \"Transportation System\"\n    Description = \"A system designed to provide end users with a convenient and efficient mode of transportation.\"\n    \n    Property: Convenience\n      {\n        Type = \"Boolean\"\n        Value = \"True\"\n      }\n    Property: Efficiency\n      {\n        Type = \"Boolean\"\n        Value = \"True\"\n      }\n    Property: Safety\n      {\n        Type = \"Boolean\"\n        Value = \"True\"\n      }\n    Property: Sustainability\n      {\n        Type = \"Boolean\"\n        Value = \"True\"\n      }\n    \n    Requirement: R1\n      {\n        Text = \"The system is capable of supporting a driver and up to four passengers sharing a vehicle.\"\n      }\n    Requirement: R2\n      {\n        Text = \"Users can freely enter and exit the vehicle, and the system should ensure that this process is simple and smooth.\"\n      }\n    Requirement: R3\n      {\n        Text = \"The system should fully consider and integrate surrounding environmental factors to ensure the safety and sustainability of the entire journey.\"\n      }\n",
    "package TransportationSystem\n\n  Block \"TransportationSystem\" {\n    \n    Property \"Number of Passengers\" {\n      Type = Integer\n      Value = 4\n    }\n    \n    Property \"Starting Point\" {\n      Type = String\n    }\n    \n    Property \"Destination\" {\n      Type = String\n    }\n    \n    Property \"Environmental Conditions\" {\n      Type = String\n    }\n    \n    Property \"Fuel Level\" {\n      Type = Integer\n    }\n    \n    Requirement \"Safety\" {\n      Text = \"The system should ensure the safe transportation of the driver and passengers.\"\n    }\n    \n    Requirement \"Convenience\" {\n      Text = \"Interactions among all participants should be simple and convenient.\"\n    }\n    \n    Requirement \"Fueling\" {\n      Text = \"The system should allow for refueling at a gas station as needed.\"\n    }\n    \n    Requirement \"Journey Completion\" {\n      Text = \"Upon arrival at the destination, the driver and passengers can safely exit the vehicle.\"\n    }\n    \n    \n    \n    \n  }\n  \nendpackage",
    "Block: Vehicle\n  Property: EngineType\n    Type: Enumeration\n    Value: {FourCylinder, SixCylinder}\n  Property: TransmissionType\n    Type: Enumeration\n    Value: {Manual, Automatic}\n  Property: CylinderCount\n    Type: Integer\n    Default: 4\n  Property: CylinderDiameter\n    Type: Enumeration\n    Value: {Small, Large}\n  \nBlock: FourCylinderEngine\n  Generalization: Engine\n  Property: CylinderCount\n    Value: 4\n\nBlock: SixCylinderEngine\n  Generalization: Engine\n  Property: CylinderCount\n  Value: 6\n\nBlock: ManualTransmission\n  Generalization: Transmission\n\nBlock: AutomaticTransmission\n  Generalization: Transmission\n\nConstraint: EngineTransmissionConstraint\n  Source: Vehicle\n  Target: Engine\n  Target: Transmission\n  Condition: \n    (EngineType = FourCylinder and TransmissionType = Manual) or\n    (EngineType = SixCylinder and TransmissionType = Automatic)\n",
    "package EngineConfiguration\n\n  Block Engine {\n    Property CylinderCount : Integer = {4, 6}\n    Property CylinderDiameter : Integer = {70, 100}\n    \n    Block Variant {\n      Property VariantName : String\n      \n      Variant FourCylinderEngine {\n        CylinderCount = 4\n        CylinderDiameter = 70\n      }\n      Variant SixCylinderEngine {\n        CylinderCount = 6\n        CylinderDiameter = 100\n      }\n    }\n  }\nendpackage",
    "Block: System\n  {\n    Property: engineType\n      Type: Enumeration\n      Literal: 4Cylinder, 6Cylinder\n    Property: transmissionType\n      Type: Enumeration\n      Literal: Manual, Automatic\n    Property: cylinderDiameter\n      Type: Real\n      Value: 70mm, 100mm\n    Constraint:\n      Name: engineTransmissionConstraint\n      Description: \"If the engine is a 4-cylinder, a manual transmission must be used; if the engine is a 6-cylinder, an automatic transmission must be used.\"\n      Expression: engineType = 4Cylinder implies transmissionType = Manual\n      Expression: engineType = 6Cylinder implies transmissionType = Automatic\n  }",
    "package SystemModel {\n\n  Block system {\n    \n    Property name = \"System\";\n    \n    Block systemAssembly {\n      \n      Property name = \"System Assembly\";\n      \n      Block computerSubsystem {\n        \n        Property name = \"Computer Subsystem\";\n        \n        Property interface = \"Software Interface\";\n      }\n      \n      Block storageSubsystem {\n        \n        Property name = \"Storage Subsystem\";\n        \n        Property interface = \"Data Format Interface\";\n      }\n    }\n    \n    Block softwareDesign {\n      \n      Property name = \"Software Design\";\n      \n      Property messageFormat = \"Defined\";\n      \n      Property dataFormat = \"Defined\";\n    }\n  }\n}",
    "System [name=\"Powertrain System\"] {\n  \n  Block [name=\"Logical Layer\"] {\n    \n    Block [name=\"Torque Generator\"] {\n      Property [name=\"Function\"] value=\"Convert power into torque\"\n    }\n    \n  }\n  \n  Block [name=\"Physical Layer\"] {\n    \n    Block [name=\"Power Unit\"] {\n      Property [name=\"Function\"] value=\"Power output and torque generation\"\n    }\n    \n  }\n  \n  Requirement [name=\"Mapping Requirement\"] {\n    text=\"The torque generator in the logical layer can be effectively mapped to the corresponding power unit (such as an engine) in the physical layer.\"\n  }\n  \n}",
    "Block: System\n  Property: power_output\n  Property: torque_output\n  \n  Requirement: req_power_transmission\n    text: \"The system requires the power transmission system to provide power and generate torque.\"\n  \n  Capability: power_delivery\n    text: \"The system possesses the capability to deliver power and generate torque.\"\n  \n  Capability: torque_generation\n    text: \"The system possesses the capability to generate torque.\"\n    Action: generate_torque\n      text: \"generating torque\"\n      \n  Allocation: alloc_torque_generator\n    from: power_delivery\n    to: Powertrain\n  Allocation: alloc_generate_torque\n    from: torque_generation\n    to: Engine",
    "package VehicleFeatureAnnotationSystem\n\n  Block Vehicle {\n    \n    Property safetyLevel : String\n    Property securityLevel : String\n\n    Block Interior {\n      \n      Block SeatBelt {\n        Property function : String = \"Safety\"\n      }\n      Block FrontSeat {\n        Property function : String = \"Safety\"\n      }\n      Block DriverAirbag {\n        Property function : String = \"Safety\"\n      }\n      Block AlarmSystem {\n        Property function : String = \"Security\"\n      }\n      \n      Interior <<contains>> SeatBelt\n      Interior <<contains>> FrontSeat\n      Interior <<contains>> DriverAirbag\n      Interior <<contains>> AlarmSystem\n    }\n\n    Block BodyAssembly {\n      Block BodyShell {\n        Property function : String = \"Protection\"\n      }\n      Block Bumpers {\n        Property function : String = \"Safety\"\n      }\n      Block KeylessEntryDevice {\n        Property function : String = \"Security\"\n      }\n      \n      BodyAssembly <<contains>> BodyShell\n      BodyAssembly <<contains>> Bumpers\n      BodyAssembly <<contains>> KeylessEntryDevice\n    }\n\n    Vehicle <<",
    "Block: System\n  Property: initialVelocity\n    Type: Real\n  Property: initialPosition\n    Type: Real\n  Property: acceleration\n    Type: Real\n  Property: timeStep\n    Type: Real\n  Property: velocity\n    Type: Real\n  Property: position\n    Type: Real\n  \n  Requirement: req_simulation\n    Text: \"The system shall be capable of performing automated simulation and analysis of vehicle dynamic behavior.\"\n  Requirement: req_input\n    Text: \"Users should be able to input the vehicle’s initial velocity, initial position, acceleration at a specific moment, and the time step.\"\n  Requirement: req_integration\n    Text: \"Through integration with the ModelCenter analysis tool, the system shall automatically calculate and output the vehicle’s velocity and position after the specified time step based on the given physical model.\"\n  Requirement: req_accuracy\n    Text: \"The system must ensure accurate data transfer and reliable output of simulation results, enabling users to conveniently obtain key dynamic parameters to support vehicle performance analysis and design optimization.\"\n\n  \n",
    "package SafetyFeatures {\n  \n}\n\npackage MandatorySafetyFeatures {\n  \n}\n\nblock Car {\n  \n  block Interior {\n    \n    part SeatBelt {\n      \n      constraint Mandatory = true\n    }\n    \n    part SeatBelt {\n      \n      constraint Mandatory = true\n    }\n    \n    part Airbag {\n      \n      constraint Mandatory = false\n    }\n  }\n  \n  block Body {\n    \n    part Bumper {\n      \n      constraint Mandatory = true\n    }\n  }\n  \n  block WheelAssembly {\n    \n    part Wheel {\n      \n    }\n    \n    part Wheel {\n      \n    }\n    \n    part ABS {\n      \n      constraint Mandatory = false\n    }\n  }\n  \n  block KeylessEntry {\n    \n  }\n}\n\n\n",
    "package VehicleSafetyComplianceSystem\n\n  Block Vehicle {\n    Property NumberOfTires {\n      Type Integer\n    }\n    Block Interior {\n      Property SeatBelts {\n        Type Integer\n        Value 2\n      }\n      Block SafetyFeatures {\n        Property DriverAirbag {\n          Type Boolean\n          Value False\n        }\n      }\n    }\n    Block Body {\n      Property Bumper {\n        Type Boolean\n        Value True\n      }\n      Property KeylessEntry {\n        Type Boolean\n        Value False\n      }\n    }\n    Block Chassis {\n      Property ABS {\n        Type Boolean\n        Value False\n      }\n    }\n  }\n\n  Requirement SafetyComponentCategorization {\n    text \"The system categorizes and manages all safety-related parts and further distinguishes which safety components are required by law or industry standards and which are non-mandatory configurations, ensuring that the vehicle meets fundamental safety standards while offering more optional safety functions.\"\n  }\n  Requirement SeatBeltRequirement {\n    text \"The vehicle interior must be equipped with two seat belts, and both seat belts are required safety features.\"\n  }\n  Requirement BumperRequirement {\n    ",
    "package RiskManagementSystem {\n\n  // Block Definition\n  block System {\n    \n    // Property\n    property \"Risk Description\" : String\n    property \"Failure Description\" : String\n    property \"Probability\" : Real\n    property \"Severity Level\" : String\n\n    // Relationship\n    relationship \"Causes\" :  \n      from System to System\n    relationship \"Leads To\" :  \n      from System to System\n    relationship \"Impact Mechanism\" :  \n      from System to System\n\n  }\n\n}",
    "Block: System\n  {\n    Property: name \"Risk Metadata Modeling and Management System\"\n    Property: description \"This system is designed for systematic risk metadata modeling and management across various scenarios, causes, and failures. Users can identify and describe different scenarios that may occur within the system. For each scenario, the specific causes and their probabilities of occurrence can be detailed, and possible failure types along with their severity levels can be associated. Furthermore, the system supports the description and tracking of causal relationships between scenarios, facilitating the understanding and analysis of risk propagation chains. On this basis, users can also combine a set of interrelated scenarios, causes, and failures to form complete risk scenarios, supporting risk analysis and decision-making. The system metadata is compatible with standard modeling languages, making it easy to integrate into larger systems engineering environments and enhancing the systematic capabilities of risk identification, analysis, and management.\"\n  }\n\n",
    "Block: System\n  Property: batteryLevel\n    Type: Real\n  Property: deviceState\n    Type: String\n    Value: \"Normal\"\n  Property: severityLevel\n    Type: Integer\n    Value: 1\n\n  Requirement: REQ-001\n    Text: \"This system is designed to identify and analyze potential risks and failure scenarios that may occur in the equipment.\"\n  Requirement: REQ-002\n    Text: \"The equipment includes key components such as batteries, and it is required to continuously monitor the battery level during operation.\"\n  Requirement: REQ-003\n    Text: \"When the probability of battery failure increases due to aging or other factors, the system must be able to detect such situations and identify the risk that “battery aging” may lead to “low battery level.”\"\n  Requirement: REQ-004\n    Text: \"When the battery level falls below the set minimum threshold, the system should determine that the equipment is in a “low battery” state and further analyze the situation.\"\n  Requirement: REQ-005\n    Text: \"If this state persists for a prolonged period without recovery, the device may automatically shut down",
    "Block: System\n  Property: structuralDecomposition\n    Value: true\n  Property: hierarchicalStructure\n    Value: true\n  Property: subsystemDecomposition\n    Value: true\n  Property: componentInterfaces\n    Value: wellDefined\n  Property: independentAnalysis\n    Value: true\n  Property: IVVComprehension\n    Value: true\n  Property: systemIntegrity\n    Value: true\n  Property: modularDesign\n    Value: true\n  Property: functionalRequirements\n    Value: met\n  Property: performanceRequirements\n    Value: met",
    "package AutomotiveSystem\n\n  // Block Definitions\n  block RootComponent {\n    // ...\n  }\n\n  block Subsystem1 {\n    // ...\n  }\n\n  block Subsystem2 {\n    // ...\n  }\n\n  block ComponentA {\n    // ...\n  }\n\n  block ComponentB {\n    // ...\n  }\n\n  // Property Definitions\n  property SafetyAttribute : String {\n    // ...\n  }\n\n  property Mandatory : Boolean {\n    // ...\n  }\n\n  property Optional : Boolean {\n    // ...\n  }\n\n  // Relationship Definitions\n  part-of RootComponent to Subsystem1\n  part-of RootComponent to Subsystem2\n  part-of Subsystem1 to ComponentA\n  part-of Subsystem1 to ComponentB\n  // ...\n\n  // View Definitions\n  view HierarchicalStructure {\n    // ...\n  }\n\n  view SafetyComponents {\n    // ...\n  }\n\n  view NonSafetyComponents {\n    // ...\n  }\n\nendpackage**Note:** This is a basic structure. You will need to populate the `// ...` sections with specific details based on the requirements.\n\n\n\n",
    "package AutomotiveDomain\n\n  block Automobile {\n    alias \"Car\"\n    description \"汽车 (Automobile)\"\n    \n    property Torque : Quantity\n  }\n\nendpackage",
    "Block: System\n  {\n    Name = \"Automobile Document Management Platform\"\n    Description = \"This system aims to establish a document management platform related to automobiles.\"\n  }\n\nBlock: Automobile\n  {\n    Name = \"Automobile\"\n    Description = \"Core object for managing and recording information and documentation about automobiles.\"\n  }\n\nBlock: Car\n  {\n    Name = \"Car\"\n    Description = \"Alias for 'Automobile', enabling flexible searches and operations.\"\n    Alias = Automobile\n  }\n\nBlock: TorqueValue\n  {\n    Name = \"TorqueValue\"\n    Description = \"Physical quantity representing torque, compatible with the ISQ standard.\"\n    Stereotype = \"ISQ\"\n  }\n\nBlock: Document\n  {\n    Name = \"Document\"\n    Description = \"Explanatory document for objects and their aliases.\"\n  }\n\nRelationship: hasDocument\n  {\n    Source = Document\n    Target = {Automobile, Car}\n    Description = \"Documents associated with objects and their aliases.\"\n  }",
    "package AutomobileSystem\n\n  // Block Definitions\n  block Automobile {\n    \n    // Property Definitions\n    property TorqueValue : TorqueValue\n    \n    // Alias Definitions\n    alias Car : Automobile\n  }\n\n  block TorqueValue {\n    \n    // Property Definitions\n    property value : Real\n    \n    // Alias Definitions\n    alias Torque : TorqueValue\n  }\n\n  // Constraint Definitions\n  constraint TorqueValue_NonNegative {\n    TorqueValue.value >= 0\n  }\n\n  // Data Type Definitions\n  datatype Real\n  \nend package",
    "Block: Vehicle\n  Property: size (String)\n  Property: engine (Engine)\n\nBlock: Engine\n  Property: cylinderCount (Integer)\n\nConstraint:\n  Name: CylinderCountConstraint\n  Expression:\n    if (Vehicle.size = \"Standard\") then\n      4 <= Engine.cylinderCount <= 6\n    elseif (Vehicle.size = \"Small\") then\n      Engine.cylinderCount = 4\n    elseif (Vehicle.size = \"Large\") then\n      Engine.cylinderCount = 6",
    "Block: FuelManagementSystem\n  {\n    Property: FuelFlowRate\n    Property: FuelTemperature\n    Property: FuelLevel\n    \n    Requirement: FuelFlowManagement\n      {\n        text: \"The system shall be capable of managing fuel flow, ensuring that fuel can be delivered from the fuel tank to the engine and supporting fuel return.\"\n      }\n    Requirement: FuelTemperatureMonitoring\n      {\n        text: \"During operation, the system shall monitor and manage the temperature of the fuel.\"\n      }\n    Requirement: FuelSupplyAndReturn\n      {\n        text: \"The system shall realize fuel supply and return through fuel interfaces.\"\n      }\n    Requirement: StandardizedFuelInterfaces\n      {\n        text: \"The fuel tank and the engine shall be connected via standardized fuel interfaces to ensure the reliability and safety of fuel flow.\"\n      }\n    \n    Interface: FuelInterface\n      {\n        Property: FuelFlowRate\n        Property: FuelTemperature\n      }\n    \n    Part: FuelTank\n    Part: Engine\n  }\n",
    "Block: Vehicle\n  {\n    Property: mass\n      Type: Real\n      Value: 1750 kg\n  }\n  \n  Block: AxleAssembly\n    {\n      Property: axleType\n        Type: String\n    }\n  \n  Block: FrontAxle\n    {\n      Property: steeringAngle\n        Type: Angle\n    }\n  \n  Block: RearAxle\n    {\n    }\n  \n  Block: Wheel\n    {\n    }\n  \n  Vehicle\n    contains AxleAssembly\n  \n  Vehicle\n    contains FrontAxle\n  \n  Vehicle\n    contains RearAxle\n  \n  AxleAssembly\n    contains Wheel\n  \n  FrontAxle\n    contains Wheel\n  \n  RearAxle\n    contains Wheel"
]