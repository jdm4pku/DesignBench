[
    "package VehicleSystem\n\n  // Block Definitions\n  block Vehicle {\n    property VehicleMass : Real\n    property CurrentStatus : String\n    \n    part Engine : Engine\n    \n    association Driver : Driver\n  }\n\n  block Engine {\n    // Engine specific properties and behaviors\n  }\n\n  block Driver {\n    // Driver specific properties and behaviors\n  }\n\n  // Enumeration Definitions\n  enumeration VehicleStatus {\n    IDLE\n    DRIVE\n    REVERSE\n  }\n\n  // Property Definitions\n  property GearSetting : VehicleStatus\n  property AcceleratorPosition : Real\n\nendpackage",
    "package VehicleModeling\n\n  // Vehicle Types\n  class Vehicle {\n    \n    // Attributes\n    \n    name : String\n    \n    // Relationships\n    \n    driver : Personnel\n    powerDevice : Engine\n  }\n\n  class ManuallyOperatedVehicle : Vehicle {\n    \n  }\n\n  class PoweredVehicle : Vehicle {\n    \n  }\n\n  class ManuallyOperatedPoweredVehicle : ManuallyOperatedVehicle, PoweredVehicle {\n    \n  }\n\n  // Entities\n  class Personnel {\n    \n    // Attributes\n    \n    name : String\n  }\n\n  class Engine {\n    \n    // Attributes\n    \n    power : Integer\n  }\n\nendpackage",
    "package VehicleStructure\n\n  // Vehicle Component Types\n  class VehicleComponent {\n    \n  }\n\n  class Engine extends VehicleComponent {\n    \n  }\n\n  class Transmission extends VehicleComponent {\n    \n  }\n\n  class Wheel extends VehicleComponent {\n    \n  }\n\n  // Vehicle Type\n  class Vehicle {\n    \n    // Composition\n    Engine engine : 1\n    Transmission transmission : 1\n    Wheel wheels : 4\n  }\n\nendpackage",
    "package VehicleSystem\n\n  // Vehicle Type\n  class Vehicle {\n    \n    // Attributes\n    String vehicleType\n    \n    // Parts\n    Engine engine\n  }\n\n  // Engine Type\n  class Engine {\n    \n    // Attributes\n    String engineType\n    \n    // Parts\n    CylinderBlock cylinderBlock\n  }\n\n  // Cylinder Block\n  class CylinderBlock {\n    \n    // Attributes\n    Integer numberOfCylinders\n  }\n\n  // Vehicle Subtypes\n  class SmallVehicle : Vehicle {\n    \n    // Constraints\n    vehicleType = \"Small\"\n    engine = SmallEngine\n  }\n\n  class LargeVehicle : Vehicle {\n    \n    // Constraints\n    vehicleType = \"Large\"\n    engine = LargeEngine\n  }\n\n  // Engine Subtypes\n  class SmallEngine : Engine {\n    \n    // Constraints\n    engineType = \"Small\"\n    cylinderBlock = SmallCylinderBlock\n  }\n\n  class LargeEngine : Engine {\n    \n    // Constraints\n    engineType = \"Large\"\n    cylinderBlock = LargeCylinderBlock\n  }\n\n  // Cylinder Block Subtypes\n  class SmallCylinder",
    "package TrafficSignalSystem\n\n  Block TrafficSignal {\n    Property color : String {\n      Value {\n        \"green\"\n        \"yellow\"\n        \"red\"\n      }\n    }\n  }\n\n  Block GreenTrafficSignal : TrafficSignal {\n    constraint AlwaysGreen = color = \"green\"\n  }\n\nendpackage",
    "package InformationClassification\n\n  // Information Level\n  enum InformationLevel {\n    Unclassified,\n    Confidential,\n    Secret\n  }\n\n  // Information Level Code\n  block InformationLevelCode {\n    property code : String\n    property color : String\n    \n    InformationLevelCode[Unclassified] {\n      code = \"uncl\"\n      color = \"Green\"\n    }\n    InformationLevelCode[Confidential] {\n      code = \"conf\"\n      color = \"Yellow\"\n    }\n    InformationLevelCode[Secret] {\n      code = \"secr\"\n      color = \"Red\"\n    }\n  }\n\n  // Grade Level\n  enum GradeLevel {\n    A,\n    B,\n    C,\n    D,\n    F\n  }\n\n  // Grade Level Score\n  block GradeLevelScore {\n    property grade : GradeLevel\n    property score : Real\n    \n    GradeLevelScore[A] {\n      grade = A\n      score = 4.0\n    }\n    GradeLevelScore[B] {\n      grade = B\n      score = 3.0\n    }",
    "package VehicleSystem\n\n  class Vehicle {\n    \n    property VehicleType : String\n    \n    association SmallVehicle\n    association LargeVehicle\n  }\n\n  class SmallVehicle : Vehicle {\n    \n    property Engine : Engine\n  }\n\n  class LargeVehicle : Vehicle {\n    \n    property Engine : Engine\n  }\n\n  class Engine {\n    \n    property CylinderCount : Integer\n    \n    association Cylinder\n  }\n\n  class Cylinder {\n    \n  }\n\nendpackage",
    "package VehicleModeling\n\n  // Block Definitions\n  block Vehicle {\n    \n    // Attributes\n    property qualityAttributes : String\n    \n    // Parts\n    part Driver : Driver\n    part FuelTank : FuelTank\n    \n  }\n\n  block Driver {\n    \n    // Attributes\n    property name : String\n    property license : String\n    \n  }\n\n  block FuelTank {\n    \n    // Attributes\n    property fuelType : FuelType\n    property capacity : Real\n    \n  }\n\n  block FuelType {\n    \n    // Attributes\n    property name : String\n    \n  }\n\n  // Associations\n  association Vehicle_has_Driver {\n    Vehicle -- Driver\n  }\n\n  association Vehicle_has_FuelTank {\n    Vehicle -- FuelTank\n  }\n\n  // Other Data Types\n  datatype FuelType {\n    \n    // Attributes\n    property name : String\n    \n  }\n\n  datatype Personnel {\n    \n    // Attributes\n    property name : String\n    property role : String\n    \n  }\n\nendpackage",
    "package WheelAssembly\n\n  Block WheelAssembly {\n    \n    Property name : \"Wheel Assembly\";\n    \n    Block WheelBearingUnit {\n      \n    }\n    \n    Block Tire {\n      \n    }\n    \n    Block Bead {\n      \n    }\n    \n    Block Hub {\n      \n    }\n    \n    Block Rim {\n      \n    }\n    \n    Block BoltMountingHole {\n      \n    }\n    \n    Block ThreadedHole {\n      \n    }\n    \n    Block BoltConnection {\n      \n    }\n    \n    Requirement R1 {\n      text = \"The tire is sealed and fastened by pressing its two beads onto the two rims of the hub.\";\n    }\n    \n    Requirement R2 {\n      text = \"Multiple mounting holes are provided on the hub, which are connected to the threaded holes on the hub using bolts, thereby ensuring a reliable connection between the hub and the tire assembly.\";\n    }\n    \n    Requirement R3 {\n      text = \"This model provides a detailed description of the specific relationships and connection methods between each component, thus offering structural-level support for the design, assembly,",
    "package FuelManagementSystem\n\n  Block FuelTankAssembly {\n    Property fuelLevel : Real\n    Property temperature : Real\n    Port fuelOut {\n      Flow fuel\n    }\n    Port fuelReturn {\n      Flow fuel\n    }\n  }\n\n  Block Engine {\n    Property fuelConsumption : Real\n    Port fuelIn {\n      Flow fuel\n    }\n    Port fuelReturn {\n      Flow fuel\n    }\n  }\n\n  Block System {\n    Property fuelSupplyStatus : String\n    Property fuelReturnFlow : Real\n    Property fuelTemperature : Real\n    Interface UserInterface {\n      Property fuelSupplyData : Real\n      Property fuelReturnFlowData : Real\n      Property fuelTemperatureData : Real\n    }\n    Requirement fuelManagement {\n      description: \"The system shall effectively manage fuel flow.\"\n    }\n    Requirement temperatureMonitoring {\n      description: \"Temperature information shall be detected and transmitted at the interface.\"\n    }\n    Requirement realTimeData {\n      description: \"Users shall obtain real-time data on fuel supply, return flow, and related temperature parameters.\"\n    }\n    Requirement visualizedMonitoring {\n      description: \"Fuel flow status",
    "package VehicleConfiguration\n\n  Block Vehicle {\n    Property mass : Real = 1750\n    \n    Block FrontAxle {\n      Property mass : Real\n      \n      Block Tire {\n        Property name : String\n      }\n      \n      Part Tire::2\n    }\n    \n    Block RearAxle {\n      Property mass : Real\n      \n      Block Tire {\n        Property name : String\n      }\n      \n      Part Tire::2\n    }\n    \n    Part FrontAxle::1\n    Part RearAxle::1\n  }\n  \n  Block VehicleVariant {\n    Property name : String\n    \n    Block VehicleConfiguration {\n      Property mass : Real\n      \n      Block FrontAxle {\n        Property steeringAngle : Real\n      }\n    }\n  }\n  \n  \n  \n\n\n\n",
    "package CouplingSystem\n\n  Block Vehicle {\n    Property VehicleID : String\n    Block HitchReference {\n      Block Hitch {\n        Property HitchID : String\n        Block Connector {\n          Property ConnectorID : String\n        }\n      }\n    }\n  }\n\n  Block Trailer {\n    Property TrailerID : String\n    Block HitchReference {\n      Block Hitch {\n        Property HitchID : String\n        Block Connector {\n          Property ConnectorID : String\n        }\n      }\n    }\n  }\n\n  Relationship Connects {\n    Vehicle to HitchReference\n    Trailer to HitchReference\n  }\n\nend CouplingSystem",
    "package VehiclePowerTransmissionSystem\n\n  Block Engine {\n    Property fuelCommandPort : Port\n  }\n\n  Block Transmission {\n    Property powerPort : Port\n    Property clutchPort : Port\n  }\n\n  Block Clutch {\n  }\n\n  Block Driveshaft {\n  }\n\n  Block RearAxleAssembly {\n    Property differential : Block\n    Property leftHalfShaft : Block\n    Property rightHalfShaft : Block\n  }\n\n  Block Differential {\n  }\n\n  Block LeftHalfShaft {\n  }\n\n  Block RightHalfShaft {\n  }\n\n  Block Wheel {\n  }\n\n  Block RoadSurface {\n  }\n\n  Interface PowerFlow {\n    Property power : Flow\n  }\n\n  Interface CommandFlow {\n    Property command : Flow\n  }\n\n  Requirement ModularAndReconfigurable {\n    Description \"The system is designed to be modular and reconfigurable\"\n  }\n\n  Requirement FlexibleCombination {\n    Description \"Supports port and component binding, redefinition, and multi-level nesting\"\n  }\n\n  Requirement ClearTransmission {\n    Description \"Ensures clear transmission of power and command flows among the components\"\n  }\n\n  ",
    "package System\n\n  Block b11 {\n    Property name = \"Subsystem b11\"\n    Block c1 {\n      Property name = \"Component c1\"\n      Port pb {\n        Property name = \"Port pb\"\n      }\n    }\n    Block c2 {\n      Property name = \"Component c2\"\n      Port pc {\n        Property name = \"Port pc\"\n      }\n    }\n    Interface pe {\n      Property name = \"Interface pe\"\n      Port p {\n        Property name = \"Port p\"\n      }\n    }\n    Connector c1_to_c2 {\n      Source = c1.pb\n      Target = c2.pc\n    }\n    Connector pe_to_c1 {\n      Source = pe.p\n      Target = c1.pb\n    }\n  }\n\n  Block b12 {\n    Property name = \"Subsystem b12\"\n    Block c3 {\n      Property name = \"Component c3\"\n      Port pd {\n        Property name = \"Port pd\"\n      }\n    }\n    Block c4 {\n      Property name",
    "package PowertrainSystem\n\n  Block PowertrainSystem {\n    \n    Property fuelCommand : String\n    Property engineState : Boolean\n    Property torque : Real\n    Property drivingForce : Real\n    \n    Requirement fuelCommandInput {\n      description: \"Users can control the system’s power output through fuel commands.\"\n    }\n    Requirement engineStartStopControl {\n      description: \"Engine start-stop control is supported.\"\n    }\n    Requirement powerTransmissionAndDistribution {\n      description: \"Support for power transmission and distribution.\"\n    }\n    Requirement torqueGeneration {\n      description: \"Once the engine is ignited and started, the system generates engine torque according to the fuel command.\"\n    }\n    Requirement torqueAmplification {\n      description: \"The torque is then sequentially amplified from the engine to the transmission.\"\n    }\n    Requirement torqueTransmission {\n      description: \"The torque is transmitted to the driveshaft.\"\n    }\n    Requirement torqueDistribution {\n      description: \"The torque is finally distributed to the left and right wheels.\"\n    }\n    Requirement engineShutdown {\n      description: \"Users can shut down the engine via a command.\"\n    }",
    "package PowertrainControlSystem\n\n  requirement \"REQ-001\" {\n    text = \"Upon receiving a fuel control command, the system sequentially starts the engine and generates torque according to the predetermined order.\"\n  }\n\n  requirement \"REQ-002\" {\n    text = \"The generated torque is then successively amplified, transmitted, and distributed, delivering power stage by stage to the vehicle’s drive wheels to ensure normal driving.\"\n  }\n\n  requirement \"REQ-003\" {\n    text = \"When a stall signal is detected, the relevant operational processes will be halted as required.\"\n  }\n\n  requirement \"REQ-004\" {\n    text = \"The system supports engine start and shutdown control, as well as the entire power transmission process from fuel commands to actual wheel output torque, ensuring efficient and coordinated power delivery.\"\n  }\n\n  requirement \"REQ-005\" {\n    text = \"It provides users with a reliable power response and handling experience.\"\n  }\n\nendpackage",
    "package VehiclePowertrainSystem\n\n  Block VehiclePowertrainSystem {\n    \n    Property fuelInputCommand : String\n    Property engineStartSignal : Boolean\n    Property engineShutdownSignal : Boolean\n    Property engineOutputTorque : Real\n    Property transmissionOutputTorque : Real\n    Property wheelTorque : Real\n\n    Requirement req_1 {\n      text = \"This system can achieve integrated management of the vehicle powertrain system according to the driver's fuel input command.\"\n    }\n    Requirement req_2 {\n      text = \"When the engine start signal is activated, the system first generates the corresponding engine output torque based on the fuel command, then amplifies and transmits the torque sequentially through the transmission, and subsequently distributes the torque to each wheel, thereby achieving effective management and distribution of the vehicle's output power.\"\n    }\n    Requirement req_3 {\n      text = \"When the engine shutdown signal is triggered, the relevant power output process is terminated.\"\n    }\n    Requirement req_4 {\n      text = \"This entire process ensures that the vehicle performs automatic control accurately and efficiently in terms of power demand response, torque transmission, and power distribution, thereby enhancing the driving experience and improving energy efficiency",
    "package PowerConnectionSystem\n\n  Block Vehicle {\n    Property name \"Vehicle\"\n    Block HitchBall\n  }\n\n  Block Trailer {\n    Property name \"Trailer\"\n    Block TrailerCoupler\n  }\n\n  Block HitchingMechanism {\n    Property name \"Hitching Mechanism\"\n    Connector Connection {\n      end VehicleHitchBall : HitchBall\n      end TrailerCoupler : TrailerCoupler\n    }\n  }\n\n  Activity Connect {\n    ActivityNode Start\n    ActivityNode ConnectHitchingMechanism\n    ActivityNode End\n  }\n\n  Activity Disconnect {\n    ActivityNode Start\n    ActivityNode DisconnectHitchingMechanism\n    ActivityNode End\n  }\n\nend PowerConnectionSystem",
    "package VehicleTrailerConnectionSystem\n\n  Block Vehicle {\n    Property chassis : String\n    Property towBall : String\n  }\n\n  Block Trailer {\n    Property coupler : String\n    Property trailerFrame : String\n  }\n\n  Block Connection {\n    Property connected : Boolean\n    Property hitched : Boolean\n    Property unhitched : Boolean\n  }\n\n  Relationship Connects {\n    Vehicle to Connection\n    Trailer to Connection\n  }\n\n  Activity Hitch {\n    Input Vehicle\n    Input Trailer\n    Output Connection\n  }\n\n  Activity UnHitch {\n    Input Connection\n    Output Vehicle\n    Output Trailer\n  }\n\nendpackage",
    "package VehicleTrailerConnection\n\n  Block Vehicle {\n    Property chassis\n    Property towBallDevice\n  }\n\n  Block Trailer {\n    Property trailerChassis\n    Property couplerMechanism\n  }\n\n  Block CouplerMechanism {\n    Property internalStructure\n  }\n\n  Relationship Connects {\n    Source Vehicle\n    Target Trailer\n  }\n\n  Activity Hitch {\n    Input Vehicle\n    Input Trailer\n    Output Connected\n  }\n\n  Activity UnHitch {\n    Input Vehicle\n    Input Trailer\n    Output Disconnected\n  }\n\nendpackage",
    "package FuelSystem\n\n  Block FuelTank {\n    Property fuelLevel : Real\n    Property temperature : Real\n    Port fuelSupplyPort : FlowPort\n    Port fuelReturnPort : FlowPort\n  }\n\n  Block Engine {\n    Property temperature : Real\n    Port fuelSupplyPort : FlowPort\n    Port fuelReturnPort : FlowPort\n  }\n\n  Block FuelPump {\n    Property status : Boolean\n  }\n\n  Block FuelFilter {\n    Property status : Boolean\n  }\n\n  Block FuelLines {\n    Property length : Real\n  }\n\n  Flow fuelFlow {\n    source = FuelTank.fuelSupplyPort\n    target = Engine.fuelSupplyPort\n  }\n\n  Flow fuelReturnFlow {\n    source = Engine.fuelReturnPort\n    target = FuelTank.fuelReturnPort\n  }\n\n  Requirement fuelSystemSafety {\n    text = \"Ensure the safety and efficiency of fuel supply.\"\n  }\n\n  Requirement fuelSystemReliability {\n    text = \"Meet the requirements for stability and reliability of fuel supply during vehicle operation.\"\n  }\n\nendpackage",
    "package FuelDeliverySystem\n\n  Block FuelDeliverySystem {\n    \n    Property fuelCapacity : Real\n    Property fuelLevel : Real\n\n    Block StorageTank {\n      Property capacity : Real\n    }\n    \n    Block FuelPump {\n    }\n    \n    Block VehicleFuelTank {\n      Property capacity : Real\n      Property currentLevel : Real\n    }\n    \n    FlowPort fuelOut : FlowPort\n    FlowPort fuelIn : FlowPort\n    \n    Requirement fuelTransfer {\n      Description: \"Fuel is transferred from the storage tank to the vehicle fuel tank.\"\n    }\n    \n    Requirement fuelLevelMonitoring {\n      Description: \"The vehicle fuel tank monitors its current fuel level.\"\n    }\n    \n    Requirement safeFuelDelivery {\n      Description: \"Fuel is delivered to vehicles in a safe manner.\"\n    }\n    \n    Requirement accurateFuelQuantity {\n      Description: \"The quantity of fuel transferred is accurate.\"\n    }\n    \n  }\n\nendpackage",
    "package AutomobileAssembly\n\n  Block VehicleAssembly {\n    Property VehicleID : String\n    Property AssemblyStatus : String\n    \n    Part gearbox\n    Part engine\n  }\n\n  Block Gearbox {\n    Property GearRatio : Real\n  }\n\n  Block Engine {\n    Property Horsepower : Real\n  }\n\n  Activity AssemblyProcess {\n    ActivityNode Start {\n      Input VehicleAssembly\n    }\n    ActivityNode InstallGearbox {\n      Input VehicleAssembly\n      Output VehicleAssembly\n    }\n    ActivityNode InstallEngine {\n      Input VehicleAssembly\n      Output VehicleAssembly\n    }\n    ActivityNode End {\n      Input VehicleAssembly\n    }\n  }\n\n  Flow FinalAssemblyLine {\n    Source Start\n    Target InstallGearbox\n  }\n\n  Flow GearboxInstallation {\n    Source InstallGearbox\n    Target InstallEngine\n  }\n\n  Flow EngineInstallation {\n    Source InstallEngine\n    Target End\n  }\n\nend package",
    "package VehicleControlSystem\n\n  // State Machine for Vehicle Operation\n  statemachine VehicleOperationStateMachine {\n    state Off {\n      transition StartTransition : trigger = StartSignal and BrakePressed\n      transition HealthTransition : trigger = HealthCheckRequest\n    }\n    state Starting {\n      transition RunningTransition : trigger = VehicleOnSignal\n    }\n    state Running {\n      transition OffTransition : trigger = VehicleOffSignal\n      transition HealthTransition : trigger = HealthCheckRequest\n      transition DegradedTransition : trigger = TemperatureExceedsThreshold\n    }\n    state Degraded {\n      transition NormalTransition : trigger = RestoreToNormalSignal\n    }\n    state HealthManagement {\n      transition OffTransition : trigger = VehicleOffSignal\n      transition RunningTransition : trigger = VehicleOnSignal\n    }\n    state Maintenance {\n      transition OffTransition : trigger = VehicleOffSignal\n      transition RunningTransition : trigger = VehicleOnSignal\n    }\n    state Normal {\n      transition OffTransition : trigger = VehicleOffSignal\n      transition HealthManagementTransition : trigger = HealthCheckRequest\n      transition MaintenanceTransition : trigger = MaintenanceRequest\n    }\n  }\n\n  // Block for Vehicle Controller\n  block Vehicle",
    "package VehicleBehaviorModelingSystem\n\n  Block Vehicle {\n    Property fuel : Real\n    Property maintenanceInterval : Time\n    Property temperatureThreshold : Real\n    Property status : String\n    \n    Port brakePedal : Input\n    Port startSignal : Input\n    Port temperatureSensor : Input\n    Port warningSignal : Output\n    Port controlSignal : Output\n    \n    StateMachine vehicleStateMachine {\n      State shutdown {\n        Transition startup : trigger(brakePedal.pressed and startSignal.received)\n      }\n      State startup {\n        Transition selfInspection : trigger(true)\n        Transition powerSupply : trigger(true)\n        Transition running : trigger(true)\n      }\n      State running {\n        Transition degraded : trigger(temperatureSensor.overheated)\n        Transition shutdown : trigger(true)\n      }\n      State degraded {\n        Transition shutdown : trigger(true)\n      }\n    }\n  }\n\n  Block VehicleController {\n    Property fuel : Real\n    Property maintenanceInterval : Time\n    Property temperatureThreshold : Real\n    \n    Port controlSignal : Input\n    Port statusSignal : Output\n    \n    Activity processControlSignals {\n",
    "package VehicleSimulation\n\n  Block Vehicle {\n    Property mass : Real\n    Property position : Real\n    Property velocity : Real\n    Property acceleration : Real\n  }\n\n  Block Road {\n    Property slope : Real\n    Property frictionCoefficient : Real\n  }\n\n  Block System {\n    Block Vehicle\n    Block Road\n    Property simulationTime : Real\n    Property snapshotTime : Real\n    \n    Activity startUp {\n      Vehicle.state = \"on\"\n    }\n    \n    Activity drivingProcess {\n      Vehicle.state = \"driving\"\n    }\n    \n    Activity shutDown {\n      Vehicle.state = \"off\"\n    }\n  }\n\n  Requirement \"Snapshot recording at multiple moments within the simulation time series\"\n  Requirement \"Tracking of the vehicle’s state transitions from start-up (on state), through the driving process, to shutdown (off state)\"\n  Requirement \"Detailed data to support vehicle dynamics analysis and road adaptability assessment\"\n  Requirement \"Predicting vehicle performance under specific road and time conditions in a virtual environment\"\n\nendpackage",
    "package ConfigurationManagementSystem\n\n  // Block Definitions\n  block Automobile {\n    \n    // Property\n    property \"VehicleConfiguration\" : String\n\n    // Part\n    part SubsystemA : SubsystemA\n    part SubsystemB : SubsystemB\n  }\n\n  block SubsystemA {\n    // Property\n    property \"Configuration\" : String\n\n    // Part\n    part Component1 : Component\n    part Component2 : Component\n    part Component3 : Component\n  }\n\n  block SubsystemB {\n    // Property\n    property \"Configuration\" : String\n\n    // Part\n    part Component4 : Component\n    part Component5 : Component\n    part Component6 : Component\n  }\n\n  // Configuration Definitions\n  configuration ConfigurationA {\n    base Automobile\n    \n    VehicleConfiguration = \"Configuration A\"\n    SubsystemA.Configuration = \"First\"\n    SubsystemB.Configuration = \"Third\"\n  }\n\n  configuration ConfigurationB {\n    base Automobile\n    \n    VehicleConfiguration = \"Configuration B\"\n    SubsystemA.Configuration = \"Second\"\n    SubsystemB.Configuration = \"Third\"\n  }\n\n  // Constraint\n  constraint \"SubsystemA_SubsystemB_",
    "package VehiclePlatform\n\n  // Component Definitions\n  Block part1\n  Block part2\n  Block part3 {\n    Port p1\n  }\n  Block part4\n  Block part5 {\n    Port p2\n    BehavioralVariant {\n      Name: variant1\n      Name: variant2\n    }\n  }\n  Block part6\n\n  // Subsystem Definitions\n  Block SubsystemA\n  Block SubsystemB\n\n  // Configuration Schemes\n  Block VehicleConfigA\n  Block VehicleConfigB\n\n  // Relationships\n  Allocation part1 SubsystemA\n  Allocation part2 SubsystemB\n  Allocation part3 SubsystemA\n  Allocation part4 SubsystemB\n  Allocation part5 SubsystemA\n  Allocation part6 SubsystemB\n\n  // Constraints\n  Constraint {\n    Name: \"SubsystemA_Constraint\"\n    Description: \"Constraint on Subsystem A\"\n  }\n  Constraint {\n    Name: \"SubsystemB_Constraint\"\n    Description: \"Constraint on Subsystem B\"\n  }\n\n  // Variant Definitions\n  Variant {\n    Name: \"Variant1\"\n    Description: \"Variant description for Subsystem A\"\n  }\n  Variant {\n    Name:",
    "package VehicleConfigurationSystem\n\n  Block VehicleConfigurationSystem {\n    \n    Property performanceRequirement : String\n    Property userPreference : String\n    \n    Block Engine {\n      Property cylinderCount : Integer\n      Property type : String\n    }\n    \n    Block Transmission {\n      Property type : String\n    }\n    \n    Block Wheel {\n      Property rimWidth : String\n    }\n    \n    Constraint highPerformanceConfiguration {\n      Engine.cylinderCount = 6\n      Transmission.type = \"Automatic\"\n      Wheel.rimWidth = \"Wide\"\n    }\n    \n    Constraint standardPerformanceConfiguration {\n      Engine.cylinderCount = 4\n      Transmission.type = \"Manual\"\n      Wheel.rimWidth = \"Narrow\"\n    }\n    \n    Constraint compatibilityConstraint {\n      # Add compatibility rules here\n    }\n    \n    Block VehicleModelVariant {\n      Property modelName : String\n    }\n    \n    Relationship configures {\n      VehicleConfigurationSystem -- VehicleModelVariant\n    }\n    \n  }\n\nendpackage",
    "package VehicleManagementSystem\n\n  Block Vehicle {\n    Property mass : Real\n    Property fuelStatus : String\n    \n    Block Engine {\n      Property torque : Real\n    }\n    \n    Block Transmission {\n      Property driveInterface : String\n    }\n    \n    Requirement massLimit : Real\n    Requirement fuelRequirement : String\n    Requirement powerDelivery : Boolean\n    Requirement reliability : Boolean\n  }\n\n  Requirement massGrade {\n    Vehicle.mass = 2000 kg\n  }\n\n  Requirement massGrade2 {\n    Vehicle.mass = 2500 kg\n  }\n\n  Requirement fuelRequirementEmpty {\n    Vehicle.fuelStatus = \"Empty\"\n  }\n\n  Requirement fuelRequirementFull {\n    Vehicle.fuelStatus = \"Full\"\n  }\n\n  Requirement powerDeliveryRequirement {\n    Vehicle.Engine.torque > 0\n  }\n\n  Requirement reliabilityRequirement {\n    Vehicle.reliability = True\n  }\n\nendpackage",
    "package VehicleMassComplianceSystem\n\n  Requirement \"Vehicle Mass Compliance\" {\n    description = \"This system is designed to verify vehicle mass compliance to ensure that the actual mass of the tested vehicles does not exceed the specified maximum permissible mass.\"\n  }\n\n  Requirement \"Mass Measurement\" {\n    description = \"Each participating vehicle must have its actual mass measured using weighing equipment operated by a test operator.\"\n  }\n\n  Requirement \"Mass Comparison\" {\n    description = \"The system then compares the measured mass with the required value (e.g., a maximum permissible mass of 2,500 kilograms).\"\n  }\n\n  Requirement \"Compliance Determination\" {\n    description = \"If the vehicle's actual mass is less than or equal to the strictly defined upper limit, it is considered compliant; otherwise, it is deemed non-compliant.\"\n  }\n\n  Requirement \"Sequential Testing\" {\n    description = \"The system supports sequential testing and result determination for multiple vehicles.\"\n  }\n\n  Requirement \"Automated Compliance Management\" {\n    description = \"providing a reliable and automated solution for compliance management of vehicle-related product quality.\"\n  }\n\nendpackage",
    "package WaterSupplySystem\n\n  Block SpigotBank {\n    Property name : String\n    Property capacity : Real\n    Interface Spigot {\n      Property type : String\n      Property flowRate : Real\n    }\n    FlowPort hotOut : FlowPort\n    FlowPort coldOut : FlowPort\n  }\n\n  Block Faucet {\n    Property name : String\n    FlowPort hotIn : FlowPort\n    FlowPort coldIn : FlowPort\n    FlowPort hotOut : FlowPort\n    FlowPort coldOut : FlowPort\n  }\n\n  Requirement R1 {\n    text = \"The system is required to reliably deliver hot and cold water from the respective outlets of the main supply pipe to the corresponding inlets of all downstream faucets, ensuring simultaneous supply to multiple water usage points.\"\n  }\n\n  Requirement R2 {\n    text = \"The system must guarantee correct connection and smooth transmission of the hot and cold water pipelines, thereby meeting the basic requirements for distributed hot and cold water supply in various settings.\"\n  }\n\n  Block FaucetInlet {\n    Property type : String\n    FlowPort hotIn : FlowPort\n    FlowPort coldIn : FlowPort\n  }",
    "package VehicleQualityAnalysisSystem\n\n  Block VehicleQualityAnalysisSystem {\n    \n    Property totalMass : Real\n    \n    Requirement req_qualityDataInput {\n      text = \"Users can input quality data for each component.\"\n    }\n    \n    Requirement req_automaticMassCalculation {\n      text = \"The system will automatically aggregate and calculate the total mass of the vehicle.\"\n    }\n    \n    Requirement req_qualityAnalysisRequirementsDefinition {\n      text = \"The system supports the definition of quality analysis requirements.\"\n    }\n    \n    Requirement req_analysisUseCasesFormulation {\n      text = \"The system supports the formulation of analysis use cases.\"\n    }\n    \n    Requirement req_automaticTaskAndPlanGeneration {\n      text = \"Based on set analysis objectives, it can automatically generate analysis tasks and plans.\"\n    }\n    \n    Requirement req_comprehensiveEvaluation {\n      text = \"Achieving comprehensive evaluation and requirements tracking for vehicle quality.\"\n    }\n    \n    Requirement req_designOptimizationSupport {\n      text = \"Provides scientific support for vehicle design and performance optimization.\"\n    }\n    \n    Requirement req_developmentEfficiencyImprovement {\n      text",
    "package VehiclePowertrainConfiguration\n\n  requirement \"Optimal engine configuration selection\" {\n    description \"The system aims to provide optimal solutions for vehicle powertrain configuration, focusing primarily on the trade-off analysis of engine types to select the engine configuration that performs best across multiple key performance indicators, including power, mass, efficiency, reliability, and cost.\"\n  }\n\n  requirement \"Engine structure modeling\" {\n    description \"The system supports modeling of various engine structures (such as four-cylinder engines, six-cylinder engines, etc.).\"\n  }\n\n  requirement \"Automatic component assembly\" {\n    description \"The system is capable of automatically assembling related components, including cylinders, pistons, connecting rods, and crankshafts.\"\n  }\n\n  requirement \"Multi-attribute trade-off analysis\" {\n    description \"A multi-attribute trade-off analysis method is used, and, through a pre-defined evaluation model, the system comprehensively assesses the performance data of different engine schemes.\"\n  }\n\n  requirement \"Optimal engine recommendation\" {\n    description \"Based on the evaluation results, it automatically recommends the optimal engine solution, ensuring the best balance between vehicle performance and economy.\"\n  }\n\n  requirement \"Decision transparency",
    "package FuelEconomySystem\n\n  Requirement \"REQ-001\" {\n    text = \"Under urban driving conditions, the vehicle’s range per gallon must not be less than 25 miles.\"\n  }\n\n  Requirement \"REQ-002\" {\n    text = \"Under highway conditions, the vehicle’s range per gallon must not be less than 30 miles.\"\n  }\n\n  Requirement \"REQ-003\" {\n    text = \"Fuel economy is measured in \\\"miles per gallon\\\", based on the US customary gallon (231 cubic inches).\"\n  }\n\n  Requirement \"REQ-004\" {\n    text = \"Fuel economy tests are conducted with the vehicle assuming an additional load of 1,000 pounds, under standard urban and highway driving scenarios respectively.\"\n  }\n\n  Requirement \"REQ-005\" {\n    text = \"The measured fuel economy must meet the minimum requirements stated above.\"\n  }\n\n  Requirement \"REQ-006\" {\n    text = \"The system models and analyzes key parameters such as vehicle powertrain, load, and operating conditions, supporting fuel consumption assessment under various conditions to ensure",
    "package VehicleMotionSimulation\n\n  Block VehicleMotionSimulation {\n    \n    Property mass : Real\n    Property initialPosition : Real\n    Property initialVelocity : Real\n    Property timeStep : Real\n    Property powerData : PowerOutputSequence\n\n    Requirement \"The system shall simulate and analyze the longitudinal dynamic characteristics of vehicle motion.\"\n    Requirement \"Users shall be able to input vehicle mass parameters, initial position, initial velocity, and a set of segmented power output data.\"\n    Requirement \"Based on the input power and operating conditions, the system shall successively calculate the vehicle’s acceleration, velocity, and position at each moment using dynamic equations with a specified time step.\"\n    Requirement \"The system shall output the sequences of acceleration, velocity variation, and displacement throughout the vehicle's entire motion process.\"\n    Requirement \"The output data shall provide support and a decision-making basis for applications such as vehicle performance analysis, control strategy development, and driving behavior evaluation.\"\n\n    \n  }\n\n  \n  \n  \n  ",
    "package VehicleSystem\n\n  Block Vehicle {\n    Property mass : Real = 2500;\n\n    Block FrontAxleAssembly {\n      Property mass : Real = 150;\n\n      Block FrontAxle {\n        Property mass : Real;\n        Property steeringAngle : Angle;\n      }\n\n      Block FrontWheel {\n        Property mass : Real;\n      }\n\n      FrontAxleAssembly::FrontAxle * FrontWheel::FrontAxleAssembly\n    }\n\n    Block RearAxleAssembly {\n      Property mass : Real = 250;\n\n      Block RearAxle {\n        Property mass : Real;\n      }\n\n      Block RearWheel {\n        Property mass : Real;\n      }\n\n      RearAxleAssembly::RearAxle * RearWheel::RearAxleAssembly\n    }\n\n    Vehicle::FrontAxleAssembly * FrontAxleAssembly::Vehicle\n    Vehicle::RearAxleAssembly * RearAxleAssembly::Vehicle\n  }\n\nendpackage",
    "package VehicleSafetySecuritySystem\n\n  // Block Definitions\n  block Vehicle {\n    \n    // Property\n    property \"SafetyFeatures\" : String\n\n    // Part\n    part SeatBelts : SafetyFeature\n    part Airbags : SafetyFeature\n    part Bumpers : SafetyFeature\n    part AlarmDevices : SecurityFeature\n    part AntiLockBrakingSystem : SafetyFeature\n    part KeylessEntrySystem : SecurityFeature\n\n    // Constraint\n    constraint MandatorySafetyFeatures {\n      SeatBelts.mandatory = true\n      Bumpers.mandatory = true\n    }\n\n    // Constraint\n    constraint OptionalSafetyFeatures {\n      Airbags.mandatory = false\n      AntiLockBrakingSystem.mandatory = false\n    }\n  }\n\n  // Block Definition\n  block SafetyFeature {\n    property \"Name\" : String\n    property \"Mandatory\" : Boolean\n  }\n\n  // Block Definition\n  block SecurityFeature {\n    property \"Name\" : String\n  }\n\n  // Relationship\n  relationship Vehicle.hasSafetyFeatures -- SafetyFeature\n  relationship Vehicle.hasSecurityFeatures -- SecurityFeature\n\n  // Diagram\n  diagram VehicleSafetyDiagram {\n    block Vehicle\n    block",
    "package System\n\n  Block ApplicationLayer\n    Property x : Real\n    Property y : Real\n    Property z : Real\n\n  Block ServiceLayer\n    Property x : Real\n    Property y : Real\n    Property z : Real\n    Interface ServiceInterface\n      Operation getZ(x: Real, y: Real) : Real\n    \n  Block DataLayer\n    Property x : Real\n    Property y : Real\n    Property z : Real\n    Interface DataInterface\n      Operation getData(x: Real, y: Real) : Real\n      Operation storeData(x: Real, y: Real, z: Real) : Void\n\n  Block System\n    Property x : Real\n    Property y : Real\n    Property z : Real\n    \n    ApplicationLayer <<uses>> ServiceLayer\n    ServiceLayer <<uses>> DataLayer\n    \n    \n",
    "package TorqueGenerationSystem\n\n  Requirement \"TorqueGenerationRequirement\" {\n    description = \"The system should include relevant components capable of generating torque, and it is required that the torque produced during operation must be greater than zero newton-meters to ensure driving capability.\"\n  }\n\n  Requirement \"LogicToPhysicalMappingRequirement\" {\n    description = \"During the design and implementation process, the logic layer's torque generator function should be effectively allocated and mapped to the physical layer of the powertrain (including actual components such as the engine), thereby ensuring the actual generation and transmission of torque to meet the overall vehicle power output requirements.\"\n  }\n\n  Block TorqueGenerationSystem {\n    Property \"Torque\" {\n      type = \"Real\"\n      unit = \"Newton-meter\"\n      constraint = \"Torque > 0\"\n    }\n  }\n\nendpackage",
    "package System\n\n  Block System {\n    \n    Property powerTransmission {\n      Type : Boolean\n    }\n    \n    Property powerOutput {\n      Type : Boolean\n    }\n    \n    Property torqueGeneration {\n      Type : Boolean\n    }\n    \n    Block TorqueGenerator {\n      Property function {\n        Type : String\n      }\n      \n      Block Engine {\n        Property function {\n          Type : String\n        }\n      }\n      \n      Association powertrain : Powertrain\n    }\n    \n    Block Powertrain {\n      Property function {\n        Type : String\n      }\n      \n      Block Engine {\n        Property function {\n          Type : String\n        }\n        \n        Association torqueGenerator : TorqueGenerator\n      }\n    }\n  }\nendpackage",
    "package VehicleSafetyAndAntiTheftFunctionCatalogue\n\n  requirement SafetyAndSecurityFeatures {\n    description \"This Vehicle Safety and Anti-theft Function Catalogue is intended to standardize the basic configuration requirements for key vehicle components in terms of safety and anti-theft performance. The vehicle must be equipped with the following safety and security features: At a minimum, basic safety components such as front seat belts and bumpers must be installed on the body and interior to ensure the fundamental personal safety of occupants. Certain components, such as the driver’s airbag and anti-lock braking system, are characterized as safety features but may or may not be mandatory depending on specific configurations. Meanwhile, the vehicle should also be equipped with security components such as an alarm system and a keyless entry system, so as to enhance the overall security and protective capability of the vehicle. The catalogue distinguishes and describes all components that affect safety, all components that affect anti-theft, components that affect both safety and anti-theft, as well as all mandatory safety components, in order to meet regulatory requirements and users’ needs for the most basic safety and protection functions of the vehicle.\"\n  }\n\n  block BasicSafetyComponents {\n    description \"Basic safety components such as front seat belts and bumpers must be",
    "package FuelSystem\n\n  Block FuelSystem {\n    \n    Property fuelTemperature : Real\n    \n    Block fuelTankAssembly {\n      \n      Block fuelPump {\n        \n        FlowPort fuelOut\n        FlowPort returnLine\n        \n      }\n      \n      Block fuelTank {\n        \n      }\n      \n    }\n    \n    FlowPort fuelIn\n    FlowPort fuelOut\n    \n  }\n",
    "package VehicleSafetySecurity\n\n  Requirement \"Two Seat Belts\" {\n    description \"The vehicle interior must be equipped with two seat belts, which are mandatory safety features.\"\n    stereotype \"MandatorySafety\"\n  }\n\n  Requirement \"Airbag\" {\n    description \"An airbag should also be installed in the cockpit, but its application is not mandatory.\"\n    stereotype \"OptionalSafety\"\n  }\n\n  Requirement \"AntiTheftAlarm\" {\n    description \"An anti-theft alarm device should be installed inside the vehicle to enhance security protection.\"\n    stereotype \"Security\"\n  }\n\n  Requirement \"Bumper\" {\n    description \"The vehicle body must be equipped with a bumper, which is a required safety component\"\n    stereotype \"MandatorySafety\"\n  }\n\n  Requirement \"KeylessEntry\" {\n    description \"and is also required to have a keyless entry system to improve security performance.\"\n    stereotype \"Security\"\n  }\n\n  Requirement \"TwoWheels\" {\n    description \"The chassis structure is to be fitted with two wheels\"\n    stereotype \"Mandatory\"\n  }\n\n  Requirement \"AntiLockBrakingSystems\" {\n    description \"and equipped with two sets",
    "package VehicleSafetyAndSecurity\n\n  Block VehicleSafetyAndSecuritySystem {\n    \n    Property safetyFeatures {\n      Value \"Seat belts, airbags, bumpers\"\n    }\n    \n    Property securityFeatures {\n      Value \"Onboard alarm, keyless entry system\"\n    }\n    \n    Block Interior {\n      \n      Block AlarmSystem {\n      }\n      \n      Block SeatBelts {\n      }\n      \n      Block FrontRowSeats {\n      }\n      \n      Block DriversAirbag {\n      }\n    }\n    \n    Block BodyAssembly {\n      \n      Block VehicleBody {\n      }\n      \n      Block Bumper {\n      }\n      \n      Block KeylessEntrySystem {\n      }\n    }\n    \n    \n  }\n\nendpackage",
    "block System {\n  \n  property SecurityClassification : String {\n    description = \"Security classification level of the component.\"\n    values = [\"Unclassified\", \"Confidential\", \"Secret\"]\n  }\n  \n  block Component {\n    \n    required property SecurityClassification : System.SecurityClassification\n  }\n}",
    "package ECU_Communication_Control\n\n  Block VCU {\n    Property name : \"Vehicle Control Unit\"\n    Block BusIF {\n      Property name : \"Bus Interface\"\n      Property type : \"CAN\"\n    }\n    Block BusIF <<owned>> : BusIF\n  }\n\n  Block ECU {\n    Property name : \"Engine Control Unit\"\n    Block BusIF {\n      Property name : \"Bus Interface\"\n      Property type : \"CAN\"\n    }\n    Block BusIF <<owned>> : BusIF\n  }\n\n  Block CAN_Bus {\n    Property name : \"Controller Area Network\"\n  }\n\n  VCU <<connectedTo>> CAN_Bus\n  ECU <<connectedTo>> CAN_Bus\n  \n  ",
    "package BloodGlucoseMeter\n\n  requirement \"REQ-001\" {\n    description \"The system shall ensure high reliability and safety of the blood glucose meter during use.\"\n  }\n\n  requirement \"REQ-002\" {\n    description \"When the battery is depleted or cannot be charged, the system shall automatically detect the battery status and promptly alert the user.\"\n  }\n\n  requirement \"REQ-003\" {\n    description \"The system shall prevent failure to measure blood glucose levels due to battery issues.\"\n  }\n\n  requirement \"REQ-004\" {\n    description \"The system shall prevent potential treatment delays resulting from battery issues.\"\n  }\n\n  requirement \"REQ-005\" {\n    description \"The system shall implement preventive measures for battery status.\"\n  }\n\n  requirement \"REQ-006\" {\n    description \"The system shall have appropriate alarm and emergency response mechanisms in case of abnormalities in the blood glucose measurement function.\"\n  }\n\n  requirement \"REQ-007\" {\n    description \"The related system requirements have undergone rigorous approval.\"\n  }\n\n  requirement \"REQ-008\" {\n    description",
    "package Constants\n\n  Block System {\n    Property \"e\" : Real = 2.718281828459045\n    Property \"pi\" : Real = 3.141592653589793\n    Property \"speedOfLight\" : Real = 299792458.0\n    Property \"fineStructureConstant\" : Real = 1.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "package TireSpecification\n\n  Block Tire {\n    Property Manufacturer : String\n    Property RimDiameter : Real\n    Property Width : Integer\n  }\n\nendpackage",
    "package AutomotiveComponentModel\n\n  Block Vehicle {\n    Property mass : Real = 1200 kg\n    Property length : Real = 4.82 m\n    \n    Part leftFrontWheel : Wheel\n    Part rightFrontWheel : Wheel\n  }\n\n  Block Wheel {\n    Property hubDiameter : Real = 18 in\n    Property width : Real = 245 mm\n    \n    Part tire : Tire\n  }\n\n  Block Tire {\n    # Tire properties\n  }\n\nendpackage",
    "package PowertrainConfiguration\n\n  // Block Definitions\n  block Vehicle {\n    \n    // Property\n    property VehicleModel : String\n\n    // Part\n    part Engine : Engine\n    part Transmission : Transmission\n\n  }\n\n  block Engine {\n    \n    // Property\n    property EngineType : String\n\n  }\n\n  block Transmission {\n    \n    // Property\n    property TransmissionType : String\n\n  }\n\n  // Constraint\n  constraint EngineTransmissionCombination {\n    (Vehicle.Engine.EngineType = \"Six-Cylinder\" and Vehicle.Transmission.TransmissionType = \"Automatic\") or\n    (Vehicle.Engine.EngineType = \"Four-Cylinder\" and Vehicle.Transmission.TransmissionType = \"Manual\")\n  }\n\n  // Constraint\n  constraint HighPerformanceEngine {\n    (Vehicle.VehicleModel = \"High-Performance\" implies Vehicle.Engine.EngineType = \"Six-Cylinder\")\n  }\n\n  // Value Type Definitions\n  value_type EngineType {\n    literal \"Four-Cylinder\"\n    literal \"Six-Cylinder\"\n  }\n\n  value_type TransmissionType {\n    literal \"Manual\"\n    literal \"Automatic\"\n  }",
    "package AutomotiveSystem\n\n  Block Vehicle {\n    Property mass : Real = 1200;\n    Property length : Real = 4.82;\n    \n    Part wheelAssembly : WheelAssembly\n  }\n\n  Block WheelAssembly {\n    Part wheel : Wheel\n    Part brakeDisc : BrakeDisc\n  }\n\n  Block Wheel {\n    Part rim : Rim\n    Part tire : Tire\n  }\n\n  Block Rim {\n    Property diameter : Real = 18;\n  }\n\n  Block Tire {\n    Property width : Real = 245;\n    Property height : Real = 45;\n    Property outerDiameter : Real = \n      (rim.diameter * 25.4) * (1 + (height / rim.diameter))\n    Property treadDepth : Real = 6.0;\n  }\n\n  Block BrakeDisc {\n    Property radius : Real = 95;\n    Property diameter : Real = radius * 2;\n  }\n\n  Constraint wheelAssembly_brakeDisc_clearance {\n    WheelAssembly.brakeDisc.diameter <= WheelAssembly.wheel.tire.outerDiameter\n  }",
    "package FuelSystem\n\n  Block FuelSystem {\n    \n    Property fuelTemperature : Real\n\n    Requirement fuelCirculationEfficiency {\n      Description: \"Fuel can circulate efficiently among all components.\"\n    }\n    Requirement safeFuelFlow {\n      Description: \"Fuel flow is safe.\"\n    }\n    Requirement fuelSupply {\n      Description: \"The system ensures normal fuel supply to the engine.\"\n    }\n    Requirement fuelReturn {\n      Description: \"The system supports fuel return function.\"\n    }\n\n    Part fuelTankAssembly : FuelTankAssembly\n    Part fuelPump : FuelPump\n\n    Block FuelTankAssembly {\n      \n      Property outletInterface : Interface\n      \n      Interface outletInterface {\n        \n        Flow fuel : Flow\n        Flow returnFuel : Flow\n      }\n    }\n    Block FuelPump {\n      \n      Flow fuelOut : Flow\n      Flow returnFuelIn : Flow\n    }\n  }\n\nend FuelSystem\n\n\n\n",
    "package PhysicalQuantitySystem\n\n  requirement \"REQ-1\" {\n    text = \"The system must be capable of supporting and managing data and units related to physical quantities, and is required to cover various base physical quantities in the International System of Quantities (ISQ), such as length, mass, time, electric current, temperature, amount of substance, and luminous intensity.\"\n  }\n\n  requirement \"REQ-2\" {\n    text = \"The system should also allow for corresponding import and extension.\"\n  }\n\n  requirement \"REQ-3\" {\n    text = \"It must ensure accurate representation of relevant physical quantities and consistency of information, facilitating physical quantity data processing and unit conversion operations in subsequent engineering or scientific development.\"\n  }\n\n  requirement \"REQ-4\" {\n    text = \"The system must meet users' diverse requirements for managing physical quantity systems.\"\n  }\n\nendpackage",
    "package UnitSystemLibrary\n\n  Block System {\n    \n    Property \"Goal\" : String = \"Provide a standardized unit system library that supports the interoperability and adaptation between the International System of Quantities (ISQ) and United States Customary Units (USCustomaryUnits).\"\n    Property \"Purpose\" : String = \"Enable users to conveniently manage, convert, and apply various units of physical quantities, effectively reducing confusion and errors caused by inconsistent units.\"\n    Property \"Requirement\" : String = \"Ensure the accuracy and authoritative standardization of all unit types, meeting the measurement needs of engineering, scientific research, and daily life.\"\n    Property \"Benefit\" : String = \"Enhance the efficiency and reliability of data processing and communication.\"\n  }\n\n  Block ISQ {\n    \n  }\n\n  Block USCustomaryUnits {\n    \n  }\n\n  Relationship Supports {\n    from System to ISQ\n  }\n\n  Relationship Supports {\n    from System to USCustomaryUnits\n  }\n\n  Relationship Enables {\n    from System to \"Manage Units\"\n  }\n\n  Relationship Enables {\n    from System to \"Convert Units\"\n  }\n\n  Relationship Enables {\n    from System to",
    "block HeadlampTiltAdjustmentSystem {\n  \n  property BeamTiltAngle : Real = 0.0;\n  constraint BeamTiltAngleConstraint {\n    BeamTiltAngle >= 50.0 and BeamTiltAngle <= 80.0\n  }\n  \n}",
    "package System\n\n  DataType {\n    name = \"UnsignedInteger\"\n    isNonNegative = true\n  }\n\n  DataType {\n    name = \"UnsignedFloat\"\n    isNonNegative = true\n  }\n\n  DataType {\n    name = \"DateTime\"\n  }\n\n  DataType {\n    name = \"String\"\n  }\n\n  DataType {\n    name = \"Boolean\"\n  }\n\n  Status {\n    name = \"Red\"\n    color = \"red\"\n  }\n\n  Status {\n    name = \"Yellow\"\n    color = \"yellow\"\n  }\n\n  Status {\n    name = \"Green\"\n    color = \"green\"\n  }\n\n  PhysicalDimension {\n    name = \"Diameter\"\n    unit = \"mm\"\n    value = \"Small (60 mm)\"\n    options = [\"Small (60 mm)\", \"Medium (70 mm)\", \"Large (80 mm)\"]\n    defaultValue = \"Small (60 mm)\"\n  }\n\nendpackage",
    "package System\n\n  class Bag {\n    property sparePart : Part\n  }\n\n  class Part {\n  }\n\n  class List {\n    property integer : Integer\n  }\n\n  class Set {\n    property string : String\n  }\n\n  class OrderedSet {\n    property person : Person\n  }\n\n  class Person {\n  }\n\n  class Array {\n    property real : Real\n  }\n\n  block System {\n    \n  }",
    "package TireInfo\n\n  class Tire {\n    \n    Property manufacturer : String\n    Property rimDiameter : Real\n    Property tireWidth : Real\n    Property installationPosition : Coordinate3D\n  }\n\n  \n  \nendpackage",
    "Block: System\n  Property: liftoffTime\n    Type: Time\n    Unit: s\n  Property: utcLiftoffTime\n    Type: Time\n    Unit: s\n  Property: samplingPoints\n    Type: Sequence\n    Element: SamplingPoint\n  \nBlock: SamplingPoint\n  Property: time\n    Type: Time\n    Unit: s\n  Property: position\n    Type: Vector3\n    Unit: m\n  Property: velocity\n    Type: Vector3\n    Unit: m/s",
    "package AlloyManagementSystem\n\n  // Define a class for materials\n  class Material {\n    // Define an attribute for atomic mass\n    atomicMass : Real\n\n    // Define an attribute for density\n    density : Real\n  }\n\n  // Define a class for alloys\n  class Alloy {\n    // Define an attribute for name\n    name : String\n\n    // Define a property for tensileStrength\n    tensileStrength : Real\n\n    // Define a composition of materials\n    composition : Material::Composition\n\n    // Define a relationship to materials\n    materials : Material::Composition\n  }\n\n  // Define a composition of materials\n  class Material::Composition {\n    // Define an attribute for material\n    material : Material\n\n    // Define an attribute for massFraction\n    massFraction : Real\n  }\n\n  // Define an instance of a material\n  instance Iron {\n    atomicMass = 55.845\n    density = 7.874\n  }\n\n  // Define an instance of a material\n  instance Carbon {\n    atomicMass = 12.011\n    density = 2.267\n  }\n\n  // Define",
    "package EngineeringMaterialsDatabase\n\n  Element \"Material\" {\n    Property \"atomicMass\" : Real\n    Property \"compositionalInformation\" : String\n    Property \"mechanicalPropertyIndicators\" : PropertySet\n  }\n\n  Element \"Metal\" : extends Material {\n    Property \"massFraction\" : Real[1..*]\n  }\n\n  Element \"MechanicalProperty\" {\n    Property \"name\" : String\n    Property \"value\" : Real\n    Property \"unit\" : String\n  }\n\n  Element \"Steel_980\" : Metal {\n    Property \"atomicMass\" : 55.845\n    Property \"compositionalInformation\" : \"Iron, Carbon, Manganese\"\n    Property \"massFraction\" : {\n      \"Iron\" : 0.98\n      \"Carbon\" : 0.01\n      \"Manganese\" : 0.01\n    }\n    Property \"mechanicalPropertyIndicators\" : {\n      \"TensileStrength\" : {\n        \"name\" : \"TensileStrength\"\n        \"value\" : 980\n        \"unit\" : \"MPa\"\n      }\n    }\n  ",
    "package PubSubSystem\n\n  Block System {\n    Property \"MessageTopic\" : String\n    Property \"Publisher\" : String\n    Property \"Subscriber\" : String\n    \n    Requirement \"PublishMessage\" : \"The system shall allow producers to publish messages on specific topics.\"\n    Requirement \"SubscribeTopic\" : \"The system shall allow consumers to subscribe to topics of interest.\"\n    Requirement \"MessageDistribution\" : \"The system shall distribute published messages to subscribed consumers.\"\n    Requirement \"PromptDelivery\" : \"The system shall deliver messages promptly to subscribers.\"\n    Requirement \"TopicManagement\" : \"The system shall manage topic subscriptions efficiently.\"\n  }\n\n  Block Publisher {\n    Property \"Topic\" : String\n    Property \"Message\" : String\n    \n    Action \"PublishMessage\" {\n      Input \"Topic\"\n      Input \"Message\"\n    }\n  }\n\n  Block Subscriber {\n    Property \"Topic\" : String\n    \n    Action \"SubscribeTopic\" {\n      Input \"Topic\"\n    }\n    Action \"ReceiveMessage\" {\n      Input \"Message\"\n    }\n  }\n\n  Block Server {\n    Property \"TopicSubscriptions\" : String\n",
    "package FuelSystem\n\n  Block FuelTankAssembly {\n    Property fuelLevel : Real\n    Property fuelTemperature : Real\n  }\n\n  Block Engine {\n    Property fuelConsumption : Real\n  }\n\n  Block FuelLine {\n  }\n\n  Block FuelPump {\n  }\n\n  Block FuelReturnLine {\n  }\n\n  Flow FuelFlow {\n    source = FuelTankAssembly\n    target = Engine\n  }\n\n  Flow FuelReturnFlow {\n    source = Engine\n    target = FuelTankAssembly\n  }\n\n  Requirement FuelTemperatureMonitoring {\n    text = \"Monitor and transmit fuel temperature information\"\n  }\n\n  Requirement ContinuousFuelSupply {\n    text = \"Ensure continuous and stable fuel supply\"\n  }\n\n  Requirement FuelRecycling {\n    text = \"Recycle excess fuel\"\n  }\n\n  Requirement ResourceOptimization {\n    text = \"Optimize resource utilization\"\n  }\n\nendpackage",
    "package PublishSubscribeSystem\n\n  Block Producer {\n    Property topic : String\n    Property message : String\n    Operation publish(topic : String, message : String)\n  }\n\n  Block Consumer {\n    Property topic : String\n    Operation subscribe(topic : String)\n  }\n\n  Block Server {\n    Property topics : Sequence(String)\n    Property subscribers : Map(String, Sequence(Consumer))\n    Operation handleSubscription(consumer : Consumer, topic : String)\n    Operation handlePublish(producer : Producer, topic : String, message : String)\n  }\n\n  Requirement REQ_PUBLISH_SUBSCRIBE {\n    text = \"The system requires that producers can publish topic messages to the server, while consumers can subscribe to specific topics via the server.\"\n  }\n\n  Requirement REQ_MESSAGE_DELIVERY {\n    text = \"Upon successful subscription, when a new message related to the topic is published, the server needs to push and deliver the message to all consumers who have subscribed to that topic.\"\n  }\n\n  Requirement REQ_RELIABLE_DISTRIBUTION {\n    text = \"The entire process includes consumers sending subscription requests to the server, producers publishing messages to the server, and after",
    "package TransportationSystem\n\n  Block Vehicle {\n    Property fuelLevel : Real\n    Property maxFuelCapacity : Real\n    \n    Requirement fuelLevelBelowThreshold {\n      fuelLevel < 0.1 * maxFuelCapacity\n    }\n    \n    Requirement refuelAtGasStation {\n      fuelLevelBelowThreshold implies driver.refuelAtGasStation()\n    }\n    \n    Block Driver {\n      Action refuelAtGasStation()\n    }\n    \n    Block Passenger {\n      Property numberOfPassengers : Integer\n    }\n    \n    Block User {\n      Property isDriver : Boolean\n    }\n    \n    Requirement safeBoarding {\n      User.isDriver = true implies driver.boardVehicle()\n    }\n    \n    Requirement safeAlighting {\n      User.isDriver = true implies driver.alightVehicle()\n    }\n    \n    Requirement timelyRefueling {\n      fuelLevelBelowThreshold implies refuelAtGasStation()\n    }\n    \n    Requirement smoothTravel {\n      safeBoarding and safeAlighting and timelyRefueling\n    }\n  }\nend package",
    "package FuelManagementSystem\n\n  Block FuelTank {\n    Property fuelTemperature : Real\n    Port fuelOutlet : FlowPort\n  }\n\n  Block EngineUnit {\n    Property fuelTemperature : Real\n    Port fuelInlet : FlowPort\n  }\n\n  Connector fuelConnection {\n    end1 : fuelOutlet of FuelTank\n    end2 : fuelInlet of EngineUnit\n  }\n\n  Connector fuelReturnConnection {\n    end1 : fuelInlet of EngineUnit\n    end2 : fuelOutlet of FuelTank\n  }\n\nendpackage",
    "package FuelSystem\n\n  Block FuelSystem {\n    \n    Property fuelFlowRate : Real\n    Property fuelTemperature : Real\n\n    Block FuelTankAssembly {\n      Property fuelLevel : Real\n      Port fuelSupplyPort : FlowPort\n      Port fuelReturnPort : FlowPort\n      \n      FlowPort fuelSupplyPort.flowDirection : \"Out\"\n      FlowPort fuelReturnPort.flowDirection : \"In\"\n    }\n\n    Block Engine {\n      Port fuelSupplyPort : FlowPort\n      Port fuelReturnPort : FlowPort\n      \n      FlowPort fuelSupplyPort.flowDirection : \"In\"\n      FlowPort fuelReturnPort.flowDirection : \"Out\"\n    }\n\n    Connector fuelSupplyConnector {\n      source = FuelTankAssembly.fuelSupplyPort\n      target = Engine.fuelSupplyPort\n    }\n\n    Connector fuelReturnConnector {\n      source = Engine.fuelReturnPort\n      target = FuelTankAssembly.fuelReturnPort\n    }\n\n  }\n\nendpackage",
    "block System {\n  \n  requirement \"The system should enable users to obtain photos from real-world scenes.\"\n  requirement \"After a user selects a scene they wish to capture, the system should first automatically perform focusing for the selected scene and generate an intermediate image.\"\n  requirement \"Next, based on the focused image, the system should capture and output the final photo.\"\n  requirement \"Ultimately, users can directly obtain photos that meet their requirements from the selected scene, while the system completes the focusing and shooting processes automatically in the background, without requiring manual intervention at each step.\"\n  \n  port UserInterface {\n    \n  }\n  \n  port SceneSelection {\n    \n  }\n  \n  port Focusing {\n    \n  }\n  \n  port ImageGeneration {\n    \n  }\n  \n  port PhotoCapture {\n    \n  }\n  \n  port PhotoOutput {\n    \n  }\n  \n  \n  \n  \n}\n\n",
    "package PhotographyWorkflow\n\n  Block PhotographySystem {\n    \n    Property sceneSelection {\n      Type : String\n    }\n    \n    Property focusedImage {\n      Type : Image\n    }\n    \n    Property finalPhotograph {\n      Type : Image\n    }\n    \n    Activity Focusing {\n      Input : sceneSelection\n      Output : focusedImage\n    }\n    \n    Activity Shooting {\n      Input : focusedImage\n      Output : finalPhotograph\n    }\n    \n    Flow FocusingToShooting {\n      Source : Focusing\n      Target : Shooting\n    }\n  }\n\nendpackage",
    "package PhotographyWorkflow\n\n  Block System {\n    Property name : \"Photography System\";\n    Property description : \"A system designed to support photography workflows.\";\n\n    Block UserInterface {\n      Property name : \"User Interface\";\n      Property description : \"Provides a means for user interaction.\";\n\n      Action SelectScene {\n        Description : \"User selects a specific scene.\";\n      }\n    }\n\n    Block Scene {\n      Property name : \"Scene\";\n      Property description : \"The scene to be captured.\";\n    }\n\n    Block FocusingProcess {\n      Property name : \"Focusing Process\";\n      Property description : \"Focuses on the selected scene.\";\n      Input Scene;\n      Output FocusedImage;\n    }\n\n    Block ShootingProcess {\n      Property name : \"Shooting Process\";\n      Property description : \"Captures the scene as a photograph.\";\n      Input FocusedImage;\n      Output Photograph;\n    }\n\n    Flow F1 {\n      Source = UserInterface.SelectScene;\n      Target = FocusingProcess.Scene;\n    }\n\n    Flow F2 {\n      Source = FocusingProcess.FocusedImage;\n      Target = ShootingProcess.FocusedImage;\n    ",
    "package PhotographySystem\n\n  Block PhotographySystem {\n    Property shootingScene : String\n    Property focusedImage : Image\n    Property photograph : Image\n\n    Activity focusProcessing {\n      Input shootingScene\n      Output focusedImage\n    }\n\n    Activity shootingOperation {\n      Input focusedImage\n      Output photograph\n    }\n\n    Requirement seamlessIntegration {\n      text: \"The entire process is seamlessly integrated, requiring no in-depth user intervention in focusing or shooting details.\"\n    }\n\n    Requirement simplifiedWorkflow {\n      text: \"This simplifies the photography workflow, helping users obtain the final photograph easily and efficiently.\"\n    }\n  }\nendpackage",
    "package PhotographyWorkflow\n\n  Block PhotographyWorkflow {\n    \n    Property name : \"PhotographyWorkflow\";\n    \n    Block User {\n      \n      Action InputScene {\n        \n        Parameter scene : Scene;\n      }\n    }\n    \n    Block Scene {\n      \n    }\n    \n    Block Image {\n      \n    }\n    \n    Block Picture {\n      \n    }\n    \n    Block Focus {\n      \n      Action Focus {\n        \n        Input Image;\n        Output Image;\n      }\n    }\n    \n    Block Shoot {\n      \n      Action Shoot {\n        \n        Input Image;\n        Output Picture;\n      }\n    }\n    \n    Flow Flow1 {\n      \n      Source User.InputScene;\n      Target Focus.Focus;\n    }\n    \n    Flow Flow2 {\n      \n      Source Focus.Focus;\n      Target Shoot.Shoot;\n    }\n    \n    Flow Flow3 {\n      \n      Source Shoot.Shoot;\n      Target Picture;\n    }\n  }\nend PhotographyWorkflow",
    "package PhotographyWorkflow\n\n  Block \"System\" {\n    Property \"Name\" : \"Photography System\"\n    \n    Block \"SceneSelection\" {\n      Property \"Name\" : \"Scene Selection\"\n      \n      Action \"SelectScene\" {\n        Input \"SelectedScene\" : \"Scene\"\n      }\n    }\n    \n    Block \"Focus\" {\n      Property \"Name\" : \"Focus\"\n      \n      Action \"FocusScene\" {\n        Input \"Scene\" : \"Scene\"\n        Output \"FocusStatus\" : \"Boolean\"\n      }\n    }\n    \n    Block \"Capture\" {\n      Property \"Name\" : \"Capture\"\n      \n      Action \"CapturePhoto\" {\n        Input \"Scene\" : \"Scene\"\n        Output \"Image\" : \"Photograph\"\n      }\n    }\n    \n    Flow \"Workflow\" {\n      Start \"Start\"\n      Activity \"SceneSelection.SelectScene\"\n      Activity \"Focus.FocusScene\"\n      Condition \"FocusStatus = True\"\n      Activity \"Capture.CapturePhoto\"\n      End \"End\"\n    }\n  }\nend PhotographyWorkflow",
    "package PhotographySystem\n\n  Block PhotographySystem {\n    \n    Property sceneInput : String\n    Property focusQuality : Boolean\n    Property finalPhoto : Image\n\n    Activity shootingProcess {\n      ActivityNode selectScene : String\n      ActivityNode focusScene : Boolean\n      ActivityNode evaluateFocus : Boolean\n      ActivityNode shootImage : Image\n      ActivityNode generateFinalPhoto : Image\n\n      selectScene -> focusScene\n      focusScene -> evaluateFocus\n      evaluateFocus -> shootImage\n      shootImage -> generateFinalPhoto\n    }\n\n  }\n\nendpackage",
    "package PhotographyWorkflow\n\n  Block \"System\" {\n    Property \"Name\" : \"Photography System\"\n    \n    Requirement \"REQ-001\" : \"The system shall automatically complete all subsequent steps after the user triggers the 'take photo' operation.\"\n    \n    Block \"FocusFunction\" {\n      Property \"Name\" : \"Focus Function\"\n      \n      Input \"Scene\" : \"Image\"\n      Output \"FocusedImage\" : \"Image\"\n    }\n    \n    Block \"ShootingOperation\" {\n      Property \"Name\" : \"Shooting Operation\"\n      Input \"Image\" : \"Image\"\n      Output \"Photograph\" : \"Image\"\n    }\n    \n    Block \"DisplayResult\" {\n      Property \"Name\" : \"Display Result\"\n      Input \"Photograph\" : \"Image\"\n    }\n    \n    Flow \"TakePhoto\" {\n      Source \"System\"\n      Target \"FocusFunction\"\n      Data \"Scene\" : \"Image\"\n    }\n    \n    Flow \"FocusResult\" {\n      Source \"FocusFunction\"\n      Target \"ShootingOperation\"\n      Data \"FocusedImage\" : \"Image\"\n",
    "package AutomaticBrakingSystem\n\n  Block AutomaticBrakingSystem {\n    \n    Property activationState : Boolean = False\n    Property brakePressure : Real\n    Property roadAdhesion : Real\n    \n    Requirement req_activation {\n      text: \"The system is automatically activated when the user turns the vehicle key to the start position.\"\n    }\n    Requirement req_monitoring {\n      text: \"The system continuously monitors the status of the brake pedal and traction information.\"\n    }\n    Requirement req_brakePressureDetection {\n      text: \"The system detects the brake pressure generated when the driver presses the brake pedal.\"\n    }\n    Requirement req_tractionEvaluation {\n      text: \"The system evaluates traction variations under different road conditions.\"\n    }\n    Requirement req_brakePressureAdjustment {\n      text: \"The system intelligently adjusts the brake pressure during the braking process.\"\n    }\n    Requirement req_modulationFrequencyAdjustment {\n      text: \"The system adjusts the modulation frequency during the braking process.\"\n    }\n    Requirement req_safeBraking {\n      text: \"The vehicle achieves safe and reliable braking performance under various operating conditions.\"\n    }\n    Requirement req",
    "package BatteryChargingSystem\n\n  requirement \"REQ-001\" {\n    text = \"This system is designed for automatic monitoring and control of the battery charging process, ensuring that the battery can be safely and efficiently fully charged.\"\n  }\n\n  requirement \"REQ-002\" {\n    text = \"The battery charging control system needs to monitor the current battery level in real time, automatically supplying charge when the battery level is below 100%; when the battery level reaches or exceeds 100%, the charging process is automatically terminated without manual intervention.\"\n  }\n\n  requirement \"REQ-003\" {\n    text = \"The core functions of this system include battery capacity monitoring, automatic charging, and charging termination control, aiming to ensure healthy charging of the battery and to enhance convenience and safety of use.\"\n  }\n\n  block BatteryChargingSystem {\n    \n    part Battery {\n      \n    }\n    \n    part Charger {\n      \n    }\n    \n    connector ChargingConnector {\n      \n    }\n    \n    behavior ChargingBehavior {\n      \n    }\n  }\n\nendpackage",
    "package BatteryChargingSystem\n\n  Block BatteryChargingSystem {\n    Property batteryLevel : Real;\n    Property chargingStatus : String;\n\n    Activity ChargingProcess {\n      ActivityNode StartCharging {\n        Action chargingBegin()\n      }\n      ActivityNode MonitorBatteryLevel {\n        Action monitorBatteryLevel()\n      }\n      ActivityNode ReplenishBattery {\n        Action replenishBattery()\n      }\n      ActivityNode CheckBatteryLevel {\n        Action checkBatteryLevel()\n      }\n      ActivityNode TerminateCharging {\n        Action terminateCharging()\n      }\n      Flow StartCharging -> MonitorBatteryLevel;\n      Flow MonitorBatteryLevel -> CheckBatteryLevel;\n      Flow CheckBatteryLevel -> ReplenishBattery;\n      Flow ReplenishBattery -> MonitorBatteryLevel;\n      Flow MonitorBatteryLevel -> TerminateCharging;\n    }\n  }\nendpackage",
    "package CameraSystem\n\n  Block Camera\n    Property sceneSelection : String\n    Property imageQuality : String\n    \n    Block AutofocusSubsystem\n      Property focusAccuracy : Real\n    \n    Block ImagingSubsystem\n      Property resolution : String\n    \n    Activity takePhoto\n      ActivityNode selectScene\n      ActivityNode autofocus\n      ActivityNode captureImage\n      ActivityNode saveImage\n    \n  end Camera\n\nend CameraSystem",
    "package CameraSystem\n\n  requirement \"REQ-001\" {\n    text = \"This system is designed to implement the shooting process of a digital camera, enabling users to complete the entire procedure from viewfinding and focusing to imaging with a single, simple operation.\"\n  }\n\n  requirement \"REQ-002\" {\n    text = \"Users only need to select the shooting scene; the camera will then automatically focus on the selected scene and generate an image that meets the requirements, after which the imaging module will capture and produce the final photo.\"\n  }\n\n  requirement \"REQ-003\" {\n    text = \"The entire shooting process is fully automated without the need for users to manually adjust the focus or initiate imaging.\"\n  }\n\n  requirement \"REQ-004\" {\n    text = \"All functional modules collaborate to complete the entire process of shooting and image acquisition, ensuring an efficient and convenient shooting experience and outputting high-quality photos.\"\n  }\n\nendpackage",
    "package VehicleSimulation\n\n  Block Vehicle {\n    Property mass : Real\n    Property initialPosition : Real\n    Property initialVelocity : Real\n    Property timeStep : Real\n    \n    Requirement \"Users are required to provide the vehicle's mass, initial position, initial velocity, the time interval of each simulation step, as well as the power input at each time step.\"\n    Requirement \"The system sequentially calculates the vehicle's speed and position at each moment according to the input data, and outputs the trajectory of the vehicle's position at each time step.\"\n    Requirement \"This helps users analyze the vehicle's motion behavior under different power inputs.\"\n  }\n\n  Block PowerInput {\n    Property power : Real\n    Property time : Real\n  }\n\n  Block Trajectory {\n    Property position : Real\n    Property time : Real\n  }\n\n  Flow powerInputToVehicle : Flow {\n    source = PowerInput\n    target = Vehicle\n  }\n\n  Flow vehicleToTrajectory : Flow {\n    source = Vehicle\n    target = Trajectory\n  }\n\nendpackage",
    "package CameraSystem\n\n  Block CameraSystem {\n    \n    Property sceneInput : String\n    Property focusedImage : Image\n    Property capturedPhoto : Image\n    Property displayedPhoto : Image\n\n    Activity capturePhoto {\n      ActivityNode frameScene {\n        Input sceneInput\n      }\n      ActivityNode focusScene {\n        Input focusedImage\n      }\n      ActivityNode captureImage {\n        Input focusedImage\n        Output capturedPhoto\n      }\n      ActivityNode displayPhoto {\n        Input capturedPhoto\n        Output displayedPhoto\n      }\n    }\n  }\nendpackage",
    "package CameraWorkflow\n\n  Block Camera {\n    Property viewPort : ViewPort\n    Property displayPort : DisplayPort\n    \n    Activity captureImage {\n      Input viewPort\n      Output Image\n    }\n    \n    Activity generatePicture {\n      Input Image\n      Output Picture\n    }\n    \n    Activity displayPicture {\n      Input Picture\n      Output displayPort\n    }\n  }\n\nendpackage",
    "package SensorManagementSystem\n\n  Block Sensor\n    Property Status : String\n    Property ID : Integer\n\n  Block System\n    Property SensorList : List[Sensor]\n    \n    Activity UpdateSensor\n      Input Sensor : Sensor\n      Output Status : String\n      \n    Activity TraverseSensors\n      Input SensorList : List[Sensor]\n      Output UpdatedSensors : List[Sensor]\n      \n    Constraint ReadySensorUpdate\n      Sensor.Status = \"ready\" implies System.UpdateSensor(Sensor)\n\n    Constraint SensorTraversal\n      System.TraverseSensors(System.SensorList)\n      \nend SensorManagementSystem",
    "package VehicleStateManagement\n\n  State \"Off\" {\n    \n  }\n\n  State \"Starting\" {\n    \n  }\n\n  State \"On\" {\n    \n  }\n\n  Activity \"VehicleStart\" {\n    Trigger \"vehicle start signal\"\n    Effect \"transition to Starting\"\n  }\n\n  Activity \"VehiclePowerOn\" {\n    Trigger \"vehicle power-on signal\"\n    Effect \"transition to On\"\n  }\n\n  Activity \"VehicleShutdown\" {\n    Trigger \"vehicle shutdown signal\"\n    Effect \"transition to Off\"\n  }\n\n  StateMachine \"VehicleState\" {\n    Initial = \"Off\"\n    State = {\n      \"Off\",\n      \"Starting\",\n      \"On\"\n    }\n    Transition = {\n      \"VehicleStart\"\n      \"VehiclePowerOn\"\n      \"VehicleShutdown\"\n    }\n  }\n\nendpackage",
    "package VehicleStatusManagement\n\n  // State Machine\n  stateMachine VehicleStatusStateMachine {\n    state Off {\n      entryAction {\n        // Initial state\n      }\n    }\n    state Starting {\n      entryAction {\n        // Starting logic\n      }\n    }\n    state On {\n      entryAction {\n        // Running logic\n      }\n    }\n    transition StartFromOff {\n      source = Off\n      target = Starting\n      trigger = VehicleStartSignal\n    }\n    transition StartFromStarting {\n      source = Starting\n      target = On\n      trigger = VehicleOnSignal\n    }\n    transition StopFromOn {\n      source = On\n      target = Off\n      trigger = VehicleOffSignal\n    }\n  }\n\nendpackage",
    "package VehiclePowerManagement\n\n  // State Machine\n  statemachine VehiclePowerState {\n    state Off {\n      transition StartCommand -> StartPhase\n    }\n    state StartPhase {\n      transition VehicleStarted -> PoweredOn\n    }\n    state PoweredOn {\n      transition ShutdownCommand -> SafetyOperations\n    }\n    state SafetyOperations {\n      transition -> Off\n    }\n  }\n\n  // Control Signals\n  activity StartCommand\n  activity VehicleStarted\n  activity ShutdownCommand\n\n  // Functional Units\n  block FunctionalUnit\n  \n  // Safety Operations\n  activity ParkingBrakeEngagement\n\nendpackage",
    "package VehicleControlSystem\n\n  // State Machine\n  statemachine VehicleState {\n    state Shutdown {\n      transition StartSignal --> StartUp\n    }\n    state StartUp {\n      transition StartedSignal --> Running\n    }\n    state Running {\n      transition ShutdownSignal --> Shutdown\n    }\n  }\n\n  // Signal\n  signal StartSignal\n  signal StartedSignal\n  signal ShutdownSignal\n\n  // Requirement\n  requirement \"The system shall be capable of managing the vehicle’s start-up, operation, and shutdown processes.\"\n  requirement \"When the user issues a vehicle start signal while the vehicle is in the shutdown state, the vehicle should enter the start-up state.\"\n  requirement \"Upon receiving a vehicle started signal, the system shall set the vehicle status to running.\"\n  requirement \"If the user issues a vehicle shutdown signal during operation, the vehicle status shall return to shutdown.\"\n  requirement \"The system must accurately respond to the corresponding signals, enabling automatic switching among the three main states—shutdown, start-up, and running—so that the user can conveniently and safely control the vehicle’s start and stop processes.\"\n\nendpackage",
    "package VehiclePowerManagement\n\n  // State Machine\n  statemachine VehicleState {\n    state Off {\n      transition StartSignal -> Start\n    }\n    state Start {\n      transition OnSignal -> On\n    }\n    state On {\n      transition OffSignal -> Off\n    }\n  }\n\n  // Health State\n  block HealthState {\n    \n  }\n\nendpackage",
    "package VehicleHealthMonitoringSystem\n\n  Block VehicleHealthMonitoringSystem {\n    Property vehicleTemperature : Real\n    Property vehicleHealthStatus : String\n    Property maintenanceTime : Time\n\n    Activity normalOperation {\n      ActivityNode senseTemperature : Real\n      ActivityNode compareTemperature : Boolean\n      ActivityNode sendWarning : Action\n      ActivityNode updateHealthStatus : Action\n    }\n\n    Activity overTemperature {\n      ActivityNode sendWarning : Action\n      ActivityNode updateHealthStatus : Action\n    }\n\n    Activity maintenance {\n      ActivityNode enterMaintenance : Action\n      ActivityNode updateMaintenanceTime : Action\n      ActivityNode exitMaintenance : Action\n    }\n\n    Constraint maxTemperature {\n      vehicleTemperature <= presetMaxTemperature\n    }\n\n    Constraint maintenanceInterval {\n      maintenanceTime >= scheduledMaintenanceInterval\n    }\n\n    Constraint maintenanceDuration {\n      maintenanceTime <= 48 hours\n    }\n\n  }\n\nendpackage",
    "package ServerSystem\n\n  Block Server {\n    \n    Property localClock : Time\n    \n    Port requestPort : Port\n    \n    State off {\n      \n    }\n    \n    State waiting {\n      \n    }\n    \n    State response {\n      \n    }\n    \n    Transition startTransition : Triggered\n      from off to waiting\n      \n    Transition requestTransition : Triggered\n      from waiting to response\n      \n    Transition responseTransition : Timed\n      from response to waiting\n      duration = 5 minutes\n      \n    Transition dailyTransition : Timed\n      from waiting to off\n      time = \"11:59:00\"\n      \n  }\n\nendpackage",
    "package StartStopSystem\n\n  // State Machine\n  statemachine StartStopProcess {\n    state Off {\n      transition startSignal -> StartProcess\n    }\n    state StartProcess {\n      transition powerOnSignal and brakePedalDepressed -> Operating\n    }\n    state Operating {\n      entry {\n        self.selfCheck()\n      }\n      transition stopSignal -> Off\n    }\n  }\n\n  // Signal\n  signal startSignal\n  signal powerOnSignal\n  signal stopSignal\n  signal brakePedalDepressed\n\n  // Requirement\n  requirement SafetyAndReliability = \"The overall system is designed to ensure the safety and reliability of the vehicle’s start-stop process, as well as coordinated control with the controller.\"\n\n  // Constraint\n  constraint ParkingBrakeApplication = \"Upon leaving the operating state, the parking brake will be automatically applied to ensure parking safety.\"\n\nendpackage",
    "package VehicleStartStopSystem\n\n  // State Machine\n  statemachine VehicleState {\n    state Off {\n      transition StartUp on VehicleStartSignal\n    }\n    state StartUp {\n      transition Started on (BrakePedalDepressed and VehicleOnSignal)\n    }\n    state Started {\n      transition Shutdown on ShutdownSignal\n    }\n    state Shutdown {\n      action ApplyParkingBrake\n    }\n  }\n\n  // Requirements\n  requirement REQ_001 = \"The system shall ensure that the vehicle can only be started and operated under the correct conditions.\"\n  requirement REQ_002 = \"The system shall automatically apply the parking brake before shutdown to ensure safety.\"\n\n  // Parts\n  part VehicleController\n  part BrakePedal\n  part ParkingBrake\n\nendpackage",
    "package CruiseControlSystem\n\n  Block CruiseControlSystem {\n    \n    Property setSpeed : Real\n    Property actualSpeed : Real\n    \n    Block Driver {\n      \n      Action activateCruise {\n        send setSpeed to CruiseController\n      }\n    }\n    \n    Block CruiseController {\n      \n      Action receiveSetSpeed {\n        receive setSpeed from Driver\n      }\n      Action receiveActualSpeed {\n        receive actualSpeed from Speedometer\n      }\n      Action generateFuelControlCommand {\n        send fuelControlCommand to Engine\n      }\n    }\n    \n    Block Speedometer {\n      \n      Action sendActualSpeed {\n        send actualSpeed to CruiseController\n      }\n    }\n    \n    Block Engine {\n      \n      Action receiveFuelControlCommand {\n        receive fuelControlCommand from CruiseController\n      }\n    }\n    \n    Block Vehicle {\n      \n    }\n  }\nend CruiseControlSystem",
    "package CruiseControlSystem\n\n  Block CruiseController {\n    Property setSpeed : Real\n    Property actualSpeed : Real\n    Property throttleCommand : Real\n\n    Operation setSpeed(setSpeed : Real)\n    Operation getActualSpeed() : Real\n    Operation generateThrottleCommand() : Real\n  }\n\n  Block Vehicle {\n    Property speed : Real\n  }\n\n  Block EngineSystem {\n    Operation receiveThrottleCommand(throttleCommand : Real)\n  }\n\n  Block Driver {\n    Operation sendSetSpeedCommand(setSpeed : Real)\n  }\n\n  Block Speedometer {\n    Operation getActualSpeed() : Real\n  }\n\n  Requirement CruiseControlFunction {\n    description: \"The system is designed to implement the cruise control function for vehicles.\"\n  }\n\n  Requirement DriverIntentResponse {\n    description: \"The entire process realizes the automatic response to the driver's intent, improving driving comfort and safety.\"\n  }\n\n  Requirement SetSpeedCommand {\n    description: \"The driver can send a set speed command to the cruise controller through operation.\"\n  }\n\n  Requirement SpeedAcquisition {\n    description: \"After receiving the set speed, the cruise controller acquires",
    "package CruiseControlSystem\n\n  Block CruiseControlSystem {\n    Property setSpeed : Real\n    Property currentSpeed : Real\n    Property throttleCommand : Real\n\n    Requirement cruiseControlFunction {\n      Description: \"This system is designed to implement an automotive cruise control function.\"\n    }\n\n    Requirement driverInput {\n      Description: \"The driver sends a set speed command to the system via the in-vehicle control interface.\"\n    }\n\n    Requirement speedSensorData {\n      Description: \"After receiving this command, the cruise controller compares the set speed with the current vehicle speed information provided by the speed sensor (speedometer).\"\n    }\n\n    Requirement speedDifferenceCalculation {\n      Description: \"Upon obtaining the current vehicle speed, the cruise controller calculates the difference between the set speed and the actual speed\"\n    }\n\n    Requirement throttleCommandGeneration {\n      Description: \"generates the corresponding throttle control command, and sends it to the engine.\"\n    }\n\n    Requirement engineOutputAdjustment {\n      Description: \"This adjusts the engine output to maintain or reach the set speed.\"\n    }\n\n    Requirement messageTransmission {\n      Description: \"Throughout this process, the driver, cruise controller, speedometer,",
    "package CruiseControlSystem\n\n  requirement CruiseControlFunctionality\n    text \"This system is designed to implement automotive cruise control functionality.\"\n\n  requirement DriverSpeedSetting\n    text \"When the driver wishes to set the vehicle’s cruising speed, they can send a command specifying the desired speed.\"\n\n  requirement CruiseControllerCalculation\n    text \"Upon receiving this command, the vehicle’s cruise controller calculates and sends appropriate throttle control instructions to the engine based on real-time speed information from the speedometer.\"\n\n  requirement ThrottleAdjustment\n    text \"This enables the automatic adjustment and maintenance of the vehicle at the set cruising speed.\"\n\n  requirement SystemWorkflow\n    text \"The system workflow includes promptly collecting and transmitting the driver’s speed setting request, real-time sensing and feedback of the vehicle speed, and intelligent throttle adjustment by the cruise controller to the engine.\"\n\n  requirement DriverConvenience\n    text \"The system aims to ensure convenience and comfort for the driver during operation while enabling the vehicle to automatically cruise at the preset speed with accuracy and smoothness.\"\n\n  block CruiseControlSystem\n    ownedAttribute : SpeedSetting\n    ownedAttribute : VehicleSpeed\n    ownedAttribute : ThrottleControl\n    ownedAttribute : Engine\n\n    part Driver\n    part",
    "package CruiseControlSystem\n\n  Block CruiseControlSystem {\n    \n    Property TargetSpeed : Real\n    Property ActualSpeed : Real\n    \n    Block CruiseController {\n      Property SetSpeed : Real\n      Property ActualSpeed : Real\n      Property FuelControlCommand : Real\n      \n      Interface CruiseControllerInterface {\n        Property SetSpeed : Real\n        Property ActualSpeed : Real\n        Property FuelControlCommand : Real\n      }\n      \n      Action SetTargetSpeed {\n        Input SetSpeed : Real\n      }\n      \n      Action UpdateFuelControl {\n        Input ActualSpeed : Real\n        Output FuelControlCommand : Real\n      }\n    }\n    \n    Block SpeedSensor {\n      Property ActualSpeed : Real\n    }\n    \n    Block Engine {\n      Property FuelControlCommand : Real\n    }\n    \n    Block CruiseControlInterface {\n      Property SetSpeed : Real\n    }\n    \n    Flow FlowSetSpeed {\n      Source CruiseControlInterface\n      Target CruiseController\n      Data SetSpeed : Real\n    }\n    \n    Flow FlowActualSpeed {\n      Source SpeedSensor\n      Target CruiseController\n      Data ActualSpeed : Real",
    "package CruiseControlSystem\n\n  Block CruiseControlSystem {\n    \n    Property setSpeed : Real\n    Property actualSpeed : Real\n    Property fuelControlCommand : Real\n\n    Interface MessageInterface {\n      Operation sendSetSpeed(setSpeed : Real)\n      Operation receiveActualSpeed(actualSpeed : Real)\n      Operation sendFuelControlCommand(fuelControlCommand : Real)\n    }\n\n    Block CruiseController {\n      Property setSpeed : Real\n      Property actualSpeed : Real\n      Property fuelControlCommand : Real\n\n      Interface MessageInterface {\n        Operation sendSetSpeed(setSpeed : Real)\n        Operation receiveActualSpeed(actualSpeed : Real)\n        Operation sendFuelControlCommand(fuelControlCommand : Real)\n      }\n\n      Activity processSetSpeed {\n        Input setSpeed\n        Output fuelControlCommand\n      }\n\n      Activity readActualSpeed {\n        Input actualSpeed\n      }\n    }\n\n    Block SpeedSensor {\n      Property actualSpeed : Real\n\n      Interface MessageInterface {\n        Operation sendActualSpeed(actualSpeed : Real)\n      }\n    }\n\n    Block EngineController {\n      Property fuelControlCommand : Real\n\n      Interface Message",
    "package VehicleLifecycleManagement\n\n  // Block Definitions\n  block Vehicle {\n    \n    // Attributes\n    Property deliveryDate : Date\n    Property owner : Owner\n    Property currentDriver : Driver\n    \n    // Parts\n    part Assembly\n    part Delivery\n    part OwnershipTransfer\n    part DrivingOperation\n    part Scrapping\n  }\n\n  block Owner {\n    Property name : String\n    Property contactInfo : String\n  }\n\n  block Driver {\n    Property name : String\n    Property licenseNumber : String\n  }\n\n  block Assembly {\n    // Operations\n    operation assemble()\n  }\n\n  block Delivery {\n    // Operations\n    operation deliver(vehicle : Vehicle, deliveryDate : Date)\n  }\n\n  block OwnershipTransfer {\n    // Operations\n    operation transferOwnership(vehicle : Vehicle, newOwner : Owner)\n  }\n\n  block DrivingOperation {\n    // Operations\n    operation recordDriving(vehicle : Vehicle, driver : Driver, startTime : Date, endTime : Date)\n  }\n\n  block Scrapping {\n    // Operations\n    operation scrap(vehicle : Vehicle)\n  }\n\n  // Relationships\n  Vehicle.hasPart",
    "package VehicleModel\n\n  // Vehicle\n  class Vehicle {\n    \n    // Attributes\n    Property mass : Real\n    Property operationalStatus : String\n      \n    // Parts\n    Part engine : Engine\n    Part driver : Driver\n    Part leftFrontWheel : Wheel\n    Part rightFrontWheel : Wheel\n  }\n\n  // Engine\n  class Engine {\n    // Attributes\n    Property power : Real\n  }\n\n  // Driver\n  class Driver {\n    // Attributes\n    Property name : String\n  }\n\n  // Wheel\n  class Wheel {\n    // Attributes\n    Property tirePressure : Real\n  }\n\n  // Vehicle Instance\n  instance vehicle_1 : Vehicle {\n    // Attributes\n    mass = 1500\n    operationalStatus = \"Idle\"\n  }\n\n  // Time Snapshots\n  block TimeSnapshot1 {\n    // Associations\n    vehicle_1.leftFrontWheel.tirePressure = 2.2\n    vehicle_1.rightFrontWheel.tirePressure = 2.2\n  }\n\n  block TimeSnapshot2 {\n    // Associations\n    vehicle_1.leftFrontWheel.tirePressure =",
    "package VehicleSystem\n\n  // Block Definitions\n  block Vehicle {\n    property Mass : Real\n    property GearSetting : Integer\n    property AcceleratorPosition : Real\n  }\n\n  block Engine {\n    # ... Engine attributes and relationships\n  }\n\n  block Driver {\n    # ... Driver attributes and relationships\n  }\n\n  // Instance\n  instance Vehicle_1 : Vehicle {\n    Mass = 2000.0\n    GearSetting = 0\n    AcceleratorPosition = 0.0\n  }\n\n  // Time Point\n  timePoint InitialMoment\n\n  // Time Point\n  timePoint NextMoment\n\n  // Relationship\n  relationship HasEngine : Vehicle -- Engine\n\n  // Relationship\n  relationship HasDriver : Vehicle -- Driver\n\n  // State Transition\n  stateTransition Vehicle_1\n    from InitialMoment\n    to NextMoment\n    {\n      Mass = 1500.0\n      GearSetting = 2\n      AcceleratorPosition = 0.5\n    }\n\nendpackage",
    "package VehicleModel\n\n  Block Vehicle {\n    Property mass : Real = 2000\n    Property gearPosition : String = \"Neutral\"\n    Property throttlePosition : Real = 0\n    \n    Part engine : Engine\n    \n    Reference driver : Driver\n    \n    State initial {\n      mass = 2000\n      gearPosition = \"Neutral\"\n      throttlePosition = 0\n      driver = Alice\n    }\n    \n    State second {\n      mass = 1500\n      gearPosition = \"Second\"\n      throttlePosition = 0.5\n      driver = Bob\n    }\n  }\n\n  Block Engine {\n    # Engine properties and behavior\n  }\n\n  Block Driver {\n    Property name : String\n  }\n\n  Block Alice {\n    name = \"Alice\"\n  }\n\n  Block Bob {\n    name = \"Bob\"\n  }\n\nendpackage",
    "package VehicleMassModel {\n\n  // Block Definitions\n  block Vehicle {\n    \n    // Property\n    property Mass : Real\n    \n    // Part\n    part Engine : Engine\n    part Transmission : Transmission\n    part Body : Body\n    \n    // Constraint\n    constraint TotalMass = self.Mass = self.Engine.Mass + self.Transmission.Mass + self.Body.Mass\n  }\n\n  block Engine {\n    property Mass : Real\n  }\n\n  block Transmission {\n    property Mass : Real\n  }\n\n  block Body {\n    property Mass : Real\n  }\n\n  // ... (Additional blocks for other components)\n\n}\n\n\n",
    "package VehicleMassManagement\n\n  Block Vehicle {\n    \n    Property VIN : String\n    \n    Block Composition {\n      \n      Property SerialNumber : String\n      \n      Block Component {\n        Property Mass : Real\n      }\n      \n      Reference component : Component\n    }\n    \n    Property TotalMass : Real\n    \n    Constraint TotalMass = sum(component.Mass)\n  }\n\n  Block Component {\n    Property Mass : Real\n    Property SerialNumber : String\n  }\n\n  Block Engine {\n    \n    Block Composition {\n      \n      Property SerialNumber : String\n      \n      Block SubComponent {\n        Property Mass : Real\n      }\n      \n      Reference subComponent : SubComponent\n    }\n    \n    Property Mass : Real\n  }\n\n  Block Transmission {\n    \n    Block Composition {\n      \n      Property SerialNumber : String\n      \n      Block SubComponent {\n        Property Mass : Real\n      }\n      \n      Reference subComponent : SubComponent\n    }\n    \n    Property Mass : Real\n  }\n\nendpackage",
    "package MassAggregationSystem\n\n  Block simpleThing\n    Property simpleMass : Real\n\n  Block compositeThing\n    Property basicMass : Real\n    Property subcomponents : Composite\n    Property totalMass : Real\n\n  Constraint totalMass_compositeThing\n    totalMass = basicMass + sum(subcomponent.totalMass for subcomponent in subcomponents)\n\n  Block MassAggregationSystem\n    Property objects : Block\n\n  Requirement massAggregation\n    The system shall automatically calculate and aggregate the mass of components at all levels of the composite, achieving hierarchical management and statistics of mass.\n\nendpackage",
    "package MassManagementSystem\n\n  Block MassManagementSystem {\n    \n    Property basicMass : Real\n    \n    Property minimumMassThreshold : Real\n\n    Block CompositeObject {\n      \n      Property basicMass : Real\n      \n      Property totalMass : Real\n      \n      Reference subcomponents : CompositeObject\n      \n      Constraint totalMassCalculation {\n        totalMass = basicMass + sum(subcomponents.totalMass)\n      }\n    }\n    \n    Constraint massFiltering {\n      totalMass = basicMass + sum(subcomponents.totalMass | subcomponents.basicMass >= minimumMassThreshold)\n    }\n    \n  }\n\nendpackage",
    "package VehicleDynamics\n\n  Block VehicleDynamicsSystem {\n    Property powerOutput : Real\n    Property acceleration : Real\n    Property speed : Real\n    Property position : Real\n\n    Requirement calculatePowerOutput {\n      Description: \"Calculate the vehicle's actual available power output based on key input parameters.\"\n      Input wheelPower : Real\n      Input aerodynamicDragCoefficient : Real\n      Input frictionCoefficient : Real\n      Input vehicleMass : Real\n      Input speed : Real\n      Output powerOutput : Real\n    }\n\n    Requirement calculateAcceleration {\n      Description: \"Calculate the vehicle's acceleration based on effective power, mass, and current speed.\"\n      Input effectivePower : Real\n      Input vehicleMass : Real\n      Input currentSpeed : Real\n      Output acceleration : Real\n    }\n\n    Requirement calculateSpeed {\n      Description: \"Calculate the vehicle's speed at any given moment.\"\n      Input acceleration : Real\n      Input initialSpeed : Real\n      Input time : Real\n      Output speed : Real\n    }\n\n    Requirement calculatePosition {\n      Description: \"Estimate vehicle displacement based on speed and time.\"\n      Input speed : Real\n      Input time : Real\n      Output position",
    "package VehicleDynamicsSimulation\n\n  Block Vehicle {\n    Property initialSpeed : Real\n    Property initialPosition : Real\n    Property timeStep : Real\n    Property vehicleMass : Real\n    Property aerodynamicDragCoefficient : Real\n    Property rollingResistanceCoefficient : Real\n    Property wheelEndOutputPower : Real\n    \n    Activity DrivingDynamics {\n      Input initialSpeed\n      Input initialPosition\n      Input timeStep\n      Input vehicleMass\n      Input aerodynamicDragCoefficient\n      Input rollingResistanceCoefficient\n      Input wheelEndOutputPower\n      \n      Activity CalculateAvailablePower {\n        \n      }\n      \n      Activity CalculateAcceleration {\n        \n      }\n      \n      Activity CalculateSpeed {\n        \n      }\n      \n      Activity CalculatePosition {\n        \n      }\n      \n      Output finalSpeed : Real\n      Output finalPosition : Real\n    }\n  }\nendpackage",
    "package VehicleDynamicsModel {\n\n  Block Vehicle {\n    Property mass : Real\n    Property wheelPower : Real\n    Property dragCoefficient : Real\n    Property rollingResistanceCoefficient : Real\n    Property initialSpeed : Real\n    Property initialPosition : Real\n\n    Requirement drivingDynamicsCalculation {\n      text = \"The system automatically calculates and updates the vehicle's speed and position at each time step.\"\n    }\n    Requirement airResistanceAccounting {\n      text = \"The system comprehensively accounts for the effects of air resistance on vehicle dynamics.\"\n    }\n    Requirement frictionalResistanceAccounting {\n      text = \"The system comprehensively accounts for the effects of frictional resistance on vehicle dynamics.\"\n    }\n    Requirement performanceAnalysis {\n      text = \"This assists end users in analyzing vehicle performance under different operating conditions.\"\n    }\n  }\n\n}",
    "package VehicleDynamics\n\n  Block Vehicle {\n    Property initialPosition : Real\n    Property initialVelocity : Real\n    Property mass : Real\n    Property wheelEndDrivePower : Real\n    Property timeInterval : Real\n    Property dragCoefficient : Real\n    Property frictionCoefficient : Real\n    \n    Requirement \"System calculates acceleration, final velocity, and final position\"\n    Requirement \"System considers air resistance, frictional resistance, and other factors\"\n    Requirement \"System solves dynamic equations under relevant constraints\"\n    Requirement \"System is suitable for linear uniformly accelerated motion\"\n    Requirement \"System provides a computational basis for vehicle system dynamics modeling and performance evaluation\"\n  }\n\n  ",
    "package VehicleWeightManagement\n\n  Block Vehicle {\n    Property Mass : Real = 0\n    \n    Block Chassis {\n      Property Mass : Real = 0\n    }\n    \n    Block Engine {\n      Property Mass : Real = 0\n    }\n    \n    Block Gearbox {\n      Property Mass : Real = 0\n    }\n    \n    Constraint MaxMass {\n      Vehicle.Mass <= 2500\n    }\n    \n    Action OverweightWarning {\n      Trigger Vehicle.Mass > 2500\n      Effect \"Issue an overweight warning\"\n    }\n  }\nendpackage",
    "package VehicleMassBudgetingSystem\n\n  Block Vehicle {\n    Property MassLimit : Real = 2500 kg\n    \n    Block Chassis {\n      Property Mass : Real\n    }\n    \n    Block Engine {\n      Property Mass : Real\n    }\n    \n    Block Transmission {\n      Property Mass : Real\n    }\n    \n    Block OtherComponents {\n      Property Mass : Real\n    }\n    \n    Constraint TotalMass <= MassLimit {\n      TotalMass = Chassis.Mass + Engine.Mass + Transmission.Mass + OtherComponents.Mass\n    }\n  }\n\nendpackage",
    "package VehicleMassManagement\n\n  Block Vehicle {\n    Property totalMass : Real\n    Property chassisMass : Real\n    Property engineMass : Real\n    Property transmissionMass : Real\n    \n    Constraint totalMass <= 2500\n    \n    Block Chassis {\n      Property mass : Real\n    }\n    \n    Block Engine {\n      Property mass : Real\n    }\n    \n    Block Transmission {\n      Property mass : Real\n    }\n    \n    Requirement massCompliance {\n      description: \"The total mass of the vehicle must not exceed 2,500 kilograms.\"\n    }\n  }\n\nendpackage",
    "package VehicleWeightManagement\n\n  Block \"Vehicle\" {\n    Property \"TotalWeight\" : Real\n    Property \"ChassisWeight\" : Real\n    Property \"EngineWeight\" : Real\n    Property \"TransmissionWeight\" : Real\n  }\n\n  Constraint \"WeightLimit\" {\n    Vehicle.TotalWeight <= 2500\n  }\n\n  Requirement \"WeightRecording\" {\n    Vehicle.ChassisWeight = Input\n    Vehicle.EngineWeight = Input\n    Vehicle.TransmissionWeight = Input\n  }\n\n  Requirement \"WeightCalculation\" {\n    Vehicle.TotalWeight = Vehicle.ChassisWeight + Vehicle.EngineWeight + Vehicle.TransmissionWeight\n  }\n\n  Requirement \"WeightWarning\" {\n    if Vehicle.TotalWeight > 2500 then\n      Warning \"WeightLimitExceeded\"\n    end\n  }\n\nendpackage",
    "package VehicleSystem\n\n  Block Vehicle {\n    Property Mass : Real = 0\n    Constraint TotalMassConstraint {\n      Mass <= 2500\n    }\n    \n    Block Chassis {\n      Property Mass : Real = 0\n    }\n    \n    Block Engine {\n      Property Mass : Real = 0\n    }\n    \n    Block Transmission {\n      Property Mass : Real = 0\n    }\n    \n    Vehicle.Chassis <<part_of>> Vehicle\n    Vehicle.Engine <<part_of>> Vehicle\n    Vehicle.Transmission <<part_of>> Vehicle\n    \n    Constraint DynamicConstraint {\n      Mass > 0\n      (AppliedForce * Time) = (Mass * (FinalVelocity - InitialVelocity))\n    }\n  }\n\nendpackage",
    "package VehicleMaintenanceSystem\n\n  // Vehicle\n  class Vehicle {\n    \n    // Attributes\n    String vehicleId\n    String vehicleType\n    Real nextMaintenanceTime\n    Real maintenanceInterval\n    Real maxAllowedTemperature\n    String status\n    \n    // Operations\n    void scheduleMaintenance(Real time, Real interval)\n    void startMaintenance()\n    void completeMaintenance()\n  }\n\n  // Maintenance State\n  enum Status {\n    Healthy\n    UnderMaintenance\n  }\n\n  // Time Constraints\n  constraint MaxMaintenanceDuration {\n    self.maintenanceDuration <= 48 hours\n  }\n\n  constraint MaintenanceStartDelay {\n    self.maintenanceStartTime >= self.nextMaintenanceTime\n  }\n\n  constraint MaintenanceInitiationDelay {\n    self.maintenanceStartTime <= 2 seconds after self.previousHealthyStateEnd\n  }\n\n  // Relationship\n  Vehicle hasOne MaintenanceSchedule\n\n  // Block Definition\n  block VehicleMaintenanceSystem {\n    \n    // Parts\n    Vehicle vehicle\n    \n    // Ports\n    port scheduleMaintenance\n    port startMaintenance\n    port completeMaintenance\n  }\n\nendpackage",
    "package VehicleSystem\n\n  Block Vehicle {\n    Property mass : Real\n    Property fuelMass : Real\n    Property maxMassLimit : Real\n\n    Constraint mass <= maxMassLimit\n    Constraint fuelMass > 0\n\n    Block Engine {\n      Property speed : Real\n      Property torque : Real\n\n      Property speedCurve : Function[Real, Real]\n      Constraint torque = speedCurve(speed)\n\n      Interface ClutchInterface {\n        Property torque : Real\n      }\n\n      Flow torqueToClutch : Flow[Real]\n      Flow torqueFromClutch : Flow[Real]\n\n      Connector torqueToClutchConnector : Connector[torqueToClutch]\n      Connector torqueFromClutchConnector : Connector[torqueFromClutch]\n\n      Connector torqueToClutchConnector.target : ClutchInterface.torque\n    }\n\n    Block Transmission {\n      Property torque : Real\n    }\n\n    Connector torqueFromEngineConnector : Connector[torqueToClutch]\n    Connector torqueToTransmissionConnector : Connector[torqueFromClutch]\n\n    Connector torqueFromEngineConnector.target : Engine.torqueToClutchConnector\n    Connector torqueToTransmissionConnector.source : Transmission.torque\n\n  }\n\nendpackage",
    "package VehicleRequirements\n\n  Requirement \"VehicleMassLimitFullTank\" {\n    description = \"With a full fuel tank, the vehicle’s total mass must not exceed 2000 kg\"\n    type = \"Requirement\"\n    value = \"2000 kg\"\n  }\n\n  Requirement \"VehicleMassLimitEmptyTank\" {\n    description = \"With an empty fuel tank, the vehicle’s total mass must not exceed 1500 kg\"\n    type = \"Requirement\"\n    value = \"1500 kg\"\n  }\n\n  Requirement \"EngineTorqueTransmissionInterface\" {\n    description = \"The engine must be capable of transmitting its generated torque to the transmission via the clutch interface\"\n    type = \"Requirement\"\n  }\n\n  Requirement \"EngineTorquePerformance\" {\n    description = \"The engine is required to deliver the necessary torque according to the speed-torque curve (see Table 1)\"\n    type = \"Requirement\"\n  }\n\n  Requirement \"VehicleMassControl\" {\n    description = \"Overall, the system aims to regulate vehicle mass control\"\n    type = \"Requirement\"\n  }\n\n  Requirement \"Powertrain",
    "package VehicleSystem\n\n  Requirement \"VehicleMassLimit\" {\n    description = \"The vehicle's total mass must not exceed 2000 kilograms when fully fueled.\"\n    value = \"2000 kg\"\n  }\n\n  Requirement \"VehicleEmptyMassLimit\" {\n    description = \"The vehicle's empty mass should not be higher than 1500 kilograms.\"\n    value = \"1500 kg\"\n  }\n\n  Requirement \"EngineTorqueTransmission\" {\n    description = \"The engine must be capable of effectively transmitting its generated torque to the transmission system through a clutch interface.\"\n  }\n\n  Requirement \"EngineTorqueSpeedRelationship\" {\n    description = \"The torque generated by the engine should vary with speed, conforming to the relevant performance table specifications.\"\n  }\n\n  Requirement \"VehicleEngineDesignRequirements\" {\n    description = \"The design of both the vehicle and its engine must meet these critical requirements for mass and power interface to ensure overall vehicle performance and safety.\"\n  }\n\nendpackage",
    "package VehicleRequirements\n\n  Requirement \"MassLimitFullTank\" {\n    description = \"The total vehicle mass must not exceed 2000 kg when the fuel tank is full.\"\n    constraint = \"VehicleCurbMass + FuelMass <= 2000\"\n  }\n\n  Requirement \"MassLimitEmptyTank\" {\n    description = \"The total vehicle mass must not exceed 1500 kg when the fuel tank is empty.\"\n    constraint = \"VehicleCurbMass <= 1500\"\n  }\n\n  Requirement \"TorqueCharacteristics\" {\n    description = \"The engine must be capable of generating the specified torque characteristics at various speeds.\"\n  }\n\n  Requirement \"TorqueTransmission\" {\n    description = \"The generated torque must be effectively transmitted to the gearbox through the clutch interface to ensure smooth power delivery.\"\n  }\n\nendpackage",
    "package VehiclePerformanceAnalysis\n\n  Requirement \"Vehicle Performance Analysis System\" {\n    description \"This system is designed to analyze the dynamic performance of vehicles, focusing primarily on modeling and calculating the power demand, acceleration, speed, and position variations over time during straight-line driving.\"\n  }\n\n  Requirement \"Vehicle Attributes\" {\n    description \"Users can set vehicle attributes (such as curb weight, payload, wheel diameter, transmission efficiency, and fuel economy under urban and highway conditions)\"\n  }\n\n  Requirement \"Driving Cycles\" {\n    description \"Users can input specific driving cycles (including time-stamped position and speed information)\"\n  }\n\n  Requirement \"Power Demand Calculation\" {\n    description \"The system can calculate the vehicle’s engine power required to meet the driving cycle conditions\"\n  }\n\n  Requirement \"Acceleration Calculation\" {\n    description \"The system can calculate the vehicle’s acceleration based on the driving cycle\"\n  }\n\n  Requirement \"Speed and Position Variation\" {\n    description \"The system can model and calculate the speed and position variations of the vehicle over time during the driving cycle\"\n  }\n\n  Requirement \"Fuel Economy Calculation\" {\n    description \"The system can",
    "package VehicleFuelEconomySimulation\n\n  Block Vehicle {\n    Property curbWeight : Real\n    Property load : Real\n    Property wheelDiameter : Real\n    Property transmissionEfficiency : Real\n    \n    Block Engine {\n      Property enginePowerDemand : Real\n    }\n    \n    Block Drivetrain {\n      Property wheelPower : Real\n    }\n    \n    Block VehicleDynamics {\n      Property acceleration : Real\n      Property energyConsumption : Real\n    }\n    \n    Block FuelSystem {\n      Property fuelConsumption : Real\n      Property fuelEconomy : Real\n    }\n    \n    Requirement fuelEconomyRequirement {\n      FuelEconomy >= 30 mpg\n    }\n    \n    UseCase DrivingScenario {\n      Input urbanDrivingScenario : String\n      Input highwayDrivingScenario : String\n      Input drivingTrajectory : String\n      Input speedVariation : String\n      Output fuelConsumption : Real\n      Output fuelEconomy : Real\n    }\n  }\n\nendpackage",
    "package EngineSelectionSystem\n\n  Block EngineSelectionSystem {\n    \n    Property \"Engine Types\" : String = \"Four-cylinder, Six-cylinder\"\n    \n    Property \"Performance Indicators\" : String = \"Power, Mass, Efficiency, Cost\"\n    \n    Property \"Evaluation Function\" : String = \"Unified\"\n    \n    Property \"Selection Criteria\" : String = \"Performance and Economic Efficiency\"\n    \n    Requirement \"Requirement 1\" {\n      text = \"The system shall aggregate and calculate key performance indicators for each engine type.\"\n    }\n    \n    Requirement \"Requirement 2\" {\n      text = \"The system shall use a unified evaluation function to assess each engine.\"\n    }\n    \n    Requirement \"Requirement 3\" {\n      text = \"The system shall automatically screen and recommend the optimal engine selection.\"\n    }\n    \n  }\n  \nendpackage",
    "package VehicleWeightCheck\n\n  Requirement \"REQ-001\" {\n    text = \"The curb weight of each vehicle must be less than or equal to 2,500 kilograms.\"\n    type = \"Requirement\"\n  }\n\n  Block \"VehicleWeightCheckSystem\" {\n    ownedAttribute \"curbWeight\" {\n      type = \"Real\"\n      unit = \"kilogram\"\n    }\n    ownedAttribute \"evaluationResult\" {\n      type = \"String\"\n      values = [\"Qualified\", \"Unqualified\"]\n    }\n    ownedOperation \"checkCurbWeight\" {\n      input = \"curbWeight\"\n      output = \"evaluationResult\"\n      description = \"Checks if the curb weight of the vehicle meets the specified standards.\"\n    }\n  }\n\n  Activity \"VehicleWeightCheckProcess\" {\n    ActivityNode \"DataCollection\" {\n      incoming = \"start\"\n      outgoing = \"DataProcessing\"\n    }\n    ActivityNode \"DataProcessing\" {\n      incoming = \"DataCollection\"\n      outgoing = \"Evaluation\"\n    }\n    ActivityNode \"Evaluation\" {\n      incoming = \"DataProcessing\"",
    "package MassVerificationSystem\n\n  // Block Definitions\n  block Vehicle {\n    property mass : Real\n  }\n\n  block WeighingEquipment {\n    port input : Real\n  }\n\n  block MassVerificationUnit {\n    port input : Real\n    port output : Boolean\n  }\n\n  // Relationship Definitions\n  relationship VehicleToWeighingEquipment {\n    Vehicle -- WeighingEquipment\n  }\n\n  relationship WeighingEquipmentToMassVerificationUnit {\n    WeighingEquipment -- MassVerificationUnit\n  }\n\n  // Constraint Definitions\n  constraint MassLimit {\n    Vehicle.mass <= 2500\n  }\n\n  constraint MassVerificationResult {\n    MassVerificationUnit.output = (MassVerificationUnit.input <= 2500)\n  }\n\nendpackage",
    "package TransportationSystem\n\n  requirement \"Convenience and Efficiency\" {\n    description \"The system is designed to provide end users with a convenient and efficient mode of transportation.\"\n  }\n\n  requirement \"Passenger Capacity\" {\n    description \"It is capable of supporting a driver and up to four passengers sharing a vehicle.\"\n  }\n\n  requirement \"Safe and Comfortable Travel\" {\n    description \"Enabling them to travel safely and comfortably from the starting point to the destination.\"\n  }\n\n  requirement \"Easy Entry and Exit\" {\n    description \"Users can freely enter and exit the vehicle, and the system should ensure that this process is simple and smooth.\"\n  }\n\n  requirement \"Environmental Integration\" {\n    description \"The system should fully consider and integrate surrounding environmental factors to ensure the safety and sustainability of the entire journey.\"\n  }\n\n  requirement \"Infrastructure Compatibility\" {\n    description \"The system should be compatible with related infrastructure such as gas stations.\"\n  }\n\n  requirement \"Human-Centered Operation\" {\n    description \"The system’s operation should be centered on human needs, with a focus on ride experience and various conveniences.\"\n  }\n\n  requirement \"Transportation Assistance\" {\n    ",
    "package TransportationSystem\n\n  requirement \"Comprehensive Transportation Scenarios\" {\n    description \"This system is designed to support comprehensive transportation scenarios, enabling a driver and up to four passengers to be safely transported from the starting point to the destination.\"\n  }\n\n  requirement \"User Entry and Exit\" {\n    description \"Users first enter the vehicle, after which the driver operates the vehicle under the influence of environmental conditions, and may refuel at a gas station as needed to ensure a smooth journey. Upon arrival at the destination, the driver and passengers can safely exit the vehicle, thereby completing the entire transportation process.\"\n  }\n\n  requirement \"Simple and Convenient Interactions\" {\n    description \"The system should ensure that interactions among all participants are simple and convenient, meeting the primary needs of daily transportation.\"\n  }\n\nendpackage",
    "package VehicleConfiguration\n\n  // Engine Types\n  class Engine {\n    property name : String\n    property cylinderCount : Integer\n  }\n\n  class FourCylinderEngine extends Engine {\n    property cylinderDiameter : String\n  }\n\n  class SixCylinderEngine extends Engine {\n    property cylinderDiameter : String\n  }\n\n  // Transmission Types\n  class Transmission {\n    property type : String\n  }\n\n  class ManualTransmission extends Transmission {\n  }\n\n  class AutomaticTransmission extends Transmission {\n  }\n\n  // Vehicle\n  class Vehicle {\n    property engine : FourCylinderEngine | SixCylinderEngine\n    property transmission : ManualTransmission | AutomaticTransmission\n  }\n\n  // Constraints\n  constraint EngineTransmissionConstraint {\n    self.engine.cylinderCount = 4 implies self.transmission.type = \"Manual\"\n    self.engine.cylinderCount = 6 implies self.transmission.type = \"Automatic\"\n  }\n\nendpackage",
    "package EngineConfiguration\n\n  Block Engine {\n    Property CylinderCount : Integer = {4, 6}\n    Property CylinderDiameter : Integer = {70, 100}\n    \n    Block Variant {\n      Property VariantName : String\n      \n      Block FourCylinderEngine {\n        CylinderCount = 4\n      }\n      \n      Block SixCylinderEngine {\n        CylinderCount = 6\n      }\n    }\n  }\n\nendpackage",
    "package AutomotiveConfiguration\n\n  Block Engine {\n    Property CylinderCount : Integer = 4\n    Property CylinderDiameter : String = \"70mm\"\n    \n    Variant 4Cylinder {\n      CylinderCount = 4\n    }\n    Variant 6Cylinder {\n      CylinderCount = 6\n    }\n  }\n\n  Block Transmission {\n    Property Type : String = \"Manual\"\n    \n    Variant Manual {\n      Type = \"Manual\"\n    }\n    Variant Automatic {\n      Type = \"Automatic\"\n    }\n  }\n\n  Block Vehicle {\n    Property Engine : Engine\n    Property Transmission : Transmission\n    \n    Constraint EngineTransmissionConstraint {\n      if Engine.Type = \"4Cylinder\" then Transmission.Type = \"Manual\"\n      if Engine.Type = \"6Cylinder\" then Transmission.Type = \"Automatic\"\n    }\n  }\n\nendpackage",
    "package System\n\n  Block systemAssembly {\n    part computerSubsystem\n    part storageSubsystem\n  }\n\n  Block computerSubsystem {\n    Property \"Software Integration Capability\" : Boolean = true\n  }\n\n  Block storageSubsystem {\n    Property \"Data Format Compatibility\" : Boolean = true\n  }\n\n  Requirement \"Software Design\" {\n    Description : \"Define message format and data format\"\n  }\n\n  Requirement \"System Integration\" {\n    Description : \"Ensure seamless operation of software and hardware for efficient, reliable, and compliant information storage, transmission, and processing\"\n  }\n\nendpackage",
    "package PowertrainSystem\n\n  Block PowertrainSystem {\n    \n    Property powerPerformance : String\n    \n    Block LogicalLayer {\n      \n      Block TorqueGenerator {\n        \n        Property powerOutput : Real\n        Property torqueOutput : Real\n      }\n    }\n    \n    Block PhysicalLayer {\n      \n      Block PowerUnit {\n        \n        Property powerOutput : Real\n        Property torqueOutput : Real\n      }\n    }\n    \n    Requirement MappingRequirement {\n      \n      source = LogicalLayer::TorqueGenerator\n      target = PhysicalLayer::PowerUnit\n    }\n  }",
    "package PowerTransmissionSystem\n\n  // Logical Model\n  block TorqueGenerator {\n    property power : Real\n    property torque : Real\n    \n    behavior generateTorque {\n      input power : Real\n      output torque : Real\n    }\n  }\n\n  // Physical Model\n  block Powertrain {\n    component Engine {\n      behavior generateTorque {\n        input power : Real\n        output torque : Real\n      }\n    }\n  }\n\n  // Allocation\n  allocation TorqueGenerator to Powertrain\n  allocation generateTorque to Engine.generateTorque\nendpackage",
    "package VehicleFeatureAnnotationSystem\n\n  Block Vehicle {\n    \n    Property safetyLevel : String\n    Property securityLevel : String\n\n    Block Interior {\n      \n      Block SeatBelt {\n        Property function : String = \"Safety\"\n      }\n      Block FrontSeat {\n        Property function : String = \"Safety\"\n      }\n      Block DriverAirbag {\n        Property function : String = \"Safety\"\n      }\n      Block AlarmSystem {\n        Property function : String = \"Security\"\n      }\n      \n      Interior <<contains>> SeatBelt\n      Interior <<contains>> FrontSeat\n      Interior <<contains>> DriverAirbag\n      Interior <<contains>> AlarmSystem\n    }\n\n    Block BodyAssembly {\n      Block BodyShell {\n        Property function : String = \"Safety\"\n      }\n      Block Bumpers {\n        Property function : String = \"Safety\"\n      }\n      Block KeylessEntryDevice {\n        Property function : String = \"Security\"\n      }\n      \n      BodyAssembly <<contains>> BodyShell\n      BodyAssembly <<contains>> Bumpers\n      BodyAssembly <<contains>> KeylessEntryDevice\n    }\n\n    Vehicle <<",
    "package VehicleDynamicsSystem\n\n  requirement \"REQ-001\" {\n    text = \"The system shall be capable of performing automated simulation and analysis of vehicle dynamic behavior.\"\n  }\n\n  requirement \"REQ-002\" {\n    text = \"Users should be able to input the vehicle’s initial velocity, initial position, acceleration at a specific moment, and the time step.\"\n  }\n\n  requirement \"REQ-003\" {\n    text = \"Through integration with the ModelCenter analysis tool, the system shall automatically calculate and output the vehicle’s velocity and position after the specified time step based on the given physical model.\"\n  }\n\n  requirement \"REQ-004\" {\n    text = \"The system must ensure accurate data transfer and reliable output of simulation results, enabling users to conveniently obtain key dynamic parameters to support vehicle performance analysis and design optimization.\"\n  }\n\nendpackage",
    "package SafetyFeatures {\n  \n}\n\npackage MandatorySafetyFeatures {\n  \n}\n\nblock Car {\n  \n  block Interior {\n    \n    part SeatBelt {\n      \n      annotation isMandatory = true\n    }\n    \n    part SeatBelt {\n      \n      annotation isMandatory = true\n    }\n    \n    part Airbag {\n      \n      annotation isMandatory = false\n    }\n  }\n  \n  block Body {\n    \n    part Bumper {\n      \n      annotation isMandatory = true\n    }\n  }\n  \n  block WheelAssembly {\n    \n    part Wheel {\n      \n    }\n    \n    part Wheel {\n      \n    }\n    \n    part ABS {\n      \n      annotation isMandatory = false\n    }\n  }\n  \n  block KeylessEntry {\n    \n  }\n}\n\n\n\n\n",
    "package VehicleSafetyCompliance\n\n  Block Vehicle {\n    \n    Property NumberOfTires {\n      Type Integer\n    }\n    \n    Block Interior {\n      \n      Block SeatBelt {\n        Property IsMandatory {\n          Type Boolean\n          Value True\n        }\n      }\n      \n      Block SeatBelt2 {\n        Property IsMandatory {\n          Type Boolean\n          Value True\n        }\n      }\n      \n      Block DriversAirbag {\n        Property IsMandatory {\n          Type Boolean\n          Value False\n        }\n      }\n    }\n    \n    Block Body {\n      \n      Block Bumper {\n        Property IsMandatory {\n          Type Boolean\n          Value True\n        }\n      }\n      \n      Block KeylessEntry {\n        Property IsMandatory {\n          Type Boolean\n          Value False\n        }\n      }\n    }\n    \n    Block Chassis {\n      \n      Block ABS {\n        Property IsMandatory {\n          Type Boolean\n          Value False\n        }\n      }\n    }\n  }",
    "package RiskManagementSystem\n\n  Requirement \"Risk Identification and Description\" {\n    description = \"The system should be able to identify and describe various possible situations, the causes leading to their occurrence, and the potential failures that may result.\"\n  }\n\n  Requirement \"Cause Probability and Failure Severity Recording\" {\n    description = \"The system should be able to record the probability of each cause and the severity level of each failure.\"\n  }\n\n  Requirement \"Causal Relationship Analysis\" {\n    description = \"By establishing causal relationships, the system analyzes the sequence and impact mechanisms among different situations.\"\n  }\n\n  Requirement \"Comprehensive Risk Scenario Modeling\" {\n    description = \"The system should support comprehensive modeling of different risk scenarios, enabling users to evaluate and manage potential risks and failures in an all-round manner.\"\n  }\n\n  Requirement \"Risk Control and Decision-Making Basis\" {\n    description = \"This provides a basis for risk control and decision-making.\"\n  }\n\nendpackage",
    "package RiskManagementSystem\n\n  Block System {\n    \n    Property \"Metadata Compatibility\" : String = \"Standard modeling languages\"\n    \n    Block Scenario {\n      \n      Property \"Description\" : String\n      \n      Block Cause {\n        Property \"Description\" : String\n        Property \"Probability\" : Real\n      }\n      \n      Association Scenario -- Cause : \"Causes\"\n      \n      Block Failure {\n        Property \"Type\" : String\n        Property \"Severity\" : String\n      }\n      \n      Association Scenario -- Failure : \"Leads To\"\n      \n    }\n    \n    Block RiskScenario {\n      \n      Property \"Description\" : String\n      \n      Association RiskScenario -- Scenario : \"Contains\"\n      Association RiskScenario -- Cause : \"Includes\"\n      Association RiskScenario -- Failure : \"Impacted By\"\n      \n    }\n    \n    Association System -- RiskScenario : \"Manages\"\n    \n  }\n\nendpackage",
    "package EquipmentRiskAnalysis\n\n  Block Equipment {\n    Property batteryLevel : Real\n    Property batteryAge : Real\n    \n    Requirement batteryLevelMonitoring {\n      Description: \"Continuously monitor the battery level during operation.\"\n    }\n    \n    Requirement riskDetection {\n      Description: \"Detect situations where the probability of battery failure increases due to aging or other factors.\"\n    }\n    \n    Requirement riskIdentification {\n      Description: \"Identify the risk that 'battery aging' may lead to 'low battery level'.\"\n    }\n    \n    Requirement lowBatteryState {\n      Description: \"When the battery level falls below the set minimum threshold, the system should determine that the equipment is in a 'low battery' state.\"\n    }\n    \n    Requirement lowBatteryAnalysis {\n      Description: \"Further analyze the situation when the equipment is in a 'low battery' state.\"\n    }\n    \n    Requirement deviceShutdown {\n      Description: \"If the 'low battery' state persists for a prolonged period without recovery, the device may automatically shut down.\"\n    }\n    \n    Requirement failureSeverity {\n      Description: \"Assign an appropriate severity level for high-level failures",
    "package System\n\n  Block system {\n    \n    Property \"Structural Decomposition Capability\" {\n      Type : Boolean\n      Value : True\n    }\n    \n    Property \"Interface Definition\" {\n      Type : Boolean\n      Value : True\n    }\n    \n    Property \"IV&V Support\" {\n      Type : Boolean\n      Value : True\n    }\n    \n    Block Subsystem1\n    Block Subsystem2\n    \n    Interface systemInterface\n    \n    Requirement \"System Integrity\" {\n      Description : \"The system must be structurally sound and modular.\"\n    }\n    \n    Requirement \"Functional Coverage\" {\n      Description : \"The decomposition must cover all system functions.\"\n    }\n    \n    Requirement \"Performance Requirements\" {\n      Description : \"The system must meet all performance requirements.\"\n    }\n  }\nendpackage\n\n\n\n",
    "package AutomotiveSystem\n\n  Block RootComponent {\n    \n    Property name : String\n    Property safetyLevel : SafetyLevel\n    \n    Interface ComponentInterface {\n      \n    }\n    \n    Part SubSystem1\n    Part SubSystem2\n    \n  }\n  \n  Block SubSystem1 {\n    \n    Property name : String\n    Property safetyLevel : SafetyLevel\n    \n    Interface SubSystemInterface {\n      \n    }\n    \n    Part Component1\n    Part Component2\n    \n  }\n  \n  Block Component1 {\n    \n    Property name : String\n    Property safetyLevel : SafetyLevel\n    Property mandatory : Boolean\n    \n  }\n  \n  Block Component2 {\n    \n    Property name : String\n    Property safetyLevel : SafetyLevel\n    Property mandatory : Boolean\n    \n  }\n  \n  enum SafetyLevel {\n    Low\n    Medium\n    High\n  }\n  \n  \n  \n\n\n\n",
    "package AutomotiveDomain\n\n  // This system model aims to provide standardized definitions and annotations for fundamental concepts and elements in the automotive domain.\n  // In the model, “汽车” (automobile) is designated as a core component, with the alias “汽车 (Car)” defined to facilitate communication and usage in various application scenarios.\n  // The model also includes comprehensive explanatory comments to help developers and users better understand the meaning and application context of each element.\n  // Additionally, the model associates relevant physical quantities such as “扭矩 (Torque)” to ensure standardized and consistent expression of automotive characteristics.\n  // The overall design emphasizes clarity and extensibility, enabling convenient development, integration, and maintenance of subsequent automotive-related systems.\n\n  block Car {\n    alias \"汽车\"\n    \n    property Torque : Real\n  }\n\nendpackage",
    "package DocumentManagementPlatform\n\n  // Core Object\n  class Automobile {\n    \n  }\n\n  // Alias\n  alias Car for Automobile\n\n  // Physical Quantity Support\n  import PhysicalQuantitySystem\n\n  // Explanatory Document\n  class ExplanatoryDocument {\n    \n  }\n\n  // Association\n  Association Automobile::hasExplanatoryDocument ExplanatoryDocument\n\n  // Association\n  Association Automobile::hasPhysicalQuantity PhysicalQuantitySystem::PhysicalQuantity\n\nendpackage",
    "package AutomobileSystem\n\n  // Block Definitions\n  block Automobile {\n    \n    // Property\n    property TorqueValue : TorqueValue\n    \n    // Alias\n    alias Car\n  }\n\n  // Property Definition\n  property TorqueValue {\n    type TorqueValue\n  }\n\n  // Alias Definition\n  alias Torque : TorqueValue\n\n  // Block Definition\n  block TorqueValue {\n    \n    // Property\n    property Value : Real\n  }\n\nendpackage",
    "package VehicleSystem\n\n  Block Vehicle {\n    Property size : String\n    \n    Block Engine {\n      Property cylinderCount : Integer\n      \n      Constraint cylinderCount >= 4\n      Constraint cylinderCount <= 6\n      \n      Block Cylinder {\n        Property cylinderNumber : Integer\n      }\n    }\n    \n    Constraint size = \"Standard\" implies Engine.cylinderCount = 4 to 6\n    Constraint size = \"Small\" implies Engine.cylinderCount = 4\n    Constraint size = \"Large\" implies Engine.cylinderCount = 6\n  }\n\nendpackage",
    "block FuelManagementSystem {\n  \n  property FuelFlowRate : Real\n  property FuelTemperature : Real\n  \n  interface FuelInterface {\n    connector FuelLine\n  }\n  \n  part FuelTank {\n    interface FuelInterface\n  }\n  \n  part Engine {\n    interface FuelInterface\n  }\n  \n  requirement FuelFlowManagement {\n    text \"The system shall be capable of managing fuel flow, ensuring that fuel can be delivered from the fuel tank to the engine and supporting fuel return.\"\n  }\n  \n  requirement FuelTemperatureMonitoring {\n    text \"During operation, the system shall monitor and manage the temperature of the fuel.\"\n  }\n  \n  requirement StandardizedFuelInterfaces {\n    text \"The fuel tank and the engine shall be connected via standardized fuel interfaces to ensure the reliability and safety of fuel flow.\"\n  }\n}",
    "package VehicleStructuralArchitecture\n\n  Block Vehicle {\n    Property mass : Real\n    \n    Part frontAxleAssembly : AxleAssembly\n    Part rearAxleAssembly : AxleAssembly\n  }\n\n  Block AxleAssembly {\n    Part axle : Axle\n    Part wheel1 : Wheel\n    Part wheel2 : Wheel\n  }\n\n  Block Axle {\n    Property steeringAngle : Angle\n  }\n\n  Block Wheel {\n    Property name : String\n  }\n\nendpackage"
]