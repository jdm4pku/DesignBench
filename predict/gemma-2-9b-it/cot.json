[
    "package VehicleSystem\n\n  // Vehicle\n  class Vehicle {\n    \n    // Attributes\n    mass : Real;\n    status : VehicleStatus;\n    engine : Engine;\n    driver : Driver;\n    \n    // Operations\n    start() : void;\n    stop() : void;\n  }\n\n  // Vehicle Status\n  class VehicleStatus {\n    gearSetting : GearSetting;\n    acceleratorPosition : Real;\n  }\n\n  // Engine\n  class Engine {\n    // Attributes\n    // ...\n  }\n\n  // Driver\n  class Driver {\n    // Attributes\n    // ...\n  }\n\n  // GearSetting\n  enum GearSetting {\n    Park,\n    Reverse,\n    Neutral,\n    Drive\n  }\n\nendpackage\nc",
    "package VehicleModeling {\n\n  // Define the Vehicle class\n  class Vehicle {\n    // Attributes\n    String name;\n    // Operations\n    void start();\n    void stop();\n  }\n\n  // Define the ManuallyOperatedVehicle class\n  class ManuallyOperatedVehicle extends Vehicle {\n    // Attributes\n    Personnel driver;\n  }\n\n  // Define the PoweredVehicle class\n  class PoweredVehicle extends Vehicle {\n    // Attributes\n    Engine engine;\n  }\n\n  // Define the ManuallyOperatedPoweredVehicle class\n  class ManuallyOperatedPoweredVehicle extends ManuallyOperatedVehicle, PoweredVehicle {\n  }\n\n  // Define the Personnel class\n  class Personnel {\n    // Attributes\n    String name;\n  }\n\n  // Define the Engine class\n  class Engine {\n    // Attributes\n    String type;\n  }\n\n  // Define the relationship between Personnel and ManuallyOperatedVehicle\n  Vehicle.driver : Personnel;\n\n  // Define the relationship between PoweredVehicle and Engine\n  PoweredVehicle.engine : Engine;\n}\nc\n\n",
    "package VehicleStructure\n\n  // Vehicle Component Types\n  class VehicleComponent {\n    \n  }\n\n  class Engine extends VehicleComponent {\n    \n  }\n\n  class Transmission extends VehicleComponent {\n    \n  }\n\n  class Wheel extends VehicleComponent {\n    \n  }\n\n  // Vehicle Type\n  class Vehicle {\n    \n    // Compositional Relationship\n    composition Engine : 1\n    composition Transmission : 1\n    composition Wheel : 4\n  }\n\nendpackage\nc\n\n",
    "block Vehicle {\n  \n  property VehicleType : String {\n    values {\n      \"Small\"\n      \"Large\"\n    }\n  }\n  \n  part Engine {\n    \n    block SmallEngine {\n      property CylinderCount : Integer = 4\n    }\n    \n    block LargeEngine {\n      property CylinderCount : Integer = 6\n    }\n  }\n}\nc\n\n",
    "block \"TrafficSignalSystem\" {\n  Property \"TrafficSignal\" : TrafficSignalKind\n  \n  Block \"TrafficSignal\" {\n    Property \"Color\" : String\n    \n    Constraint \"GreenState\" {\n      self.Color = \"Green\"\n    }\n  }\n  \n  Block \"GreenTrafficSignal\" {\n    Property \"Color\" : String\n    \n    Constraint \"AlwaysGreen\" {\n      self.Color = \"Green\"\n    }\n  }\n}\nc\n\n",
    "block: InformationClassificationMechanism\n  {\n    Property: Code\n      {\n        Type: String\n      }\n    Property: Color\n      {\n        Type: String\n      }\n    Property: Grade\n      {\n        Type: Real\n      }\n  }\n\nBlock: Unclassified\n  {\n    extends InformationClassificationMechanism\n    Code = \"uncl\"\n    Color = \"Green\"\n  }\n\nBlock: Confidential\n  {\n    extends InformationClassificationMechanism\n    Code = \"conf\"\n    Color = \"Yellow\"\n  }\n\nBlock: Secret\n  {\n    extends InformationClassificationMechanism\n    Code = \"secr\"\n    Color = \"Red\"\n  }\n\nBlock: GradeA\n  {\n    extends InformationClassificationMechanism\n    Grade = 4.0\n  }\n\nBlock: GradeB\n  {\n    extends InformationClassificationMechanism\n    Grade = 3.0\n  }\n\nBlock: GradeC\n  {\n    extends InformationClassificationMechanism\n    Grade = 2.0\n  }\n\nBlock: GradeD\n  {\n    extends InformationClassificationMechanism\n    Grade = 1.0\n  }",
    "block Vehicle {\n  \n  property VehicleType : String {\n    values {\n      \"Small\"\n      \"Large\"\n    }\n  }\n  \n  part Engine\n}\n\nblock Engine {\n  \n  property CylinderCount : Integer\n  \n  part Cylinder\n}\n\nblock Cylinder {\n  \n}\n\nconstraint CylinderCount >= 4\nconstraint CylinderCount <= 6\nc",
    "block Vehicle {\n  \n  // Attributes\n  \n  quality attribute Reliability {\n    value \"High\"\n  }\n  \n  quality attribute Safety {\n    value \"Critical\"\n  }\n  \n  // Parts\n  \n  part FuelTank {\n    \n    // Attributes\n    \n    property FuelType : String\n    \n  }\n  \n  part Driver {\n    \n    // Attributes\n    \n    property Name : String\n    property License : String\n  }\n  \n  // Associations\n  \n  association FuelTankToVehicle {\n    from Vehicle\n    to FuelTank\n  }\n  \n  association DriverToVehicle {\n    from Vehicle\n    to Driver\n  }\n}\n\nblock Fuel {\n  property Type : String\n}\n\nblock Personnel {\n  property Name : String\n}\n\nassociation FuelToVehicle {\n  from Vehicle\n  to Fuel\n}\n\nassociation PersonnelToVehicle {\n  from Vehicle\n  to Personnel\n}\nc\n\n",
    "package WheelAssembly\n\n  // Block Definitions\n  block WheelAssembly {\n    \n    // Part Properties\n    property \"Material\" : String;\n    property \"Diameter\" : Real;\n    \n    // Part Connections\n    connector TireBead {\n      end TireBead1 : Tire::Bead;\n      end Rim1 : Rim::Rim;\n    }\n    connector TireBead2 {\n      end TireBead2 : Tire::Bead;\n      end Rim2 : Rim::Rim;\n    }\n    connector BoltConnection {\n      end Bolt : Bolt;\n      end ThreadedHole : Hub::ThreadedHole;\n    }\n    \n    // Part Composition\n    part WheelBearingUnit : WheelBearingUnit;\n    part Tire : Tire;\n    part Hub : Hub;\n    part Rim : Rim;\n    \n    // Part References\n    reference BoltMountingHole : Hub::BoltMountingHole;\n    reference ThreadedHole : Hub::ThreadedHole;\n  }\n\nendpackage\nc**Note:** This is a basic example and can be further extended with more detailed information and relationships.\n\n\n\n",
    "block FuelManagementSystem {\n  \n  part FuelTankAssembly {\n    \n    port FuelSupplyPort {\n      \n      flow FuelFlow\n    }\n    \n    port FuelReturnPort {\n      \n      flow FuelFlow\n    }\n    \n    property Temperature {\n      \n      type Real\n    }\n  }\n  \n  part Engine {\n    \n    port FuelIntakePort {\n      \n      flow FuelFlow\n    }\n    \n    property Temperature {\n      \n      type Real\n    }\n  }\n  \n  connector FuelSupplyConnection {\n    \n    source FuelTankAssembly.FuelSupplyPort\n    \n    target Engine.FuelIntakePort\n  }\n  \n  connector FuelReturnConnection {\n    \n    source Engine.FuelReturnPort\n    \n    target FuelTankAssembly.FuelReturnPort\n  }\n  \n  interface FuelManagementInterface {\n    \n    property FuelSupplyRate {\n      \n      type Real\n    }\n    \n    property FuelReturnRate {\n      \n      type Real\n    }\n    \n    property FuelTankTemperature {\n      \n      type Real\n    }\n    \n    ",
    "package VehicleConfiguration\n\n  // Vehicle\n  class Vehicle {\n    mass : Real = 1750.0;\n    frontAxle : Axle;\n    rearAxle : Axle;\n  }\n\n  // Axle\n  class Axle {\n    mass : Real;\n  }\n\n  // Tire\n  class Tire {\n    // ...\n  }\n\n  // Variant\n  class VehicleVariant {\n    name : String;\n    vehicle : Vehicle;\n  }\n\n  // Configuration\n  block Configuration {\n    vehicle : VehicleVariant;\n  }\n\n  // Constraint\n  constraint VehicleMass {\n    vehicle.mass >= 1750.0;\n  }\n\n  // Property\n  property VehicleDescription {\n    description : String;\n  }\n\nendpackage\nc",
    "package CouplingSystem\n\n  // Vehicle\n  class Vehicle {\n    \n    // Reference to the hitch component\n    reference hitch : Hitch\n\n  }\n\n  // Trailer\n  class Trailer {\n    \n    // Reference to the hitch component\n    reference hitch : Hitch\n\n  }\n\n  // Hitch\n  class Hitch {\n    \n    // Coupling ball\n    part ball : Ball\n\n  }\n\n  // Ball\n  class Ball {\n    \n  }\n\nend CouplingSystem\nc\n\n",
    "package VehiclePowerTransmissionSystem {\n\n  // ... (Define your SysML elements here)\n\n}\nc\n\n",
    "block b11 {\n  Property name = \"b11\";\n  Block c1 {\n    Property name = \"c1\";\n    Port pb {\n      Property name = \"pb\";\n      Type Signal;\n    }\n  }\n  Block c2 {\n    Property name = \"c2\";\n    Port pc {\n      Property name = \"pc\";\n      Type Signal;\n    }\n  }\n  Interface pe {\n    Property name = \"pe\";\n    Port p {\n      Property name = \"p\";\n      Type Signal;\n    }\n  }\n  Connector c1_pe {\n    Source = c1.pb;\n    Target = pe.p;\n  }\n}\nBlock b12 {\n  Property name = \"b12\";\n  Block c3 {\n    Property name = \"c3\";\n    Port pd {\n      Property name = \"pd\";\n      Type Signal;\n    }\n  }\n  Block c4 {\n    Property name = \"c4\";\n    Port pc {\n      Property name = \"pc\";\n      Type Signal;\n    }",
    "package PowertrainSystem {\n\n  // Functional Requirements\n  requirement FuelCommandInput {\n    description \"Users can input fuel commands to control the system's power output.\"\n  }\n  requirement EngineStartStopControl {\n    description \"The system supports engine start-stop control.\"\n  }\n  requirement PowerTransmissionAndDistribution {\n    description \"The system supports power transmission and distribution to the wheels.\"\n  }\n\n  // Non-Functional Requirements\n  requirement SafeOperation {\n    description \"The system ensures safe operation during engine shutdown.\"\n  }\n  requirement IntelligentOperation {\n    description \"The system operates intelligently based on user commands and engine status.\"\n  }\n\n  // Block Definitions\n  block Engine {\n    port FuelInput : Flow\n    port TorqueOutput : Flow\n  }\n  block Transmission {\n    port TorqueInput : Flow\n    port TorqueOutput : Flow\n  }\n  block Driveshaft {\n    port TorqueInput : Flow\n    port TorqueOutput : Flow\n  }\n  block Wheels {\n    port TorqueInput : Flow\n  }\n\n  // Relationships\n  Engine connects to Transmission via TorqueOutput\n  Transmission connects to Driveshaft via Torque",
    "package PowertrainControlSystem {\n\n  // Functional Requirements\n  requirement StartEngine : \"The system shall start the engine upon receiving a fuel control command.\"\n  requirement GenerateTorque : \"The system shall generate torque according to a predetermined order.\"\n  requirement AmplifyTorque : \"The system shall amplify the generated torque.\"\n  requirement TransmitTorque : \"The system shall transmit the amplified torque.\"\n  requirement DistributeTorque : \"The system shall distribute the transmitted torque to the drive wheels.\"\n  requirement HaltOperations : \"The system shall halt relevant operational processes upon detecting a stall signal.\"\n  requirement EngineStartShutdown : \"The system shall control engine start and shutdown.\"\n  requirement PowerTransmission : \"The system shall transmit power from fuel commands to actual wheel output torque.\"\n  requirement EfficientPowerDelivery : \"The system shall ensure efficient and coordinated power delivery.\"\n  requirement ReliablePowerResponse : \"The system shall provide users with a reliable power response.\"\n  requirement HandlingExperience : \"The system shall ensure a good handling experience.\"\n\n  // Non-Functional Requirements\n  requirement Reliability : \"The system shall be reliable.\"\n  requirement Performance : \"The system shall have high performance.\"\n\n}\nc",
    "block PowertrainManagementSystem {\n  \n  property FuelCommand : Real;\n  property EngineStartSignal : Boolean;\n  property EngineShutdownSignal : Boolean;\n  \n  behavior EngineTorqueGeneration {\n    input FuelCommand;\n    output EngineTorque : Real;\n  }\n  \n  behavior TorqueTransmission {\n    input EngineTorque : Real;\n    output TransmittedTorque : Real;\n  }\n  \n  behavior TorqueDistribution {\n    input TransmittedTorque : Real;\n    output WheelTorque : Real[4];\n  }\n  \n  \n}\nc",
    "block PowerConnectionSystem {\n  \n  required port VehiclePowerPort {\n    \n  }\n  \n  required port TrailerPowerPort {\n    \n  }\n  \n  connector HitchConnector {\n    \n    end VehicleEnd {\n      \n      connect VehiclePowerPort\n    }\n    \n    end TrailerEnd {\n      \n      connect TrailerPowerPort\n    }\n  }\n  \n  activity Connect {\n    \n    start\n    \n    action ConnectHitch {\n      \n      \n    }\n    \n    action ConnectPower {\n      \n      \n    }\n    \n    end\n  }\n  \n  activity Disconnect {\n    \n    start\n    \n    action DisconnectPower {\n      \n      \n    }\n    \n    action DisconnectHitch {\n      \n      \n    }\n    \n    end\n  }\n}\nc",
    "block: Vehicle\n  Property: chassis\n  Property: towBall\n  \nBlock: Trailer\n  Property: coupler\n  Property: trailerFrame\n\nBlock: ConnectionSystem\n  Property: connected\n  \nRelationship: Connects\n  From: Vehicle\n  To: Trailer\n  \nConstraint:\n  Connects implies connected = True\nc",
    "block Vehicle {\n  \n  block Chassis {\n    \n    part TowBallDevice\n  }\n  \n  block TrailerConnection {\n    \n    connector TowBallConnector\n  }\n}\n\nblock Trailer {\n  \n  block TrailerChassis {\n    \n    part CouplerMechanism\n  }\n}\n\nconnector CouplerConnector {\n  \n  end TowBallEnd\n  \n  end CouplerEnd\n}\n\nrelationship Connects {\n  \n  from Vehicle.TrailerConnection\n  \n  to Trailer.CouplerMechanism\n  \n  using CouplerConnector\n}\nc",
    "block FuelSystem {\n  \n  property FuelTankCapacity : Real;\n  property FuelPressure : Real;\n  property FuelTemperature : Real;\n  \n  part FuelTank {\n    \n  }\n  \n  part Engine {\n    \n  }\n  \n  connector FuelSupplyPort {\n    \n  }\n  \n  connector FuelReturnPort {\n    \n  }\n  \n  requirement FuelSystemReliability {\n    \n  }\n  \n  requirement FuelSystemStability {\n    \n  }\n  \n  \n}\nc",
    "block FuelDeliverySystem {\n  \n  property FuelCapacity {\n    type Real;\n    unit \"Liters\";\n  }\n  \n  property FuelLevel {\n    type Real;\n    unit \"Liters\";\n  }\n  \n  block StorageTank {\n    \n    property Capacity {\n      type Real;\n      unit \"Liters\";\n    }\n    \n    connector FuelOut {\n      type Flow;\n      direction Out;\n    }\n  }\n  \n  block FuelPump {\n    connector FuelIn {\n      type Flow;\n      direction In;\n    }\n    connector FuelOut {\n      type Flow;\n      direction Out;\n    }\n  }\n  \n  block VehicleFuelTank {\n    property Capacity {\n      type Real;\n      unit \"Liters\";\n    }\n    property FuelLevel {\n      type Real;\n      unit \"Liters\";\n    }\n    connector FuelIn {\n      type Flow;\n      direction In;\n    }\n  }\n  \n  connector StorageTankToFuelPump {\n    type Flow;\n    direction Out;\n    source Storage",
    "block AssemblyProcess {\n  \n  property \"AssemblyLine\" : String;\n  \n  part VehicleAssembly {\n    \n    part Gearbox {\n      \n      property \"GearboxType\" : String;\n    }\n    \n    part Engine {\n      \n      property \"EngineType\" : String;\n    }\n  }\n  \n  connector InstallGearbox {\n    source VehicleAssembly\n    target Gearbox\n  }\n  \n  connector InstallEngine {\n    source VehicleAssembly\n    target Engine\n  }\n  \n  activity FinalAssembly {\n    \n    activityStep InstallGearbox {\n      input VehicleAssembly\n      output VehicleAssemblyWithGearbox\n    }\n    \n    activityStep InstallEngine {\n      input VehicleAssemblyWithGearbox\n      output FullyAssembledVehicle\n    }\n  }\n}\nc\n\n",
    "package VehicleControlSystem\n\n  // State Machine for Vehicle Operation\n  statemachine VehicleOperationStateMachine {\n    state Off {\n      transition \"StartSignal\" to Starting when BrakePedalPressed;\n    }\n    state Starting {\n      transition \"VehicleOnSignal\" to Running;\n    }\n    state Running {\n      entry \"SelfChecks\";\n      entry \"PowerSupply\";\n      exit \"ParkingBrakeApply\";\n      transition \"OverTemperatureSignal\" to Degraded;\n    }\n    state Degraded {\n      transition \"RestoreToNormalSignal\" to Running;\n    }\n    state Maintenance {\n      transition \"RestoreToNormalSignal\" to Running;\n    }\n  }\n\n  // Block for Vehicle Controller\n  block VehicleController {\n    // ... (Define controller's operation state management)\n  }\n\nendpackage\nc\n\n",
    "package VehicleBehaviorModelingSystem {\n\n  // Vehicle\n  class Vehicle {\n    property fuel : Real;\n    property maintenanceInterval : Time;\n    property temperatureThreshold : Real;\n    \n    state Machine {\n      state Shutdown;\n      state Startup;\n      state Running;\n      state Degraded;\n      \n      transition startFromShutdown : Shutdown -> Startup when brakePedalPressed and startSignalReceived;\n      transition shutdownFromRunning : Running -> Shutdown;\n      transition degradedToRunning : Degraded -> Running when faultRecovered;\n    }\n    \n    behavior selfInspection() {\n      // Implementation of self-inspection logic\n    }\n    \n    behavior powerSupply() {\n      // Implementation of power supply logic\n    }\n    \n    behavior overheatWarning() {\n      // Implementation of overheat warning logic\n    }\n    \n    behavior degradedMode() {\n      // Implementation of degraded mode logic\n    }\n  }\n  \n  // Vehicle Controller\n  class VehicleController {\n    behavior processControlSignals() {\n      // Implementation of control signal processing logic\n    }\n    \n    behavior processStatusSignals() {\n      // Implementation of status signal",
    "package VehicleDynamicsSimulation\n\n  // Requirements\n  requirement \"Simulate vehicle dynamics\" {\n    description \"The system shall simulate the dynamic behavior of vehicles on roads.\"\n  }\n  requirement \"Define vehicle parameters\" {\n    description \"The system shall allow users to define vehicle parameters such as mass, position, velocity, and acceleration.\"\n  }\n  requirement \"Simulate road conditions\" {\n    description \"The system shall simulate road conditions such as slope and surface friction coefficient.\"\n  }\n  requirement \"Record snapshots\" {\n    description \"The system shall record snapshots of the vehicle state at multiple time points.\"\n  }\n\n  // Block\n  block VehicleDynamicsSimulator {\n    // Properties\n    property \"mass\" : Real\n    property \"position\" : Real\n    property \"velocity\" : Real\n    property \"acceleration\" : Real\n    property \"slope\" : Real\n    property \"frictionCoefficient\" : Real\n\n    // Parts\n    part Road\n    part Vehicle\n\n    // Connectors\n    connector Input {\n      type \"VehicleParameters\"\n    }\n    connector Output {\n      type \"SnapshotData\"\n    }\n  }\n\n  // Activity\n",
    "package ConfigurationManagementSystem\n\n  // Block Definitions\n  block Automobile {\n    // Ports\n    // ...\n\n    // Properties\n    // ...\n\n    // Connectors\n    connector SubsystemAConnector {\n      end SubsystemA\n    }\n    connector SubsystemBConnector {\n      end SubsystemB\n    }\n  }\n\n  block SubsystemA {\n    // Ports\n    // ...\n\n    // Properties\n    // ...\n\n    // Connectors\n    connector Component1Connector {\n      end Component1\n    }\n    connector Component2Connector {\n      end Component2\n    }\n    connector Component3Connector {\n      end Component3\n    }\n  }\n\n  block SubsystemB {\n    // Ports\n    // ...\n\n    // Properties\n    // ...\n\n    // Connectors\n    connector Component4Connector {\n      end Component4\n    }\n    connector Component5Connector {\n      end Component5\n    }\n    connector Component6Connector {\n      end Component6\n    }\n  }\n\n  block Component1 {\n    // Ports\n    // ...\n\n    // Properties\n    // ...\n  }\n\n  // ... (Define other components)\n\n",
    "package VehicleConfigurationSystem {\n\n  // Subsystem Definitions\n  class SubsystemA {\n    \n    // Ports\n    port p1 : Port;\n    \n    // Variants\n    variant Variant1 {\n      // ...\n    }\n    variant Variant2 {\n      // ...\n    }\n  }\n\n  class SubsystemB {\n    \n    // Ports\n    port p2 : Port;\n    \n    // Variants\n    variant Variant1 {\n      // ...\n    }\n    variant Variant2 {\n      // ...\n    }\n  }\n\n  // Component Definitions\n  class Part1 {\n    // ...\n  }\n\n  class Part2 {\n    // ...\n  }\n\n  class Part3 {\n    // ...\n    port p1 : Port;\n  }\n\n  class Part4 {\n    // ...\n  }\n\n  class Part5 {\n    // ...\n    port p2 : Port;\n    \n    // Variants\n    variant Variant1 {\n      // ...\n    }\n    variant Variant2 {\n      // ...\n    }\n  }\n\n  class Part6 {\n    // ...\n  }",
    "package VehicleConfigurationSystem {\n\n  // Functional Requirements\n  requirement \"HighPerformance\" {\n    description \"The system shall configure a 6-cylinder engine, automatic transmission, and wide-rim wheels when high performance is required.\"\n  }\n  requirement \"StandardPerformance\" {\n    description \"The system shall configure a 4-cylinder engine, manual transmission, and narrow-rim wheels for standard performance requirements.\"\n  }\n  requirement \"ConfigurationConstraints\" {\n    description \"The system shall enforce configuration constraints to ensure compatibility among components and meet vehicle performance requirements.\"\n  }\n  requirement \"ModelVariantSupport\" {\n    description \"The system shall support the selection of multiple vehicle model variants.\"\n  }\n\n  // Non-Functional Requirements\n  property \"Flexibility\" {\n    description \"The system shall provide flexible solutions for vehicle product line configuration.\"\n  }\n  property \"Customization\" {\n    description \"The system shall enable customized vehicles tailored to individual user needs.\"\n  }\n  property \"Responsiveness\" {\n    description \"The system shall enable enterprises to quickly respond to market demands.\"\n  }\n  property \"Scalability\" {\n    description \"The system shall allow",
    "package VehicleManagementSystem {\n\n  // Vehicle\n  class Vehicle {\n    \n    // Attributes\n    mass : Real;\n    fuelStatus : String;\n    \n    // Requirements\n    require MassLimit(mass <= 2500);\n    require FuelRequirement(fuelStatus = \"Full\" implies mass <= 2500);\n    \n    // Parts\n    engine : Engine;\n    transmission : Transmission;\n  }\n\n  // Engine\n  class Engine {\n    // Attributes\n    torque : Real;\n    \n    // Requirements\n    require PowerDelivery(torque > 0);\n  }\n\n  // Transmission\n  class Transmission {\n    // Attributes\n    \n    // Requirements\n    require ReliablePowerTransfer;\n  }\n\n  // Interfaces\n  interface DriveInterface {\n    // Connectors\n    connect(Engine, Transmission);\n  }\n\n}\nc**Note:** This is a simplified example and can be further extended to include more detailed requirements, properties, and relationships.\n\n\n\n",
    "block VehicleMassComplianceSystem {\n  \n  property MaximumPermissibleMass : Real = 2500;\n  \n  requirement MassCompliance {\n    text \"The actual mass of the tested vehicle shall not exceed the specified maximum permissible mass.\"\n  }\n  \n  activity TestVehicle {\n    input Vehicle;\n    input WeighingEquipment;\n    input TestOperator;\n    output MeasuredMass : Real;\n    \n    block WeighingProcess {\n      activity MeasureMass {\n        input Vehicle;\n        output MeasuredMass : Real;\n      }\n    }\n    \n    activity CompareMass {\n      input MeasuredMass : Real;\n      input MaximumPermissibleMass : Real;\n      output ComplianceStatus : Boolean;\n    }\n  }\n}\nc\n\n",
    "block SpigotBank {\n  port Spigot {\n    type = FlowPort\n    direction = Out\n    \n    property hotWaterFlowRate : Real\n    property coldWaterFlowRate : Real\n  }\n}\n\nblock Faucet {\n  port FaucetInlet {\n    type = FlowPort\n    direction = In\n    property hotWaterFlowRate : Real\n    property coldWaterFlowRate : Real\n  }\n}\n\nblock FaucetInlet {\n  port Inlet {\n    type = FlowPort\n    direction = In\n    property hotWaterFlowRate : Real\n    property coldWaterFlowRate : Real\n  }\n}\n\nrelationship Connects {\n  from = SpigotBank\n  to = Faucet\n}\n\nrelationship Connects {\n  from = Faucet\n  to = FaucetInlet\n}\n\nconstraint ReliableWaterDelivery {\n  from = SpigotBank\n  to = Faucet\n  description = \"The system must reliably deliver hot and cold water from the respective outlets of the main supply pipe to the corresponding inlets of all downstream faucets, ensuring simultaneous supply to multiple water usage points.\"\n}\n\nconstraint CorrectConnection {\n  from",
    "package VehicleQualityAnalysis {\n\n  // ... (Your SysML code here)\n\n}\nc\n",
    "block EngineConfigurationSystem {\n  \n  property power : Real;\n  property mass : Real;\n  property efficiency : Real;\n  property reliability : Real;\n  property cost : Real;\n  \n  block EngineStructure {\n    \n    property cylinderCount : Integer;\n    \n    part Cylinder {\n      \n    }\n    \n    part Piston {\n      \n    }\n    \n    part ConnectingRod {\n      \n    }\n    \n    part Crankshaft {\n      \n    }\n  }\n  \n  \n  \n  \n}\nc",
    "block FuelEconomySystem {\n  \n  Property RangeUrban {\n    Value = \"25 miles\"\n    Unit = \"miles\"\n    Description = \"Minimum range per gallon under urban driving conditions\"\n  }\n  Property RangeHighway {\n    Value = \"30 miles\"\n    Unit = \"miles\"\n    Description = \"Minimum range per gallon under highway driving conditions\"\n  }\n  Property FuelEconomyUnit {\n    Value = \"miles per gallon\"\n    Description = \"Unit for measuring fuel economy\"\n  }\n  Property Load {\n    Value = \"1000 pounds\"\n    Description = \"Additional load assumed during fuel economy tests\"\n  }\n  \n  Requirement FuelEconomyRequirement {\n    Description = \"The measured fuel economy must meet the minimum requirements stated above.\"\n    \n    Constraint {\n      RangeUrban >= 25\n      RangeHighway >= 30\n    }\n  }\n  \n  \n}\nc",
    "package VehicleDynamicsSimulator\n\n  // Requirements\n  requirement \"Simulate vehicle longitudinal motion\" {\n    description \"The system shall simulate the longitudinal motion of a vehicle.\"\n  }\n  requirement \"Analyze vehicle dynamic characteristics\" {\n    description \"The system shall analyze the dynamic characteristics of the vehicle.\"\n  }\n\n  // Block Definitions\n  block Vehicle {\n    port powerInput : PowerOutput\n    port positionOutput : Position\n    port velocityOutput : Velocity\n    port accelerationOutput : Acceleration\n  }\n\n  // Activity\n  activity VehicleDynamicsSimulation {\n    input powerInput : PowerOutput\n    input mass : Mass\n    input initialPosition : Position\n    input initialVelocity : Velocity\n    input timeStep : Time\n    output accelerationOutput : Acceleration\n    output velocityOutput : Velocity\n    output positionOutput : Position\n  }\n\n  // Constraint\n  constraint \"Acceleration = (Power - Drag) / Mass\" {\n    description \"The acceleration of the vehicle is calculated based on the power output, drag force, and mass.\"\n  }\n\nendpackage\nc\n\n",
    "package VehicleSystem\n\n  class Vehicle {\n    mass : Real = 2500;\n  }\n\n  class AxleAssembly {\n    mass : Real;\n  }\n\n  class FrontAxleAssembly : AxleAssembly {\n    frontWheels : Bag[Wheel];\n    frontAxle : FrontAxle;\n  }\n\n  class RearAxleAssembly : AxleAssembly {\n    rearWheels : Bag[Wheel];\n    rearAxle : RearAxle;\n  }\n\n  class FrontAxle {\n    mass : Real;\n    steeringAngle : Angle;\n  }\n\n  class RearAxle {\n    mass : Real;\n  }\n\n  Vehicle hasFrontAxleAssembly : FrontAxleAssembly;\n  Vehicle hasRearAxleAssembly : RearAxleAssembly;\n\nend VehicleSystem\nc",
    "package VehicleSafetySecuritySystem {\n\n  // Requirements\n  Requirement \"Safety and Security Configuration Understanding\" {\n    description \"Users can intuitively understand the safety and security configurations of the entire vehicle and its constituent parts.\"\n  }\n  Requirement \"Component Filtering and Organization\" {\n    description \"The system is capable of filtering and organizing all vehicle-related components based on safety or security features.\"\n  }\n  Requirement \"Visualization of Safety Configurations\" {\n    description \"The system can visualize safety configurations in forms such as tree structures or tables.\"\n  }\n\n  // Features\n  Feature \"Seat Belts\" {\n    description \"Mandatory safety feature.\"\n    stereotype \"MandatorySafetyFeature\"\n  }\n  Feature \"Airbags\" {\n    description \"Optional safety feature.\"\n    stereotype \"OptionalSafetyFeature\"\n  }\n  Feature \"Anti-lock Braking Systems\" {\n    description \"Optional safety feature.\"\n    stereotype \"OptionalSafetyFeature\"\n  }\n  Feature \"Bumpers\" {\n    description \"Mandatory safety feature.\"\n    stereotype \"MandatorySafetyFeature\"\n  }\n  Feature \"Alarm Devices\" {\n    description \"Security feature.\"\n    stereotype \"Security",
    "block: System\n  {\n    Property: x\n    Property: y\n    Property: z\n    \n    Block: ApplicationLayer\n      {\n        Property: application_functionality\n        \n        Interface: ServiceInterface\n          {\n            Operation: service_operation\n          }\n      }\n    \n    Block: ServiceLayer\n      {\n        Property: service_functionality\n        \n        Interface: DataInterface\n          {\n            Operation: data_operation\n          }\n      }\n    \n    Block: DataLayer\n      {\n        Property: data_functionality\n      }\n  }\nc**Note:** This is a basic example. You can add more details and complexity to the model based on the specific requirements.\n\n\n\n",
    "block TorqueGenerationSystem {\n  \n  property Torque {\n    type Real;\n    unit \"Newton-meter\";\n    constraint Torque > 0;\n  }\n  \n  block Powertrain {\n    \n    connector TorqueOutput {\n      type Torque;\n    }\n  }\n  \n  block Engine {\n    \n    connector TorqueInput {\n      type Torque;\n    }\n  }\n  \n  part Powertrain\n  part Engine\n  \n  requirement TorqueGeneration {\n    text \"The system should include relevant components capable of generating torque, and it is required that the torque produced during operation must be greater than zero newton-meters to ensure driving capability.\"\n  }\n  \n  usecase TorqueGenerationLogic {\n    \n    action GenerateTorque {\n      text \"The logic layer's torque generator function should be effectively allocated and mapped to the physical layer of the powertrain (including actual components such as the engine), thereby ensuring the actual generation and transmission of torque to meet the overall vehicle power output requirements.\"\n    }\n  }\n}\nc\n\n",
    "block System {\n  \n  property PowerTransmission {\n    type : Boolean\n  }\n  \n  property PowerOutput {\n    type : Boolean\n  }\n  \n  property TorqueGeneration {\n    type : Boolean\n  }\n  \n  part TorqueGenerator {\n    \n    function TorqueGeneration {\n      \n    }\n    \n  }\n  \n  part Powertrain {\n    \n    part Engine {\n      \n      function TorqueGeneration {\n        \n      }\n      \n    }\n    \n  }\n  \n  \n}\nc",
    "block: VehicleSafetyAndAntitheftFunctionCatalogue\n  Description: \"This Vehicle Safety and Anti-theft Function Catalogue is intended to standardize the basic configuration requirements for key vehicle components in terms of safety and anti-theft performance.\"\n  \n  Property: mandatorySafetyComponents\n    Type: Boolean\n    Value: True\n  \n  Property: securityComponents\n    Type: Boolean\n    Value: True\n  \n  Property: safetyComponents\n    Type: Boolean\n    Value: True\n  \n  Property: antiTheftComponents\n    Type: Boolean\n    Value: True\n  \n  Property: safetyAndAntiTheftComponents\n    Type: Boolean\n    Value: True\n  \n  Block: SafetyComponent\n    Description: \"Components that affect safety\"\n    \n  Block: AntiTheftComponent\n    Description: \"Components that affect anti-theft\"\n    \n  Block: SafetyAndAntiTheftComponent\n    Description: \"Components that affect both safety and anti-theft\"\n    \n  Block: MandatorySafetyComponent\n    Description: \"Components that are mandatory for safety\"\n    \n  \nc",
    "block FuelSystem {\n  \n  property FuelTemperature : Real;\n  \n  part FuelTankAssembly {\n    part FuelPump {\n      provides FuelOutPort : FlowPort;\n      provides ReturnLinePort : FlowPort;\n    }\n    part FuelTank {\n      provides FuelInPort : FlowPort;\n    }\n  }\n  \n  connector FuelFlow {\n    source FuelPump.FuelOutPort;\n    target FuelConsumerUnit;\n  }\n  connector ReturnFlow {\n    source FuelConsumerUnit;\n    target FuelTankAssembly.ReturnLinePort;\n  }\n  \n  connector DataFlow {\n    source FuelTankAssembly.FuelPump;\n    target VehicleControlUnit;\n    data FuelTemperature;\n  }\n}\nc**Note:** This is a simplified example and may not capture all the nuances of the input requirement. \n\n\n",
    "block: Vehicle\n  {\n    Property: \"Safety Features\"\n    {\n      Property: \"Seat Belts\"\n      {\n        Value: \"2\"\n        Type: \"Integer\"\n      }\n      Property: \"Airbag\"\n      {\n        Value: \"Optional\"\n        Type: \"String\"\n      }\n      Property: \"Bumper\"\n      {\n        Value: \"Required\"\n        Type: \"String\"\n      }\n      Property: \"Anti-lock Braking Systems\"\n      {\n        Value: \"2 sets (Optional)\"\n        Type: \"String\"\n      }\n    }\n    Property: \"Security Features\"\n    {\n      Property: \"Anti-theft Alarm\"\n      {\n        Value: \"Required\"\n        Type: \"String\"\n      }\n      Property: \"Keyless Entry System\"\n      {\n        Value: \"Required\"\n        Type: \"String\"\n      }\n    }\n    Property: \"Identification and Classification\"\n    {\n      Value: \"Compliant with regulations regarding critical safety and security functions\"\n      Type: \"String\"\n    }",
    "package VehicleSafetyAndSecurity\n\n  // Functional Requirements\n  requirement Safety_Protection <<safety>> \"Enhance the protection of the driver and passengers during driving.\"\n  requirement AntiTheft <<security>> \"Prevent unauthorized access and theft of the vehicle.\"\n  requirement ConvenientAccess <<security>> \"Provide convenient access for authorized users.\"\n\n  // Non-Functional Requirements\n  requirement Reliability <<quality>> \"The system shall operate reliably under all expected conditions.\"\n  requirement Durability <<quality>> \"The system shall withstand the rigors of normal use and environmental conditions.\"\n\n  // Parts\n  part Interior {\n    part AlarmSystem\n    part SeatBelts\n    part FrontRowSeats\n    part DriversAirbag\n  }\n  part BodyAssembly {\n    part VehicleBody\n    part Bumper\n    part KeylessEntrySystem\n  }\n\n  // Relationships\n  Interior realizes Safety_Protection\n  BodyAssembly realizes Safety_Protection\n  KeylessEntrySystem realizes ConvenientAccess\n  KeylessEntrySystem realizes AntiTheft\n  \nendpackage\nc",
    "block: System\n  Classifier: SecurityClassification\n    Value: Unclassified\n  Property: SecurityClassificationLevel\n    Value: Unclassified\n  \nBlock: Component\n  Classifier: SecurityClassification\n    Value: Confidential\n  Property: SecurityClassificationAttribute\n    Value: \"Confidential\"\nc",
    "package ECU_Communication_Control\n\n  // Block Definitions\n  block VehicleControlUnit {\n    \n    // Ports\n    port BusIF : BusInterface\n  }\n\n  block EngineControlUnit {\n    \n    // Ports\n    port BusIF : BusInterface\n  }\n\n  block BusInterface {\n    \n    // Ports\n    port CAN : CANBus\n  }\n\n  // Relationship Definitions\n  connector VehicleControlUnit_to_CAN {\n    source = VehicleControlUnit.BusIF\n    target = BusInterface.CAN\n  }\n\n  connector EngineControlUnit_to_CAN {\n    source = EngineControlUnit.BusIF\n    target = BusInterface.CAN\n  }\n\n  // Other Definitions\n  interface CANBus {\n    \n    // Properties\n    property DataRate : Real\n  }\n\n  // Constraints\n  constraint CANBus_DataRate {\n    self.DataRate >= 1000000\n  }\n\nendpackage\nc",
    "Requirement \"Battery Status Detection\" {\n  description \"The system shall automatically detect the battery status.\"\n}\n\nRequirement \"Battery Status Alert\" {\n  description \"The system shall promptly alert the user when the battery is depleted or cannot be charged.\"\n}\n\nRequirement \"Blood Glucose Measurement Function\" {\n  description \"The system shall perform blood glucose measurement accurately.\"\n}\n\nRequirement \"Alarm and Emergency Response\" {\n  description \"The system shall have appropriate alarm and emergency response mechanisms in case of abnormalities in the blood glucose measurement function.\"\n}\n\nRequirement \"Risk Management\" {\n  description \"Management measures shall be established for key risk scenarios to ensure patient safety.\"\n}\nc\n\n",
    "CONSTANTS\n\n  -- Mathematical Constants\n  e : Real = 2.718281828459045\n  pi : Real = 3.141592653589793\n\n  -- Physical Constants\n  speedOfLight : Real = 299792458.0 \"m/s\"\n  fineStructureConstant : Real = 1.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "block: Tire\n  {\n    Property: manufacturer\n      Type: String\n    Property: rimDiameter\n      Type: Real\n    Property: width\n      Type: Integer\n  }\nc",
    "package AutomotiveComponentModel {\n\n  // Vehicle\n  class Vehicle {\n    property mass : Real = 1200 kg;\n    property length : Length = 4.82 m;\n  }\n\n  // Wheel\n  class Wheel {\n    property hubDiameter : Diameter = 18 in;\n    property width : Width = 245 mm;\n    \n    // Association with Tire\n    part tire : Tire;\n  }\n\n  // Tire\n  class Tire {\n    // Tire properties\n  }\n\n  // Association between Vehicle and Wheel\n  Vehicle hasWheels : Wheel;\n}\nc",
    "package PowertrainConfiguration {\n\n  // Define the types of engines\n  enum EngineType {\n    FourCylinder\n    SixCylinder\n  }\n\n  // Define the types of transmissions\n  enum TransmissionType {\n    Manual\n    Automatic\n  }\n\n  // Define the vehicle model\n  class Vehicle {\n    // Engine type\n    EngineType engine : EngineType\n    // Transmission type\n    TransmissionType transmission : TransmissionType\n  }\n\n  // Constraint: High-performance vehicles must have a six-cylinder engine\n  constraint HighPerformanceEngine {\n    Vehicle.engine = SixCylinder\n  }\n\n  // Constraint: Only two valid powertrain combinations are allowed\n  constraint ValidPowertrain {\n    (Vehicle.engine = FourCylinder and Vehicle.transmission = Manual) or\n    (Vehicle.engine = SixCylinder and Vehicle.transmission = Automatic)\n  }\n}\nc\n\n",
    "package AutomotiveComponents\n\n  // Vehicle properties\n  Vehicle vehicle {\n    mass = 1200 kg\n    length = 4.82 m\n  }\n\n  // Wheel assembly properties\n  WheelAssembly wheelAssembly {\n    tire : Tire\n    brakeDisc : BrakeDisc\n  }\n\n  // Tire properties\n  Tire tire {\n    rim : Rim\n    width = 245 mm\n    height = 45 mm\n    treadDepth = 6.0 mm\n    minTreadDepth = 3.5 mm\n  }\n\n  // Rim properties\n  Rim rim {\n    diameter = 18 in\n  }\n\n  // Brake disc properties\n  BrakeDisc brakeDisc {\n    radius = 95 mm\n  }\n\n  // Constraints\n  constraint WheelAssemblyConstraint {\n    self.brakeDisc.diameter < self.tire.outerDiameter\n  }\n\nendpackage\nc\n\n",
    "block FuelSystem {\n  \n  part FuelTankAssembly {\n    \n    connector FuelOutlet {\n      \n      port FuelDelivery {\n        \n      }\n      \n      port FuelReturn {\n        \n      }\n    }\n  }\n  \n  part FuelPump {\n    \n    connector FuelInlet {\n      \n    }\n    \n    connector FuelOutlet {\n      \n    }\n  }\n  \n  connector FuelTemperatureSensor {\n    \n  }\n  \n}\nc",
    "block: PhysicalQuantitySystem\n  Property: basePhysicalQuantities\n    Type: Sequence\n    Value:\n      - Length\n      - Mass\n      - Time\n      - ElectricCurrent\n      - Temperature\n      - AmountOfSubstance\n      - LuminousIntensity\n  Property: importExtension\n    Type: Boolean\n    Value: True\n  Property: accuracy\n    Type: Real\n    Value: 0.01\n  Property: consistency\n    Type: Boolean\n    Value: True\nc",
    "package UnitSystemLibrary {\n\n  // Define unit types\n  unit ISQ_Meter {\n    baseUnit = Meter\n  }\n\n  unit USCustomaryUnits_Foot {\n    baseUnit = Foot\n  }\n\n  // Define unit conversions\n  conversion ISQ_Meter_to_USCustomaryUnits_Foot {\n    factor = 3.28084\n  }\n\n  // Define unit relationships\n  relationship ISQ_Meter_is_a_Length {\n    source = ISQ_Meter\n    target = Length\n  }\n\n  // Define unit properties\n  property ISQ_Meter_Accuracy {\n    type = Real\n    value = 0.001\n  }\n\n}\nc**Note:** This is a simplified example and can be further extended to include more complex unit types, conversions, relationships, and properties.\n\n\n\n",
    "block HeadlampTiltAdjustmentVerificationSystem {\n  \n  property BeamTiltAngle : Real = 0.0;\n  \n  constraint BeamTiltAngleConstraint {\n    BeamTiltAngle >= 50.0 and BeamTiltAngle <= 80.0\n  }\n  \n}\n```\n",
    "block: System\n  Property: dataTypes\n    Type: DataType\n    Value: {UnsignedInteger, UnsignedFloat, DateTime, String, Boolean}\n  Property: statusColors\n    Type: Association\n    Value: {\n      StatusLevel: {\n        Name: \"Critical\"\n        Color: \"Red\"\n      },\n      StatusLevel: {\n        Name: \"Warning\"\n        Color: \"Yellow\"\n      },\n      StatusLevel: {\n        Name: \"Normal\"\n        Color: \"Green\"\n      }\n    }\n  Property: physicalDimensions\n    Type: Property\n    Value: {\n      Diameter: {\n        Type: Real\n        Unit: \"mm\"\n        Default: 60\n        Options: {\n          Small: 60,\n          Medium: 70,\n          Large: 80\n        }\n      }\n    }\nc\n\n",
    "block: System\n  Property: spareParts : Bag<SparePart>\n  Property: personnel : OrderedSet<Person>\n  Property: integers : List<Integer>\n  Property: strings : Set<String>\n  Property: realNumbers : Array[4, Real]\n  Property: nestedCollections : List<Set<Person>>\nc",
    "package TireInformation\n\n  class Tire {\n    \n    Property manufacturer : String\n    Property rimDiameter : Real\n    Property tireWidth : Real\n    Property installationPosition : Point3D\n  }\n\nendpackage\n```\n",
    "block: SpacecraftTrajectorySampler\n  \n  Property: liftoffTime : Time\n  Property: samplingInterval : Time\n  Property: numSamples : Integer\n  \n  Requirement:\n    - The system shall sample the spacecraft trajectory during the ascent phase.\n    - The system shall use the mission liftoff time as the reference time zero, measured in seconds.\n    - The system shall be able to take the UTC liftoff time of the mission as the reference time.\n    - The system shall collect key parameters including the position and velocity of the spacecraft at different time points.\n    - Each set of sampled data shall associate a specific time point with the corresponding position and velocity data.\n    - The three-dimensional position and velocity shall be described in a Cartesian coordinate system.\n    - The units of position shall be meters.\n    - The units of velocity shall be meters per second.\n    - The system shall record multiple sampling points during the ascent phase.\n    - Each sampling point shall contain explicit information on time, position, and velocity.\n    - The system shall provide accurate data support for subsequent trajectory analysis and performance evaluation.\nc\n",
    "package AlloyPropertyManagementSystem {\n\n  // Define a class for materials\n  class Material {\n    // Properties of a material\n    AtomicMass : Real;\n    \n    // ... other properties\n  }\n\n  // Define a class for alloys\n  class Alloy {\n    // Properties of an alloy\n    TensileStrength : Real;\n    \n    // ... other properties\n  }\n\n  // Define a relationship between materials and alloys\n  MaterialComposition : Material * Alloy;\n\n  // Define a class for metals\n  class Metal : Material {\n    // Properties specific to metals\n    \n    // ...\n  }\n\n  // Define a class for common metals\n  class CommonMetal : Metal {\n    // Properties specific to common metals\n    \n    // ...\n  }\n\n  // Define a class for common alloys\n  class CommonAlloy : Alloy {\n    // Properties specific to common alloys\n    \n    // ...\n  }\n\n}\nc\n\n",
    "package EngineeringMaterialsDatabase\n\n  // Material\n  class Material {\n    \n    // Properties\n    Property atomicMass : Real;\n    Property compositionalInformation : String;\n    Property mechanicalPropertyIndicators : String;\n  }\n\n  // Metal\n  class Metal : Material {\n    \n    // Properties\n    Property massFraction : Real[1..*]\n  }\n\n  // Alloy\n  class Alloy : Metal {\n    \n    // Properties\n    Property tensileStrength : Real;\n  }\n\n  // Example: High-strength steel Steel_980\n  instance Steel_980 : Alloy {\n    \n    // Properties\n    tensileStrength = 980;\n    massFraction[1] = 0.9;\n    massFraction[2] = 0.01;\n    massFraction[3] = 0.09;\n  }\n\nend EngineeringMaterialsDatabase\nc\n\n",
    "package PubSubSystem {\n\n  // ...\n\n}\nc\n",
    "block FuelSystem {\n  \n  property FuelTemperature : Real;\n  \n  part FuelTankAssembly : FuelTankAssembly;\n  part Engine : Engine;\n  \n  connector FuelLineSupply : FuelLine;\n  connector FuelLineReturn : FuelLine;\n  \n  flow FuelFlow : Flow;\n  \n  action FuelSupply {\n    source = FuelTankAssembly;\n    target = Engine;\n    flow = FuelFlow;\n  }\n  \n  action FuelReturn {\n    source = Engine;\n    target = FuelTankAssembly;\n    flow = FuelFlow;\n  }\n  \n  action FuelTemperatureMonitoring {\n    source = FuelTankAssembly;\n    target = System;\n    data = FuelTemperature;\n  }\n}\nc",
    "package PublishSubscribeSystem {\n\n  // Define the actors\n  Actor Producer {\n    \n  }\n  Actor Server {\n    \n  }\n  Actor Consumer {\n    \n  }\n\n  // Define the interactions\n  Interaction PublishMessage {\n    from Producer\n    to Server\n    message TopicMessage\n  }\n  Interaction SubscribeTopic {\n    from Consumer\n    to Server\n    message SubscriptionRequest\n  }\n  Interaction DeliverMessage {\n    from Server\n    to Consumer\n    message TopicMessage\n  }\n\n  // Define the data types\n  DataType TopicMessage {\n    \n  }\n  DataType SubscriptionRequest {\n    \n  }\n}\nc\n\n",
    "block System {\n  \n  property FuelLevel : Real;\n  \n  requirement SafetyRequirement {\n    text \"All individuals exit the vehicle safely.\"\n  }\n  \n  requirement EfficiencyRequirement {\n    text \"This system focuses on facilitating user boarding, timely refueling during the journey, and ensuring the smooth boarding and alighting of passengers and the driver, thereby guaranteeing an efficient and safe travel experience.\"\n  }\n  \n  usecase UserBoarding {\n    actor User;\n    \n    \n  }\n  \n  usecase Refueling {\n    actor Driver;\n    \n    \n  }\n  \n  usecase PassengerAlighting {\n    actor User;\n    \n    \n  }\n  \n  \n}\nc",
    "block FuelSupplyReturnSystem {\n  \n  property FuelTemperature : Real;\n  \n  part FuelTankAssembly {\n    \n    port FuelOutlet : FlowPort {\n      \n      connector FuelLine {\n        \n        end FuelOutletEnd : FlowPortEnd {\n          \n          direction : Out;\n        }\n      }\n    }\n  }\n  \n  part EngineUnit {\n    \n    port FuelInlet : FlowPort {\n      \n      connector FuelLine {\n        \n        end FuelInletEnd : FlowPortEnd {\n          \n          direction : In;\n        }\n      }\n    }\n    \n    port FuelReturn : FlowPort {\n      \n      connector FuelLine {\n        \n        end FuelReturnEnd : FlowPortEnd {\n          \n          direction : In;\n        }\n      }\n    }\n  }\n  \n  constraint FuelSupplyReliability {\n    \n    \"The vehicle engine can continuously and reliably obtain the required fuel.\"\n  }\n  \n  constraint FuelReturnProcessing {\n    \n    \"Supporting fuel return processing, thereby improving the intelligence and safety of the overall vehicle fuel management.\"\n  ",
    "block FuelSystem {\n  \n  description \"Vehicle fuel system management system\"\n  \n  property FuelFlowRate : Real\n  property FuelTemperature : Real\n  \n  part FuelTankAssembly\n  part Engine\n  \n  connector FuelSupplyPort {\n    end FuelSupplyPortEnd\n    \n    property FuelTemperature : Real\n  }\n  \n  connector FuelReturnPort {\n    end FuelReturnPortEnd\n    \n    property FuelTemperature : Real\n  }\n  \n  requirement FuelEfficiency {\n    description \"Achieve efficient supply and return of fuel\"\n  }\n  \n  requirement Reliability {\n    description \"Ensure reliable fuel delivery during normal vehicle operation\"\n  }\n  \n  requirement Safety {\n    description \"Ensure safe fuel handling\"\n  }\n  \n  requirement Monitoring {\n    description \"Track fuel flow and temperature information\"\n  }\n}\nc",
    "block: System\n  Property: name \"Photo Capture System\"\n  Property: description \"Enables users to obtain photos from real-world scenes.\"\n\n  Block: Focusing\n    Property: name \"Focusing Mechanism\"\n    Property: description \"Automatically focuses on the selected scene.\"\n\n    Action: focus\n      Input: scene \"Selected scene\"\n      Output: focusedImage \"Intermediate image after focusing\"\n\n  Block: Capture\n    Property: name \"Image Capture Mechanism\"\n    Property: description \"Captures the final photo based on the focused image.\"\n\n    Action: capture\n      Input: focusedImage \"Intermediate image after focusing\"\n      Output: photo \"Final captured photo\"\n\n  Action: capturePhoto\n    Input: scene \"Selected scene\"\n    Output: photo \"Final captured photo\"\n    Sequence:\n      Focusing.focus\n      Capture.capture\nc",
    "block System {\n  \n  property \"User Interface\" : String;\n  property \"Scene Selection\" : String;\n  \n  block Focusing {\n    \n    activity \"Focus\" {\n      input \"Scene\" : String;\n      output \"FocusedImage\" : String;\n    }\n  }\n  \n  block Shooting {\n    \n    activity \"Shoot\" {\n      input \"FocusedImage\" : String;\n      output \"FinalImage\" : String;\n    }\n  }\n  \n  sequence \"Workflow\" {\n    start \"Start\";\n    activity \"Focusing.Focus\";\n    activity \"Shooting.Shoot\";\n    end \"End\";\n  }\n}\nc\n\n",
    "block: System\n  {\n    Property: name \"Photography Workflow System\"\n    Property: description \"A system designed to support photography workflows, allowing users to frame and capture a scene.\"\n    \n    Block: FocusingProcess\n      {\n        Property: name \"Focusing Process\"\n        Property: description \"Performs focusing on the selected scene to generate an image.\"\n        \n        Action: focus\n          {\n            Input: scene\n            Output: focusedImage\n          }\n      }\n    \n    Block: ShootingProcess\n      {\n        Property: name \"Shooting Process\"\n        Property: description \"Carries out the shooting process to produce a final photograph.\"\n        \n        Action: shoot\n          {\n            Input: focusedImage\n            Output: photograph\n          }\n      }\n    \n    Flow: workflow\n      {\n        Source: FocusingProcess\n        Target: ShootingProcess\n        Data: focusedImage\n      }\n  }\nc",
    "block System {\n  \n  property \"Description\" : \"This system is designed to automate the photography process.\";\n  \n  block FocusProcessing {\n    \n    property \"Description\" : \"Perform focus processing on the scene to generate an image suitable for shooting.\";\n    \n    input Scene;\n    output FocusedImage;\n  }\n  \n  block Shooting {\n    \n    property \"Description\" : \"Convert the image into a photograph through a shooting operation.\";\n    \n    input FocusedImage;\n    output Photograph;\n  }\n  \n  Flow focusProcessingToShooting from FocusProcessing.FocusedImage to Shooting.FocusedImage;\n}\nc",
    "block PhotographyWorkflow {\n  \n  require \"User inputs desired scene\"\n  require \"System automatically focuses scene\"\n  require \"System automatically shoots image\"\n  require \"System outputs photograph\"\n  \n  \n  activity Focus {\n    input Scene\n    output Image\n  }\n  \n  activity Shoot {\n    input Image\n    output Picture\n  }\n  \n}\nc\n\n",
    "block: PhotographySystem\n  {\n    Property: sceneSelection\n    Property: focusStatus\n    Property: image\n    \n    Requirement:\n      \"The system shall allow users to select a scene.\"\n      \"The system shall focus the selected scene to ensure optimal image sharpness.\"\n      \"The system shall generate a final image upon successful focus.\"\n      \"The system shall automatically perform focusing and shooting operations in sequence.\"\n      \"The system shall provide users with a convenient one-click shooting experience.\"\n      \"The system shall ensure the clarity and quality of the photos.\"\n    \n    Action: capturePhoto\n      {\n        Trigger: focusStatus = \"clear\"\n        Effect: image = generateImage(sceneSelection)\n      }\n    \n    Action: focusScene\n      {\n        Trigger: sceneSelection != null\n        Effect: focusStatus = \"clear\"\n      }\n  }\nc\n\n",
    "block System {\n  \n  property \"Focus Quality\" : String;\n  \n  activity CapturePhoto {\n    start\n    \n    action \"Select Scene\"\n    \n    action \"Focus\"\n    \n    action \"Evaluate Focus Quality\"\n    \n    if \"Focus Quality\" = \"Good\" then\n      action \"Shoot\"\n      action \"Generate Photo\"\n    \n    end\n    \n    end\n  }\n}\nc",
    "block PhotographyWorkflow {\n  \n  require \"User triggers 'take photo' operation\"\n  require \"System acquires current shooting scene\"\n  require \"System focuses image\"\n  require \"System executes shooting operation\"\n  require \"System displays resulting photo\"\n  \n  port \"takePhoto\" {\n    type \"Trigger\"\n  }\n  \n  port \"scene\" {\n    type \"Image\"\n  }\n  \n  port \"focusedImage\" {\n    type \"Image\"\n  }\n  \n  port \"photo\" {\n    type \"Image\"\n  }\n  \n  port \"display\" {\n    type \"Display\"\n  }\n  \n  \n  activity \"Workflow\" {\n    start\n    action \"Acquire scene\"\n    action \"Focus image\"\n    action \"Execute shooting\"\n    action \"Display photo\"\n    end\n  }\n}\nc",
    "block AutomaticBrakingControl {\n  \n  property \"ActivationState\" : Boolean = False;\n  \n  property \"BrakePressure\" : Real;\n  \n  property \"Traction\" : Real;\n  \n  port \"BrakePedal\" : Input;\n  \n  port \"RoadAdhesion\" : Input;\n  \n  port \"BrakeActuator\" : Output;\n  \n  behavior \"BrakingProcess\" {\n    \n    state \"Inactive\" {\n      \n      transition \"StartVehicle\" to \"Active\" when ActivationState = True;\n      \n    }\n    \n    state \"Active\" {\n      \n      transition \"BrakePedalPressed\" to \"Braking\" when BrakePedal.value > 0;\n      \n    }\n    \n    state \"Braking\" {\n      \n      action \"CalculateBrakePressure\" {\n        BrakePressure = function(BrakePedal.value, RoadAdhesion.value);\n      }\n      \n      action \"ModulateBrakePressure\" {\n        BrakeActuator.value = BrakePressure;\n      }\n      \n      transition \"BrakeReleased\" to \"Active\" when Brake",
    "block BatteryChargingControlSystem {\n  \n  property BatteryLevel : Real;\n  \n  behavior ChargingProcess {\n    \n    entry {\n      BatteryLevel < 100;\n      ChargingOn = true;\n    }\n    \n    during {\n      BatteryLevel >= 100;\n      ChargingOn = false;\n    }\n  }\n  \n  connector ChargingConnector {\n    port ChargingPort : Power;\n  }\n  \n}\nc",
    "block BatteryChargingSystem {\n  \n  property BatteryLevel : Real;\n  \n  behavior ChargingBehavior {\n    \n    entry {\n      BatteryLevel = 0;\n    }\n    \n    while BatteryLevel < 100 do\n      ReplenishBattery();\n    end\n    \n    exit {\n      BatteryLevel = 100;\n    }\n  }\n  \n  operation ReplenishBattery() {\n    // Implementation details for replenishing the battery\n  }\n}\nc\n\n",
    "block Camera {\n  \n  required port SceneSelectionInput : String;\n  required port FocusOutput : Boolean;\n  required port ImageOutput : Image;\n  \n  provided port ImageCaptureOutput : Image;\n  provided port PhotoStorageOutput : String;\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ",
    "block Camera {\n  \n  required port Viewfinder {\n    \n  }\n  required port FocusModule {\n    \n  }\n  required port ImagingModule {\n    \n  }\n  required port SceneSelector {\n    \n  }\n  \n  \n  \n  \n}\nc",
    "package VehicleSimulation\n\n  // Requirements\n  requirement \"REQ-001\" {\n    text = \"The system shall accurately simulate the vehicle's motion based on the provided input data.\"\n  }\n\n  // Block Definitions\n  block Vehicle {\n    // Properties\n    property \"mass\" : Real\n    property \"initialPosition\" : Real\n    property \"initialVelocity\" : Real\n    \n    // Ports\n    port \"powerInput\" : PowerInput\n    port \"positionOutput\" : Real\n    port \"velocityOutput\" : Real\n  }\n\n  // Data Types\n  datatype PowerInput {\n    // Properties\n    property \"timeStep\" : Real\n    property \"powerValue\" : Real\n  }\n\n  // Activities\n  activity \"SimulateVehicleMotion\" {\n    input \"powerInput\" : PowerInput\n    input \"mass\" : Real\n    input \"initialPosition\" : Real\n    input \"initialVelocity\" : Real\n    input \"timeStep\" : Real\n    output \"positionOutput\" : Real\n    output \"velocityOutput\" : Real\n  }\n\nendpackage\nc",
    "block: CameraSystem\n  {\n    Property: sceneInput\n      {\n        Type: String\n      }\n    Property: focusResult\n      {\n        Type: Image\n      }\n    Property: capturedImage\n      {\n        Type: Image\n      }\n    Property: displayedPhoto\n      {\n        Type: Image\n      }\n    \n    Requirement: R1\n      {\n        text: \"The system shall automatically focus on the scene.\"\n      }\n    Requirement: R2\n      {\n        text: \"The system shall capture the focused image.\"\n      }\n    Requirement: R3\n      {\n        text: \"The system shall automatically display the captured image.\"\n      }\n    \n    Block: FocusingProcess\n      {\n        Input: sceneInput\n        Output: focusResult\n      }\n    Block: ImageCapture\n      {\n        Input: focusResult\n        Output: capturedImage\n      }\n    Block: PhotoDisplay\n      {\n        Input: capturedImage\n        Output: displayedPhoto\n      }\n    \n    Flow: sceneInput -> FocusingProcess -> ImageCapture -> PhotoDisplay\n  }\nc",
    "block CameraSystem {\n  \n  property viewPort : ViewPort\n  property displayPort : DisplayPort\n  \n  activity CaptureWorkflow {\n    start\n    activity_step FocusScene {\n      input viewPort\n      output Image\n    }\n    activity_step CaptureImage {\n      input Image\n      output Picture\n    }\n    activity_step DisplayPicture {\n      input Picture\n      output displayPort\n    }\n    end\n  }\n}\nc\n\n",
    "block SensorManagementSystem {\n  \n  property SensorCount : Integer = 0\n  \n  activity UpdateSensor {\n    input Sensor : Sensor\n    output UpdatedSensor : Sensor\n    \n    block SensorStatus {\n      state Ready : Boolean\n    }\n    \n    action If SensorStatus.Ready then\n      UpdatedSensor = UpdateSensorOperation(Sensor)\n    end\n  }\n  \n  block Sensor {\n    property Status : SensorStatus\n  }\n  \n  block SensorUpdateOperation {\n    input Sensor : Sensor\n    output UpdatedSensor : Sensor\n  }\n}\nc",
    "block VehicleStateManagementSystem {\n  \n  state Off {\n  }\n  state Starting {\n  }\n  state On {\n  }\n  \n  activity StartVehicle {\n    trigger vehicleStartSignal\n    effect transition To Starting\n  }\n  activity PowerOnVehicle {\n    trigger vehiclePowerOnSignal\n    effect transition To On\n  }\n  activity ShutdownVehicle {\n    trigger vehicleShutdownSignal\n    effect transition To Off\n  }\n  \n  \n}\nc",
    "block VehicleStatusManagementSystem {\n  \n  state Off {\n    \n  }\n  \n  state Starting {\n    \n  }\n  \n  state On {\n    \n  }\n  \n  transition VehicleStartSignal from Off to Starting {\n    \n  }\n  \n  transition VehicleOnSignal from Starting to On {\n    \n  }\n  \n  transition VehicleOffSignal from On to Off {\n    \n  }\n}\nc",
    "block VehiclePowerManagementSystem {\n  \n  property PowerState {\n    type : Enumeration {\n      value : Off\n      value : Start\n      value : PoweredOn\n      value : Shutdown\n    }\n  }\n  \n  port UserCommand {\n    type : Signal\n  }\n  \n  port VehicleStartedSignal {\n    type : Signal\n  }\n  \n  port VehicleShutdownCommand {\n    type : Signal\n  }\n  \n  port ParkingBrakeEngagedSignal {\n    type : Signal\n  }\n  \n  behavior StartSequence {\n    entry {\n      PowerState := Start\n    }\n    \n    transition VehicleStartedSignal {\n      PowerState := PoweredOn\n    }\n  }\n  \n  behavior ShutdownSequence {\n    entry {\n      PowerState := Shutdown\n    }\n    \n    transition ParkingBrakeEngagedSignal {\n      PowerState := Off\n    }\n  }\n  \n}\nc",
    "block VehicleControlSystem {\n  \n  state Shutdown {\n    \n  }\n  \n  state StartUp {\n    \n  }\n  \n  state Running {\n    \n  }\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n",
    "block VehiclePowerManagement {\n  \n  // State Machine\n  statemachine VehicleState {\n    state Off {\n      transition StartSignal -> Start\n    }\n    state Start {\n      transition OnSignal -> On\n    }\n    state On {\n      transition OffSignal -> Off\n    }\n  }\n  \n  // Health State\n  property HealthState : String\n}\nc",
    "block VehicleHealthMonitoringSystem {\n  \n  property Temperature {\n    type Real;\n    unit \"Celsius\";\n  }\n  \n  property MaxAllowableTemperature {\n    type Real;\n    unit \"Celsius\";\n  }\n  \n  property VehicleHealthStatus {\n    type Enumeration;\n    values {\n      Normal;\n      Degraded;\n      Maintenance;\n    }\n  }\n  \n  property MaintenanceTime {\n    type Time;\n  }\n  \n  operation senseTemperature() {\n    return Temperature;\n  }\n  \n  operation compareTemperature() {\n    return Temperature > MaxAllowableTemperature;\n  }\n  \n  operation sendOverTemperatureWarning() {\n    // Implementation not shown\n  }\n  \n  operation switchToDegradedMode() {\n    VehicleHealthStatus := Degraded;\n  }\n  \n  operation switchToNormalMode() {\n    VehicleHealthStatus := Normal;\n  }\n  \n  operation enterMaintenanceStatus() {\n    VehicleHealthStatus := Maintenance;\n  }\n  \n  operation exitMaintenanceStatus() {\n    VehicleHealthStatus := Normal;\n  }",
    "block Server {\n  \n  port RequestPort : Port {\n    \n  }\n  \n  localClock : TimedElement {\n    \n  }\n  \n  state Off : State {\n    \n  }\n  \n  state Waiting : State {\n    \n  }\n  \n  state Response : State {\n    duration : TimeDuration = 5 minutes\n  }\n  \n  transition Start : TriggeredTransition {\n    source = Off\n    target = Waiting\n    trigger = \"start\"\n  }\n  \n  transition Request : TriggeredTransition {\n    source = Waiting\n    target = Response\n    trigger = \"request\"\n  }\n  \n  transition TimedTransition : TimedTransition {\n    source = Response\n    target = Waiting\n    time = \"11:59:00\"\n  }\n  \n  transition DailyOff : TimedTransition {\n    source = Waiting\n    target = Off\n    time = \"00:00:00\"\n  }\n}\nc\n\n",
    "block StartStopSystem {\n  \n  property off : boolean = false;\n  property start : boolean = false;\n  property operating : boolean = false;\n  \n  activity StartProcess {\n    start_state : off;\n    transition : start_signal -> start;\n    transition : power_on_signal and brake_pedal_pressed -> start;\n    transition : start -> operating;\n    \n    state operating {\n      self_check : boolean;\n      power_supply : boolean;\n      transition : stop_signal -> off;\n    }\n    \n    state off {\n      transition : start_signal -> start;\n    }\n    \n    state start {\n      transition : power_on_signal and brake_pedal_pressed -> start;\n      transition : start -> operating;\n    }\n  }\n  \n  connector start_signal {\n    type : signal;\n  }\n  \n  connector power_on_signal {\n    type : signal;\n  }\n  \n  connector brake_pedal_pressed {\n    type : signal;\n  }\n  \n  connector stop_signal {\n    type",
    "block VehicleStartStopSystem {\n  \n  property off : Boolean = false;\n  property started : Boolean = false;\n  \n  behavior StartUp {\n    trigger vehicleStartSignal;\n    effect off = false;\n    effect started = true;\n  }\n  \n  behavior Shutdown {\n    trigger shutdownSignal;\n    effect off = true;\n    effect started = false;\n    effect parkingBrakeApplied = true;\n  }\n  \n  constraint StartCondition {\n    started = (brakePedalDepressed and vehicleOnSignal)\n  }\n  \n}\nc",
    "block CruiseControlSystem {\n  \n  property \"DesiredSpeed\" : Real;\n  property \"ActualSpeed\" : Real;\n  \n  block Driver {\n    \n    action \"SetDesiredSpeed\" (DesiredSpeed : Real);\n  }\n  \n  block CruiseController {\n    \n    action \"ReceiveSpeed\" (ActualSpeed : Real);\n    action \"GenerateFuelCommand\" (FuelCommand : Real);\n  }\n  \n  block Speedometer {\n    \n    action \"ReportSpeed\" (ActualSpeed : Real);\n  }\n  \n  block Engine {\n    \n    action \"AdjustOutput\" (FuelCommand : Real);\n  }\n  \n  connector \"SetSpeedCommand\" from Driver to CruiseController;\n  connector \"SpeedFeedback\" from Speedometer to CruiseController;\n  connector \"FuelControl\" from CruiseController to Engine;\n}\nc",
    "block CruiseControl {\n  \n  required port SetSpeed : Integer;\n  required port VehicleSpeed : Real;\n  required port ThrottleCommand : Real;\n  \n  provided port EngineOutput : Real;\n  \n  operation SetSpeed(SetSpeed : Integer) {\n    \n  }\n  \n  behavior CruiseControlBehavior {\n    \n    // ...\n  }\n}\nc",
    "block CruiseControl {\n  Property setSpeed : Real;\n  Property currentSpeed : Real;\n  Property throttleCommand : Real;\n\n  Action setSpeedCommand(setSpeed : Real) {\n    // Implementation details\n  }\n\n  Action getVehicleSpeed() {\n    // Implementation details\n  }\n\n  Action calculateThrottleCommand() {\n    // Implementation details\n  }\n\n  Action sendThrottleCommand(throttleCommand : Real) {\n    // Implementation details\n  }\n\n  Interface ControlInterface {\n    Operation setSpeedCommand(setSpeed : Real);\n  }\n\n  Interface SpeedSensorInterface {\n    Operation getVehicleSpeed(): Real;\n  }\n\n  Interface EngineInterface {\n    Operation sendThrottleCommand(throttleCommand : Real);\n  }\n\n  Block Driver {\n    // Driver's actions and interactions\n  }\n\n  Block Speedometer {\n    // Speedometer's actions and interactions\n  }\n\n  Block Engine {\n    // Engine's actions and interactions\n  }\n\n}\nc",
    "block CruiseControl {\n  \n  property SpeedSetting : Real;\n  property VehicleSpeed : Real;\n  \n  activity CruiseControlWorkflow {\n    start\n    \n    action \"Receive Speed Setting Request\"\n    \n    action \"Calculate Throttle Instruction\"\n    \n    action \"Transmit Throttle Instruction to Engine\"\n    \n    end\n  }\n}\nc",
    "block CruiseControlSystem {\n  \n  Property targetSpeed : Real;\n  Property actualSpeed : Real;\n  \n  Block CruiseController {\n    Property setSpeedCommand : Real;\n    Property fuelControlCommand : Real;\n    \n    Action processSpeed {\n      Input actualSpeed : Real;\n      Input setSpeedCommand : Real;\n      Output fuelControlCommand : Real;\n    }\n  }\n  \n  Block Engine {\n    Property fuelControlInput : Real;\n  }\n  \n  Block SpeedSensor {\n    Property actualSpeed : Real;\n  }\n  \n  Block CruiseControlInterface {\n    Property setSpeedCommand : Real;\n  }\n  \n  Interface DataPort {\n    Property setSpeed : Real;\n    Property actualSpeed : Real;\n    Property fuelControl : Real;\n  }\n  \n  DataPort cruiseControlInterfaceToCruiseController : DataPort;\n  DataPort cruiseControllerToEngine : DataPort;\n  DataPort engineToCruiseController : DataPort;\n  DataPort cruiseControllerToSpeedSensor : DataPort;\n  DataPort speedSensorToCruiseController : DataPort;\n  ",
    "block: CruiseControlSystem\n  {\n    Property: setSpeed\n      {\n        Type: Real\n      }\n    Property: actualSpeed\n      {\n        Type: Real\n      }\n    Property: fuelControlCommand\n      {\n        Type: String\n      }\n    Block: CruiseController\n      {\n        Property: setSpeed\n          {\n            Type: Real\n          }\n        Property: actualSpeed\n          {\n            Type: Real\n          }\n        Property: fuelControlCommand\n          {\n            Type: String\n          }\n        Operation: processSetSpeed\n          {\n            Input: setSpeed\n            Output: fuelControlCommand\n          }\n      }\n    Block: SpeedSensor\n      {\n        Property: actualSpeed\n          {\n            Type: Real\n          }\n      }\n    Block: EngineController\n      {\n        Property: fuelControlCommand\n          {\n            Type: String\n          }\n      }\n    Block: Engine\n      {\n      }\n    Interface: MessageInterface\n      {\n      }\n  }\nc",
    "package VehicleLifecycleManagement {\n\n  // ... (Define your SysML v2 textual code here)\n\n}\nc\n",
    "Vehicle::Vehicle\n  {\n    mass : Real;\n    operationalStatus : OperationalStatus;\n  }\n\nOperationalStatus::OperationalStatus\n  {\n    gearSetting : String;\n    acceleratorPedalPosition : Real;\n  }\n\nVehicle::hasEngine : Engine;\nVehicle::hasDriver : Driver;\n\nVehicle::hasWheel : Wheel;\n\nVehicle::vehicle_1\n  {\n    mass : 1500;\n    operationalStatus\n      {\n        gearSetting : \"Park\";\n        acceleratorPedalPosition : 0;\n      };\n  }\n\nWheel::leftFrontWheel\n  {\n    // ...\n  }\n\nWheel::rightFrontWheel\n  {\n    // ...\n  }\nc\n\n",
    "package VehicleSystem {\n\n  // Vehicle Class\n  class Vehicle {\n    \n    // Attributes\n    Property mass : Real;\n    Property gearSetting : Integer;\n    Property acceleratorPosition : Real;\n    \n    // Behavior\n    // ...\n  }\n\n  // Vehicle Instance\n  instance Vehicle_1 : Vehicle {\n    mass = 2000;\n    gearSetting = 0;\n    acceleratorPosition = 0.0;\n  }\n\n  // Time Point 1\n  block TimePoint1 {\n    Vehicle_1.mass = 1500;\n    Vehicle_1.gearSetting = 2;\n    Vehicle_1.acceleratorPosition = 0.5;\n  }\n\n}\nc",
    "block: Vehicle\n  {\n    Property: mass\n      Type: Real\n      Value: 2000\n    Property: gearPosition\n      Type: String\n      Value: Neutral\n    Property: throttlePosition\n      Type: Real\n      Value: 0\n    Property: driver\n      Type: Driver\n      Value: Alice\n  }\n\nBlock: Driver\n  {\n    Property: name\n      Type: String\n      Value: Alice\n  }\n\nBlock: Engine\n  {\n    Property: power\n      Type: Real\n      Value: 150\n  }\n\nVehicle.hasPart Engine\nVehicle.hasPart Driver\n\nState: Initial\n  {\n    Vehicle.mass = 2000\n    Vehicle.gearPosition = Neutral\n    Vehicle.throttlePosition = 0\n    Vehicle.driver = Alice\n  }\n\nState: Second\n  {\n    Vehicle.mass = 1500\n    Vehicle.gearPosition = Second\n    Vehicle.throttlePosition = 0.5\n    Vehicle.driver = Bob\n  }\n\nTransition: Initial -> Second\nc\n\n",
    "package VehicleMassModel {\n\n  // Define the \"Component\" stereotype\n  stereotype \"Component\" {\n    // Define the \"Mass\" property\n    property Mass : Real\n  }\n\n  // Define the \"Vehicle\" class\n  class Vehicle {\n    // Define the \"Components\" property\n    property Components : Component\n  }\n\n  // Define the \"Engine\" class\n  class Engine {\n    // Inherit from \"Component\" stereotype\n    stereotype \"Component\"\n  }\n\n  // Define the \"Transmission\" class\n  class Transmission {\n    // Inherit from \"Component\" stereotype\n  }\n\n  // Define the \"Body\" class\n  class Body {\n    // Inherit from \"Component\" stereotype\n  }\n\n  // Define the \"relationship\" between Vehicle and its Components\n  Vehicle -- Component : aggregation\n}\nc\n\n",
    "package VehicleMassManagement {\n\n  // Vehicle\n  class Vehicle {\n    \n    // Attributes\n    String VIN;\n    Real mass;\n    \n    // Parts\n    Block composition::Vehicle::Component* components;\n  }\n\n  // Component\n  class Component {\n    \n    // Attributes\n    String serialNumber;\n    Real mass;\n    \n    // Parts\n    Block composition::Component::Component* subcomponents;\n  }\n\n  // Filter\n  class MassFilter {\n    Real threshold;\n  }\n\n}\nc\n\n",
    "block: System\n  Property: simpleMass\n  Property: totalMass\n  \nBlock: simpleThing\n  Property: simpleMass\n  \nBlock: compositeThing\n  Property: simpleMass\n  Property: subcomponents\n    Multiplicity: 1..*\n    Type: Block\n  \nConstraint: totalMass = simpleMass + sum(subcomponents.totalMass)\nc",
    "block: MassManagementSystem\n  Property: basicMass : Real\n  Property: totalMass : Real\n  \n  Block: Object\n    Property: basicMass : Real\n    Block: Subcomponent\n      Property: mass : Real\n  \n  Operation: calculateTotalMass(Object) : Real\n    Input: object : Object\n    Output: totalMass : Real\n  \n  Operation: filterAndAggregateMass(Object, Real) : Real\n    Input: object : Object\n    Input: minMassThreshold : Real\n    Output: filteredTotalMass : Real\nc",
    "block VehicleDynamicsSystem {\n  \n  // Inputs\n  input WheelPower : Real;\n  input AerodynamicDragCoefficient : Real;\n  input FrictionCoefficient : Real;\n  input VehicleMass : Real;\n  input Speed : Real;\n  input Time : Real;\n  \n  // Outputs\n  output PowerOutput : Real;\n  output Acceleration : Real;\n  output VehicleSpeed : Real;\n  output VehiclePosition : Real;\n  \n  // Internal Variables\n  variable EffectivePower : Real;\n  \n  // Calculation Logic\n  PowerOutput = WheelPower * (1 - AerodynamicDragCoefficient * FrictionCoefficient * VehicleMass);\n  EffectivePower = PowerOutput / VehicleMass;\n  Acceleration = EffectivePower / VehicleMass;\n  VehicleSpeed = Speed + Acceleration * Time;\n  VehiclePosition = VehicleSpeed * Time;\n}\nc\n\n",
    "block VehicleDynamicsSimulation {\n  \n  property InitialSpeed : Real;\n  property InitialPosition : Real;\n  property TimeStep : Real;\n  property AerodynamicDragCoefficient : Real;\n  property RollingResistanceCoefficient : Real;\n  property VehicleMass : Real;\n  property WheelEndOutputPower : Real;\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n",
    "package VehicleDynamicsModel {\n\n  // Requirements\n  Requirement req_vehicle_mass \"Vehicle mass shall be input by the user.\"\n  Requirement req_wheel_power \"Wheel power shall be input by the user.\"\n  Requirement req_aerodynamic_drag_coefficient \"Aerodynamic drag coefficient shall be input by the user.\"\n  Requirement req_rolling_resistance_coefficient \"Rolling resistance coefficient shall be input by the user.\"\n  Requirement req_initial_speed \"Initial speed shall be input by the user.\"\n  Requirement req_initial_position \"Initial position shall be input by the user.\"\n  Requirement req_time_step \"Time step for simulation shall be defined.\"\n  Requirement req_velocity_prediction \"System shall predict vehicle velocity.\"\n  Requirement req_acceleration_prediction \"System shall predict vehicle acceleration.\"\n  Requirement req_displacement_prediction \"System shall predict vehicle displacement.\"\n\n  // Parameters\n  Parameter vehicleMass : Real\n  Parameter wheelPower : Real\n  Parameter aerodynamicDragCoefficient : Real\n  Parameter rollingResistanceCoefficient : Real\n  Parameter initialSpeed : Real\n  Parameter initialPosition : Real\n  Parameter timeStep : Real\n\n  // Variables\n  Variable currentSpeed",
    "package VehicleDynamics\n\n  // Define the input parameters\n  parameter InitialPosition : Real = 0.0\n  parameter InitialVelocity : Real = 0.0\n  parameter VehicleMass : Real = 1000.0\n  parameter WheelEndDrivePower : Real = 100.0\n  parameter TimeInterval : Real = 1.0\n\n  // Define the output parameters\n  parameter FinalVelocity : Real\n  parameter FinalPosition : Real\n\n  // Define the system behavior\n  block VehicleDynamicsSystem {\n    // Define the internal variables\n    variable Acceleration : Real\n    \n    // Define the equations\n    equation Acceleration = (WheelEndDrivePower - (DragCoefficient * Velocity^2) - (FrictionCoefficient * VehicleMass * Gravity)) / VehicleMass\n    equation FinalVelocity = InitialVelocity + (Acceleration * TimeInterval)\n    equation FinalPosition = InitialPosition + (InitialVelocity * TimeInterval) + (0.5 * Acceleration * TimeInterval^2)\n  }\n\nendpackage\nc**Note:** This is a basic example and can be further extended to include more detailed models and constraints.\n\n\n\n",
    "block Vehicle {\n  \n  property Mass : Real = 0;\n  \n  block Chassis {\n    property Mass : Real = 0;\n  }\n  \n  block Engine {\n    property Mass : Real = 0;\n  }\n  \n  block Gearbox {\n    property Mass : Real = 0;\n  }\n  \n  constraint Mass <= 2500;\n  \n  \n}\nc",
    "block: VehicleMassBudgetingSystem\n  {\n    Property: massLimit\n      {\n        Type: Real\n        Value: 2500\n      }\n    Property: engineMass\n      {\n        Type: Real\n        Unit: kilogram\n      }\n    Property: transmissionMass\n      {\n        Type: Real\n        Unit: kilogram\n      }\n    Property: totalMass\n      {\n        Type: Real\n        Unit: kilogram\n      }\n    Requirement: massConstraint\n      {\n        Text: \"Total mass of the vehicle shall not exceed 2500 kilograms.\"\n      }\n    Constraint: massLimitConstraint\n      {\n        Text: \"totalMass <= massLimit\"\n      }\n  }\nc",
    "block VehicleMassManagementSystem {\n  \n  property TotalMass : Real = 2500.0;\n  \n  block Chassis {\n    property Mass : Real;\n  }\n  \n  block Engine {\n    property Mass : Real;\n  }\n  \n  block Transmission {\n    property Mass : Real;\n  }\n  \n  constraint TotalMassLimit {\n    Chassis.Mass + Engine.Mass + Transmission.Mass <= TotalMass\n  }\n}\nc",
    "block \"Weight Management System\" {\n  \n  property \"Max Weight Limit\" : Real = 2500;\n  \n  requirement \"Weight Limit Compliance\" {\n    text \"The combined weight of the main vehicle components shall not exceed 2500 kilograms.\"\n  }\n  \n  input \"Chassis Weight\" : Real;\n  input \"Engine Weight\" : Real;\n  input \"Transmission Weight\" : Real;\n  \n  internalBlock \"Weight Calculation\" {\n    \n    property \"Total Weight\" : Real;\n    \n    operation \"CalculateTotalWeight\" {\n      input \"Chassis Weight\" : Real;\n      input \"Engine Weight\" : Real;\n      input \"Transmission Weight\" : Real;\n      output \"Total Weight\" : Real;\n      \n      body \"Total Weight = Chassis Weight + Engine Weight + Transmission Weight\";\n    }\n  }\n  \n  constraint \"Weight Limit Exceeded\" {\n    text \"Total Weight > Max Weight Limit\";\n  }\n  \n  behavior \"Weight Warning\" {\n    trigger \"Weight Limit Exceeded\"\n    action \"Display warning message\"\n  }\n}\n",
    "package VehicleMassConstraint\n\n  // Component definitions\n  Block Chassis\n  Block Engine\n  Block Transmission\n\n  // Mass attributes\n  Property Chassis::mass : Real\n  Property Engine::mass : Real\n  Property Transmission::mass : Real\n\n  // Total mass constraint\n  Constraint TotalMassConstraint {\n    Chassis::mass + Engine::mass + Transmission::mass <= 2500\n  }\n\n  // Dynamic behavior constraint\n  Constraint DynamicConstraint {\n    Engine::mass > 0\n    (Engine::force * Engine::time) = Engine::mass * (Engine::finalVelocity - Engine::initialVelocity)\n  }\n\nendpackage\nc\n\n",
    "block VehicleMaintenanceSystem {\n  \n  property Vehicle {\n    type Vehicle\n  }\n  \n  property MaintenanceInterval {\n    type Duration\n  }\n  \n  property MaxTemperature {\n    type Real\n  }\n  \n  activity NextMaintenanceTime {\n    input Vehicle\n    input MaintenanceInterval\n    output Time\n  }\n  \n  activity IsMaintenanceTime {\n    input Vehicle\n    output Boolean\n  }\n  \n  activity StartMaintenance {\n    input Vehicle\n  }\n  \n  activity EndMaintenance {\n    input Vehicle\n  }\n  \n  state MachineState {\n    state Healthy\n    state UnderMaintenance\n  }\n  \n  transition StartMaintenance {\n    from Healthy\n    to UnderMaintenance\n  }\n  \n  transition EndMaintenance {\n    from UnderMaintenance\n    to Healthy\n  }\n  \n  constraint MaxMaintenanceDuration {\n    EndMaintenance - StartMaintenance <= 48 hours\n  }\n  \n  constraint MaintenanceStartDelay {\n    StartMaintenance >= NextMaintenanceTime + 2 seconds\n  }\n}\nc\n\n",
    "block: Vehicle\n  Property: maxMass {\n    Type: Real\n    Value: 1500\n  }\n  Property: fuelMass {\n    Type: Real\n    Value: 0\n    Constraint: fuelMass >= 0\n  }\n  \nBlock: Engine\n  Property: torque {\n    Type: Real\n    Value: 0\n  }\n  \nBlock: Transmission\n  Property: torque {\n    Type: Real\n    Value: 0\n  }\n  \nBlock: Clutch\n  Property: torque {\n    Type: Real\n    Value: 0\n  }\n  \nConstraint: Vehicle.fuelMass + Vehicle.curbWeight <= Vehicle.maxMass\nc",
    "Requirement \"Vehicle Mass Requirement\" {\n  description = \"With a full fuel tank, the vehicle’s total mass must not exceed 2000 kg, while with an empty fuel tank, the total mass must not exceed 1500 kg.\";\n  \n}\n\nRequirement \"Engine Torque Transmission\" {\n  description = \"The engine must be capable of transmitting its generated torque to the transmission via the clutch interface.\";\n}\n\nRequirement \"Engine Torque Performance\" {\n  description = \"The engine is required to deliver the necessary torque according to the speed-torque curve.\";\n}\n\nRequirement \"System Objective\" {\n  description = \"Overall, the system aims to regulate vehicle mass control, as well as the interface and performance of the powertrain, thereby ensuring the safety of vehicle design and the effectiveness of power transmission.\";\n}\nc\n\n",
    "block: Vehicle\n  Mass Property: TotalMass\n    Value: 2000 kg\n  Mass Property: EmptyMass\n    Value: 1500 kg\n\nBlock: Engine\n  Property: Torque\n    Type: Real\n    Value: \"Performance Table\"\n\nBlock: Transmission\n  Property: ClutchInterface\n    Type: Connector\n\nConnector: ClutchInterface\n  End: Engine\n  End: Transmission\n\nc",
    "Requirement \"Vehicle Mass Limit\" {\n  description \"The actual mass of the vehicle must not exceed the specified limit.\"\n  constraint \"Total Vehicle Mass <= 2000 kg\"\n  condition \"Fuel Tank State = Full\"\n}\n\nRequirement \"Vehicle Mass Limit Empty\" {\n  description \"The actual mass of the vehicle must not exceed the specified limit.\"\n  constraint \"Total Vehicle Mass <= 1500 kg\"\n  condition \"Fuel Tank State = Empty\"\n}\n\nRequirement \"Engine Torque Characteristic\" {\n  description \"The engine must be capable of generating the specified torque characteristics at various speeds.\"\n}\n\nRequirement \"Torque Transmission\" {\n  description \"The generated torque must be effectively transmitted to the gearbox through the clutch interface to ensure smooth power delivery.\"\n}\nc\n\n",
    "package VehiclePerformanceAnalysis {\n\n  // Vehicle Attributes\n  class Vehicle {\n    attribute curbWeight : Real;\n    attribute payload : Real;\n    attribute wheelDiameter : Real;\n    attribute transmissionEfficiency : Real;\n    attribute fuelEconomyUrban : Real;\n    attribute fuelEconomyHighway : Real;\n  }\n\n  // Driving Cycle\n  class DrivingCycle {\n    attribute time : Real;\n    attribute position : Real;\n    attribute speed : Real;\n  }\n\n  // Analysis Results\n  class AnalysisResult {\n    attribute enginePower : Real;\n    attribute acceleration : Real;\n    attribute fuelEconomy : Real;\n  }\n\n  // Configuration\n  class Configuration {\n    attribute energyConsumptionTarget : Real;\n  }\n\n  // Relationship\n  Vehicle \"has\" DrivingCycle;\n  Vehicle \"analyzes\" AnalysisResult;\n  AnalysisResult \"complies with\" Configuration;\n\n}\nc",
    "package FuelEconomySimulation\n\n  // Requirements\n  Requirement fuelEconomyRequirement {\n    text = \"Fuel economy shall exceed 30 miles per gallon.\"\n  }\n\n  // Vehicle Parameters\n  Block vehicle {\n    Property curbWeight : Real\n    Property load : Real\n    Property wheelDiameter : Real\n    Property transmissionEfficiency : Real\n    // ... other vehicle parameters\n  }\n\n  // Driving Scenarios\n  Block urbanDrivingScenario {\n    Property speedProfile : String\n  }\n\n  Block highwayDrivingScenario {\n    Property speedProfile : String\n  }\n\n  // Simulation Analysis\n  Activity fuelEconomyAnalysis {\n    Input vehicle\n    Input urbanDrivingScenario\n    Input highwayDrivingScenario\n    Output fuelConsumption : Real\n    Output fuelEconomy : Real\n  }\n\n  // Calculation Logic (Implementation details)\n  // ...\nend FuelEconomySimulation\nc\n\n",
    "block EngineSelectionSystem {\n  \n  property Power : Real;\n  property Mass : Real;\n  property Efficiency : Real;\n  property Cost : Real;\n  \n  block FourCylinderEngine {\n    \n  }\n  block SixCylinderEngine {\n    \n  }\n  \n  function EvaluateEngine(engine : Engine) : Real {\n    \n  }\n  \n  function RecommendEngine() : Engine {\n    \n  }\n}\nc",
    "block CurbWeightCheck {\n  \n  property \"CurbWeightLimit\" : Real = 2500;\n  \n  behavior \"CurbWeightCheckBehavior\" {\n    activity \"CurbWeightCheckProcess\" {\n      activityNode \"CollectWeightData\" {\n        input \"ActualWeight\" : Real;\n      }\n      activityNode \"ProcessWeightData\" {\n        input \"ActualWeight\" : Real;\n        output \"ProcessedWeight\" : Real;\n      }\n      activityNode \"EvaluateWeight\" {\n        input \"ProcessedWeight\" : Real;\n        input \"CurbWeightLimit\" : Real;\n        output \"EvaluationResult\" : String;\n      }\n    }\n  }\n}\nc",
    "package MassVerificationSystem {\n\n  // Requirements\n  Requirement \"MassLimit\" {\n    text = \"The actual mass of each vehicle shall not exceed 2,500 kilograms.\"\n  }\n\n  // Actors\n  Actor \"Vehicle\" {\n    description = \"A vehicle to be inspected for mass.\"\n  }\n  Actor \"WeighingEquipment\" {\n    description = \"Equipment used to measure the mass of a vehicle.\"\n  }\n  Actor \"MassVerificationUnit\" {\n    description = \"Unit responsible for processing and evaluating mass data.\"\n  }\n\n  // Use Cases\n  UseCase \"MassInspection\" {\n    description = \"Process to verify the mass of a vehicle.\"\n    Actor \"Vehicle\"\n    Actor \"WeighingEquipment\"\n    Actor \"MassVerificationUnit\"\n  }\n\n  // State Machine\n  StateMachine \"MassVerificationProcess\" {\n    State \"Initial\" {\n      description = \"Process starts.\"\n    }\n    State \"Weighing\" {\n      description = \"Weighing equipment measures the vehicle's mass.\"\n    }\n    State \"Evaluation\" {\n      description = \"MassVerificationUnit evaluates the measured mass",
    "block System {\n  \n  requirement \"Provide a convenient and efficient mode of transportation\"\n  requirement \"Support a driver and up to four passengers\"\n  requirement \"Ensure safe and comfortable travel\"\n  requirement \"Enable simple and smooth entry and exit\"\n  requirement \"Integrate surrounding environmental factors\"\n  requirement \"Ensure safety and sustainability of the journey\"\n  requirement \"Be compatible with related infrastructure\"\n  requirement \"Center operation on human needs\"\n  requirement \"Focus on ride experience and conveniences\"\n  requirement \"Assist passengers and drivers in completing daily transportation tasks\"\n  \n  \n}\nc",
    "block \"Transportation System\" {\n  \n  property \"Number of Passengers\" : Integer = 4;\n  \n  requirement \"Safety\" : \"The system shall ensure the safe transportation of the driver and passengers.\";\n  requirement \"Convenience\" : \"The system shall provide a simple and convenient user experience.\";\n  \n  part \"Driver\" {\n    \n    behavior \"Operate Vehicle\" {\n      \n      input \"Environmental Conditions\" : Environment;\n      output \"Vehicle Control\" : ControlSignal;\n    }\n  }\n  \n  part \"Vehicle\" {\n    \n    behavior \"Refuel\" {\n      input \"Fuel\" : Fuel;\n    }\n  }\n  \n  part \"Passengers\" {\n    \n    behavior \"Enter/Exit Vehicle\" {\n      \n    }\n  }\n  \n  connector \"Start Point\" {\n    \n    end \"Start\" : Point;\n  }\n  \n  connector \"Destination\" {\n    \n    end \"Destination\" : Point;\n  }\n}\nc",
    "package ConfigurationManagementSystem\n\n  // Engine Types\n  enum EngineType {\n    FourCylinder,\n    SixCylinder\n  }\n\n  // Cylinder Diameter\n  enum CylinderDiameter {\n    Small,\n    Large\n  }\n\n  // Transmission Types\n  enum TransmissionType {\n    Manual,\n    Automatic\n  }\n\n  // Vehicle\n  class Vehicle {\n    EngineType engine;\n    CylinderDiameter cylinderDiameter;\n    TransmissionType transmission;\n  }\n\n  // Constraint: Manual transmission only with four-cylinder engine\n  constraint ManualTransmissionConstraint {\n    self.transmission = Manual implies self.engine = FourCylinder\n  }\n\n  // Constraint: Automatic transmission only with six-cylinder engine\n  constraint AutomaticTransmissionConstraint {\n    self.transmission = Automatic implies self.engine = SixCylinder\n  }\n\nendpackage\n```\n",
    "block Engine {\n  \n  property CylinderCount : Integer = 4 | 6;\n  property CylinderDiameter : Real = 70 | 100;\n  \n  part Cylinder {\n    \n    property Diameter : Real = CylinderDiameter;\n    \n  }\n  \n  constraint CylinderCount >= 1;\n  constraint CylinderDiameter >= 0;\n  \n  \n  variant FourCylinderEngine {\n    CylinderCount = 4;\n  }\n  \n  variant SixCylinderEngine {\n    CylinderCount = 6;\n  }\n}\nc\n\n",
    "package AutomotiveConfiguration\n\n  // Engine\n  class Engine {\n    property name : String\n    property cylinderCount : Integer\n    property cylinderDiameter : Diameter\n  }\n\n  enum Diameter {\n    D70mm\n    D100mm\n  }\n\n  class FourCylinderEngine extends Engine {\n    property name : \"4-Cylinder Engine\"\n    property cylinderCount : 4\n  }\n\n  class SixCylinderEngine extends Engine {\n    property name : \"6-Cylinder Engine\"\n    property cylinderCount : 6\n  }\n\n  // Transmission\n  class Transmission {\n    property name : String\n  }\n\n  class ManualTransmission extends Transmission {\n    property name : \"Manual\"\n  }\n\n  class AutomaticTransmission extends Transmission {\n    property name : \"Automatic\"\n  }\n\n  // Vehicle\n  class Vehicle {\n    property engine : Engine\n    property transmission : Transmission\n  }\n\n  constraint EngineTransmissionConstraint {\n    self.engine.cylinderCount = 4 implies self.transmission.name = \"Manual\"\n    self.engine.cylinderCount = 6 implies self.transmission.name = \"Automatic\"\n  }\n\n",
    "System Assembly {\n  Computer Subsystem\n  Storage Subsystem\n}\n\nSoftware Design {\n  Message Format\n  Data Format\n}\n\nComputer Subsystem::Utilizes Software Design\n\nStorage Subsystem::Accesses Software Design\n\nSystem Assembly::Information Storage\nSystem Assembly::Information Transmission\nSystem Assembly::Information Processing\nc",
    "block: PowertrainSystem\n  {\n    Property: \"Description\" value: \"Efficient allocation and management of the powertrain system\"\n    Property: \"LogicalLayer\" value: \"Logical layer of the powertrain system\"\n    Property: \"PhysicalLayer\" value: \"Physical layer of the powertrain system\"\n  }\n\nBlock: LogicalLayer\n  {\n    Property: \"Description\" value: \"Logical components for power and torque generation\"\n    Block: TorqueGenerator\n      {\n        Property: \"Description\" value: \"Converts power into torque\"\n      }\n  }\n\nBlock: PhysicalLayer\n  {\n    Property: \"Description\" value: \"Physical components for power and torque generation\"\n    Block: PowerUnit\n      {\n        Property: \"Description\" value: \"Capable of power output and torque generation\"\n      }\n  }\n\nRequirement: PowerOutput\n  {\n    Description: \"The system needs to ensure that the torque generator in the logical layer can be effectively mapped to the corresponding power unit (such as an engine) in the physical layer.\"\n  }\n\nRequirement: TorqueGeneration\n  {\n    Description: \"Through this mapping",
    "block PowerTransmissionSystem {\n  \n  requirement PowerDelivery {\n    description \"The system requires the power transmission system to provide power.\"\n  }\n  \n  requirement TorqueGeneration {\n    description \"The system requires the power transmission system to generate torque.\"\n  }\n  \n  block TorqueGenerator {\n    \n    action GenerateTorque {\n      description \"Generating torque by the torque generator component.\"\n    }\n  }\n  \n  allocation PowerTransmissionSystem.TorqueGenerator --> Powertrain.Engine {\n    description \"Logical-layer torque generator is to be allocated to the physical powertrain component.\"\n  }\n  \n  allocation PowerTransmissionSystem.TorqueGenerator.GenerateTorque --> Powertrain.Engine.GenerateTorque {\n    description \"The operation of generating torque further allocated to the engine within the powertrain.\"\n  }\n  \n  block Powertrain {\n    \n    component Engine {\n      \n      action GenerateTorque {\n        description \"The engine actually performs the function of generating torque.\"\n      }\n    }\n  }\n}\nc",
    "package VehicleFeatureAnnotationSystem {\n\n  // Block Definitions\n  block Vehicle {\n    \n    // Property\n    property \"SafetyLevel\" : String;\n    property \"SecurityLevel\" : String;\n\n    // Part\n    part Interior : Interior;\n    part Body : Body;\n  }\n\n  block Interior {\n    // Part\n    part SeatBelt : SeatBelt;\n    part FrontSeat : FrontSeat;\n    part DriverAirbag : DriverAirbag;\n    part AlarmSystem : AlarmSystem;\n  }\n\n  block Body {\n    // Part\n    part BodyShell : BodyShell;\n    part Bumpers : Bumpers;\n    part KeylessEntryDevice : KeylessEntryDevice;\n  }\n\n  // ... (Define other blocks and relationships as needed)\n\n}\nc\n\n",
    "block VehicleDynamicsSystem {\n  \n  property initialVelocity : Real;\n  property initialPosition : Real;\n  property acceleration : Real;\n  property timeStep : Real;\n  \n  connector inputConnector {\n    port initialVelocity : Real;\n    port initialPosition : Real;\n    port acceleration : Real;\n    port timeStep : Real;\n  }\n  \n  connector outputConnector {\n    port velocity : Real;\n    port position : Real;\n  }\n  \n  behavior simulation {\n    input initialVelocity, initialPosition, acceleration, timeStep;\n    output velocity, position;\n    \n    // Implementation details using ModelCenter integration\n    // ...\n  }\n}\nc",
    "package SafetyFeatures {\n  \n}\n\npackage MandatorySafetyFeatures {\n  \n}\n\nblock Car {\n  \n  block Interior {\n    \n    block SeatBelt {\n      \n      property isMandatory : boolean = true\n      \n    }\n    \n    block SeatBelt {\n      \n      property isMandatory : boolean = true\n      \n    }\n    \n    block Airbag {\n      \n      property isMandatory : boolean = false\n      \n    }\n  }\n  \n  block Body {\n    \n    block Bumper {\n      \n      property isMandatory : boolean = true\n      \n    }\n  }\n  \n  block WheelAssembly {\n    \n    block Wheel {\n      \n    }\n    \n    block Wheel {\n      \n    }\n    \n    block ABS {\n      \n      property isMandatory : boolean = false\n      \n    }\n  }\n  \n  block KeylessEntry {\n    \n    property isMandatory : boolean = false\n    \n  }\n}\nc\n\n",
    "block: VehicleSafetyComplianceSystem\n  {\n    Property: mandatorySafetyFeatures\n      {\n        Type: String\n        Value: \"Seat belts, Bumper\"\n      }\n    Property: optionalSafetyFeatures\n      {\n        Type: String\n        Value: \"Driver's airbag, ABS, Keyless entry system\"\n      }\n    Block: VehicleInterior\n      {\n        Block: SeatBelt\n          {\n            Property: safetyFeatureType\n              {\n                Type: String\n                Value: \"Mandatory\"\n              }\n          }\n        Block: SeatBelt\n          {\n            Property: safetyFeatureType\n              {\n                Type: String\n                Value: \"Mandatory\"\n              }\n          }\n        Block: DriversAirbag\n          {\n            Property: safetyFeatureType\n              {\n                Type: String\n                Value: \"Optional\"\n              }\n          }\n      }\n    Block: VehicleBody\n      {\n        Block: Bumper\n          {\n            Property: safetyFeatureType\n              {\n                Type: String\n                Value: \"Mandatory\"\n              }\n          }\n        Block: KeylessEntrySystem\n          ",
    "package RiskManagementSystem {\n\n  // Define the types of risks and failures\n  class Risk {\n    attribute name : String\n    attribute description : String\n    attribute probability : Real\n    attribute severity : String\n  }\n\n  class Failure {\n    attribute name : String\n    attribute description : String\n    attribute severity : String\n  }\n\n  // Define the causal relationships between risks and failures\n  relation Causes {\n    from Risk\n    to Failure\n  }\n\n  // Define the scenarios involving risks and failures\n  class RiskScenario {\n    attribute name : String\n    attribute description : String\n    \n    // Include risks and failures in the scenario\n    part Risk : Risk\n    part Failure : Failure\n  }\n\n}\nc\n\n",
    "package RiskManagementSystem {\n\n  // Define a stereotype for scenarios\n  stereotype \"Scenario\" {\n    description = \"Represents a potential event or situation that may lead to risk.\"\n  }\n\n  // Define a stereotype for causes\n  stereotype \"Cause\" {\n    description = \"Represents a factor that contributes to the occurrence of a scenario.\"\n  }\n\n  // Define a stereotype for failures\n  stereotype \"Failure\" {\n    description = \"Represents a negative outcome or consequence of a scenario.\"\n  }\n\n  // Define a stereotype for risk scenarios\n  stereotype \"RiskScenario\" {\n    description = \"Represents a complete set of interrelated scenarios, causes, and failures.\"\n  }\n\n  // Define a block for the system\n  block System {\n    // Define an internal block for risk metadata\n    block RiskMetadata {\n      // Define an association between scenarios and causes\n      association Scenario -- Cause : \"ContributesTo\";\n\n      // Define an association between causes and failures\n      association Cause -- Failure : \"LeadsTo\";\n\n      // Define an association between scenarios and failures\n      association Scenario -- Failure : \"LeadsTo\";\n\n      // Define an association between risk scenarios and scenarios",
    "block: System\n  Property: batteryLevel\n    Type: Real\n  Property: batteryAging\n    Type: Real\n  Property: lowBatteryState\n    Type: Boolean\n  Property: deviceShutdown\n    Type: Boolean\n  Property: severityLevel\n    Type: String\n  \n  Requirement: REQ-001\n    Text: \"The system must be able to detect situations where the probability of battery failure increases due to aging or other factors.\"\n  Requirement: REQ-002\n    Text: \"When the battery level falls below the set minimum threshold, the system should determine that the equipment is in a 'low battery' state.\"\n  Requirement: REQ-003\n    Text: \"If the 'low battery' state persists for a prolonged period without recovery, the device may automatically shut down.\"\n  Requirement: REQ-004\n    Text: \"For high-level failures that may cause the interruption of critical device functions, the system should assign an appropriate severity level.\"\n\n  Constraint: CON-001\n    Text: \"batteryAging >= 0.0\"\n  Constraint: CON-002\n    Text: \"batteryLevel >=",
    "block: System\n  {\n    Property: \"Structural Decomposition Capability\"\n      Value: \"Top-down hierarchical structure\"\n    Property: \"Interface Definition\"\n      Value: \"Well-defined interfaces between components\"\n    Property: \"Verification and Validation\"\n      Value: \"Enables comprehension and verification of system integrity and modular design\"\n  }\n  \n  Block: Subsystem1\n    {\n      Property: \"Function\"\n        Value: \"Subsystem1 Function\"\n    }\n  \n  Block: Subsystem2\n    {\n      Property: \"Function\"\n        Value: \"Subsystem2 Function\"\n    }\n  \n  Interface: SystemInterface\n    {\n      Property: \"Purpose\"\n        Value: \"Defines interaction between System and external entities\"\n    }\n  \n  Connector: SystemToSubsystem1Connector\n    {\n      Property: \"Type\"\n        Value: \"Data Flow\"\n    }\n  \n  Connector: SystemToSubsystem2Connector\n    {\n      Property: \"Type\"\n        Value: \"Control Flow\"\n    }\nc",
    "block: System\n  {\n    Property: name \"Automotive System\"\n    Property: description \"System for managing functional and safety aspects of an automotive system.\"\n    \n    Block: RootComponent\n      {\n        Property: name \"Root Component\"\n        Property: description \"Top-level component of the automotive system.\"\n        \n        Block: SubSystem1\n          {\n            Property: name \"Subsystem 1\"\n            Property: description \"Description of Subsystem 1\"\n            \n            Block: Component1\n              {\n                Property: name \"Component 1\"\n                Property: description \"Description of Component 1\"\n                Property: safety_attribute \"Mandatory\"\n              }\n            \n            Block: Component2\n              {\n                Property: name \"Component 2\"\n                Property: description \"Description of Component 2\"\n                Property: safety_attribute \"Optional\"\n              }\n          }\n        \n        Block: SubSystem2\n          {\n            Property: name \"Subsystem 2\"\n            Property: description \"Description of Subsystem 2\"\n            \n            Block: Component3\n              {\n                Property: name \"Component 3",
    "block 汽车 {\n  alias \"Car\";\n  comment \"汽车 (Automobile)\";\n  \n  property Torque : Real;\n}\n```\n",
    "package DocumentManagementSystem {\n\n  // Core Object\n  class Automobile {\n    // Attributes\n    // ...\n  }\n\n  // Alias\n  alias Car for Automobile\n\n  // Physical Quantity Support\n  import PhysicalQuantitySystem\n\n  // Explanatory Documents\n  class Document {\n    // Attributes\n    // ...\n  }\n\n  // Association\n  Document ::has:: Automobile\n\n  // Association\n  Document ::has:: Car\n}\nc\n\n",
    "package AutomobileSystem {\n\n  // Define the Automobile class\n  class Automobile {\n    // Define attributes for the Automobile class\n    \n  }\n\n  // Define the TorqueValue class\n  class TorqueValue {\n    // Define attributes for the TorqueValue class\n  }\n\n  // Define aliases\n  alias Car for Automobile;\n  alias Torque for TorqueValue;\n}\nc\n\n",
    "cVehicle : Block {\n  size : String\n  engine : Engine\n}\n\nEngine : Block {\n  cylinderCount : Integer\n}\n\nBasicVehicle : Vehicle {\n  size : \"Standard\"\n}\n\nSmallVehicle : Vehicle {\n  size : \"Small\"\n}\n\nLargeVehicle : Vehicle {\n  size : \"Large\"\n}\n\nStandardEngine : Engine {\n  cylinderCount : 4\n}\n\nSmallEngine : Engine {\n  cylinderCount : 4\n}\n\nLargeEngine : Engine {\n  cylinderCount : 6\n}\n\nBasicVehicle.engine : StandardEngine\nSmallVehicle.engine : SmallEngine\nLargeVehicle.engine : LargeEngine\nc\n\n",
    "block fuel_management_system {\n  \n  Property fuel_flow_rate : Real;\n  Property fuel_temperature : Real;\n  \n  Interface fuel_interface {\n    FlowPort fuel_in;\n    FlowPort fuel_out;\n  }\n  \n  Block fuel_tank {\n    \n    Interface fuel_interface {\n      FlowPort fuel_in;\n      FlowPort fuel_out;\n    }\n  }\n  \n  Block engine {\n    \n    Interface fuel_interface {\n      FlowPort fuel_in;\n      FlowPort fuel_out;\n    }\n  }\n  \n  Requirement fuel_flow_management {\n    Description: \"The system shall be capable of managing fuel flow, ensuring that fuel can be delivered from the fuel tank to the engine and supporting fuel return.\";\n  }\n  \n  Requirement fuel_temperature_monitoring {\n    Description: \"During operation, the system shall monitor and manage the temperature of the fuel.\";\n  }\n  \n  Requirement fuel_interface_standardization {\n    Description: \"The fuel tank and the engine shall be connected via standardized fuel interfaces to ensure the reliability",
    "block Vehicle {\n  Property mass : Real = 1750;\n  \n  Block AxleAssembly {\n    Property axleType : String;\n    \n    Block Axle {\n      Property axleComponent : String;\n      \n      Block Wheel {\n        Property wheelName : String;\n      }\n      \n      Wheel wheel1;\n      Wheel wheel2;\n    }\n    \n    Axle frontAxle;\n    Axle rearAxle;\n  }\n  \n  AxleAssembly frontAxleAssembly;\n  AxleAssembly rearAxleAssembly;\n}\nc\n\n"
]