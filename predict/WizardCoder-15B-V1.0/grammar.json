[
    "\n\nVehicle : Component\n{\n  name : String;\n  mass : Real;\n  status : VehicleStatus;\n  engine : Engine;\n  driver : Driver;\n}\n\nVehicleStatus : Component\n{\n  gear : Integer;\n  accelerator : Real;\n}\n\nEngine : Component\n{\n  type : String;\n  fuel : FuelType;\n  capacity : Real;\n  efficiency : Real;\n}\n\nDriver : Personnel\n{\n  name : String;\n  age : Integer;\n  gender : Gender;\n  education : EducationLevel;\n  experience : Integer;\n  skills : SkillSet;\n}\n\nFuelType : Enumeration\n{\n  gasoline,\n  diesel,\n  electric,\n  hybrid\n}\n\nGender : Enumeration\n{\n  male,\n  female,\n  other\n}\n\nEducationLevel : Enumeration\n{\n  highschool,\n  bachelors,\n  masters,\n  doctorate\n}\n\nSkillSet : Component\n{\n  driving : Real;\n  handling : Real;\n  acceleration : Real;\n  braking : Real;\n  safety : Real;\n}\n\n––––––––––––––––––––––––––––––––––\n\nExplanation:\n\nThe input requirement is a high-level description of",
    "\n\nentity Vehicle {\n  ownedBy : Personnel;\n  hasPowerDevice : Engine;\n  isPowered : boolean;\n  isManuallyOperated : boolean;\n}\n\nentity Personnel {\n  drives : Vehicle;\n}\n\nentity Engine {\n  poweredBy : Vehicle;\n}\n\nrelationship OneToOne {\n  Personnel.drives -> Vehicle;\n  Engine.poweredBy -> Vehicle;\n}\n\nrelationship OneToMany {\n  Vehicle.ownedBy -> Personnel;\n  Vehicle.hasPowerDevice -> Engine;\n}\n\nattribute boolean isPowered;\nattribute boolean isManuallyOperated;\n\n––––––––––––––––––––––––––––––––––\n\nInput Requirement:\nThe system must be able to handle different types of vehicles, such as cars, trucks, and buses. Each vehicle type has its own set of attributes, such as weight, length, and number of seats. The system must be able to handle different types of fuel, such as gasoline, diesel, and electricity. Each fuel type has its own set of attributes, such as efficiency, range, and cost. The system must be able to handle different types of power devices, such as battery, generator, and solar panel. Each",
    "\n\nVehicleStructure : Component {\n  components : Component [1..*]\n}\n\nComponent : Entity {\n  name : String [1..1]\n  description : String [0..1]\n  quantity : Integer [1..1]\n}\n\nEngine : Component {\n  type : String [1..1]\n  fuelType : String [1..1]\n  horsepower : Integer [1..1]\n}\n\nTransmission : Component {\n  type : String [1..1]\n  gears : Integer [1..1]\n}\n\nWheel : Component {\n  type : String [1..1]\n  diameter : Real [1..1]\n  width : Real [1..1]\n}\n\nVehicle : VehicleStructure {\n  name : String [1..1]\n  description : String [0..1]\n  quantity : Integer [1..1]\n  components : Component [1..*] {\n    Engine [1..1]\n    Transmission [1..1]\n    Wheel [4..4]\n  }\n}\n\n––––––––––––––––––––––––––––––––––\n\nInput Requirement:\nThe system needs to support the definition and management of vehicle maintenance plans. Each maintenance plan should",
    "\n\nVehicleType : smallVehicle | largeVehicle;\n\nsmallEngine : smallEngineComponent;\n\nlargeEngine : largeEngineComponent;\n\nsmallEngineComponent : 4 cylinders;\n\nlargeEngineComponent : 6 cylinders;\n\nVehicle : smallVehicle | largeVehicle;\n\nsmallVehicle : smallEngine;\n\nlargeVehicle : largeEngine;",
    "\n\n```\npackage trafficSignalSystem {\n  component TrafficSignal {\n    signal color : {green, yellow, red};\n    state green : {true};\n  }\n  component GreenTrafficSignal extends TrafficSignal {\n    state green : {true};\n  }\n}\n```",
    "\n\n```\npackage \"Classification Management System\" {\n  class \"Information\" {\n    attribute \"Code\" : String\n    attribute \"Color\" : String\n  }\n  class \"Grade\" {\n    attribute \"Level\" : String\n    attribute \"Score\" : Double\n  }\n  class \"Classification\" {\n    attribute \"Information\" : Information\n    attribute \"Grade\" : Grade\n  }\n  class \"Classification Management System\" {\n    operation \"Classify Information\" {\n      parameter \"Information\" : Information\n      parameter \"Grade\" : Grade\n      parameter \"Classification\" : Classification\n    }\n  }\n}\n```\r\n\r\nExplanation:\r\n\r\nThe system model consists of three classes: `Information`, `Grade`, and `Classification`. The `Information` class has two attributes: `Code` and `Color`. The `Grade` class has two attributes: `Level` and `Score`. The `Classification` class has two attributes: `Information` and `Grade`. The `Classification Management System` class has one operation: `Classify Information`. The operation takes three parameters: `Information`, `Grade`, and `Classification`, and returns a `Classification` object.",
    "\n\nVehicleType : smallVehicle | largeVehicle\n\nEngine : smallEngine | largeEngine\n\nSmallEngine : 4 cylinderEngine\n\nLargeEngine : 6 cylinderEngine\n\ncylinderEngine : cylinder [+ cylinder]\n\ncylinder : cylinderType [+ cylinderType]\n\ncylinderType : cylinder1 | cylinder2 | cylinder3 | cylinder4 | cylinder5 | cylinder6\n\ncylinder1 : Cylinder1\n\ncylinder2 : Cylinder2\n\ncylinder3 : Cylinder3\n\ncylinder4 : Cylinder4\n\ncylinder5 : Cylinder5\n\ncylinder6 : Cylinder6\n\nVehicle : smallVehicle | largeVehicle\n\nsmallVehicle : SmallEngine\n\nlargeVehicle : LargeEngine\n\n––––––––––––––––––––––––––––––––––\n\nExplanation:\n\nThe input requirement specifies that the system includes two types of vehicles, small vehicles and large vehicles. Each type of vehicle is equipped with an engine, and each engine consists of several cylinders. The engine of a small vehicle has 4 cylinders, while the engine of a large vehicle has 6 cylinders. Each cylinder,",
    "\n\nentity Vehicle {\n  attribute String modelName;\n  attribute String manufacturer;\n  attribute String modelYear;\n  attribute String fuelType;\n  attribute Integer fuelCapacity;\n  attribute Integer numPassengers;\n  attribute String driverName;\n  attribute String driverLicenseNumber;\n  attribute String driverPhone;\n  attribute String driverEmail;\n  attribute String fuelTankType;\n  attribute Integer fuelTankCapacity;\n  attribute Boolean isPreOwned;\n  attribute Boolean isRegistered;\n  attribute Boolean isInsured;\n  attribute Boolean isAccidentFree;\n  attribute Boolean isAccidentFreeSinceYear;\n  attribute Boolean isAccidentFreeSinceDate;\n  attribute Boolean isAccidentFreeSinceLocation;\n  attribute Boolean isAccidentFreeSinceDescription;\n  attribute Boolean isAccidentFreeSinceDescription;\n  attribute Boolean isAccidentFreeSinceDescription;\n  attribute Boolean isAccidentFreeSinceDescription;\n  attribute Boolean isAccidentFreeSinceDescription;\n  attribute Boolean isAccidentFreeSinceDescription;\n  attribute Boolean isAccidentFreeSinceDescription;\n  attribute Boolean isAccidentFreeSinceDescription;\n  attribute Boolean isAccidentFreeSinceDescription;\n  attribute Boolean isAccidentFreeSinceDescription;\n  attribute Boolean isAccidentFreeSinceDescription;\n  attribute Boolean isAccidentFreeSince",
    "\n\nAutomobile Wheel Assembly Structure:\n\n- Wheel Bearing Unit:\n  - Bead:\n  - Hub:\n    - Threaded Hole:\n    - Bolt Connection:\n      - Bolt:\n      - Mounting Hole:\n- Tire:\n  - Sealed:\n  - Fastened:\n    - Bead:\n    - Rim:\n      - Bolt Connection:\n        - Bolt:\n        - Mounting Hole:\n\nNote: The above model is a simplified representation of the actual system, and does not include all the necessary details or relationships.",
    "\n\nSystem FuelFlowManagementSystem {\n  component FuelTank {\n    property Real volume\n    property Real temperature\n    operation supplyFuel(Real quantity)\n    operation returnFuel(Real quantity)\n  }\n  component Engine {\n    property Real fuelFlowRate\n    operation start()\n    operation stop()\n  }\n  connector FuelSupply {\n    source FuelTank.supplyFuel\n    destination Engine.fuelFlowRate\n  }\n  connector FuelReturn {\n    source Engine.fuelFlowRate\n    destination FuelTank.returnFuel\n  }\n  interface TemperatureSensor {\n    operation measureTemperature()\n  }\n  interface TemperatureTransmitter {\n    operation transmitTemperature(Real temperature)\n  }\n  interface FuelFlowMonitoring {\n    operation monitorFuelFlow()\n  }\n  interface FuelFlowControl {\n    operation controlFuelFlow(Real flowRate)\n  }\n  interface UserInterface {\n    operation displayFuelFlowStatus()\n    operation displayTemperatureStatus()\n  }\n  FuelTank.volume = 100\n  FuelTank.temperature = 25\n  Engine.fuelFlowRate = 0\n  TemperatureSensor.measureTemperature()\n  TemperatureTransmitter.transmitTemperature(25)\n  FuelFlowMonitoring.monitorFuelFlow()\n  FuelFlowControl.controlFuelFlow",
    "\n\n```\npackage \"Vehicle Configuration Model\" {\n  class \"Vehicle\" {\n    attribute \"mass\" {\n      type \"Real\"\n      multiplicity \"*\"\n      defaultValue 1750\n    }\n    attribute \"frontAxle\" {\n      type \"Axle\"\n      multiplicity \"1\"\n      defaultValue \"FrontAxle\"\n    }\n    attribute \"rearAxle\" {\n      type \"Axle\"\n      multiplicity \"1\"\n      defaultValue \"RearAxle\"\n    }\n    operation \"getMass\" {\n      parameter \"unit\" {\n        type \"String\"\n        defaultValue \"kg\"\n      }\n      return \"Real\"\n    }\n    operation \"getAxle\" {\n      parameter \"side\" {\n        type \"String\"\n        defaultValue \"front\"\n      }\n      return \"Axle\"\n    }\n  }\n  class \"Axle\" {\n    attribute \"tires\" {\n      type \"OrderedSet<Tire>\"\n      multiplicity \"*\"\n      defaultValue \"Tire1, Tire2\"\n    }\n    attribute \"steeringAngle\" {\n      type \"Real\"\n      multiplicity \"1\"\n      defaultValue 0\n    }\n    operation \"getTire\" {\n      parameter \"index\" {\n        type \"Integer\"\n        defaultValue 1\n     ",
    "\n\nVehicle:\n\nVehicle [c1]\n  - couplingMechanism [c2]\n    - hitch [c3]\n      - couplingBall [c4]\n\nTrailer:\n\nTrailer [c5]\n  - couplingMechanism [c6]\n    - hitch [c7]\n      - couplingBall [c8]\n\nCouplingMechanism:\n\nCouplingMechanism [c9]\n  - hitch [c10]\n    - couplingBall [c11]\n\nCouplingBall:\n\nCouplingBall [c12]\n\nHitch:\n\nHitch [c13]\n  - couplingBall [c14]\n\nNote: The above model is a simplified version of the actual system model, and does not include all the necessary details.",
    "\n\nSystem Requirements:\n\nThe system requirements are described as follows: This project aims to design and model a typical vehicle power transmission system, mainly including the engine, transmission (gearbox), clutch, driveshaft, rear axle assembly (including differential and left/right half-shafts), wheels, and the interface for interaction with the road surface. The engine receives control signals via a fuel command port and is coupled to the transmission through power and clutch ports. Power is transmitted via the driveshaft to the rear axle assembly. The rear axle assembly includes a differential that connects separately to the left and right half-shafts, delivering power to the rear wheels through interfaces between the shafts and wheels. Each rear wheel is equipped with interfaces to both the rear axle and the road, enabling power output to the ground. The interfaces between the internal components of the system are clearly defined, allowing for flexible combination and hierarchical decomposition at various levels and within major assemblies. This supports port and component binding, redefinition, and multi-level nesting, ensuring clear transmission of power and command flows among the components. The system is designed to be modular and reconfigurable, meeting the needs of vehicle dynamics modeling,",
    "\n\nsystem IntegratedManagementSystem {\n  subsystem b11 {\n    component c1 {\n      interface pb {\n        operation op1();\n        signal sig1();\n      }\n      interface pe {\n        operation op2();\n        signal sig2();\n      }\n    }\n    component c2 {\n      interface pb {\n        operation op3();\n        signal sig3();\n      }\n      interface pe {\n        operation op4();\n        signal sig4();\n      }\n    }\n  }\n  subsystem b12 {\n    component c3 {\n      interface pd {\n        operation op5();\n        signal sig5();\n      }\n      interface pf {\n        operation op6();\n        signal sig6();\n      }\n    }\n    component c4 {\n      interface pd {\n        operation op7();\n        signal sig7();\n      }\n      interface pf {\n        operation op8();\n        signal sig8();\n      }\n    }\n  }\n  module b21 {\n    component c1 {\n      interface pb {\n        operation op1();\n        signal sig1();\n      }\n      interface pe {\n        operation op2();\n        signal sig2();\n      }\n    }\n    component c2 {\n      interface pb {\n        operation op3();\n        signal sig3();\n      }\n      interface pe {\n        operation op4();\n       ",
    "\n\n```\n@startuml\n\npackage \"Powertrain\" {\n  component \"Fuel Command\" {\n    interface \"Fuel Command Interface\"\n    entity \"Fuel Command\"\n  }\n  component \"Engine Control\" {\n    interface \"Engine Control Interface\"\n    entity \"Engine Control\"\n  }\n  component \"Power Transmission\" {\n    interface \"Power Transmission Interface\"\n    entity \"Power Transmission\"\n  }\n  component \"Driveshaft\" {\n    interface \"Driveshaft Interface\"\n    entity \"Driveshaft\"\n  }\n  component \"Wheels\" {\n    interface \"Wheel Interface\"\n    entity \"Wheel\"\n  }\n  entity \"Vehicle\" {\n    aggregation \"Fuel Command\"\n    aggregation \"Engine Control\"\n    aggregation \"Power Transmission\"\n    aggregation \"Driveshaft\"\n    aggregation \"Wheels\"\n  }\n}\n\n@enduml\n```",
    "\n\npowertrainControlSystem : PowertrainControlSystem {\n  input : PowertrainControlSystemInput\n  output : PowertrainControlSystemOutput\n  subsystem : PowertrainControlSubsystem\n}\n\nPowertrainControlSystemInput : PowertrainControlSystemInput {\n  fuelControlCommand : FuelControlCommand\n  engineStartCommand : EngineStartCommand\n  stallSignal : StallSignal\n}\n\nFuelControlCommand : FuelControlCommand {\n  fuelAmount : FuelAmount\n  fuelPressure : FuelPressure\n  fuelTemperature : FuelTemperature\n}\n\nEngineStartCommand : EngineStartCommand {\n  engineStart : EngineStart\n}\n\nStallSignal : StallSignal {\n  stall : Stall\n}\n\nPowertrainControlSystemOutput : PowertrainControlSystemOutput {\n  torque : Torque\n  wheelOutputTorque : WheelOutputTorque\n  engineSpeed : EngineSpeed\n  engineOilTemperature : EngineOilTemperature\n  engineCoolantTemperature : EngineCoolantTemperature\n  engineLoad : EngineLoad\n  engineRpm : EngineRpm\n  engineTorquePercent : EngineTorquePercent\n  enginePower : EnginePower\n  engineVoltage : EngineVoltage\n  engineCurrent : EngineCurrent\n  engineCoolantPressure : EngineCoolant",
    "\n\nVehiclePowertrainSystem:\n  - Engine: Engine\n  - Transmission: Transmission\n  - Wheels: Wheel[]\n  - PowerOutput: PowerOutput\n\nEngine:\n  - EngineOutputTorque: Real\n  - FuelCommand: Real\n  - EngineStartSignal: Boolean\n  - EngineShutdownSignal: Boolean\n\nTransmission:\n  - TransmissionTorque: Real\n  - WheelTorques: Real[]\n  - TransmissionStartSignal: Boolean\n  - TransmissionShutdownSignal: Boolean\n\nWheel:\n  - WheelTorque: Real\n  - WheelSpeed: Real\n\nPowerOutput:\n  - PowerOutput: Real\n  - EngineShutdownSignal: Boolean\n\n––––––––––––––––––––––––––––––––––\n\nInput Requirement:\nThe system must be able to identify and manage the vehicle's fuel consumption based on the driver's input command. The system should be able to accurately predict the vehicle's fuel consumption based on the current engine output torque, fuel command, and vehicle speed. The system should also be able to manage the fuel consumption by adjusting the engine output torque and/or the fuel command based on the predicted fuel consumption. This ensures that the vehicle performs automatic control accurately and efficiently in terms of fuel",
    "\n\nSystem Power Connection and Disconnection Mechanism:\n\nVehicle Structural Frame:\n\nVehicle Hitch Ball:\n\nTrailer Structural Frame:\n\nTrailer Coupler:\n\nPower Connection and Disconnection Mechanism:\n\nVehicle Hitching Mechanism:\n\nTrailer Hitching Mechanism:\n\nVehicle Disconnection Mechanism:\n\nTrailer Disconnection Mechanism:\n\nUser Interface:\n\nUser Input:\n\nUser Output:\n\nUser Feedback:\n\nUser Interface:\n\nUser Input:\n\nUser Output:\n\nUser Feedback:",
    "\n\nentity Vehicle {\n  attribute String make;\n  attribute String model;\n  attribute String year;\n  attribute String color;\n  attribute Boolean isConnectedToTrailer;\n}\n\nentity Trailer {\n  attribute String make;\n  attribute String model;\n  attribute String year;\n  attribute String color;\n  attribute Boolean isConnectedToVehicle;\n}\n\nrelationship Connects {\n  source Vehicle;\n  target Trailer;\n  attribute Boolean isConnected;\n}\n\nentity Chassis {\n  attribute String make;\n  attribute String model;\n  attribute String year;\n  attribute String color;\n  attribute Boolean hasTowBall;\n}\n\nentity TowBall {\n  attribute String make;\n  attribute String model;\n  attribute String year;\n  attribute String color;\n  attribute Boolean isConnectedToChassis;\n}\n\nrelationship Connects {\n  source Chassis;\n  target TowBall;\n  attribute Boolean isConnected;\n}\n\nentity Coupler {\n  attribute String make;\n  attribute String model;\n  attribute String year;\n  attribute String color;\n  attribute Boolean isConnectedToTrailerFrame;\n}\n\nentity TrailerFrame {\n  attribute String make;\n  attribute String model;\n  attribute String year;\n  attribute",
    "\n\n```\npackage \"Dynamic Connection Reference Model\" {\n  component \"Vehicle\" {\n    property \"tow_ball_device\" {\n      type \"Boolean\"\n      default false\n    }\n  }\n  component \"Trailer\" {\n    property \"trailer_chassis\" {\n      type \"Boolean\"\n      default false\n    }\n    property \"coupler_mechanism\" {\n      type \"Boolean\"\n      default false\n    }\n  }\n  component \"User\" {\n    operation \"connect_trailer\" {\n      parameter \"trailer\" {\n        type \"Trailer\"\n      }\n      parameter \"vehicle\" {\n        type \"Vehicle\"\n      }\n      parameter \"hitch\" {\n        type \"Boolean\"\n        default false\n      }\n      parameter \"engage_coupler\" {\n        type \"Boolean\"\n        default false\n      }\n      parameter \"lock_trailer\" {\n        type \"Boolean\"\n        default false\n      }\n      parameter \"unlock_trailer\" {\n        type \"Boolean\"\n        default false\n      }\n    }\n    operation \"disconnect_trailer\" {\n      parameter \"trailer\" {\n        type \"Trailer\"\n      }\n      parameter \"vehicle\" {\n        type \"Vehicle\"\n      }\n      parameter \"unhitch\" {\n        type",
    "\n\nSystem FuelSystem {\n  FuelTank fuelTank\n  Engine engine\n  FuelSupplyPort fuelSupplyPort\n  FuelReturnPort fuelReturnPort\n  FuelFlowProcess fuelFlowProcess\n  FuelSystemInterface fuelSystemInterface\n\n  FuelTankAssembly fuelTankAssembly\n  FuelTankAssemblyInterface fuelTankAssemblyInterface\n\n  FuelSupply fuelSupply\n  FuelReturn fuelReturn\n\n  FuelTemperatureMonitor fuelTemperatureMonitor\n\n  fuelSupplyPort -> fuelTankAssemblyInterface\n  fuelTankAssemblyInterface -> fuelTank\n  fuelTank -> engine\n  engine -> fuelReturnPort\n  fuelReturnPort -> fuelTank\n  fuelFlowProcess -> fuelSupply\n  fuelFlowProcess -> fuelReturn\n  fuelSupply -> fuelTank\n  fuelReturn -> fuelTank\n  fuelTemperatureMonitor -> fuelSupply\n  fuelTemperatureMonitor -> fuelReturn\n}\n\nFuelTank {\n  FuelLevel fuelLevel\n  FuelTemperature fuelTemperature\n  FuelFlow fuelFlow\n  FuelTankInterface fuelTankInterface\n\n  fuelTankInterface -> fuelSupplyPort\n  fuelTankInterface -> fuelReturnPort\n}\n\nEngine {\n  EngineInterface engineInterface\n  EngineTemperature engineTemperature\n  EngineRPM engineRPM\n  EngineLoad engineLoad\n\n  engineInterface -> fuelSupplyPort\n  engineInterface -> fuelReturnPort\n}\n\n",
    "\n\nSystem: Vehicle Fuel Management System\n\nEntities:\n- Vehicle: A vehicle that requires fuel management.\n- Fuel Tank: A tank that stores and delivers fuel to the vehicle.\n- Fuel Pump: A device that extracts fuel from the storage tank and delivers it to the fuel tank.\n- Storage Tank: A tank that stores fuel for the vehicle to extract.\n\nRelationships:\n- Vehicle has a Fuel Tank: The fuel tank is the vehicle’s primary fuel storage and delivery device.\n- Fuel Tank has a Fuel Pump: The fuel pump is the device that extracts fuel from the storage tank and delivers it to the fuel tank.\n- Fuel Pump has a Storage Tank: The storage tank is the source of fuel for the fuel pump to extract.\n\nFunctionalities:\n- Monitor Fuel Level: The system must be able to monitor the current fuel level in real-time, both for the storage tank and the fuel tank.\n- Adjust Fuel Level: The system must be able to adjust the fuel level in real-time, both for the storage tank and the fuel tank.\n- Adjust Fuel Delivery: The",
    "\n\nSystem: Automobile Assembly Process Model\n\nEntities:\n- Vehicle Assembly: The vehicle assembly to be assembled, without a gearbox and engine.\n- Gearbox Assembly: The gearbox assembly to be installed onto the vehicle assembly.\n- Engine Assembly: The engine assembly to be installed onto the vehicle with the gearbox.\n- Assembled Vehicle: The fully assembled vehicle, with independent, functional gearbox and engine units.\n\nRelationships:\n- Vehicle Assembly -> Gearbox Assembly: The vehicle assembly is the input to the gearbox assembly.\n- Gearbox Assembly -> Engine Assembly: The gearbox assembly is the input to the engine assembly.\n- Engine Assembly -> Assembled Vehicle: The engine assembly is the input to the assembled vehicle.\n\nFunctionalities:\n- Gearbox Assembly: Installs the gearbox onto the vehicle assembly.\n- Engine Assembly: Installs the engine onto the vehicle with the gearbox.\n- Assembled Vehicle: Provides independent, functional gearbox and engine units.\n\nConstraints:\n- The gearbox assembly must be installed before the engine assembly.\n- The engine assembly must be installed",
    "\n\nVehicleA: Vehicle\n\nVehicleA has:\n\n- VehicleA.StartUp: StartUp\n- VehicleA.Operation: Operation\n- VehicleA.HealthMonitoring: HealthMonitoring\n- VehicleA.AutomaticControl: AutomaticControl\n\nStartUp: StartUpState\n\nStartUpState has:\n\n- StartUpState.Off: OffState\n- StartUpState.Starting: StartingState\n\nOffState: State\n\nOffState has:\n\n- OffState.BrakePedalPressed: BrakePedalPressedEvent\n- OffState.StartSignalReceived: StartSignalReceivedEvent\n\nStartingState: State\n\nStartingState has:\n\n- StartingState.VehicleOnSignalReceived: VehicleOnSignalReceivedEvent\n- StartingState.Running: RunningState\n\nRunningState: State\n\nRunningState has:\n\n- RunningState.SelfCheck: SelfCheckActivity\n- RunningState.SupplyPower: SupplyPowerActivity\n- RunningState.ParkingBrake: ParkingBrakeActivity\n\nHealthMonitoring: HealthMonitoringState\n\nHealthMonitoringState has:\n\n- HealthMonitoringState.Normal: NormalState\n- HealthMonitoringState.Degraded: DegradedState",
    "\n\nSystem: Automated Vehicle Behavior Modeling System\n\nEntities:\n- Vehicle: represents the vehicle and its components, including the vehicle controller, sensors, actuators, and other components.\n- Vehicle Controller: receives and processes control and status signals from the vehicle, enabling automatic control operations such as starting and shutting down.\n\nRelationships:\n- Vehicle is composed of Vehicle Controller, Sensors, Actuators, and other components.\n- Vehicle Controller receives and processes control and status signals from the vehicle.\n- Sensors sense temperature in real time, and when overheating is detected, it automatically sends a warning signal to the vehicle controller, switches the vehicle status to degraded mode, and ensures safety.\n- Actuators enable automatic control operations such as starting and shutting down.\n- The overall system supports configuration of attributes such as fuel, maintenance intervals, and temperature thresholds, thereby achieving intelligent, safe, and efficient management of vehicle operation processes.\n\nConstraints:\n- The system must be designed to enable automated modeling of vehicle behavior, primarily comprising two core components: the vehicle and the vehicle controller.\n- The vehicle must be capable of autonomously managing its operation and health status",
    "\n\nSystem: Dynamic Vehicle Simulation System\n\nEntities:\n- Road: A road is a physical feature that connects two or more points.\n- Vehicle: A vehicle is a mobile object that moves through the road.\n- Simulation Time Series: A sequence of time points at which the vehicle’s state is recorded.\n- Snapshot: A snapshot is a record of the vehicle’s state at a specific time point within the simulation time series.\n\nRelationships:\n- Vehicle is on Road: A vehicle is located on a road.\n- Vehicle has Mass: A vehicle has a mass attribute.\n- Vehicle has Position: A vehicle has a position attribute.\n- Vehicle has Velocity: A vehicle has a velocity attribute.\n- Vehicle has Acceleration: A vehicle has an acceleration attribute.\n- Road has Slope: A road has a slope attribute.\n- Road has Friction Coefficient: A road has a friction coefficient attribute.\n- Simulation Time Series has Snapshots: A simulation time series has a sequence of snapshots.\n- Snapshot is taken at Time Point: A snapshot is taken at a specific time point within the simulation time series.\n- Snapshot has Vehicle State: A snapshot has a record of the vehicle’",
    "\n\npackage automotive_product_configuration_management {\n  component SubsystemA {\n    configuration Option1 {\n      Component1\n      Component2\n    }\n    configuration Option2 {\n      Component2\n      Component3\n    }\n    select one implementation {\n      Option1\n      Option2\n    }\n  }\n  component SubsystemB {\n    configuration Option1 {\n      Component4\n      Component5\n    }\n    configuration Option2 {\n      Component5\n      Component6\n    }\n    select one implementation {\n      Option1\n      Option2\n    }\n  }\n  component Vehicle {\n    select one configuration {\n      ConfigurationA\n      ConfigurationB\n    }\n    constraint {\n      if (configuration = ConfigurationA) then (SubsystemA.implementation = Option2 and SubsystemB.implementation = Option2)\n      else (SubsystemA.implementation != Option2 or SubsystemB.implementation != Option2)\n    }\n  }\n  configuration ConfigurationA {\n    SubsystemA.implementation = Option1\n    SubsystemB.implementation = Option2\n  }\n  configuration ConfigurationB {\n    SubsystemA.implementation = Option2\n    SubsystemB.implementation = Option2\n  }\n}",
    "\n\n// Define the system as a whole\r\nsystem VehiclePlatformSystem {\r\n  // Define the subsystems and their components\r\n  subsystem SubsystemA {\r\n    component part1 {\r\n      // Define the ports of the component\r\n      port p1 {\r\n        // Define the behavioral variants of the port\r\n        behavioralVariant variant1 {\r\n          // Define the behavior of the port in variant1\r\n        }\r\n        behavioralVariant variant2 {\r\n          // Define the behavior of the port in variant2\r\n        }\r\n      }\r\n    }\r\n    component part2 {\r\n      // Define the ports of the component\r\n      port p1 {\r\n        // Define the behavioral variants of the port\r\n        behavioralVariant variant1 {\r\n          // Define the behavior of the port in variant1\r\n        }\r\n        behavioralVariant variant2 {\r\n          // Define the behavior of the port in variant2\r\n        }\r\n      }\r\n    }\r\n    component part3 {\r\n      // Define the ports of the component\r\n      port p1 {\r\n        // Define the behavioral variants of the port\r\n        behavioralVariant variant1 {\r\n          // Define the behavior of the port in variant1\r\n        }\r\n        behavioralVariant variant2 {\r\n          // Define the behavior of the port in variant2\r\n        }\r\n      }\r\n    }\r\n    component part4 {\r\n      // Define the",
    "\n\nSystem: Vehicle Configuration System\n\nEntities:\n- Vehicle: A vehicle that can be configured by the system.\n- Engine: An engine that can be used in a vehicle.\n- Transmission: A transmission that can be used in a vehicle.\n- Wheel: A wheel that can be used in a vehicle.\n- Configuration: A combination of engine, transmission, and wheel that can be used in a vehicle.\n- User: A person who interacts with the system.\n- Customer: A customer who orders a vehicle configuration.\n- Supplier: A supplier who supplies the system with engines, transmissions, and wheels.\n\nRelationships:\n- Configuration is composed of Engine, Transmission, and Wheel.\n- User interacts with the system through Customer.\n- Supplier supplies the system with Engine, Transmission, and Wheel.\n- Customer orders a Configuration from the system.\n- Configuration is assigned to a Vehicle.\n\nConstraints:\n- Each Configuration must be compatible with the Vehicle's engine, transmission, and wheels.\n- Each Configuration must meet the Vehicle's performance requirements.\n- The system must offer multiple vehicle model variants.\n- The system must be flexible enough",
    "\n\nSystem: Automobile Requirements Management System\n\nEntities:\n- Vehicle: represents a specific automobile, with attributes such as mass, fuel status, powertrain, and reliability.\n- Engine: represents the engine of a vehicle, with attributes such as torque output, efficiency, and reliability.\n- Transmission: represents the transmission of a vehicle, with attributes such as gear ratio, torque output, and reliability.\n- Drive Interface: represents the interface between the engine and transmission, with attributes such as type, size, and reliability.\n\nRelationships:\n- Vehicle has one Engine, one Transmission, and one Drive Interface.\n- Engine has one Drive Interface.\n- Transmission has one Drive Interface.\n\nAttributes:\n- Vehicle:\n  - Mass: the mass of the vehicle, in kilograms.\n  - Fuel Status: the current fuel status of the vehicle, such as fully fueled or empty-fuel.\n  - Powertrain: the type of powertrain of the vehicle, such as diesel, hybrid, or electric.\n  - Reliability: the level of reliability of the vehicle, such as high, medium, or low.\n- Engine:",
    "\n\nSystem: Vehicle Mass Compliance Verification System\n\nEntities:\n- Vehicle: represents a vehicle that is subject to mass compliance verification.\n- Test Operator: represents the operator who operates the weighing equipment to measure the actual mass of the vehicle.\n- Weighing Equipment: represents the weighing equipment used to measure the actual mass of the vehicle.\n- Maximum Permissible Mass: represents the maximum permissible mass that is allowed for the vehicle.\n\nRelationships:\n- Compliance: represents the relationship between a vehicle and its compliance status.\n- Measured Mass: represents the relationship between a vehicle and its measured mass.\n- Actual Mass: represents the relationship between a vehicle and its actual mass.\n\nActivities:\n- Measure Mass: represents the activity of measuring the actual mass of a vehicle using the weighing equipment operated by the test operator.\n- Compare Mass: represents the activity of comparing the measured mass with the required value (e.g., a maximum permissible mass of 2,500 kilograms) to determine the compliance status of the vehicle.\n\nConstraints:\n- Maximum Permissible Mass: represents the constraint that the maximum per",
    "\n\nentity SpigotBank {\n  -- attributes\n  name : String\n  -- operations\n  connectTo(Faucet) : Boolean\n  deliverWater(FaucetInlet, FaucetInlet) : Boolean\n}\n\nentity Faucet {\n  -- attributes\n  name : String\n  -- operations\n  connectTo(SpigotBank) : Boolean\n  connectTo(FaucetInlet) : Boolean\n  deliverWater(FaucetInlet, FaucetInlet) : Boolean\n}\n\nentity FaucetInlet {\n  -- attributes\n  name : String\n  -- operations\n  connectTo(Faucet) : Boolean\n  deliverWater(Water) : Boolean\n}\n\nentity Water {\n  -- attributes\n  temperature : Real\n  -- operations\n  flow(Real) : Boolean\n}\n\nentity Pipe {\n  -- attributes\n  length : Real\n  diameter : Real\n  -- operations\n  connectTo(Pipe) : Boolean\n  deliverWater(Water) : Boolean\n}\n\nentity Valve {\n  -- attributes\n  position : Real\n  -- operations\n  connectTo(Pipe) : Boolean\n  control(Real) : Boolean\n}\n\nentity ControlValve {\n  -- attributes\n  position : Real\n ",
    "\n\nSystem: Vehicle Quality Analysis System\n\nEntities:\n- Vehicle: represents a vehicle and its key components, including the engine, transmission, front axle assembly, and rear axle assembly.\n- Component: represents a vehicle component, such as the engine, transmission, front axle assembly, or rear axle assembly.\n- Quality Data: represents the input data for each component, including the component's weight, dimensions, and other relevant attributes.\n- Analysis Use Case: represents the use case for analyzing the quality of a vehicle, including the analysis objectives, requirements, and constraints.\n- Analysis Task: represents the individual tasks involved in analyzing the quality of a vehicle, including the component to be analyzed, the data to be used, and the analysis method to be used.\n- Analysis Plan: represents the plan for analyzing the quality of a vehicle, including the analysis tasks, resources, and schedule.\n\nRelationships:\n- Vehicle has-many Component: a vehicle has multiple components, such as the engine, transmission, front axle assembly, and rear axle assembly.\n- Component has-many Quality Data: a component has multiple quality data points, such as the weight, dimensions, and other relevant attributes.",
    "\n\nSystem: Vehicle Powertrain Configuration Optimization System\n\nStakeholders:\n- Manufacturer: The manufacturer of the vehicle\n- Vehicle owner: The owner of the vehicle\n- Engine designer: The engineer who designs the engine\n- Vehicle salesman: The sales representative of the vehicle\n\nUse Cases:\n- As a manufacturer, I want to select the best engine configuration for my vehicle based on multiple key performance indicators, including power, mass, efficiency, reliability, and cost.\n- As an engine designer, I want to model different engine structures (such as four-cylinder engines, six-cylinder engines, etc.) and automatically assemble related components, including cylinders, pistons, connecting rods, and crankshafts.\n- As a vehicle owner, I want to view explanations on the rationality of the engine selection, ensuring decision transparency and traceability.\n- As a vehicle salesman, I want to understand the trade-off analysis method used by the system, and be able to provide feedback on the recommended engine solution.\n\nEntities:\n- Engine: The vehicle's engine, which consists of a number of components such as cylinders, pistons, connecting ro",
    "\n\nSystem: Vehicle Fuel Economy System\r\n\r\nEntities:\r\n- Vehicle: represents the vehicle being tested for fuel economy.\r\n- Fuel Economy Test: represents the process of conducting a fuel economy test on the vehicle.\r\n- Fuel Economy Result: represents the result of the fuel economy test, including the vehicle’s fuel economy and the conditions under which it was measured.\r\n\r\nRelationships:\r\n- Vehicle is tested for fuel economy by Fuel Economy Test.\r\n- Fuel Economy Test produces Fuel Economy Result.\r\n\r\nAttributes:\r\n- Vehicle:\r\n  - Vehicle Type: represents the type of vehicle being tested for fuel economy, such as a car, truck, or SUV.\r\n  - Vehicle Powertrain: represents the powertrain of the vehicle, such as a hybrid or electric vehicle.\r\n  - Vehicle Load: represents the load applied to the vehicle during the fuel economy test, such as 1,000 pounds.\r\n  - Vehicle Operating Conditions: represents the operating conditions under which the fuel economy test was conducted, such as urban or highway driving.\r\n- Fuel Economy Test:\r\n ",
    "\n\nSystem: Vehicle Dynamics Simulation System\r\n\r\nEntities:\r\n- Vehicle: A vehicle with mass parameters, initial position, initial velocity, and a set of segmented power output data.\r\n- Time Step: The time interval between consecutive calculations of the vehicle's acceleration, velocity, and position.\r\n- Acceleration: The rate of change of velocity with respect to time.\r\n- Velocity: The distance travelled per unit time.\r\n- Position: The distance traveled from the initial position.\r\n\r\nRelationships:\r\n- The Vehicle has a mass parameter, initial position, initial velocity, and a set of segmented power output data.\r\n- The Time Step is specified by the user.\r\n- The Acceleration, Velocity, and Position are calculated based on the input power and operating conditions.\r\n\r\nConstraints:\r\n- The system must be able to handle input data with varying time steps.\r\n- The system must be able to handle input data with varying power levels.\r\n- The system must be able to handle input data with varying operating conditions.\r\n- The system must be able to handle input data with varying vehicle mass parameters.\r\n- The system must be able to handle",
    "\n\nvehicle system model = {\n  total mass = 2500 kg,\n  front axle assembly = {\n    mass = 150 kg,\n    front wheels = 2,\n    front axle = {\n      mass = 10 kg,\n      steering angle = 20°\n    }\n  },\n  rear axle assembly = {\n    mass = 250 kg,\n    rear wheels = 2,\n    rear axle = {\n      mass = 15 kg\n    }\n  }\n}",
    "\n\nSystem: Vehicle Safety and Security Management System\n\nEntities:\n- Vehicle: A vehicle that is equipped with safety and security features, including seat belts, airbags, and alarm devices.\n- Safety Feature: A feature that is designed to protect the occupants of a vehicle from harm or injury, such as seat belts, bumpers, airbags, and anti-lock braking systems.\n- Security Device: A device that is designed to protect the vehicle from unauthorized access, such as alarms and keyless entry systems.\n- User: An individual who interacts with the system, such as a driver or a safety officer.\n\nRelationships:\n- Vehicle has Safety Feature: A vehicle can have multiple safety features, such as seat belts, airbags, and alarm devices.\n- Vehicle has Security Device: A vehicle can have multiple security devices, such as alarms and keyless entry systems.\n- User views Safety Feature: A user can view the safety features of a vehicle, such as seat belts, airbags, and anti-lock braking systems, to understand the safety configurations of the vehicle and its sub-systems.\n- User views",
    "\n\n```\npackage system_model\n\nimport \"service_layer\"\nimport \"data_layer\"\n\nentity ApplicationLayer {\n  functionalities : service_layer.Functionalities\n}\n\nentity ServiceLayer {\n  dependsOn : data_layer.DataLayer\n  functionalities : service_layer.Functionalities\n}\n\nentity DataLayer {\n  attributes : x, y, z\n}\n\nApplicationLayer -> ServiceLayer\nServiceLayer -> DataLayer\n\nx, y, z : DataLayer.attributes\n\n```",
    "\nSystem: Powertrain System\n\nComponents:\n1. Torque Generator: This component is responsible for generating torque based on the input parameters such as vehicle speed, engine load, and throttle position. It should be designed to meet the torque requirements of the vehicle and should be capable of generating torque in the range of 0 to 1000 newton-meters.\n2. Powertrain Control System: This component is responsible for controlling the torque generated by the torque generator and ensuring that the torque generated is transmitted to the engine components. It should be designed to ensure that the torque generated is transmitted to the engine components in a safe and efficient manner.\n3. Engine: This component is responsible for generating power based on the torque generated by the torque generator. It should be designed to meet the power requirements of the vehicle and should be capable of generating power in the range of 0 to 1000 horsepower.\n\nRelationships:\n1. Torque Generator is connected to the Powertrain Control System.\n2. Powertrain Control System is connected to the Engine.\n\nConstraints:\n1. The torque generated by the torque generator should be greater than zero newton-",
    "\n\nsystem PowerSystem {\n  component PowerGenerator {\n    input powerIn: Power\n    output torqueOut: Torque\n  }\n  component Engine {\n    input torqueIn: Torque\n    output powerOut: Power\n  }\n  component Powertrain {\n    component Engine engine\n    PowerGenerator torqueGenerator\n    engine.torqueIn = torqueGenerator.torqueOut\n    engine.powerOut = torqueGenerator.powerIn\n  }\n  Powertrain powertrain\n  powertrain.engine = Engine()\n  powertrain.torqueGenerator = PowerGenerator()\n}",
    "\n\nVehicleSafetyAndAntiTheftFunctionCatalogue:\n  description: \"This Vehicle Safety and Anti-theft Function Catalogue is intended to standardize the basic configuration requirements for key vehicle components in terms of safety and anti-theft performance.\"\n  safetyFeatures:\n    - \"At a minimum, basic safety components such as front seat belts and bumpers must be installed on the body and interior to ensure the fundamental personal safety of occupants.\"\n    - \"Certain components, such as the driver’s airbag and anti-lock braking system, are characterized as safety features but may or may not be mandatory depending on specific configurations.\"\n  securityFeatures:\n    - \"The vehicle should also be equipped with security components such as an alarm system and a keyless entry system, so as to enhance the overall security and protective capability of the vehicle.\"\n  mandatorySafetyFeatures:\n    - \"The catalogue distinguishes and describes all components that affect safety, all components that affect anti-theft, components that affect both safety and anti-theft, as well as all mandatory safety components, in order to meet regulatory requirements and users’ needs for the most basic safety and protection functions of the vehicle.\"",
    "\n\nSystem: Vehicle Fuel Management System\n\nEntities:\n- Vehicle: The vehicle for which fuel management is being provided.\n- Fuel Tank Assembly: The assembly that integrates the fuel pump and fuel tank.\n- Fuel Pump: The device that pressurizes fuel from the tank and delivers it to various fuel-consuming units within the vehicle.\n- Fuel Tank: The storage container for fuel.\n- Fuel-consuming Unit: The various components within the vehicle that consume fuel, such as engine, transmission, and braking.\n- Return Line: The line that allows unused fuel to return to the tank.\n\nRelationships:\n- Vehicle has a Fuel Tank Assembly.\n- Fuel Tank Assembly has a Fuel Pump.\n- Fuel Pump delivers fuel to Fuel-consuming Units.\n- Fuel Tank Assembly has a Fuel Tank.\n- Fuel-consuming Units consume fuel from the Fuel Tank Assembly.\n- Fuel Pump has a Return Line.\n- Fuel Tank Assembly transmits fuel temperature information to the Vehicle.\n\nFunctional Requirements:\n- The system must provide complete fuel",
    "\n\nsafety_security_compliance_configuration_requirements:\n  - vehicle_interior:\n      - two_seat_belts: mandatory safety feature\n      - airbag: not mandatory\n      - anti_theft_alarm_device: installed inside the vehicle\n  - vehicle_body:\n      - bumper: required safety component\n      - keyless_entry_system: required to improve security performance\n  - chassis_structure:\n      - two_wheels: installed\n      - two_sets_of_anti_lock_braking_systems: not mandatory\n\n––––––––––––––––––––––––––––––––––\n\nInput Requirement:\nThe system must ensure that the vehicle’s fuel tank is always filled to its maximum capacity, and that the fuel level is monitored and reported to the driver. The system should also ensure that the vehicle’s engine temperature is maintained within a safe range, and that the engine oil level is monitored and reported to the driver. The system should also ensure that the vehicle’s tire pressure is maintained within a safe range, and that the tire temperature is monitored and reported to the driver. The system should also ensure that the vehicle’s air conditioning system is operating within safe limits, and that the air temperature is",
    "\n\nVehicleSafetyAndSecurityComponentSystem : ComponentSystem {\n  interior : VehicleInterior {\n    alarmSystem : AlarmSystem,\n    seatBelts : SeatBelts,\n    frontRowSeats : FrontRowSeats,\n    driverAirbag : DriverAirbag\n  },\n  bodyAssembly : VehicleBodyAssembly {\n    vehicleBody : VehicleBody,\n    bumper : Bumper,\n    keylessEntrySystem : KeylessEntrySystem\n  },\n  safetyFeatures : SafetyFeatures {\n    seatBelts : SeatBelts,\n    airbags : Airbags,\n    bumpers : Bumpers\n  },\n  securityFeatures : SecurityFeatures {\n    onboardAlarm : OnboardAlarm,\n    keylessEntrySystem : KeylessEntrySystem\n  }\n}\n\n––––––––––––––––––––––––––––––––––\n\nInput Requirement:\nThe system must be designed to be modular, scalable, and adaptable to different vehicle types and manufacturers. The system must be able to handle different types of vehicles, including sedan, SUV, and truck, and must be able to accommodate different body styles and sizes. The system must be able to handle different levels of traffic congestion, including heavy traffic, moderate traffic, and light",
    "\n\n```\ncomponent Component {\n  attribute String classificationLevel;\n  attribute String classificationAttribute;\n  operation classify() {\n    // code to classify the component\n  }\n  operation displayClassification() {\n    // code to display the classification attribute\n  }\n}\n```\r\n\r\nExplanation:\r\n\r\n- The `Component` class represents a component that needs to be classified and labeled.\r\n- The `classificationLevel` attribute stores the security classification level of the component.\r\n- The `classificationAttribute` attribute stores the corresponding classification attribute of the component.\r\n- The `classify()` operation is responsible for classifying the component based on its attributes and security requirements.\r\n- The `displayClassification()` operation is responsible for displaying the classification attribute of the component to the user.",
    "\n\nSystem Model: Automotive Electronic Control Unit (ECU) Communication and Control Model\n\nEntities:\n- Vehicle Control Unit (VCU)\n- Engine Control Unit (ECU)\n- CAN Bus\n- Bus Interfaces (BusIF)\n- Sensor Data Exchange Interfaces\n\nRelationships:\n- VCU.CAN_BusIF -> CAN Bus\n- ECU.CAN_BusIF -> CAN Bus\n- VCU.SensorDataExchangeIF -> Sensor Data Exchange Interfaces\n- ECU.SensorDataExchangeIF -> Sensor Data Exchange Interfaces\n\n– – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – – –",
    "\nSystem: Blood Glucose Meter System\n\nEntities:\n- Blood Glucose Meter\n- Battery\n- User\n\nActivities:\n- Monitor Blood Glucose Levels\n- Prompt User to Charge Battery\n- Provide Emergency Response to Abnormal Blood Glucose Measurements\n\nConstraints:\n- Battery must be charged before blood glucose levels can be measured\n- Battery must be recharged within a specified time frame\n- User must be notified of battery status changes\n- User must be notified of abnormal blood glucose measurements\n\nInteractions:\n- User initiates measurement of blood glucose levels\n- Blood glucose level measurement is received by the system\n- System checks battery status\n- If battery is low, system prompts user to charge battery\n- If battery is empty, system initiates emergency response\n- If battery is charged, system continues with blood glucose level measurement\n- Blood glucose level measurement is received by the system\n- System checks for abnormal blood glucose levels\n- If abnormal blood glucose levels are detected",
    "\n\nConstants:\n\n- Mathematical Constants:\n  - e: 2.7182818284590452353602874713526624977572470936999595749669676277240766303535475945713821785251664274274663919320030599218174135966290435729003342952605956307381323286279434907632338298807531952510190115738341879307021540891499348841675092",
    "\n\n```\npackage automotive_components_specification_model {\n  class Tire {\n    string manufacturer;\n    real rim_diameter;\n    integer width;\n  }\n  Tire Michelin_18_245 = Tire(\"Michelin\", 18.0, 245);\n  Tire French_18_245 = Tire(\"French\", 18.0, 245);\n}\n```\r\n\r\nExplanation:\r\n\r\nThe system model consists of a package called `automotive_components_specification_model` that contains a class called `Tire`. The `Tire` class has three attributes: `manufacturer`, `rim_diameter`, and `width`. The `manufacturer` attribute is a string that identifies the manufacturer of the tire. The `rim_diameter` attribute is a real number that represents the length of the rim of the tire. The `width` attribute is an integer that represents the width of the tire.\r\n\r\nTwo instances of the `Tire` class are created, one for a Michelin tire with a rim diameter of 18.0 and a width of 245,",
    "\n\nAutomotiveComponentModel:\n  - vehicle: Vehicle\n  - frontWheels: FrontWheel[]\n\nVehicle:\n  - mass: Mass\n  - length: Length\n\nFrontWheel:\n  - hubDiameter: HubDiameter\n  - width: Width\n  - tireHeight: TireHeight\n  - tire: Tire\n\nMass:\n  - value: double\n  - unit: MassUnit\n\nLength:\n  - value: double\n  - unit: LengthUnit\n\nHubDiameter:\n  - value: double\n  - unit: DiameterUnit\n\nWidth:\n  - value: double\n  - unit: WidthUnit\n\nTireHeight:\n  - value: double\n  - unit: LengthUnit\n\nTire:\n  - diameter: Diameter\n  - width: Width\n  - height: Height\n\nDiameter:\n  - value: double\n  - unit: DiameterUnit\n\nWidth:\n  - value: double\n  - unit: WidthUnit\n\nHeight:\n  - value: double\n  - unit: LengthUnit\n\nMassUnit: enum { kg, lb }\n\nLengthUnit: enum { m, inch, ft }\n\nDiameterUnit: enum { mm, inch",
    "\n\nVehiclePowertrainConfigurationSystem:\n  inputs:\n    - VehicleType: string\n    - EngineType: string\n    - TransmissionType: string\n  outputs:\n    - PowertrainConfiguration: string\n  blocks:\n    - PowertrainConfigurationBlock:\n        - if (EngineType = \"four-cylinder\" and TransmissionType = \"manual\") then PowertrainConfiguration = \"four-cylinder manual\"\n        - if (EngineType = \"six-cylinder\" and TransmissionType = \"automatic\") then PowertrainConfiguration = \"six-cylinder automatic\"\n        - if (EngineType = \"six-cylinder\" and TransmissionType = \"manual\") then PowertrainConfiguration = \"invalid combination\"\n        - if (EngineType = \"four-cylinder\" and TransmissionType = \"automatic\") then PowertrainConfiguration = \"invalid combination\"\n        - if (VehicleType = \"high-performance\") then EngineType = \"six-cylinder\"\n        - if (VehicleType = \"standard\") then EngineType = \"four-cylinder\"\n\n––––––––––––––––––––––––––––––––––\n\nExplanation:\n\nThe system model is named \"VehiclePowertrainConfigurationSystem\" and has two inputs: \"VehicleType\" and \"EngineType",
    "\n\nentity Car {\n  attribute mass : Real [unit = \"kilogram\"];\n  attribute length : Real [unit = \"meter\"];\n  attribute numberOfWheelAssemblies : Integer;\n  attribute totalMass : Real [unit = \"kilogram\"] = 1200;\n  attribute totalLength : Real [unit = \"meter\"] = 4.82;\n  attribute defaultTreadDepth : Real [unit = \"millimeter\"] = 6.0;\n  attribute minimumTreadDepth : Real [unit = \"millimeter\"] = 3.5;\n  attribute brakeDiscDiameter : Real [unit = \"millimeter\"];\n  attribute wheelDiameter : Real [unit = \"millimeter\"];\n  attribute tireWidth : Real [unit = \"millimeter\"];\n  attribute tireHeight : Real [unit = \"millimeter\"];\n  attribute rimDiameter : Real [unit = \"millimeter\"];\n  attribute brakeDiscRadius : Real [unit = \"millimeter\"];\n  attribute brakeDiscHeight : Real [unit = \"millimeter\"];\n  attribute brakeDiscOffset : Real [unit = \"millimeter\"];\n  attribute tireOffset : Real [unit = \"millimeter\"];\n  attribute tire",
    "\n\nSystem: Automotive Fuel System\n\nComponents:\n\n- Fuel Tank Assembly:\n  - Outlet Interface:\n    - Provides an outlet for fuel, including a return function.\n  - Fuel Pump:\n    - Pumps fuel from the fuel tank and supplies it to the engine.\n  - Fuel Tank:\n    - Stores and distributes fuel to the engine and other components.\n\n- Fuel Temperature Monitor:\n  - Monitors and transmits fuel temperature information.\n\nRequirements:\n\n- The fuel tank assembly must provide an outlet interface for fuel, including a return function.\n- The fuel pump must be installed inside the fuel tank assembly and be capable of receiving returned fuel.\n- The fuel tank must store and distribute fuel to the engine and other components.\n- The fuel temperature monitor must be able to monitor and transmit fuel temperature information.\n- The system must be able to monitor and transmit fuel temperature information.\n- The fuel tank assembly must be able to deliver fuel to the engine or other components, as well as receive returned fuel.\n- The fuel pump must be able to pump fuel from the fuel tank and supply it to the engine, while also being capable of receiving",
    "\n\n```\nsystem PhysicalQuantitySystem {\n  physicalQuantityType physicalQuantityType [1..*]\n  unitType unitType [1..*]\n  unit unit [1..*]\n  quantity quantity [1..*]\n  quantityConversion quantityConversion [1..*]\n  quantityConversionRule quantityConversionRule [1..*]\n  quantityConversionTable quantityConversionTable [1..*]\n  quantityConversionTableRule quantityConversionTableRule [1..*]\n  quantityConversionTableRuleEntry quantityConversionTableRuleEntry [1..*]\n  quantityConversionTableRuleEntryReference quantityConversionTableRuleEntryReference [1..*]\n  quantityConversionTableRuleEntryConversion quantityConversionTableRuleEntryConversion [1..*]\n  quantityConversionTableRuleEntryConversionReference quantityConversionTableRuleEntryConversionReference [1..*]\n  quantityConversionTableRuleEntryConversionFactor quantityConversionTableRuleEntryConversionFactor [1..*]\n  quantityConversionTableRuleEntryConversionFactorReference quantityConversionTableRuleEntryConversionFactorReference [1..*]\n  quantityConversionTableRuleEntryConversionOffset quantityConversionTableRuleEntryConversionOffset [1..*]\n  quantityConversionTableRuleEntryConversionOffsetReference quantityConversionTableRuleEntryConversionOffsetReference [1..*]\n  quantityConversionTableRule",
    "\nSystem Model: Unit Conversion System\n\nEntities:\n- Unit Conversion System: A software system that provides a standardized unit system library that supports the interoperability and adaptation between the International System of Quantities (ISQ) and United States Customary Units (USCustomaryUnits).\n- Unit Type: A type of unit, such as length, mass, temperature, etc.\n- Unit: An instance of a unit type, such as meters, kilograms, degrees Celsius, etc.\n- Conversion Factor: A factor that converts a unit to another unit, such as 1 meter to 1 foot.\n- Conversion Rule: A rule that defines how to convert a unit to another unit, such as 1 meter to 1 foot is equal to 3.28083 feet.\n\nRelationships:\n- Unit Conversion System contains Unit Type: The unit conversion system contains multiple unit types, such as length, mass, temperature, etc.\n- Unit Type contains Unit: Each unit type contains multiple units, such as meters, kilograms, degrees Celsius, etc.\n- Unit Type contains Conversion Factor: Each unit type contains multiple conversion factors, such as 1 meter to",
    "\n\nSystem: Car Headlamp Tilt Adjustment Knob Verification and Validation System\r\n\r\nEntities:\r\n- Headlamp Tilt Adjustment Knob (Knob): The car headlamp tilt adjustment knob that needs to be verified and validated.\r\n\r\n- Verification and Validation System (System): The system that verifies and validates the parameters of the car headlamp tilt adjustment knob.\r\n\r\n- Tilt Angle (Parameter): The angle at which the headlamp beam is tilted.\r\n\r\n- Reasonable Range (Range): The range within which the tilt angle of the headlamp beam must fall.\r\n\r\n- SI Units (Units): The International System of Units (SI) used in the system.\r\n\r\n- Standard Real Number Constants (Constants): The standard real number constants used in the system, such as pi and Euler’s number e.\r\n\r\n- Precision and Consistency (Precision): The precision and consistency in calculations used in the system.\r\n\r\n- Scientific and Reliable Management (Management): The scientific and reliable management of the headlamp beam adjustment knob functionality used in the system.\r\n\r\nRelationships:\r\n- Knob is an input to System.\r\n- System has a parameter Tilt",
    "\n\n```\npackage DataTypes {\n  class UnsignedInteger {\n    value: Integer[0..2^32-1];\n  }\n  class UnsignedFloat {\n    value: Real[0..1.7976931348623157e+308];\n  }\n  class DateTime {\n    value: String;\n  }\n  class StringValue {\n    value: String;\n  }\n  class BooleanValue {\n    value: Boolean;\n  }\n  class ColorLabel {\n    severity: String[“red”, “yellow”, “green”];\n    color: String;\n  }\n  class Diameter {\n    value: Real[0..1000];\n    size: String[“Small (60 mm)”, “Medium (70 mm)”, “Large (80 mm)”];\n  }\n}\n```",
    "\n\n```\npackage system_model\n\nimport \"omg/sysml/v2\"\n\nmodel SystemModel {\n  package system {\n    collection SparePartBag {\n      property Bag<SparePart> parts\n    }\n\n    collection IntegerList {\n      property List<Integer> values\n    }\n\n    collection StringSet {\n      property Set<String> values\n    }\n\n    collection PersonOrderedSet {\n      property OrderedSet<Person> values\n    }\n\n    collection RealArray {\n      property Real[4] values\n    }\n\n    collection NestedCollections {\n      property List<Set<Person>> values\n    }\n  }\n\n  package business_functions {\n    operation GetSparePart(String partName) returns SparePartBag {\n      // code to retrieve a SparePartBag containing the specified part\n    }\n\n    operation GetIntegerList(String listName) returns IntegerList {\n      // code to retrieve an IntegerList containing the specified list\n    }\n\n    operation GetStringSet(String setName) returns StringSet {\n      // code to retrieve a StringSet containing the specified set\n    }\n\n    operation GetPersonOrderedSet(String setName) returns PersonOrderedSet {\n      // code to retrieve a PersonOrderedSet containing the specified set\n    }\n\n    operation GetRealArray(String array",
    "\n\n```\npackage TireInfo {\n  class Tire {\n    manufacturer : String;\n    rimDiameter : Real;\n    tireWidth : Real;\n    installationPosition : CoordinateVector;\n  }\n  \n  class CoordinateVector {\n    x : Real;\n    y : Real;\n    z : Real;\n  }\n}\n```\r\n\r\nExplanation:\r\n\r\nThe system model consists of two classes: Tire and CoordinateVector. The Tire class has four attributes: manufacturer, rimDiameter, tireWidth, and installationPosition. The manufacturer attribute is a String, which represents the name of the manufacturer of the tire. The rimDiameter attribute is a Real, which represents the diameter of the rim of the tire in inches. The tireWidth attribute is also a Real, which represents the width of the tire in inches. The installationPosition attribute is a CoordinateVector, which represents the position of the tire in three-dimensional space. The CoordinateVector class has three attributes: x, y, and z, which represent the coordinates of the tire in three-dimensional space. The system model also includes a package statement to group the classes together.",
    "\n\n```\n@startuml\n\npackage \"Spacecraft Trajectory Recording System\" {\n  component \"Data Collection System\" {\n    interface \"Data Collection Interface\"\n    entity \"Data Collection Database\"\n    entity \"Data Collection Device\"\n    entity \"Data Collection Software\"\n    entity \"Data Collection Configuration\"\n    entity \"Data Collection Parameters\"\n    entity \"Data Collection Schedule\"\n    entity \"Data Collection Log\"\n    entity \"Data Collection Output\"\n    entity \"Data Collection Results\"\n    entity \"Data Collection Report\"\n    entity \"Data Collection Feedback\"\n    entity \"Data Collection Status\"\n    entity \"Data Collection Alert\"\n    entity \"Data Collection Alarm\"\n    entity \"Data Collection Error\"\n    entity \"Data Collection Warning\"\n    entity \"Data Collection Notification\"\n    entity \"Data Collection Event\"\n    entity \"Data Collection Command\"\n    entity \"Data Collection Command Response\"\n    entity \"Data Collection Command Status\"\n    entity \"Data Collection Command Feedback\"\n    entity \"Data Collection Command Error\"\n    entity \"Data Collection Command Warning\"\n    entity \"Data Collection Command Notification\"\n    entity \"Data Collection Command Event\"\n    entity \"Data Collection Command Alarm\"\n    entity \"Data Collection Command Alert\"\n    entity \"Data Collection Command Log\"\n    entity \"Data Collection Command Output\"",
    "\n\nSystem: Materials Science and Metallurgy System\r\n\r\nEntities:\r\n\r\n- Material: A substance that can be used in the construction of an object or product.\r\n- Metal: A material that is a metallic element.\r\n- Alloy: A combination of two or more materials that are combined in a specific way to form a new material.\r\n- Property: A measurable characteristic of a material or alloy.\r\n- Value: A numerical or qualitative measurement of a property.\r\n\r\nRelationships:\r\n\r\n- Materials can have properties such as atomic mass, density, and melting point.\r\n- Metals can have properties such as electrical conductivity, thermal conductivity, and crystal structure.\r\n- Alloys can have properties such as tensile strength, elastic modulus, and thermal conductivity.\r\n- Properties can have values such as a numerical value or a standardized unit.\r\n\r\nUse Cases:\r\n\r\n- Define a new material: A user can create a new material by specifying its name, composition, and properties.\r\n- Edit a material: A user can update the properties of an existing material.\r\n-",
    "\n\n```\nModel EngineeringMaterialsDatabaseSystem {\n  package Materials {\n    class Material {\n      attribute String name;\n      attribute String description;\n      attribute String type;\n      attribute String source;\n      attribute String manufacturer;\n      attribute String catalogNumber;\n      attribute String dateOfManufacture;\n      attribute String dateOfExpiry;\n      attribute String owner;\n      attribute String location;\n      attribute String notes;\n      attribute String url;\n      attribute String image;\n      attribute String reference;\n      attribute String standard;\n      attribute String units;\n      attribute Real atomicMass;\n      attribute Real density;\n      attribute Real thermalConductivity;\n      attribute Real specificHeat;\n      attribute Real thermalExpansionCoefficient;\n      attribute Real youngsModulus;\n      attribute Real poissonsRatio;\n      attribute Real shearModulus;\n      attribute Real compressiveStrength;\n      attribute Real tensileStrength;\n      attribute Real flexuralStrength;\n      attribute Real fatigueStrength;\n      attribute Real vickersHardness;\n      attribute Real brinellHardness;\n      attribute Real ductility;\n      attribute Real modulusOfElasticity;\n      attribute Real poissonsRatio;\n      attribute Real yieldStrength;\n      attribute Real ultimateStrength;\n      attribute Real fractureTough",
    "\n\n```\nModel: PubSubModel\n\nEntities:\n  - Publisher: Person\n  - Subscriber: Person\n  - Topic: String\n  - Message: String\n\nRelationships:\n  - Publishes: Publisher * Topic * Message\n  - Subscribes: Subscriber * Topic\n  - Receives: Subscriber * Message\n  - Delivers: Subscriber * Message\n\nConstraints:\n  - Only one message can be published on a topic at a time.\n  - A subscriber can subscribe to multiple topics.\n  - A message can only be received by a subscriber who has subscribed to the corresponding topic.\n  - A message can only be delivered to a subscriber who has subscribed to the corresponding topic.\n  - A message can only be delivered once to each subscriber.\n```",
    "\n\nVehicleFuelSystem:\n  FuelTankAssembly:\n    fuelTank:\n      Fuel:\n        fuelTemperature: real\n        fuelLevel: real\n        fuelFlowRate: real\n        fuelEfficiency: real\n        fuelConsumptionRate: real\n        fuelConsumption: real\n        fuelRemaining: real\n        fuelCapacity: real\n        fuelRecycleRate: real\n        fuelRecycle: real\n        fuelRecycleRate: real\n        fuelRecycle: real\n        fuelRecycleRate: real\n        fuelRecycle: real\n        fuelRecycleRate: real\n        fuelRecycle: real\n        fuelRecycleRate: real\n        fuelRecycle: real\n        fuelRecycleRate: real\n        fuelRecycle: real\n        fuelRecycleRate: real\n        fuelRecycle: real\n        fuelRecycleRate: real\n        fuelRecycle: real\n        fuelRecycleRate: real\n        fuelRecycle: real\n        fuelRecycleRate: real\n        fuelRecycle: real\n        fuelRecycleRate: real\n        fuelRecycle: real\n        fuelRecycleRate: real\n        fuelRecycle: real\n        fuelRecycleRate: real\n        fuelRecycle: real\n        fuelRecycleRate: real\n        fuelRecycle: real\n        fuelRecycleRate: real\n        fuelRecycle",
    "\n\n```\npackage \"PublishSubscribe\" {\n  component \"Producer\" {\n    operation \"publish\" {\n      parameter \"message\" {\n        type \"String\"\n      }\n      parameter \"topic\" {\n        type \"String\"\n      }\n      parameter \"timestamp\" {\n        type \"DateTime\"\n      }\n    }\n  }\n  component \"Server\" {\n    operation \"subscribe\" {\n      parameter \"topic\" {\n        type \"String\"\n      }\n      parameter \"consumer\" {\n        type \"Consumer\"\n      }\n    }\n    operation \"publish\" {\n      parameter \"message\" {\n        type \"String\"\n      }\n      parameter \"topic\" {\n        type \"String\"\n      }\n      parameter \"timestamp\" {\n        type \"DateTime\"\n      }\n    }\n    operation \"deliver\" {\n      parameter \"message\" {\n        type \"String\"\n      }\n      parameter \"topic\" {\n        type \"String\"\n      }\n      parameter \"subscriber\" {\n        type \"Consumer\"\n      }\n    }\n  }\n  component \"Consumer\" {\n    operation \"subscribe\" {\n      parameter \"topic\" {\n        type \"String\"\n      }\n      parameter \"server\" {\n        type \"Server\"\n      }\n    }\n    operation \"receive\" {\n      parameter \"message\" {\n        type \"",
    "\n\nSystem: Transportation System\n\nEntities:\n- User (driver and up to four passengers)\n- Vehicle\n- Gas Station\n- Environmental Factors\n\nActivities:\n- User Boarding:\n  - Preparation:\n    - User checks vehicle for damages and makes necessary repairs.\n    - User checks for personal belongings and packages.\n    - User checks for any personal belongings or packages that may interfere with the vehicle.\n    - User checks for any personal belongings or packages that may interfere with the vehicle.\n    - User checks for any personal belongings or packages that may interfere with the vehicle.\n    - User checks for any personal belongings or packages that may interfere with the vehicle.\n    - User checks for any personal belongings or packages that may interfere with the vehicle.\n    - User checks for any personal belongings or packages that may interfere with the vehicle.\n    - User checks for any personal belongings or packages that may interfere with the vehicle.\n    - User checks for any personal belongings or packages that may interfere with the vehicle.\n    - User checks for any personal belongings or packages that may interfere with the vehicle.\n    - User checks for any personal belong",
    "\n\nSystem {\n  FuelTankAssembly {\n    FuelTank {\n      FuelOutletPort {\n        fuelTemperature : Real\n      }\n      FuelInletPort {\n        fuelTemperature : Real\n      }\n    }\n    FuelInterface {\n      FuelSupply {\n        fuelTemperature : Real\n      }\n      FuelReturn {\n        fuelTemperature : Real\n      }\n    }\n    EngineUnit {\n      Engine {\n        fuelTemperature : Real\n      }\n      FuelInletPort {\n        fuelTemperature : Real\n      }\n      FuelOutletPort {\n        fuelTemperature : Real\n      }\n    }\n  }\n}",
    "\n\n```\n@startuml\n\npackage \"Vehicle Fuel System\" {\n  component \"Fuel Tank Assembly\" {\n    interface \"Fuel Supply Port\" {\n      operation \"Supply Fuel\"\n      operation \"Return Fuel\"\n    }\n    interface \"Fuel Temperature Sensor\" {\n      operation \"Read Temperature\"\n    }\n  }\n  component \"Engine\" {\n    interface \"Fuel Return Port\" {\n      operation \"Return Fuel\"\n    }\n  }\n  \"Fuel Tank Assembly\" ..> \"Fuel Supply Port\"\n  \"Fuel Tank Assembly\" ..> \"Fuel Temperature Sensor\"\n  \"Engine\" ..> \"Fuel Return Port\"\n  \"Fuel Supply Port\" ..> \"Engine\"\n  \"Fuel Temperature Sensor\" ..> \"Engine\"\n}\n\n@enduml\n```",
    "\n\n```\nContext Diagram:\n\n+-------------+\n| User        |\n+-------------+\n|             |\n| Select Scene|\n|             |\n+-------------+\n|             |\n| Focusing    |\n|             |\n+-------------+\n|             |\n| Intermediate|\n|             |\n+-------------+\n|             |\n| Capture     |\n|             |\n+-------------+\n|             |\n| Output      |\n|             |\n+-------------+\n\n```\n\n```\nActivity Diagram:\n\n+-------------+\n| User        |\n+-------------+\n|             |\n| Select Scene|\n|             |\n+-------------+\n|             |\n| Focusing    |\n|             |\n+-------------+\n|             |\n| Intermediate|\n|             |\n+-------------+\n|             |\n| Capture     |\n|             |\n+-------------+\n|             |\n| Output      |\n|             |\n+-------------+\n\n```\n\n```\nState Machine Diagram:\n\n+-------------+\n| User        |\n+-------------+\n|             |\n| Select Scene|\n|             |\n+-------------+\n|             |\n| Focusing    |\n",
    "\n\n```\nsystem PhotographyWorkflow {\n  input scene: Scene;\n  output intermediateImage: Image;\n  output finalImage: Image;\n\n  operation Focusing {\n    input scene: Scene;\n    output intermediateImage: Image;\n    // Focusing operation code here\n  }\n\n  operation Shooting {\n    input intermediateImage: Image;\n    output finalImage: Image;\n    // Shooting operation code here\n  }\n\n  workflow {\n    Focusing(scene);\n    Shooting(intermediateImage);\n  }\n}\n```",
    "\n\n```\nsystem PhotographyWorkflowSystem {\n  input:\n    UserInterface userInterface;\n    Camera camera;\n    SceneSelector sceneSelector;\n    FocusingProcess focusingProcess;\n    ShootingProcess shootingProcess;\n\n  output:\n    Photograph photograph;\n\n  subsystem UserInterface {\n    input:\n      User user;\n\n    output:\n      UserInterface userInterface;\n  }\n\n  subsystem Camera {\n    input:\n      CameraLens lens;\n      Scene scene;\n\n    output:\n      Image image;\n  }\n\n  subsystem SceneSelector {\n    input:\n      User user;\n\n    output:\n      Scene scene;\n  }\n\n  subsystem FocusingProcess {\n    input:\n      Image image;\n\n    output:\n      FocusedImage focusedImage;\n  }\n\n  subsystem ShootingProcess {\n    input:\n      FocusedImage focusedImage;\n\n    output:\n      Photograph photograph;\n  }\n\n  composition {\n    userInterface -> camera;\n    camera -> sceneSelector;\n    sceneSelector -> focusingProcess;\n    focusingProcess -> shootingProcess;\n    shootingProcess -> photograph;\n  }\n}\n```",
    "\nSystem: Automated Photography System\n\nEntities:\n- User: A person who uses the system to take photos.\n- Camera: A device used to capture images.\n- Lens: A device used to focus the image.\n- Scene: The image to be processed for photography.\n- Image: The processed image suitable for photography.\n- Shooting Operation: The process of converting the image into a photograph.\n\nRelationships:\n- User -> Camera: The user interacts with the camera to capture the scene.\n- Camera -> Lens: The camera focuses the scene using the lens.\n- Lens -> Scene: The lens focuses the scene to generate an image.\n- Scene -> Image: The image is processed for photography.\n- Image -> Shooting Operation: The image is converted into a photograph using the shooting operation.\n\nConstraints:\n- The system must be designed to work with any camera and lens combination.\n- The system must be able to handle a wide range of lighting conditions and scene types.\n- The system must be able to handle different types of photography techniques, such as portrait, landscapes, and night‑shots.\n",
    "\n\n```\npackage PhotographyWorkflow {\n  class User {\n    name : String\n  }\n\n  class Scene {\n    name : String\n  }\n\n  class Image {\n    scene : Scene\n  }\n\n  class Focus {\n    image : Image\n  }\n\n  class Shoot {\n    focus : Focus\n  }\n\n  class Picture {\n    shoot : Shoot\n  }\n\n  class PhotographyWorkflow {\n    user : User\n    scene : Scene\n    image : Image\n    focus : Focus\n    shoot : Shoot\n    picture : Picture\n\n    User -> Scene [1,1]\n    Scene -> Image [1,1]\n    Image -> Focus [1,1]\n    Focus -> Shoot [1,1]\n    Shoot -> Picture [1,1]\n  }\n}\n```",
    "\nSystem: Photography Workflow System\n\nEntities:\n- User: A person who uses the system to capture photos.\n- Camera: A device that captures images.\n- Lens: A device that focuses the scene to ensure optimal image sharpness.\n- Scene: The object or subject that the user selects for photography.\n- Photograph: The final image generated by the camera after capturing the scene.\n\nActivities:\n- Capture Scene: The user selects a scene for photography.\n- Focus Scene: The lens focuses the selected scene to ensure optimal image sharpness.\n- Take Photo: The camera captures the focused scene and generates a photograph.\n\nRelationships:\n- User selects scene: The user selects a scene for photography.\n- User selects lens: The user selects a lens for focusing the scene.\n- User selects camera: The user selects a camera for capturing the focused scene.\n- Lens focuses scene: The lens focuses the selected scene to ensure optimal image sharpness.\n- Camera captures scene: The camera captures the focused scene and generates a photograph.\n- Photograph is generated: The camera captures the focused scene and generates a photograph.\n\n",
    "\n\nSystem: PhotographyWorkflowSystem\n\nEntities:\n- User: A person who uses the system to capture high-quality photographs.\n- Camera: A device used to capture images.\n- Lens: A device used to focus the image.\n- Scene: The environment in which the user is shooting.\n- Image: The captured image, after it has been focused.\n- FocusQualityEvaluator: A system component that evaluates the focus quality of an image.\n- ShootingOperation: A system operation that converts a focused image into a photograph.\n- Photographer: The person who produces the final photo.\n\nRelationships:\n- User can select a scene to capture an image.\n- Camera captures the image.\n- Lens focuses the image.\n- FocusQualityEvaluator evaluates the focus quality of the image.\n- If the focus quality is good, ShootingOperation converts the focused image into a photograph.\n- ShootingOperation is linked to the scene input and photo output.\n- ShootingOperation is automatically triggered by the FocusQualityEvaluator.\n- ShootingOperation produces the final photo.\n- Photographer produces the final photo.\n\nConstraints:\n- The",
    "\n\n```\nsystem PhotographyWorkflow {\n  input scene: Scene;\n  output photo: Photo;\n\n  subsystem FocusFunction {\n    input scene: Scene;\n    output focusedScene: FocusedScene;\n\n    operation Focus(scene: Scene) returns (focusedScene: FocusedScene) {\n      // implementation of the focus function\n    }\n  }\n\n  subsystem ShootingOperation {\n    input focusedScene: FocusedScene;\n    output photo: Photo;\n\n    operation Shoot(focusedScene: FocusedScene) returns (photo: Photo) {\n      // implementation of the shooting operation\n    }\n  }\n\n  subsystem Display {\n    input photo: Photo;\n\n    operation DisplayPhoto(photo: Photo) {\n      // implementation of the display operation\n    }\n  }\n\n  composition {\n    subsystem FocusFunction;\n    subsystem ShootingOperation;\n    subsystem Display;\n\n    connect FocusFunction.focusedScene -> ShootingOperation.focusedScene;\n    connect ShootingOperation.photo -> Display.photo;\n  }\n}\n```",
    "\n\nSystem: Automatic Braking Control System for Vehicles\n\nEntities:\n- Vehicle: The vehicle for which the braking control system is being developed.\n- Brake Control System: The system that provides automatic braking control functions for the vehicle.\n- Brake Pedal: The brake pedal that the user presses to initiate the braking process.\n- Traction Information: Information about the traction of the road, such as road adhesion.\n- Brake Pressure: The pressure generated by the brake pedal when the user presses it.\n- Road Condition: The condition of the road under which the vehicle is traveling.\n- Braking Performance: The degree to which the braking system operates safely and reliably.\n\nRelationships:\n- The Vehicle is the subject of the Braking Control System.\n- The Brake Control System receives input from the Brake Pedal and Traction Information.\n- The Brake Control System generates output that regulates the brake pressure and modulation frequency of the vehicle.\n- The Brake Control System is monitored and dynamically regulated without user intervention.\n- The Brake Control System is designed to operate in a",
    "\n\nSystem BatteryChargingControlSystem {\n  Real currentBatteryLevel\n  Boolean isCharging\n  Boolean isChargingComplete\n  Boolean isChargingTerminated\n  Boolean isChargingPaused\n  Boolean isChargingEnabled\n  Boolean isChargingLimitReached\n  Boolean isChargingError\n  Boolean isChargingWarning\n  Boolean isChargingOverheated\n  Boolean isChargingUndervoltage\n  Boolean isChargingLowBattery\n  Boolean isChargingLowTemperature\n  Boolean isChargingLowChargeRate\n  Boolean isChargingLowSoc\n  Boolean isChargingLowVoltage\n  Boolean isChargingLowCurrent\n  Boolean isChargingLowPower\n  Boolean isChargingLowEnergy\n  Boolean isChargingLowTemperatureWarning\n  Boolean isChargingLowChargeRateWarning\n  Boolean isChargingLowSocWarning\n  Boolean isChargingLowVoltageWarning\n  Boolean isChargingLowCurrentWarning\n  Boolean isChargingLowPowerWarning\n  Boolean isChargingLowEnergyWarning\n  Boolean isChargingOverheatedWarning\n  Boolean isChargingUndervoltageWarning\n  Boolean isChargingLowBatteryWarning\n  Boolean isChargingPausedWarning\n  Boolean isChargingEnabledWarning\n  Boolean isChargingLimitReachedWarning\n  Boolean isChargingErrorWarning\n  Boolean isChargingWarningWarning\n ",
    "\n\nsystem ChargingSystem {\n  input currentBatteryLevel : Real [0..1];\n  output isCharging : Boolean;\n  output isBatteryFull : Boolean;\n  output isChargingComplete : Boolean;\n  \n  initial isCharging = false;\n  initial isBatteryFull = false;\n  initial isChargingComplete = false;\n  \n  transition monitorBatteryLevel {\n    isCharging = true;\n    isBatteryFull = false;\n    isChargingComplete = false;\n    if (currentBatteryLevel < 1) {\n      isBatteryFull = true;\n      isCharging = false;\n      isChargingComplete = true;\n    } else if (currentBatteryLevel >= 1) {\n      isCharging = false;\n      isBatteryFull = false;\n      isChargingComplete = true;\n    }\n  }\n}",
    "\n\n```\nsystem CameraSystem {\n  input sceneSelection : String\n  output photo : Photograph\n\n  subsystem AutofocusSubsystem {\n    input scene : Scene\n    output focusedScene : Scene\n  }\n\n  subsystem ImagingSubsystem {\n    input focusedScene : Scene\n    output photograph : Photograph\n  }\n\n  subsystem PhotoStorageSubsystem {\n    input photograph : Photograph\n    output photoRecord : PhotoRecord\n  }\n\n  sceneSelection -> AutofocusSubsystem.scene\n  AutofocusSubsystem.focusedScene -> ImagingSubsystem.focusedScene\n  ImagingSubsystem.photograph -> PhotoStorageSubsystem.photograph\n  PhotoStorageSubsystem.photoRecord -> photo\n}\n\nclass Scene {\n  name : String\n}\n\nclass Photograph {\n  image : Image\n}\n\nclass Image {\n  pixels : Pixel[]\n}\n\nclass Pixel {\n  color : Color\n}\n\nclass Color {\n  red : Integer\n  green : Integer\n  blue : Integer\n}\n\nclass PhotoRecord {\n  timestamp : DateTime\n  location : Location\n  photographer : Person\n}\n\nclass DateTime {\n  year : Integer\n  month : Integer\n  day : Integer\n  hour : Integer\n  minute : Integer\n  second : Integer\n}\n\nclass Location {\n ",
    "\n\nSystem: Digital Camera Shooting System\n\nEntities:\n- User: A person who uses the digital camera shooting system.\n- Camera: The device that captures and produces images.\n- Viewfinder: The screen that displays the live view of the camera's image sensor.\n- Shooting Scene: The scene that the user selects for imaging.\n- Focus Module: The device that automatically adjusts the focus of the camera to the selected scene.\n- Imaging Module: The device that captures and produces the final photo.\n- Lens: The lens that focuses the light onto the camera's image sensor.\n- Image Sensor: The device that captures the light and produces an image.\n- Shutter: The device that triggers the imaging process.\n- Battery: The device that supplies power to the camera.\n- Lens Cap: The lens cover that protects the lens from damage.\n- Lens Filter: The filter that filters out unwanted light from the lens.\n- Lens Hood: The hood that protects the lens and lens cap from the environment.\n- Lens Mirror: The mirror that focuses the light onto the lens.\n- Lens Stabilizer: The",
    "\n\n```\nModel: Vehicle Simulation\n\nEntities:\n  - Vehicle:\n    - mass (real)\n    - initialPosition (real)\n    - initialVelocity (real)\n    - timeInterval (real)\n    - powerInputSequence (sequence of real)\n    - positionSequence (sequence of real)\n    - speedSequence (sequence of real)\n\nRelationships:\n  - PowerInputSequence (1,1) -- (1,∞) -- PowerInput:\n    - powerInputSequence\n  - PositionSequence (1,1) -- (1,∞) -- Position:\n    - positionSequence\n  - SpeedSequence (1,1) -- (1,∞) -- Speed:\n    - speedSequence\n\nActivities:\n  - CalculateSpeedAndPosition:\n    - inputs:\n      - Vehicle\n      - PowerInput\n    - outputs:\n      - Speed\n      - Position\n\n```",
    "\n\n```\npackage \"CameraSystem\" {\n  component \"Camera\" {\n    property \"Scene\" {\n      type \"String\"\n    }\n    operation \"CapturePhoto\" {\n      parameter \"Scene\" {\n        type \"String\"\n      }\n      parameter \"FocalLength\" {\n        type \"Integer\"\n      }\n      parameter \"ShutterSpeed\" {\n        type \"Integer\"\n      }\n      parameter \"ISO\" {\n        type \"Integer\"\n      }\n      parameter \"WhiteBalance\" {\n        type \"String\"\n      }\n      parameter \"ExposureCompensation\" {\n        type \"Integer\"\n      }\n      parameter \"FlashMode\" {\n        type \"String\"\n      }\n      parameter \"FocusMode\" {\n        type \"String\"\n      }\n      parameter \"MeteringMode\" {\n        type \"String\"\n      }\n      parameter \"ExposureMode\" {\n        type \"String\"\n      }\n      parameter \"ColorSpace\" {\n        type \"String\"\n      }\n      parameter \"Resolution\" {\n        type \"String\"\n      }\n      parameter \"CompressionQuality\" {\n        type \"Integer\"\n      }\n      parameter \"ImageFormat\" {\n        type \"String\"\n      }\n      parameter \"ImagePath\" {\n        type \"String\"\n      }\n      parameter \"ImageName\" {\n        type",
    "\n\n```\nModel: CameraInformationProcessingWorkflow\n\nEntities:\n  viewPort: ViewPort\n  displayPort: DisplayPort\n  Image: Image\n  Picture: Picture\n\nRelationships:\n  focusesOn: FocusesOn [1,1] viewPort -> Image\n  captures: Captures [1,1] Image -> Picture\n  displays: Displays [1,1] Picture -> displayPort\n\nActivities:\n  sceneSelection: SceneSelection [1,1]\n  shooting: Shooting [1,1]\n\nConstraints:\n  - viewPort.supports(sceneSelection)\n  - displayPort.supports(displays)\n  - viewPort.supports(shooting)\n  - displayPort.supports(shooting)\n  - focusesOn.source.supports(shooting)\n  - captures.source.supports(shooting)\n  - displays.source.supports(shooting)\n```",
    "\n\n```\n@startuml\n\npackage \"System\" {\n  component \"Sensor Manager\" {\n    interface \"Sensor Interface\" {\n      operation \"Update Sensor\"\n    }\n    component \"Sensor Monitor\" {\n      state \"Idle\"\n      state \"Monitoring\"\n      state \"Ready\"\n      transition \"Start Monitoring\" to \"Monitoring\"\n      transition \"Stop Monitoring\" to \"Idle\"\n      transition \"Sensor Ready\" to \"Ready\"\n      transition \"Sensor Not Ready\" to \"Idle\"\n      transition \"Update Sensor\" to \"Idle\"\n    }\n    component \"Sensor Update\" {\n      state \"Idle\"\n      state \"Updating\"\n      transition \"Start Updating\" to \"Updating\"\n      transition \"Stop Updating\" to \"Idle\"\n      transition \"Update Complete\" to \"Idle\"\n    }\n    component \"Sensor Database\" {\n      interface \"Sensor Database Interface\" {\n        operation \"Register Sensor\"\n        operation \"Deregister Sensor\"\n        operation \"Get Sensor Status\"\n      }\n      state \"Unregistered\"\n      state \"Registered\"\n      transition \"Register Sensor\" to \"Registered\"\n      transition \"Deregister Sensor\" to \"Unregistered\"\n      transition \"Get Sensor Status\" to \"Registered\"\n    }\n    component \"Sensor Driver\" {\n      interface \"Sensor Driver Interface",
    "\n\nVehicleState : off | starting | on | shutting_down;\n\nVehicle : state = VehicleState;\n\nVehicleStartSignal : signal = \"vehicle start signal\";\n\nVehiclePowerOnSignal : signal = \"vehicle power-on signal\";\n\nVehicleShutdownSignal : signal = \"vehicle shutdown signal\";\n\nVehicleController : controller = [VehicleStartSignal | VehiclePowerOnSignal | VehicleShutdownSignal];\n\nVehicleController.controller -> Vehicle.state [guard = (controller.signal = \"vehicle start signal\") or (controller.signal = \"vehicle power-on signal\") or (controller.signal = \"vehicle shutdown signal\")];\n\nVehicleController.controller -> Vehicle.state [guard = (controller.signal = \"vehicle start signal\") or (controller.signal = \"vehicle power-on signal\")];\n\nVehicleController.controller -> Vehicle.state [guard = (controller.signal = \"vehicle start signal\")];\n\nVehicleController.controller -> Vehicle.state [guard = (controller.signal = \"vehicle power-on signal\")];\n\nVehicleController.controller -> Vehicle.state [guard = (controller.signal = \"vehicle shutdown signal\")];\n\nVehicleController.controller -> Vehicle.",
    "\n\nVehicleStatus : StateMachine {\n  initial state = \"off\"\n  state \"off\" {\n    entry /VehicleOffSignal/ {\n      transition to \"off\"\n    }\n  }\n  state \"starting\" {\n    entry /VehicleStartSignal/ {\n      transition to \"starting\"\n    }\n    exit /VehicleOffSignal/ {\n      transition to \"off\"\n    }\n  }\n  state \"on\" {\n    entry /VehicleOnSignal/ {\n      transition to \"on\"\n    }\n    exit /VehicleOffSignal/ {\n      transition to \"off\"\n    }\n  }\n}\n\nVehicleStatus.VehicleOffSignal : Event\nVehicleStatus.VehicleStartSignal : Event\nVehicleStatus.VehicleOnSignal : Event",
    "\n\nVehicle Power Management System\n\n- Power Status:\n  - Vehicle State: off, start, started, powered-on, shutdown\n  - Vehicle Mode: manual, autonomous\n  - Vehicle Speed: 0-100 km/h\n  - Vehicle Battery Level: 0-100%\n  - Vehicle Battery Temperature: 0-40°C\n  - Vehicle Battery Voltage: 0-240 V\n  - Vehicle Battery Current: 0-10 A\n  - Vehicle Battery Power: 0-1000 W\n  - Vehicle Battery SOC: 0-100%\n  - Vehicle Battery Health: good, warning, critical\n  - Vehicle Battery Charge Status: charging, discharging, fully charged\n  - Vehicle Battery Charging Status: on-going, complete, interrupted\n  - Vehicle Battery Charging Time: 0-100 hrs\n  - Vehicle Battery Charging Rate: 0-1000 W/h\n  - Vehicle Battery Discharging Time: 0-100 hrs\n  - Vehicle Battery Discharging Rate: 0-1000 W/h",
    "\n\nVehicle:\n  - has state: (shutdown, start-up, running)\n  - has start signal: Boolean\n  - has shutdown signal: Boolean\n  - has started signal: Boolean\n  - has stopped signal: Boolean\n  - has start button: Button\n  - has shutdown button: Button\n  - has started button: Button\n  - has stopped button: Button\n  - has start function: () -> ()\n  - has shutdown function: () -> ()\n  - has started function: () -> ()\n  - has stopped function: () -> ()\n  - has start timer: Timer\n  - has shutdown timer: Timer\n  - has started timer: Timer\n  - has stopped timer: Timer\n  - has start sequence: Sequence\n  - has shutdown sequence: Sequence\n  - has started sequence: Sequence\n  - has stopped sequence: Sequence\n  - has start state: State\n  - has shutdown state: State\n  - has started state: State\n  - has stopped state: State\n  - has start transition: Transition\n  - has shutdown transition: Transition\n  - has started transition: Transition\n  - has stopped transition: Transition\n\nButton:\n  - has pressed signal: Boolean\n  - has released signal: Boolean\n  - has pressed function: () -> ()\n  - has released function: ()",
    "\n\nVehiclePowerManagementSystem : System {\n  state : VehicleState [0..1]\n  healthState : VehicleHealthState [0..1]\n  transitionToOn : TransitionToOn [0..1]\n  transitionToOff : TransitionToOff [0..1]\n  transitionToStart : TransitionToStart [0..1]\n  transitionToIdle : TransitionToIdle [0..1]\n  transitionToHealthy : TransitionToHealthy [0..1]\n  transitionToUnhealthy : TransitionToUnhealthy [0..1]\n  transitionToCritical : TransitionToCritical [0..1]\n  transitionToShutdown : TransitionToShutdown [0..1]\n  transitionToError : TransitionToError [0..1]\n  transitionToStandby : TransitionToStandby [0..1]\n  transitionToActive : TransitionToActive [0..1]\n  transitionToInactive : TransitionToInactive [0..1]\n  transitionToSuspended : TransitionToSuspended [0..1]\n  transitionToResumed : TransitionToResumed [0..1]\n  transitionToPaused : TransitionToPaused [0..1]\n  transitionToResumed : TransitionToResumed [0..1]\n  transitionToAborted",
    "\n\nSystem: Vehicle Health Monitoring and Management System\n\nEntities:\n- Vehicle: The vehicle being monitored and managed.\n- Vehicle Health Status: The current status of the vehicle, which can be \"normal\", \"degraded\", or \"maintenance\".\n- Vehicle Temperature Sensor: A device that measures the temperature of the vehicle.\n- Vehicle Temperature Threshold: A preset maximum allowable temperature for the vehicle.\n- Vehicle Controller: A device that controls the vehicle's operation.\n- Vehicle Over-Temperature Warning: A message sent to the vehicle controller when the temperature exceeds the maximum allowable value.\n- Vehicle Maintenance Schedule: A schedule of maintenance intervals for the vehicle.\n- Vehicle Maintenance Interval: An interval of time between maintenance cycles for the vehicle.\n- Vehicle Maintenance Status: The current status of the vehicle maintenance, which can be \"scheduled\", \"in progress\", or \"completed\".\n- Vehicle Maintenance Task: A task performed during maintenance to ensure the vehicle is in a safe and healthy state.\n- Vehicle Maintenance Complete: A message sent to the vehicle controller when maintenance is completed.\n\nRelationships:\n- Vehicle Temperature Sensor -> Vehicle: Measures the temperature of the vehicle.\n- Vehicle Temperature Threshold",
    "\n\n```\npackage Server {\n  class Server {\n    state off\n    state waiting\n    state response\n    initial state off\n    transition from off to waiting on start\n    transition from waiting to response on request\n    transition from response to waiting after 5 minutes\n    transition from waiting to off on 11:59:00\n  }\n}\n```",
    "\n\nVehicle Start-Stop System\n\n- Vehicle\n  - Vehicle Start-Stop State\n    - Off\n    - Start-Up\n    - Operating\n  - Vehicle Power Supply\n    - Continuous Power Supply\n  - Vehicle Brake System\n    - Automatic Parking Brake\n\n- Vehicle Start-Stop Process\n  - Vehicle Start Signal\n    - Input\n  - Vehicle Power-On Signal\n    - Input\n  - Vehicle Self-Check\n    - Continuous\n  - Vehicle Power Supply\n    - Continuous Power Supply\n  - Vehicle Stop Signal\n    - Input\n  - Vehicle Brake System\n    - Automatic Parking Brake\n\n- Vehicle Controller\n  - Vehicle Start-Stop Control\n    - Output\n  - Vehicle Power-On Signal\n    - Input\n  - Vehicle Start Signal\n    - Output\n  - Vehicle Stop Signal\n    - Output\n\n- Vehicle Safety System\n  - Vehicle Start-Stop Safety\n    - Continuous Monitoring\n\n- Vehicle Communication System\n  - Vehicle Start-Stop Communication\n    - Bidirectional\n\n- Vehicle Emergency System\n  - Vehicle Start-Stop Emergency\n    - Continuous Monitoring\n\n- Vehicle Monitoring System\n  - Vehicle Start-Stop Monitoring\n    - Continuous Monitoring\n\n- Vehicle Safety System\n  - Vehicle Start-Stop Safety\n    - Continuous Monitoring\n\n",
    "\n\nVehicleControlSystem : System {\n  state : VehicleState [0..1]\n  startUp : StartUpProcess\n  operation : OperationProcess\n  shutdown : ShutdownProcess\n}\n\nVehicleState : State {\n  value : VehicleStateValue [1..1]\n}\n\nVehicleStateValue : Enumeration {\n  off,\n  started\n}\n\nStartUpProcess : Process {\n  trigger : StartUpTrigger [1..1]\n  action : StartUpAction [1..1]\n}\n\nStartUpTrigger : Event {\n  signal : VehicleStartSignal [1..1]\n}\n\nStartUpAction : Action {\n  startUp : StartUpOperation [1..1]\n}\n\nStartUpOperation : Operation {\n  transition : VehicleStateTransition [1..1]\n}\n\nVehicleStateTransition : Transition {\n  source : VehicleState [1..1]\n  target : VehicleState [1..1]\n}\n\nOperationProcess : Process {\n  trigger : OperationTrigger [1..1]\n  action : OperationAction [1..1]\n}\n\nOperationTrigger : Event {\n  signal : VehicleOnSignal [1..1]\n}\n\nOperationAction : Action {\n  operation",
    "\n\n```\n@startuml\n\npackage \"Cruise Control System\" {\n  component \"Driver\"\n  component \"Cruise Controller\"\n  component \"Speedometer\"\n  component \"Engine\"\n  component \"Vehicle\"\n  component \"Fuel Control\"\n\n  \"Driver\" -> \"Cruise Controller\"\n  \"Cruise Controller\" -> \"Speedometer\"\n  \"Cruise Controller\" -> \"Engine\"\n  \"Cruise Controller\" -> \"Vehicle\"\n  \"Cruise Controller\" -> \"Fuel Control\"\n\n  \"Speedometer\" -> \"Cruise Controller\"\n  \"Engine\" -> \"Cruise Controller\"\n  \"Vehicle\" -> \"Cruise Controller\"\n  \"Fuel Control\" -> \"Engine\"\n}\n\n@enduml\n```",
    "\n\nsystem CruiseControlSystem {\n  input setSpeed : Real;\n  input vehicleSpeed : Real;\n  output throttleCommand : Real;\n  Real deltaSpeed;\n  Real throttle;\n  Real k;\n  Real maxThrottle;\n  Real minThrottle;\n  Real maxDeltaSpeed;\n  Real minDeltaSpeed;\n  Real maxSpeed;\n  Real minSpeed;\n  Real speedometerOffset;\n  Real vehicleSpeedOffset;\n  Real setSpeedOffset;\n  Real throttleOffset;\n  Real kOffset;\n  Real maxThrottleOffset;\n  Real minThrottleOffset;\n  Real maxDeltaSpeedOffset;\n  Real minDeltaSpeedOffset;\n  Real maxSpeedOffset;\n  Real minSpeedOffset;\n  Real speedometerScale;\n  Real vehicleSpeedScale;\n  Real setSpeedScale;\n  Real throttleScale;\n  Real kScale;\n  Real maxThrottleScale;\n  Real minThrottleScale;\n  Real maxDeltaSpeedScale;\n  Real minDeltaSpeedScale;\n  Real maxSpeedScale;\n  Real minSpeedScale;\n  Real speedometerOffset;\n  Real vehicleSpeedOffset;\n  Real setSpeedOffset;\n  Real throttleOffset;\n  Real kOffset;\n  Real maxThrottleOffset;\n  Real minThrottleOffset;\n  Real maxDeltaSpeedOffset;\n  Real",
    "\n\n```\n@startuml\n\npackage \"Cruise Control System\" {\n  component \"Driver\"\n  component \"Cruise Controller\"\n  component \"Speedometer\"\n  component \"Engine\"\n  interface \"In-Vehicle Control Interface\"\n  interface \"Throttle Control Interface\"\n\n  \"Driver\" -> \"In-Vehicle Control Interface\": sends set speed command\n  \"In-Vehicle Control Interface\" -> \"Cruise Controller\": receives set speed command\n  \"Cruise Controller\" -> \"Speedometer\": obtains current vehicle speed\n  \"Cruise Controller\" -> \"Engine\": generates throttle control command\n  \"Engine\" -> \"Throttle Control Interface\": sends throttle control command\n  \"Throttle Control Interface\" -> \"Cruise Controller\": receives throttle control command\n  \"Cruise Controller\" -> \"Driver\": displays throttle control status\n}\n\n@enduml\n```",
    "\n\n```\n@startuml\n\npackage \"Cruise Control System\" {\n  actor \"Driver\" as driver\n  entity \"Cruise Controller\" as cruiseController\n  entity \"Engine\" as engine\n  entity \"Speedometer\" as speedometer\n  entity \"Throttle Actuator\" as throttleActuator\n\n  driver -> cruiseController : \"Sends cruise speed setting\"\n  cruiseController -> engine : \"Calculates throttle control instructions\"\n  engine -> throttleActuator : \"Sends throttle control signal\"\n  speedometer -> cruiseController : \"Sends real-time speed information\"\n  cruiseController -> driver : \"Sends cruise control status\"\n}\n\n@enduml\n```",
    "\n\nSystem: Automotive Cruise Control System\n\nEntities:\n- Cruise Controller\n- Engine\n- Speed Sensor\n- Fuel Control System\n\nRelationships:\n- Cruise Controller -> Engine [0..1]\n- Cruise Controller -> Speed Sensor [0..1]\n- Cruise Controller -> Fuel Control System [0..1]\n- Speed Sensor -> Cruise Controller [0..1]\n- Fuel Control System -> Cruise Controller [0..1]\n\nComponents:\n- Cruise Control Interface\n- Vehicle Speed Sensor\n- Vehicle Speed Estimator\n- Fuel Control Algorithm\n- Vehicle Speed Actuator\n- Vehicle Accelerator\n- Vehicle Brake\n- Vehicle Steering\n- Vehicle Safety System\n- Vehicle Electronics\n- Vehicle Body\n- Vehicle Engine\n- Vehicle Transmission\n- Vehicle Brake System\n- Vehicle Steering System\n- Vehicle Sensors\n- Vehicle Controls\n- Vehicle Body Electronics\n- Vehicle Engine Electronics\n- Vehicle Transmission Electronics\n- Vehicle Brake Electronics\n- Vehicle Steering Electronics\n- Vehicle Sensors Electronics\n- Vehicle Controls Electronics\n\nContexts:\n",
    "\n\nVehicle Cruise Control System\n\n- Vehicle\n  - Cruise Control Functionality\n    - Speed Sensor\n    - Cruise Controller\n      - Fuel Control Command Generator\n      - Engine Controller\n        - Engine\n\n- Communication Interfaces\n  - Speed Sensor Interface\n    - Input: Speed Sensor Data\n    - Output: None\n  - Cruise Controller Interface\n    - Input: Set Speed Command\n    - Output: Fuel Control Command\n  - Engine Controller Interface\n    - Input: Fuel Control Command\n    - Output: Engine Control Signal\n\n- Standardized Message Interfaces\n  - Speed Sensor Interface\n    - Standardized Message Format: Sensor Data Message\n    - Message Content: Speed, Time, Acceleration\n  - Cruise Controller Interface\n    - Standardized Message Format: Cruise Control Command Message\n    - Message Content: Set Speed, Fuel Consumption, Engine Speed\n  - Engine Controller Interface\n    - Standardized Message Format: Engine Control Signal Message\n    - Message Content: Engine Speed, Fuel Flow, Throttle Position\n\n- Collaboration\n  - Speed Sensor Interface\n    - Cruise Controller Interface\n  - Cruise Controller Interface\n    - Engine Controller Interface\n  - Engine Controller Interface\n    - None",
    "\n\nVehicleLifecycleManagementSystem:\n  - Vehicle:\n    - id: string\n    - make: string\n    - model: string\n    - year: integer\n    - vin: string\n    - deliveryDate: date\n    - ownershipHistory:\n      - Ownership:\n        - owner: string\n        - startDate: date\n        - endDate: date\n        - drivingHistory:\n          - Driving:\n            - driver: string\n            - startDate: date\n            - endDate: date\n        - scrappingDate: date\n  - VehicleOwner:\n    - id: string\n    - name: string\n    - address: string\n    - phone: string\n    - email: string\n  - Driver:\n    - id: string\n    - name: string\n    - address: string\n    - phone: string\n    - email: string\n\n––––––––––––––––––––––––––––––––––\n\nInput Requirement:\nThe system must be able to handle multiple vehicles simultaneously, each with its own unique identification number. Each vehicle must be able to be added to the system, updated, and removed from the system. The system must also be able to handle multiple owners for each vehicle, each with their own unique identification number. Each owner must be able to be added to the system, updated, and removed from the system. The system must be",
    "\n\nvehicle_1 : Vehicle {\n  mass : Real [0..1]\n  operationalStatus : OperationalStatus\n  driver : Driver\n  wheels : Wheel [1..*]\n}\n\nOperationalStatus : Enumeration {\n  \"idle\"\n  \"driving\"\n  \"accelerating\"\n  \"braking\"\n}\n\nDriver : ExternalReference {\n  name : String\n}\n\nWheel : Component {\n  position : Real [0..1]\n  velocity : Real [0..1]\n  acceleration : Real [0..1]\n}\n\nTimeSnapshot : Time {\n  snapshotTime : DateTime\n}\n\nvehicle_1.wheels[1] -> TimeSnapshot.snapshotTime\nvehicle_1.wheels[2] -> TimeSnapshot.snapshotTime\n\nTimeSnapshot.snapshotTime -> Wheel.position\nTimeSnapshot.snapshotTime -> Wheel.velocity\nTimeSnapshot.snapshotTime -> Wheel.acceleration\n\nTimeSnapshot.snapshotTime -> vehicle_1.wheels[1].position\nTimeSnapshot.snapshotTime -> vehicle_1.wheels[1].velocity\nTimeSnapshot.snapshotTime -> vehicle_1.wheels[1].acceleration\n\nTimeSnapshot",
    "\n\nsystem VehicleSystem {\n  component Vehicle {\n    attribute mass : Real [0..∞]\n    attribute gear : Integer [0..3]\n    attribute acceleratorPosition : Real [0.0..1.0]\n    transition acceleration : Real [0.0..1.0]\n  }\n  component Engine {\n    attribute power : Real [0..∞]\n    attribute torque : Real [0..∞]\n    attribute efficiency : Real [0..1]\n  }\n  component Driver {\n    attribute speed : Real [0..∞]\n    attribute acceleration : Real [0..∞]\n  }\n  composite Vehicle_1 {\n    component Vehicle_1_Vehicle : Vehicle {\n      attribute mass : Real [0..∞] = 2000.0\n      attribute gear : Integer [0..3] = 0\n      attribute acceleratorPosition : Real [0.0..1.0] = 0.0\n      transition acceleration : Real [0.0..1.0]\n    }\n    component Vehicle_1_Engine : Engine {\n      attribute power : Real [0..∞]\n      attribute torque : Real [0..∞]\n      attribute efficiency : Real [",
    "\n\nVehicle : Component\n  - mass : Real\n  - currentGear : GearPosition\n  - currentThrottle : ThrottlePosition\n  - engine : Engine\n  - driver : Driver\n\nGearPosition : Enumeration\n  - neutral\n  - first\n  - second\n  - third\n  - fourth\n  - fifth\n  - reverse\n\nThrottlePosition : Real\n\nEngine : Component\n  - power : Real\n\nDriver : Person\n\nAlice : Driver\n\nBob : Driver\n\nTimeSlice : Event\n  - time : Real\n  - mass : Real\n  - gear : GearPosition\n  - throttle : ThrottlePosition\n  - driver : Driver\n\n––––– End of SysML v2 BNF –––––",
    "\n\nSystem: Vehicle Mass Modeling and Aggregation System\n\nEntities:\n- Component: A physical or logical entity that has a quantifiable mass, such as a vehicle component, an engine, or a transmission.\n- Vehicle: A composite object that is composed of one or more components, such as a car, truck, or motorcycle.\n\nRelationships:\n- Contains: A component can contain other components, forming a composite object.\n- Aggregated: A component can aggregate the total mass of itself and all its subcomponents.\n- Explicitly Defined: Core components such as the engine and transmission are explicitly defined and assigned under the whole vehicle.\n- Individual Specified: The data of core components such as the engine and transmission can be individually specified.\n\nAttributes:\n- Mass: The quantifiable mass of a component, which can be a simple value or a range of values.\n- Total Mass: The total mass of a vehicle, which is the sum of the masses of all its components.\n\nConstraints:\n- The system must be able to handle complex vehicle models, including those with multiple levels of aggregation.\n- The system must be able to handle different units of mass, such as pound",
    "\n\nentity Vehicle {\n  attribute String VIN;\n  attribute String name;\n  attribute Mass totalMass;\n  composition Component components;\n}\n\nentity Component {\n  attribute String serialNumber;\n  attribute Mass mass;\n  composition Component subcomponents;\n}\n\nentity Mass {\n  attribute Real value;\n  attribute String unit;\n}\n\nrelationship Composition {\n  source Vehicle vehicle;\n  target Component component;\n}\n\nrelationship Composition {\n  source Component component;\n  target Component subcomponent;\n}\n\nrelationship Composition {\n  source Vehicle vehicle;\n  target Mass mass;\n}\n\nrelationship Composition {\n  source Component component;\n  target Mass mass;\n}\n\nentity Filter {\n  attribute Real threshold;\n}\n\nrelationship Composition {\n  source Vehicle vehicle;\n  target Filter filter;\n}\n\nrelationship Composition {\n  source Component component;\n  target Filter filter;\n}\n\nentity User {\n  attribute String name;\n  attribute String role;\n  operation inputMass(Component component, Mass mass);\n  operation inputVIN(Vehicle vehicle, String VIN);\n  operation inputName(Vehicle vehicle, String name);\n  operation inputFilter(Vehicle vehicle, Filter filter);\n  operation calculateMass",
    "\n\nentity simpleThing {\n  attribute basicMass : REAL;\n  attribute totalMass : REAL;\n}\n\nentity compositeThing {\n  attribute basicMass : REAL;\n  attribute totalMass : REAL;\n  composition (subcomponent : simpleThing or compositeThing);\n}\n\nentity massAggregationSystem {\n  operation aggregateMass(thing : simpleThing or compositeThing) : REAL;\n}\n\nsimpleThing.totalMass = simpleThing.basicMass;\ncompositeThing.totalMass = compositeThing.basicMass + sum(subcomponent.totalMass for subcomponent in thing.subcomponent);\n\nmassAggregationSystem.aggregateMass(thing : simpleThing) = thing.totalMass;\nmassAggregationSystem.aggregateMass(thing : compositeThing) = thing.totalMass;\n\n––––––––––––––––––––––––––––––––––\n\nExplanation:\n\nThe input requirement is a simple description of a system that aggregates mass attributes of objects. The system consists of two entities: simpleThing and compositeThing. A simpleThing has a basic mass attribute and a total mass attribute, while a compositeThing has a basic mass attribute and a total mass attribute, as well as a composition relationship with simpleThing or compositeThing entities. The system can aggregate the mass",
    "\n\n```\npackage MassSystem {\n  class Object {\n    mass: Real;\n    subcomponents: Object[*];\n    totalMass: Real;\n    massBasedFilter(threshold: Real): Real;\n  }\n  class CompositeObject extends Object {\n    fullMass: Real;\n    totalMass = mass + fullMass;\n  }\n  Object.subcomponents.aggregation = compositeAggregation;\n  Object.totalMass.calculation = sum(subcomponents.totalMass);\n  CompositeObject.fullMass.calculation = sum(subcomponents.totalMass);\n  Object.massBasedFilter.calculation = sum(subcomponents.totalMass, threshold);\n}\n```",
    "\n\nVehicle Dynamics Model:\n\nVehicle Dynamics Model:\n\n- Inputs:\n  - Wheel Power (W)\n  - Aerodynamic Drag Coefficient (Cd)\n  - Friction Coefficient (Cf)\n  - Vehicle Mass (m)\n  - Speed (v)\n  - Time (t)\n- Outputs:\n  - Acceleration (a)\n  - Speed (v)\n  - Position (x)\n- Equations:\n  - a = (W - (Cd * v^2) - (Cf * v)) / m\n  - v = v + (a * t)\n  - x = x + (v * t)\n\nVehicle Power Output Model:\n\n- Inputs:\n  - Wheel Power (W)\n  - Aerodynamic Drag Coefficient (Cd)\n  - Friction Coefficient (Cf)\n  - Vehicle Mass (m)\n  - Speed (v)\n- Outputs:\n  - Power Output (P)\n- Equations:\n  - P = W - (Cd * v^2) - (Cf * v)\n\nVehicle Acceleration Model:\n\n- Inputs:\n  - Effective Power (Pe)\n  - Vehicle Mass (m)\n  - Current",
    "\n\nSystem: Vehicle Dynamics Simulation System\n\nEntities:\n- Vehicle: represents the vehicle being simulated, including its mass, dimensions, and wheels.\n- Environment: represents the surrounding environment, including the air density, wind speed, and other influencing factors.\n- Driving Power: represents the available driving power under current conditions, including the power of each wheel.\n- Acceleration: represents the change in velocity of the vehicle over a time interval.\n- Speed: represents the speed of the vehicle at a given point in time.\n- Position: represents the position of the vehicle at a given point in time.\n\nRelationships:\n- The Vehicle is modeled as a rigid body with mass, dimensions, and wheels.\n- The Environment is modeled as a static environment with air density, wind speed, and other influencing factors.\n- The Driving Power is calculated based on the vehicle's mass, dimensions, and wheels.\n- The Acceleration is calculated based on the driving power, aerodynamic drag coefficient, and rolling resistance coefficient.\n- The Speed and Position are calculated based on the initial speed and position, the acceleration, and the time step.\n\nConstraints:\n- The system must",
    "\n\nVehicle Dynamics Model:\n\nVehicle Dynamics Model:\n\nInputs:\n- Vehicle Mass (kg)\n- Wheel Power (W)\n- Aerodynamic Drag Coefficient (1/m)\n- Rolling Resistance Coefficient (1/m)\n- Initial Speed (m/s)\n- Initial Position (m)\n\nOutputs:\n- Speed (m/s)\n- Position (m)\n\nStates:\n- Speed (m/s)\n- Position (m)\n\nParameters:\n- Vehicle Mass (kg)\n- Wheel Power (W)\n- Aerodynamic Drag Coefficient (1/m)\n- Rolling Resistance Coefficient (1/m)\n\nEquations:\n- Speed = Speed + Acceleration * Time\n- Position = Position + Speed * Time\n\n- Acceleration = (Force / Mass) + (Aerodynamic Drag Coefficient * Speed^2) + (Rolling Resistance Coefficient * Speed)\n- Force = (Wheel Power / Number of Wheels)\n- Mass = Vehicle Mass\n- Time = 1 (s)\n\n- Number of Wheels = 4",
    "\n\nSystem: Vehicle Dynamics Simulation System\r\n\r\nEntities:\r\n- Vehicle: A vehicle moving in a straight line.\r\n- Initial Position: The initial position of the vehicle.\r\n- Initial Velocity: The initial velocity of the vehicle.\r\n- Mass: The mass of the vehicle.\r\n- Wheel-End Drive Power: The power required to move the vehicle by wheel-end drive.\r\n- Time Interval: The time interval at a specific moment.\r\n- Drag Coefficient: The coefficient of drag applied to the vehicle.\r\n- Friction Coefficient: The coefficient of friction applied to the vehicle.\r\n- Other Parameters: Other relevant parameters that may affect the vehicle’s motion.\r\n\r\nActivities:\r\n- Calculate Acceleration: The system calculates the acceleration of the vehicle based on the input power, drag coefficient, friction coefficient, and other parameters.\r\n- Calculate Final Velocity: The system calculates the final velocity of the vehicle based on the initial velocity, acceleration, and time interval.\r\n- Calculate Final Position: The system calculates the final position of the vehicle based on the initial position, final velocity, and time interval.\r\n\r\nConstraints:\r\n- Physical Consistency",
    "\n\nentity Vehicle {\n  attribute Real mass;\n  attribute Real maxMass;\n  attribute Real chassisMass;\n  attribute Real engineMass;\n  attribute Real gearboxMass;\n  operation calculateTotalMass() : Real;\n  operation checkOverweight() : Boolean;\n}\n\nentity OverweightWarning {\n  attribute Real totalMass;\n  attribute Real maxMass;\n  operation displayWarning() : String;\n}\n\nrelationship Contains {\n  from Vehicle to OverweightWarning[1];\n}\n\noperation Vehicle.calculateTotalMass() : Real {\n  result = chassisMass + engineMass + gearboxMass;\n  if (result > maxMass) {\n    create OverweightWarning(totalMass = result, maxMass = maxMass);\n  }\n}\n\noperation Vehicle.checkOverweight() : Boolean {\n  result = (chassisMass + engineMass + gearboxMass) > maxMass;\n}\n\noperation OverweightWarning.displayWarning() : String {\n  result = \"Warning: Vehicle is overweight. Total mass is \" + totalMass + \" kg, which exceeds the maximum permitted limit of \" + maxMass + \" kg.\";\n}\n\n––––––––––––––––––––––––––––––––––\n",
    "\n\nentity Vehicle {\n  attribute mass : REAL [0..2500];\n  attribute engineMass : REAL [0..];\n  attribute transmissionMass : REAL [0..];\n}\n\nentity MassBudget {\n  attribute totalMass : REAL [0..2500];\n  operation checkTotalMass : BOOLEAN;\n}\n\nMassBudget.totalMass = Vehicle.engineMass + Vehicle.transmissionMass;\n\nVehicle.engineMass in [0..];\nVehicle.transmissionMass in [0..];\n\nMassBudget.checkTotalMass = (Vehicle.engineMass + Vehicle.transmissionMass <= 2500);\n\n––––––––––––––––––––––––––––––––––\n\nInput Requirement:\nThe system must be able to handle a wide range of vehicle types and configurations, including those with different numbers of seats, doors, and wheels. The system must be able to handle different fuel types and their associated fuel efficiency ratings. The system must be able to handle different brands of vehicles and their associated vehicle performance ratings. The system must be able to handle different types of vehicles, such as passenger cars, trucks, and buses, and must be able to calculate the total fuel consumption of the vehicle based on",
    "\n\nentity Vehicle {\n  attribute mass : Real [0..2500];\n}\n\nentity Chassis {\n  attribute mass : Real [0..2500];\n}\n\nentity Engine {\n  attribute mass : Real [0..2500];\n}\n\nentity Transmission {\n  attribute mass : Real [0..2500];\n}\n\nrelationship composition {\n  Vehicle.chassis [0..1] -- Chassis;\n  Vehicle.engine [0..1] -- Engine;\n  Vehicle.transmission [0..1] -- Transmission;\n}\n\nentity MassComplianceSystem {\n  operation checkMassCompliance() : Boolean;\n}\n\nrelationship realization {\n  MassComplianceSystem.checkMassCompliance() -- checkMassCompliance();\n}\n\nentity MassData {\n  attribute mass : Real [0..2500];\n}\n\nrelationship realization {\n  Chassis.massData [0..1] -- MassData;\n  Engine.massData [0..1] -- MassData;\n  Transmission.massData [0..1] -- MassData;\n}\n\nentity MassVerificationSystem {\n  operation verifyMass(massData :",
    "\nSystem: Vehicle Weight Management System\n\nEntities:\n- Vehicle: The vehicle for which weight management is being performed.\n- Component: The individual components of the vehicle, such as the chassis, engine, and transmission.\n- Weight: The weight of each component, as measured by a sensor or other method.\n\nRelationships:\n- The Vehicle has many Components.\n- Each Component has a Weight.\n\nConstraints:\n- The total weight of all components must not exceed 2,500 kilograms.\n- The system must accurately record and manage the weight of each component.\n- The system should automatically sum the weights of these components.\n- When the total weight exceeds the specified limit, the system must provide a warning or impose restrictions to ensure that the designed vehicle’s total weight complies with relevant regulatory requirements.\n\nUse Cases:\n- Record Weight: The system should allow the user to record the weight of each component of the vehicle.\n- Sum Weights: The system should automatically sum the weights of all components of the vehicle and display the total weight.\n- Check Total Weight: The system should check the total weight of all components of the vehicle and provide a warning",
    "\n\nentity Vehicle {\n  attribute Mass mass;\n  attribute Mass chassisMass;\n  attribute Mass engineMass;\n  attribute Mass transmissionMass;\n  constraint TotalMass {\n    expr: sum(chassisMass, engineMass, transmissionMass) <= 2500;\n  }\n  behavior Dynamic {\n    input initialVelocity : Velocity;\n    input finalVelocity : Velocity;\n    input appliedForce : Force;\n    input time : Time;\n    output mass : Mass;\n    constraint MassGreaterThanZero {\n      expr: mass > 0;\n    }\n    constraint PhysicalRelationship {\n      expr: appliedForce * time = finalVelocity - initialVelocity;\n    }\n  }\n}\n\nentity Mass {\n  attribute Real value;\n}\n\nentity Velocity {\n  attribute Real value;\n}\n\nentity Force {\n  attribute Real value;\n}\n\nentity Time {\n  attribute Real value;\n}\n\n––––––––––––––––––––––––––––––––––\n\nNote: The above model is a simplified version of the actual system model, and does not include all the necessary details or constraints.",
    "\n\nentity Vehicle {\n  string VIN\n  string make\n  string model\n  string year\n  string status\n  datetime nextMaintenanceTime\n  int maintenanceInterval\n  int maxTemperature\n  datetime lastMaintenanceTime\n  datetime maintenanceStartTime\n  datetime maintenanceEndTime\n}\n\nentity MaintenanceSchedule {\n  string VIN\n  datetime nextMaintenanceTime\n  int maintenanceInterval\n  int maxTemperature\n}\n\nentity Maintenance {\n  string VIN\n  datetime startTime\n  datetime endTime\n  int duration\n}\n\nrelationship OneToOne (Vehicle) to (MaintenanceSchedule)\nrelationship OneToOne (MaintenanceSchedule) to (Maintenance)\n\nstate Machine {\n  state \"healthy\"\n  state \"under maintenance\"\n  transition \"start maintenance\" from \"healthy\" to \"under maintenance\"\n  transition \"end maintenance\" from \"under maintenance\" to \"healthy\"\n}\n\nconstraint \"maintenance time constraint\" {\n  maintenanceStartTime > nextMaintenanceTime\n  maintenanceStartTime - lastMaintenanceTime <= 2s\n  maintenanceEndTime - maintenanceStartTime <= 48h\n}\n\nconstraint \"temperature constraint\" {\n  maxTemperature <= 100\n}\n\n––––– End of SysML v2 BNF –––––",
    "\n\nentity Vehicle {\n  attribute mass : Real [0..10000]\n  attribute maxMassLimit : Real [0..10000]\n  attribute fuelMass : Real [0..10000]\n  attribute speed : Real [0..1000]\n  attribute torque : Real [0..1000]\n  attribute clutchInterface : Boolean\n  attribute driveSystem : Boolean\n  attribute engine : Engine\n}\n\nentity Engine {\n  attribute torqueCurve : Real [0..1000]\n  attribute maxTorque : Real [0..1000]\n  attribute minTorque : Real [0..1000]\n  attribute maxPower : Real [0..1000]\n  attribute minPower : Real [0..1000]\n  attribute efficiency : Real [0..1]\n}\n\nentity Transmission {\n  attribute clutch : Boolean\n  attribute transmission : Boolean\n}\n\nVehicle.maxMassLimit -> maxMassLimit\nVehicle.fuelMass -> fuelMass\nVehicle.speed -> speed\nVehicle.torque -> torque\nVehicle.clutchInterface -> clutchInterface\nVehicle.driveSystem -> drive",
    "\n\nVehicle:\n  - mass: Real\n  - fuel_level: Real\n  - clutch_interface: Boolean\n  - engine_speed: Real\n  - engine_torque: Real\n  - transmission_torque: Real\n  - torque_curve: Table\n\nEngine:\n  - generated_torque: Real\n  - speed_torque_curve: Table\n\nClutch:\n  - clutch_position: Real\n  - clutch_torque: Real\n\nTransmission:\n  - transmission_speed: Real\n  - transmission_torque: Real\n\nMass Control:\n  - total_mass: Real\n  - fuel_mass: Real\n  - dry_mass: Real\n  - fuel_tank_capacity: Real\n  - fuel_tank_level: Real\n  - fuel_tank_empty: Boolean\n  - fuel_tank_full: Boolean\n  - fuel_tank_status: Boolean\n  - fuel_tank_capacity_limit: Real\n  - fuel_tank_level_limit: Real\n  - fuel_tank_empty_limit: Boolean\n  - fuel_tank_full_limit: Boolean\n  - fuel_tank_status_limit: Boolean\n  - fuel_tank_capacity_constraint: Real",
    "\n\nentity Vehicle {\n  attribute mass : Real [0..2000] [unit = kilogram];\n  attribute fuelLevel : Real [0..1] [unit = litre];\n  attribute speed : Real [0..100] [unit = km/h];\n  attribute torque : Real [0..1000] [unit = newton meter];\n  operation accelerate(deltaSpeed : Real [0..10] [unit = km/h]);\n  operation brake(deltaSpeed : Real [0..10] [unit = km/h]);\n  operation startEngine();\n  operation stopEngine();\n}\n\nentity Engine {\n  attribute torque : Real [0..1000] [unit = newton meter];\n  attribute rpm : Real [0..10000] [unit = revolution per minute];\n  attribute clutchPosition : Real [0..1] [unit = ratio];\n  operation generateTorque(speed : Real [0..100] [unit = km/h]);\n}\n\nrelationship OneToOne between Vehicle and Engine {\n  sourceRole [0..1] {\n    aggregation {\n      composite {\n        component {",
    "\n\nentity Vehicle {\n  attribute mass : Real [0..∞];\n  attribute fuelTankLevel : Real [0..1];\n  attribute curbMass : Real [0..∞];\n  attribute totalMass : Real [0..∞];\n  attribute torque : Real [0..∞];\n  attribute speed : Real [0..∞];\n  attribute clutchInterface : Boolean;\n  operation setMass(newMass : Real) : Boolean;\n  operation setFuelTankLevel(newLevel : Real) : Boolean;\n  operation setCurbMass(newCurbMass : Real) : Boolean;\n  operation setTotalMass(newTotalMass : Real) : Boolean;\n  operation setTorque(newTorque : Real) : Boolean;\n  operation setSpeed(newSpeed : Real) : Boolean;\n  operation setClutchInterface(newClutchInterface : Boolean) : Boolean;\n  constraint massLimit : mass ≤ 2000;\n  constraint emptyTankMassLimit : (fuelTankLevel = 0) -> (totalMass ≤ 1500);\n  constraint fullTankMassLimit : (fuelTankLevel = 1) -> (totalMass ≤ 2000",
    "\n\nSystem: Vehicle Performance Analysis System\n\nEntities:\n- Vehicle: represents a vehicle with a unique identifier, such as a vehicle model, make, and year.\n- Driving Cycle: represents a specific driving cycle with a unique identifier, such as a typical day or a weekend trip.\n- Driving Scenario: represents a specific driving scenario with a unique identifier, such as a highway driving scenario or a city driving scenario.\n- Driving Event: represents a specific driving event with a unique identifier, such as a specific time and position during a driving cycle.\n- Driving Parameter: represents a specific driving parameter, such as engine power, acceleration, speed, and position variations over time.\n- Energy Consumption Target: represents a specific energy consumption target, such as a fuel economy of over 30 miles per gallon.\n- Driving Configuration: represents a specific driving configuration with a unique identifier, such as a vehicle configuration or a driving scenario.\n\nRelationships:\n- Vehicle has one-to-many relationship with Driving Configuration.\n- Driving Configuration has one-to-many relationship with Driving Cycle.\n- Driving Cycle has one-to-many relationship with Driving Scenario.",
    "\n\nSystem: Vehicle Fuel Economy Simulation Analysis System\n\nEntities:\n- Vehicle: represents the vehicle being simulated, including its parameters such as curb weight, load, wheel diameter, transmission efficiency, and others.\n- Driving Scenario: represents different urban and highway driving scenarios, including the driving trajectories and speed variations.\n- Wheel Power: represents the required wheel power for the vehicle to reach the desired speed and acceleration.\n- Acceleration: represents the acceleration of the vehicle due to the applied force.\n- Energy Consumption: represents the energy consumption of the vehicle due to the applied force.\n- Engine Power Demand: represents the required engine power for the vehicle to reach the desired speed and acceleration.\n- Fuel Consumption: represents the fuel consumption of the vehicle in terms of liters per 100 kilometers.\n- Fuel Economy: represents the fuel economy of the vehicle in terms of liters per 100 kilometers.\n\nRelationships:\n- The Vehicle entity is related to the Driving Scenario entity through a driving scenario attribute.\n- The Vehicle entity is related to the Wheel Power entity through a wheel power attribute.\n- The Vehicle",
    "\n\nSystem: Comprehensive Engine Selection Analysis System\n\nEntities:\n- Engine Type: four-cylinder, six-cylinder\n- Performance Indicator: power, mass, efficiency, cost\n- Evaluation Function: unified evaluation function\n- Candidate Engine: candidates for each engine type\n\nRelationships:\n- 1 to n: Engine Type to Candidate Engine\n- 1 to 1: Performance Indicator to Candidate Engine\n- 1 to 1: Evaluation Function to Candidate Engine\n\nActivities:\n- Comprehensive Selection Analysis:\n  - Inputs: Engine Type, Candidate Engine\n  - Outputs: Performance Indicator\n  - Description: The system will conduct a comprehensive selection analysis for each engine type, aggregating and calculating key performance indicators for each candidate engine.\n- Unified Evaluation Function:\n  - Inputs: Performance Indicator\n  - Outputs: Evaluation Score\n  - Description: The system will use a unified evaluation function to evaluate each candidate engine based on its performance indicators.\n- Automatic Screening and Recommendation:\n  - Inputs: Evaluation Score\n  - Outputs: Optimal Engine Selection\n  - Description: The system will automatically screen and recommend the optimal engine selection from all candidates, thereby maximizing both engine performance and economic",
    "\n\nSystem: Vehicle Quality Check System\n\nEntities:\n- Vehicle: represents a vehicle that needs to be checked for quality.\n- Data Collection: represents the process of gathering data on the vehicle's weight.\n- Data Processing: represents the process of processing the collected data to determine the vehicle's weight.\n- Evaluation: represents the process of evaluating the processed data to determine whether the vehicle's weight meets the specified standards.\n- Qualified Evaluation Result: represents the result of the evaluation process indicating that the vehicle's weight meets the specified standards.\n- Unqualified Evaluation Result: represents the result of the evaluation process indicating that the vehicle's weight does not meet the specified standards.\n\nRelationships:\n- Vehicle has a curb weight: represents the relationship between the vehicle and its curb weight.\n- Data Collection is performed by: represents the relationship between the data collection process and the vehicle.\n- Data Processing is performed by: represents the relationship between the data processing process and the vehicle.\n- Evaluation is performed by: represents the relationship between the evaluation process and the vehicle.\n- Qualified Evaluation Result is produced by: represents the relationship between the qualified evaluation result and the evaluation process.\n- Unqualified Evaluation Result is",
    "\n\nentity Vehicle {\n  string make;\n  string model;\n  string year;\n  double mass;\n}\n\nentity WeighingEquipment {\n  string make;\n  string model;\n  string year;\n  double capacity;\n}\n\nentity MassVerificationUnit {\n  string make;\n  string model;\n  string year;\n  double capacity;\n}\n\nentity MassVerificationProcess {\n  Vehicle vehicle;\n  WeighingEquipment weighingEquipment;\n  MassVerificationUnit massVerificationUnit;\n  double upperLimit;\n  boolean isQualified;\n}\n\nMassVerificationProcess inspectVehicle(Vehicle vehicle) {\n  WeighingEquipment weighingEquipment = selectWeighingEquipment(vehicle);\n  double actualMass = measureActualMass(vehicle, weighingEquipment);\n  boolean isQualified = actualMass <= 2500;\n  MassVerificationUnit massVerificationUnit = selectMassVerificationUnit(vehicle);\n  MassVerificationProcess massVerificationProcess = new MassVerificationProcess(vehicle, weighingEquipment, massVerificationUnit, 2500, isQualified);\n  return massVerificationProcess;\n}\n\nWeighingEquipment selectWeighingEquipment(Vehicle vehicle) {\n  // code to select weighing equipment",
    "\n\nSystem: End User Transportation System\n\nEntities:\n- End User: A person who wishes to travel by vehicle.\n- Vehicle: A vehicle that can be used for transportation.\n- Driver: A person who drives the vehicle.\n- Passenger: A person who travels with the driver.\n- Environmental Factor: Any factor that affects the safety and sustainability of the journey, such as weather, traffic, or pollution.\n- Gas Station: A place where gasoline is sold and purchased.\n\nRelationships:\n- End User can request a vehicle for transportation.\n- Vehicle can be rented by End User.\n- Driver can drive the vehicle.\n- Passenger can travel with the driver.\n- Vehicle can have up to four passengers.\n- Vehicle can be equipped with various devices, such as a seat belt, wipers, or air conditioning.\n- Vehicle can be parked at a designated parking spot.\n- End User can enter and exit the vehicle freely.\n- Vehicle can be equipped with sensors to detect surrounding environmental factors.\n- Vehicle can be equipped with a navigation system to assist passengers in finding",
    "\n\nSystem: Transportation System\n\nEntities:\n- Driver\n- Passenger\n- Vehicle\n- Gas Station\n- Environmental Conditions\n\nActivities:\n- Enter Vehicle\n- Operate Vehicle\n- Refuel Vehicle\n- Exit Vehicle\n\nConstraints:\n- Driver and Passenger must be seated in the same seat\n- Driver must be able to operate the vehicle under the influence of environmental conditions\n- Gas Station must be within a certain distance of the destination\n- Vehicle must have enough fuel to complete the journey\n- Vehicle must be able to safely exit the vehicle\n- System should ensure that interactions among all participants are simple and convenient\n\nInteractions:\n- Driver enters the vehicle\n- Driver operates the vehicle under the influence of environmental conditions\n- Driver refuels the vehicle at a gas station as needed\n- Driver exits the vehicle\n- Passengers exit the vehicle\n\nSystem Boundaries:\n- Vehicle\n- Gas Station\n- Environmental Conditions\n\nSystem Interfaces:\n- User Interface\n- Vehicle Interface\n- Gas Station Interface\n- Environmental Conditions Interface\n\nSystem Functions:\n- Enter Vehicle\n- Operate Vehicle\n- Refuel Vehicle\n- Exit",
    "\n\nSystem: Configuration Management System for Vehicle Product Line\n\nEntities:\n- Vehicle: represents a vehicle product line, which can be equipped with different types of engines and transmissions.\n- Engine: represents an engine type, which can be either four-cylinder or six-cylinder.\n- Transmission: represents a transmission type, which can be either manual or automatic.\n- Cylinder: represents a cylinder type, which can be either small or large.\n- Variant: represents a specific combination of engine, transmission, and cylinder types that can be created for a vehicle.\n\nRelationships:\n- Vehicle has-many Engine\n- Vehicle has-many Transmission\n- Engine has-many Cylinder\n- Variant has-many Engine\n- Variant has-many Transmission\n- Variant has-many Cylinder\n\nConstraints:\n- Each vehicle can have at most one four-cylinder engine and at most one six-cylinder engine.\n- Each vehicle can have at most one manual transmission and at most one automatic transmission.\n- If a vehicle has a four-cylinder engine, it can only have a manual transmission.\n- If a vehicle has a six-cylinder engine, it can",
    "\n\n```\npackage \"Configurable Engine\" {\n  class \"Engine\" {\n    property \"cylinderQuantity\" {\n      type \"Integer\"\n      multiplicity \"*\"\n      defaultValue 4\n      constraint \"value = 4 or value = 6\"\n    }\n    property \"cylinderDiameter\" {\n      type \"Integer\"\n      multiplicity \"*\"\n      defaultValue 70\n      constraint \"value = 70 or value = 100\"\n    }\n    operation \"start\" {\n      parameter \"cylinderQuantity\" {\n        type \"Integer\"\n        multiplicity \"*\"\n        defaultValue 4\n        constraint \"value = 4 or value = 6\"\n      }\n      parameter \"cylinderDiameter\" {\n        type \"Integer\"\n        multiplicity \"*\"\n        defaultValue 70\n        constraint \"value = 70 or value = 100\"\n      }\n    }\n  }\n}\n```\r\n\r\nExplanation:\r\n\r\n- The package name is \"Configurable Engine\".\r\n- The class name is \"Engine\".\r\n- The property \"cylinderQuantity\" is defined with a type of \"Integer\", a multiplicity of \"*\", a default value of 4, and a constraint of \"value = 4 or value = 6\".\r",
    "\n\n```\nModel: Automotive Configuration Space\n\nEntities:\n  Vehicle : Entity {\n    engineType : EngineType\n    transmissionType : TransmissionType\n    cylinderDiameter : CylinderDiameter\n  }\n  EngineType : Enum {\n    FourCylinderEngine\n    SixCylinderEngine\n  }\n  TransmissionType : Enum {\n    ManualTransmission\n    AutomaticTransmission\n  }\n  CylinderDiameter : Enum {\n    70mm\n    100mm\n  }\n\nConstraints:\n  -- Only one engine type can be selected for each vehicle\n  all v : Vehicle | #select(v.engineType) = 1\n  -- Only one transmission type can be selected for each vehicle\n  all v : Vehicle | #select(v.transmissionType) = 1\n  -- If the engine is a 4-cylinder, a manual transmission must be used\n  all v : Vehicle | v.engineType = FourCylinderEngine => v.transmissionType = ManualTransmission\n  -- If the engine is a 6-cylinder, an automatic transmission must be used\n  all v : Vehicle | v.engineType = SixCylinderEngine => v.transmissionType = AutomaticTransmission\n\n```",
    "\n\nsystem assembly = {\n  computer subsystem,\n  storage subsystem,\n  software design section\n}\n\nsoftware design section = {\n  message format,\n  data format\n}\n\ncomputer subsystem = {\n  software integration,\n  hardware integration\n}\n\nstorage subsystem = {\n  message and data format compatibility,\n  data structure specifications\n}\n\nsoftware integration = {\n  message format,\n  data format\n}\n\nhardware integration = {\n  message and data format compatibility,\n  data structure specifications\n}\n\nmessage format = {\n  message structure,\n  message content\n}\n\ndata format = {\n  data structure,\n  data content\n}\n\nmessage structure = {\n  message header,\n  message body\n}\n\nmessage content = {\n  message type,\n  message format\n}\n\ndata structure = {\n  data fields,\n  data relationships\n}\n\ndata content = {\n  data type,\n  data format\n}\n\ndata fields = {\n  field name,\n  field type,\n  field length\n}\n\ndata relationships = {\n  relationship type,\n  relationship target\n}\n\nfield name = string\n\nfield type = string\n\nfield length = integer\n\nrelationship type = string\n\nrelationship target",
    "\n\nPowertrain System:\n  Physical Layer:\n    Power Unit:\n      Engine:\n        Torque Generator:\n          Input:\n            Power: real\n            Speed: real\n          Output:\n            Torque: real\n  Logical Layer:\n    Torque Generator:\n      Input:\n        Power: real\n        Speed: real\n      Output:\n        Torque: real\n\n––––––––––––––––––––––––––––––––––\n\nInput Requirement:\nThe system must be able to handle different types of vehicles, such as cars, trucks, and buses, and provide a consistent user experience across all types of vehicles. The system should be able to handle different powertrain systems, such as diesel engines, electric motors, and hybrid vehicles, and provide a consistent user experience across all powertrain systems. The system should be able to handle different power consumption levels, such as low, medium, and high, and provide a consistent user experience across all power consumption levels. The system should be able to handle different driving styles, such as normal, electric, and hybrid, and provide a consistent user experience across all driving styles. The system should be able to handle different road conditions, such as dry, wet, and snowy, and provide a consistent user experience across all road conditions. The system should be",
    "\n\nsystem PowerTransmissionSystem {\n  component Powertrain {\n    component Engine {\n      action GeneratingTorque {\n        input Power powerIn;\n        output Torque torqueOut;\n      }\n    }\n  }\n  allocation Powertrain.Engine.GeneratingTorque to Powertrain.Engine;\n}\n\n––––– End of SysML v2 BNF –––––",
    "\n\nVehicle Feature Annotation System:\n\n- Interior Assembly:\n  - Seat Belt:\n    - Safety Function: Provides support for the occupant's head and neck during transportation.\n  - Front Seat:\n    - Safety Function: Provides support for the occupant's head and neck during transportation.\n  - Driver Airbag:\n    - Safety Function: Prevents the driver from taking a fall and helps prevent the driver from injuring themselves.\n  - Alarm System:\n    - Safety Function: Provides warning of an intruder and helps prevent the driver from being involved in an accident.\n\n- Body Assembly:\n  - Body Shell:\n    - Safety Function: Provides a protective barrier for the occupant's body.\n  - Bumper:\n    - Safety Function: Provides a barrier for the occupant's body from obstacles.\n  - Keyless Entry Device:\n    - Safety Function: Allows the occupant to enter the vehicle without a key.\n\n- Vehicle Structure:\n  - Interior Assembly:\n    - Seat Belt\n    - Front Seat\n    - Driver Airbag\n    - Alarm System\n  - Body Assembly:\n    - Body Shell\n    - Bumper\n    - Keyle",
    "\n\nSystem: Automated Vehicle Dynamics Simulation and Analysis System\n\nEntities:\n- Vehicle: represents the vehicle being simulated and analyzed.\n- Simulation: represents the automated simulation process that takes in initial conditions and outputs the vehicle’s dynamic behavior.\n- Analysis: represents the ModelCenter analysis tool that integrates with the simulation process and provides vehicle performance analysis and design optimization.\n- User: represents the person or entity using the system to input initial conditions and obtain simulation results.\n\nRelationships:\n- The Vehicle is modeled using the Physical Modeling Language (PML) and represents the physical properties of the vehicle, such as mass, dimensions, and shape.\n- The Simulation process is modeled using the System Dynamics Language (SDL) and represents the mathematical equations that describe the vehicle’s dynamic behavior.\n- The Analysis process is modeled using the ModelCenter Language (MCL) and represents the integration of the simulation and analysis tools.\n- The User interacts with the system through the User Interface (UI) and inputs initial conditions and obtains simulation results.\n\nConstraints:\n- The system must be capable of handling large volumes of data and ensure accurate data transfer and reliable output of simulation results.\n- The system must be",
    "\n\n@startuml\r\n!define SafetyFeatures\r\n!define MandatorySafetyFeatures\r\n\r\npackage \"Safety Features\" {\r\n  component \"Interior\" {\r\n    slot \"Seat Belt\" {\r\n      isMandatory = true\r\n    }\r\n    slot \"Driver's Airbag\" {\r\n      isMandatory = false\r\n    }\r\n  }\r\n  component \"Body\" {\r\n    slot \"Bumper\" {\r\n      isMandatory = true\r\n    }\r\n  }\r\n  component \"Wheel Assembly\" {\r\n    slot \"Wheels\" {\r\n      isMandatory = true\r\n    }\r\n    slot \"Anti-lock Braking System\" {\r\n      isMandatory = false\r\n    }\r\n  }\r\n  component \"Keyless Entry System\" {\r\n    isMandatory = false\r\n  }\r\n}\r\n\r\npackage \"Mandatory Safety Features\" {\r\n  component \"Interior\" {\r\n    slot \"Seat Belt\" {\r\n      isMandatory = true\r\n    }\r\n  }\r\n  component \"Body\" {\r\n    slot \"Bumper\" {\r\n      isMandatory = true\r\n    }\r\n  }\r\n  component \"Wheel Assembly\" {\r\n    slot \"Wheels\" {\r\n      isMandatory = true\r\n    }\r\n  }\r\n}\r\n@enduml",
    "\n\nVehicleSafetyComplianceSystem:\n  - Components:\n    - VehicleInterior:\n      - SeatBelt1:\n        - SafetyFeature: true\n      - SeatBelt2:\n        - SafetyFeature: true\n      - Bumper:\n        - SafetyFeature: true\n      - KeylessEntrySystem:\n        - SafetyFeature: false\n    - VehicleBody:\n      - Bumper:\n        - SafetyFeature: true\n    - ChassisSystem:\n      - Tires:\n        - NumberOfTires: 4\n      - ABS:\n        - SafetyFeature: false\n  - SafetyClassification:\n    - RequiredByLaw:\n      - SeatBelt1\n      - SeatBelt2\n      - Bumper\n      - Tires\n      - ABS\n    - NonMandatory:\n      - KeylessEntrySystem\n\n––––––––––––––––––––––––––––––––––\n\nInput Requirement:\nThe system must be able to identify and track all vehicles that have been involved in accidents or incidents. The system must be able to provide a comprehensive report on the accident or incident, including the location, time, and severity of the incident. The system must be able to provide a detailed explanation of the cause of the incident, including the type of vehicle,",
    "\n\nSystem: Risk Management System\n\nStakeholders:\n- Management\n- Risk Analysts\n- Risk Managers\n- Risk Executives\n\nUse Cases:\n- Record Risk: The risk management system should allow users to record new risks and failures.\n- Identify Causes: The system should be able to identify the causes of risks and failures.\n- Evaluate Risk: The system should be able to evaluate the probability and severity of risks and failures.\n- Model Causal Relationships: The system should be able to model the sequence and impact mechanisms among different situations.\n- Manage Risk Scenarios: The system should be able to manage different risk scenarios, enabling users to evaluate and manage potential risks and failures in an all-round manner.\n- Control Risk: The system should be able to control risks and failures by implementing risk management strategies.\n- Monitor Risk: The system should be able to monitor risks and failures to identify trends and patterns.\n\nEntities:\n- Risk: A risk is a potential failure that may occur in a system.\n- Cause: A cause is a factor that can lead to a risk.",
    "\n\nSystem: Systematic Risk Metadata Modeling and Management System\r\n\r\nEntities:\r\n- Scenario: A scenario is a specific occurrence of a system that can cause harm or damage.\r\n- Cause: A cause is a factor that can cause harm or damage to a system.\r\n- Failure: A failure is a degradation or a malfunction of a system that can cause harm or damage.\r\n- Risk: A risk is a potential harm or damage to a system that can occur.\r\n\r\nRelationships:\r\n- Scenario can have many causes, and a cause can have many scenarios.\r\n- Scenario can have many failures, and a failure can have many scenarios.\r\n- Scenario can have many risks, and a risk can have many scenarios.\r\n\r\nAttributes:\r\n- Scenario:\r\n  - Name: The name of the scenario.\r\n  - Description: A brief description of the scenario.\r\n  - Probability: The probability of occurrence of the scenario.\r\n  - Impact: The potential harm or damage caused by the scenario.\r\n- Cause:\r\n  - Name: The name of the cause.\r\n  - Description: A brief description of the cause.\r\n  - Probability: The probability of occurrence of",
    "\n\nSystem: Equipment Monitoring System\n\nEntities:\n- Battery: A component that stores electricity and provides power to the equipment.\n- Equipment: The device that requires continuous monitoring of the battery level.\n- User: The person who uses the equipment.\n\nActivities:\n- Monitor Battery Level: The system continuously monitors the battery level of the equipment.\n- Detect Battery Aging: The system detects the risk of battery aging and identifies the risk that the battery level may fall below the set minimum threshold.\n- Determine Low Battery State: The system determines that the equipment is in a “low battery” state when the battery level falls below the set minimum threshold.\n- Analyze Low Battery State: The system further analyzes the situation when the battery level is below the set minimum threshold.\n- Assign Severity Level: The system assigns an appropriate severity level to high-level failures that may cause the interruption of critical device functions.\n- Alert Users: The system alerts users and maintenance personnel of high-level failures that may cause the interruption of critical device functions.\n- Intervene to Mitigate Risks: The system intervenes to mitigate potential risks",
    "\nThe system model should include a top-down hierarchical structure that clearly delineates the system into multiple subsystems and components. Each subsystem should be composed of components that are responsible for performing a specific function or set of functions. The interfaces between components should be well defined, so that each component can be independently understood and analyzed while also collaborating effectively within the overall system. The system model should also include a clear understanding of the system's functional and performance requirements, which can be used to verify the system's integrity and modular design. Additionally, the system model should be designed to be easily understood and used by engineers and parties involved in Independent Verification and Validation (IV&V).",
    "\n\n```\nroot Component system {\n  subsystem Component subsystem1 {\n    component Component component1 {\n      interface Interface interface1 {\n        operation Operation operation1();\n        operation Operation operation2();\n      }\n      interface Interface interface2 {\n        operation Operation operation3();\n        operation Operation operation4();\n      }\n    }\n    component Component component2 {\n      interface Interface interface3 {\n        operation Operation operation5();\n        operation Operation operation6();\n      }\n      interface Interface interface4 {\n        operation Operation operation7();\n        operation Operation operation8();\n      }\n    }\n  }\n  subsystem Component subsystem2 {\n    component Component component3 {\n      interface Interface interface5 {\n        operation Operation operation9();\n        operation Operation operation10();\n      }\n      interface Interface interface6 {\n        operation Operation operation11();\n        operation Operation operation12();\n      }\n    }\n    component Component component4 {\n      interface Interface interface7 {\n        operation Operation operation13();\n        operation Operation operation14();\n      }\n      interface Interface interface8 {\n        operation Operation operation15();\n        operation Operation operation16();\n      }\n    }\n  }\n}\n\nsafetyAttribute SafetyAttribute safetyAttribute1 {\n  mandatory boolean true;\n}\n\nsafetyAttribute SafetyAttribute safetyAttribute2 {\n  mandatory",
    "\n\npackage automotive {\n  component Car {\n    // A car is a vehicle that is designed to transport people and goods.\n    // It is typically designed to carry a driver and passengers, and is typically driven by a human driver.\n    // A car can be a motorcycle, a car, a truck, or a bus.\n    // A car can have different types of bodywork, such as a sports car, a convertible, or a van.\n    // A car can have different types of engines, such as a diesel engine, an electric engine, or a hybrid engine.\n    // A car can have different types of brands, such as Toyota, Ford, or Chevrolet.\n    // A car can have different types of models, such as the Corolla, the Mustang, or the Civic.\n    // A car can have different types of versions, such as the 2021 model, the 2022 model, or the 2023 model.\n    // A car can have different types of colors, such as red, blue, or black.\n    // A car can have different types of interior designs, such as leather, alumin",
    "\n\nSystem: Automobile Document Management Platform\n\nStakeholders:\n- Automotive Manufacturers\n- Automotive Service Providers\n- Automotive Sales Agents\n- Automotive Customers\n\nUse Cases:\n- Record and manage information about automobiles\n- Search and retrieve information about automobiles\n- Archive and retrieve information about automobiles\n- Add explanatory documents for different objects and their aliases\n- Support compatibility with standard physical quantity systems\n\nEntities:\n- Automobile: represents a vehicle that can be manufactured, sold, or used for transportation.\n- Document: represents a piece of information that is created or stored in a digital format.\n- PhysicalQuantity: represents a physical quantity that can be measured and expressed in a standardized way.\n- ExplanatoryDocument: represents a document that provides explanations or additional information about an object.\n\nRelationships:\n- Automobile has a Document.\n- Automobile has a PhysicalQuantity.\n- Automobile has an ExplanatoryDocument.\n- Document is related to PhysicalQuantity.\n- Document is related to ExplanatoryDocument.\n\nConstraints:\n- The system must be user-friendly and intuitive",
    "\n\n```\nModel CarSystem {\n  package PhysicalQuantities {\n    scalar type TorqueValue\n    unit TorqueValue \"N m\"\n    alias Torque \"TorqueValue\"\n  }\n  package Automobile {\n    class Automobile {\n      attribute String alias\n      attribute PhysicalQuantities::TorqueValue torqueValue\n    }\n  }\n  Automobile::Automobile car1 [0..*]\n  Automobile::Automobile car2 [0..*]\n  Automobile::Automobile car3 [0..*]\n  Automobile::Automobile car4 [0..*]\n  Automobile::Automobile car5 [0..*]\n  Automobile::Automobile car6 [0..*]\n  Automobile::Automobile car7 [0..*]\n  Automobile::Automobile car8 [0..*]\n  Automobile::Automobile car9 [0..*]\n  Automobile::Automobile car10 [0..*]\n}\n```\r\n\r\nExplanation:\r\n\r\nThe system model consists of two packages: PhysicalQuantities and Automobile. The PhysicalQuantities package defines a scalar type TorqueValue with a unit of \"N m\" and an alias \"Torque\" for the Tor",
    "\n\nVehicle:\n  - id: string\n  - type: string\n  - size: string\n  - engine: Engine\n\nEngine:\n  - id: string\n  - cylinders: integer\n\nConfiguration:\n  - vehicle: Vehicle\n  - engine: Engine\n  - cylinders: integer\n\nConfigurationRule:\n  - vehicleType: string\n  - vehicleSize: string\n  - engineCylinders: integer\n  - configuration: Configuration\n\nConfigurationRuleEngine:\n  - engineType: string\n  - engineCylinders: integer\n  - configurationRule: ConfigurationRule\n\nConfigurationRuleVehicle:\n  - vehicleType: string\n  - vehicleSize: string\n  - configurationRule: ConfigurationRule\n\nConfigurationRuleEngine:\n  - engineType: string\n  - engineCylinders: integer\n  - configurationRule: ConfigurationRule\n\nConfigurationRuleVehicle:\n  - vehicleType: string\n  - vehicleSize: string\n  - configurationRule: ConfigurationRule\n\nConfigurationRuleEngine:\n  - engineType: string\n  - engineCylinders: integer\n  - configurationRule: ConfigurationRule\n\nConfigurationRuleVehicle:\n  - vehicleType: string\n  - vehicleSize: string\n  - configurationRule: ConfigurationRule\n\nConfigurationRuleEngine:\n  - engine",
    "\n\n```\nsystem System {\n  component fuelTank {\n    connector FuelInterface {\n      interface {\n        operation fuelSupply()\n        operation fuelReturn()\n      }\n    }\n    property temperature\n    operation monitorTemperature()\n  }\n  component engine {\n    connector FuelInterface {\n      interface {\n        operation fuelSupply()\n        operation fuelReturn()\n      }\n    }\n    property temperature\n    operation manageFuelFlow()\n  }\n  connector FuelFlow {\n    interface {\n      operation fuelSupply()\n      operation fuelReturn()\n    }\n  }\n  connection fuelTank.FuelInterface -> engine.FuelInterface\n  connection fuelTank.monitorTemperature -> engine.manageFuelFlow\n  connection fuelTank.temperature -> fuelFlow.fuelSupply\n  connection engine.temperature -> fuelFlow.fuelReturn\n}\n```",
    "\n\nvehicle_structural_architecture = {\r\n  vehicle : mass,\r\n  axle_assemblies : {\r\n    front_axle : {\r\n      axle_components,\r\n      wheels : {\r\n        left_front_wheel,\r\n        right_front_wheel\r\n      }\r\n    },\r\n    rear_axle : {\r\n      axle_components,\r\n      wheels : {\r\n        left_rear_wheel,\r\n        right_rear_wheel\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nvehicle = {\r\n  mass\r\n}\r\n\r\naxle_assemblies = {\r\n  front_axle : {\r\n    axle_components,\r\n    wheels : {\r\n      left_front_wheel,\r\n      right_front_wheel\r\n    }\r\n  },\r\n  rear_axle : {\r\n    axle_components,\r\n    wheels : {\r\n      left_rear_wheel,\r\n      right_rear_wheel\r\n    }\r\n  }\r\n}\r\n\r\naxle_components = {\r\n  axle_width,\r\n  axle_thickness,\r\n  axle_length,\r\n  axle_offset\r\n}\r\n\r\nwheels = {\r\n  left_front_wheel,\r\n  right_front_wheel,\r\n  left_rear_wheel,\r\n  right_rear_"
]