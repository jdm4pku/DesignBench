[
    "package 'Vehicle' {\n\tattribute def Mass;\n\tattribute def Status;\n\tattribute def Engine;\n\tattribute def Driver;\n\tport def MassPort {\n\t\tout mass: Mass;\n\t}\n\tport def StatusPort {\n\t\tout status: Status;\n\t}\n\tport def EnginePort {\n\t\tout engine: Engine;\n\t}\n\tport def DriverPort {\n\t\tout driver: Driver;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport massPort: MassPort;\n\t\t\tport statusPort: StatusPort;\n\t\t\tport enginePort: EnginePort;\n\t\t\tport driverPort: DriverPort;\n\t\t\tperform defineVehicle.defineVehicle {\n\t\t\t\tin mass = massPort.mass;\n\t\t\t\tin status = statusPort.status;\n\t\t\t\tin engine = enginePort.engine;\n\t\t\t\tin driver = driverPort.driver;\n\t\t\t}\n\t\t}\n\t\tpart engine {\n\t\t\tperform manageEngine.manageEngine {\n\t\t\t\tin engine = enginePort.engine;\n\t\t\t}\n\t\t}\n\t\tpart driver {\n\t\t\tperform manageDriver.manageDriver {\n\t\t\t\tin driver = driverPort.driver;\n\t\t\t}\n\t",
    "package 'VehicleModel' {\n\tattribute def VehicleType;\n\tattribute def EngineType;\n\tattribute def PersonnelType;\n\tport def VehicleTypePort {\n\t\tout vehicleType: VehicleType;\n\t}\n\tport def EngineTypePort {\n\t\tout engineType: EngineType;\n\t}\n\tport def PersonnelTypePort {\n\t\tout personnelType: PersonnelType;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport vehicleTypePort: VehicleTypePort;\n\t\t\tperform vehicleType.determineVehicleType {\n\t\t\t\tout vehicleType = vehicleTypePort.vehicleType;\n\t\t\t}\n\t\t\tpart personnel {\n\t\t\t\tport personnelTypePort: PersonnelTypePort;\n\t\t\t\tperform personnelType.determinePersonnelType {\n\t\t\t\t\tout personnelType = personnelTypePort.personnelType;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart engine {\n\t\t\t\tport engineTypePort: EngineTypePort;\n\t\t\t\tperform engineType.determineEngineType {\n\t\t\t\t\tout engineType = engineTypePort.engineType;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\taction vehicleType {\n\t\taction determineVehicleType { out",
    "package 'VehicleStructure' {\n\tclass vehicle {\n\t\tattribute def engine;\n\t\tattribute def transmission;\n\t\tattribute def wheels;\n\t\tcomposition def engine;\n\t\tcomposition def transmission;\n\t\tcomposition def wheels;\n\t}\n\tclass vehicleComponent {\n\t\tattribute def name;\n\t}\n\tclass engine extends vehicleComponent {\n\t\tattribute def type;\n\t}\n\tclass transmission extends vehicleComponent {\n\t\tattribute def type;\n\t}\n\tclass wheel extends vehicleComponent {\n\t\tattribute def type;\n\t}\n\tclass vehicleStructure {\n\t\tcomposition def vehicles;\n\t}\n\taction defineVehicleStructure {\n\t\taction defineVehicle {\n\t\t\tin engine: engine;\n\t\t\tin transmission: transmission;\n\t\t\tin wheels: wheel[4];\n\t\t\tout vehicle: vehicle;\n\t\t}\n\t\taction defineEngine {\n\t\t\tin name: string;\n\t\t\tin type: string;\n\t\t\tout engine: engine;\n\t\t}\n\t\taction defineTransmission {\n\t\t\tin name: string;\n\t\t\tin type: string;\n\t\t\tout transmission: transmission;\n\t\t}\n\t\taction defineWheel {\n\t\t\tin name: string;\n\t\t\t",
    "package 'VehicleClassification' {\n\tattribute def VehicleType;\n\tattribute def EngineType;\n\tattribute def EngineCylinders;\n\tport def VehicleTypePort {\n\t\tout vehicleType: VehicleType;\n\t}\n\tport def EngineTypePort {\n\t\tout engineType: EngineType;\n\t}\n\tport def EngineCylindersPort {\n\t\tout engineCylinders: EngineCylinders;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport vehicleTypePort: VehicleTypePort;\n\t\t\tport engineTypePort: EngineTypePort;\n\t\t\tport engineCylindersPort: EngineCylindersPort;\n\t\t\tperform classifyVehicle.classify {\n\t\t\t\tin vehicleType = vehicleTypePort.vehicleType;\n\t\t\t\tin engineType = engineTypePort.engineType;\n\t\t\t\tin engineCylinders = engineCylindersPort.engineCylinders;\n\t\t\t}\n\t\t}\n\t\tinterface userToClassification connect user.vehicleTypePort to classification.vehicleTypePort {\n\t\t\tref flow references classifyVehicle.vehicleTypeFlow\n\t\t\t\tfrom source.vehicleType to target.vehicleType; \n\t\t}\n\t\tinterface userToClassification connect user.",
    "package 'TrafficSignal' {\n\tattribute def Color;\n\tport def ColorPort {\n\t\tout color: Color;\n\t}\n\tpart context {\n\t\tpart signal {\n\t\t\tport colorPort: ColorPort;\n\t\t\tperform changeColor.changeColor {\n\t\t\t\tin color = colorPort.color;\n\t\t\t}\n\t\t}\n\t\tpart greenSignal {\n\t\t\tport colorPort: ~ColorPort;\n\t\t\tperform changeColor.setGreen {\n\t\t\t\tout color = colorPort.color;\n\t\t\t}\n\t\t}\n\t}\n\taction changeColor {\n\t\taction changeColor { in color: Color; }\n\t\taction setGreen { out color: Color; }\n\t}\n}",
    "package 'Classification' {\n\tattribute def Code;\n\tattribute def Color;\n\tattribute def Grade;\n\tport def CodePort {\n\t\tout code: Code;\n\t}\n\tport def ColorPort {\n\t\tout color: Color;\n\t}\n\tport def GradePort {\n\t\tout grade: Grade;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport codePort: CodePort;\n\t\t\tport colorPort: ColorPort;\n\t\t\tport gradePort: GradePort;\n\t\t\tperform classifyInformation.classify {\n\t\t\t\tin code = codePort.code;\n\t\t\t\tin color = colorPort.color;\n\t\t\t\tin grade = gradePort.grade;\n\t\t\t}\n\t\t}\n\t\tinterface userToClassification connect user.codePort to classification.codePort {\n\t\t\tref flow references classifyInformation.codeFlow\n\t\t\t\tfrom source.code to target.code; \n\t\t}\n\t\tinterface userToClassification connect user.color",
    "package 'Engine' {\n\tattribute def Cylinders;\n\tport def CylindersPort {\n\t\tout cylinders: Cylinders;\n\t}\n\tpart context {\n\t\tpart smallVehicle {\n\t\t\tport cylindersPort: CylindersPort;\n\t\t\tperform engine.produceCylinders {\n\t\t\t\tout cylinders = cylindersPort.cylinders;\n\t\t\t}\n\t\t}\n\t\tpart largeVehicle {\n\t\t\tport cylindersPort: CylindersPort;\n\t\t\tperform engine.produceCylinders {\n\t\t\t\tout cylinders = cylindersPort.cylinders;\n\t\t\t}\n\t\t}\n\t\tpart engine {\n\t\t\tport cylindersPort: ~CylindersPort;\n\t\t\tperform produceCylinders {\n\t\t\t\tin cylinders = cylindersPort.cylinders;\n\t\t\t}\n\t\t}\n\t}\n\taction engine {\n\t\taction produceCylinders { in cylinders: Cylinders; }\n\t}\n}",
    "package 'VehicleModeling' {\n\tattribute def Quality;\n\tattribute def DriverInfo;\n\tattribute def FuelTankCapacity;\n\tattribute def FuelType;\n\tattribute def FuelLevel;\n\tattribute def PersonnelInfo;\n\tport def QualityPort {\n\t\tout quality: Quality;\n\t}\n\tport def DriverInfoPort {\n\t\tout driverInfo: DriverInfo;\n\t}\n\tport def FuelTankCapacityPort {\n\t\tout fuelTankCapacity: FuelTankCapacity;\n\t}\n\tport def FuelTypePort {\n\t\tout fuelType: FuelType;\n\t}\n\tport def FuelLevelPort {\n\t\tout fuelLevel: FuelLevel;\n\t}\n\tport def PersonnelInfoPort {\n\t\tout personnelInfo: PersonnelInfo;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport qualityPort: QualityPort;\n\t\t\tport driverInfoPort: DriverInfoPort;\n\t\t\tport fuelTankCapacityPort: FuelTankCapacityPort;\n\t\t\tport fuelTypePort: FuelTypePort;\n\t\t\tport fuelLevelPort: FuelLevelPort;\n\t\t\tport personnelInfo",
    "package 'WheelAssembly' {\n\tattribute def BearingUnit;\n\tattribute def Tire;\n\tattribute def Bead;\n\tattribute def Hub;\n\tattribute def Rim;\n\tattribute def BoltMountingHole;\n\tattribute def ThreadedHole;\n\tattribute def BoltConnection;\n\tport def BearingUnitPort {\n\t\tout bearingUnit: BearingUnit;\n\t}\n\tport def TirePort {\n\t\tout tire: Tire;\n\t}\n\tport def BeadPort {\n\t\tout bead: Bead;\n\t}\n\tport def HubPort {\n\t\tout hub: Hub;\n\t}\n\tport def RimPort {\n\t\tout rim: Rim;\n\t}\n\tport def BoltMountingHolePort {\n\t\tout boltMountingHole: BoltMountingHole;\n\t}\n\tport def ThreadedHolePort {\n\t\tout threadedHole: ThreadedHole;\n\t}\n\tport def BoltConnectionPort {\n\t\tout boltConnection: BoltConnection;\n\t}\n",
    "package 'FuelManagementSystem' {\n\tattribute def FuelLevel;\n\tattribute def FuelReturnLevel;\n\tattribute def Temperature;\n\tport def FuelLevelPort {\n\t\tin fuelLevel : FuelLevel;\n\t}\n\tport def FuelReturnLevelPort {\n\t\tin fuelReturnLevel : FuelReturnLevel;\n\t}\n\tport def TemperaturePort {\n\t\tin temperature : Temperature;\n\t}\n\tpart context {\n\t\tpart fuelTank {\n\t\t\tport fuelLevelPort: FuelLevelPort;\n\t\t\tport fuelReturnLevelPort: FuelReturnLevelPort;\n\t\t\tperform fuelTransfer.receiveFuel {\n\t\t\t\tin fuelLevel = fuelLevelPort.fuelLevel;\n\t\t\t\tout fuelReturnLevel = fuelReturnLevelPort.fuelReturnLevel;\n\t\t\t}\n\t\t\tperform fuelTransfer.transferFuel {\n\t\t\t\tin fuelLevel = fuelLevelPort.fuelLevel;\n\t\t\t\tout fuelReturnLevel = fuelReturnLevelPort.fuelReturnLevel;\n\t\t\t}\n\t\t\tperform fuelTransfer.transmitTemperature {\n\t\t\t\tin temperature = temperaturePort.temperature;\n\t\t\t}\n\t\t}\n\t\tpart engine {\n\t\t\tport fuelLevelPort: ~FuelLevelPort;\n\t\t",
    "package 'Vehicle Configuration Model' {\n\tattribute def Mass;\n\tattribute def Axle;\n\tattribute def Tire;\n\tport def MassPort {\n\t\tout mass: Mass;\n\t}\n\tport def AxlePort {\n\t\tout axle: Axle;\n\t}\n\tport def TirePort {\n\t\tout tire: Tire;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tattribute def Mass;\n\t\t\tattribute def Axle;\n\t\t\tattribute def Tire;\n\t\t\tattribute def VehicleName;\n\t\t\tattribute def VehicleDescription;\n\t\t\tattribute def VehicleConfiguration;\n\t\t\tport def MassPort {\n\t\t\t\tout mass: Mass;\n\t\t\t}\n\t\t\tport def AxlePort {\n\t\t\t\tout axle: Axle;\n\t\t\t}\n\t\t\tport def TirePort {\n\t\t\t\tout tire:",
    "package 'CouplingSystem' {\n\tattribute def Vehicle;\n\tattribute def Trailer;\n\tattribute def Hitch;\n\tport def VehiclePort {\n\t\tout vehicle: Vehicle;\n\t}\n\tport def TrailerPort {\n\t\tout trailer: Trailer;\n\t}\n\tport def HitchPort {\n\t\tout hitch: Hitch;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport hitchPort: HitchPort;\n\t\t\tperform connectVehicleToTrailer.connectVehicle {\n\t\t\t\tin hitch = hitchPort.hitch;\n\t\t\t\tout vehicle = vehiclePort.vehicle;\n\t\t\t}\n\t\t}\n\t\tpart trailer {\n\t\t\tport hitchPort: ~HitchPort;\n\t\t\tperform connectVehicleToTrailer.connectTrailer {\n\t\t\t\tin hitch = hitchPort.hitch;\n\t\t\t\tout trailer = trailerPort.trailer;\n\t\t\t}\n\t\t}\n\t\tpart hitch",
    "package 'VehiclePowerTransmissionSystem' {\n\tattribute def FuelCmd;\n\tattribute def Power;\n\tattribute def Clutch;\n\tport def FuelCmdPort {\n\t\tout fuelCmd : FuelCmd;\n\t}\n\tport def PowerPort {\n\t\tin power : Power;\n\t}\n\tport def ClutchPort {\n\t\tin clutch : Clutch;\n\t}\n\tpart context {\n\t\tpart engine {\n\t\t\tport fuelCmdPort: FuelCmdPort;\n\t\t\tperform powerTransmission.receiveFuelCmd {\n\t\t\t\tin fuelCmd = fuelCmdPort",
    "package 'IntegratedManagementSystem' {\n\tpart b11 {\n\t\tpart c1 {\n\t\t\tport pb: ~pb;\n\t\t\tinterface pe: ~pe {\n\t\t\t\tref flow references pbFlow from source.pb to target.pb;\n\t\t\t}\n\t\t}\n\t\tpart c2 {\n\t\t\tport pb: ~pb;\n\t\t\tinterface pe: ~pe {\n\t\t\t\tref flow references pbFlow from source.pb to target.pb;\n\t\t\t}\n\t\t}\n\t}\n\tpart b12 {\n\t\tpart c3 {\n\t\t\tport pd: ~pd",
    "package 'Powertrain' {\n\tattribute def FuelCmd;\n\tattribute def EngineState;\n\tattribute def PowerOutput;\n\tport def FuelCmdPort {\n\t\tin fuelCmd : FuelCmd;\n\t}\n\tport def EngineStatePort {\n\t\tin engineState : EngineState;\n\t}\n\tport def PowerOutputPort {\n\t\tout powerOutput : PowerOutput;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport fuelCmdPort: FuelCmdPort;\n\t\t\tport engineStatePort: EngineStatePort;\n\t\t\tperform powertrain.sendFuelCmd {\n\t\t\t\tin fuelCmd = fuelCmdPort.fuelCmd;\n\t\t\t}\n\t\t\tperform powertrain.sendEngineState {\n\t\t\t\tin engineState = engineStatePort.engineState;\n\t\t\t}\n\t\t}\n\t\tinterface userToPowertrain connect user.fuelCmdPort to powertrain.fuelCmdPort {\n\t\t\tref flow references powertrain.fuelCmdFlow\n\t\t\t\tfrom source.fuelCmd to target.fuelCmd; \n\t\t}\n\t\tinterface userToPowertrain connect user.engineStatePort",
    "package 'Powertrain' {\n\tattribute def FuelCmd;\n\tattribute def Torque;\n\tattribute def StallSignal;\n\tport def FuelCmdPort {\n\t\tin fuelCmd : FuelCmd;\n\t}\n\tport def TorquePort {\n\t\tout torque : Torque;\n\t}\n\tport def StallSignalPort {\n\t\tin stallSignal : StallSignal;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport fuelCmdPort: FuelCmdPort;\n\t\t\tperform powertrain.sendFuelCmd {\n\t\t\t\tin fuelCmd = fuelCmdPort.fuelCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToEngine connect user.fuelCmdPort to engine.fuelCmdPort {\n\t\t\tref flow references powertrain.fuelCmdFlow\n\t\t\t\tfrom source.fuelCmd to target.fuelCmd; \n\t\t}\n\t\tpart engine {\n\t\t\tport fuelCmdPort: ~FuelCmdPort;\n\t\t\tperform powertrain.generateTorque {\n\t\t\t\tout torque = torquePort.torque;\n\t\t\t}\n\t\t\tport torquePort: TorquePort ;\n\t\t}\n\t\tpart transmission {\n\t\t\tport",
    "package 'VehiclePowertrainSystem' {\n\tattribute def FuelCommand;\n\tattribute def EngineOutputTorque;\n\tattribute def TransmissionTorque;\n\tattribute def WheelTorque;\n\tport def FuelCommandPort {\n\t\tin fuelCommand : FuelCommand;\n\t}\n\tport def EngineOutputTorquePort {\n\t\tout engineOutputTorque : EngineOutputTorque;\n\t}\n\tport def TransmissionTorquePort {\n\t\tout transmissionTorque : TransmissionTorque;\n\t}\n\tport def WheelTorquePort {\n\t\tout wheelTorque : WheelTorque;\n\t}\n\tpart context {\n\t\tpart driver {\n\t\t\tport fuelCommandPort: FuelCommandPort;\n\t\t\tperform powertrainSystem.sendFuelCommand {\n\t\t\t\tin fuelCommand = fuelCommandPort.fuelCommand;\n\t\t\t}\n\t\t}\n\t\tinterface driverToPowertrainSystem connect driver.fuelCommandPort to powertrainSystem.fuelCommandPort {\n\t\t\tref flow references powertrainSystem.fuelCommandFlow\n\t\t\t\tfrom source.fuelCommand to target.fuelCommand; \n\t\t}\n\t\tpart powertrainSystem {\n\t\t\tport fuelCommand",
    "package 'PowerConnection' {\n\tattribute def Connected;\n\tattribute def Disconnected;\n\tport def ConnectedPort {\n\t\tout connected: Connected;\n\t}\n\tport def DisconnectedPort {\n\t\tout disconnected: Disconnected;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport connectedPort: ConnectedPort;\n\t\t\tperform connectTrailer.sendConnected {\n\t\t\t\tout connected = connectedPort.connected;\n\t\t\t}\n\t\t}\n\t\tpart trailer {\n\t\t\tport disconnectedPort: DisconnectedPort;\n\t\t\tperform connectTrailer.sendDisconnected {\n\t\t\t\tout disconnected = disconnectedPort.disconnected;\n\t\t\t}\n\t\t}\n\t\tinterface vehicleToTrailer connect vehicle.connectedPort to trailer.disconnectedPort {\n\t\t\tref flow references connectTrailer.connectedFlow\n\t\t\t\tfrom source.connected to target.disconnected; \n\t\t}\n\t\tinterface trailerToVehicle connect trailer.disconnectedPort to vehicle.connectedPort {\n\t\t\tref flow references connectTrailer.disconnectedFlow\n\t\t\t\tfrom source.disconnected to target.connected; \n\t\t}\n\t\tpart hitch {\n\t\t\tport connectedPort: ~ConnectedPort;\n\t\t\tperform connectTrailer.hitchTr",
    "package 'VehicleTrailerConnectionSystem' {\n\tattribute def ConnectionStatus;\n\tport def ConnectionStatusPort {\n\t\tin connectionStatus: ConnectionStatus;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport connectionStatusPort: ConnectionStatusPort;\n\t\t\tperform connectToTrailer.sendConnectionStatus {\n\t\t\t\tout connectionStatus = connectionStatusPort.connectionStatus;\n\t\t\t}\n\t\t}\n\t\tinterface vehicleToChassis connect vehicle.connectionStatusPort to chassis.connectionStatusPort {\n\t\t\tref flow references connectToTrailer.connectionStatusFlow\n\t\t\t\tfrom source.connectionStatus to target.connectionStatus; \n\t\t}\n\t\tpart chassis {\n\t\t\tport connectionStatusPort: ~ConnectionStatusPort;\n\t\t\tperform connectToTrailer.receiveConnectionStatus {\n\t\t\t\tin connectionStatus = connectionStatusPort.connectionStatus;\n\t\t\t}\n\t\t}\n\t\tpart trailer {\n\t\t\tport connectionStatusPort: ConnectionStatusPort;\n\t\t\tperform connectToTrailer.sendConnectionStatus {\n\t\t\t\tout connectionStatus = connectionStatusPort.connectionStatus;\n\t\t\t}\n\t",
    "package 'DynamicConnectionReferenceModel' {\n\tattribute def Vehicle;\n\tattribute def Trailer;\n\tattribute def TowedBall;\n\tattribute def Coupler;\n\tattribute def Hitch;\n\tattribute def Unhitch;\n\tport def VehiclePort {\n\t\tout vehicle: Vehicle;\n\t}\n\tport def TrailerPort {\n\t\tout trailer: Trailer;\n\t}\n\tport def TowedBallPort {\n\t\tout towedBall: TowedBall;\n\t}\n\tport def CouplerPort {\n\t\tout coupler: Coupler;\n\t}\n\tport def HitchPort {\n\t\tout hitch: Hitch;\n\t}\n\tport def UnhitchPort {\n\t\tout unhitch: Unhitch;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport vehiclePort: VehiclePort;\n\t\t\tpart towBall {\n\t\t\t\tport towedBallPort: TowedBallPort;\n\t\t\t}\n\t\t\tpart coupler {\n\t\t\t\tport couplerPort: CouplerPort;\n\t\t\t}\n\t\t}\n\t\tpart",
    "package 'FuelSystem' {\n\tattribute def FuelSupply;\n\tattribute def FuelReturn;\n\tattribute def Temperature;\n\tport def FuelSupplyPort {\n\t\tin fuelSupply : FuelSupply;\n\t}\n\tport def FuelReturnPort {\n\t\tout fuelReturn : FuelReturn;\n\t}\n\tport def TemperaturePort {\n\t\tin temperature : Temperature;\n\t}\n\tpart context {\n\t\tpart fuelTank {\n\t\t\tport fuelSupplyPort: FuelSupplyPort;\n\t\t\tport fuelReturnPort: FuelReturnPort;\n\t\t\tperform fuelSupply.transferFuel {\n\t\t\t\tin fuelSupply = fuelSupplyPort.fuelSupply;\n\t\t\t\tout fuelReturn = fuelReturnPort.fuelReturn;\n\t\t\t}\n\t\t}\n\t\tpart engine {\n\t\t\tport fuelSupplyPort: ~FuelSupplyPort;\n\t\t\tport fuelReturnPort: ~FuelReturnPort;\n\t\t\tperform fuelReturn.transferFuel {\n\t\t\t\tin fuelReturn = fuelReturnPort.fuelReturn;\n\t\t\t\tout fuelSupply = fuelSupplyPort.fuelSupply;\n\t\t\t}\n\t\t}\n\t\tpart fuelSupply {\n\t\t\tport fuelSupplyPort: ~FuelSupplyPort;\n\t\t\tperform",
    "package 'FuelDeliverySystem' {\n\tattribute def Fuel;\n\tattribute def FuelLevel;\n\tattribute def FuelCapacity;\n\tport def FuelPort {\n\t\tin fuel: Fuel;\n\t}\n\tport def FuelLevelPort {\n\t\tout fuelLevel: FuelLevel;\n\t}\n\tport def FuelCapacityPort {\n\t\tout fuelCapacity: FuelCapacity;\n\t}\n\tpart context {\n\t\tpart storageTank {\n\t\t\tport fuelPort: FuelPort;\n\t\t\tperform fuelPump.extractFuel {\n\t\t\t\tin fuel = fuelPort.fuel;\n\t\t\t}\n\t\t}\n\t\tpart fuelPump {\n\t\t\tport fuelPort: ~FuelPort;\n\t\t\tperform fuelPump.transferFuel {\n\t\t\t\tin fuel = fuelPort.fuel;\n\t\t\t}\n\t\t}\n\t\tpart vehicle {\n\t\t\tport fuelTank: FuelPort;\n\t\t\tperform fuelTank.receiveFuel {\n\t\t\t\tin fuel = fuelTank.fuel;\n\t\t\t}\n\t\t\tperform fuelTank.monitorFuelLevel {\n\t\t\t\tout fuelLevel = fuel",
    "package 'VehicleAssembly' {\n\tattribute def Vehicle;\n\tattribute def Gearbox;\n\tattribute def Engine;\n\tport def VehiclePort {\n\t\tout vehicle: Vehicle;\n\t}\n\tport def GearboxPort {\n\t\tout gearbox: Gearbox;\n\t}\n\tport def EnginePort {\n\t\tout engine: Engine;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport vehiclePort: VehiclePort;\n\t\t\tperform assemblyLine.assembleVehicle {\n\t\t\t\tout vehicle = vehiclePort.vehicle;\n\t\t\t}\n\t\t}\n\t\tinterface vehicleToGearbox connect vehicle.vehiclePort to gearbox.vehiclePort {\n\t\t\tref flow references assemblyLine.gearboxFlow\n\t\t\t\tfrom source.vehicle to target.vehicle; \n\t\t}\n\t\tinterface vehicleToEngine connect vehicle.vehiclePort to engine.vehiclePort {\n\t\t\tref flow references assemblyLine.engineFlow\n\t\t\t\tfrom source.vehicle to target.vehicle; \n\t\t}\n\t\tpart ge",
    "package 'VehicleA' {\n\tattribute def State;\n\tattribute def Temperature;\n\tport def StatePort {\n\t\tin state: State;\n\t}\n\tport def TemperaturePort {\n\t\tin temperature: Temperature;\n\t}\n\tpart context {\n\t\tpart controller {\n\t\t\tport statePort: StatePort;\n\t\t\tperform manageState.sendStartUpSignal {\n\t\t\t\tin state = statePort.state;\n\t\t\t}\n\t\t\tperform manageState.sendShutDownSignal {\n\t\t\t\tin state = statePort.state;\n\t\t",
    "package 'VehicleBehaviorModelingSystem' {\n\tattribute def Fuel;\n\tattribute def MaintenanceInterval;\n\tattribute def TemperatureThreshold;\n\tport def FuelPort {\n\t\tin fuel: Fuel;\n\t}\n\tport def MaintenanceIntervalPort {\n\t\tin maintenanceInterval: MaintenanceInterval;\n\t}\n\tport def TemperatureThresholdPort {\n\t\tin temperatureThreshold: TemperatureThreshold;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport fuelPort: FuelPort;\n\t\t\tport maintenanceIntervalPort: MaintenanceIntervalPort;\n\t\t\tport temperatureThresholdPort: TemperatureThresholdPort;\n\t\t\tperform startup.initiateStartup {\n\t\t\t\tin fuel = fuelPort.fuel;\n\t\t\t\tin maintenanceInterval = maintenanceIntervalPort.maintenanceInterval;\n\t\t\t\tin temperatureThreshold = temperatureThresholdPort.temperatureThreshold;\n\t\t\t}\n\t\t\tperform healthManagement.",
    "package 'VehicleDynamics' {\n\tattribute def Mass;\n\tattribute def Position;\n\tattribute def Velocity;\n\tattribute def Acceleration;\n\tattribute def Slope;\n\tattribute def FrictionCoefficient;\n\tattribute def Time;\n\tattribute def State;\n\tport def MassPort {\n\t\tout mass: Mass;\n\t}\n\tport def PositionPort {\n\t\tout position: Position;\n\t}\n\tport def VelocityPort {\n\t\tout velocity: Velocity;\n\t}\n\tport def AccelerationPort {\n\t\tout acceleration: Acceleration;\n\t}\n\tport def SlopePort {\n\t\tout slope: Slope;\n\t}\n\tport def FrictionCoefficientPort {\n\t\tout frictionCoefficient: FrictionCoefficient;\n\t}\n\tport def TimePort {\n\t\tout time: Time;\n\t}\n\tport def StatePort {\n\t\tout state: State;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport massPort: MassPort;\n\t\t\tport positionPort: PositionPort;\n\t\t\tport velocityPort: VelocityPort;\n\t\t\tport accelerationPort: AccelerationPort;\n\t\t",
    "package 'ConfigurationManagement' {\n\tattribute def SubsystemAConfig;\n\tattribute def SubsystemBConfig;\n\tattribute def VehicleConfig;\n\tport def SubsystemAConfigPort {\n\t\tout subsystemAConfig : SubsystemAConfig;\n\t}\n\tport def SubsystemBConfigPort {\n\t\tout subsystemBConfig : SubsystemBConfig;\n\t}\n\tport def VehicleConfigPort {\n\t\tout vehicleConfig : VehicleConfig;\n\t}\n\tpart context {\n\t\tpart user",
    "package 'ConfigurableVehiclePlatform' {\n\tattribute def SubsystemA;\n\tattribute def SubsystemB;\n\tattribute def VehicleConfigA;\n\tattribute def VehicleConfigB;\n\tport def SubsystemAPort {\n\t\tout subsystemA: SubsystemA;\n\t}\n\tport def SubsystemBPort {\n\t\tout subsystemB: SubsystemB;\n\t}\n\tport def VehicleConfigAPort {\n\t\tout vehicleConfigA: VehicleConfigA;\n\t}\n\tport def VehicleConfigBPort {\n\t\tout vehicleConfigB: VehicleConfigB;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport subsystemAPort: SubsystemAPort;\n\t\t\tport subsystemBPort: SubsystemBPort;\n\t\t\tport vehicleConfig",
    "package 'VehicleConfigurationSystem' {\n\tattribute def Configuration;\n\tattribute def PerformanceRequirement;\n\tattribute def UserPreference;\n\tport def ConfigurationPort {\n\t\tout configuration: Configuration;\n\t}\n\tport def PerformanceRequirementPort {\n\t\tout performanceRequirement: PerformanceRequirement;\n\t}\n\tport def UserPreferencePort {\n\t\tout userPreference: UserPreference;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport configurationPort: ConfigurationPort;\n\t\t\tport performanceRequirementPort: PerformanceRequirementPort;\n\t\t\tport userPreferencePort: UserPreferencePort;\n\t\t\tperform selectConfiguration.sendConfiguration {\n\t\t\t\tout configuration = configurationPort.configuration;\n\t\t\t\tout performanceRequirement = performanceRequirementPort.performanceRequirement;\n\t\t\t\tout userPreference = userPreferencePort.userPreference;\n\t\t\t}\n\t\t}\n\t\tinterface userToConfigurationSystem connect user.configurationPort to configurationSystem.configurationPort {\n\t\t\tref flow references selectConfiguration.configurationFlow\n\t\t\t\tfrom source.configuration to target.configuration;\n\t\t\tref flow references selectConfiguration.",
    "package 'VehicleRequirements' {\n\tattribute def Mass;\n\tattribute def FuelStatus;\n\tattribute def Powertrain;\n\tattribute def Reliability;\n\tport def MassPort {\n\t\tout mass: Mass;\n\t}\n\tport def FuelStatusPort {\n\t\tout fuelStatus: FuelStatus;\n\t}\n\tport def PowertrainPort {\n\t\tout powertrain: Powertrain;\n\t}\n\tport def ReliabilityPort {\n\t\tout reliability: Reliability;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport massPort: MassPort;\n\t\t\tport fuelStatusPort: FuelStatusPort;\n\t\t\tport powertrainPort:",
    "package 'ComplianceVerificationSystem' {\n\tattribute def VehicleMass;\n\tattribute def MaxPermissibleMass;\n\tattribute def ComplianceStatus;\n\tport def VehicleMassPort {\n\t\tin vehicleMass: VehicleMass;\n\t}\n\tport def MaxPermissibleMassPort {\n\t\tin maxPermissibleMass: MaxPermissibleMass;\n\t}\n\tport def ComplianceStatusPort {\n\t\tout complianceStatus: ComplianceStatus;\n\t}\n\tpart context {\n\t\tpart testOperator {\n\t\t\tport vehicleMassPort: VehicleMassPort;\n\t\t\tport maxPermissibleMassPort: MaxPermissibleMassPort;\n\t\t\tperform measureVehicleMass.measure {\n\t\t\t\tin vehicleMass = vehicleMassPort.vehicleMass;\n\t\t\t\tout measuredMass: VehicleMass;\n\t\t\t}\n\t\t\tperform compareMeasuredMass.compare {\n\t\t\t\tin measuredMass;\n\t\t\t\tin maxPermissibleMass = maxPermissibleMassPort.maxPermissibleMass;\n\t\t\t\tout complianceStatus = complianceStatusPort.complianceStatus;\n\t\t\t}\n\t\t}\n\t\tpart vehicle {\n\t\t\tport vehicleMassPort: ~VehicleMassPort;\n\t\t\tport complianceStatusPort:",
    "package 'WaterSupplyNetwork' {\n\tattribute def SpigotBank;\n\tattribute def Spigot;\n\tattribute def Faucet;\n\tattribute def FaucetInlet;\n\tport def SpigotBankPort {\n\t\tin spigotBank: SpigotBank;\n\t}\n\tport def SpigotPort {\n\t\tin spigot: Spigot;\n\t}\n\tport def FaucetPort {\n\t\tin faucet: Faucet;\n\t}\n\tport def FaucetInletPort {\n\t\tin faucetInlet: FaucetInlet;\n\t}\n\tpart context {\n\t\tpart spigotBank {\n\t\t\tport spigotBankPort: SpigotBankPort;\n\t\t\tperform distributeWater.receiveSpigotBank {\n\t\t\t\tin spigotBank = spigotBankPort.spigotBank;\n\t\t\t}\n\t\t}\n\t\tinterface spigotBankToSpigot connect spigotBank.spigotBankPort to spigot.spigotPort {\n\t\t\tref flow references distributeWater.spigotBankToSpigotFlow\n\t\t\t",
    "package 'VehicleQualityModelingSystem' {\n\tattribute def ComponentQualityData;\n\tattribute def TotalMass;\n\tport def ComponentQualityDataPort {\n\t\tin componentQualityData: ComponentQualityData;\n\t}\n\tport def TotalMassPort {\n\t\tout totalMass: TotalMass;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport componentQualityDataPort: ComponentQualityDataPort;\n\t\t\tperform aggregateComponentQualityData.receiveComponentQualityData {\n\t\t\t\tin componentQualityData = componentQualityDataPort.componentQualityData;\n\t\t\t}\n\t\t}\n\t\tinterface userToComponent connect user.componentQualityDataPort to component.componentQualityDataPort {\n\t\t\tref flow references aggregateComponentQualityData.componentQualityDataFlow\n\t\t\t\tfrom source.componentQualityData to target.componentQualityData; \n\t\t}\n\t\tpart component {\n\t\t\tport componentQualityDataPort: ~ComponentQualityDataPort;\n\t\t\tperform calculateTotalMass.calculateMass {\n\t\t\t\tin componentQualityData = componentQualityDataPort.componentQualityData;\n\t\t\t\tout totalMass = totalMassPort.totalMass;\n\t\t\t}\n\t\t\tport totalMassPort: TotalMassPort ;\n\t\t}\n\t\tpart",
    "package 'PowertrainConfiguration' {\n\tattribute def EngineType;\n\tattribute def Power;\n\tattribute def Mass;\n\tattribute def Efficiency;\n\tattribute def Reliability;\n\tattribute def Cost;\n\tport def EngineTypePort {\n\t\tout engineType: EngineType;\n\t}\n\tport def PowerPort {\n\t\tout power: Power;\n\t}\n\tport def MassPort {\n\t\tout mass: Mass;\n\t}\n\tport def EfficiencyPort {\n\t\tout efficiency: Efficiency;\n\t}\n\tport def ReliabilityPort {\n\t\tout reliability: Reliability;\n\t}\n\tport def CostPort {\n\t\tout cost: Cost;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport engineTypePort: EngineTypePort;\n\t\t\tport powerPort: PowerPort;\n\t\t\tport massPort: MassPort;\n\t\t\tport efficiencyPort: EfficiencyPort;\n\t\t\t",
    "package 'FuelEconomy' {\n\tattribute def FuelEconomy;\n\tattribute def Range;\n\tattribute def Load;\n\tattribute def Powertrain;\n\tattribute def Condition;\n\tport def FuelEconomyPort {\n\t\tout fuelEconomy: FuelEconomy;\n\t}\n\tport def RangePort {\n\t\tout range: Range;\n\t}\n\tport def LoadPort {\n\t\tout load: Load;\n\t}\n\tport def PowertrainPort {\n\t\tout powertrain: Powertrain;\n\t}\n\tport def ConditionPort {\n\t\tout condition: Condition;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport fuelEconomyPort: FuelEconomyPort;\n\t\t\tport rangePort: RangePort;\n\t\t\tport loadPort: LoadPort;\n\t\t\tport powertrainPort: PowertrainPort;\n\t\t\tport conditionPort: ConditionPort;\n\t\t\tperform fuelEconomyTest",
    "package 'VehicleDynamics' {\n\tattribute def Mass;\n\tattribute def Position;\n\tattribute def Velocity;\n\tattribute def Acceleration;\n\tattribute def Power;\n\tattribute def TimeStep;\n\tattribute def SegmentedPowerData;\n\tport def MassPort {\n\t\tin mass: Mass;\n\t}\n\tport def PositionPort {\n\t\tin position: Position;\n\t}\n\tport def VelocityPort {\n\t\tin velocity: Velocity;\n\t}\n\tport def AccelerationPort {\n\t\tout acceleration: Acceleration;\n\t}\n\tport def PowerPort {\n\t\tin power: Power;\n\t}\n\tport def TimeStepPort {\n\t\tin timeStep: TimeStep;\n\t}\n\tport def SegmentedPowerDataPort {\n\t\tin segmentedPowerData: SegmentedPowerData;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport massPort: MassPort;\n\t\t\tport positionPort: PositionPort;\n\t\t\tport velocityPort: VelocityPort;\n\t\t\tport powerPort: PowerPort;\n\t\t\tport timeStepPort: TimeStepPort;\n\t\t\tport segmentedPowerDataPort:",
    "package 'VehicleSystemModel' {\n\tattribute def Mass;\n\tattribute def SteeringAngle;\n\tport def MassPort {\n\t\tout mass: Mass;\n\t}\n\tport def SteeringAnglePort {\n\t\tout steeringAngle: SteeringAngle;\n\t}\n\tpart context {\n\t\tpart frontAxleAssembly {\n\t\t\tport massPort: MassPort;\n\t\t\tperform frontAxle.produceMass {\n\t\t\t\tout mass = massPort.mass;\n\t\t\t}\n\t\t\tpart frontAxle {\n\t\t\t\tport steeringAnglePort: SteeringAnglePort;\n\t\t\t\tperform frontAxle.produceSteeringAngle {\n\t\t\t\t\tout steeringAngle = steeringAnglePort.steeringAngle;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart frontWheel {\n\t\t\t\tperform frontWheel.produceMass {\n\t\t\t\t\tout mass = frontAxleAssembly.massPort.mass / 2;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart frontWheel {\n\t\t\t\tperform frontWheel.produceMass {\n\t\t\t\t\tout mass = frontAxleAssembly.massPort.mass / 2;",
    "package 'VehicleSafetyAndSecuritySystem' {\n\tattribute def SafetyFeature;\n\tattribute def SecurityFeature;\n\tattribute def VehicleComponent;\n\tport def SafetyFeaturePort {\n\t\tout safetyFeature: SafetyFeature;\n\t}\n\tport def SecurityFeaturePort {\n\t\tout securityFeature: SecurityFeature;\n\t}\n\tport def VehicleComponentPort {\n\t\tout vehicleComponent: VehicleComponent;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport safetyFeaturePort: SafetyFeaturePort;\n\t\t\tport securityFeaturePort: SecurityFeaturePort;\n\t\t\tport vehicleComponentPort: VehicleComponentPort;\n\t\t\tperform displaySafetyAndSecurityFeatures.displaySafetyAndSecurityFeatures {\n\t\t\t\tin safetyFeature = safetyFeaturePort.safetyFeature;\n\t\t\t\tin securityFeature = securityFeaturePort.securityFeature;\n\t\t\t\tin vehicleComponent = vehicleComponentPort.vehicleComponent;\n\t\t\t}\n\t\t}\n\t\tpart safetyAndSecurityFeatures {\n\t\t\tpart seatBelts {\n\t\t\t",
    "package 'LayeredArchitecture' {\n\tattribute def x;\n\tattribute def y;\n\tattribute def z;\n\tport def xPort {\n\t\tout x : x;\n\t}\n\tport def yPort {\n\t\tout y : y;\n\t}\n\tport def zPort {\n\t\tout z : z;\n\t}\n\tpart context {\n\t\tpart application {\n\t\t\tport xPort: xPort;\n\t\t\tport yPort: yPort;\n\t\t\tport zPort: zPort;\n\t\t\tperform serviceLayer.useFunctionalities {\n\t\t\t\tin x = xPort.x;\n\t\t\t\tin y = yPort.y;\n\t\t\t\tout z = zPort.z;\n\t\t\t}\n\t\t}\n\t\tpart serviceLayer {\n\t\t\tport xPort: ~xPort;\n\t\t\tport yPort: ~yPort;\n\t\t\tperform dataLayer.retrieveAndStoreData {\n\t\t\t\tin x = xPort.x;\n\t\t\t\tin y = yPort.y;\n\t\t\t\tout z = zPort.z;\n\t\t\t}\n\t\t}\n\t\tpart dataLayer {\n\t\t\tport xPort: ~xPort;\n\t\t\tport yPort: ~y",
    "package 'TorqueGenerator' {\n\tattribute def Torque;\n\tport def TorquePort {\n\t\tout torque: Torque;\n\t}\n\tpart context {\n\t\tpart logic {\n\t\t\tport torquePort: TorquePort;\n\t\t\tperform torqueGenerator.generateTorque {\n\t\t\t\tout torque = torquePort.torque;\n\t\t\t}\n\t\t}\n\t\tpart physical {\n\t\t\tport torquePort: ~TorquePort;\n\t\t\tperform torqueGenerator.transmitTorque {\n\t\t\t\tin torque = torquePort.torque;\n\t\t\t}\n\t\t}\n\t}\n\taction torqueGenerator {\n\t\taction generateTorque { out torque: Torque; }\n\t\tsuccession flow torqueFlow from generateTorque.torque to transmitTorque.torque;\n\t\taction transmitTorque { in torque: Torque; }\n\t}\n}\n\nNote: The above model is a simplified version of the actual system design. The actual system may have multiple layers, components, and actions, and the mapping of actions to components may vary depending on the specific requirements of the system.",
    "package 'PowerSystem' {\n\tattribute def Power;\n\tattribute def Torque;\n\tport def PowerPort {\n\t\tout power: Power;\n\t}\n\tport def TorquePort {\n\t\tout torque: Torque;\n\t}\n\tpart context {\n\t\tpart powertrain {\n\t\t\tport powerPort: PowerPort;\n\t\t\tport torquePort: TorquePort;\n\t\t\tpart engine {\n\t\t\t\tport powerPort: ~PowerPort;\n\t\t\t\tport torquePort: ~TorquePort;\n\t\t\t\tperform torqueGenerator.generateTorque {\n\t\t\t\t\tin torque = torquePort.torque;\n\t\t\t\t\tout power = powerPort.power;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpart torqueGenerator {\n\t\t\tport torquePort: TorquePort;\n\t\t\tperform torqueGenerator.generateTorque {\n\t\t\t\tout torque = torquePort.torque;\n\t\t\t}\n\t\t}\n\t}\n\taction torqueGenerator {\n\t\taction generateTorque { in torque: Torque; out power: Power; }\n\t}\n}",
    "package 'VehicleSafetyAndAntiTheftFunctionCatalogue' {\n\tattribute def Safety;\n\tattribute def AntiTheft;\n\tport def SafetyPort {\n\t\tout safety: Safety;\n\t}\n\tport def AntiTheftPort {\n\t\tout antiTheft: AntiTheft;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport safetyPort: SafetyPort;\n\t\t\tport antiTheftPort: AntiTheftPort;\n\t\t\tperform safetyAndAntiTheft.installSafetyAndSecurityFeatures {\n\t\t\t\tin safety = safetyPort.safety;\n\t\t\t\tin antiTheft = antiTheftPort.antiTheft;\n\t\t\t}\n\t\t}\n\t\tpart safetyAndAntiTheft {\n\t\t\taction installSafetyAndSecurityFeatures { in safety: Safety; in antiThe",
    "package 'FuelSystem' {\n\tattribute def FuelTemp;\n\tattribute def FuelLevel;\n\tattribute def FuelFlow;\n\tport def FuelTempPort {\n\t\tout fuelTemp : FuelTemp;\n\t}\n\tport def FuelLevelPort {\n\t\tout fuelLevel : FuelLevel;\n\t}\n\tport def FuelFlowPort {\n\t\tin fuelFlow : FuelFlow;\n\t}\n\tpart context {\n\t\tpart fuelTank {\n\t\t\tport fuelTempPort: FuelTempPort;\n\t\t\tport fuelLevelPort: FuelLevelPort;\n\t\t\tperform fuelTank.monitorFuelTemp {\n\t\t\t\tout fuelTemp = fuelTempPort.fuelTemp;\n\t\t\t}\n\t\t\tperform fuelTank.monitorFuelLevel {\n\t\t\t\tout fuelLevel = fuelLevelPort.fuelLevel;\n\t\t\t}\n\t\t\tperform fuelTank.monitorFuelFlow {\n\t\t\t\tin fuelFlow = fuelFlowPort.fuelFlow;\n\t\t\t}\n\t\t}\n\t\tpart fuelPump {\n\t\t\tport fuelFlowPort: FuelFlowPort;\n\t\t\tperform fuelPump.pressurizeFuel {\n\t\t\t\tin fuelFlow = fuelFlowPort.fuelFlow;\n\t\t\t",
    "package 'Vehicle' {\n\tattribute def SeatBelt;\n\tattribute def Airbag;\n\tattribute def AntiTheftAlarm;\n\tattribute def Bumper;\n\tattribute def Wheel;\n\tattribute def AntiLockBraking;\n\tattribute def KeylessEntry;\n\tattribute def SafetyClassification;\n\tattribute def SecurityClassification;\n\tport def SeatBeltPort {\n\t\tout seatBelt : SeatBelt;\n\t}\n\tport def AirbagPort {\n\t\tout airbag : Airbag;\n\t}\n\tport def AntiTheftAlarmPort {\n\t\tout antiTheftAlarm : AntiTheftAlarm;\n\t}\n\tport def BumperPort {\n\t\tout bumper : Bumper;\n\t}\n\tport def WheelPort {\n\t\tout wheel : Wheel;\n\t}\n\tport def AntiLockBrakingPort {\n\t\tout antiLockBraking :",
    "package 'VehicleSafetyAndSecurity' {\n\tattribute def Alarm;\n\tattribute def SeatBelt;\n\tattribute def FrontRowSeat;\n\tattribute def DriverAirbag;\n\tattribute def VehicleBody;\n\tattribute def Bumper;\n\tattribute def KeylessEntry;\n\tport def AlarmPort {\n\t\tout alarm: Alarm;\n\t}\n\tport def SeatBeltPort {\n\t\tout seatBelt: SeatBelt;\n\t}\n\tport def FrontRowSeatPort {\n\t\tout frontRowSeat: FrontRowSeat;\n\t}\n\tport def DriverAirbagPort {\n\t\tout driverAirbag: DriverAirbag;\n\t}\n\tport def VehicleBodyPort {\n\t\tout vehicleBody: VehicleBody;\n\t}\n\tport def BumperPort {\n\t\tout bumper: Bumper;\n\t}\n\tport def KeylessEntryPort {\n\t\tout keylessEntry: KeylessEntry;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport alarmPort: AlarmPort;\n\t\t\tport seatBeltPort: SeatBeltPort;\n\t\t\tport frontRowSeat",
    "package 'SecurityClassification' {\n\tattribute def ClassificationLevel;\n\tattribute def ClassificationAttribute;\n\tport def ClassificationLevelPort {\n\t\tout classificationLevel: ClassificationLevel;\n\t}\n\tport def ClassificationAttributePort {\n\t\tout classificationAttribute: ClassificationAttribute;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport classificationLevelPort: ClassificationLevelPort;\n\t\t\tperform classifyComponent.assignClassificationLevel {\n\t\t\t\tout classificationLevel = classificationLevelPort.classificationLevel;\n\t\t\t}\n\t\t\tperform displayClassificationAttribute.displayAttribute {\n\t\t\t\tin classificationAttribute = classificationLevelPort.classificationLevel;\n\t\t\t}\n\t\t}\n\t\tinterface userToComponent connect user.classificationLevelPort to component.classificationLevelPort {\n\t\t\tref flow references classifyComponent.classificationLevelFlow\n\t\t\t\tfrom source.classificationLevel to target.classificationLevel;\n\t\t\tref flow references displayClassificationAttribute.classificationAttributeFlow\n\t\t\t\tfrom source.classificationAttribute to target.classificationAttribute;\n\t\t}\n\t\tpart component {\n\t\t\tport classificationLevelPort: ~ClassificationLevelPort;\n\t\t\tperform classifyComponent.assignClassificationLevel {\n\t\t\t\tin classificationLevel = classificationLevelPort.classificationLevel;\n\t\t\t}\n\t\t\tport classificationAttributePort",
    "package 'ECU' {\n\tattribute def VCU_CAN_Data;\n\tattribute def ECU_CAN_Data;\n\tattribute def Sensor_Data;\n\tport def VCU_CAN_DataPort {\n\t\tin VCU_CAN_Data;\n\t}\n\tport def ECU_CAN_DataPort {\n\t\tin ECU_CAN_Data;\n\t}\n\tport def Sensor_DataPort {\n\t\tin Sensor_Data;\n\t}\n\tpart context {\n\t\tpart VCU {\n\t\t\tport CAN_DataPort: VCU_CAN_DataPort;\n\t\t\tperform VCU_CAN_Data_Exchange.receiveCANData {\n\t\t\t\tin CAN_Data = CAN_DataPort.VCU_CAN_Data;\n\t\t\t}\n\t\t\tperform VCU_CAN_Data_Exchange.sendCANData {\n\t\t\t\tout CAN_Data = CAN_DataPort.VCU_CAN_Data;\n\t\t\t}\n\t\t}\n\t\tpart ECU {\n\t\t\tport CAN_DataPort: ECU_CAN_DataPort;\n\t\t\tperform ECU_CAN_Data_Exchange.receiveCANData {\n\t\t\t\t",
    "package 'BloodGlucoseMeter' {\n\tattribute def BatteryStatus;\n\tattribute def BloodGlucoseLevel;\n\tport def BatteryStatusPort {\n\t\tout batteryStatus: BatteryStatus;\n\t}\n\tport def BloodGlucoseLevelPort {\n\t\tin bloodGlucoseLevel: BloodGlucoseLevel;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport batteryStatusPort: BatteryStatusPort;\n\t\t\tperform measureBloodGlucose.checkBatteryStatus {\n\t\t\t\tin batteryStatus = batteryStatusPort.batteryStatus;\n\t\t\t}\n\t\t\tperform measureBloodGlucose.measureBloodGlucoseLevel {\n\t\t\t\tout bloodGlucoseLevel = bloodGlucoseLevelPort.bloodGlucoseLevel;\n\t\t\t}\n\t\t}\n\t\tinterface userToBatteryStatusSensor connect user.batteryStatusPort to batteryStatusSensor.batteryStatusPort {\n\t\t\tref flow references measureBloodGlucose.batteryStatusFlow\n\t\t\t\tfrom source.batteryStatus to target.",
    "package 'Constants' {\n\tattribute def EulerNum : double [unit=\"unitless\"];\n\tattribute def Pi : double [unit=\"unitless\"];\n\tattribute def SpeedOfLight : double [unit=\"m/s\"];\n\tattribute def FineStructure : double [unit=\"unitless\"];\n\tattribute def ElectronProtonMassRatio : double [unit=\"unitless\"];\n\tattribute def GravitationalAcceleration : double [unit=\"m/s^2\"];\n\tattribute def AmplifierGainCoefficient : double [unit=\"unitless\"];\n\tattribute def ModelXGainCoefficient : double [unit=\"unitless\"];\n\tattribute def StandardEarthAcceleration : double [unit=\"m/s^2\"];\n\tattribute def StandardEarthRadius : double [unit=\"m\"];\n\tattribute def StandardEarthMass : double [unit=\"kg\"];\n\tattribute def StandardEarthDensity : double [unit=\"kg/m^3\"];\n\tattribute def StandardEarthSurfaceArea : double [unit=\"m^2\"];\n\tattribute def StandardEarth",
    "package 'Tire' {\n\tattribute def Manufacturer : String;\n\tattribute def RimDiameter : Real;\n\tattribute def Width : Integer;\n\tpart context {\n\t\tpart tire {\n\t\t\tattribute manufacturer : Manufacturer;\n\t\t\tattribute rimDiameter : RimDiameter;\n\t\t\tattribute width : Width;\n\t\t}\n\t}\n}\n\n// Example usage:\npackage 'Tire' {\n\tpart context {\n\t\tpart tire1 : Tire {\n\t\t\tmanufacturer = \"Michelin\";\n\t\t\trimDiameter = 18.0;\n\t\t\twidth = 245;\n\t\t}\n\t\tpart tire2 : Tire {\n\t\t\tmanufacturer = \"Ferrari\";\n\t\t\trimDiameter = 20.0;\n\t\t\twidth = 255;\n\t\t}\n\t}\n}",
    "package 'AutomotiveComponentModel' {\n\tattribute def Mass;\n\tattribute def Length;\n\tattribute def HubDiameter;\n\tattribute def TireHeight;\n\tattribute def WheelWidth;\n\tattribute def WheelOuterDiameter;\n\tattribute def LeftFrontWheel;\n\tattribute def RightFrontWheel;\n\tport def MassPort {\n\t\tout mass: Mass;\n\t}\n\tport def LengthPort {\n\t\tout length: Length;\n\t}\n\tport def HubDiameterPort {\n\t\tout hubDiameter: HubDiameter;\n\t}\n\tport def TireHeightPort {\n\t\tout tireHeight: TireHeight;\n\t}\n\tport def WheelWidthPort {\n\t\tout wheelWidth: WheelWidth;\n\t}\n\tport def WheelOuterDiameterPort {\n\t\tout wheelOuterDiameter: WheelOuterDiameter;\n\t}\n\tport def LeftFrontWheelPort {\n\t\tout leftFrontWheel: LeftFrontWheel;\n\t}\n\tport def RightFrontWheelPort {\n\t\tout rightFrontWheel: Right",
    "package 'Powertrain' {\n\tattribute def EngineType;\n\tattribute def TransmissionType;\n\tport def EngineTypePort {\n\t\tout engineType: EngineType;\n\t}\n\tport def TransmissionTypePort {\n\t\tout transmissionType: TransmissionType;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport engineTypePort: EngineTypePort;\n\t\t\tport transmissionTypePort: TransmissionTypePort;\n\t\t\tperform configurePowertrain.selectEngineAndTransmission {\n\t\t\t\tin engineType = engineTypePort.engineType;\n\t\t\t\tin transmissionType = transmissionTypePort.transmissionType;\n\t\t\t}\n\t\t}\n\t\tinterface userToEngine connect user.engineTypePort to engine.engineTypePort {\n\t\t\tref flow references configurePowertrain.engineTypeFlow\n\t\t\t\tfrom source.engineType to target.engineType; \n\t\t}\n\t\tinterface userToTransmission connect user.transmissionTypePort to transmission.transmissionTypePort {\n\t\t\tref flow references configurePowertrain.transmissionTypeFlow\n\t\t\t\tfrom source.transmissionType to target.transmissionType; \n\t\t}\n\t\tpart engine {\n\t\t\tport engineTypePort: ~EngineTypePort;\n\t\t\tperform",
    "package 'Vehicle' {\n\tattribute def Mass;\n\tattribute def Length;\n\tattribute def WheelAssembly;\n\tattribute def Tire;\n\tattribute def RimDiameter;\n\tattribute def TireWidth;\n\tattribute def TireHeight;\n\tattribute def TreadDepth;\n\tattribute def BrakeDiscRadius;\n\tattribute def OuterDiameter;\n\tattribute def Fitment;\n\tport def MassPort {\n\t\tout mass: Mass;\n\t}\n\tport def LengthPort {\n\t\tout length: Length;\n\t}\n\tport def WheelAssemblyPort {",
    "package 'FuelSystem' {\n\tattribute def FuelTemperature;\n\tattribute def FuelLevel;\n\tattribute def FuelReturn;\n\tport def FuelTemperaturePort {\n\t\tout fuelTemperature : FuelTemperature;\n\t}\n\tport def FuelLevelPort {\n\t\tout fuelLevel : FuelLevel;\n\t}\n\tport def FuelReturnPort {\n\t\tin fuelReturn : FuelReturn;\n\t}\n\tpart context {\n\t\tpart fuelTankAssembly {\n\t\t\tport fuelReturnPort: FuelReturnPort;\n\t\t\tperform fuelSupply.receiveFuel {\n\t\t\t\tin fuelReturn = fuelReturnPort.fuelReturn;\n\t\t\t}\n\t\t\tperform fuelSupply.supplyFuel {\n\t\t\t\tout fuelReturn = fuelReturnPort.fuelReturn;\n\t\t\t}\n\t\t\tperform fuelSupply.monitorFuelTemperature {\n\t\t\t\tout fuelTemperature = fuelTemperaturePort.fuelTemperature;\n\t\t\t}\n\t\t\tport fuelTemperaturePort: FuelTemperaturePort;\n\t\t\tport fuelLevelPort: FuelLevelPort;\n\t\t}\n\t\tpart fuelPump {\n\t\t\tport fuelLevelPort: ~FuelLevelPort;\n\t\t\tperform fuelSupply.pumpFuel {\n\t\t\t\tin fuelLevel =",
    "package 'PhysicalQuantitySystem' {\n\tattribute def PhysicalQuantity;\n\tattribute def Unit;\n\tattribute def QuantityValue;\n\tattribute def QuantityType;\n\tattribute def QuantityUnit;\n\tattribute def QuantityConversionFactor;\n\tport def PhysicalQuantityPort {\n\t\tout physicalQuantity: PhysicalQuantity;\n\t}\n\tport def UnitPort {\n\t\tout unit: Unit;\n\t}\n\tport def QuantityValuePort {\n\t\tout quantityValue: QuantityValue;\n\t}\n\tport def QuantityTypePort {\n\t\tout quantityType: QuantityType;\n\t}\n\tport def QuantityUnitPort {\n\t\tout quantityUnit: QuantityUnit;\n\t}\n\tport def QuantityConversionFactorPort {\n\t\tout quantityConversionFactor: QuantityConversionFactor;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport physicalQuantityPort: PhysicalQuantityPort;\n\t\t\tport unitPort: UnitPort;\n\t\t\tport quantityValuePort: QuantityValuePort;\n\t\t\tport quantityTypePort: QuantityTypePort;\n\t\t\tport quantityUnitPort: QuantityUnitPort;\n\t\t\tport quantityConversionFactorPort: QuantityConversionFactorPort;\n\t\t\tperform managePhysicalQuantity.importPhysicalQuantity {",
    "package 'UnitSystem' {\n\tattribute def Quantity;\n\tattribute def Unit;\n\tattribute def ConversionFactor;\n\tport def QuantityPort {\n\t\tout quantity: Quantity;\n\t}\n\tport def UnitPort {\n\t\tout unit: Unit;\n\t}\n\tport def ConversionFactorPort {\n\t\tout conversionFactor: ConversionFactor;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport quantityPort: QuantityPort;\n\t\t\tport unitPort: UnitPort;\n\t\t\tperform convertQuantity.convert {\n\t\t\t\tin quantity = quantityPort.quantity;\n\t\t\t\tin unit = unitPort.unit;\n\t\t\t\tout convertedQuantity = convertedQuantityPort.convertedQuantity;\n\t\t\t}\n\t\t}\n\t\tinterface userToUnitSystem connect user.quantityPort to unitSystem.quantityPort {\n\t\t\tref flow references convertQuantity.quantityFlow\n\t\t\t\tfrom source.quantity to target.quantity;\n\t\t\tref flow references convertQuantity.unitFlow\n\t\t\t\tfrom source.unit to target.unit;\n\t\t\tref flow references convertQuantity.convertedQuantityFlow\n\t\t\t\tfrom source.convertedQuantity to target.convertedQuantity;\n\t\t}\n\t\tpart unitSystem {\n\t\t\tport quantityPort: ~Quantity",
    "package 'HeadlampTiltAdjustment' {\n\tattribute def TiltAngle;\n\tport def TiltAnglePort {\n\t\tin tiltAngle : TiltAngle;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport tiltAnglePort: TiltAnglePort;\n\t\t\tperform verifyTiltAngle.verifyTiltAngle {\n\t\t\t\tin tiltAngle = tiltAnglePort.tiltAngle;\n\t\t\t}\n\t\t}\n\t\tpart verifyTiltAngle {\n\t\t\tperform verifyTiltAngle.verifyTiltAngle {\n\t\t\t\tin tiltAngle: TiltAngle;\n\t\t\t}\n\t\t\taction verifyTiltAngle { in tiltAngle: TiltAngle; }\n\t\t}\n\t}\n\taction verifyTiltAngle {\n\t\tprecondition tiltAngle >= 50 and tiltAngle <= 80;\n\t\tpostcondition tiltAngle >= 50 and tiltAngle <= 80;\n\t\tsuccession flow tiltAngleFlow from verifyTiltAngle.tiltAngle to verifyTiltAngle.tiltAngle;\n\t}\n}",
    "package 'DataTypes' {\n\tdatatype unsignedInt {\n\t\tconstraint nonNegative;\n\t}\n\tdatatype unsignedFloat {\n\t\tconstraint nonNegative;\n\t}\n\tdatatype dateTime {\n\t\t// no constraints specified\n\t}\n\tdatatype string {\n\t\t// no constraints specified\n\t}\n\tdatatype boolean {\n\t\t// no constraints specified\n\t}\n\tdatatype color {\n\t\tenum red, yellow, green;\n\t}\n\tdatatype diameter {\n\t\tenum Small, Medium, Large;\n\t\tinitial value Small;\n\t}\n\tdatatype dimension {\n\t\tattribute def diameter: diameter;\n\t\tattribute def diameterValue: unsignedInt;\n\t\tconstraint diameterValue <= 80; // constraint on maximum diameter value\n\t\tconstraint diameterValue >= 60; // constraint on minimum diameter value\n\t}\n}\n\npackage 'ColorLabeling' {\n\tattribute def status: string;\n\tattribute def color: color;\n\taction",
    "package 'CollectionManagementSystem' {\n\tattribute def Bag<SparePart>;\n\tattribute def List<Integer>;\n\tattribute def Set<String>;\n\tattribute def OrderedSet<Person>;\n\tattribute def Real[4];\n\tport def BagPort<SparePart> {\n\t\tout bag: Bag<SparePart>;\n\t}\n\tport def ListPort<Integer> {\n\t\tout list: List<Integer>;\n\t}\n\tport def SetPort<String> {\n\t\tout set: Set<String>;\n\t}\n\tport def OrderedSetPort<Person> {\n\t\tout orderedSet: OrderedSet<Person>;\n\t}\n\tport def RealArrayPort {\n\t\tout realArray: Real[4];\n\t}\n\tpart context {\n\t\tpart sparePartManagement {\n\t\t\tport bagPort: BagPort<SparePart>;\n\t\t\tperform archiveSparePart.archiveSparePart {\n\t\t\t\tin sparePart = bagPort.bag;\n\t\t\t}\n\t\t\t",
    "package 'TireInformation' {\n\tattribute def Manufacturer;\n\tattribute def RimDiameter;\n\tattribute def TireWidth;\n\tattribute def InstallationPosition;\n\tport def ManufacturerPort {\n\t\tout manufacturer : Manufacturer;\n\t}\n\tport def RimDiameterPort {\n\t\tout rimDiameter : RimDiameter;\n\t}\n\tport def TireWidthPort {\n\t\tout tireWidth : TireWidth;\n\t}\n\tport def InstallationPositionPort {\n\t\tout installationPosition : InstallationPosition;\n\t}\n\tpart context {\n\t\tpart tire {\n\t\t\tport manufacturerPort: ManufacturerPort;\n\t\t\tport rimDiameterPort: RimDiameterPort;\n\t\t\tport tireWidthPort: TireWidthPort;\n\t\t\tport installationPositionPort: InstallationPositionPort;\n\t\t\tperform recordTireInformation.recordTire {\n\t\t\t\tin manufacturer = manufacturerPort.manufacturer;\n\t\t\t\tin rimDiameter = rimDiameterPort.rimDiameter;\n\t\t\t\tin tireWidth = tireWidthPort.tireWidth",
    "package 'TrajectorySampler' {\n\tattribute def Time;\n\tattribute def Position;\n\tattribute def Velocity;\n\tport def TimePort {\n\t\tout time: Time;\n\t}\n\tport def PositionPort {\n\t\tout position: Position;\n\t}\n\tport def VelocityPort {\n\t\tout velocity: Velocity;\n\t}\n\tpart context {\n\t\tpart spacecraft {\n\t\t\tport timePort: TimePort;\n\t\t\tport positionPort: PositionPort;\n\t\t\tport velocityPort: VelocityPort;\n\t\t\tperform sampleTrajectory.collectData {\n\t\t\t\tin time = timePort.time;\n\t\t\t\tin position = positionPort.position;\n\t\t\t\tin velocity = velocityPort.velocity;\n\t\t\t}\n\t\t}\n\t\tpart mission {\n\t\t\tattribute def LiftoffTime;\n\t\t\tattribute def LiftoffUTC;\n\t\t\tattribute def LiftoffUTCDateTime;\n\t\t\tattribute def Liftoff",
    "package 'MaterialsScience' {\n\tattribute def AtomicMass;\n\tattribute def MassFraction;\n\tattribute def TensileStrength;\n\tport def AtomicMassPort {\n\t\tout atomicMass: AtomicMass;\n\t}\n\tport def MassFractionPort {\n\t\tout massFraction: MassFraction;\n\t}\n\tport def TensileStrengthPort {\n\t\tout tensileStrength: TensileStrength;\n\t}\n\tpart context {\n\t\tpart alloy {\n\t\t\tport atomicMassPort: AtomicMassPort;\n\t\t\tport massFractionPort: MassFractionPort;\n\t\t\tport tensileStrengthPort: TensileStrengthPort;\n\t\t\tperform defineAl",
    "package 'MaterialsDatabase' {\n\tattribute def Material;\n\tattribute def AtomicMass;\n\tattribute def Composition;\n\tattribute def MechanicalProperties;\n\tport def MaterialPort {\n\t\tout material: Material;\n\t}\n\tport def AtomicMassPort {\n\t\tout atomicMass: AtomicMass;\n\t}\n\tport def CompositionPort {\n\t\tout composition: Composition;\n\t}\n\tport def MechanicalPropertiesPort {\n\t\tout mechanicalProperties: MechanicalProperties;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport materialPort: MaterialPort;\n\t\t\tport atomicMassPort: AtomicMassPort;\n\t\t\tport compositionPort: CompositionPort;\n\t\t",
    "package 'PubSub' {\n\tattribute def Topic;\n\tattribute def Message;\n\tport def TopicPort {\n\t\tout topic: Topic;\n\t}\n\tport def MessagePort {\n\t\tout message: Message;\n\t}\n\tpart context {\n\t\tpart server {\n\t\t\tport topicPort: TopicPort;\n\t\t\tport messagePort: MessagePort;\n\t\t\tperform subscribe.receiveTopicSubscription {\n\t\t\t\tin topic = topicPort.topic;\n\t\t\t}\n\t\t\tperform publish.receiveMessagePublication {\n\t\t\t\tin message = messagePort.message;\n\t\t\t}\n\t\t}\n\t\tinterface userToServer connect user.topicPort to server.topicPort {\n\t\t\tref flow references subscribe.topicSubscriptionFlow\n\t\t\t\tfrom source.topic to target.topic; \n\t\t}\n\t\tinterface userToServer connect user.messagePort to server.messagePort {\n\t\t\tref flow references publish.messagePublicationFlow\n\t\t\t\tfrom source.message to target.message; \n\t\t}\n\t\tpart user {\n\t\t\tport topicPort: ~TopicPort;\n\t\t\tport messagePort: ~MessagePort;\n\t\t\tperform subscribe.subscribeToTopic {\n\t\t\t\tin topic = topicPort.topic;\n\t\t\t}\n\t\t",
    "package 'FuelSystem' {\n\tattribute def FuelTemp;\n\tport def FuelTempPort {\n\t\tout fuelTemp: FuelTemp;\n\t}\n\tpart context {\n\t\tpart fuelTank {\n\t\t\tport fuelTempPort: FuelTempPort;\n\t\t\tperform fuelSupply.receiveFuel {\n\t\t\t\tin fuel = fuelTank.fuelTemp;\n\t\t\t}\n\t\t\tperform fuelSupply.processFuel {\n\t\t\t\tin fuel = fuelTank.fuelTemp;\n\t\t\t}\n\t\t\tperform fuelSupply.returnFuel {\n\t\t\t\tin fuel = fuelTank.fuelTemp;\n\t\t\t}\n\t\t}\n\t\tpart engine {\n\t\t\tport fuelTempPort: ~FuelTempPort;\n\t\t\tperform fuelSupply.supplyFuel {\n\t\t\t\tin fuel = fuelTank.fuelTemp;\n\t\t\t}\n\t\t\tperform fuelSupply.processFuel {\n\t\t\t\tin fuel = fuelTank.fuelTemp;\n\t\t\t}\n\t\t\tperform fuelSupply.returnFuel {\n\t\t\t\tin fuel = fuelTank.fuelTemp;\n\t\t\t}\n\t\t}\n\t\tpart fuelSupply {\n\t\t\tport fuelTempPort: ~FuelTempPort;\n\t\t\tperform fuelSupply.receiveFuel {\n\t\t\t\tin fuel = fuelTempPort.",
    "package 'MessageFlow' {\n\tattribute def Topic;\n\tattribute def Message;\n\tport def TopicPort {\n\t\tout topic: Topic;\n\t}\n\tport def MessagePort {\n\t\tout message: Message;\n\t}\n\tpart context {\n\t\tpart producer {\n\t\t\tport topicPort: TopicPort;\n\t\t\tperform publishMessage.publish {\n\t\t\t\tout topic = topicPort.topic;\n\t\t\t\tout message = messagePort.message;\n\t\t\t}\n\t\t}\n\t\tpart server {\n\t\t\tport topicPort: ~TopicPort;\n\t\t\tperform subscribeTopic.subscribe {\n\t\t\t\tin topic = topicPort.topic;\n\t\t\t\tout subscription = subscriptionPort.subscription;\n\t\t\t}\n\t\t\tport subscriptionPort: SubscriptionPort;\n\t\t\tperform publishMessage.publish {\n\t\t\t\tin topic = subscription.topic;\n\t\t\t\tin message = messagePort.message;\n\t\t\t\tout message = messagePort.message;\n\t\t\t}\n\t\t}\n\t\tpart consumer {\n\t\t\tport subscriptionPort: ~SubscriptionPort;\n\t\t\tperform subscribeTopic.subscribe {\n\t\t\t\tin topic = subscriptionPort.topic;\n\t\t\t\tout subscription = subscriptionPort.subscription;\n\t\t\t}\n\t\t\tport messagePort: Message",
    "package 'Transportation' {\n\tattribute def FuelLevel;\n\tattribute def FuelCapacity;\n\tattribute def FuelAmount;\n\tattribute def FuelAmountRequired;\n\tattribute def FuelAmountConsumed;\n\tattribute def FuelAmountRemaining;\n\tattribute def DriverLocation;\n\tattribute def PassengerLocation;\n\tattribute def PassengerCount;\n\tattribute def VehicleLocation;\n\tattribute def VehicleStatus;\n\tattribute def VehicleType;\n\tattribute def VehicleModel;\n\tattribute def VehicleManufacturer;\n\tattribute def VehicleYear;\n\tattribute def VehicleColor;\n\tattribute def VehicleRegistration;\n\tattribute def VehicleEngineType;\n\tattribute def VehicleFuelType;\n\tattribute def VehicleSeats;\n\tattribute def VehicleDoors;\n\tattribute def VehicleWheels;\n\tattribute def VehicleTransmission;\n\tattribute def VehicleFuelCapacity;\n\tattribute def VehicleFuelEfficiency;\n\tattribute def VehiclePower;\n\tattribute def VehicleWeight;\n\tattribute def VehicleMaxSpeed;\n\tattribute def VehicleAcceleration;\n\tattribute def VehicleBraking;\n\tattribute def VehicleSteering;\n\tattribute def VehicleBrake",
    "package 'FuelSupplyAndReturnManagement' {\n\tattribute def FuelTemperature;\n\tport def FuelOutletPort {\n\t\tin fuel: Fuel;\n\t}\n\tport def FuelInletPort {\n\t\tout fuel: Fuel;\n\t}\n\tport def FuelTemperaturePort {\n\t\tin fuelTemperature: FuelTemperature;\n\t}\n\tpart context {\n\t\tpart fuelTank {\n\t\t\tport fuelOutletPort: FuelOutletPort;\n\t\t\tport fuelInletPort: FuelInletPort;\n\t\t\tport fuelTemperaturePort: FuelTemperaturePort;\n\t\t\tperform fuelSupplyAndReturn.supplyFuel {\n\t\t\t\tin fuel = fuelOutletPort.fuel;\n\t\t\t\tout fuel = fuelInletPort.fuel;\n\t\t\t\tout fuelTemperature = fuelTemperaturePort.fuelTemperature;\n\t\t\t}\n\t\t\tperform fuelSupplyAndReturn.returnFuel {\n\t\t\t\tin fuel = fuelInletPort.fuel;\n\t\t\t\tout fuel = fuelOutletPort.fuel;\n\t\t\t\tout fuelTemperature = fuelTemperaturePort.fuelTemperature;\n\t\t",
    "package 'FuelSystem' {\n\tattribute def FuelTemp;\n\tport def FuelSupplyPort {\n\t\tin fuel: Fuel;\n\t}\n\tport def FuelReturnPort {\n\t\tout fuel: Fuel;\n\t}\n\tport def FuelTempPort {\n\t\tout fuelTemp: FuelTemp;\n\t}\n\tpart context {\n\t\tpart fuelTank {\n\t\t\tport fuelSupplyPort: FuelSupplyPort;\n\t\t\tport fuelReturnPort: FuelReturnPort;\n\t\t\tperform fuelSupply.transferFuel {\n\t\t\t\tin fuel = fuelSupplyPort.fuel;\n\t\t\t\tout fuel = fuelReturnPort.fuel;\n\t\t\t}\n\t\t\tperform fuelSupply.monitorFuelTemp {\n\t\t\t\tin fuel = fuelSupplyPort.fuel;\n\t\t\t\tout fuelTemp = fuelTempPort.fuelTemp;\n\t\t\t}\n\t\t\tperform fuelReturn.monitorFuelTemp {\n\t\t\t\tin fuel = fuelReturnPort.fuel;\n\t\t\t\tout fuelTemp = fuelTempPort.fuelTemp;\n\t\t\t}\n\t\t}\n\t\tpart engine {\n\t\t\tport fuelSupplyPort: ~FuelSupplyPort;\n\t\t\tport fuelReturnPort: ~FuelReturnPort;\n\t\t\tperform fuelSupply",
    "package 'Photography' {\n\tattribute def Scene;\n\tattribute def FocusedImage;\n\tattribute def FinalPhoto;\n\tport def ScenePort {\n\t\tin scene: Scene;\n\t}\n\tport def FocusedImagePort {\n\t\tout focusedImage: FocusedImage;\n\t}\n\tport def FinalPhotoPort {\n\t\tout finalPhoto: FinalPhoto;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport scenePort: ScenePort;\n\t\t\tperform captureScene.captureScene {\n\t\t\t\tin scene = scenePort.scene;\n\t\t\t\tout focusedImage = focusedImagePort.focusedImage;\n\t\t\t}\n\t\t\tperform generateFinalPhoto.generateFinalPhoto {\n\t\t\t\tin focusedImage = focusedImagePort.focusedImage;\n\t\t\t\tout finalPhoto = finalPhotoPort.finalPhoto;\n\t\t\t}\n\t\t}\n\t\tinterface userToCamera connect user.scenePort to camera.scenePort {\n\t\t\tref flow references captureScene.sceneFlow\n\t\t\t\tfrom source.scene to target.scene; \n\t\t}\n\t\tinterface userToCamera connect user.focusedImagePort to camera.focusedImagePort {\n\t\t\tref flow references captureScene.focusedImageFlow\n\t\t\t\t",
    "package 'PhotographyWorkflow' {\n\tattribute def Scene;\n\tattribute def FocusedImage;\n\tattribute def FinalImage;\n\tport def ScenePort {\n\t\tin scene: Scene;\n\t}\n\tport def FocusedImagePort {\n\t\tout focusedImage: FocusedImage;\n\t}\n\tport def FinalImagePort {\n\t\tout finalImage: FinalImage;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport scenePort: ScenePort;\n\t\t\tperform focusScene.focusScene {\n\t\t\t\tin scene = scenePort.scene;\n\t\t\t\tout focusedImage = focusedImagePort.focusedImage;\n\t\t\t}\n\t\t\tperform shootFinalImage.shootFinalImage {\n\t\t\t\tin focusedImage = focusedImagePort.focusedImage;\n\t\t\t\tout finalImage = finalImagePort.finalImage;\n\t\t\t}\n\t\t}\n\t\tinterface userToFocusScene connect user.scenePort to focusScene.scenePort {\n\t\t\tref flow references focusScene.sceneFlow\n\t\t\t\tfrom source.scene to target.scene; \n\t\t}\n\t\tinterface userToShootFinalImage connect user.focusedImagePort to shootFinalImage.focusedImagePort {\n\t\t\tref flow references shoot",
    "package 'PhotographyWorkflow' {\n\tattribute def Scene;\n\tattribute def Image;\n\tport def ScenePort {\n\t\tout scene: Scene;\n\t}\n\tport def ImagePort {\n\t\tout image: Image;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport scenePort: ScenePort;\n\t\t\tperform focusScene.focusScene {\n\t\t\t\tout scene = scenePort.scene;\n\t\t\t}\n\t\t\tperform shootScene.shootScene {\n\t\t\t\tin image = focusScene.image;\n\t\t\t\tout image = imagePort.image;\n\t\t\t}\n\t\t}\n\t\tinterface userToFocusScene connect user.scenePort to focusScene.scenePort {\n\t\t\tref flow references focusScene.sceneFlow\n\t\t\t\tfrom source.scene to target.scene; \n\t\t}\n\t\tinterface userToShootScene connect user.imagePort to shootScene.imagePort {\n\t\t\tref flow references shootScene.imageFlow\n\t\t\t\tfrom source.image to target.image; \n\t\t}\n\t\tpart focusScene {\n\t\t\tport scenePort: ~ScenePort;\n\t\t\tperform focusScene.performFocusing {\n\t\t\t\tin scene = scenePort.scene;\n\t\t\t\tout image",
    "package 'PhotographySystem' {\n\tattribute def Scene;\n\tattribute def Focus;\n\tattribute def Shooting;\n\tport def ScenePort {\n\t\tin scene: Scene;\n\t}\n\tport def FocusPort {\n\t\tout focus: Focus;\n\t}\n\tport def ShootingPort {\n\t\tout shooting: Shooting;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport scenePort: ScenePort;\n\t\t\tperform focusProcessing.processScene {\n\t\t\t\tin scene = scenePort.scene;\n\t\t\t\tout focus = focusPort.focus;\n\t\t\t}\n\t\t\tperform shootingOperation.shootPhotograph {\n\t\t\t\tin focus = focusPort.focus;\n\t\t\t\tout shooting = shootingPort.shooting;\n\t\t\t}\n\t\t}\n\t\tinterface userToFocusProcessing connect user.scenePort to focusProcessing.scenePort {\n\t\t\tref flow references focusProcessing.sceneFlow\n\t\t\t\tfrom source.scene to target.scene; \n\t\t}\n\t\tinterface userToShootingOperation connect user.focusPort to shootingOperation.focusPort {\n\t\t\tref flow references shootingOperation.focusFlow\n\t\t\t\tfrom source.focus to",
    "package 'PhotographyWorkflow' {\n\tattribute def Focus;\n\tattribute def Scene;\n\tattribute def Image;\n\tattribute def Shoot;\n\tattribute def Picture;\n\tport def FocusPort {\n\t\tout focus: Focus;\n\t}\n\tport def ScenePort {\n\t\tout scene: Scene;\n\t}\n\tport def ImagePort {\n\t\tout image: Image;\n\t}\n\tport def ShootPort {\n\t\tout shoot: Shoot;\n\t}\n\tport def PicturePort {\n\t\tout picture: Picture;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport focusPort: FocusPort;\n\t\t\tport scenePort: ScenePort;\n\t\t\tperform photographyWorkflow.focusScene {\n\t\t\t\tout focus = focusPort.focus;\n\t\t\t\tout scene = scenePort.scene;\n\t\t\t}\n\t\t\tport imagePort: ImagePort;\n\t\t\tperform photographyWorkflow.shootImage {\n\t\t\t\tin focus = focusPort.focus;\n\t\t\t\tin scene = scenePort.scene;\n\t\t\t\tout image = imagePort.image;\n\t\t\t}\n\t\t\tport shootPort: ShootPort;\n\t\t\tperform photographyWorkflow.shoot",
    "package 'PhotographyWorkflow' {\n\tattribute def Scene;\n\tattribute def Focus;\n\tattribute def Shoot;\n\tattribute def Photo;\n\tport def ScenePort {\n\t\tin scene: Scene;\n\t}\n\tport def FocusPort {\n\t\tout focus: Focus;\n\t}\n\tport def ShootPort {\n\t\tout shoot: Shoot;\n\t}\n\tport def PhotoPort {\n\t\tin photo: Photo;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport scenePort: ScenePort;\n\t\t\tport focusPort: FocusPort;\n\t\t\tport shootPort: ShootPort;\n\t\t\tperform shootScene.sendScene {\n\t\t\t\tin scene = scenePort.scene;\n\t\t\t\tout focus = focusPort.focus;\n\t\t\t\tout shoot = shootPort.shoot;\n\t\t\t}\n\t\t}\n\t\tinterface userToCamera connect user.focusPort to camera.focusPort {\n\t\t\tref flow references focusScene.focusFlow\n\t\t\t\tfrom source.focus to target.focus; \n\t\t}\n\t\tinterface userToCamera connect user.shootPort to camera.shootPort {\n\t\t\tref flow references shootScene.shootFlow\n\t\t\t\tfrom",
    "package 'PhotographyWorkflow' {\n\tattribute def Scene;\n\tattribute def FocusQuality;\n\tattribute def Photo;\n\tport def ScenePort {\n\t\tin scene: Scene;\n\t}\n\tport def FocusQualityPort {\n\t\tout focusQuality: FocusQuality;\n\t}\n\tport def PhotoPort {\n\t\tout photo: Photo;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport scenePort: ScenePort;\n\t\t\tperform captureScene.capture {\n\t\t\t\tin scene = scenePort.scene;\n\t\t\t\tout focusQuality = focusQualityPort.focusQuality;\n\t\t\t}\n\t\t\tport focusQualityPort: FocusQualityPort;\n\t\t\tperform evaluateFocusQuality.evaluate {\n\t\t\t\tin focusQuality = focusQualityPort.focusQuality;\n\t\t\t\tout photo = photoPort.photo;\n\t\t\t}\n\t\t\tport photoPort: PhotoPort;\n\t\t}\n\t\tinterface userToCamera connect user.scenePort to camera.scenePort {\n\t\t\tref flow references captureScene.sceneFlow\n\t\t\t\tfrom source.scene to target.scene; \n\t\t}\n\t\tinterface userToCamera connect user.focusQualityPort to camera.focusQualityPort {\n\t\t\tref flow references",
    "package 'PhotographyWorkflow' {\n\tattribute def ShootingScene;\n\tattribute def FocusedImage;\n\tattribute def FinalPhotograph;\n\tport def ShootingScenePort {\n\t\tin shootingScene : ShootingScene;\n\t}\n\tport def FocusedImagePort {\n\t\tout focusedImage : FocusedImage;\n\t}\n\tport def FinalPhotographPort {\n\t\tout finalPhotograph : FinalPhotograph;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport shootingScenePort: ShootingScenePort;\n\t\t\tperform shootPhoto.triggerShooting {\n\t\t\t\tin shootingScene = shootingScenePort.shootingScene;\n\t\t\t}\n\t\t}\n\t\tinterface userToFocusFunction connect user.shootingScenePort to focusFunction.shootingScenePort {\n\t\t\tref flow references shootPhoto.shootingSceneFlow\n\t\t\t\tfrom source.shootingScene to target.shootingScene; \n\t\t}\n\t\tpart focusFunction {\n\t\t\tport shootingScenePort: ~ShootingScenePort;\n\t\t\tperform focusScene.performFocusing {\n\t\t\t\tin shootingScene = shootingScenePort.shooting",
    "package 'BrakingControl' {\n\tattribute def BrakePedalStatus;\n\tattribute def TractionStatus;\n\tattribute def BrakePressure;\n\tattribute def BrakeModulationFrequency;\n\tport def BrakePedalStatusPort {\n\t\tin brakePedalStatus: BrakePedalStatus;\n\t}\n\tport def TractionStatusPort {\n\t\tin tractionStatus: TractionStatus;\n\t}\n\tport def BrakePressurePort {\n\t\tout brakePressure: BrakePressure;\n\t}\n\tport def BrakeModulationFrequencyPort {\n\t\tout brakeModulationFrequency: BrakeModulationFrequency;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport brakePedalStatusPort: BrakePedalStatusPort;\n\t\t\tport tractionStatusPort: TractionStatusPort;\n\t\t\tperform brakeControl.monitorBrakePedal {\n\t\t\t\tin brakePedalStatus = brakePedalStatusPort.brakePedalStatus;\n\t\t\t\tin tractionStatus = tractionStatusPort.tractionStatus;\n\t\t\t}\n\t\t}\n\t\t",
    "package 'BatteryChargingControlSystem' {\n\tattribute def BatteryLevel;\n\tattribute def ChargeStatus;\n\tport def BatteryLevelPort {\n\t\tin batteryLevel : BatteryLevel;\n\t}\n\tport def ChargeStatusPort {\n\t\tout chargeStatus : ChargeStatus;\n\t}\n\tpart context {\n\t\tpart battery {\n\t\t\tport batteryLevelPort: BatteryLevelPort;\n\t\t\tperform monitorBatteryLevel.monitorBatteryLevel {\n\t\t\t\tin batteryLevel = batteryLevelPort.batteryLevel;\n\t\t\t\tout batteryLevel = batteryLevelPort.batteryLevel;\n\t\t\t}\n\t\t}\n\t\tpart chargingControl {\n\t\t\tport batteryLevelPort: ~BatteryLevelPort;\n\t\t\tperform controlCharging.controlCharging {\n\t\t\t\tin batteryLevel = batteryLevelPort.batteryLevel;\n\t\t\t\tout chargeStatus = chargeStatusPort.chargeStatus;\n\t\t\t}\n\t\t\tport chargeStatusPort: ChargeStatusPort;\n\t\t}\n\t}\n\taction monitorBatteryLevel {\n\t\taction monitorBatteryLevel { in batteryLevel: BatteryLevel; out batteryLevel: BatteryLevel; }\n\t}\n\taction controlCharging {\n\t\taction controlCharging { in",
    "package 'BatteryCharging' {\n\tattribute def BatteryLevel;\n\tattribute def ChargingStatus;\n\tport def BatteryLevelPort {\n\t\tout batteryLevel : BatteryLevel;\n\t}\n\tport def ChargingStatusPort {\n\t\tout chargingStatus : ChargingStatus;\n\t}\n\tpart context {\n\t\tpart battery {\n\t\t\tport batteryLevelPort: BatteryLevelPort;\n\t\t\tperform monitorBatteryLevel.monitorBattery {\n\t\t\t\tout batteryLevel = batteryLevelPort.batteryLevel;\n\t\t\t}\n\t\t}\n\t\tpart chargingSystem {\n\t\t\tport chargingStatusPort: ChargingStatusPort;\n\t\t\tperform controlCharging.controlCharging {\n\t\t\t\tin batteryLevel = battery.batteryLevel;\n\t\t\t\tout chargingStatus = chargingStatusPort.chargingStatus;\n\t\t\t}\n\t\t}\n\t}\n\taction monitorBatteryLevel {\n\t\taction monitorBattery { out batteryLevel: BatteryLevel; }\n\t}\n\taction controlCharging {\n\t\taction controlCharging {\n\t\t\tin batteryLevel: BatteryLevel;\n\t\t\tout chargingStatus: ChargingStatus;\n\t\t}\n\t\tsuccession flow charging",
    "package 'Camera' {\n\tattribute def Scene;\n\tattribute def Photo;\n\tport def ScenePort {\n\t\tout scene: Scene;\n\t}\n\tport def PhotoPort {\n\t\tout photo: Photo;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport scenePort: ScenePort;\n\t\t\tperform captureScene.sendScene {\n\t\t\t\tout scene = scenePort.scene;\n\t\t\t}\n\t\t}\n\t\tinterface userToCamera connect user.scenePort to camera.scenePort {\n\t\t\tref flow references captureScene.sceneFlow\n\t\t\t\tfrom source.scene to target.scene; \n\t\t}\n\t\tpart camera {\n\t\t\tport scenePort: ~ScenePort;\n\t\t\tperform autofocus.focusScene {\n\t\t\t\tin scene = scenePort.scene;\n\t\t\t}\n\t\t\tperform imaging.capturePhoto {\n\t\t\t\tin scene = autofocus.focusedScene;\n\t\t\t\tout photo = photoPort.photo;\n\t\t\t}\n\t\t\tport photoPort: PhotoPort ;\n\t\t}\n\t\tpart storage {\n\t\t\tport photoPort: ~PhotoPort;\n\t\t\tperform savePhoto.savePhoto {\n\t\t\t\tin photo = photoPort.photo;\n\t\t\t}\n\t\t}",
    "package 'DigitalCamera' {\n\tattribute def ShootingScene;\n\tattribute def Image;\n\tport def ShootingScenePort {\n\t\tout shootingScene : ShootingScene;\n\t}\n\tport def ImagePort {\n\t\tout image: Image;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport shootingScenePort: ShootingScenePort;\n\t\t\tperform shootScene.sendShootingScene {\n\t\t\t\tout shootingScene = shootingScenePort.shootingScene;\n\t\t\t}\n\t\t}\n\t\tinterface userToCamera connect user.shootingScenePort to camera.shootingScenePort {\n\t\t\tref flow references shootScene.shootingSceneFlow\n\t\t\t\tfrom source.shootingScene to target.shootingScene; \n\t\t}\n\t\tpart camera {\n\t\t\tport shootingScenePort: ~ShootingScenePort;\n\t\t\tperform focusScene.focusOnScene {\n\t\t\t\tin shootingScene = shootingScenePort.shootingScene;\n\t\t\t}\n\t\t\tperform captureImage.captureFinalImage {\n\t\t\t\tout image = imagePort.image;\n\t\t\t}\n\t\t\tport imagePort: ImagePort ;\n\t\t}\n\t",
    "package 'VehicleSim' {\n\tattribute def Mass;\n\tattribute def Position;\n\tattribute def Velocity;\n\tattribute def TimeInterval;\n\tattribute def PowerInput;\n\tattribute def Trajectory;\n\tport def MassPort {\n\t\tin mass: Mass;\n\t}\n\tport def PositionPort {\n\t\tin position: Position;\n\t}\n\tport def VelocityPort {\n\t\tin velocity: Velocity;\n\t}\n\tport def TimeIntervalPort {\n\t\tin timeInterval: TimeInterval;\n\t}\n\tport def PowerInputPort {\n\t\tin powerInput: PowerInput;\n\t}\n\tport def TrajectoryPort {\n\t\tout trajectory: Trajectory;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport massPort: MassPort;\n\t\t\tport positionPort: PositionPort;\n\t\t\tport velocityPort: VelocityPort;\n\t\t\tport timeIntervalPort: TimeIntervalPort;\n\t\t\tport powerInputPort: PowerInputPort;\n\t\t\tperform simulateVehicle.calculateTrajectory {\n\t\t\t\tin mass = massPort.mass;\n\t\t\t\tin position = positionPort.position;\n\t\t\t\tin velocity = velocityPort.velocity",
    "package 'Camera' {\n\tattribute def Scene;\n\tattribute def Image;\n\tattribute def Photo;\n\tport def ScenePort {\n\t\tin scene: Scene;\n\t}\n\tport def ImagePort {\n\t\tout image: Image;\n\t}\n\tport def PhotoPort {\n\t\tout photo: Photo;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport scenePort: ScenePort;\n\t\t\tperform captureScene.captureImage {\n\t\t\t\tin scene = scenePort.scene;\n\t\t\t\tout image = imagePort.image;\n\t\t\t}\n\t\t\tperform displayPhoto.displayPhoto {\n\t\t\t\tin photo = photoPort.photo;\n\t\t\t}\n\t\t}\n\t\tinterface userToCamera connect user.scenePort to camera.scenePort {\n\t\t\tref flow references captureScene.sceneFlow\n\t\t\t\tfrom source.scene to target.scene; \n\t\t}\n\t\tinterface cameraToUser connect camera.imagePort to user.imagePort {\n\t\t\tref flow references captureScene.imageFlow\n\t\t\t\tfrom source.image to target.image; \n\t\t}\n\t\tinterface cameraToDisplay connect camera.photoPort to display.photoPort {\n\t\t\tref flow references displayPhoto",
    "package 'Camera' {\n\tattribute def Image;\n\tattribute def Picture;\n\tport def viewPort {\n\t\tin viewPort: Image;\n\t}\n\tport def displayPort {\n\t\tout displayPort: Picture;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport viewPort: viewPort;\n\t\t\tperform captureScene.captureImage {\n\t\t\t\tin viewPort = viewPort.viewPort;\n\t\t\t\tout image = imagePort.image;\n\t\t\t}\n\t\t\tperform displayPhoto.displayPicture {\n\t\t\t\tin picture = picturePort.picture;\n\t\t\t}\n\t\t}\n\t\tinterface userToCamera connect user.viewPort to camera.viewPort {\n\t\t\tref flow references captureScene.imageFlow\n\t\t\t\tfrom source.image to target.viewPort; \n\t\t}\n\t\tinterface cameraToDisplay connect camera.displayPort to display.displayPort {\n\t\t\tref flow references displayPhoto.pictureFlow\n\t\t\t\tfrom source.picture to target.displayPort; \n\t\t}\n\t\tpart camera {\n\t\t\tport viewPort: ~viewPort;\n\t\t\tperform focusScene.focusImage {\n\t\t\t\tin image = viewPort.viewPort;\n\t\t\t\tout focusedImage =",
    "package 'SensorManagementSystem' {\n\tattribute def SensorStatus;\n\tattribute def SensorUpdate;\n\tport def SensorStatusPort {\n\t\tin sensorStatus : SensorStatus;\n\t}\n\tport def SensorUpdatePort {\n\t\tout sensorUpdate : SensorUpdate;\n\t}\n\tpart context {\n\t\tpart sensor {\n\t\t\tport sensorStatusPort: SensorStatusPort;\n\t\t\tperform updateSensor.updateSensorStatus {\n\t\t\t\tin sensorStatus = sensorStatusPort.sensorStatus;\n\t\t\t\tout sensorUpdate = sensorUpdatePort.sensorUpdate;\n\t\t\t}\n\t\t}\n\t\tinterface sensorToSensorManagementSystem connect sensor.sensorStatusPort to sensorManagementSystem.sensorStatusPort {\n\t\t\tref flow references updateSensor.sensorStatusFlow\n\t\t\t\tfrom source.sensorStatus to target.sensorStatus; \n\t\t}\n\t\tpart sensorManagementSystem {\n\t\t\tport sensorStatusPort: ~SensorStatusPort;\n\t\t\tperform updateSensor.updateAllSensors {\n\t\t\t\tin sensorStatus = sensorStatusPort.sensorStatus;\n\t\t\t}\n\t\t\tport sensorUpdatePort: SensorUpdatePort;\n\t\t}\n\t}\n\taction updateSensor {\n\t\taction updateSensorStatus { in sensorStatus: SensorStatus;",
    "package 'Vehicle' {\n\tattribute def State;\n\tport def StatePort {\n\t\tin state: State;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport statePort: StatePort;\n\t\t\tperform startUp.sendStartSignal {\n\t\t\t\tout startSignal = statePort.state;\n\t\t\t}\n\t\t\tperform shutDown.sendShutdownSignal {\n\t\t\t\tout shutdownSignal = statePort.state;\n\t\t\t}\n\t\t}\n\t\tinterface userToVehicle connect user.statePort to vehicle.statePort {\n\t\t\tref flow references startUp.stateFlow\n\t\t\t\tfrom source.state to target.state;\n\t\t\tref flow references shutDown.stateFlow\n\t\t\t\tfrom source.state to target.state;\n\t\t}\n\t\tpart vehicle {\n\t\t\tport statePort: ~StatePort;\n\t\t\tperform startUp.transitionToStarting {\n\t\t\t\tin startSignal = statePort.state;\n\t\t\t\tout state = startingStatePort.state;\n\t\t\t}\n\t\t\tperform shutDown.transitionToOff {\n\t\t\t\tin shutdownSignal = statePort.state;\n\t\t\t\tout state = offStatePort.state;\n\t\t\t}\n\t\t\tport startingStatePort: StatePort;\n\t\t",
    "package 'Vehicle' {\n\tattribute def State;\n\tport def StatePort {\n\t\tout state: State;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport statePort: StatePort;\n\t\t\tperform manageState.sendState {\n\t\t\t\tout state = statePort.state;\n\t\t\t}\n\t\t}\n\t\tinterface userToVehicle connect user.statePort to vehicle.statePort {\n\t\t\tref flow references manageState.stateFlow\n\t\t\t\tfrom source.state to target.state; \n\t\t}\n\t\tpart vehicle {\n\t\t\tport statePort: ~StatePort;\n\t\t\tperform manageState.changeState {\n\t\t\t\tin state = statePort.state;\n\t\t\t}\n\t\t}\n\t}\n\taction manageState {\n\t\taction sendState { out state: State; }\n\t\tsuccession flow stateFlow from sendState.state to changeState.state;\n\t\taction changeState { in state: State; }\n\t}\n}",
    "package 'VehiclePowerManagement' {\n\tattribute def VehicleState;\n\tattribute def VehicleCommand;\n\tport def VehicleStatePort {\n\t\tin vehicleState : VehicleState;\n\t}\n\tport def VehicleCommandPort {\n\t\tin vehicleCommand : VehicleCommand;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport vehicleStatePort: VehicleStatePort;\n\t\t\tport vehicleCommandPort: VehicleCommandPort;\n\t\t\tperform powerManagement.sendVehicleCommand {\n\t\t\t\tin vehicleCommand = vehicleCommandPort.vehicleCommand;\n\t\t\t\tout vehicleState = vehicleStatePort.vehicleState;\n\t\t\t}\n\t\t}\n\t\tinterface userToPowerManagement connect user.vehicleCommandPort to powerManagement.vehicleCommandPort {\n\t\t\tref flow references powerManagement.vehicleCommandFlow\n\t\t\t\tfrom source.vehicleCommand to target.vehicleCommand; \n\t\t}\n\t\tpart powerManagement {\n\t\t\tport vehicleStatePort: ~VehicleStatePort;\n\t\t\tport vehicleCommandPort: ~VehicleCommandPort;\n\t\t\tperform powerManagement.manageVehiclePower {\n\t\t\t\tin vehicleState = vehicleStatePort.vehicleState;\n\t\t\t\tin vehicleCommand",
    "package 'Vehicle' {\n\tattribute def VehicleStatus;\n\tport def VehicleStatusPort {\n\t\tout vehicleStatus: VehicleStatus;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport vehicleStatusPort: VehicleStatusPort;\n\t\t\tperform manageStartUpShutdown.sendVehicleStatus {\n\t\t\t\tout vehicleStatus = vehicleStatusPort.vehicleStatus;\n\t\t\t}\n\t\t}\n\t\tinterface userToVehicle connect user.vehicleStatusPort to vehicle.vehicleStatusPort {\n\t\t\tref flow references manageStartUpShutdown.vehicleStatusFlow\n\t\t\t\tfrom source.vehicleStatus to target.vehicleStatus; \n\t\t}\n\t\tpart vehicle {\n\t\t\tport vehicleStatusPort: ~VehicleStatusPort;\n\t\t\tperform manageStartUpShutdown.updateVehicleStatus {\n\t\t\t\tin vehicleStatus = vehicleStatusPort.vehicleStatus;\n\t\t\t}\n\t\t}\n\t}\n\taction manageStartUpShutdown {\n\t\taction sendVehicleStatus { out vehicleStatus: VehicleStatus; }\n\t\tsuccession flow vehicleStatusFlow from sendVehicleStatus.vehicleStatus to updateVehicleStatus.vehicleStatus;\n\t\taction updateVehicleStatus { in vehicleStatus: VehicleStatus; }\n\t\tif (vehicleStatus = shutdown) {\n\t\t\t",
    "package 'PowerManagement' {\n\tattribute def VehicleState;\n\tattribute def StartSignal;\n\tattribute def OnSignal;\n\tattribute def OffSignal;\n\tport def VehicleStatePort {\n\t\tin vehicleState : VehicleState;\n\t}\n\tport def StartSignalPort {\n\t\tin startSignal : StartSignal;\n\t}\n\tport def OnSignalPort {\n\t\tin onSignal : OnSignal;\n\t}\n\tport def OffSignalPort {\n\t\tin offSignal : OffSignal;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport vehicleStatePort: VehicleStatePort;\n\t\t\tport startSignalPort: StartSignalPort;\n\t\t\tport onSignalPort: OnSignalPort;\n\t\t\tport offSignalPort: OffSignalPort;\n\t\t\tperform switchVehicleState.sendStartSignal {\n\t\t\t\tout startSignal = startSignalPort.startSignal;\n\t\t\t}\n\t\t\tperform switchVehicleState.sendOnSignal {\n\t\t\t\tout onSignal = onSignalPort.onSignal;\n\t\t\t}\n\t\t\tperform switchVehicleState.sendOffSignal {\n\t\t\t\tout offSignal = offSignalPort",
    "package 'VehicleHealthMonitoring' {\n\tattribute def Temperature;\n\tattribute def VehicleHealthStatus;\n\tattribute def MaintenanceInterval;\n\tattribute def MaintenanceStatus;\n\tattribute def MaintenanceStartTime;\n\tattribute def MaintenanceEndTime;\n\tport def TemperaturePort {\n\t\tin temperature : Temperature;\n\t}\n\tport def VehicleHealthStatusPort {\n\t\tout vehicleHealthStatus : VehicleHealthStatus;\n\t}\n\tport def MaintenanceIntervalPort {\n\t\tin maintenanceInterval : MaintenanceInterval;\n\t}\n\tport def MaintenanceStatusPort {\n\t\tout maintenanceStatus : MaintenanceStatus;\n\t}\n\tport def MaintenanceStartTimePort {\n\t\tout maintenanceStartTime : MaintenanceStartTime;\n\t}\n\tport def MaintenanceEndTimePort {\n\t\tout maintenanceEndTime : MaintenanceEndTime;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport temperaturePort: TemperaturePort;\n\t\t\tperform monitor",
    "package 'Server' {\n\tattribute def State;\n\tattribute def Time;\n\tport def RequestPort {\n\t\tin request: Request;\n\t}\n\tport def ResponsePort {\n\t\tout response: Response;\n\t}\n\tpart context {\n\t\tpart server {\n\t\t\tattribute state: State;\n\t\t\tattribute time: Time;\n\t\t\tport requestPort: RequestPort;\n\t\t\tport responsePort: ResponsePort;\n\t\t\tperform managePowerState.transitionToWaiting {\n\t\t\t\tin state = server.state;\n\t\t\t\tin time = server.time;\n\t\t\t\tout state = waiting;\n\t\t\t}\n\t\t\tperform managePowerState.transitionToResponse {\n\t\t\t\tin state = waiting;\n\t\t\t\tin time = server.time;\n\t\t\t\tout state = response;\n\t\t\t}\n\t\t\tperform managePowerState.transitionToOff {\n\t\t\t\tin state = response;\n\t\t\t\tin time = server.time;\n\t\t\t\tout state = off;\n\t\t\t}\n\t\t\tperform managePowerState.transitionToWaiting {\n\t\t\t\tin state = off;\n\t\t\t\tin time = server.time;\n\t\t\t\tout state = waiting;\n\t\t\t}\n\t\t\t",
    "package 'StartStopSystem' {\n\tattribute def StartStopCmd;\n\tattribute def PowerOnSignal;\n\tattribute def BrakePedalDepressed;\n\tattribute def SelfCheckPassed;\n\tattribute def PowerSupply;\n\tattribute def ParkingBrakeApplied;\n\tport def StartStopCmdPort {\n\t\tout startStopCmd : StartStopCmd;\n\t}\n\tport def PowerOnSignalPort {\n\t\tin powerOnSignal : PowerOnSignal;\n\t}\n\tport def BrakePedalDepressedPort {\n\t\tin brakePedalDepressed : BrakePedalDepressed;\n\t}\n\tport def SelfCheckPassedPort {\n\t\tin selfCheckPassed : SelfCheckPassed;\n\t}\n\tport def PowerSupplyPort {\n\t\tout powerSupply : PowerSupply;\n\t}\n\tport def ParkingBrakeAppliedPort {\n\t\tout parkingBrakeApplied : ParkingBrakeApplied;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport startStopCmdPort: StartStopCmdPort",
    "package 'VehicleControlSystem' {\n\tattribute def VehicleState;\n\tattribute def VehicleStartSignal;\n\tattribute def VehicleShutdownSignal;\n\tattribute def VehicleOnSignal;\n\tattribute def VehicleOffSignal;\n\tattribute def BrakePedalSignal;\n\tattribute def PowerSupplySignal;\n\tattribute def SelfCheckSignal;\n\tattribute def StartControlSignal;\n\tattribute def ShutdownControlSignal;\n\tattribute def ParkingBrakeSignal;\n\tport def VehicleStatePort {\n\t\tin vehicleState : VehicleState;\n\t}\n\tport def VehicleStartSignalPort {\n\t\tin vehicleStartSignal : VehicleStartSignal;\n\t}\n\tport def VehicleShutdownSignalPort {\n\t\tin vehicleShutdownSignal : VehicleShutdownSignal;\n\t}\n\tport def VehicleOnSignalPort {\n\t\tin vehicleOnSignal : VehicleOnSignal;\n\t}\n\tport def VehicleOffSignalPort {\n\t\tin",
    "package 'CruiseControlSystem' {\n\tattribute def Speed;\n\tattribute def Fuel;\n\tport def SpeedPort {\n\t\tout speed: Speed;\n\t}\n\tport def FuelPort {\n\t\tout fuel: Fuel;\n\t}\n\tpart context {\n\t\tpart driver {\n\t\t\tport speedPort: SpeedPort;\n\t\t\tperform setSpeed.sendSpeed {\n\t\t\t\tout speed = speedPort.speed;\n\t\t\t}\n\t\t}\n\t\tinterface driverToCruiseController connect driver.speedPort to cruiseController.speedPort {\n\t\t\tref flow references setSpeed.speedFlow\n\t\t\t\tfrom source.speed to target.speed; \n\t\t}\n\t\tpart cruiseController {\n\t\t\tport speedPort: ~SpeedPort;\n\t\t\tperform obtainSpeed.receiveSpeed {\n\t\t\t\tin speed = speedPort.speed;\n\t\t\t}\n\t\t\tperform generateFuelControl.sendFuel {\n\t\t\t\tout fuel = fuelPort.fuel;\n\t\t\t}\n\t\t\tport fuelPort: FuelPort ;\n\t\t}\n\t\tpart engine {\n\t\t\tport fuel",
    "package 'CruiseControl' {\n\tattribute def SetSpeed;\n\tattribute def Speed;\n\tattribute def Throttle;\n\tport def SetSpeedPort {\n\t\tin setSpeed : SetSpeed;\n\t}\n\tport def SpeedPort {\n\t\tin speed : Speed;\n\t}\n\tport def ThrottlePort {\n\t\tout throttle : Throttle;\n\t}\n\tpart context {\n\t\tpart driver {\n\t\t\tport setSpeedPort: SetSpeedPort;\n\t\t\tperform cruiseControl.sendSetSpeed {\n\t\t\t\tin setSpeed = setSpeedPort.setSpeed;\n\t\t\t}\n\t\t}\n\t\tinterface driverToCruiseControl connect driver.setSpeedPort to cruiseControl.setSpeedPort {\n\t\t\tref flow references cruiseControl.setSpeedFlow\n\t\t\t\tfrom source.setSpeed to target.setSpeed; \n\t\t}\n\t\tpart cruiseControl {\n\t\t\tport setSpeedPort: ~SetSpeedPort;\n\t\t\tperform cruiseControl.acquireSpeed {\n\t\t\t\tin speed = speedPort.speed;\n\t\t\t}\n\t\t\tperform cruiseControl.generateThrottle {\n\t\t\t\tin setSpeed = setSpeedPort.set",
    "package 'CruiseControl' {\n\tattribute def Speed;\n\tattribute def Throttle;\n\tport def SpeedPort {\n\t\tin speed : Speed;\n\t}\n\tport def ThrottlePort {\n\t\tout throttle : Throttle;\n\t}\n\tpart context {\n\t\tpart driver {\n\t\t\tport speedPort: SpeedPort;\n\t\t\tperform cruiseControl.sendSpeedCommand {\n\t\t\t\tin speed = speedPort.speed;\n\t\t\t}\n\t\t}\n\t\tinterface driverToCruiseControl connect driver.speedPort to cruiseControl.speedPort {\n\t\t\tref flow references cruiseControl.speedFlow\n\t\t\t\tfrom source.speed to target.speed; \n\t\t}\n\t\tpart cruiseControl {\n\t\t\tport speedPort: ~SpeedPort;\n\t\t\tperform cruiseControl.calculateSpeedDifference {\n\t\t\t\tin speed = speedPort.speed;\n\t\t\t}\n\t\t\tperform cruiseControl.generateThrottleCommand {\n\t\t\t\tin speedDifference = calculateSpeedDifference.speedDifference;\n\t\t\t\tout throttle = throttlePort.throttle;\n\t\t\t}\n\t\t\tport",
    "package 'CruiseControl' {\n\tattribute def Speed;\n\tport def SpeedPort {\n\t\tin speed : Speed;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport speedPort: SpeedPort;\n\t\t\tperform cruiseControl.sendSpeed {\n\t\t\t\tin speed = speedPort.speed;\n\t\t\t}\n\t\t}\n\t\tinterface userToCruiseControl connect user.speedPort to cruiseControl.speedPort {\n\t\t\tref flow references cruiseControl.speedFlow\n\t\t\t\tfrom source.speed to target.speed; \n\t\t}\n\t\tpart cruiseControl {\n\t\t\tport speedPort: ~SpeedPort;\n\t\t\tperform cruiseControl.calculateThrottle {\n\t\t\t\tin speed = speedPort.speed;\n\t\t\t}\n\t\t\tperform cruiseControl.transmitThrottle {\n\t\t\t\tin throttle = calculateThrottle.throttle;\n\t\t\t}\n\t\t}\n\t\tpart engine {\n\t\t\tperform cruiseControl.receiveThrottle {\n\t\t\t\tin throttle = transmitThrottle.throttle;\n\t\t\t}\n\t\t}\n\t}\n\taction cruiseControl",
    "package 'CruiseControl' {\n\tattribute def TargetSpeed;\n\tattribute def ActualSpeed;\n\tattribute def FuelControlCmd;\n\tport def TargetSpeedPort {\n\t\tin targetSpeed : TargetSpeed;\n\t}\n\tport def ActualSpeedPort {\n\t\tin actualSpeed : ActualSpeed;\n\t}\n\tport def FuelControlCmdPort {\n\t\tout fuelControlCmd : FuelControlCmd;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport targetSpeedPort: TargetSpeedPort;\n\t\t\tperform cruiseControl.sendTargetSpeed {\n\t\t\t\tin targetSpeed = targetSpeedPort.targetSpeed;\n\t\t\t}\n\t\t}\n\t\tinterface userToCruiseControl connect user.targetSpeedPort to cruiseControl.targetSpeedPort {\n\t\t\tref flow references cruiseControl.targetSpeedFlow\n\t\t\t\t",
    "package 'CruiseControl' {\n\tattribute def Speed;\n\tattribute def FuelControl;\n\tport def SpeedPort {\n\t\tin speed : Speed;\n\t}\n\tport def FuelControlPort {\n\t\tout fuelControl : FuelControl;\n\t}\n\tpart context {\n\t\tpart driver {\n\t\t\tport speedPort: SpeedPort;\n\t\t\tperform cruiseControl.sendSpeedCmd {\n\t\t\t\tin speed = speedPort.speed;\n\t\t\t}\n\t\t}\n\t\tinterface driverToCruiseController connect driver.speedPort to cruiseController.speedPort {\n\t\t\tref flow references cruiseControl.speedCmdFlow\n\t\t\t\tfrom source.speed to target.speed; \n\t\t}\n\t\tpart cruiseController {\n\t\t\tport speedPort: ~SpeedPort;\n\t\t\tperform cruiseControl.processSpeed {\n\t\t\t\tin speed = speedPort.speed;\n\t\t\t}\n\t\t\tperform cruiseControl.calculateFuelControl {\n\t\t\t\tin actualSpeed = cruiseControl.actualSpeed;\n\t\t\t\tin setSpeed = cruiseControl.setSpeed;\n\t\t\t\tout fuelControl =",
    "package 'VehicleLifecycleManagementSystem' {\n\tattribute def Vehicle;\n\tattribute def DeliveryDate;\n\tattribute def Owner;\n\tattribute def Driver;\n\tattribute def ScrappingDate;\n\tport def VehiclePort {\n\t\tout vehicle: Vehicle;\n\t}\n\tport def DeliveryDatePort {\n\t\tout deliveryDate: DeliveryDate;\n\t}\n\tport def OwnerPort {\n\t\tout owner: Owner;\n\t}\n\tport def DriverPort {\n\t\tout driver: Driver;\n\t}\n\tport def ScrappingDatePort {\n\t\tout scrappingDate: ScrappingDate;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport vehiclePort: VehiclePort;\n\t\t\tperform assembly.recordVehicle {\n\t\t\t\tout vehicle = vehiclePort.vehicle;\n\t\t\t}\n\t\t\tperform delivery.recordDeliveryDate {\n\t\t\t\tin vehicle = vehiclePort.vehicle;\n\t\t\t\tout deliveryDate = deliveryDatePort.deliveryDate;\n\t\t\t}\n\t\t\tperform ownership.recordOwner {\n\t\t\t\tin vehicle = vehiclePort.vehicle;\n\t\t\t\tout owner",
    "package 'Vehicle' {\n\tattribute def Mass;\n\tattribute def OperationalStatus;\n\tattribute def GearSetting;\n\tattribute def AcceleratorPedalPosition;\n\tport def MassPort {\n\t\tout mass: Mass;\n\t}\n\tport def OperationalStatusPort {\n\t\tout operationalStatus: OperationalStatus;\n\t}\n\tport def GearSettingPort {\n\t\tout gearSetting: GearSetting;\n\t}\n\tport def AcceleratorPedalPositionPort {\n\t\tout acceleratorPedalPosition: AcceleratorPedalPosition;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport massPort: MassPort;\n\t\t\tport operationalStatusPort: OperationalStatusPort;\n\t\t\tport gearSettingPort: GearSettingPort;\n\t\t\tport acceleratorPedalPositionPort: AcceleratorPedalPositionPort;\n\t\t\tpart engine {\n\t\t\t\t// engine attributes and ports\n\t\t\t}\n\t\t\tpart driver {\n\t\t\t\t// driver attributes and ports\n\t\t\t}\n\t\t\tpart wheel {\n\t\t\t\t// wheel attributes and ports\n\t\t\t}\n\t\t\tpart wheel {\n\t\t\t\t// wheel attributes and ports\n\t\t\t}\n\t\t\tpart vehicle_",
    "package 'VehicleSystem' {\n\tattribute def Mass;\n\tattribute def Gear;\n\tattribute def AcceleratorPosition;\n\tport def MassPort {\n\t\tout mass: Mass;\n\t}\n\tport def GearPort {\n\t\tout gear: Gear;\n\t}\n\tport def AcceleratorPositionPort {\n\t\tout acceleratorPosition: AcceleratorPosition;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport massPort: MassPort;\n\t\t\tport gearPort: GearPort;\n\t\t\tport acceleratorPositionPort: AcceleratorPositionPort;\n\t\t\tperform updateVehicleAttributes.updateMass {\n\t\t\t\tin mass = massPort.mass;\n\t\t\t}\n\t\t\tperform updateVehicleAttributes.updateGear {\n\t\t\t\tin gear = gearPort.gear;\n\t\t\t}\n\t\t\tperform updateVehicleAttributes.updateAcceleratorPosition {\n\t\t\t\tin acceleratorPosition = acceleratorPositionPort.acceleratorPosition;\n\t\t\t}\n\t\t}\n\t\tpart vehicle_1 {\n\t\t\tport massPort: ~Mass",
    "package 'Vehicle' {\n\tattribute def Mass;\n\tattribute def Gear;\n\tattribute def Throttle;\n\tattribute def Driver;\n\tport def MassPort {\n\t\tout mass: Mass;\n\t}\n\tport def GearPort {\n\t\tout gear: Gear;\n\t}\n\tport def ThrottlePort {\n\t\tout throttle: Throttle;\n\t}\n\tport def DriverPort {\n\t\tout driver: Driver;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport massPort: MassPort;\n\t\t\tport gearPort: GearPort;\n\t\t\tport throttlePort: ThrottlePort;\n\t\t\tport driverPort: DriverPort;\n\t\t\tperform updateVehicleAttributes.updateMass {\n\t\t\t\tin mass = massPort.mass;\n\t\t\t}\n\t\t\tperform updateVehicleAttributes.updateGear {\n\t\t\t\tin gear = gearPort.gear;\n\t\t\t}\n\t\t\tperform updateVehicleAttributes.updateThrottle {\n\t\t\t\tin throttle",
    "package 'VehicleMassModel' {\n\tattribute def Mass;\n\tport def MassPort {\n\t\tout mass: Mass;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport massPort: MassPort;\n\t\t\tperform aggregateMass.calculateTotalMass {\n\t\t\t\tin mass = massPort.mass;\n\t\t\t\tout totalMass = massPort.mass;\n\t\t\t}\n\t\t}\n\t\tinterface vehicleToComponent connect vehicle.massPort to component.massPort {\n\t\t\tref flow references aggregateMass.massFlow\n\t\t\t\tfrom source.mass to target.mass; \n\t\t}\n\t\tpart component {\n\t\t\tport massPort: ~MassPort;\n\t\t\tperform aggregateMass.aggregateSubcomponentMass {\n\t\t\t\tin mass = massPort.mass;\n\t\t\t\tout totalMass = massPort.mass;\n\t\t\t}\n\t\t}\n\t}\n\taction aggregateMass {\n\t\taction calculateTotalMass { in mass: Mass; out totalMass: Mass; }\n\t\tsuccession flow massFlow from calculateTotalMass.mass to aggregate",
    "package 'VehicleMass' {\n\tattribute def Mass;\n\tattribute def SerialNumber;\n\tattribute def VIN;\n\tattribute def ComponentType;\n\tattribute def ComponentMass;\n\tport def MassPort {\n\t\tout mass: Mass;\n\t}\n\tport def SerialNumberPort {\n\t\tout serialNumber: SerialNumber;\n\t}\n\tport def VINPort {\n\t\tout vin: VIN;\n\t}\n\tport def ComponentTypePort {\n\t\tout componentType: ComponentType;\n\t}\n\tport def ComponentMassPort {\n\t\tout componentMass: ComponentMass;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport massPort: MassPort;\n\t\t\tport serialNumberPort: SerialNumberPort;\n\t\t\tport vinPort: VINPort;\n\t\t\tport componentTypePort: ComponentTypePort;\n\t\t\tport componentMassPort: ComponentMassPort;\n\t\t\tperform calculateTotalMass.calculate {\n\t\t\t\tin mass = massPort.",
    "package 'MassAggregation' {\n\tattribute def simpleMass;\n\tattribute def totalMass;\n\tport def simpleMassPort {\n\t\tout simpleMass : simpleMass;\n\t}\n\tport def totalMassPort {\n\t\tout totalMass : totalMass;\n\t}\n\tpart context {\n\t\tpart simpleThing {\n\t\t\tport simpleMassPort: simpleMassPort;\n\t\t\tperform aggregateMass.calculateTotalMass {\n\t\t\t\tin simpleMass = simpleMassPort.simpleMass;\n\t\t\t\tout totalMass = totalMassPort.totalMass;\n\t\t\t}\n\t\t}\n\t\tpart compositeThing {\n\t\t\tport simpleMassPort: simpleMassPort;\n\t\t\tperform aggregateMass.calculateTotalMass {\n\t\t\t\tin simpleMass = simpleMassPort.simpleMass;\n\t\t\t\tout totalMass = totalMassPort.totalMass;\n\t\t\t}\n\t\t\tpart subcomponent1 {\n\t\t\t\tport simpleMassPort: simpleMassPort;\n\t\t\t\tperform aggregateMass.calculateTotalMass {\n\t\t\t\t\tin simpleMass = simpleMassPort.simpleMass;\n\t\t\t\t\tout totalMass = totalMassPort.totalMass;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart subcomponent2 {\n\t\t\t\tport simpleMassPort: simpleMass",
    "package 'MassAggregation' {\n\tattribute def Mass;\n\tport def MassPort {\n\t\tout mass: Mass;\n\t}\n\tpart context {\n\t\tpart object {\n\t\t\tattribute def BasicMass;\n\t\t\tattribute def Subcomponents;\n\t\t\tport def MassPort {\n\t\t\t\tout basicMass: BasicMass;\n\t\t\t}\n\t\t\tpart subcomponent {\n\t\t\t\tattribute def Mass;\n\t\t\t\tport def MassPort {\n\t\t\t\t\tout mass: Mass;\n\t\t\t\t}\n\t\t\t}\n\t\t\taction calculateTotalMass {\n\t\t\t\tin basicMass;\n\t\t\t\tin subcomponents;\n\t\t\t\tout totalMass: Mass;\n\t\t\t\tif (subcomponents.size() > 0) {\n\t\t\t\t\tfor (subcomponent : subcomponents) {\n\t\t\t\t\t\tif (subcomponent.mass >= minimumMass) {\n\t\t\t\t\t\t\ttotalMass = totalMass + subcomponent.mass;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttotalMass = basicMass;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpart filter {\n\t\t\tattribute def MinimumMass;\n\t\t\tport def MassPort {",
    "package 'VehicleDynamics' {\n\tattribute def PowerOutput;\n\tattribute def Acceleration;\n\tattribute def Speed;\n\tattribute def Position;\n\tport def PowerOutputPort {\n\t\tout powerOutput: PowerOutput;\n\t}\n\tport def AccelerationPort {\n\t\tout acceleration: Acceleration;\n\t}\n\tport def SpeedPort {\n\t\tout speed: Speed;\n\t}\n\tport def PositionPort {\n\t\tout position: Position;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport powerOutputPort: PowerOutputPort;\n\t\t\tport accelerationPort: AccelerationPort;\n\t\t\tport speedPort: SpeedPort;\n\t\t\tport positionPort: PositionPort;\n\t\t\tperform calculateVehicleDynamics.calculatePowerOutput {\n\t\t\t\tin wheelPower, aerodynamicDragCoefficient, frictionCoefficient, vehicleMass, speed = powerOutputPort.powerOutput;\n\t\t\t\tout powerOutput = powerOutputPort.powerOutput;\n\t\t\t}\n\t\t\tperform calculateVehicleDynamics.calculateAcceleration {\n\t\t\t\tin effectivePower",
    "package 'Vehicle Dynamics' {\n\tattribute def Acceleration;\n\tattribute def Speed;\n\tattribute def Position;\n\tattribute def WheelEndPower;\n\tattribute def TotalMass;\n\tattribute def DragCoefficient;\n\tattribute def RollingResistanceCoefficient;\n\tattribute def TimeStep;\n\tattribute def InitialSpeed;\n\tattribute def InitialPosition;\n\tport def AccelerationPort {\n\t\tout acceleration: Acceleration;\n\t}\n\tport def SpeedPort {\n\t\tout speed: Speed;\n\t}\n\tport def PositionPort {\n\t\tout position: Position;\n\t}\n\tport def WheelEndPowerPort {\n\t\tin wheelEndPower: WheelEndPower;\n\t}\n\tport def TotalMassPort {\n\t\tin totalMass: TotalMass;\n\t}\n\tport def DragCoefficientPort {\n\t\tin dragCoefficient: DragCoefficient;\n\t}\n\tport def RollingResistanceCoefficientPort {\n\t\tin rollingResistanceCoefficient: RollingResistanceCoefficient;\n\t}\n\tport def",
    "package 'VehicleDynamics' {\n\tattribute def Mass;\n\tattribute def WheelPower;\n\tattribute def AerodynamicDragCoefficient;\n\tattribute def RollingResistanceCoefficient;\n\tattribute def InitialSpeed;\n\tattribute def InitialPosition;\n\tport def MassPort {\n\t\tout mass: Mass;\n\t}\n\tport def WheelPowerPort {\n\t\tout wheelPower: WheelPower;\n\t}\n\tport def AerodynamicDragCoefficientPort {\n\t\tout aerodynamicDragCoefficient: AerodynamicDragCoefficient;\n\t}\n\tport def RollingResistanceCoefficientPort {\n\t\tout rollingResistanceCoefficient: RollingResistanceCoefficient;\n\t}\n\tport def InitialSpeedPort {\n\t\tout initialSpeed: InitialSpeed;\n\t}\n\tport def InitialPositionPort {\n\t\tout initialPosition: InitialPosition;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport massPort: MassPort;\n\t\t\tport wheelPowerPort: WheelPowerPort;\n\t\t\tport aerodynamicDragCoefficientPort: AerodynamicDragCoefficientPort;\n\t\t\tport rollingResistanceCoefficientPort: RollingRes",
    "package 'VehicleDynamics' {\n\tattribute def InitialPosition;\n\tattribute def InitialVelocity;\n\tattribute def Mass;\n\tattribute def WheelEndDrivePower;\n\tattribute def TimeInterval;\n\tattribute def Power;\n\tattribute def DragCoefficient;\n\tattribute def FrictionCoefficient;\n\tattribute def OtherFactors;\n\tattribute def Acceleration;\n\tattribute def FinalVelocity;\n\tattribute def FinalPosition;\n\tport def InitialPositionPort {\n\t\tout initialPosition: InitialPosition;\n\t}\n\tport def InitialVelocityPort {\n\t\tout initialVelocity: InitialVelocity;\n\t}\n\tport def MassPort {\n\t\tout mass: Mass;\n\t}\n\tport def WheelEndDrivePowerPort {\n\t\tout wheelEndDrivePower: WheelEndDrivePower;\n\t}\n\tport def TimeIntervalPort {\n\t\tout timeInterval: TimeInterval;\n\t}\n\tport def PowerPort {\n\t\tout power: Power;\n\t}\n\tport def DragCoefficientPort {\n\t\tout drag",
    "package 'VehicleWeightRestriction' {\n\tattribute def TotalMass;\n\tattribute def MaxPermittedMass;\n\tattribute def OverweightWarning;\n\tport def TotalMassPort {\n\t\tout totalMass: TotalMass;\n\t}\n\tport def MaxPermittedMassPort {\n\t\tout maxPermittedMass: MaxPermittedMass;\n\t}\n\tport def OverweightWarningPort {\n\t\tout overweightWarning: OverweightWarning;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport totalMassPort: TotalMassPort;\n\t\t\tport maxPermittedMassPort: MaxPermittedMassPort;\n\t\t\tport overweightWarningPort: OverweightWarningPort;\n\t\t\tperform checkWeight.checkTotalMass {\n\t\t\t\tin totalMass = totalMassPort.totalMass;\n\t\t\t\tin maxPermittedMass = maxPermittedMassPort.maxPermittedMass;\n\t\t\t\tout overweightWarning = overweightWarningPort.overweightWarning;\n\t\t\t}\n\t\t}\n\t\tpart chassis {\n\t\t\tattribute def Mass;\n\t\t\tport def MassPort {\n\t\t\t\tout mass: Mass;\n\t\t\t}\n\t\t\tpart chassisMass {\n\t\t\t\tport massPort: Mass",
    "package 'VehicleMassBudget' {\n\tattribute def Mass;\n\tport def MassPort {\n\t\tout mass: Mass;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport massPort: MassPort;\n\t\t\tperform calculateTotalMass.receiveMass {\n\t\t\t\tin mass = massPort.mass;\n\t\t\t}\n\t\t}\n\t\tinterface userToEngine connect user.massPort to engine.massPort {\n\t\t\tref flow references calculateTotalMass.engineMassFlow\n\t\t\t\tfrom source.mass to target.mass; \n\t\t}\n\t\tinterface userToTransmission connect user.massPort to transmission.massPort {\n\t\t\tref flow references calculateTotalMass.transmissionMassFlow\n\t\t\t\tfrom source.mass to target.mass; \n\t\t}\n\t\tpart engine {\n\t\t\tport massPort: ~MassPort;\n\t\t\tperform calculateTotalMass.receiveEngineMass {\n\t\t\t\tin mass = massPort.mass;\n\t\t\t}\n\t\t}\n\t\tpart transmission {\n\t\t\tport massPort: ~MassPort;\n\t\t\tperform calculateTotalMass.receiveTransmissionMass {\n\t\t\t\t",
    "package 'VehicleMassCompliance' {\n\tattribute def Mass;\n\tport def MassPort {\n\t\tout mass: Mass;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport chassisMassPort: MassPort;\n\t\t\tport engineMassPort: MassPort;\n\t\t\tport transmissionMassPort: MassPort;\n\t\t\tperform verifyMassCompliance.checkTotalMass {\n\t\t\t\tin chassisMass = chassisMassPort.mass;\n\t\t\t\tin engineMass = engineMassPort.mass;\n\t\t\t\tin transmissionMass = transmissionMassPort.mass;\n\t\t\t\tout isCompliant = isCompliantPort.isCompliant;\n\t\t\t}\n\t\t\tport isCompliantPort: ~IsCompliantPort;\n\t\t}\n\t\tinterface vehicleToComplianceSystem connect vehicle.chassisMassPort to complianceSystem.chassisMassPort {\n\t\t\tref flow references verifyMassCompliance.chassisMassFlow\n\t\t\t\tfrom source.chassisMass to target.chassisMass; \n\t\t}\n\t\tinterface vehicleToComplianceSystem connect vehicle.engineMassPort to complianceSystem.engineMassPort {\n\t\t\tref flow references verifyMassCompliance.engineMassFlow\n\t\t\t\tfrom source",
    "package 'WeightManagementSystem' {\n\tattribute def Weight;\n\tport def WeightPort {\n\t\tin weight: Weight;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport weightPort: WeightPort;\n\t\t\tperform weightManagement.checkWeight {\n\t\t\t\tin weight = weightPort.weight;\n\t\t\t}\n\t\t}\n\t\tpart weightManagement {\n\t\t\tperform weightManagement.sumWeights {\n\t\t\t\tin chassisWeight = chassisWeightPort.weight;\n\t\t\t\tin engineWeight = engineWeightPort.weight;\n\t\t\t\tin transmissionWeight = transmissionWeightPort.weight;\n\t\t\t\tout totalWeight = totalWeightPort.weight;\n\t\t\t}\n\t\t\tport chassisWeightPort: WeightPort;\n\t\t\tport engineWeightPort: WeightPort;\n\t\t\tport transmissionWeightPort: WeightPort;\n\t\t\tport totalWeightPort: WeightPort;\n\t\t}\n\t}\n\taction weightManagement {\n\t\taction checkWeight { in weight: Weight; }\n\t\taction sumWeights {\n\t\t\tin chassisWeight: Weight;\n\t\t\tin engineWeight: Weight;\n\t\t\tin transmissionWeight: Weight;\n\t\t\tout totalWeight: Weight;\n\t\t}\n\t\tprecedence constraint sumWeights",
    "package 'Vehicle' {\n\tattribute def Mass;\n\tport def MassPort {\n\t\tout mass: Mass;\n\t}\n\tpart context {\n\t\tpart chassis {\n\t\t\tport massPort: MassPort;\n\t\t\tperform verifyMass {\n\t\t\t\tin mass = massPort.mass;\n\t\t\t}\n\t\t}\n\t\tpart engine {\n\t\t\tport massPort: MassPort;\n\t\t\tperform verifyMass {\n\t\t\t\tin mass = massPort.mass;\n\t\t\t}\n\t\t}\n\t\tpart transmission {\n\t\t\tport massPort: MassPort;\n\t\t\tperform verifyMass {\n\t\t\t\tin mass = massPort.mass;\n\t\t\t}\n\t\t}\n\t}\n\taction verifyMass {\n\t\tin mass: Mass;\n\t\tconstraint totalMass <= 2500;\n\t\tconstraint mass > 0;\n\t\tconstraint force / time = changeInVelocity;\n\t}\n}",
    "package 'VehicleMaintenance' {\n\tattribute def VehicleID;\n\tattribute def NextMaintenanceTime;\n\tattribute def MaintenanceInterval;\n\tattribute def MaxAllowedTemp;\n\tattribute def LastMaintenanceTime;\n\tattribute def HealthyStateDuration;\n\tattribute def MaintenanceDuration;\n\tattribute def MaintenanceStartTime;\n\tattribute def MaintenanceEndTime;\n\tattribute def MaintenanceIntervalPostponed;\n\tattribute def HealthyState;\n\tport def VehicleIDPort {\n\t\tout vehicleID: VehicleID;\n\t}\n\tport def NextMaintenanceTimePort {\n\t\tout nextMaintenanceTime: NextMaintenanceTime;\n\t}\n\tport def MaintenanceIntervalPort {\n\t\tout maintenanceInterval: MaintenanceInterval;\n\t}\n\tport def MaxAllowedTempPort {\n\t\tout maxAllowedTemp: MaxAllowedTemp;\n\t}\n\tport def LastMaintenanceTimePort {\n\t\tout lastMaintenanceTime: LastMaintenanceTime;\n\t}\n\tport def HealthyStateDurationPort {\n\t\tout healthyStateDuration: HealthyStateDuration;\n\t}\n\tport def MaintenanceDurationPort {\n\t\tout maintenanceDuration: MaintenanceDuration;",
    "package 'Vehicle' {\n\tattribute def Mass;\n\tattribute def FuelMass;\n\tattribute def MaxMassLimit;\n\tattribute def SpeedCurve;\n\tport def MassPort {\n\t\tin mass: Mass;\n\t}\n\tport def FuelMassPort {\n\t\tin fuelMass: FuelMass;\n\t}\n\tport def MaxMassLimitPort {\n\t\tin maxMassLimit: MaxMassLimit;\n\t}\n\tport def SpeedCurvePort {\n\t\tin speedCurve: SpeedCurve;\n\t}\n\tpart context {\n\t\tpart engine {\n\t\t\tport massPort: MassPort;\n\t\t\tport fuelMassPort: FuelMassPort;\n\t\t\tport maxMassLimitPort: MaxMassLimitPort;\n\t\t\tport speedCurvePort: SpeedCurvePort;\n\t\t\tperform generateTorque.generate {\n\t\t\t\tin mass = massPort.mass;\n\t\t\t\tin fuelMass = fuelMassPort.fuelMass;\n\t\t\t\tin maxMassLimit = maxMassLimitPort.maxMassLimit;\n\t\t\t\tin speedCurve = speedCurvePort.speedCurve;\n\t\t\t\tout torque: Torque;\n\t\t\t}\n\t\t\tport torquePort: TorquePort;\n\t\t",
    "package 'Vehicle' {\n\tattribute def FuelMass;\n\tattribute def DryMass;\n\tattribute def Torque;\n\tattribute def Speed;\n\tattribute def ClutchInterface;\n\tport def FuelMassPort {\n\t\tin fuelMass: FuelMass;\n\t}\n\tport def DryMassPort {\n\t\tin dryMass: DryMass;\n\t}\n\tport def TorquePort {\n\t\tin torque: Torque;\n\t}\n\tport def SpeedPort {\n\t\tin speed: Speed;\n\t}\n\tport def ClutchInterfacePort {\n\t\tin clutchInterface: ClutchInterface;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport fuelMassPort: FuelMassPort;\n\t\t\tport dryMassPort: DryMassPort;\n\t\t\tport torquePort: TorquePort;\n\t\t\tport speedPort: SpeedPort;\n\t\t\tport clutchInterfacePort: ClutchInterfacePort;\n\t\t\tperform massControl.regulateMass {\n\t\t\t\tin fuelMass = fuelMassPort.fuelMass",
    "package 'Vehicle' {\n\tattribute def TotalMass;\n\tattribute def EnginePower;\n\tattribute def ClutchInterface;\n\tattribute def TorqueCurve;\n\tport def ClutchInterfacePort {\n\t\tin clutchInterface: ClutchInterface;\n\t}\n\tport def EnginePowerPort {\n\t\tin enginePower: EnginePower;\n\t}\n\tport def TotalMassPort {\n\t\tin totalMass: TotalMass;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport clutchInterfacePort: ClutchInterfacePort;\n\t\t\tport enginePowerPort: EnginePowerPort;\n\t\t\tport totalMassPort: TotalMassPort;\n\t\t\tperform checkTotalMass.check {\n\t\t\t\tin totalMass = totalMassPort.totalMass;\n\t\t\t}\n\t\t\tperform checkEnginePower.check {\n\t\t\t\tin enginePower = enginePowerPort.enginePower;\n\t\t\t}\n\t\t\tperform checkClutchInterface.check {\n\t\t\t\tin clutchInterface = clutchInterfacePort.clutchInterface;\n\t\t\t}\n\t\t}\n\t\tpart engine {\n\t\t\tperform generateTorque.generate {\n\t\t\t\tin speed = vehicle.speed;\n\t\t\t\tout torque = transmissionSystem",
    "package 'Vehicle' {\n\tattribute def Mass;\n\tattribute def FuelLevel;\n\tattribute def Torque;\n\tattribute def Speed;\n\tport def MassPort {\n\t\tin mass: Mass;\n\t}\n\tport def FuelLevelPort {\n\t\tin fuelLevel: FuelLevel;\n\t}\n\tport def TorquePort {\n\t\tin torque: Torque;\n\t}\n\tport def SpeedPort {\n\t\tin speed: Speed;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport massPort: MassPort;\n\t\t\tport fuelLevelPort: FuelLevelPort;\n\t\t\tport torquePort: TorquePort;\n\t\t\tport speedPort: SpeedPort;\n\t\t\tperform massControl.checkMass {\n\t\t\t\tin mass = massPort.mass;\n\t\t\t\tin fuelLevel = fuelLevelPort.fuelLevel;\n\t\t\t\tin torque = torquePort.torque;\n\t\t\t\tin speed = speedPort.speed;\n\t\t\t}\n\t\t}\n\t\tpart massControl {\n\t\t\taction checkMass {\n\t\t\t\tin mass: Mass;\n\t\t\t\tin fuelLevel:",
    "package 'DynamicPerformanceAnalyzer' {\n\tattribute def VehicleAttributes;\n\tattribute def DrivingCycle;\n\tattribute def EnergyConsumptionTarget;\n\tport def VehicleAttributesPort {\n\t\tout vehicleAttributes: VehicleAttributes;\n\t}\n\tport def DrivingCyclePort {\n\t\tout drivingCycle: DrivingCycle;\n\t}\n\tport def EnergyConsumptionTargetPort {\n\t\tout energyConsumptionTarget: EnergyConsumptionTarget;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport vehicleAttributesPort: VehicleAttributesPort;\n\t\t\tport drivingCyclePort: DrivingCyclePort;\n\t\t\tport energyConsumptionTargetPort: EnergyConsumptionTargetPort;\n\t\t\tperform analyzeDynamicPerformance.analyze {\n\t\t\t\tin vehicleAttributes = vehicleAttributesPort.vehicleAttributes;\n\t\t\t\tin driving",
    "package 'FuelEconomy' {\n\tattribute def UrbanDrivingScenario;\n\tattribute def HighwayDrivingScenario;\n\tattribute def VehicleParameters;\n\tattribute def DrivingTrajectory;\n\tattribute def SpeedVariation;\n\tattribute def RequiredWheelPower;\n\tattribute def Acceleration;\n\tattribute def EnergyConsumption;\n\tattribute def EnginePowerDemand;\n\tattribute def FuelConsumption;\n\tattribute def FuelEconomy;\n\tport def UrbanDrivingScenarioPort {\n\t\tout urbanDrivingScenario : UrbanDrivingScenario;\n\t}\n\tport def HighwayDrivingScenarioPort {\n\t\tout highwayDrivingScenario : HighwayDrivingScenario;\n\t}\n\tport def VehicleParametersPort {\n\t\tout vehicleParameters : VehicleParameters;\n\t}\n\tport def DrivingTrajectoryPort {\n\t\tout drivingTrajectory : DrivingTrajectory;\n\t}\n\tport def SpeedVariationPort {\n\t\tout speedVariation : SpeedVariation;\n\t}\n\tport def RequiredWheelPowerPort {\n\t\tout requiredWheelPower :",
    "package 'EngineSelectionSystem' {\n\tattribute def EngineType;\n\tattribute def Power;\n\tattribute def Mass;\n\tattribute def Efficiency;\n\tattribute def Cost;\n\tport def EngineTypePort {\n\t\tout engineType: EngineType;\n\t}\n\tport def PowerPort {\n\t\tout power: Power;\n\t}\n\tport def MassPort {\n\t\tout mass: Mass;\n\t}\n\tport def EfficiencyPort {\n\t\tout efficiency: Efficiency;\n\t}\n\tport def CostPort {\n\t\tout cost: Cost;\n\t}\n\tpart context {\n\t\tpart engineSelection {\n\t\t\tport engineTypePort: EngineTypePort;\n\t\t\tport powerPort: PowerPort;\n\t\t\tport massPort: MassPort;\n\t\t\tport efficiencyPort: EfficiencyPort;\n\t\t\tport costPort: CostPort;\n\t\t\tperform aggregateAndCalculateKPIs.aggregateAndCalculateKPIs {\n\t\t\t\tin engineType = engineTypePort.engineType;\n\t\t\t\tin power = powerPort.power;\n\t\t\t\tin mass = massPort.mass;\n\t\t\t\tin efficiency = efficiencyPort.efficiency;\n\t\t\t\tin cost = costPort",
    "package 'VehicleQualitySystem' {\n\tattribute def CurbWeight;\n\tattribute def QualifiedEvaluationResult;\n\tport def CurbWeightPort {\n\t\tin curbWeight: CurbWeight;\n\t}\n\tport def QualifiedEvaluationResultPort {\n\t\tout qualifiedEvaluationResult: QualifiedEvaluationResult;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport curbWeightPort: CurbWeightPort;\n\t\t\tperform checkCurbWeight.checkCurbWeight {\n\t\t\t\tin curbWeight = curbWeightPort.curbWeight;\n\t\t\t\tout qualifiedEvaluationResult = qualifiedEvaluationResultPort.qualifiedEvaluationResult;\n\t\t\t}\n\t\t}\n\t\tinterface vehicleToQualitySystem connect vehicle.curbWeightPort to qualitySystem.curbWeightPort {\n\t\t\tref flow references checkCurbWeight.curbWeightFlow\n\t\t\t\tfrom source.curbWeight to target.curbWeight; \n\t\t}\n\t\tpart qualitySystem {\n\t\t\tport curbWeightPort: ~CurbWeightPort;\n\t\t\tperform checkCurbWeight.processCurbWeightData {\n\t\t\t\tin curbWeight = curbWeightPort.curbWeight;\n\t\t\t\tout qualifiedEvaluation",
    "package 'MassVerificationSystem' {\n\tattribute def Mass;\n\tattribute def Qualified;\n\tport def MassPort {\n\t\tout mass: Mass;\n\t}\n\tport def QualifiedPort {\n\t\tout qualified: Qualified;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport massPort: MassPort;\n\t\t\tperform massVerification.verifyMass {\n\t\t\t\tin mass = massPort.mass;\n\t\t\t\tout qualified = qualifiedPort.qualified;\n\t\t\t}\n\t\t}\n\t\tpart massVerificationUnit {\n\t\t\tport massPort: ~MassPort;\n\t\t\tperform massVerification.measureMass {\n\t\t\t\tout mass = massPort.mass;\n\t\t\t}\n\t\t\tport qualifiedPort: QualifiedPort;\n\t\t}\n\t}\n\taction massVerification {\n\t\taction verifyMass { in mass: Mass; out qualified: Qualified; }\n\t\tsuccession flow massVerificationFlow from verifyMass.qualified to measureMass.mass;\n\t\taction measureMass { out mass: Mass; }\n\t}\n}",
    "package 'TransportationSystem' {\n\tattribute def Vehicle;\n\tattribute def Driver;\n\tattribute def Passenger;\n\tattribute def StartPoint;\n\tattribute def Destination;\n\tattribute def SurroundingEnvironment;\n\tattribute def Safety;\n\tattribute def Sustainability;\n\tattribute def Conveniences;\n\tattribute def RideExperience;\n\tattribute def DailyTransportationTasks;\n\tport def VehiclePort {\n\t\tout vehicle: Vehicle;\n\t}\n\tport def DriverPort {\n\t\tout driver: Driver;\n\t}\n\tport def PassengerPort {\n\t\tout passenger: Passenger;\n\t}\n\tport def StartPointPort {\n\t\tout startPoint: StartPoint;\n\t}\n\tport def DestinationPort {\n\t\tout destination: Destination;\n\t}\n\tport def SurroundingEnvironmentPort {\n\t\tout surroundingEnvironment: SurroundingEnvironment;\n\t}\n\tport def SafetyPort {\n\t\tout safety: Safety;\n\t}\n\tport def SustainabilityPort {\n\t\tout sustainability: Sustainability;\n\t}\n\tport def ConveniencesPort {\n\t",
    "package 'Transportation' {\n\tattribute def Driver;\n\tattribute def Passenger;\n\tattribute def GasStation;\n\tattribute def Destination;\n\tport def DriverPort {\n\t\tin driver: Driver;\n\t}\n\tport def PassengerPort {\n\t\tin passenger: Passenger;\n\t}\n\tport def GasStationPort {\n\t\tin gasStation: GasStation;\n\t}\n\tport def DestinationPort {\n\t\tin destination: Destination;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport driverPort: DriverPort;\n\t\t\tport passengerPort: PassengerPort;\n\t\t\tport gasStationPort: GasStationPort;\n\t\t\tport destinationPort: DestinationPort;\n\t\t\tperform transportation.startTransportation {\n\t\t\t\tin driver = driverPort.driver;\n\t\t\t\tin passenger = passengerPort.passenger;\n\t\t\t\tin gasStation = gasStationPort.gasStation;\n\t\t\t\tin destination = destinationPort.destination;\n\t\t\t}\n\t\t}\n\t\tpart transportation {\n\t\t\tperform transportation.initiateTransportation {\n\t\t\t\tout driver = driverPort.driver;\n\t\t\t\tout passenger = pass",
    "package 'VehicleConfigurationManagement' {\n\tattribute def EngineType;\n\tattribute def TransmissionType;\n\tattribute def CylinderType;\n\tattribute def CylinderDiameter;\n\tport def EngineTypePort {\n\t\tout engineType: EngineType;\n\t}\n\tport def TransmissionTypePort {\n\t\tout transmissionType: TransmissionType;\n\t}\n\tport def CylinderTypePort {\n\t\tout cylinderType: CylinderType;\n\t}\n\tport def CylinderDiameterPort {\n\t\tout cylinderDiameter: CylinderDiameter;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport engineTypePort: EngineTypePort;\n\t\t\tport transmissionTypePort: TransmissionTypePort;\n\t\t\tport cylinderTypePort: CylinderTypePort;\n\t\t\tport cylinderDiameterPort: CylinderDiameterPort;\n\t\t\tperform createVehicle.createVehicle {\n\t\t\t\tin engineType = engineTypePort.engineType",
    "package 'ConfigurableEngine' {\n\tattribute def CylinderQuantity;\n\tattribute def CylinderDiameter;\n\tport def CylinderQuantityPort {\n\t\tout cylinderQuantity: CylinderQuantity;\n\t}\n\tport def CylinderDiameterPort {\n\t\tout cylinderDiameter: CylinderDiameter;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport cylinderQuantityPort: CylinderQuantityPort;\n\t\t\tport cylinderDiameterPort: CylinderDiameterPort;\n\t\t\tperform selectEngineVariant.selectVariant {\n\t\t\t\tin cylinderQuantity = cylinderQuantityPort.cylinderQuantity;\n\t\t\t\tin cylinderDiameter = cylinderDiameterPort.cylinderDiameter;\n\t\t\t}\n\t\t}\n\t\tinterface userToEngine connect user.cylinderQuantityPort to engine.cylinderQuantityPort {\n\t\t\tref flow references selectEngineVariant.cylinderQuantityFlow\n\t\t\t\tfrom source.cylinderQuantity to target.cylinderQuantity; \n\t\t}\n\t\tinterface userToEngine connect user.cylinderDiameterPort to engine.cylinderDiameterPort {\n\t\t\tref flow references selectEngineVariant.cylinderDiameterFlow\n\t\t\t\tfrom source.cy",
    "package 'ConfigurationSpace' {\n\tattribute def EngineType;\n\tattribute def TransmissionType;\n\tattribute def CylinderDiameter;\n\tport def EngineTypePort {\n\t\tout engineType: EngineType;\n\t}\n\tport def TransmissionTypePort {\n\t\tout transmissionType: TransmissionType;\n\t}\n\tport def CylinderDiameterPort {\n\t\tout cylinderDiameter: CylinderDiameter;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport engineTypePort: EngineTypePort;\n\t\t\tport transmissionTypePort: TransmissionTypePort;\n\t\t\tport cylinderDiameterPort: CylinderDiameterPort;\n\t\t\tconstraint engineTypePort.engineType = transmissionTypePort.transmissionType;\n\t\t\tconstraint engineTypePort.engineType = 4 if transmissionTypePort.transmissionType = 'manual' else 6;\n\t\t\tconstraint cylinderDiameterPort.cylinderDiameter = 70 if engineTypePort.engineType = 4 else 100;",
    "package 'SystemAssembly' {\n\tpart computerSubsystem {\n\t\tpart softwareDesign {\n\t\t\tattribute def messageFormat;\n\t\t\tattribute def dataFormat;\n\t\t\tport def messageFormatPort {\n\t\t\t\tout messageFormat: messageFormat;\n\t\t\t}\n\t\t\tport def dataFormatPort {\n\t\t\t\tout dataFormat: dataFormat;\n\t\t\t}\n\t\t\tpart software {\n\t\t\t\tport messageFormatPort: messageFormatPort;\n\t\t\t\tport dataFormatPort: dataFormatPort;\n\t\t\t}\n\t\t}\n\t\tpart hardwareDesign {\n\t\t\tpart computer {\n\t\t\t\tport messageFormatPort: ~messageFormatPort;\n\t\t\t\tport dataFormatPort: ~dataFormatPort;\n\t\t\t}\n\t\t}\n\t}\n\tpart storageSubsystem {\n\t\tpart softwareDesign {\n\t\t\tattribute def messageFormat;\n\t\t\tattribute def dataFormat;\n\t\t\tport def messageFormatPort {\n\t\t\t\tout messageFormat: messageFormat;\n\t\t\t}\n\t\t\tport def dataFormatPort {\n\t\t\t\tout dataFormat: dataFormat;\n\t\t\t}\n\t\t\tpart software {\n\t\t\t\tport messageFormatPort: messageFormatPort;\n\t\t\t\tport dataFormatPort: dataFormatPort;\n\t\t\t}\n\t\t}\n\t\tpart hardwareDesign {\n\t\t\t",
    "package 'PowertrainSystem' {\n\tattribute def Power;\n\tattribute def Torque;\n\tport def PowerPort {\n\t\tout power: Power;\n\t}\n\tport def TorquePort {\n\t\tout torque: Torque;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport powerPort: PowerPort;\n\t\t\tport torquePort: TorquePort;\n\t\t\tperform torqueGenerator.generateTorque {\n\t\t\t\tin power = powerPort.power;\n\t\t\t\tout torque = torquePort.torque;\n\t\t\t}\n\t\t}\n\t\tinterface userToTorqueGenerator connect user.powerPort to torqueGenerator.powerPort {\n\t\t\tref flow references torqueGenerator.powerFlow\n\t\t\t\tfrom source.power to target.power; \n\t\t}\n\t\tinterface userToPowerUnit connect user.torquePort to powerUnit.torquePort {\n\t\t\tref flow references powerUnit.torqueFlow\n\t\t\t\tfrom source.torque to target.torque; \n\t\t}\n\t\tpart torqueGenerator {\n\t\t\tport",
    "package 'Powertrain' {\n\tattribute def Power;\n\tattribute def Torque;\n\tport def PowerPort {\n\t\tout power: Power;\n\t}\n\tport def TorquePort {\n\t\tout torque: Torque;\n\t}\n\tpart context {\n\t\tpart powertrain {\n\t\t\tport powerPort: PowerPort;\n\t\t\tport torquePort: TorquePort;\n\t\t\tpart engine {\n\t\t\t\tperform generateTorque {\n\t\t\t\t\tin power = powerPort.power;\n\t\t\t\t\tout torque = torquePort.torque;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\taction generateTorque {\n\t\tin power: Power;\n\t\tout torque: Torque;\n\t}\n}",
    "package 'VehicleFeatureAnnotationSystem' {\n\tattribute def VehicleModel;\n\tattribute def InteriorAssembly;\n\tattribute def BodyAssembly;\n\tattribute def SeatBelt;\n\tattribute def FrontSeat;\n\tattribute def DriverAirbag;\n\tattribute def AlarmSystem;\n\tattribute def BodyShell;\n\tattribute def Bumper;\n\tattribute def KeylessEntryDevice;\n\tattribute def SafetyFunctionInterior;\n\tattribute def SafetyFunctionBody;\n\tattribute def ProtectionFunctionInterior;\n\tattribute def ProtectionFunctionBody;\n\tport def VehicleModelPort {\n\t\tout vehicleModel: VehicleModel;\n\t}\n\tport def InteriorAssemblyPort {\n\t\tout interiorAssembly: InteriorAssembly;\n\t}\n\tport def BodyAssemblyPort {\n\t\tout bodyAssembly: BodyAssembly;\n\t}\n\tport def SeatBeltPort {\n\t\tout seatBelt: SeatBelt;\n\t}\n\tport def FrontSeatPort {\n\t\tout frontSeat: FrontSeat;\n\t}\n\tport",
    "package 'VehicleDynamics' {\n\tattribute def Velocity;\n\tattribute def Position;\n\tattribute def Acceleration;\n\tattribute def TimeStep;\n\tport def VelocityPort {\n\t\tin velocity: Velocity;\n\t}\n\tport def PositionPort {\n\t\tin position: Position;\n\t}\n\tport def AccelerationPort {\n\t\tin acceleration: Acceleration;\n\t}\n\tport def TimeStepPort {\n\t\tin timeStep: TimeStep;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport velocityPort: VelocityPort;\n\t\t\tport positionPort: PositionPort;\n\t\t\tport accelerationPort: AccelerationPort;\n\t\t\tport timeStepPort: TimeStepPort;\n\t\t\tperform simulateVehicleDynamics.simulate {\n\t\t\t\tin velocity = velocityPort.velocity;\n\t\t\t\tin position = positionPort.position;\n\t\t\t\tin acceleration = accelerationPort.acceleration;\n\t\t\t\tin timeStep = timeStepPort.timeStep;\n\t\t\t\tout velocity = velocityPort.velocity;\n\t\t\t\tout position = positionPort.position;\n\t\t\t}\n\t\t}\n\t\tinterface userToModelCenter connect user.velocityPort to modelCenter.velocityPort {\n\t\t",
    "package 'CarSafety' {\n\tattribute def Safety;\n\tattribute def isMandatory;\n\tport def SafetyFeaturesPort {\n\t\tout safetyFeatures : Safety;\n\t}\n\tport def MandatorySafetyFeaturesPort {\n\t\tout mandatorySafetyFeatures : Safety;\n\t}\n\tpart context {\n\t\tpart safetyFeatures {\n\t\t\tport safetyFeaturesPort: SafetyFeaturesPort;\n\t\t\tperform safetyFeatures.recordSafetyFeature {\n\t\t\t\tin safetyFeature = safetyFeaturesPort.safetyFeatures;\n\t\t\t}\n\t\t}\n\t\tpart mandatorySafetyFeatures {\n\t\t\tport mandatorySafetyFeaturesPort: MandatorySafetyFeaturesPort;\n\t\t\tperform mandatorySafetyFeatures.recordSafetyFeature {\n\t\t\t\tin safetyFeature = mandatorySafetyFeaturesPort.mandatorySafetyFeatures;\n\t\t\t}\n\t\t}\n\t\tpart car {\n\t\t\tpart body {\n\t\t\t\tpart bumper {\n\t\t\t\t\tattribute def isMandatory;\n\t\t\t\t\tperform bumper",
    "package 'VehicleSafetyComplianceSystem' {\n\tattribute def MandatorySafetyFeature;\n\tattribute def OptionalSafetyFeature;\n\tattribute def NonMandatorySafetyFeature;\n\tattribute def RequiredSafetyFeature;\n\tattribute def SeatBelt;\n\tattribute def DriverAirbag;\n\tattribute def Bumper;\n\tattribute def KeylessEntrySystem;\n\tattribute def Tire;\n\tattribute def ABS;\n\tport def SeatBeltPort {\n\t\tout seatBelt : SeatBelt;\n\t}\n\tport def DriverAirbagPort {\n\t\tout driverAirbag : DriverAirbag;\n\t}\n\tport def BumperPort {\n\t\tout bumper : Bumper;\n\t}\n\tport def KeylessEntrySystemPort {\n\t\tout keylessEntrySystem : KeylessEntrySystem;\n\t}\n\tport def TirePort {\n\t\tout tire : Tire;\n\t}\n\tport def ABSPort {\n\t\tout abs : ABS;\n\t}\n\tpart context {\n\t",
    "package 'RiskManagement' {\n\tattribute def Risk;\n\tattribute def Cause;\n\tattribute def Probability;\n\tattribute def Severity;\n\tport def RiskPort {\n\t\tout risk: Risk;\n\t}\n\tport def CausePort {\n\t\tout cause: Cause;\n\t}\n\tport def ProbabilityPort {\n\t\tout probability: Probability;\n\t}\n\tport def SeverityPort {\n\t\tout severity: Severity;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport riskPort: RiskPort;\n\t\t\tport causePort: CausePort;\n\t\t\tport probabilityPort: ProbabilityPort;\n\t\t\tport severityPort: SeverityPort;\n\t\t\tperform riskAssessment.recordRisk {\n\t\t\t\tin risk = riskPort.risk;\n\t\t\t\tin cause = causePort.cause;\n\t\t\t\tin probability = probabilityPort.probability;\n\t\t\t\tin severity = severityPort.severity;\n\t\t\t}\n\t\t}\n\t\tinterface userToRiskAssessment connect user.riskPort to riskAssessment.riskPort {\n\t\t\tref flow references riskAssessment.riskFlow\n\t\t\t\tfrom source.risk to target.risk; \n\t\t}\n\t\tinterface userToCause",
    "package 'RiskModelingSystem' {\n\tattribute def Scenario;\n\tattribute def Cause;\n\tattribute def Probability;\n\tattribute def FailureType;\n\tattribute def Severity;\n\tattribute def CausalRelationship;\n\tport def ScenarioPort {\n\t\tout scenario: Scenario;\n\t}\n\tport def CausePort {\n\t\tout cause: Cause;\n\t}\n\tport def ProbabilityPort {\n\t\tout probability: Probability;\n\t}\n\tport def FailureTypePort {\n\t\tout failureType: FailureType;\n\t}\n\tport def SeverityPort {\n\t\tout severity: Severity;\n\t}\n\tport def CausalRelationshipPort {\n\t\tout causalRelationship: CausalRelationship;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport scenarioPort: ScenarioPort;\n\t\t\tport causePort: CausePort;\n\t\t\tport probabilityPort: ProbabilityPort;\n\t\t\tport failureTypePort: FailureTypePort;\n\t\t\tport severityPort: SeverityPort;\n\t\t\tport causalRelationshipPort: CausalRelationshipPort;\n\t\t\tperform scenarioIdentification.identifyScenario {\n\t\t\t\tin scenario",
    "package 'BatteryRiskAnalyzer' {\n\tattribute def BatteryLevel;\n\tattribute def BatteryFailureRisk;\n\tattribute def BatteryLowLevel;\n\tattribute def BatteryLowLevelDuration;\n\tattribute def BatteryLowLevelRisk;\n\tattribute def DeviceShutdown;\n\tattribute def DeviceFailureRisk;\n\tattribute def DeviceFailureSeverity;\n\tport def BatteryLevelPort {\n\t\tin batteryLevel : BatteryLevel;\n\t}\n\tport def BatteryFailureRiskPort {\n\t\tout batteryFailureRisk : BatteryFailureRisk;\n\t}\n\tport def BatteryLowLevelPort {\n\t\tout batteryLowLevel : BatteryLowLevel;\n\t}\n\tport def BatteryLowLevelDurationPort {\n\t\tout batteryLowLevelDuration : BatteryLowLevelDuration;\n\t}\n\tport def BatteryLowLevelRiskPort {\n\t\tout batteryLowLevelRisk :",
    "package 'System' {\n\tattribute def HierarchicalStructure;\n\tattribute def Interfaces;\n\tattribute def IndependentVerification;\n\tport def HierarchicalStructurePort {\n\t\tout hierarchicalStructure: HierarchicalStructure;\n\t}\n\tport def InterfacesPort {\n\t\tout interfaces: Interfaces;\n\t}\n\tpart context {\n\t\tpart subsystem1 {\n\t\t\tport hierarchicalStructurePort: ~HierarchicalStructurePort;\n\t\t\tperform decomposition.decomposeSubsystem {\n\t\t\t\tin hierarchicalStructure = hierarchicalStructurePort.hierarchicalStructure;\n\t\t\t}\n\t\t\tpart component1 {\n\t\t\t\tport interfacesPort: ~InterfacesPort;\n\t\t\t\tperform decomposition.decomposeComponent {\n\t\t\t\t\tin interfaces = interfacesPort.interfaces;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpart component2 {\n\t\t\t\tport interfacesPort: ~InterfacesPort;\n\t\t\t\tperform decomposition.decomposeComponent {\n\t\t\t\t\tin interfaces = interfacesPort.interfaces;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpart subsystem2 {\n\t\t\tport hierarchicalStructurePort: ~HierarchicalStructurePort;\n\t\t\tperform decomposition.decomposeSubsystem {\n\t\t\t\tin hierarchicalStructure = hierarchicalStructurePort.hierarchicalStructure;\n\t\t\t}\n\t\t\tpart component3 {\n\t\t\t\t",
    "package 'SystemArchitecture' {\n\tattribute def Safety;\n\tattribute def Mandatory;\n\tattribute def Optional;\n\tattribute def NonSafety;\n\tport def SafetyPort {\n\t\tout safety: Safety;\n\t}\n\tport def NonSafetyPort {\n\t\tout nonSafety: NonSafety;\n\t}\n\tpart context {\n\t\tpart root {\n\t\t\tport safetyPort: SafetyPort;\n\t\t\tport nonSafetyPort: NonSafetyPort;\n\t\t\tpart subsystem1 {\n\t\t\t\tport safetyPort: ~SafetyPort;\n\t\t\t\tport nonSafetyPort: ~NonSafetyPort;\n\t\t\t\tpart component1 {\n\t\t\t\t\tport safetyPort: ~SafetyPort;\n\t\t\t\t\tport",
    "package 'Automotive' {\n\tattribute def Car;\n\tattribute def Torque;\n\tport def CarPort {\n\t\tout car: Car;\n\t}\n\tport def TorquePort {\n\t\tout torque: Torque;\n\t}\n\tpart context {\n\t\tpart car {\n\t\t\tport carPort: CarPort;\n\t\t\tperform engine.run {\n\t\t\t\tin torque = torquePort.torque;\n\t\t\t}\n\t\t}\n\t\tpart engine {\n\t\t\tport torquePort: TorquePort;\n\t\t\tperform torqueConverter.convertTorque {\n\t\t\t\tin torque = torquePort.torque;\n\t\t\t}\n\t\t\tperform transmission.transferTorque {\n\t\t\t\tin torque = torqueConverter.outputTorque;\n\t\t\t}\n\t\t\tperform brake.applyTorque {\n\t\t\t\tin torque = torqueConverter.outputTorque;\n\t\t\t}\n\t\t\tperform wheel.applyTorque {\n\t\t\t\tin torque = torqueConverter.outputTorque;\n\t\t\t}\n\t\t}\n\t\tpart torqueConverter {\n\t\t\tport torquePort: ~TorquePort;\n\t\t\tperform torqueConverter.convertTorque {",
    "package 'DocumentManagementPlatform' {\n\tattribute def Automobile;\n\tattribute def Car;\n\tattribute def ISQ;\n\tattribute def TorqueValue;\n\tport def AutomobilePort {\n\t\tout automobile: Automobile;\n\t}\n\tport def CarPort {\n\t\tout car: Car;\n\t}\n\tport def ISQPort {\n\t\tout isq: ISQ;\n\t}\n\tport def TorqueValuePort {\n\t\tout torqueValue: TorqueValue;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport automobilePort: AutomobilePort;\n\t\t\tport carPort: CarPort;\n\t\t\tport isqPort: ISQPort;\n\t\t\tport torqueValuePort: TorqueValuePort;\n\t\t\tperform searchAndRetrieve.searchAndRetrieve {\n\t\t\t\tin automobile = automobilePort.automobile;\n\t\t\t\tin car = carPort.car;\n\t\t\t\tin isq = isqPort.isq;\n\t\t\t\tin torqueValue",
    "package 'Automobile' {\n\tattribute def TorqueValue;\n\tattribute def Torque;\n\tattribute def Automobile;\n\tport def TorqueValuePort {\n\t\tout torqueValue: TorqueValue;\n\t}\n\tport def TorquePort {\n\t\tout torque: Torque;\n\t}\n\tport def AutomobilePort {\n\t\tout automobile: Automobile;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport torqueValuePort: TorqueValuePort;\n\t\t\tport torquePort: TorquePort;\n\t\t\tport automobilePort: AutomobilePort;\n\t\t\tperform manageAutomobileData.importTorqueValue {\n\t\t\t\tin torqueValue = torqueValuePort.torqueValue;\n\t\t\t}\n\t\t\tperform manageAutomobileData.importTorque {\n\t\t\t\tin torque = torquePort.torque;\n\t\t\t}\n\t\t\tperform manageAutomobileData.importAutomobile {\n\t\t\t\tin automobile = automobilePort.automobile;\n\t\t\t}\n\t\t}\n\t\tinterface userToManageAutomobileData connect user.torqueValuePort to manageAutomobileData.torqueValuePort {\n\t\t\t",
    "package 'Vehicle' {\n\tattribute def EngineSize;\n\tattribute def EngineCylinders;\n\tport def EngineSizePort {\n\t\tout engineSize : EngineSize;\n\t}\n\tport def EngineCylindersPort {\n\t\tout engineCylinders : EngineCylinders;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport engineSizePort: EngineSizePort;\n\t\t\tport engineCylindersPort: EngineCylindersPort;\n\t\t\tperform configureEngine.selectCylinders {\n\t\t\t\tin engineSize = engineSizePort.engineSize;\n\t\t\t\tout engineCylinders = engineCylindersPort.engineCylinders;\n\t\t\t}\n\t\t}\n\t\tinterface userToEngine connect user.engineSizePort to engine.engineSizePort {\n\t\t\tref flow references configureEngine.engineSizeFlow\n\t\t\t\tfrom source.engineSize to target.engineSize; \n\t\t}\n\t\tinterface userToEngine connect user.engineCylindersPort to engine.engineCylindersPort {\n\t\t\tref flow references configureEngine.engineCylindersFlow\n\t\t\t\tfrom source.engineCylinders to target.engineCylinders; \n\t\t}\n\t\t",
    "package 'FuelSystem' {\n\tattribute def FuelLevel;\n\tattribute def FuelTemperature;\n\tattribute def FuelSupply;\n\tattribute def FuelReturn;\n\tport def FuelLevelPort {\n\t\tin fuelLevel : FuelLevel;\n\t}\n\tport def FuelTemperaturePort {\n\t\tin fuelTemperature : FuelTemperature;\n\t}\n\tport def FuelSupplyPort {\n\t\tout fuelSupply : FuelSupply;\n\t}\n\tport def FuelReturnPort {\n\t\tin fuelReturn : FuelReturn;\n\t}\n\tpart context {\n\t\tpart fuelTank {\n\t\t\tport fuelLevelPort: FuelLevelPort;\n\t\t\tport fuelTemperaturePort: FuelTemperaturePort;\n\t\t\tperform fuelSupply.supplyFuel {\n\t\t\t\tin fuelLevel = fuelLevelPort.fuelLevel;\n\t\t\t\tout fuelSupply = fuelSupplyPort.fuelSupply;\n\t\t\t}\n\t\t\tperform fuelReturn.returnFuel {\n\t\t\t\tin fuelReturn = fuelReturnPort.fuelReturn;\n\t\t\t}\n\t\t}\n\t\tpart engine {\n\t\t\tport fuelSupplyPort: FuelSupplyPort;\n\t\t\tperform fuelSupply.supplyFuel {\n\t\t\t\tin",
    "package 'VehicleStructuralArchitecture' {\n\tattribute def Mass;\n\tattribute def AxleType;\n\tattribute def WheelType;\n\tattribute def SteeringAngle;\n\tport def MassPort {\n\t\tout mass: Mass;\n\t}\n\tport def AxleTypePort {\n\t\tout axleType: AxleType;\n\t}\n\tport def WheelTypePort {\n\t\tout wheelType: WheelType;\n\t}\n\tport def SteeringAnglePort {\n\t\tout steeringAngle: SteeringAngle;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport massPort: MassPort;\n\t\t\tperform defineVehicle.setVehicleMass {\n\t\t\t\tin mass = massPort.mass;\n\t\t\t}\n\t\t\tpart frontAxle {\n\t\t\t\tport axleTypePort: AxleTypePort;\n\t\t\t\tperform defineAxle.setAxleType {\n\t\t\t\t\tin axleType = axleTypePort.ax"
]