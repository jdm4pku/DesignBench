[
    "Vehicle:\n  - mass: Real\n  - status: VehicleStatus\n  - engine: Engine\n  - driver: Driver\n\nVehicleStatus:\n  - gear: Integer\n  - accelerator: Real\n\nEngine:\n  - type: String\n  - fuel: FuelType\n  - capacity: Real\n  - efficiency: Real\n\nDriver:\n  - name: String\n  - age: Integer\n  - address: String\n  - phone: String\n\nFuelType:\n  - type: String\n  - capacity: Real\n\nNote: The above model is a simplified version of the actual system requirements. The actual system may have additional attributes and relationships not shown in this simplified version.",
    "\nentity Vehicle {\n  category : Category;\n  driver : Personnel;\n  engine : Engine;\n}\n\nenum Category {\n  ManuallyOperated,\n  Powered,\n  ManuallyOperatedPowered\n}\n\nentity Personnel {\n  name : String;\n}\n\nentity Engine {\n  name : String;\n}\n\nAssociation:\nVehicle.driver -> Personnel\nVehicle.engine -> Engine\n\nNote: The above model is a simplified version of the actual system, and may not accurately reflect the requirements.",
    "VehicleStructure: Component {\r\n  name : String[1..1];\r\n  description : String[0..1];\r\n  quantity : Integer[1..1];\r\n}\r\n\r\nVehicleComponent: Component {\r\n  name : String[1..1];\r\n  description : String[0..1];\r\n}\r\n\r\nEngine: VehicleComponent {\r\n  type : String[1..1];\r\n  capacity : Real[1..1];\r\n}\r\n\r\nTransmission: VehicleComponent {\r\n  type : String[1..1];\r\n  gears : Integer[1..1];\r\n}\r\n\r\nWheel: VehicleComponent {\r\n  type : String[1..1];\r\n  diameter : Real[1..1];\r\n}\r\n\r\nVehicle: Component {\r\n  name : String[1..1];\r\n  description : String[0..1];\r\n  components : VehicleComponent[1..*];\r\n}\r\n\r\nVehicleStructure: Component {\r\n  name : String[1..1];\r\n  description : String[0..1];\r\n  components : VehicleComponent[1..*];\r\n}\r\n\r\nVehicleStructure.components = {\r\n  Engine {\r\n    name = \"Engine\";\r\n    type = \"Gasoline\";\r\n    capacity = 2000",
    "\nentity Vehicle {\n  attribute String type;\n  attribute String engineType;\n  attribute Integer cylinderCount;\n  attribute Boolean isLarge;\n  attribute Boolean isElectric;\n  attribute Boolean isHybrid;\n  attribute Boolean isPluggedIn;\n  attribute Boolean isRunning;\n  attribute Boolean isStuck;\n  attribute Boolean isDamaged;\n  attribute Boolean isAccident;\n  attribute Boolean isStolen;\n  attribute Boolean isSuspended;\n  attribute Boolean isTowed;\n  attribute Boolean isTowing;\n  attribute Boolean isTowedTo;\n  attribute Boolean isTowedFrom;\n  attribute Boolean isTowedWith;\n  attribute Boolean isTowedWithout;\n  attribute Boolean isTowedOn;\n  attribute Boolean isTowedOff;\n  attribute Boolean isTowedIn;\n  attribute Boolean isTowedOut;\n  attribute Boolean isTowedUp;\n  attribute Boolean isTowedDown;\n  attribute Boolean isTowedForward;\n  attribute Boolean isTowedBackward;\n  attribute Boolean isTowedLeft;\n  attribute Boolean isTowedRight;\n  attribute Boolean isTowedUpward;\n  attribute Boolean isTowedDownward;\n  attribute Boolean isTowedToward;\n  attribute Boolean isTowedAwayFrom;\n  attribute Boolean is",
    "\n\n```\npackage trafficSignalSystem\n\nabstract component TrafficSignal {\n  signal color : {green, yellow, red}\n}\n\ncomponent GreenTrafficSignal extends TrafficSignal {\n  color = green\n}\n\ncomponent TrafficLightSystem {\n  ownedTrafficSignal : set(TrafficSignal)\n}\n\n```",
    "The following is an OMG SysML v2 textual model for the information classification management mechanism based on the “traffic light” principle and grade classification:\r\n\r\n```\r\npackage informationClassification {\r\n  class InformationClassification {\r\n    information: String[1..*];\r\n    classification: String[1..*];\r\n    grade: Double[1..*];\r\n  }\r\n\r\n  InformationClassification informationClassification = InformationClassification(\r\n    information = [\"unclassified information\", \"confidential information\", \"secret information\"],\r\n    classification = [\"uncl\", \"conf\", \"secr\"],\r\n    grade = [4.0, 3.0, 2.0, 1.0, 0.0]\r\n  );\r\n\r\n  informationClassification.information[1].classification = \"uncl\";\r\n  informationClassification.information[2].classification = \"conf\";\r\n  informationClassification.information[3].classification = \"secr\";\r\n\r\n  informationClassification.information[1].grade = 4.0;\r\n  informationClassification.information[2].grade = 3.0;\r\n  informationClassification.information[3].grade = 2.0;\r\n}\r\n```\r\n\r\nIn this model, the `InformationClassification` class represents the information classification management mechanism.",
    "\nentity Vehicle {\n  attribute String type;\n  attribute Integer cylinders;\n  entity Engine {\n    attribute Integer cylinders;\n    entity Cylinder {\n      attribute Integer number;\n    }\n  }\n}\n\nentity Engine {\n  attribute Integer cylinders;\n  entity Cylinder {\n    attribute Integer number;\n  }\n}\n\nentity Cylinder {\n  attribute Integer number;\n}\n\nAssociation:\nVehicle.engine -> Engine\nEngine.cylinders -> Cylinder\nEngine.cylinders -> Cylinder\n\nNote: The cylinder entity is defined twice in the model, but this is allowed in SysML v2.",
    "\nVehicleModel:\n  - hasAttribute: QualityAttribute\n  - hasAttribute: DriverInformation\n  - hasAttribute: FuelTank\n  - hasAttribute: FuelType\n  - hasAttribute: FuelCapacity\n  - hasAttribute: Personnel\n  - hasAttribute: VehicleModelID\n  - hasAttribute: VehicleModelDescription\n  - hasAttribute: VehicleModelType\n  - hasAttribute: VehicleModelYear\n  - hasAttribute: VehicleModelMake\n  - hasAttribute: VehicleModelModel\n  - hasAttribute: VehicleModelVariant\n  - hasAttribute: VehicleModelEngine\n  - hasAttribute: VehicleModelEngineType\n  - hasAttribute: VehicleModelEngineDisplacement\n  - hasAttribute: VehicleModelEnginePower\n  - hasAttribute: VehicleModelEngineTorque\n  - hasAttribute: VehicleModelEngineCompressionRatio\n  - hasAttribute: VehicleModelEngineBore\n  - hasAttribute: VehicleModelEngineStroke\n  - hasAttribute: VehicleModelEngineFuelConsumption\n  - hasAttribute: VehicleModelEngineIgnitionSystem\n  - hasAttribute: VehicleModelEngineIgnitionSystemType\n  - hasAttribute: VehicleModelEngineIgnitionSystemPower\n  - hasAttribute: VehicleModelEngineIgnitionSystemControl\n  - hasAttribute: VehicleModelEngineIgnitionSystemControlType\n  - hasAttribute: Vehicle",
    "\n\n```\npackage AutomobileWheelAssemblyStructure {\n  component WheelBearingUnit {\n    property diameter : Real;\n    property width : Real;\n    property thickness : Real;\n    property material : String;\n  }\n\n  component Tire {\n    property diameter : Real;\n    property width : Real;\n    property thickness : Real;\n    property material : String;\n    property beadDiameter : Real;\n    property beadThickness : Real;\n    property beadMaterial : String;\n    property beadCount : Integer;\n    property rimDiameter : Real;\n    property rimThickness : Real;\n    property rimMaterial : String;\n    property hubDiameter : Real;\n    property hubThickness : Real;\n    property hubMaterial : String;\n    property boltMountingHoleDiameter : Real;\n    property boltMountingHoleCount : Integer;\n    property threadedHoleDiameter : Real;\n    property threadedHoleCount : Integer;\n    property boltConnectionCount : Integer;\n  }\n\n  component Bead {\n    property diameter : Real;\n    property thickness : Real;\n    property material : String;\n  }\n\n  component Rim {\n    property diameter : Real;\n    property thickness : Real;\n    property material : String;\n ",
    "The system is designed to achieve effective management of fuel flow. It consists of two main components: the fuel tank assembly and the engine. The fuel tank supplies fuel to the engine through a dedicated port, and can also receive excess fuel returned from the engine. The fuel transfer process is temperature-sensitive, and temperature information can be detected and transmitted at the interface to ensure the safety and efficiency of fuel supply. Users can obtain real-time data on fuel supply, return flow, and related temperature parameters, enabling visualized monitoring and precise control of fuel flow status. This effectively meets the engine's requirements for fuel management during operation.",
    "\n\n```\npackage VehicleConfigurationModel {\n  class Vehicle {\n    attribute mass : Real [0..∞] = 1750;\n    composition\n      frontAxle : FrontAxle;\n      rearAxle : RearAxle;\n  }\n  \n  class FrontAxle {\n    attribute mass : Real [0..∞] = 0;\n    composition\n      tire1 : Tire;\n      tire2 : Tire;\n  }\n  \n  class RearAxle {\n    attribute mass : Real [0..∞] = 0;\n    composition\n      tire1 : Tire;\n      tire2 : Tire;\n  }\n  \n  class Tire {\n    attribute mass : Real [0..∞] = 0;\n  }\n  \n  class VehicleConfiguration {\n    attribute name : String;\n    composition\n      vehicle : Vehicle;\n  }\n  \n  class VehicleConfigurationVariant extends VehicleConfiguration {\n    attribute mass : Real [0..∞] = 0;\n    attribute frontAxle : FrontAxle;\n    attribute rearAxle : RearAxle;\n    attribute tire1 : Tire;\n    attribute tire2 : Tire;\n  }\n}\n```",
    "The following is an OMG SysML v2 textual model for the coupling system between a vehicle and a trailer:\r\n\r\nVehicle:\r\n- has a hitch component that connects to the coupling mechanism\r\n- has a coupling mechanism that connects to the trailer\r\n\r\nTrailer:\r\n- has a hitch component that connects to the coupling mechanism\r\n- has a coupling mechanism that connects to the vehicle\r\n\r\nCoupling Mechanism:\r\n- is a connector that connects the vehicle and trailer\r\n\r\nHitch Component:\r\n- is a component that connects the vehicle and trailer to the coupling mechanism\r\n\r\nNote: The above model is a simplified version of the actual system, and does not include all the necessary details or constraints.",
    "The OMG SysML v2 textual model for the vehicle power transmission system is as follows:\r\n\r\n```\r\npackage powerSystemModel {\r\n  class Engine {\r\n    ownedAttribute powerCommand : PowerCommandPort;\r\n    ownedAttribute powerOutput : PowerOutputPort;\r\n    ownedAttribute clutch : Clutch;\r\n    ownedAttribute transmission : Transmission;\r\n    ownedAttribute driveshaft : Driveshaft;\r\n    ownedAttribute rearAxleAssembly : RearAxleAssembly;\r\n    ownedAttribute wheels : Wheels;\r\n    ownedAttribute roadSurfaceInterface : RoadSurfaceInterface;\r\n  }\r\n  \r\n  class PowerCommandPort {\r\n    ownedAttribute engine : Engine;\r\n  }\r\n  \r\n  class PowerOutputPort {\r\n    ownedAttribute engine : Engine;\r\n  }\r\n  \r\n  class Clutch {\r\n    ownedAttribute engine : Engine;\r\n  }\r\n  \r\n  class Transmission {\r\n    ownedAttribute engine : Engine;\r\n  }\r\n  \r\n  class Driveshaft {\r\n    ownedAttribute engine : Engine;\r\n  }\r\n  \r\n  class RearAxleAssembly {\r\n    ownedAttribute engine : Engine;\r\n  }\r\n  \r\n  class Wheels {\r\n    ownedAttribute rearAxle : RearAxle;\r\n    ownedAttribute roadSurfaceInterface : RoadSurfaceInterface;\r\n  }\r\n  \r\n  class RearAxle {\r\n    ownedAttribute rearAxleAssembly",
    "The following is an OMG SysML v2 textual model for the given requirements:\r\n\r\n```\r\nSubsystem b11 {\r\n  Component c1 {\r\n    Interface pe {\r\n      Operation pb();\r\n    }\r\n  }\r\n  Component c2 {\r\n    Interface pe {\r\n      Operation pb();\r\n    }\r\n  }\r\n}\r\n\r\nSubsystem b12 {\r\n  Component c3 {\r\n    Interface pf {\r\n      Operation pd();\r\n    }\r\n  }\r\n  Component c4 {\r\n    Interface pf {\r\n      Operation pd();\r\n    }\r\n  }\r\n}\r\n\r\nModule b21 {\r\n  Component c1 {\r\n    Interface pe {\r\n      Operation pb();\r\n    }\r\n  }\r\n  Component c2 {\r\n    Interface pe {\r\n      Operation pb();\r\n    }\r\n  }\r\n  Component c3 {\r\n    Interface pf {\r\n      Operation pd();\r\n    }\r\n  }\r\n  Component c4 {\r\n    Interface pf {\r\n      Operation pd();\r\n    }\r\n  }\r\n}\r\n\r\nModule b22 {\r\n  Component c1 {\r\n    Interface pe {\r\n      Operation pb();\r\n    }\r\n  }\r\n  Component c2 {\r\n    Interface pe {\r\n      Operation pb();\r\n    }\r\n  }\r\n  Component c3 {\r\n    Interface pf {\r\n      Operation pd();\r\n    }\r\n  }\r\n  Component c4 {\r\n    Interface pf {\r\n      Operation",
    "The system is designed to implement the functional architecture of an automotive powertrain, including the input of fuel commands, engine start-stop control, and support for power transmission and distribution. The system is controlled by users through fuel commands. Once the engine is ignited and started, the system generates engine torque according to the fuel command. The torque is then sequentially amplified from the engine to the transmission, transmitted to the driveshaft, and finally distributed to the left and right wheels, enabling control of the vehicle's driving force. The system can be shut down by users via a command, suspending generation and transmission of driving force. During engine shutdown, the system ensures safe and intelligent operation of the system.",
    "The following is an OMG SysML v2 textual model for the control logic of an automotive powertrain:\r\n\r\n```\r\npowertrainControlLogic\r\n  : PowertrainControlInterface\r\n  {\r\n    // Define the inputs and outputs of the system\r\n    input\r\n      : PowertrainControlInputInterface;\r\n    output\r\n      : PowertrainControlOutputInterface;\r\n\r\n    // Define the internal components of the system\r\n    engine\r\n      : EngineInterface;\r\n    transmission\r\n      : TransmissionInterface;\r\n    braking\r\n      : BrakingInterface;\r\n    steering\r\n      : SteeringInterface;\r\n    wheels\r\n      : WheelInterface;\r\n\r\n    // Define the control logic of the system\r\n    sequentialControl\r\n      : SequentialControlInterface;\r\n\r\n    // Define the connections between the components of the system\r\n    engine.input -> sequentialControl.input;\r\n    sequentialControl.output -> transmission.input;\r\n    sequentialControl.output -> braking.input;\r\n    sequentialControl.output -> steering.input;\r\n    sequentialControl.output -> wheels.input;\r\n    transmission.output -> engine.input;\r\n    braking.output -> engine.input;\r\n    steering.output -> engine.input;\r\n    wheels.output -> engine.input;\r\n  }\r\n```\r\n\r\nThis model defines the inputs,",
    "\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"Vehicle Powertrain System\" {\r\n  component \"Fuel Command\" as fuelCommand {\r\n    interface \"Fuel Input\" as fuelInput\r\n  }\r\n  component \"Engine Output Torque\" as engineOutputTorque {\r\n    interface \"Engine Output Torque\" as torqueOutput\r\n  }\r\n  component \"Transmission\" as transmission {\r\n    interface \"Transmission Torque\" as torqueInput\r\n    interface \"Transmission Output Torque\" as torqueOutput\r\n  }\r\n  component \"Wheel\" as wheel {\r\n    interface \"Wheel Torque\" as torqueInput\r\n  }\r\n  component \"Engine\" as engine {\r\n    interface \"Engine Start Signal\" as startSignal\r\n    interface \"Engine Shutdown Signal\" as shutdownSignal\r\n  }\r\n\r\n  fuelCommand -down-> engineOutputTorque\r\n  engineOutputTorque -down-> transmission\r\n  transmission -down-> wheel\r\n  engine -down-> startSignal\r\n  engine -down-> shutdownSignal\r\n}\r\n\r\n@enduml",
    "The following is an OMG SysML v2 textual model for the power connection and disconnection mechanism:\r\n\r\n```\r\npackage powerConnectionAndDisconnectionMechanism {\r\n  class Vehicle {\r\n    structuralFrame: StructuralFrame;\r\n    hitchBall: HitchBall;\r\n  }\r\n  \r\n  class Trailer {\r\n    structuralFrame: StructuralFrame;\r\n    trailerCoupler: TrailerCoupler;\r\n  }\r\n  \r\n  class StructuralFrame {\r\n    hasPowerConnection: PowerConnection;\r\n  }\r\n  \r\n  class HitchBall {\r\n    hasPowerConnection: PowerConnection;\r\n  }\r\n  \r\n  class TrailerCoupler {\r\n    hasPowerConnection: PowerConnection;\r\n  }\r\n  \r\n  class PowerConnection {\r\n    isConnected: Boolean;\r\n    isDisconnected: Boolean;\r\n    connect: Operation;\r\n    disconnect: Operation;\r\n  }\r\n  \r\n  class Operation {\r\n    isEnabled: Boolean;\r\n    isDisabled: Boolean;\r\n  }\r\n}\r\n```\r\n\r\nThe model defines four classes: `Vehicle`, `Trailer`, `StructuralFrame`, and `PowerConnection`. The `Vehicle` and `Trailer` classes each have a `structuralFrame` property, which is a `StructuralFrame` instance. The `HitchBall` and `TrailerCoupler` classes are also defined, but",
    "\n\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"Vehicle-Trailer Connection System\" {\r\n  component \"Vehicle\" {\r\n    package \"Chassis\" {\r\n      component \"Chassis Assembly\" {\r\n        package \"Chassis Components\" {\r\n          component \"Chassis Frame\"\r\n          component \"Chassis Cover\"\r\n          component \"Chassis Boom\"\r\n          component \"Chassis Wheels\"\r\n          component \"Chassis Brakes\"\r\n          component \"Chassis Steering Wheel\"\r\n          component \"Chassis Tire\"\r\n          component \"Chassis Lights\"\r\n          component \"Chassis Seat\"\r\n          component \"Chassis Gauges\"\r\n          component \"Chassis Controls\"\r\n        }\r\n      }\r\n      component \"Tow Balls\" {\r\n        package \"Tow Balls Components\" {\r\n          component \"Tow Balls Assembly\" {\r\n            component \"Tow Balls\"\r\n            component \"Tow Balls Gears\"\r\n            component \"Tow Balls Brake\"\r\n            component \"Tow Balls Lights\"\r\n            component \"Tow Balls Controls\"\r\n          }\r\n        }\r\n      }\r\n    }\r\n    package \"Trailer\" {\r\n      component \"Trailer Frame\"\r\n      component \"Trailer Coupler\"\r\n      component \"Trailer Brakes\"\r\n     ",
    "The following is an OMG SysML v2 textual model for the dynamic connection reference model between a vehicle and a towed trailer:\r\n\r\nVehicle:\r\n- has a tow ball device (tow_ball_device)\r\n- has a chassis (chassis)\r\n\r\nTowed Trailer:\r\n- has a trailer chassis (trailer_chassis)\r\n- has a coupler mechanism (coupler_mechanism)\r\n\r\nConnection:\r\n- connects a vehicle to a towed trailer (connect)\r\n- disconnects a vehicle from a towed trailer (disconnect)\r\n\r\nHitching:\r\n- hitching operation (hitch)\r\n- unhitching operation (unhitch)\r\n\r\nCoupler Mechanism:\r\n- has an internal structure (internal_structure)\r\n- engages or disengages with the tow ball (engage_disengage)\r\n- securely latch onto the vehicle’s tow ball (latch)\r\n- allows the two to separate smoothly (separate)\r\n\r\nThe coupler mechanism is designed to securely latch onto the vehicle’s tow ball",
    "\nThe following is an OMG SysML v2 textual model for the fuel system of motor vehicles:\r\n\r\n```\r\n@startuml\r\n!define OMG {\r\n  <size:18><color:#FFFFFF>\r\n  <b>OMG</b>\r\n  <color:#FFFFFF><size:12>Object Management Group\r\n  <color:#FFFFFF><size:10>Open Modeling Group\r\n}\r\n\r\n!define SysML {\r\n  <size:18><color:#FFFFFF>\r\n  <b>SysML</b>\r\n  <color:#FFFFFF><size:12>Systems Modeling Language\r\n  <color:#FFFFFF><size:10>OMG Standard\r\n}\r\n\r\n!define FuelSystem {\r\n  <size:24><color:#FFFFFF>\r\n  <b>Fuel System</b>\r\n  <color:#FFFFFF><size:16>Motor Vehicle Fuel System\r\n}\r\n\r\n!define FuelSupply {\r\n  <size:18><color:#FFFFFF>\r\n  <b>Fuel Supply</b>\r\n  <color:#FFFFFF><size:12>Fuel Tank Assembly to Engine\r\n}\r\n\r\n!define FuelReturn {\r\n  <size:",
    "The system is designed to provide vehicles with efficient fuel delivery services. The system includes a storage tank as the initial fuel reservoir, from which fuel is extracted and delivered to vehicles via a fuel pump. Inside the vehicle, there is a fuel tank used to receive and store the delivered fuel, as well as to monitor both the maximum capacity and the current fuel level in real-time. The flow path of the fuel is clear and controllable: it is output from the storage tank, passes through the fuel pump, and ultimately enters the vehicle’s fuel tank, thus realizing end-to-end fuel management—from storage, to delivery, to usage. The system focuses on the transfer and quantity changes of fuel at each stage, ensuring that vehicles can obtain the required fuel in a timely, safe, and accurate manner to meet normal operation needs.",
    "The following is an OMG SysML v2 textual model for the automobile assembly process:\r\n\r\n```\r\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"Vehicle Assembly\" {\r\n  component \"Vehicle\" {\r\n    artifact \"Vehicle Assembly\"\r\n  }\r\n  component \"Engine\" {\r\n    artifact \"Engine Assembly\"\r\n  }\r\n  component \"Gearbox\" {\r\n    artifact \"Gearbox Assembly\"\r\n  }\r\n  \"Vehicle\" -> \"Engine\"\r\n  \"Vehicle\" -> \"Gearbox\"\r\n}\r\n\r\n\"Engine\" -> \"Vehicle\"\r\n\"Gearbox\" -> \"Vehicle\"\r\n\r\n@enduml\r\n```\r\n\r\nThis model defines a package called \"Vehicle Assembly\" that contains three components: \"Vehicle\", \"Engine\", and \"Gearbox\". Each component has an associated artifact that represents the physical assembly process for that component. The \"Vehicle\" component is the final assembly product, and it has a dependency on the \"Engine\" and \"Gearbox\" components. The arrows indicate the sequence of assembly steps, with the \"Engine\" and \"Gearbox\" components dependent on the \"Vehicle\" component.",
    "\nVehicleA:\n  - StateMachine:\n    - Off:\n      - Transition: Starting\n    - Starting:\n      - Transition: Running\n    - Running:\n      - Transition: Health Management\n    - Health Management:\n      - Transition: Running\n      - Transition: Degraded\n    - Degraded:\n      - Transition: Normal\n    - Normal:\n      - Transition: Starting\n      - Transition: Shutting Down\n    - Shutting Down:\n      - Transition: Off\n  - Sensor:\n    - Temperature:\n      - SensorType: Temperature\n      - SensorLocation: VehicleA\n      - SensorData: Real-time temperature data\n  - Actuator:\n    - Brake:\n      - ActuatorType: Brake\n      - ActuatorLocation: VehicleA\n      - ActuatorData: Pressure data\n    - Power Supply:\n      - ActuatorType: Power Supply\n      - ActuatorLocation: VehicleA\n      - ActuatorData: Voltage data\n    - Parking Brake:\n      - ActuatorType: Parking Brake\n      - ActuatorLocation: VehicleA\n      - ActuatorData: Pressure data\n  - Controller:\n    - VehicleA:\n      - StateMachine:\n        - Off:\n          - Transition: Starting\n        - Starting:\n          - Transition: Running",
    "The following is an OMG SysML v2 textual model for the given requirements:\r\n\r\nVehicle Behavior Model:\r\n\r\nVehicle:\r\n- has a brake pedal: Boolean\r\n- has a start signal: Boolean\r\n- has a temperature sensor: Boolean\r\n- has a temperature: Real\r\n- has a degraded mode: Boolean\r\n- has a shutdown state: Boolean\r\n- has a startup state: Boolean\r\n- has a self-inspection state: Boolean\r\n- has a power supply state: Boolean\r\n- has a maintenance interval: Integer\r\n- has a temperature threshold: Real\r\n- has a fault recovery mechanism: Boolean\r\n- has a maintenance schedule: Boolean\r\n- has a start operation: Boolean\r\n- has a stop operation: Boolean\r\n- has a degraded operation: Boolean\r\n- has a normal operation: Boolean\r\n\r\nVehicle Controller:\r\n- has a vehicle: Vehicle\r\n- has a start signal: Boolean\r\n- has a stop signal: Boolean\r\n- has a degraded signal: Boolean\r\n- has a temperature: Real\r\n- has a temperature threshold: Real\r\n- has a temperature warning: Boolean\r",
    "The following is an OMG SysML v2 textual model for the given requirements:\r\n\r\n```\r\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"System\" {\r\n  actor \"User\" as user\r\n  entity \"Vehicle\" as vehicle\r\n  entity \"Road\" as road\r\n  entity \"Simulation\" as simulation\r\n  entity \"Snapshot\" as snapshot\r\n\r\n  user -u-|> simulation\r\n  simulation -u-|> vehicle\r\n  simulation -u-|> road\r\n  simulation -u-|> snapshot\r\n}\r\n\r\npackage \"User Interface\" {\r\n  entity \"User Interface\" as ui\r\n  ui -u-|> user\r\n}\r\n\r\npackage \"Simulation\" {\r\n  entity \"Simulation Time\" as time\r\n  entity \"Simulation Parameters\" as parameters\r\n  entity \"Simulation Results\" as results\r\n\r\n  simulation -u-|> time\r\n  simulation -u-|> parameters\r\n  simulation -u-|> results\r\n\r\n  entity \"Vehicle Dynamics\" as dynamics\r\n  entity \"Road Dynamics\" as road_dynamics\r\n  entity \"Snapshot Recording\" as recording\r\n\r\n  dynamics -u-|> vehicle\r\n  road_dynamics -u-|> road\r\n  recording -u-|> snapshot\r\n\r\n  entity \"Vehicle State\" as state\r\n  entity \"Road State\" as road_state\r\n\r\n  state -",
    "The following is an OMG SysML v2 textual model for the given requirements:\r\n\r\n```\r\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"Configuration Management System\" {\r\n  package \"Configurable Components\" {\r\n    component \"Subsystem A\" {\r\n      interface \"Configuration Option 1\"\r\n      interface \"Configuration Option 2\"\r\n    }\r\n    component \"Subsystem B\" {\r\n      interface \"Configuration Option 1\"\r\n      interface \"Configuration Option 2\"\r\n    }\r\n  }\r\n  package \"Vehicle Configurations\" {\r\n    component \"Configuration A\" {\r\n      component \"Subsystem A\" {\r\n        component \"Component 1\"\r\n        component \"Component 2\"\r\n      }\r\n      component \"Subsystem B\" {\r\n        component \"Component 4\"\r\n        component \"Component 5\"\r\n      }\r\n    }\r\n    component \"Configuration B\" {\r\n      component \"Subsystem A\" {\r\n        component \"Component 2\"\r\n        component \"Component 3\"\r\n      }\r\n      component \"Subsystem B\" {\r\n        component \"Component 4\"\r\n        component \"Component 5\"\r\n      }\r\n    }\r\n  }\r\n  package \"Configurable Constraints\" {\r\n    constraint \"Subsystem A Configuration Option 2 -> Subsystem B Configuration Option 2\"\r\n    constraint \"Subsystem A Configuration Option 2",
    "The following is an OMG SysML v2 textual model for the given requirements:\r\n\r\n```\r\nSubsystem A {\r\n  part1 : ComponentA;\r\n  part2 : ComponentA;\r\n  part3 : ComponentA {\r\n    p1 : PortA;\r\n  };\r\n  part4 : ComponentA;\r\n  part5 : ComponentA {\r\n    p2 : PortA;\r\n    variant1 : BehaviorA;\r\n    variant2 : BehaviorA;\r\n  };\r\n  part6 : ComponentA;\r\n}\r\n\r\nSubsystem B {\r\n  part1 : ComponentB;\r\n  part2 : ComponentB;\r\n  part3 : ComponentB {\r\n    p1 : PortB;\r\n  };\r\n  part4 : ComponentB;\r\n  part5 : ComponentB {\r\n    p2 : PortB;\r\n    variant1 : BehaviorB;\r\n    variant2 : BehaviorB;\r\n  };\r\n  part6 : ComponentB;\r\n}\r\n\r\nVehicleConfigA {\r\n  SubsystemA {\r\n    part1 : ComponentA;\r\n    part2 : ComponentA;\r\n    part3 : ComponentA {\r\n      p1 : PortA;\r\n    };\r\n    part4 : ComponentA;\r\n    part5 : ComponentA {\r\n      p2 : PortA;\r\n      variant1 : BehaviorA;\r\n      variant",
    "\r\nThe following is an OMG SysML v2 textual model for the given requirements:\r\n\r\n```\r\n@startuml\r\n!define OMG {\r\n  <size:18><color:#FFFFFF>\r\n  <b>OMG</b>\r\n  <color:#FFFFFF><size:12>Object Management Group\r\n  <color:#FFFFFF><size:10>Open Systems Management Language\r\n}\r\n\r\n!define SysML {\r\n  <size:18><color:#FFFFFF>\r\n  <b>SysML</b>\r\n  <color:#FFFFFF><size:12>Systems Management Language\r\n  <color:#FFFFFF><size:10>Open Systems Management Language\r\n}\r\n\r\n!define v2 {\r\n  <size:18><color:#FFFFFF>\r\n  <b>v2</b>\r\n  <color:#FFFFFF><size:12>Version 2\r\n  <color:#FFFFFF><size:10>Open Systems Management Language\r\n}\r\n\r\n!define requirements {\r\n  <size:18><color:#FFFFFF>\r\n  <b>Requirements</b>\r\n  <color:#FFFFFF><size:12>\r\n  <color:#FFFFFF><size:10>\r\n}\r\n\r",
    "The following is an example of an OMG SysML v2 textual model for the given requirements:\r\n\r\n```\r\npackage AutomobileRequirements {\r\n  class Vehicle {\r\n    mass : Real [0..1] // kg\r\n    fuelStatus : FuelStatus // enumeration\r\n    powertrain : Powertrain // association\r\n    reliability : Reliability // association\r\n  }\r\n  \r\n  class Engine {\r\n    torque : Real [0..1] // Nm\r\n    driveInterface : DriveInterface // association\r\n  }\r\n  \r\n  class Transmission {\r\n    driveInterface : DriveInterface // association\r\n  }\r\n  \r\n  class DriveInterface {\r\n    type : String // enumeration\r\n    connection : Connection // association\r\n  }\r\n  \r\n  class Connection {\r\n    type : String // enumeration\r\n  }\r\n  \r\n  class FuelStatus {\r\n    type : String // enumeration\r\n  }\r\n  \r\n  class Powertrain {\r\n    type : String // enumeration\r\n  }\r\n  \r\n  class Reliability {\r\n    type : String // enumeration\r\n  }\r\n  \r\n  package RequirementsManagement {\r\n    class Requirement {\r\n      description : String\r\n      specification : Specification // association\r\n    }\r\n    \r\n    class Specification {\r\n      type : String // enumeration\r\n      value : Real [0..1] // kg, Nm, etc.\r\n    }\r\n    \r\n    class Validation {\r\n      requirement : Requirement // association\r\n      result : Boolean // true",
    "The following is an OMG SysML v2 textual model for the given requirement:\r\n\r\n```\r\n@startuml\r\n!define OMG {\r\n  <size:18><color:#FFFFFF>\r\n  <b>OMG</b>\r\n  <color:#FFFFFF><size:12>Object Management Group\r\n  <color:#FFFFFF><size:10>Open Modeling Group\r\n}\r\n\r\n!define SysML {\r\n  <size:18><color:#FFFFFF>\r\n  <b>SysML</b>\r\n  <color:#FFFFFF><size:12>Systems Modeling Language\r\n  <color:#FFFFFF><size:10>Open Group\r\n}\r\n\r\n!define v2 {\r\n  <size:18><color:#FFFFFF>\r\n  <b>v2</b>\r\n  <color:#FFFFFF><size:12>Version 2\r\n  <color:#FFFFFF><size:10>OMG SysML\r\n}\r\n\r\n@enduml\r\n```\r\n\r\nThe model consists of a single element, which is the system itself. The system has a name, and it has a set of functionalities, which are:\r\n\r\n- Measuring the actual mass of the tested",
    "The following is an OMG SysML v2 textual model for the water supply network:\r\n\r\n```\r\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"Water Supply Network\" {\r\n  component SpigotBank {\r\n    interface Spigot {\r\n      operation deliverHotWater()\r\n      operation deliverColdWater()\r\n    }\r\n    interface FaucetInlet {\r\n      operation deliverHotWater()\r\n      operation deliverColdWater()\r\n    }\r\n    component Faucet {\r\n      interface FaucetInlet {\r\n        operation deliverHotWater()\r\n        operation deliverColdWater()\r\n      }\r\n      component FaucetInlet {\r\n        operation deliverHotWater()\r\n        operation deliverColdWater()\r\n      }\r\n      component FaucetInlet {\r\n        operation deliverHotWater()\r\n        operation deliverColdWater()\r\n      }\r\n    }\r\n  }\r\n  component DistributionSystem {\r\n    interface DistributionPipe {\r\n      operation deliverHotWater()\r\n      operation deliverColdWater()\r\n    }\r\n    component DistributionPipe {\r\n      interface DistributionPipe {\r\n        operation deliverHotWater()\r\n        operation deliverColdWater()\r\n      }\r\n      component DistributionPipe {\r\n        interface DistributionPipe {\r\n          operation deliverHotWater()\r\n          operation deliverColdWater()\r\n        }\r\n        component DistributionPipe {\r\n         ",
    "\r\nVehicle Quality Analysis System:\r\n\r\n- Inputs:\r\n  - Vehicle component quality data (e.g., engine performance, transmission efficiency, front axle assembly quality, rear axle assembly quality)\r\n  - Analysis requirements and use cases\r\n- Outputs:\r\n  - Vehicle quality analysis results (e.g., total vehicle mass, component mass breakdown, component failure rates, etc.)\r\n  - Analysis tasks and plans\r\n- Functions:\r\n  - Data aggregation and calculation\r\n  - Quality analysis requirements and use cases definition\r\n  - Analysis task and plan generation\r\n  - Scientific support for vehicle design and performance optimization\r\n\r\nVehicle Quality Analysis System:\r\n\r\n- Inputs:\r\n  - Vehicle component quality data (e.g., engine performance, transmission efficiency, front axle assembly quality, rear axle assembly quality)\r\n  - Analysis requirements and use cases\r\n- Outputs:\r\n  - Vehicle quality analysis results (e.g., total vehicle mass, component mass breakdown, component failure rates, etc.)\r\n  - Analysis tasks and plans\r\n- Functions:\r\n  - Data aggregation and calculation\r\n  - Quality analysis requirements and use cases definition\r\n  - Analysis task and plan generation\r\n  - Scientific support for vehicle design and performance optimization",
    "The OMG SysML v2 textual model for the given requirements is as follows:\r\n\r\n```\r\n@startuml\r\n!define SYSML v2\r\n\r\n!include <SysML/SysML.profile.uml>\r\n\r\npackage \"Vehicle Powertrain Configuration\" {\r\n  actor \"End User\" as User\r\n\r\n  package \"Engine Selection\" {\r\n    component \"Engine Selection System\" as EngineSelectionSystem {\r\n      interface \"User Interface\" as UserInterface {\r\n        operation \"Select Engine Configuration\" as SelectEngineConfiguration\r\n      }\r\n      interface \"Engine Configuration Database\" as EngineConfigurationDatabase {\r\n        operation \"Retrieve Engine Configuration Data\" as RetrieveEngineConfigurationData\r\n      }\r\n      interface \"Engine Configuration Evaluator\" as EngineConfigurationEvaluator {\r\n        operation \"Evaluate Engine Configuration\" as EvaluateEngineConfiguration\r\n      }\r\n      interface \"Engine Configuration Recommender\" as EngineConfigurationRecommender {\r\n        operation \"Recommend Engine Configuration\" as RecommendEngineConfiguration\r\n      }\r\n      interface \"Engine Configuration Explanation\" as EngineConfigurationExplanation {\r\n        operation \"Explain Engine Configuration Selection\" as ExplainEngineConfigurationSelection\r\n      }\r\n    }\r\n\r\n    package \"Engine Configuration Model\" {\r\n      component \"Engine Configuration Model\" as EngineConfigurationModel {\r\n        interface \"Engine Configuration\" as EngineConfiguration {\r\n          attribute \"Engine Type\"",
    "\r\nentity FuelEconomyTest {\r\n  attribute vehiclePowertrain : string;\r\n  attribute load : float;\r\n  attribute operatingConditions : string;\r\n  attribute fuelConsumption : float;\r\n  attribute fuelEconomy : float;\r\n  attribute fuelEconomyTarget : float;\r\n  attribute fuelEconomyViolation : boolean;\r\n  operation runTest() : boolean;\r\n}\r\n\r\nentity FuelEconomyAnalyzer {\r\n  attribute vehiclePowertrain : string;\r\n  attribute load : float;\r\n  attribute operatingConditions : string;\r\n  attribute fuelConsumption : float;\r\n  attribute fuelEconomy : float;\r\n  attribute fuelEconomyTarget : float;\r\n  attribute fuelEconomyViolation : boolean;\r\n  operation analyzeTestResults() : boolean;\r\n}\r\n\r\nentity FuelEconomyRegulator {\r\n  attribute vehiclePowertrain : string;\r\n  attribute load : float;\r\n  attribute operatingConditions : string;\r\n  attribute fuelConsumption : float;\r\n  attribute fuelEconomy : float;\r\n  attribute fuelEconomyTarget : float;\r\n  attribute fuelEconomyViolation : boolean;\r\n  operation regulateFuelEconomy() : boolean;\r\n}\r\n\r\nentity FuelEconomyDatabase {\r\n  attribute vehiclePowertrain :",
    "The following is an OMG SysML v2 textual model for the given input requirement:\r\n\r\n```\r\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"Vehicle Dynamics Simulation\" {\r\n  class \"Vehicle\" {\r\n    + mass : double\r\n    + initial position : double\r\n    + initial velocity : double\r\n    + segmented power output data : double list\r\n  }\r\n  \r\n  class \"Dynamic Equations\" {\r\n    + time step : double\r\n    + acceleration : double\r\n    + velocity variation : double\r\n    + displacement : double\r\n  }\r\n  \r\n  \"Vehicle\" *-- \"Dynamic Equations\"\r\n  \r\n  \"Vehicle\" o-- \"Dynamic Equations\"\r\n  \r\n  \"Dynamic Equations\" <|--- \"Vehicle\"\r\n  \r\n  \"Vehicle\" <|--- \"Dynamic Equations\"\r\n  \r\n  \"Vehicle\" o-- \"Dynamic Equations\"\r\n  \r\n  \"Dynamic Equations\" o-- \"Vehicle\"\r\n  \r\n  \"Vehicle\" <|--- \"Dynamic Equations\"\r\n  \r\n  \"Dynamic Equations\" <|--- \"Vehicle\"\r\n  \r\n  \"Vehicle\" <|--- \"Dynamic Equations\"\r\n  \r\n  \"Dynamic Equations\" <|--- \"Vehicle\"\r\n  \r\n  \"Vehicle\" <|--- \"Dynamic Equations\"\r\n  \r\n  \"Dynamic Equations\" <|--- \"Vehicle\"\r\n  \r\n  \"Dynamic Equations\" <|--- \"Vehicle\"\r\n  \r\n  \"",
    "\nVehicleSystemModel:\n  totalMass: 2500 kg\n  frontAxleAssembly:\n    mass: 150 kg\n    frontWheels: 2\n    frontAxle:\n      mass: 10 kg\n      steeringAngle: 20°\n  rearAxleAssembly:\n    mass: 250 kg\n    rearWheels: 2\n    rearAxle:\n      mass: 20 kg",
    "\r\nVehicleSafetyAndSecuritySystem: System with components VehicleSafetyAndSecurityManager, VehicleSafetyAndSecurityDisplay, and VehicleSafetyAndSecurityComponent.\r\n\r\nVehicleSafetyAndSecurityManager: Component with operations DisplaySafetyAndSecurityFeatures, FilterSafetyAndSecurityFeatures, and UpdateSafetyAndSecurityFeatures.\r\n\r\nVehicleSafetyAndSecurityDisplay: Component with operations DisplaySafetyAndSecurityFeaturesAsTree, DisplaySafetyAndSecurityFeaturesAsTable, and DisplaySafetyAndSecurityFeaturesAsText.\r\n\r\nVehicleSafetyAndSecurityComponent: Component with attributes SafetyAndSecurityFeature, and SafetyAndSecurityFeatureType.\r\n\r\nDisplaySafetyAndSecurityFeatures: Operation that takes in a list of VehicleSafetyAndSecurityComponent instances and displays them in a tree structure or table format.\r\n\r\nFilterSafetyAndSecurityFeatures: Operation that takes in a list of VehicleSafetyAndSecurityComponent instances and a list of SafetyAndSecurityFeatureType values and returns a filtered list of VehicleSafetyAndSecurityComponent instances that match the specified SafetyAndSecurityFeatureType values.\r\n\r\nUpdateSafetyAndSecurityFeatures: Operation that takes in a list of VehicleSafetyAndSecurityComponent instances and updates their SafetyAndSecurityFeatureType values based on user input.\r\n\r\nSafetyAndSecurityFeatureType: Enumeration with values",
    "The system architecture can be represented using the following OMG SysML v2 textual model:\r\n\r\n```\r\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"Application Layer\" {\r\n  component \"Service Layer\" {\r\n    interface \"Service Interface\"\r\n  }\r\n  component \"Data Layer\" {\r\n    entity \"Data Entity\"\r\n  }\r\n  component \"Business Logic\" {\r\n    entity \"Business Entity\"\r\n    entity \"Business Function\"\r\n    entity \"Business Rule\"\r\n    entity \"Business Process\"\r\n  }\r\n  \"Business Logic\" ..> \"Service Layer\"\r\n  \"Service Layer\" ..> \"Service Interface\"\r\n  \"Service Layer\" ..> \"Data Layer\"\r\n  \"Data Layer\" ..> \"Data Entity\"\r\n  \"Business Logic\" ..> \"Business Entity\"\r\n  \"Business Logic\" ..> \"Business Function\"\r\n  \"Business Logic\" ..> \"Business Rule\"\r\n  \"Business Logic\" ..> \"Business Process\"\r\n}\r\n\r\npackage \"Service Layer\" {\r\n  interface \"Service Interface\" {\r\n    operation \"Service Operation\"\r\n  }\r\n}\r\n\r\npackage \"Data Layer\" {\r\n  entity \"Data Entity\" {\r\n    attribute \"Data Attribute\"\r\n  }\r\n}\r\n\r\npackage \"Business Logic\"",
    "The OMG SysML v2 textual model for the torque generation function within the powertrain system is as follows:\r\n\r\n```\r\npowertrain system\r\n  component powertrain\r\n    component engine\r\n      property torque_output\r\n        range > 0 newton-meters\r\n      end property\r\n    end component\r\n  end component\r\nend powertrain system\r\n```\r\n\r\nIn this model, the `powertrain system` is the top-level container for the powertrain system, which includes the `engine` component. The `torque_output` property of the `engine` component is constrained to be greater than zero newton-meters, ensuring that the torque produced during operation is effective and efficient.",
    "The system is capable of transmitting and outputting power. It has the ability to provide power as well as generate torque. The system includes a torque generator component responsible for generating torque. The powertrain contains an engine responsible for the actual execution of torque generation. The torque generator function is mapped and implemented onto the engine within the powertrain, achieving effective correspondence and allocation between logical functions and physical implementation.",
    "The Vehicle Safety and Anti-theft Function Catalogue is a textual model that describes the basic configuration requirements for key vehicle components in terms of safety and anti-theft performance. The model includes the following elements:\r\n\r\n- Safety Features: These are the basic safety components that are installed on the body and interior of the vehicle to ensure the fundamental personal safety of occupants. These include the front seat belts and bumpers, the driver’s airbag and anti-lock braking system, and other safety features that are essential for the vehicle’s basic safety functions.\r\n\r\n- Security Features: These are the additional security components that are installed on the vehicle to enhance the overall security and protective capability of the vehicle. These include the alarm system and keyless entry system, and other security features that are essential for the vehicle’s basic security functions.\r\n\r\n- Mandatory Safety Features: These are the safety components that are mandatory for the vehicle to function in a safe and secure manner. These include the seat belts, the airbag, and the anti-lock braking system, among others.\r\n\r\n- Anti-Theft Features: These are the components that are designed to prevent unauthorized access to the vehicle.",
    "The system is designed to provide complete fuel supply and return management functions for vehicles. The vehicle is equipped with a fuel system composed of a fuel tank assembly, which integrates both the fuel pump and the fuel tank. The fuel pump is responsible for pressurizing fuel from the tank and delivering it to various fuel-consuming units within the vehicle, while allowing unused fuel to return to the tank via the return line. The system must monitor and transmit real-time fuel temperature information to ensure the safety and efficiency of fuel transport. The overall fuel flow path and interface definitions are clearly specified, and both data and fuel flow between components are strictly bound according to the design, thereby achieving reliable fuel supply and effective return management.\r\n\r\nThe fuel tank assembly is a critical component of the fuel system, which is responsible for storing and distributing fuel to various fuel-consuming units within the vehicle. The fuel tank assembly is designed to be modular and easily replaceable, and can be configured to accommodate different fuel types and capacities. The fuel tank assembly is designed to be self-contained and self-sustaining, with no external power requirements.\r\n\r\nThe fuel pump is a critical component of the fuel system, which is responsible for press",
    "The system proposes the following requirements for the safety and security compliance configurations of a vehicle:\r\n\r\n- The vehicle interior must be equipped with two seat belts, which are mandatory safety features.\r\n- An airbag should also be installed in the cockpit, but its application is not mandatory.\r\n- An anti-theft alarm device should be installed inside the vehicle to enhance security protection.\r\n- The vehicle body must be equipped with a bumper, which is a required safety component, and is also required to have a keyless entry system to improve security performance.\r\n- The chassis structure is to be fitted with two wheels and equipped with two sets of anti-lock braking systems, although the installation of such braking systems is not mandatory.\r\n- All the aforementioned components related to safety and security are subject to identification and classification management by the system to ensure compliance with regulations regarding critical safety and security functions, thereby enhancing the vehicle’s overall safety and security features.",
    "\nVehicleSafetyAndSecurityComponentSystem : ComponentSystem {\n  interior : VehicleInterior {\n    alarmSystem : AlarmSystem,\n    seatBelts : SeatBelts,\n    frontRowSeats : FrontRowSeats,\n    driverAirbag : DriverAirbag\n  },\n  bodyAssembly : VehicleBodyAssembly {\n    vehicleBody : VehicleBody,\n    bumper : Bumper,\n    keylessEntrySystem : KeylessEntrySystem\n  },\n  safetyFeatures : SafetyFeatures {\n    seatBelts : SeatBelts,\n    airbags : Airbags,\n    bumpers : Bumpers\n  },\n  securityFeatures : SecurityFeatures {\n    onboardAlarm : OnboardAlarm,\n    keylessEntrySystem : KeylessEntrySystem\n  }\n}",
    "The following is an OMG SysML v2 textual model for the given requirement:\r\n\r\n```\r\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"System\" {\r\n  component \"Component A\" {\r\n    property \"Classification Level\" : string\r\n  }\r\n  component \"Component B\" {\r\n    property \"Classification Level\" : string\r\n  }\r\n  component \"Component C\" {\r\n    property \"Classification Level\" : string\r\n  }\r\n}\r\n\r\npackage \"Classification Management System\" {\r\n  component \"Classification Engine\" {\r\n    interface \"Classification API\" {\r\n      operation \"Classify Component\" (component : Component, classificationLevel : string) : boolean\r\n    }\r\n    interface \"Classification Display API\" {\r\n      operation \"Display Classification Attribute\" (component : Component, classificationAttribute : string) : boolean\r\n    }\r\n  }\r\n  component \"Classification Database\" {\r\n    entity \"Classification Attribute\" {\r\n      attribute \"Name\" : string\r\n      attribute \"Description\" : string\r\n    }\r\n    entity \"Classification Level\" {\r\n      attribute \"Name\" : string\r\n      attribute \"Description\" : string\r\n    }\r\n    entity \"Classification Mapping\" {\r\n      attribute \"Component\" : Component\r\n      attribute \"Classification Level\" : ClassificationLevel\r\n      attribute \"Classification Attribute\" : ClassificationAttribute\r\n   ",
    "The following is an OMG SysML v2 textual model for the given requirements:\r\n\r\n```\r\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"Vehicle Electronic Control Unit\" {\r\n  component \"Vehicle Control Unit\" {\r\n    interface \"CAN Bus Interface\"\r\n  }\r\n  component \"Engine Control Unit\" {\r\n    interface \"CAN Bus Interface\"\r\n  }\r\n  component \"Sensor Interface\" {\r\n    interface \"CAN Bus Interface\"\r\n  }\r\n  component \"Vehicle Communication Module\" {\r\n    interface \"CAN Bus Interface\"\r\n    interface \"Vehicle Control Unit BusIF\"\r\n    interface \"Engine Control Unit BusIF\"\r\n    interface \"Sensor Interface BusIF\"\r\n  }\r\n  component \"Vehicle Data Module\" {\r\n    interface \"CAN Bus Interface\"\r\n    interface \"Vehicle Control Unit BusIF\"\r\n    interface \"Engine Control Unit BusIF\"\r\n    interface \"Sensor Interface BusIF\"\r\n  }\r\n  component \"Vehicle Monitoring Module\" {\r\n    interface \"CAN Bus Interface\"\r\n    interface \"Vehicle Control Unit BusIF\"\r\n    interface \"Engine Control Unit BusIF\"\r\n    interface \"Sensor Interface BusIF\"\r\n  }\r\n  component \"Vehicle Control Module\" {\r\n    interface \"CAN Bus Interface\"\r\n    interface \"Vehicle Control Unit BusIF\"\r\n    interface \"Engine Control Unit BusIF",
    "\n\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"Blood Glucose Meter System\" {\r\n  actor \"Patient\" as patient\r\n  entity \"Blood Glucose Meter\" as bgm\r\n  entity \"Battery\" as battery\r\n  entity \"Alarm\" as alarm\r\n  entity \"Emergency Response System\" as emergency\r\n  entity \"Preventive Measures\" as preventive\r\n  entity \"Risk Management\" as risk\r\n\r\n  bgm -down-> battery\r\n  bgm -down-> alarm\r\n  bgm -down-> emergency\r\n  bgm -down-> preventive\r\n  bgm -down-> risk\r\n\r\n  patient -down-> bgm\r\n}\r\n\r\n@enduml",
    "The following is an OMG SysML v2 textual model for the given requirements:\r\n\r\n```\r\npackage Constants {\r\n  constant Real e = 2.7182818284590452353602874713526624977572470936999595749669676277240766303535475945713821785251664274;\r\n  constant Real pi = 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117068;\r\n  constant Real c = 2997924",
    "\n\n```\npackage automotive_components_tires\n\nabstract class Tire {\n  string manufacturer\n  real rimDiameter\n  integer width\n}\n\nclass MichelinTire extends Tire {\n  MichelinTire() {\n    manufacturer = \"Michelin\"\n    rimDiameter = 18.0\n    width = 245\n  }\n}\n\nclass FrenchTire extends Tire {\n  FrenchTire() {\n    manufacturer = \"Ferrari\"\n    rimDiameter = 20.0\n    width = 250\n  }\n}\n\nclass AmericanTire extends Tire {\n  AmericanTire() {\n    manufacturer = \"American\"\n    rimDiameter = 16.0\n    width = 225\n  }\n}\n```\r\n\r\nExplanation:\r\n\r\nThe model defines an abstract class `Tire` with three attributes: `manufacturer`, `rimDiameter`, and `width`. The `manufacturer` attribute is a string, `rimDiameter` is a real number, and `width` is an integer. The `Tire` class is extended by three concrete classes: `MichelinTire`, `F",
    "\n\n```\n@startuml\r\npackage \"Automotive Component Model\" {\r\n  class \"Vehicle\" {\r\n    + mass : double [kg]\r\n    + length : double [m]\r\n    + leftFrontWheel : \"Wheel\"\r\n    + rightFrontWheel : \"Wheel\"\r\n  }\r\n  class \"Wheel\" {\r\n    + hubDiameter : double [in]\r\n    + width : double [mm]\r\n    + tireHeight : double [m]\r\n    + tire : \"Tire\"\r\n  }\r\n  class \"Tire\" {\r\n    + diameter : double [mm]\r\n    + width : double [mm]\r\n    + pressure : double [kPa]\r\n  }\r\n}\r\n@enduml\r\n```\r\n\r\nNote: This model assumes that the tire is a standard flat tire, with a diameter of 255 mm and a width of 150 mm. If a different tire type is used, the model should be updated accordingly.",
    "\nentity Vehicle {\n  attribute engineType : string {values: \"four-cylinder\" \"six-cylinder\"}\n  attribute transmissionType : string {values: \"manual\" \"automatic\"}\n  attribute isHighPerformance : boolean\n}\n\nentity Engine {\n  attribute cylinderCount : integer {values: 4 6}\n}\n\nentity Transmission {\n  attribute type : string {values: \"manual\" \"automatic\"}\n}\n\nAssociation Engine_Vehicle {\n  engine : Engine\n  vehicle : Vehicle\n}\n\nAssociation Transmission_Vehicle {\n  transmission : Transmission\n  vehicle : Vehicle\n}\n\nconstraint exclusive {\n  (engineType = \"four-cylinder\" and transmissionType = \"manual\") or\n  (engineType = \"six-cylinder\" and transmissionType = \"automatic\")\n}\n\nconstraint implies {\n  isHighPerformance -> (engineType = \"six-cylinder\")\n}",
    "The following is an OMG SysML v2 textual model for modeling the structural and functional constraints of automotive components:\r\n\r\n```\r\npackage AutomotiveComponentConstraints {\r\n  component Vehicle {\r\n    property mass : Real [0..1200]\r\n    property length : Real [0..4.82]\r\n    property numberOfWheelAssemblies : Integer [1..*]\r\n    composition contains\r\n      WheelAssembly[numberOfWheelAssemblies]\r\n  }\r\n  \r\n  component WheelAssembly {\r\n    property tireWidth : Real [0..245]\r\n    property tireHeight : Real [0..45]\r\n    property tireOuterDiameter : Real [0..1000]\r\n    property tireDepth : Real [3.5..6.0]\r\n    property brakeDiscRadius : Real [0..95]\r\n    property brakeDiscDiameter : Real [0..1000]\r\n    property brakeDiscHeight : Real [0..1000]\r\n    property brakeDiscOffset : Real [0..1000]\r\n    property brakeDiscAngle : Real [0..180]\r\n    property brakeDiscFitment : String\r\n    property rimDiameter : Real [",
    "\nThe following is an OMG SysML v2 textual model for the automotive fuel system:\r\n\r\n```\r\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"Automotive Fuel System\" {\r\n  component \"Fuel Tank Assembly\" {\r\n    interface \"Fuel Outlet\" {\r\n      operation \"Fuel Out\"\r\n    }\r\n    interface \"Fuel Inlet\" {\r\n      operation \"Fuel In\"\r\n    }\r\n    component \"Fuel Pump\" {\r\n      interface \"Fuel Supply\" {\r\n        operation \"Fuel Supply\"\r\n      }\r\n      interface \"Fuel Return\" {\r\n        operation \"Fuel Return\"\r\n      }\r\n    }\r\n    component \"Fuel Tank\" {\r\n      interface \"Fuel Temperature\" {\r\n        operation \"Fuel Temperature\"\r\n      }\r\n    }\r\n  }\r\n}\r\n@enduml\r\n```\r\n\r\nThis model defines a package for the automotive fuel system, which contains a fuel tank assembly component. The fuel tank assembly has two interfaces, one for fuel outlet and one for fuel inlet, and two subcomponents, a fuel pump and a fuel tank. The fuel pump has two interfaces, one for fuel supply and one for fuel return, and the fuel tank has one interface for fuel temperature. The model does not",
    "The following is an OMG SysML v2 textual model for managing physical quantity data and units:\r\n\r\n```\r\nPhysicalQuantitySystem [1]\r\n  -- PhysicalQuantity [0..*]\r\n  -- UnitOfMeasure [0..*]\r\n\r\nPhysicalQuantity [1]\r\n  name : String [1]\r\n  symbol : String [1]\r\n  baseQuantity : PhysicalQuantity [1]\r\n  -- UnitOfMeasure [0..*]\r\n\r\nUnitOfMeasure [1]\r\n  name : String [1]\r\n  symbol : String [1]\r\n  baseUnit : Boolean [1]\r\n  conversionFactor : Real [1]\r\n  physicalQuantity : PhysicalQuantity [1]\r\n  -- UnitOfMeasure [0..*]\r\n```\r\n\r\nExplanation:\r\n\r\n- The PhysicalQuantitySystem class represents the overall system of physical quantities, which includes a set of PhysicalQuantity and UnitOfMeasure instances.\r\n- The PhysicalQuantity class represents a physical quantity, such as length, mass, time, electric current, temperature, amount of substance, or luminous intensity. It has a name, symbol, and baseQuantity attribute, which indicates the base physical quantity that it is a unit of. It also has a set of UnitOfMeasure instances",
    "The following is an OMG SysML v2 textual model for the given requirement:\r\n\r\n```\r\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"Unit System Library\" {\r\n  class \"Unit\" {\r\n    +name: string\r\n    +symbol: string\r\n    +definition: string\r\n    +quantityType: string\r\n    +baseUnit: boolean\r\n    +conversionFactor: double\r\n    +aliases: string[]\r\n    +offset: double\r\n    +factor: double\r\n    +derivedUnits: \"Unit[]\"\r\n    +aliases: string[]\r\n    +offset: double\r\n    +factor: double\r\n    +inverse: \"Unit\"\r\n  }\r\n\r\n  class \"Quantity\" {\r\n    +name: string\r\n    +symbol: string\r\n    +definition: string\r\n    +unit: \"Unit\"\r\n    +value: double\r\n  }\r\n\r\n  class \"Converter\" {\r\n    +name: string\r\n    +sourceUnit: \"Unit\"\r\n    +targetUnit: \"Unit\"\r\n    +conversionFactor: double\r\n    +offset: double\r\n    +factor: double\r\n    +inverse: \"Converter\"\r\n  }\r\n\r\n  \"Unit\" -- \"Quantity\"\r\n  \"Converter\" -- \"Quantity\"\r\n  \"Converter\" -- \"Converter\"\r\n}\r\n\r\n@enduml\r\n```\r\n\r\nExplanation",
    "The following is an OMG SysML v2 textual model for the given requirement:\r\n\r\n```\r\npackage CarHeadlampTiltAdjustmentKnobVerificationAndValidation {\r\n  class CarHeadlampTiltAdjustmentKnobVerificationAndValidation {\r\n    parameter Real PI = 3.14159265358979323846;\r\n    parameter Real E = 2.71828182845904523536;\r\n    parameter Real MIN_TILT_ANGLE = 50.0;\r\n    parameter Real MAX_TILT_ANGLE = 80.0;\r\n    Real tiltAngle;\r\n    Boolean isValid;\r\n\r\n    CarHeadlampTiltAdjustmentKnobVerificationAndValidation(Real tiltAngle) {\r\n      this.tiltAngle = tiltAngle;\r\n      isValid = (tiltAngle >= MIN_TILT_ANGLE) && (tiltAngle <= MAX_TILT_ANGLE);\r\n    }\r\n\r\n    Boolean isTiltAngleValid() {\r\n      return isValid;\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nExplanation:\r\n\r\n- The `CarHeadlampTiltAdjustmentKnobVerificationAndValidation` package",
    "\n\n```\npackage DataTypes {\n  class UnsignedInteger {\n    value : Integer [0..2^32-1]\n  }\n  class UnsignedFloat {\n    value : Real [0..1.7976931348623157e+308]\n  }\n  class DateTime {\n    value : String [0..255]\n  }\n  class String {\n    value : String [0..255]\n  }\n  class Boolean {\n    value : Boolean\n  }\n  class Color {\n    value : String [0..255]\n  }\n  class Diameter {\n    value : Real [0..1.7976931348623157e+308]\n    unit : String [0..255]\n    defaultValue : String [0..255]\n  }\n  class Status {\n    severity : String [0..255]\n    color : Color\n  }\n}\n```",
    "\n\n```\npackage CollectionManagement {\n  class Bag {\n    Set<SparePart> parts;\n  }\n  \n  class SparePart {\n    String name;\n    Real price;\n  }\n  \n  class List {\n    Integer[] numbers;\n  }\n  \n  class Set {\n    String[] strings;\n  }\n  \n  class OrderedSet {\n    Set<Person> personnel;\n  }\n  \n  class Person {\n    String name;\n    Integer age;\n    String department;\n  }\n  \n  class Real {\n    Real[] numbers;\n  }\n  \n  class CollectionManager {\n    Bag archive;\n    List numbers;\n    Set strings;\n    OrderedSet personnel;\n    Real[] reals;\n    \n    CollectionManager() {\n      archive = new Bag();\n      numbers = new List();\n      strings = new Set();\n      personnel = new OrderedSet();\n      reals = new Real[4];\n    }\n    \n    void addSparePart(SparePart part) {\n      archive.parts.add(part);\n    }\n    \n    void addNumber(Integer number) {\n      numbers.numbers[numbers.length()] = number;\n    }\n    \n    void addString(String string) {\n      strings.strings.add(string);\n    }\n    \n    void addPerson(Person person) {\n      personnel.",
    "\n\n```\npackage TireInfoModel {\n  class Tire {\n    manufacturer : String[1..1];\n    rimDiameter : Real[1..1];\n    tireWidth : Real[1..1];\n    installationPosition : CoordinateVector[0..1];\n  }\n  \n  class CoordinateVector {\n    x : Real[1..1];\n    y : Real[1..1];\n    z : Real[1..1];\n  }\n}\n```\r\n\r\nExplanation:\r\n\r\nThe model consists of two classes: Tire and CoordinateVector. The Tire class has four attributes: manufacturer, rimDiameter, tireWidth, and installationPosition. The manufacturer attribute is a String with a maximum length of 1, which means that it can only store one manufacturer name. The rimDiameter and tireWidth attributes are both of type Real, which means that they can store floating-point numbers. The installationPosition attribute is optional, which means that it can have zero or one values. If it has one value, it must be of type CoordinateVector. The CoordinateVector class has three attributes: x, y, and z, which are all of type Real. These attributes represent the three-dimensional coordinates of the",
    "The following is an OMG SysML v2 textual model for the given requirements:\r\n\r\n```\r\n@startuml\r\n!define OMG {\r\n  <size:18><color:#FFFFFF>\r\n  <b>OMG</b>\r\n  <color:#FFFFFF>\r\n  <i>Object Management Group</i>\r\n  <color:#FFFFFF>\r\n}\r\n\r\n@enduml\r\n```\r\n\r\nThis model defines the OMG as a separate entity, with a size of 18 and white text color. The text \"OMG\" is bold and italicized, and the text color is white.",
    "The following is an OMG SysML v2 textual model for the given requirements:\r\n\r\n```\r\npackage MaterialsScienceModel {\r\n  class Substance {\r\n    name : String[1..1];\r\n    atomicMass : Float[1..1];\r\n  }\r\n  \r\n  class Material {\r\n    name : String[1..1];\r\n    substance : Substance[1..1];\r\n    massFraction : Float[0..1];\r\n  }\r\n  \r\n  class Alloy {\r\n    name : String[1..1];\r\n    materials : Material[1..*];\r\n    tensileStrength : Float[0..1];\r\n  }\r\n  \r\n  class Metal {\r\n    name : String[1..1];\r\n    atomicMass : Float[1..1];\r\n    tensileStrength : Float[0..1];\r\n  }\r\n  \r\n  class CommonMetals {\r\n    iron : Metal[1..1];\r\n    carbon : Metal[1..1];\r\n    manganese : Metal[1..1];\r\n  }\r\n  \r\n  class TypicalAlloys {\r\n    steel980 : Alloy[1..1];\r\n  }\r\n  \r\n  package CommonMaterials {\r\n    iron : Material[1..1];\r\n    carbon : Material[1..1];\r\n   ",
    "The OMG SysML v2 textual model for the engineering materials database system is as follows:\r\n\r\n```\r\npackage MaterialsDatabase {\r\n  class Material {\r\n    name : String[1..1];\r\n    description : String[0..1];\r\n    composition : Composition[0..1];\r\n    mechanicalProperties : MechanicalProperties[0..1];\r\n  }\r\n  \r\n  class Composition {\r\n    elements : Element[1..*];\r\n  }\r\n  \r\n  class Element {\r\n    name : String[1..1];\r\n    massFraction : Float[0..1];\r\n  }\r\n  \r\n  class MechanicalProperties {\r\n    tensileStrength : Float[0..1];\r\n  }\r\n  \r\n  class UnitConverter {\r\n    convert(value : Float[0..1], fromUnit : String[1..1], toUnit : String[1..1]) : Float[0..1];\r\n  }\r\n  \r\n  class Steel_980 extends Material {\r\n    composition = Composition {\r\n      elements = [\r\n        Element { name = \"iron\", massFraction = 0.01 },\r\n        Element { name = \"carbon\", massFraction = 0.02 },\r\n        Element { name = \"manganese\", massFraction = 0.03",
    "The following is an OMG SysML v2 textual model for the given requirements:\r\n\r\n```\r\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"System\" {\r\n  actor \"User\" as User\r\n\r\n  package \"Message Broker\" {\r\n    component \"Message Broker\" as MessageBroker {\r\n      interface \"Message Broker API\" as MessageBrokerAPI {\r\n        operation \"Publish Message\" as PublishMessage(topic: String, message: String)\r\n        operation \"Subscribe to Topic\" as SubscribeToTopic(topic: String)\r\n        operation \"Unsubscribe from Topic\" as UnsubscribeFromTopic(topic: String)\r\n        operation \"Receive Message\" as ReceiveMessage(topic: String, message: String)\r\n      }\r\n      interface \"Message Broker Database\" as MessageBrokerDB {\r\n        database \"Message Broker Database\" as MessageBrokerDB\r\n      }\r\n      MessageBrokerAPI -down-> MessageBrokerDB\r\n    }\r\n  }\r\n\r\n  package \"Message Producers\" {\r\n    component \"Message Producer\" as MessageProducer {\r\n      interface \"Message Producer API\" as MessageProducerAPI {\r\n        operation \"Publish Message\" as PublishMessage(topic: String, message: String)\r\n      }\r\n      MessageProducerAPI -down-> MessageBrokerAPI\r\n    }\r\n  }\r\n\r\n  package \"Message",
    "The system is designed to provide a vehicle fuel system that can effectively manage fuel consumption and provide a continuous and stable fuel supply to the engine. The fuel tank assembly is responsible for providing fuel to the engine, and after combustion and usage, the engine returns the unused fuel back to the fuel tank. The system can monitor and transmit information on the fuel temperature to ensure operational safety and system efficiency. The fuel system design ensures that the vehicle receives a continuous and stable fuel supply during operation, effectively recycles excess fuel, and optimizes resource utilization.",
    "The following is an OMG SysML v2 textual model for the given requirements:\r\n\r\n```\r\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"Publish-Subscribe Message Flow Architecture\" {\r\n  actor \"Producer\" as producer\r\n  actor \"Server\" as server\r\n  actor \"Consumer\" as consumer\r\n\r\n  package \"Message Flow\" {\r\n    entity \"Topic\" as topic\r\n    entity \"Message\" as message\r\n\r\n    producer -down-> server : publishes messages\r\n    server -down-> consumer : delivers messages\r\n\r\n    server -down-> topic : subscribes to topics\r\n    consumer -down-> topic : subscribes to topics\r\n\r\n    server -down-> message : sends messages to subscribers\r\n    consumer -down-> message : receives messages from server\r\n  }\r\n}\r\n\r\n@enduml\r\n```\r\n\r\nExplanation:\r\n\r\n- The model starts with the definition of the system and its three main participants: producer, server, and consumer.\r\n- The system requires that producers can publish messages to the server, which is represented by the producer entity.\r\n- The server needs to deliver messages to consumers who have subscribed to specific topics, which is represented by the server entity.\r\n- The server subscribes to topics",
    "\r\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"Transportation System\" {\r\n  actor \"Driver\" as driver\r\n  actor \"Passenger 1\" as passenger1\r\n  actor \"Passenger 2\" as passenger2\r\n  actor \"Passenger 3\" as passenger3\r\n  actor \"Passenger 4\" as passenger4\r\n  entity \"Vehicle\" as vehicle\r\n  entity \"Gas Station\" as gasStation\r\n  entity \"Fuel Tank\" as fuelTank\r\n  entity \"Environmental Factors\" as environmentalFactors\r\n\r\n  driver -down-> vehicle\r\n  passenger1 -down-> vehicle\r\n  passenger2 -down-> vehicle\r\n  passenger3 -down-> vehicle\r\n  passenger4 -down-> vehicle\r\n\r\n  vehicle -down-> fuelTank\r\n  vehicle -down-> environmentalFactors\r\n\r\n  driver -down-> gasStation\r\n  driver -down-> fuelTank\r\n  driver -down-> environmentalFactors\r\n\r\n  driver -down-> passenger1\r\n  driver -down-> passenger2\r\n  driver -down-> passenger3\r\n  driver -down-> passenger4\r\n\r\n  \"Driver\" -[hidden]-> \"Passenger 1\"\r\n  \"Driver\" -[hidden]-> \"Passenger 2\"\r\n  \"Driver\" -[",
    "\n\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"Vehicle Fuel Management System\" {\r\n  package \"Fuel Tank Assembly\" {\r\n    component \"Fuel Tank\" {\r\n      artifact \"Fuel Tank\"\r\n      artifact \"Fuel Tank Control Unit\"\r\n      artifact \"Fuel Tank Sensor Unit\"\r\n      artifact \"Fuel Tank Actuator Unit\"\r\n      artifact \"Fuel Tank Interface\"\r\n      artifact \"Fuel Tank Actuator Unit\"\r\n      artifact \"Fuel Tank Sensor Unit\"\r\n      artifact \"Fuel Tank Control Unit\"\r\n      artifact \"Fuel Tank\"\r\n    }\r\n    component \"Fuel Supply Pump\" {\r\n      artifact \"Fuel Supply Pump\"\r\n      artifact \"Fuel Supply Pump Control Unit\"\r\n      artifact \"Fuel Supply Pump Sensor Unit\"\r\n      artifact \"Fuel Supply Pump Actuator Unit\"\r\n      artifact \"Fuel Supply Pump Interface\"\r\n      artifact \"Fuel Supply Pump Actuator Unit\"\r\n      artifact \"Fuel Supply Pump Sensor Unit\"\r\n      artifact \"Fuel Supply Pump Control Unit\"\r\n      artifact \"Fuel Supply Pump\"\r\n    }\r\n    component \"Fuel Return Pump\" {\r\n      artifact \"Fuel Return Pump\"\r\n      artifact \"Fuel Return Pump Control Unit\"",
    "\n\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"Vehicle Fuel System Management System\" {\r\n  component \"Fuel Tank Assembly\" {\r\n    interface \"Fuel Supply Port\" {\r\n      operation \"Supply Fuel\"\r\n      operation \"Return Fuel\"\r\n    }\r\n    interface \"Fuel Temperature Sensor\" {\r\n      operation \"Read Temperature\"\r\n    }\r\n  }\r\n  component \"Engine\" {\r\n    interface \"Fuel Supply Port\" {\r\n      operation \"Receive Fuel\"\r\n    }\r\n    interface \"Fuel Temperature Sensor\" {\r\n      operation \"Read Temperature\"\r\n    }\r\n  }\r\n  component \"Fuel Tank\" {\r\n    interface \"Fuel Temperature Sensor\" {\r\n      operation \"Read Temperature\"\r\n    }\r\n  }\r\n  \"Fuel Tank Assembly\" ..> \"Fuel Tank\" : \"Fuel Supply Port\"\r\n  \"Engine\" ..> \"Fuel Tank\" : \"Fuel Supply Port\"\r\n  \"Fuel Tank Assembly\" ..> \"Fuel Temperature Sensor\" : \"Fuel Temperature Sensor\"\r\n  \"Engine\" ..> \"Fuel Temperature Sensor\" : \"Fuel Temperature Sensor\"\r\n  \"Fuel Tank\" ..> \"Fuel Temperature Sensor\" : \"Fuel Temperature Sensor\"\r\n}\r\n@enduml",
    "The following is an OMG SysML v2 textual model for the given requirements:\r\n\r\n```\r\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"Real-World Scenes\" {\r\n  actor \"User\" as user\r\n\r\n  package \"Photo Capture System\" {\r\n    component \"Scene Selector\" as sceneSelector\r\n    component \"Scene Focuser\" as sceneFocuser\r\n    component \"Photo Capture Device\" as photoCaptureDevice\r\n    component \"Photo Output Device\" as photoOutputDevice\r\n\r\n    user -down-> sceneSelector\r\n    sceneSelector -down-> sceneFocuser\r\n    sceneFocuser -down-> photoCaptureDevice\r\n    photoCaptureDevice -down-> photoOutputDevice\r\n  }\r\n}\r\n\r\n@enduml\r\n```\r\n\r\nExplanation:\r\n\r\n- The model consists of a package for the real-world scenes and a package for the photo capture system.\r\n- The real-world scenes package contains an actor for the user and a package for the photo capture system.\r\n- The photo capture system package contains components for the scene selector, scene focuser, photo capture device, and photo output device.\r\n- The user interacts with the scene selector to select a scene they wish to capture.\r",
    "\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"Photography Workflow System\" {\r\n  actor \"User\" as user\r\n  entity \"Scene\" as scene\r\n  entity \"Intermediate Image\" as intermediate_image\r\n  entity \"Final Image\" as final_image\r\n\r\n  user -> scene : Select or Set Scene\r\n  scene -> intermediate_image : Focusing\r\n  intermediate_image -> final_image : Shooting\r\n}\r\n@enduml",
    "\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"Photography Workflow System\" {\r\n  actor \"User\" as user\r\n  entity \"Scene\" as scene\r\n  entity \"Image\" as image\r\n  entity \"Photograph\" as photograph\r\n\r\n  user -down-> scene\r\n  scene -down-> image\r\n  image -down-> photograph\r\n\r\n  package \"Focusing\" {\r\n    entity \"Focusing Process\" as focusingProcess\r\n    entity \"Focusing Lens\" as focusingLens\r\n    entity \"Focusing Filter\" as focusingFilter\r\n\r\n    user -down-> focusingProcess\r\n    focusingProcess -down-> focusingLens\r\n    focusingProcess -down-> focusingFilter\r\n  }\r\n\r\n  package \"Shooting\" {\r\n    entity \"Shooting Process\" as shootingProcess\r\n    entity \"Lighting\" as lighting\r\n    entity \"Camera\" as camera\r\n    entity \"Lens\" as lens\r\n    entity \"Filter\" as filter\r\n    entity \"Stabilizer\" as stabilizer\r\n    entity \"Flash\" as flash\r\n\r\n    user -down-> shootingProcess\r\n    shootingProcess -down-> lighting\r\n    shootingProcess -down-> camera\r\n    shootingProcess -down-> lens\r\n    shootingProcess -down-> filter\r\n    shootingProcess -down",
    "\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"Photography System\" {\r\n  actor \"User\" as user\r\n  entity \"Photography Scene\" as scene\r\n  entity \"Focus Image\" as focus\r\n  entity \"Photograph\" as photo\r\n  entity \"Camera\" as camera\r\n\r\n  user -down-> scene\r\n  scene -down-> focus\r\n  focus -down-> photo\r\n  photo -down-> camera\r\n\r\n  package \"Focus Processing\" {\r\n    component \"Focus Algorithm\" as focusAlg\r\n    focusAlg -down-> focus\r\n  }\r\n\r\n  package \"Photography Operation\" {\r\n    component \"Photography Software\" as photoSoft\r\n    photoSoft -down-> photo\r\n  }\r\n\r\n  package \"Integrated System\" {\r\n    component \"Photography System\" as photoSys\r\n    photoSys -down-> focusAlg\r\n    photoSys -down-> photoSoft\r\n  }\r\n}\r\n\r\n@enduml",
    "The following is an OMG SysML v2 textual model for the PhotographyWorkflow software package:\r\n\r\n```\r\npackage PhotographyWorkflow {\r\n  class Focus {\r\n    operation FocusOnScene(scene: Scene)\r\n  }\r\n  \r\n  class Scene {\r\n    attribute name: String\r\n    attribute location: String\r\n    attribute time: Date\r\n  }\r\n  \r\n  class Image {\r\n    attribute scene: Scene\r\n    attribute focus: Focus\r\n    attribute frame: Picture\r\n  }\r\n  \r\n  class Shoot {\r\n    operation ShootScene(scene: Scene)\r\n  }\r\n  \r\n  class Picture {\r\n    attribute image: Image\r\n    attribute shoot: Shoot\r\n    attribute output: File\r\n  }\r\n  \r\n  class File {\r\n    attribute name: String\r\n    attribute location: String\r\n    attribute type: String\r\n  }\r\n  \r\n  Focus.FocusOnScene.scene -> Scene\r\n  Scene.name, Scene.location, Scene.time -> Image.scene\r\n  Focus.FocusOnScene.scene -> Image.focus\r\n  Image.scene, Image.focus -> Image.frame\r\n  Shoot.ShootScene.scene -> Picture.shoot\r\n  Picture.shoot -> Picture.output\r\n  Picture.output -> File.name, File.location, File.type\r\n}\r\n```\r\n\r\nThis model defines the classes and relationships involved in the PhotographyWorkflow",
    "\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"Photography Workflow System\" {\r\n  actor \"User\" as user\r\n  entity \"Camera\" as camera\r\n  entity \"Scene\" as scene\r\n  entity \"Photograph\" as photograph\r\n\r\n  user -r-> camera\r\n  camera -u-> scene\r\n  scene -d-> camera\r\n  camera -d-> photograph\r\n}\r\n\r\n@enduml",
    "\r\n```\r\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"Photography System\" {\r\n  actor \"User\" as User\r\n\r\n  package \"Photography Workflow\" {\r\n    usecase \"Capture High-Quality Photographs\" as CapturePhoto {\r\n      actor User\r\n      boundary \"Photography System\"\r\n      control \"Photography System\"\r\n      entity \"Scene\" as Scene\r\n      entity \"Image\" as Image\r\n\r\n      User -> CapturePhoto : Selects a scene\r\n      CapturePhoto -> \"Photography System\" : Requests focus on scene\r\n      \"Photography System\" -> CapturePhoto : Generates focused image\r\n      CapturePhoto -> \"Photography System\" : Evaluates focus quality\r\n      \"Photography System\" -> CapturePhoto : Proceeds with shooting if image is well-focused\r\n      CapturePhoto -> \"Photography System\" : Converts focused image to photograph\r\n      \"Photography System\" -> CapturePhoto : Produces final photo\r\n      CapturePhoto -> User : Displays final photo\r\n    }\r\n  }\r\n}\r\n\r\n@enduml\r\n```",
    "\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"Photography Workflow System\" {\r\n  actor \"User\" as user\r\n  entity \"Camera\" as camera\r\n  entity \"Lens\" as lens\r\n  entity \"Focus Function\" as focus\r\n  entity \"Shooting Function\" as shooting\r\n  entity \"Display\" as display\r\n  entity \"Image\" as image\r\n\r\n  user -u-|> camera\r\n  camera -d-|> image\r\n  camera -u-|> lens\r\n  lens -u-|> focus\r\n  focus -u-|> image\r\n  image -u-|> shooting\r\n  shooting -u-|> display\r\n}\r\n\r\n@enduml",
    "\r\nentity BrakingSystem {\r\n  ownedAttribute brakePedal : BrakePedal\r\n  ownedAttribute tractionInformation : TractionInformation\r\n  ownedAttribute brakePressure : BrakePressure\r\n  ownedAttribute modulationFrequency : ModulationFrequency\r\n  ownedAttribute brakingPerformance : BrakingPerformance\r\n  ownedAttribute brakingStatus : BrakingStatus\r\n  ownedAttribute brakingControl : BrakingControl\r\n  ownedAttribute brakingRegulation : BrakingRegulation\r\n  ownedAttribute brakingSystem : BrakingSystem\r\n}\r\n\r\nentity BrakePedal {\r\n  attribute pressure : Real\r\n}\r\n\r\nentity TractionInformation {\r\n  attribute roadAdhesion : Boolean\r\n  attribute roadCondition : String\r\n}\r\n\r\nentity BrakePressure {\r\n  attribute pressure : Real\r\n}\r\n\r\nentity ModulationFrequency {\r\n  attribute frequency : Real\r\n}\r\n\r\nentity BrakingPerformance {\r\n  attribute performance : Real\r\n}\r\n\r\nentity BrakingStatus {\r\n  attribute status : String\r\n}\r\n\r\nentity BrakingControl {\r\n  attribute control : Boolean\r\n}\r\n\r\nentity BrakingRegulation {\r\n  attribute regulation : Boolean\r\n}\r\n\r\nentity BrakingSystem {\r\n  attribute system : Boolean\r\n}\r\n\r\nrelationship ownedAttribute",
    "\n\n```\n@startuml\n\npackage \"Battery Charging Control System\" {\n  component \"Battery Monitor\" as BatteryMonitor {\n    interface \"Current Level\" as CurrentLevel\n    interface \"Battery Level\" as BatteryLevel\n    interface \"Charging Status\" as ChargingStatus\n  }\n  component \"Charging Control\" as ChargingControl {\n    interface \"Charge Supply\" as ChargeSupply\n    interface \"Charging Termination\" as ChargingTermination\n  }\n  BatteryMonitor -down-> ChargingControl\n  ChargingControl -down-> ChargeSupply\n  ChargingControl -down-> ChargingTermination\n}\n\n@enduml\n```",
    "\n\n```\n@startuml\n\npackage \"Battery Charging System\" {\n  component \"Battery Monitor\" as BatteryMonitor {\n    interface \"Current Level\" as CurrentLevel\n    interface \"Battery Level\" as BatteryLevel\n    interface \"Charging Status\" as ChargingStatus\n    interface \"Charging Control\" as ChargingControl\n    interface \"Battery Replenishment\" as BatteryReplenishment\n  }\n  component \"Battery Charger\" as BatteryCharger {\n    interface \"Charging Power\" as ChargingPower\n    interface \"Battery Level\" as BatteryLevel\n    interface \"Charging Status\" as ChargingStatus\n    interface \"Charging Control\" as ChargingControl\n  }\n  BatteryMonitor -down-> BatteryCharger\n  BatteryMonitor -down-> \"Battery Replenishment\"\n  BatteryCharger -down-> \"Battery Replenishment\"\n  \"Battery Replenishment\" -down-> BatteryCharger\n  \"Battery Replenishment\" -down-> BatteryMonitor\n}\n\n@enduml\n```",
    "\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"Camera System\" {\r\n  actor \"User\" as user\r\n  entity \"Camera\" as camera\r\n  entity \"Focusing Subsystem\" as focusing\r\n  entity \"Imaging Subsystem\" as imaging\r\n  entity \"Photograph\" as photograph\r\n  entity \"Photo Storage\" as photo_storage\r\n\r\n  user -r-> camera\r\n  camera -d-> focusing\r\n  focusing -d-> imaging\r\n  imaging -u-> photograph\r\n  photograph -d-> photo_storage\r\n}\r\n\r\n@enduml",
    "\r\nThe following is an OMG SysML v2 textual model for the shooting process of a digital camera:\r\n\r\n```\r\npackage shootingProcess\r\n\r\nimport cameraModule\r\nimport imagingModule\r\n\r\nentity ShootingProcess {\r\n  ownedAttribute cameraModule.Camera camera\r\n  ownedAttribute imagingModule.Imaging imaging\r\n\r\n  operation start()\r\n  operation stop()\r\n  operation selectScene()\r\n  operation captureImage()\r\n}\r\n\r\ncameraModule.Camera <|-|> ShootingProcess\r\nimagingModule.Imaging <|-|> ShootingProcess\r\n```\r\n\r\nIn this model, the `ShootingProcess` entity is composed of two owned attributes: `camera` and `imaging`. These attributes are typed by the respective modules, which are assumed to be implemented elsewhere in the system. The `start` and `stop` operations are used to start and stop the shooting process, respectively. The `selectScene` operation is used to select the shooting scene, which is passed to the `camera` module for focusing. Finally, the `captureImage` operation is used to capture the final photo, which is produced by the `imaging` module. The `camera` and `imaging`",
    "The following is an OMG SysML v2 textual model for the given requirements:\r\n\r\n```\r\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"Vehicle Simulation System\" {\r\n  class \"Vehicle\" {\r\n    + mass : double\r\n    + initialPosition : double\r\n    + initialVelocity : double\r\n    + timeInterval : double\r\n    + powerInputSequence : double[]\r\n    + positionSequence : double[]\r\n    + speedSequence : double[]\r\n    + position : double\r\n    + speed : double\r\n    + time : double\r\n    + simulate() : void\r\n  }\r\n  \r\n  \"Vehicle\" --|> \"Vehicle\"\r\n}\r\n\r\n@enduml\r\n```\r\n\r\nExplanation:\r\n\r\n- The model defines a package named \"Vehicle Simulation System\" that contains a class named \"Vehicle\".\r\n- The \"Vehicle\" class has the following attributes:\r\n  - mass: a double value representing the mass of the vehicle.\r\n  - initialPosition: a double value representing the initial position of the vehicle.\r\n  - initialVelocity: a double value representing the initial velocity of the vehicle.\r\n  - timeInterval: a double value representing the time interval of each simulation step.\r\n  - powerInputSequence: a double array representing the power input sequence.\r\n  -",
    "\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"Camera Shooting and Display System\" {\r\n  actor \"User\" as user\r\n  entity \"Scene\" as scene\r\n  entity \"Image\" as image\r\n  entity \"Photo\" as photo\r\n  entity \"Display\" as display\r\n\r\n  user -down-> scene\r\n  scene -down-> image\r\n  image -down-> photo\r\n  photo -down-> display\r\n}\r\n\r\n@enduml",
    "\n\n```\n@startuml\n\npackage \"Camera Information Processing Workflow\" {\n  actor \"User\" as user\n  entity \"Camera\" as camera\n  entity \"Viewfinder\" as viewPort\n  entity \"Image\" as image\n  entity \"Picture\" as picture\n  entity \"Display Port\" as displayPort\n\n  user -d-|> camera\n  camera -d-|> viewPort\n  viewPort -u-|> image\n  image -u-|> picture\n  picture -d-|> displayPort\n}\n\n@enduml\n```",
    "\n\n```\n@startuml\n\npackage \"System\" {\n  component \"Sensor Manager\" {\n    interface \"Sensor Interface\" {\n      operation \"Update Sensor\"\n    }\n    component \"Sensor Monitor\" {\n      interface \"Sensor Monitor Interface\" {\n        operation \"Monitor Sensor\"\n      }\n      component \"Sensor Update\" {\n        interface \"Sensor Update Interface\" {\n          operation \"Update Sensor\"\n        }\n        component \"Sensor Update Manager\" {\n          interface \"Sensor Update Manager Interface\" {\n            operation \"Update Sensor\"\n          }\n          component \"Sensor Update Worker\" {\n            interface \"Sensor Update Worker Interface\" {\n              operation \"Update Sensor\"\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n@enduml\n```\r\n\r\nExplanation:\r\n\r\n- The system is represented as a package with a single component, \"Sensor Manager\".\r\n- The \"Sensor Manager\" component has two sub-components: \"Sensor Monitor\" and \"Sensor Update Manager\".\r\n- The \"Sensor Monitor\" component is responsible for monitoring the status of all registered sensors and updating the status of any sensor that is in a ready state.\r\n- The \"Sensor Update Manager\" component is responsible for managing the update process for all registered sensors.\r\n",
    "\n\n@startuml\r\n[*] --> Off\r\nOff --> Starting : vehicle start signal\r\nStarting --> On : vehicle power-on signal\r\nOn --> Off : vehicle shutdown signal\r\n@enduml",
    "\n@startuml\r\nstate \"Off\" as off {\r\n  state \"Starting\" as starting {\r\n    [*] --> starting\r\n  }\r\n  state \"On\" as on {\r\n    [*] --> on\r\n  }\r\n}\r\n[*] --> off\r\n\r\nVehicleStartSignal : VehicleStartSignal\r\nVehicleOnSignal : VehicleOnSignal\r\nVehicleOffSignal : VehicleOffSignal\r\n\r\nVehicleStartSignal -down-> starting\r\nVehicleOnSignal -down-> on\r\nVehicleOffSignal -down-> off\r\n\r\n@enduml",
    "\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"Vehicle Power Management System\" {\r\n  actor \"User\" as user\r\n  entity \"Vehicle\" as vehicle\r\n  entity \"Power Supply\" as powerSupply\r\n  entity \"Vehicle Power Status\" as vehiclePowerStatus\r\n\r\n  user -down-> vehicle\r\n  vehicle -down-> powerSupply\r\n  powerSupply -down-> vehiclePowerStatus\r\n\r\n  state \"Off\" as off {\r\n    state \"Start\" as start {\r\n      transition \"Start\" to \"Vehicle Powered-On\"\r\n    }\r\n  }\r\n\r\n  state \"Vehicle Powered-On\" as vehiclePoweredOn {\r\n    state \"Self-Diagnosis\" as selfDiagnosis {\r\n      transition \"Self-Diagnosis\" to \"Vehicle Powered-On\"\r\n    }\r\n    state \"Continuous Power Supply\" as continuousPowerSupply {\r\n      transition \"Continuous Power Supply\" to \"Vehicle Powered-On\"\r\n    }\r\n  }\r\n\r\n  state \"Shutdown\" as shutdown {\r\n    transition \"Shutdown\" to \"Off\"\r\n  }\r\n\r\n  off -down-> start\r\n  start -down-> vehiclePoweredOn\r\n  vehiclePoweredOn -down-> selfDiagnosis\r\n  vehiclePoweredOn -down-> continuousPowerSupply\r\n  continuousPowerSupply -down-> vehiclePower",
    "\n\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"Vehicle Management System\" {\r\n  actor \"User\" as user\r\n\r\n  state \"Shutdown\" as shutdown {\r\n    state \"Shutdown\" as shutdown_state\r\n  }\r\n\r\n  state \"Start-up\" as start_up {\r\n    state \"Start-up\" as start_up_state\r\n  }\r\n\r\n  state \"Running\" as running {\r\n    state \"Running\" as running_state\r\n  }\r\n\r\n  user -down-> shutdown\r\n  user -down-> start_up\r\n  user -down-> running\r\n\r\n  shutdown -down-> shutdown_state\r\n  start_up -down-> start_up_state\r\n  running -down-> running_state\r\n\r\n  user -down-> shutdown_state\r\n  user -down-> start_up_state\r\n  user -down-> running_state\r\n\r\n  shutdown_state -down-> shutdown\r\n  start_up_state -down-> start_up\r\n  running_state -down-> running\r\n\r\n  user -down-> shutdown\r\n  user -down-> start_up\r\n  user -down-> running\r\n\r\n  user -down-> shutdown_state\r\n  user -down-> start_up_state\r\n  user -down-> running_state\r\n\r\n  user -down-> shutdown\r\n  user -down-> start_up",
    "\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"Power Management System\" {\r\n  actor \"User\" as user\r\n  entity \"Vehicle\" as vehicle\r\n  entity \"Power Supply\" as powerSupply\r\n  entity \"Battery\" as battery\r\n  entity \"Charger\" as charger\r\n  entity \"Controller\" as controller\r\n\r\n  user -down-> vehicle\r\n  vehicle -down-> powerSupply\r\n  powerSupply -down-> battery\r\n  battery -down-> charger\r\n  charger -down-> controller\r\n\r\n  state \"Off\" as offState {\r\n    state \"Start\" as startState {\r\n      state \"On\" as onState\r\n    }\r\n  }\r\n\r\n  offState -down-> startState\r\n  startState -down-> onState\r\n  onState -down-> offState\r\n\r\n  note bottom of offState: \"Vehicle is in the Off state.\"\r\n  note bottom of startState: \"Vehicle is in the Start state.\"\r\n  note bottom of onState: \"Vehicle is in the On state.\"\r\n\r\n  user -down-> controller\r\n  controller -down-> vehicle\r\n\r\n  controller -down-> \"Health Monitoring System\" as healthSystem\r\n\r\n  note bottom of healthSystem: \"Vehicle health monitoring system.\"\r\n}\r\n@enduml",
    "The following is an OMG SysML v2 textual model for the given requirements:\r\n\r\n```\r\n@startuml\r\n!define OMG {\r\n  <size:18><color:#FFFFFF>\r\n  <b>OMG</b>\r\n  </color></size>\r\n}\r\n\r\n@enduml\r\n```\r\n\r\nExplanation:\r\n\r\n- The `@startuml` and `@enduml` tags are used to define the start and end of the model.\r\n- The `!define` directive is used to define a custom font and color for the OMG text.\r\n- The `size` and `color` attributes are used to set the font size and color of the OMG text.\r\n- The `b` tag is used to make the OMG text bold.",
    "\n\n```\n@startuml\n\npackage \"Server\" {\n  state \"Off\" as off\n  state \"Waiting\" as waiting\n  state \"Response\" as response\n\n  state \"Off\" : {\n    start() : transition to waiting\n  }\n\n  state \"Waiting\" : {\n    request() : transition to response\n  }\n\n  state \"Response\" : {\n    timeout() : transition to waiting\n  }\n\n  state \"Off\" : {\n    daily() : transition to waiting\n  }\n\n  state \"Waiting\" : {\n    daily() : transition to waiting\n  }\n\n  state \"Response\" : {\n    daily() : transition to waiting\n  }\n\n  state \"Off\" : {\n    power() : transition to on\n  }\n\n  state \"Waiting\" : {\n    power() : transition to on\n  }\n\n  state \"Response\" : {\n    power() : transition to on\n  }\n\n  state \"On\" as on\n  state \"Off\" as off\n\n  on -down-> off : power off\n  off -up-> on : power on\n\n  off -down-> waiting : start\n  waiting -down-> response : request\n  response -down-> waiting : timeout\n  waiting -down-> waiting : daily\n  response -down-> waiting : daily\n  off -down->",
    "\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"Vehicle Start-Stop System\" {\r\n  actor \"Vehicle\" as vehicle\r\n  entity \"Start-Stop Controller\" as controller\r\n  entity \"Brake Pedal\" as brakePedal\r\n  entity \"Parking Brake\" as parkingBrake\r\n\r\n  vehicle -down-> controller\r\n  controller -down-> brakePedal\r\n  controller -down-> parkingBrake\r\n\r\n  state \"Off\" as off {\r\n    state \"Start Signal Received\" as startSignalReceived {\r\n      state \"Waiting for Power-On Signal\" as waitingForPowerOnSignal {\r\n        state \"Power-On Signal Received\" as powerOnSignalReceived {\r\n          state \"Starting Up\" as startingUp {\r\n            state \"Self-Checking\" as selfChecking {\r\n              state \"Operating\" as operating {\r\n                state \"Stop Signal Received\" as stopSignalReceived {\r\n                  state \"Returning to Off State\" as returningToOffState {\r\n                    state \"Applying Parking Brake\" as applyingParkingBrake\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n@enduml",
    "\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"Vehicle Start-Stop and Status Management System\" {\r\n  actor \"Driver\" as driver\r\n  entity \"Vehicle Controller\" as vehicleController\r\n  entity \"Vehicle\" as vehicle\r\n  entity \"Vehicle Start-Stop and Status Management System\" as vssms\r\n\r\n  driver -down-> vssms : \"Receives vehicle start signal\"\r\n  vssms -down-> vehicleController : \"Sends start control signal\"\r\n  vehicleController -down-> vehicle : \"Enters started state\"\r\n  vehicle -down-> vssms : \"Receives power\"\r\n  vssms -down-> vehicleController : \"Sends shutdown signal\"\r\n  vehicleController -down-> vehicle : \"Enters off state\"\r\n  vehicle -down-> vssms : \"Receives parking brake\"\r\n  vssms -down-> vehicleController : \"Sends shutdown signal\"\r\n  vehicleController -down-> vehicle : \"Enters off state\"\r\n  vssms -down-> driver : \"Displays status\"\r\n}\r\n\r\n@enduml",
    "\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"Cruise Control System\" {\r\n  component \"Driver\" as driver {\r\n    interface \"Cruise Control\" as cruiseControl\r\n  }\r\n  component \"Cruise Controller\" as cruiseController {\r\n    interface \"Vehicle Speed\" as vehicleSpeed\r\n    interface \"Fuel Control\" as fuelControl\r\n  }\r\n  component \"Speedometer\" as speedometer {\r\n    interface \"Vehicle Speed\" as vehicleSpeed\r\n  }\r\n  component \"Engine\" as engine {\r\n    interface \"Fuel Control\" as fuelControl\r\n  }\r\n  component \"Vehicle\" as vehicle {\r\n    interface \"Engine\" as engine\r\n  }\r\n  \r\n  driver -down-> cruiseController\r\n  cruiseController -down-> vehicleSpeed\r\n  cruiseController -down-> fuelControl\r\n  cruiseController -down-> speedometer\r\n  speedometer -down-> vehicleSpeed\r\n  cruiseController -down-> engine\r\n  engine -down-> fuelControl\r\n  vehicle -down-> engine\r\n  \r\n  cruiseControl -[hidden]-> cruiseController\r\n  cruiseControl -[hidden]-> speedometer\r\n  cruiseControl -[hidden]-> engine\r\n}\r\n@enduml",
    "\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"Cruise Control System\" {\r\n  component \"Cruise Controller\" {\r\n    interface \"Cruise Control Interface\" {\r\n      operation \"Set Speed\"\r\n      operation \"Get Speed\"\r\n    }\r\n    component \"Speedometer\" {\r\n      interface \"Vehicle Speed Interface\" {\r\n        operation \"Get Speed\"\r\n      }\r\n    }\r\n    component \"Engine System\" {\r\n      interface \"Engine Control Interface\" {\r\n        operation \"Set Throttle\"\r\n      }\r\n    }\r\n    \"Cruise Controller\" ..> \"Speedometer\" : \"Vehicle Speed Interface\"\r\n    \"Cruise Controller\" ..> \"Engine System\" : \"Engine Control Interface\"\r\n  }\r\n}\r\n\r\n\"Cruise Controller\" : \"Set Speed\"\r\n\"Cruise Controller\" : \"Get Speed\"\r\n\"Speedometer\" : \"Get Speed\"\r\n\"Engine System\" : \"Set Throttle\"\r\n@enduml",
    "The following is an OMG SysML v2 textual model for the automotive cruise control system:\r\n\r\n```\r\n@startuml\r\n!define OMG {\r\n  <size:18><color:#FFFFFF>\r\n  <b>OMG</b>\r\n  <color:#FFFFFF>\r\n  <i>Object Management Group</i>\r\n  </size>\r\n}\r\n\r\n@enduml\r\n```\r\n\r\nThis model is a placeholder and does not represent a valid SysML v2 code.",
    "\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"Cruise Control System\" {\r\n  actor \"Driver\" as driver\r\n  entity \"Cruise Controller\" as cruiseController\r\n  entity \"Engine\" as engine\r\n  entity \"Speedometer\" as speedometer\r\n\r\n  driver -> cruiseController : \"Sends cruise speed setting\"\r\n  cruiseController -> engine : \"Sends throttle control instructions\"\r\n  cruiseController <- speedometer : \"Receives real-time speed information\"\r\n}\r\n\r\n@enduml",
    "\r\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"Cruise Control System\" {\r\n  component \"Cruise Controller\" {\r\n    interface \"Cruise Control Interface\" {\r\n      operation \"Set Target Speed\"\r\n      operation \"Receive Actual Speed\"\r\n      operation \"Generate Fuel Control Commands\"\r\n    }\r\n    component \"Engine\" {\r\n      interface \"Engine Interface\" {\r\n        operation \"Receive Fuel Control Commands\"\r\n      }\r\n    }\r\n    component \"Speed Sensor\" {\r\n      interface \"Speed Sensor Interface\" {\r\n        operation \"Receive Speed\"\r\n      }\r\n    }\r\n    component \"Vehicle\" {\r\n      interface \"Vehicle Interface\" {\r\n        operation \"Receive Set Speed\"\r\n      }\r\n    }\r\n    \"Cruise Controller\" ..> \"Cruise Control Interface\"\r\n    \"Cruise Controller\" ..> \"Engine\"\r\n    \"Cruise Controller\" ..> \"Speed Sensor\"\r\n    \"Cruise Controller\" ..> \"Vehicle\"\r\n    \"Engine\" ..> \"Engine Interface\"\r\n    \"Speed Sensor\" ..> \"Speed Sensor Interface\"\r\n    \"Vehicle\" ..> \"Vehicle Interface\"\r\n  }\r\n}\r\n@enduml",
    "The following is an OMG SysML v2 textual model for the given requirements:\r\n\r\n```\r\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"Cruise Control System\" {\r\n  component \"Cruise Controller\" {\r\n    interface \"Cruise Control Interface\" {\r\n      operation \"Set Speed\"\r\n      operation \"Read Speed\"\r\n    }\r\n    interface \"Fuel Control Interface\" {\r\n      operation \"Calculate Fuel Control\"\r\n      operation \"Transmit Fuel Control\"\r\n    }\r\n    interface \"Engine Control Interface\" {\r\n      operation \"Receive Fuel Control\"\r\n      operation \"Transmit Engine Control\"\r\n    }\r\n    component \"Speed Sensor\" {\r\n      interface \"Speed Sensor Interface\" {\r\n        operation \"Read Speed\"\r\n      }\r\n    }\r\n    component \"Engine Controller\" {\r\n      interface \"Engine Control Interface\" {\r\n        operation \"Receive Engine Control\"\r\n        operation \"Transmit Engine Signal\"\r\n      }\r\n    }\r\n  }\r\n  component \"Driver\" {\r\n    interface \"Driver Interface\" {\r\n      operation \"Send Set Speed\"\r\n    }\r\n  }\r\n  \"Driver\" -> \"Cruise Controller\" : \"Send Set Speed\"\r\n  \"Cruise Controller\" -> \"Speed Sensor\" : \"Read Speed\"\r\n  \"Cruise Controller\" -> \"",
    "\r\nVehicleLifecycleManagementSystem:\r\n  - Vehicle:\r\n    - assemblyDate: Date\r\n    - deliveryDate: Date\r\n    - owner:\r\n      - ownerName: String\r\n      - ownerAddress: String\r\n      - ownerPhone: String\r\n    - ownershipHistory:\r\n      - ownershipPeriod:\r\n        - startDate: Date\r\n        - endDate: Date\r\n        - owner:\r\n          - ownerName: String\r\n          - ownerAddress: String\r\n          - ownerPhone: String\r\n        - drivingHistory:\r\n          - drivingPeriod:\r\n            - startDate: Date\r\n            - endDate: Date\r\n            - driver: String\r\n          - drivingPeriod:\r\n            - startDate: Date\r\n            - endDate: Date\r\n            - driver: String\r\n          - ...\r\n        - ...\r\n      - ownershipPeriod:\r\n        - startDate: Date\r\n        - endDate: Date\r\n        - owner:\r\n          - ownerName: String\r\n          - ownerAddress: String\r\n          - ownerPhone: String\r\n        - drivingHistory:\r\n          - drivingPeriod:\r\n            - startDate: Date\r\n            - endDate: Date\r\n            - driver: String\r\n          - drivingPeriod:\r\n            - startDate: Date\r\n            - endDate: Date\r\n            - driver: String\r\n          - ...\r\n        - ...\r\n      - ...\r\n    - scrappingDate: Date\r\n  - Vehicle:\r\n    - assemblyDate: Date\r\n    - deliveryDate: Date\r\n    - owner:",
    "\n\nVehicle [Vehicle] {\n  mass : Real [0..1]\n  operationalStatus : OperationalStatus [1..1]\n  driver : Driver [1..1]\n  engine : Engine [1..1]\n  wheels : Wheel [1..*]\n}\n\nOperationalStatus [Enumeration] {\n  \"running\"\n  \"stopped\"\n  \"starting\"\n  \"stopping\"\n}\n\nDriver [ExternalReference] {\n  name : String [0..1]\n  contactInfo : String [0..1]\n}\n\nEngine [Component] {\n  type : String [0..1]\n  fuelType : String [0..1]\n  horsepower : Real [0..1]\n  torque : Real [0..1]\n  cylinders : Integer [0..1]\n  displacement : Real [0..1]\n  compressionRatio : Real [0..1]\n  valveTrain : ValveTrain [0..1]\n}\n\nValveTrain [Component] {\n  type : String [0..1]\n  pressure : Real [0..1]\n  flowRate : Real [0..1]\n  valves : Valve [1..*]\n",
    "\n\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"Composite System\" {\r\n  package \"Vehicle\" {\r\n    entity \"Vehicle_1\" {\r\n      attribute \"mass\" : double\r\n      attribute \"gear\" : integer\r\n      attribute \"accelerator position\" : double\r\n    }\r\n  }\r\n  package \"Engine\" {\r\n    entity \"Engine_1\" {\r\n      attribute \"power\" : double\r\n    }\r\n  }\r\n  package \"Driver\" {\r\n    entity \"Driver_1\" {\r\n      attribute \"speed\" : double\r\n    }\r\n  }\r\n  package \"Relationships\" {\r\n    \"Vehicle_1\" *-- \"Engine_1\"\r\n    \"Vehicle_1\" *-- \"Driver_1\"\r\n  }\r\n  package \"Time\" {\r\n    entity \"Time_1\" {\r\n      attribute \"initial\" : timestamp\r\n      attribute \"next\" : timestamp\r\n    }\r\n  }\r\n  package \"Attributes\" {\r\n    \"Vehicle_1\" o-- \"Time_1\"\r\n    \"Vehicle_1\" o-- \"Time_2\"\r\n    \"Engine_1\" o-- \"Time_1\"\r\n    \"Engine_1\" o-- \"Time_2\"\r\n    \"Driver_1\" o-- \"Time_1\"\r\n    \"Driver_1\" o",
    "\n\nVehicle:\n  - mass: Real\n  - currentGear: GearPosition\n  - currentThrottle: Real\n  - driver: Driver\n  - timeSlice: TimeSlice\n\nDriver:\n  - name: String\n\nGearPosition:\n  - neutral: Gear\n  - first: Gear\n  - second: Gear\n  - third: Gear\n  - fourth: Gear\n\nGear:\n  - name: String\n\nTimeSlice:\n  - startTime: DateTime\n  - endTime: DateTime\n\nAlice:\n  - name: String\n\nBob:\n  - name: String\n\nInitial state:\n  - Vehicle.mass = 2000\n  - Vehicle.currentGear = GearPosition.neutral\n  - Vehicle.currentThrottle = 0\n  - Vehicle.driver = Alice\n  - Vehicle.timeSlice = TimeSlice(1, 2)\n  - Alice.name = \"Alice\"\n  - Bob.name = \"Bob\"\n\nEvent:\n  - Vehicle.mass = 1500\n  - Vehicle.currentGear = GearPosition.second\n  - Vehicle.currentThrottle = 0.5\n  - Vehicle.driver = Bob\n  - Vehicle.timeSlice = TimeSlice(2, ",
    "The following is an OMG SysML v2 textual model for the given requirements:\r\n\r\n```\r\npackage VehicleMassModel {\r\n  class Vehicle {\r\n    aggregation composite\r\n    attribute String name\r\n    attribute Mass mass\r\n    attribute Mass totalMass\r\n  }\r\n  \r\n  class Component {\r\n    aggregation composite\r\n    attribute String name\r\n    attribute Mass mass\r\n    attribute Mass totalMass\r\n  }\r\n  \r\n  class Mass {\r\n    attribute Real value\r\n    attribute String unit\r\n  }\r\n  \r\n  Vehicle.totalMass -> Mass\r\n  Component.totalMass -> Mass\r\n  Component.mass -> Mass\r\n  Vehicle.mass -> Mass\r\n  \r\n  Component.subcomponents -> Component\r\n  Vehicle.subcomponents -> Component\r\n  \r\n  Component.parent -> Vehicle\r\n  Vehicle.parent -> null\r\n  \r\n  Component.children -> Component\r\n  Vehicle.children -> Component\r\n  \r\n  Component.aggregate -> Component\r\n  Vehicle.aggregate -> null\r\n  \r\n  Component.aggregateType -> String\r\n  Vehicle.aggregateType -> null\r\n  \r\n  Component.aggregateQuantity -> Real\r\n  Vehicle.aggregateQuantity -> null\r\n  \r\n  Component.aggregateMass -> Mass\r\n  Vehicle.aggregateMass -> null\r\n  \r\n  Component.aggregateTotalMass -> Mass\r\n  Vehicle.aggregateTotalMass -> null\r\n  \r\n  Component.aggregateComponents -> Component\r\n  Vehicle.aggregateComponents -> null\r\n  \r\n  Component.aggregateComponentQuantity -> Real\r\n  Vehicle.aggregateComponentQuantity -> null\r\n  \r\n  Component.aggregateComponentMass",
    "The following is an OMG SysML v2 textual model for the given requirements:\r\n\r\n```\r\npackage QualityManagement {\r\n  class Vehicle {\r\n    attribute String VIN\r\n    attribute String name\r\n    attribute Mass totalMass\r\n    attribute Mass engineMass\r\n    attribute Mass transmissionMass\r\n    attribute Mass otherMass\r\n    composition Component[] components\r\n  }\r\n  \r\n  class Component {\r\n    attribute String serialNumber\r\n    attribute Mass mass\r\n    attribute String name\r\n    attribute String type\r\n    attribute String subtype\r\n    attribute String description\r\n    attribute String manufacturer\r\n    attribute String model\r\n    attribute String version\r\n    attribute String partNumber\r\n    attribute String material\r\n    attribute String color\r\n    attribute String shape\r\n    attribute String weight\r\n    attribute String dimensions\r\n    attribute String configuration\r\n    attribute String usage\r\n    attribute String purpose\r\n    attribute String function\r\n    attribute String location\r\n    attribute String notes\r\n  }\r\n  \r\n  class Mass {\r\n    attribute Real value\r\n    attribute String unit\r\n  }\r\n  \r\n  operation calculateTotalMass(Vehicle vehicle) {\r\n    // Recursive function to calculate total mass of a vehicle and its components\r\n    // based on the threshold value set by the user\r\n    if (vehicle.totalMass.value == null) {\r\n      vehicle.totalMass.value = 0.0\r\n    }\r\n    for (c : vehicle.components) {\r\n      if (c.mass.value >= threshold)",
    "\n\n```\npackage QualityAggregation {\n  class Object {\n    attribute simpleMass : Real;\n    attribute totalMass : Real;\n  }\n  class SimpleThing extends Object {\n    operation calculateTotalMass() : Real {\n      return simpleMass;\n    }\n  }\n  class CompositeThing extends Object {\n    composite SimpleThing[] subcomponents;\n    operation calculateTotalMass() : Real {\n      var totalMass : Real := simpleMass;\n      for (var i : Integer = 0; i < subcomponents.length; i++) {\n        totalMass := totalMass + subcomponents[i].calculateTotalMass();\n      }\n      return totalMass;\n    }\n  }\n}\n```",
    "The following is an OMG SysML v2 textual model for the given requirements:\r\n\r\n```\r\npackage MassSystem {\r\n  class Object {\r\n    mass: Real\r\n  }\r\n  \r\n  class CompositeObject extends Object {\r\n    subcomponents: Object[*]\r\n  }\r\n  \r\n  class MassSystem {\r\n    objects: Object[*]\r\n    \r\n    totalMass: Real\r\n    totalMassWithFilter(minMass: Real): Real\r\n    \r\n    calculateTotalMass(): Real {\r\n      totalMass = 0\r\n      for (object : objects) {\r\n        if (object instanceof CompositeObject) {\r\n          totalMass += object.calculateTotalMass()\r\n        } else {\r\n          totalMass += object.mass\r\n        }\r\n      }\r\n      return totalMass\r\n    }\r\n    \r\n    calculateTotalMassWithFilter(minMass: Real): Real {\r\n      totalMass = 0\r\n      for (object : objects) {\r\n        if (object instanceof CompositeObject) {\r\n          totalMass += object.calculateTotalMassWithFilter(minMass)\r\n        } else if (object.mass >= minMass) {\r\n          totalMass += object.mass\r\n        }\r\n      }\r\n      return totalMass\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nExplanation:\r\n\r\n- The `Object` class represents a basic mass object with a `mass` attribute.",
    "The following is an OMG SysML v2 textual model for the given requirements:\r\n\r\n```\r\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"Vehicle Dynamics\" {\r\n  class \"Vehicle Dynamics\" {\r\n    +wheelPower: double\r\n    +aerodynamicDragCoefficient: double\r\n    +frictionCoefficient: double\r\n    +vehicleMass: double\r\n    +speed: double\r\n    +acceleration: double\r\n    +availablePower: double\r\n    +effectivePower: double\r\n    +initialSpeed: double\r\n    +time: double\r\n    +position: double\r\n    +displacement: double\r\n\r\n    +calculateAvailablePower()\r\n    +calculateEffectivePower()\r\n    +calculateAcceleration()\r\n    +calculateSpeed()\r\n    +calculatePosition()\r\n    +calculateDisplacement()\r\n  }\r\n}\r\n\r\n\"Vehicle Dynamics\" --|> \"Vehicle Dynamics\"\r\n@enduml\r\n```\r\n\r\nExplanation:\r\n\r\n- The model defines a package named \"Vehicle Dynamics\" that contains a class named \"Vehicle Dynamics\".\r\n- The \"Vehicle Dynamics\" class has several attributes that represent the key input parameters of vehicle dynamics, including wheel power, aerodynamic drag coefficient, friction coefficient, vehicle mass, speed, acceleration, available power, effective power, initial",
    "The following is an OMG SysML v2 textual model for the given requirements:\r\n\r\n```\r\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"Vehicle Dynamics Simulation System\" {\r\n  actor \"User\" as user\r\n\r\n  component \"Vehicle Dynamics Model\" as vehicleDynamicsModel {\r\n    interface \"Vehicle Dynamics Interface\" as vehicleDynamicsInterface {\r\n      operation \"Calculate Acceleration\" (initialSpeed: real, initialPosition: real, timeStep: real) returns (acceleration: real)\r\n      operation \"Calculate Speed\" (initialSpeed: real, initialPosition: real, acceleration: real, timeStep: real) returns (speed: real)\r\n      operation \"Calculate Position\" (initialSpeed: real, initialPosition: real, acceleration: real, timeStep: real) returns (position: real)\r\n      operation \"Calculate Available Power\" (initialSpeed: real, initialPosition: real, acceleration: real, timeStep: real) returns (availablePower: real)\r\n    }\r\n\r\n    internal structure \"Vehicle Dynamics Internal Data\" as vehicleDynamicsInternalData {\r\n      attribute \"Initial Speed\" as initialSpeed: real\r\n      attribute \"Initial Position\" as initialPosition: real\r\n      attribute \"Acceleration\" as acceleration: real\r\n      attribute \"Speed\" as",
    "\r\nVehicleDynamicsModel:\r\n  description: \"This is a textual model of the vehicle dynamics simulation system.\"\r\n  properties:\r\n    - name: \"Vehicle Mass\"\r\n      type: \"double\"\r\n      description: \"The mass of the vehicle in kilograms.\"\r\n      constraints:\r\n        - type: \"range\"\r\n          minimum: 0\r\n          maximum: Infinity\r\n    - name: \"Wheel Power\"\r\n      type: \"double\"\r\n      description: \"The power of the vehicle's wheels in watts.\"\r\n      constraints:\r\n        - type: \"range\"\r\n          minimum: 0\r\n          maximum: Infinity\r\n    - name: \"Aerodynamic Drag Coefficient\"\r\n      type: \"double\"\r\n      description: \"The aerodynamic drag coefficient of the vehicle.\"\r\n      constraints:\r\n        - type: \"range\"\r\n          minimum: 0\r\n          maximum: Infinity\r\n    - name: \"Rolling Resistance Coefficient\"\r\n      type: \"double\"\r\n      description: \"The rolling resistance coefficient of the vehicle.\"\r\n      constraints:\r\n        - type: \"range\"\r\n          minimum: 0\r\n          maximum: Infinity\r\n    - name: \"Initial Speed\"\r\n      type: \"double\"\r\n      description: \"The initial speed of the vehicle in meters per second.\"\r\n      constraints",
    "The following is an OMG SysML v2 textual model for the given input requirement:\r\n\r\n```\r\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"Vehicle Dynamics Simulation\" {\r\n  actor \"User\" as user\r\n\r\n  entity \"Vehicle\" as vehicle {\r\n    * position : Real\r\n    * velocity : Real\r\n    * mass : Real\r\n    * wheelEndDrivePower : Real\r\n    * timeInterval : Real\r\n  }\r\n\r\n  entity \"Simulation Parameters\" as simParams {\r\n    * initialPosition : Real\r\n    * initialVelocity : Real\r\n    * dragCoefficient : Real\r\n    * frictionCoefficient : Real\r\n    * airResistanceCoefficient : Real\r\n    * wheelRadius : Real\r\n    * wheelDistance : Real\r\n    * wheelAngularVelocity : Real\r\n  }\r\n\r\n  entity \"Simulation Results\" as simResults {\r\n    * acceleration : Real\r\n    * finalVelocity : Real\r\n    * finalPosition : Real\r\n  }\r\n\r\n  user -> vehicle : provides initial position, initial velocity, vehicle mass, wheel-end drive power, and time interval at a specific moment\r\n  vehicle -> simParams : receives simulation parameters\r\n  simParams -> simResults : calculates acceleration, final velocity, and final position within the given time interval\r\n  simResults -> vehicle : provides the calculated acceleration, final velocity",
    "The following is an OMG SysML v2 textual model for the given requirement:\r\n\r\n```\r\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"Vehicle Weight Restriction System\" {\r\n  class \"Vehicle\" {\r\n    +totalMass: double\r\n  }\r\n  \r\n  class \"Chassis\" {\r\n    +mass: double\r\n  }\r\n  \r\n  class \"Engine\" {\r\n    +mass: double\r\n  }\r\n  \r\n  class \"Gearbox\" {\r\n    +mass: double\r\n  }\r\n  \r\n  \"Vehicle\" *-- \"Chassis\"\r\n  \"Vehicle\" *-- \"Engine\"\r\n  \"Vehicle\" *-- \"Gearbox\"\r\n  \r\n  \"Chassis\" -- \"totalMass\"\r\n  \"Engine\" -- \"totalMass\"\r\n  \"Gearbox\" -- \"totalMass\"\r\n  \r\n  \"Vehicle\" <|.. \"Chassis\"\r\n  \"Vehicle\" <|.. \"Engine\"\r\n  \"Vehicle\" <|.. \"Gearbox\"\r\n  \r\n  \"Vehicle\" o-- \"Overweight Warning\"\r\n  \r\n  \"Overweight Warning\" <|.. \"Vehicle\"\r\n  \r\n  \"Vehicle\" <|.. \"Total Mass Restriction\"\r\n  \r\n  \"Total Mass Restriction\" <|.. \"Vehicle\"\r\n  \r\n  \"Total Mass Restriction\" o-- \"2,500 kg\"\r\n  \r\n  \"Total Mass Re",
    "The following is an OMG SysML v2 textual model for the given requirements:\r\n\r\n```\r\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"Vehicle Mass Budgeting System\" {\r\n  actor \"User\" as user\r\n\r\n  entity \"Vehicle\" as vehicle {\r\n    * mass : REAL [unit=kilogram]\r\n    * engineMass : REAL [unit=kilogram]\r\n    * transmissionMass : REAL [unit=kilogram]\r\n  }\r\n\r\n  entity \"Mass Budget\" as budget {\r\n    * totalMass : REAL [unit=kilogram]\r\n    * limit : REAL [unit=kilogram]\r\n  }\r\n\r\n  user -> vehicle : enters mass of each component\r\n  vehicle -> budget : calculates total mass\r\n  budget -> user : displays message if total mass exceeds limit\r\n}\r\n\r\n@enduml\r\n```\r\n\r\nExplanation:\r\n\r\n- The model defines a package named \"Vehicle Mass Budgeting System\" that contains the entities \"Vehicle\" and \"Mass Budget\".\r\n- The \"Vehicle\" entity has two attributes, \"mass\" and \"engineMass\" and \"transmissionMass\", which represent the mass of the vehicle and the mass of the engine and transmission, respectively. The \"unit",
    "The following is an OMG SysML v2 textual model for the given requirements:\r\n\r\n```\r\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"Vehicle Mass Management System\" {\r\n  actor \"Vehicle Design Team\" as VDT\r\n  entity \"Vehicle\" as V {\r\n    aggregation composite \"Chassis\" as C {\r\n      attribute \"Mass\" as massC\r\n    }\r\n    aggregation composite \"Engine\" as E {\r\n      attribute \"Mass\" as massE\r\n    }\r\n    aggregation composite \"Transmission\" as T {\r\n      attribute \"Mass\" as massT\r\n    }\r\n  }\r\n  entity \"Mass Compliance Limit\" as MCL {\r\n    attribute \"Upper Limit\" as upperLimit\r\n  }\r\n  VDT -down-> V\r\n  V -down-> C\r\n  V -down-> E\r\n  V -down-> T\r\n  V -down-> MCL\r\n  VDT -down-> \"Vehicle Mass Data\" as VMD\r\n  VMD -down-> C\r\n  VMD -down-> E\r\n  VMD -down-> T\r\n  VDT -down-> \"Vehicle Mass Verification\" as VMV\r\n  VMV -down-> C\r\n  VMV -down-> E\r\n  VMV -down-> T\r\n  C -down-> massC\r\n ",
    "The following is an OMG SysML v2 textual model for the given requirement:\r\n\r\n```\r\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"System Design\" {\r\n  component \"Weight Management System\" {\r\n    interface \"Weight Data Input\" {\r\n      operation \"Record Weight Data\"\r\n      parameter \"Weight (kg)\"\r\n    }\r\n    interface \"Weight Calculation\" {\r\n      operation \"Calculate Total Weight\"\r\n      parameter \"Weight (kg)\"\r\n    }\r\n    interface \"Weight Limit Check\" {\r\n      operation \"Check Total Weight Limit\"\r\n      parameter \"Total Weight (kg)\"\r\n    }\r\n    interface \"Weight Restriction\" {\r\n      operation \"Impose Weight Restrictions\"\r\n      parameter \"Total Weight (kg)\"\r\n    }\r\n    interface \"Warning Message Output\" {\r\n      operation \"Output Warning Message\"\r\n      parameter \"Warning Message\"\r\n    }\r\n    interface \"Weight Data Output\" {\r\n      operation \"Output Weight Data\"\r\n      parameter \"Weight Data\"\r\n    }\r\n    interface \"Weight Limit Data\" {\r\n      operation \"Retrieve Weight Limit Data\"\r\n      parameter \"Weight Limit (kg)\"\r\n    }\r\n    interface \"Weight Restriction Data\" {\r\n      operation \"Retrieve Weight Restriction Data\"\r\n      parameter \"Weight Restriction (kg)\"\r\n    }\r\n    interface \"Vehicle",
    "The following is an OMG SysML v2 textual model for the given requirements:\r\n\r\n```\r\nVehicleComposition: Component {\r\n  mass : Real [0..2500]\r\n}\r\n\r\nChassis : VehicleComposition {\r\n  mass = 1000\r\n}\r\n\r\nEngine : VehicleComposition {\r\n  mass = 1500\r\n}\r\n\r\nTransmission : VehicleComposition {\r\n  mass = 500\r\n}\r\n\r\nTotalMassConstraint : Constraint {\r\n  constrainedElements = (Chassis, Engine, Transmission)\r\n  specification = (sum(c.mass) <= 2500)\r\n}\r\n\r\nVehicleDynamics : Behavior {\r\n  input = (initialVelocity : Real, finalVelocity : Real, mass : Real, appliedForce : Real, time : Real)\r\n  output = (mass : Real)\r\n  Real force = appliedForce * time\r\n  Real changeInVelocity = finalVelocity - initialVelocity\r\n  Real acceleration = force / mass\r\n  Real finalTime = time + (finalVelocity - initialVelocity) / acceleration\r\n  Real finalMass = mass + force * time\r\n  precondition = (initialVelocity >= 0, finalVelocity >= 0, mass > 0,",
    "\nVehicleMaintenanceSchedule:\n  description: \"This is the system that manages and monitors the maintenance schedule of vehicles.\"\n  properties:\n    vehicles:\n      description: \"The list of vehicles that are managed by the system.\"\n      type: \"Vehicle[]\"\n    maintenanceInterval:\n      description: \"The fixed maintenance interval for all vehicles.\"\n      type: \"Duration\"\n    maxTemperature:\n      description: \"The maximum allowed temperature for all vehicles.\"\n      type: \"Real\"\n  requirements:\n    - maintainVehicle:\n        description: \"This is a behavior that initiates the maintenance of a vehicle.\"\n        preconditions:\n          - \"The vehicle is not under maintenance.\"\n          - \"The actual maintenance start time must be later than the scheduled maintenance time.\"\n          - \"The maintenance must be initiated within 2 seconds after the previous healthy state ends.\"\n          - \"The duration of the maintenance must not exceed 48 hours.\"\n        postconditions:\n          - \"The vehicle status is set to 'under maintenance'.\"\n          - \"The next maintenance time is automatically postponed according to the maintenance interval.\"\n          - \"The vehicle's health status is restored to normal.\"\n        triggeredBy:\n          - \"The system periodically checks the maintenance schedule of all vehicles.\"\n        triggeredBy",
    "The following is an OMG SysML v2 textual model for the given requirements:\r\n\r\n```\r\nVehicle\r\n  maxMassLimit : Real\r\n  fuelMass : Real\r\n  speedCurve : Real\r\n  clutchInterface : Interface\r\n  engine : Component\r\n  transmission : Component\r\n  totalMass : Real\r\n  totalMass <= maxMassLimit\r\n  fuelMass > 0\r\n  engine.torque = speedCurve * engine.speed\r\n  engine.torque -> transmission.torque\r\n  engine.torque -> clutchInterface.torque\r\n```\r\n\r\nExplanation:\r\n\r\n- The `Vehicle` class represents the vehicle and contains the following attributes:\r\n  - `maxMassLimit` is a real number representing the maximum mass limit of the vehicle.\r\n  - `fuelMass` is a real number representing the fuel mass of the vehicle.\r\n  - `speedCurve` is a real number representing the speed curve of the engine.\r\n  - `clutchInterface` is an interface representing the clutch interface of the transmission.\r\n  - `engine` is a component representing the engine of the vehicle.\r\n  - `transmission` is a component representing the transmission of the vehicle.\r\n  - `totalMass` is a real number representing the total mass of the vehicle, which",
    "The following is an OMG SysML v2 textual model for the given requirements:\r\n\r\n```\r\nVehicle mass control system:\r\n  inputs:\r\n    - fuel tank level (empty or full)\r\n    - engine speed (rpm)\r\n    - engine torque (N·m)\r\n    - clutch position (closed or open)\r\n  outputs:\r\n    - vehicle mass (kg)\r\n  regulations:\r\n    - total mass <= 2000 kg if fuel tank level is full\r\n    - total mass <= 1500 kg if fuel tank level is empty\r\n    - engine torque = torque(speed) if clutch position is closed\r\n  equations:\r\n    - torque(speed) = a * speed^2 + b * speed + c\r\n    - a = 0.0015 N·m/rpm^2\r\n    - b = 0.00005 N·m/rpm\r\n    - c = 0.0001 N·m\r\n  components:\r\n    - Fuel tank:\r\n      - fuel mass (kg)\r\n      - fuel tank level (empty or full)\r\n    - Engine:\r\n      - engine speed (rpm)\r\n      - engine torque (N·m)\r\n     ",
    "The system model of this project is shown below:\r\n\r\n```\r\nVehicle\r\n  - mass: Real\r\n  - engine: Engine\r\n\r\nEngine\r\n  - torque: Real\r\n  - speed: Real\r\n  - clutch: Boolean\r\n\r\nPerformanceTable\r\n  - speed: Real\r\n  - torque: Real\r\n\r\nVehicle.engine.torque = PerformanceTable.torque(Vehicle.engine.speed)\r\nVehicle.engine.clutch = (Vehicle.engine.speed > 0) and (Vehicle.engine.torque > 0)\r\nVehicle.mass <= 2000 if Vehicle.engine.clutch else Vehicle.mass <= 1500\r\n```\r\n\r\nThis model defines a `Vehicle` with a `mass` attribute and an `engine` attribute that is a `Engine` object. The `Engine` object has a `torque` attribute and a `speed` attribute, and a `clutch` attribute that is a Boolean value indicating whether the engine is currently in the clutch position.\r\n\r\nThe `PerformanceTable` object is a lookup table that provides the torque generated by the engine at different speeds. The `torque` function is used to compute the torque generated",
    "The following is an OMG SysML v2 textual model for the given requirements:\r\n\r\n```\r\nVehicleMassControl\r\n  requires\r\n    VehicleMassLimitation : Requirement\r\n      description : \"The system requires that the actual mass of the vehicle must not exceed the specified limit.\"\r\n      condition : \"The vehicle's actual mass must not exceed the specified limit.\"\r\n      constraint : \"VehicleMassLimitation\"\r\n    FuelTankCondition : Requirement\r\n      description : \"The system requires that the fuel tank must be either full or empty, with two specific operating conditions: when the fuel tank is full, the total vehicle mass must not exceed 2000 kg; when the fuel tank is empty, the total vehicle mass must not exceed 1500 kg.\"\r\n      condition : \"The fuel tank must be either full or empty, with two specific operating conditions: when the fuel tank is full, the total vehicle mass must not exceed 2000 kg; when the fuel tank is empty, the total vehicle mass must not exceed 1500 kg.\"\r\n      constraint : \"FuelTankCondition\"\r\n    EngineTorque : Requirement\r\n      description : \"The system stipulates that the engine must be capable of generating the specified torque characteristics",
    "\r\nVehicle Performance Analysis System:\r\n\r\n- Inputs:\r\n  - Vehicle Attributes: curb weight, payload, wheel diameter, transmission efficiency, and fuel economy under urban and highway conditions.\r\n  - Specific Driving Cycles: time-stamped position and speed information.\r\n  - Energy Consumption Targets: fuel consumption per 100 kilometers or miles per gallon.\r\n\r\n- Outputs:\r\n  - Engine Power: required to meet the specified driving conditions.\r\n  - Acceleration: calculated based on the driving cycle.\r\n  - Speed: calculated based on the driving cycle.\r\n  - Position Variations: calculated based on the driving cycle.\r\n  - Fuel Economy: calculated throughout the entire driving cycle.\r\n\r\n- Functions:\r\n  - Set Vehicle Attributes: allows users to input vehicle attributes.\r\n  - Set Specific Driving Cycles: allows users to input specific driving cycles.\r\n  - Calculate Engine Power: calculates the required engine power based on the vehicle attributes and driving cycle.\r\n  - Calculate Acceleration: calculates the acceleration based on the driving cycle.\r\n  - Calculate Speed: calculates the speed based on the driving cycle.\r\n  - Calculate Position Variations: calculates the position variations based on the driving cycle.\r\n ",
    "\r\nThe following is an OMG SysML v2 textual model for the given requirements:\r\n\r\n```\r\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"Simulation Analysis\" {\r\n  actor \"User\" as user\r\n  entity \"Vehicle\" as vehicle {\r\n    string curbWeight\r\n    string load\r\n    string wheelDiameter\r\n    string transmissionEfficiency\r\n    string otherParameters\r\n  }\r\n  entity \"Driving Scenario\" as drivingScenario {\r\n    string urbanDrivingScenario\r\n    string highwayDrivingScenario\r\n  }\r\n  entity \"Simulation Result\" as simulationResult {\r\n    string requiredWheelPower\r\n    string acceleration\r\n    string energyConsumption\r\n    string enginePowerDemand\r\n    string fuelConsumption\r\n    string fuelEconomy\r\n  }\r\n  user -> drivingScenario\r\n  drivingScenario -> vehicle\r\n  vehicle -> simulationResult\r\n  simulationResult -> user\r\n}\r\n@enduml\r\n```\r\n\r\nExplanation:\r\n\r\n- The model consists of a package named \"Simulation Analysis\" that contains the actors, entities, and relationships between them.\r\n- The \"User\" actor represents the user of the system.\r\n- The \"Vehicle\" entity represents the vehicle that the user wants to analyze. It has attributes such as curb weight, load, wheel diameter",
    "\r\n```\r\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"Engine Selection Analysis System\" {\r\n  actor \"Engine Selection Analyst\" as analyst\r\n  entity \"Engine Selection Analysis Model\" as model\r\n\r\n  analyst -down-> model\r\n\r\n  package \"Engine Selection Analysis Model\" {\r\n    entity \"Engine\" as engine {\r\n      *engineType : string\r\n      *power : double\r\n      *mass : double\r\n      *efficiency : double\r\n      *cost : double\r\n    }\r\n\r\n    entity \"Engine Selection Criteria\" as criteria {\r\n      *criteriaType : string\r\n      *criteriaValue : double\r\n    }\r\n\r\n    entity \"Engine Selection Evaluation Function\" as evaluation {\r\n      *evaluationFunction : string\r\n      *evaluationCriteria : string\r\n    }\r\n\r\n    entity \"Engine Selection Recommendation\" as recommendation {\r\n      *recommendationType : string\r\n      *recommendationValue : double\r\n    }\r\n\r\n    engine -down-> criteria\r\n    engine -down-> evaluation\r\n    engine -down-> recommendation\r\n\r\n    analyst -down-> engine\r\n  }\r\n}\r\n\r\n@enduml\r\n```",
    "The OMG SysML v2 textual model for the given requirements is as follows:\r\n\r\n```\r\nentity Vehicle {\r\n  String make\r\n  String model\r\n  Float weight\r\n}\r\n\r\nentity CurbWeightTest {\r\n  Vehicle vehicle\r\n  Float actualWeight\r\n  Boolean isQualified\r\n}\r\n\r\nentity CurbWeightRequirement {\r\n  Float maxCurbWeight\r\n}\r\n\r\nCurbWeightRequirement.maxCurbWeight -> CurbWeightTest.actualWeight\r\nCurbWeightTest.vehicle -> Vehicle.make, Vehicle.model\r\nCurbWeightTest.actualWeight -> CurbWeightRequirement.maxCurbWeight\r\nCurbWeightTest.isQualified -> CurbWeightRequirement.maxCurbWeight\r\n```\r\n\r\nExplanation:\r\n\r\n- The `Vehicle` entity represents the vehicle being tested for curb weight. It has three attributes: `make`, `model`, and `weight`.\r\n- The `CurbWeightTest` entity represents the test conducted to determine the curb weight of the vehicle. It has four attributes: `vehicle`, `actualWeight`, and `isQualified`.\r\n- The `CurbWeightRequirement` entity represents the requirement for the maximum curb weight of the vehicle",
    "The system is designed to verify the mass of vehicles to ensure that the actual mass of each vehicle does not exceed 2,500 kilograms. Under this system, every vehicle to be inspected must undergo a mass inspection process to check whether its mass complies with the specified upper limit. The system consists of vehicles, weighing equipment, and a mass verification unit. It measures the current actual mass of the vehicle using the weighing equipment and processes and evaluates the measured data. If the inspected vehicle's mass is less than or equal to 2,500 kilograms, it is deemed qualified; if it exceeds this value, it is deemed unqualified. The entire mass verification process is carried out independently for each vehicle to ensure that all vehicles involved in verification comply with the relevant standards and regulatory requirements.\r\n\r\nThe system is composed of the following components:\r\n\r\n- Vehicles: The system includes vehicles to be inspected, which are composed of various components such as the vehicle body, engine, and wheels.\r\n\r\n- Weighing Equipment: The system includes weighing equipment, which is used to measure the current actual mass of the vehicle.\r\n\r\n- Mass",
    "\r\nThe system is designed to provide end users with a convenient and efficient mode of transportation. It is capable of supporting a driver and up to four passengers sharing a vehicle, enabling them to travel safely and comfortably from the starting point to the destination. Users can freely enter and exit the vehicle, and the system should ensure that this process is simple and smooth. In addition, the system should fully consider and integrate surrounding environmental factors to ensure the safety and sustainability of the entire journey, while also being compatible with related infrastructure such as gas stations. The system’s operation should be centered on human needs, with a focus on ride experience and various conveniences, assisting passengers and drivers in smoothly completing all kinds of daily transportation tasks.\r\n\r\nThe system is designed to be user-friendly and easy to use. It should be designed to be accessible to all users, including those with disabilities. The system should be designed to be compatible with various devices, including smartphones, tablets, and computers. The system should be designed to be easy to navigate, with clear and intuitive navigation menus and controls. The system should be designed to be secure and reliable, with a focus on maintaining data security and",
    "\r\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"Transportation System\" {\r\n  actor \"Driver\" as driver\r\n  actor \"Passenger\" as passenger\r\n  actor \"Gas Station\" as gasStation\r\n\r\n  entity \"Vehicle\" as vehicle {\r\n    * has attribute \"fuel level\"\r\n    * has attribute \"battery level\"\r\n    * has attribute \"location\"\r\n  }\r\n\r\n  entity \"Environmental Conditions\" as environmentalConditions {\r\n    * has attribute \"temperature\"\r\n    * has attribute \"humidity\"\r\n    * has attribute \"wind speed\"\r\n  }\r\n\r\n  usecase \"Transportation\" as transportation {\r\n    driver -u-> vehicle : operates\r\n    vehicle -u-> environmentalConditions : influences\r\n    environmentalConditions -u-> vehicle : affects\r\n    vehicle -u-> gasStation : refuels\r\n    gasStation -u-> vehicle : provides fuel\r\n    vehicle -u-> passenger : transports\r\n    passenger -u-> vehicle : transports\r\n    vehicle -u-> driver : transports\r\n    driver -u-> passenger : transports\r\n    driver -u-> vehicle : transports\r\n    passenger -u-> driver : transports\r\n    driver -u-> environmentalConditions : influences\r\n    passenger -u-> environmentalConditions",
    "The following is an OMG SysML v2 textual model for the given requirements:\r\n\r\n```\r\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"Vehicle Product Line Configuration Management System\" {\r\n  actor \"Configuration Manager\" as CM\r\n\r\n  package \"Engine Variants\" {\r\n    entity \"Engine\" {\r\n      * engineType : string\r\n      * cylinderCount : integer\r\n      * cylinderDiameter : string\r\n    }\r\n\r\n    entity \"Four-cylinder Engine\" {\r\n      engineType = \"four-cylinder\"\r\n      cylinderCount = 4\r\n      cylinderDiameter = \"small\"\r\n    }\r\n\r\n    entity \"Six-cylinder Engine\" {\r\n      engineType = \"six-cylinder\"\r\n      cylinderCount = 6\r\n      cylinderDiameter = \"small\"\r\n    }\r\n\r\n    entity \"Large Cylinder Engine\" {\r\n      engineType = \"six-cylinder\"\r\n      cylinderCount = 6\r\n      cylinderDiameter = \"large\"\r\n    }\r\n\r\n    entity \"Small Cylinder Engine\" {\r\n      engineType = \"four-cylinder\"\r\n      cylinderCount = 4\r\n      cylinderDiameter = \"small\"\r\n    }\r\n  }\r\n\r\n  package \"Transmission Variants\" {\r\n    entity \"Trans",
    "The following is an OMG SysML v2 textual model for a configurable engine:\r\n\r\n```\r\npackage engine\r\n\r\nabstract class Engine {\r\n  attribute String name\r\n  attribute Integer cylinderQuantity\r\n  attribute Integer cylinderDiameter\r\n  attribute Boolean isTurbocharged\r\n  attribute Boolean isHybrid\r\n  attribute Boolean isElectricallyPowered\r\n  attribute Boolean isStabilized\r\n  attribute Boolean isAirCooled\r\n  attribute Boolean isWaterCooled\r\n  attribute Boolean isLubricated\r\n  attribute Boolean isVentilated\r\n  attribute Boolean isErgonomic\r\n\r\n  operation start()\r\n  operation stop()\r\n  operation accelerate()\r\n  operation brake()\r\n}\r\n\r\nclass FourCylinderEngine extends Engine {\r\n  attribute String name = \"Four-cylinder engine\"\r\n  attribute Integer cylinderQuantity = 4\r\n  attribute Integer cylinderDiameter = 70\r\n  attribute Boolean isTurbocharged = false\r\n  attribute Boolean isHybrid = false\r\n  attribute Boolean isElectricallyPowered = false\r\n  attribute Boolean isStabilized = false\r\n  attribute Boolean isAirCooled = false\r\n  attribute Boolean isWaterCooled = false\r\n  attribute Boolean isLubricated = false\r\n  attribute Boolean isVentilated = false\r\n  attribute Boolean isErgonom",
    "\n\n```\n@startuml\n\npackage \"Vehicle Configuration Space\" {\n  class \"Engine\" {\n    +cylinderDiameter: string\n    +numberOfCylinders: integer\n  }\n  class \"Transmission\" {\n    +type: string\n  }\n  class \"Vehicle\" {\n    +engine: Engine\n    +transmission: Transmission\n  }\n  \"Engine\" -- \"Vehicle\"\n  \"Transmission\" -- \"Vehicle\"\n  \"Vehicle\" <|.. \"Engine\"\n  \"Vehicle\" <|.. \"Transmission\"\n  \"Engine\" <|.. \"4-cylinder Engine\"\n  \"Engine\" <|.. \"6-cylinder Engine\"\n  \"4-cylinder Engine\" <|.. \"4-cylinder Manual Transmission\"\n  \"4-cylinder Engine\" <|.. \"4-cylinder Automatic Transmission\"\n  \"6-cylinder Engine\" <|.. \"6-cylinder Manual Transmission\"\n  \"6-cylinder Engine\" <|.. \"6-cylinder Automatic Transmission\"\n  \"4-cylinder Manual Transmission\" <|.. \"4-cylinder Engine\"\n  \"4-cylinder Automatic Transmission\" <|.. \"4-cylinder Engine\"\n  \"6-cylinder Manual",
    "The system assembly is composed of a computer subsystem and a storage subsystem. The software design defines the message format and data format. The computer subsystem is capable of utilizing and integrating all functions specified in the software design, while the storage subsystem is able to access and be compatible with the message and data formats defined by the software. The software and hardware of the entire system work together seamlessly to ensure that the processes of information storage, transmission, and processing within the system are efficient, reliable, and compliant with the required data structure specifications.",
    "The OMG SysML v2 textual model for the given requirement is as follows:\r\n\r\n```\r\npowertrainSystem\r\n  logicalLayer\r\n    torqueGenerator\r\n  physicalLayer\r\n    powerUnit\r\n      powerOutput\r\n      torqueOutput\r\n```\r\n\r\nExplanation:\r\n\r\n- The `powertrainSystem` is the top-level system that represents the entire powertrain system.\r\n- The `logicalLayer` represents the logical components of the powertrain system, including the torque generator.\r\n- The `physicalLayer` represents the physical components of the powertrain system, including the power unit.\r\n- The `powerUnit` represents the physical component that is responsible for generating power and generating torque.\r\n- The `powerOutput` and `torqueOutput` are attributes of the `powerUnit` that represent the power output and torque output capabilities of the power unit, respectively.\r\n- The `torqueGenerator` is a functional requirement that maps to the `powerUnit` in the physical layer.",
    "The system requires the power transmission system to provide power and generate torque. The system possesses the capability to deliver power and generate torque, which is specifically realized through the action of \"generating torque\" by the torque generator component, enabling the transfer and conversion of power. The powertrain includes the engine as a component, and the engine actually performs the function of generating torque. Ultimately, the model specifies that the logical-layer torque generator is to be allocated to the physical powertrain component, with the specific operation of generating torque further allocated to the engine within the powertrain. The system as a whole must ensure, through the above division and allocation, effective generation and management of power and torque to meet the practical requirements for power output during vehicle operation.",
    "The following is an OMG SysML v2 textual model for the vehicle feature annotation system:\r\n\r\n```\r\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"Vehicle Feature Annotation System\" {\r\n  package \"Interior Assembly\" {\r\n    component \"Seat Belt\" {\r\n      property \"Type\"\r\n      property \"Position\"\r\n      property \"Design\"\r\n      property \"Material\"\r\n      property \"Color\"\r\n      property \"Size\"\r\n      property \"Weight\"\r\n    }\r\n    component \"Front Seat\" {\r\n      property \"Type\"\r\n      property \"Position\"\r\n      property \"Design\"\r\n      property \"Material\"\r\n      property \"Color\"\r\n      property \"Size\"\r\n      property \"Weight\"\r\n    }\r\n    component \"Driver Airbag\" {\r\n      property \"Type\"\r\n      property \"Position\"\r\n      property \"Design\"\r\n      property \"Material\"\r\n      property \"Color\"\r\n      property \"Size\"\r\n      property \"Weight\"\r\n    }\r\n    component \"Alarm System\" {\r\n      property \"Type\"\r\n      property \"Position\"\r\n      property \"Design\"\r\n      property \"Material\"\r\n      property \"Color\"\r\n      property \"Size\"\r\n      property \"Weight\"\r\n    }\r\n  }\r\n  package \"Body Assembly\" {\r\n    component \"Body Shell\" {\r\n      property \"Type\"\r\n      property \"",
    "The system is capable of performing automated simulation and analysis of vehicle dynamic behavior. The system has the following functionalities:\r\n\r\n1. Input: The system accepts the initial velocity, initial position, acceleration at a specific moment, and the time step as inputs from the user.\r\n\r\n2. Integration: The system integrates with the ModelCenter analysis tool to automatically calculate and output the vehicle’s velocity and position after the specified time step based on the given physical model.\r\n\r\n3. Output: The system ensures accurate data transfer and reliable output of simulation results, enabling users to conveniently obtain key dynamic parameters to support vehicle performance analysis and design optimization.\r\n\r\nThe system is designed using the following components:\r\n\r\n1. Physical Model: The system uses a physical model to simulate the vehicle’s dynamic behavior.\r\n\r\n2. Integration with ModelCenter: The system integrates with the ModelCenter analysis tool to automatically calculate and output the vehicle’s velocity and position after the specified time step based on the given physical model.\r\n\r\n3. Data Transfer: The system ensures accurate data transfer between the user and the system.\r\n\r\n4. Output: The system provides accurate and reliable output of simulation results to the user.",
    "\npackage CarSafetyCompliance {\n  package SafetyFeatures {\n    component SeatBelt {\n      isMandatory = true;\n    }\n    component Airbag {\n      isMandatory = false;\n    }\n    component Bumper {\n      isMandatory = true;\n    }\n    component KeylessEntrySystem {\n      isMandatory = false;\n    }\n    component Wheel {\n      isMandatory = true;\n    }\n    component ABS {\n      isMandatory = false;\n    }\n  }\n  package MandatorySafetyFeatures {\n    component SeatBelt {\n      isMandatory = true;\n    }\n    component Bumper {\n      isMandatory = true;\n    }\n    component Wheel {\n      isMandatory = true;\n    }\n  }\n}",
    "The vehicle safety compliance system requires that all components of the vehicle possess corresponding safety features, some of which are mandatory. The vehicle interior must be equipped with two seat belts, and both seat belts are required safety features. Additionally, the driver’s airbag is an optional safety feature and is not mandatory. For the vehicle body, a bumper is required as a mandatory safety component, while the keyless entry system is a non-mandatory configuration. In the chassis system, the number of tires is fixed, and the anti-lock braking system (ABS) is an optional safety feature. Furthermore, the system categorizes and manages all safety-related parts and further distinguishes which safety components are required by law or industry standards and which are non-mandatory configurations, ensuring that the vehicle meets fundamental safety standards while offering more optional safety functions.\r\n\r\nThe safety compliance system is implemented using OMG SysML v2. The system consists of several components, including the vehicle interior, the vehicle body, and the chassis system. Each component is modeled as a separate entity, and the system is composed of these entities. The system also includes a safety compliance policy that defines which safety features are required by law or industry",
    "\r\nThe following is an OMG SysML v2 textual model for modeling and managing risks and failures:\r\n\r\n```\r\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"Risk Management System\" {\r\n  actor \"Risk Manager\" as riskManager\r\n\r\n  entity \"Risk\" {\r\n    *name : string\r\n    *description : string\r\n    *probability : float\r\n    severity : string\r\n    *causes : string\r\n    *effects : string\r\n  }\r\n\r\n  entity \"Failure\" {\r\n    *name : string\r\n    *description : string\r\n    severity : string\r\n    *causes : string\r\n    *effects : string\r\n  }\r\n\r\n  entity \"Scenario\" {\r\n    *name : string\r\n    *description : string\r\n    *risks : Risk[*]\r\n    *failures : Failure[*]\r\n  }\r\n\r\n  riskManager *-- \"1\" Scenario\r\n  \"Risk\" *-- \"0..1\" Scenario\r\n  \"Failure\" *-- \"0..1\" Scenario\r\n}\r\n\r\n@enduml\r\n```\r\n\r\nExplanation:\r\n\r\n- The model defines a package called \"Risk Management System\" that contains the actors, entities, and relationships needed to model and manage risks and failures.\r\n- The \"Risk\" entity represents a potential risk",
    "The following is an OMG SysML v2 textual model for the given requirements:\r\n\r\n```\r\n@startuml\r\n!define SYSML v2\r\n\r\n' System Context\r\n' ==============\r\n\r\n' System\r\nSystem \"Risk Management System\" as RiskManagementSystem\r\n\r\n' Actors\r\n' ------\r\n\r\n' User\r\nPerson \"User\" as User\r\n\r\n' Use Cases\r\n' ---------\r\n\r\n' Scenario 1\r\n' ----------\r\n\r\n' Description\r\n' -----------\r\nUser -> RiskManagementSystem: \"I want to identify and describe different scenarios that may occur within the system.\"\r\n\r\n' Causes\r\n' ------\r\n\r\n' Cause 1\r\nRiskManagementSystem -> RiskManagementSystem: \"The system is designed for systematic risk metadata modeling and management across various scenarios, causes, and failures.\"\r\n\r\n' Cause 2\r\nRiskManagementSystem -> RiskManagementSystem: \"Users can identify and describe different scenarios that may occur within the system.\"\r\n\r\n' Failure Types\r\n' -------------\r\n\r\n' Failure Type 1\r\nRiskManagementSystem -> RiskManagementSystem: \"Users may not be able to identify and describe different scenarios that may",
    "The following is an OMG SysML v2 textual model for the given requirements:\r\n\r\n```\r\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"Battery Monitoring System\" {\r\n  component \"Battery Monitor\" {\r\n    interface \"Battery Level Monitor\" {\r\n      operation \"Get Battery Level\"\r\n      operation \"Get Battery Health\"\r\n    }\r\n    interface \"Battery Failure Monitor\" {\r\n      operation \"Detect Battery Aging\"\r\n      operation \"Detect Low Battery Level\"\r\n    }\r\n    interface \"Battery Shutdown Monitor\" {\r\n      operation \"Detect Device Shutdown\"\r\n    }\r\n    interface \"Battery Risk Assessment\" {\r\n      operation \"Assess Battery Risk\"\r\n    }\r\n  }\r\n  component \"Battery Management System\" {\r\n    interface \"Battery Replacement\" {\r\n      operation \"Replace Battery\"\r\n    }\r\n    interface \"Battery Recycling\" {\r\n      operation \"Recycle Battery\"\r\n    }\r\n    interface \"Battery Replacement Schedule\" {\r\n      operation \"Create Replacement Schedule\"\r\n    }\r\n  }\r\n  component \"User Interface\" {\r\n    interface \"Battery Status Display\" {\r\n      operation \"Display Battery Level\"\r\n      operation \"Display Battery Health\"\r\n    }\r\n    interface \"Battery Warning Indicator\" {\r\n      operation \"Display Battery",
    "The system must possess a clear capability for structural decomposition, namely, the ability to explicitly present a top-down hierarchical structure, dividing the system into multiple subsystems and components, and ensuring that the functions and capabilities of each level are fully covered. The interfaces between system components should be well defined, so that each component can be independently understood and analyzed while also collaborating effectively within the overall system. Furthermore, system engineers and parties involved in Independent Verification and Validation (IV&V) must be able to use this structural view to comprehend and verify the system’s integrity and modular design, thereby ensuring that the system's various functional and performance requirements are met.",
    "The following is an example of an OMG SysML v2 textual model that satisfies the given requirements:\r\n\r\n```\r\n@startuml\r\n!define SYSML2\r\n\r\npackage \"System Architecture\" {\r\n  component \"Root Component\" {\r\n    interface \"Interface 1\"\r\n    interface \"Interface 2\"\r\n    component \"Subcomponent 1\" {\r\n      interface \"Interface 3\"\r\n      component \"Subcomponent 2\" {\r\n        interface \"Interface 4\"\r\n      }\r\n    }\r\n    component \"Subcomponent 3\" {\r\n      interface \"Interface 5\"\r\n    }\r\n  }\r\n  component \"Safety Component 1\" {\r\n    interface \"Interface 6\"\r\n    safety attribute \"Safety Attribute 1\"\r\n  }\r\n  component \"Safety Component 2\" {\r\n    interface \"Interface 7\"\r\n    safety attribute \"Safety Attribute 2\"\r\n  }\r\n  component \"Non-Safety Component 1\" {\r\n    interface \"Interface 8\"\r\n  }\r\n  component \"Non-Safety Component 2\" {\r\n    interface \"Interface 9\"\r\n  }\r\n}\r\n\r\nlegend top center\r\n  <size:16><color:gray>Legend</color></size>\r\n  <b>Safety Component:</b> mandatory safety feature\r\n  <b",
    "\n\n```\npackage automotive\n\nabstract concept Car {\n  -- Core component\n  -- Alias for \"汽车\"\n  -- Explanation: A vehicle that is designed to transport people or goods.\n  -- Physical quantities: Mass, Length, Width, Height, Speed, Acceleration, Heading, Steering Angle, Brake Pressure, Engine Temperature, Engine Load, Fuel Consumption, Fuel Level, Odometer, Fuel Efficiency, Torque, Accelerator Pedal Position, Brake Pedal Position, Tire Pressure, Tire Temperature, and Vehicle Speed.\n}\n\npackage automotive {\n  package physical {\n    concept Mass {\n      -- Explanation: The mass of an object, including its contents.\n      -- Physical quantities: Mass.\n    }\n\n    concept Length {\n      -- Explanation: The distance between two points on a surface.\n      -- Physical quantities: Length.\n    }\n\n    concept Width {\n      -- Explanation: The width of a surface.\n      -- Physical quantities: Width.\n    }\n\n    concept Height {\n      -- Explanation: The height of a surface.\n      -- Physical quantities: Height.\n    }\n\n    concept Speed {\n      -- Explanation: The rate of travel",
    "\r\nThe Automobile Document Management Platform (ADMP) is a software application that manages and records information and documentation about automobiles. The platform enables users to enter, query, and archive various types of information about automobiles using the \"Automobile\" as the core object. The system also provides \"Car\" as an alias for \"Automobile,\" enabling different user groups to perform searches and operations flexibly according to their own habits. The system supports compatibility with standard physical quantity systems, enabling unified referencing and management of physical quantities such as torque (e.g., TorqueValue under the ISQ standard) to enhance the professionalism and accuracy of documentation. The system allows explanatory documents to be added for different objects and their aliases, ensuring that information within the platform is clearly annotated and traceable. The ADMP is designed to be user-friendly, with a clean and intuitive interface that allows users to easily navigate and perform operations. The platform is also designed to be scalable, enabling it to handle large volumes of data and users. The ADMP is compatible with various operating systems and can be deployed on cloud-based platforms.",
    "\n\n```\npackage AutomobileManagementSystem {\n  class Automobile {\n    name : String[1..1];\n    alias : String[1..1];\n    torqueValue : TorqueValue[1..1];\n  }\n  \n  class TorqueValue {\n    value : Real[1..1];\n    unit : String[1..1];\n  }\n  \n  package PhysicalQuantities {\n    scalar type Real;\n    scalar type String;\n    scalar type TorqueValue;\n  }\n  \n  package AutomobileManagement {\n    operation CreateAutomobile(name : String, alias : String, torqueValue : TorqueValue) : Automobile;\n    operation GetTorqueValue(automobile : Automobile) : TorqueValue;\n    operation SetTorqueValue(automobile : Automobile, torqueValue : TorqueValue);\n    operation ImportTorqueValue(filePath : String) : TorqueValue;\n    operation ImportTorqueValues(filePath : String) : Set of TorqueValue;\n  }\n}\n```\r\n\r\nExplanation:\r\n\r\nThe AutomobileManagementSystem package contains two classes: Automobile and TorqueValue. The Automobile class represents an automobile object and has three attributes: name, alias, and torqueValue.",
    "\nVehicle:\n  - engine:\n      - cylinderCount: integer [1..6]\n\nVehicleSize:\n  - small:\n      - engine:\n          - cylinderCount: 4\n  - large:\n      - engine:\n          - cylinderCount: 6\n\nVehicle:\n  - size: VehicleSize\n  - engine:\n      - cylinderCount: self.size.engine.cylinderCount\n\nNote: The above code is a simplified version of the actual implementation. The actual implementation may have additional constraints and constraints on the cylinder count, such as the number of cylinders per engine, the number of cylinders per vehicle, and the number of engines per vehicle.",
    "\n\n```\n@startuml\r\n!define SYSML v2\r\n\r\npackage \"System\" {\r\n  component \"Fuel Tank\" {\r\n    interface \"Fuel Interface\" {\r\n      operation \"Supply Fuel\"\r\n      operation \"Return Fuel\"\r\n    }\r\n    attribute \"Fuel Level\"\r\n    attribute \"Temperature\"\r\n  }\r\n  component \"Engine\" {\r\n    interface \"Fuel Interface\" {\r\n      operation \"Supply Fuel\"\r\n      operation \"Return Fuel\"\r\n    }\r\n    attribute \"Fuel Level\"\r\n    attribute \"Temperature\"\r\n  }\r\n  component \"Fuel Management System\" {\r\n    interface \"Fuel Interface\" {\r\n      operation \"Supply Fuel\"\r\n      operation \"Return Fuel\"\r\n    }\r\n    attribute \"Fuel Level\"\r\n    attribute \"Temperature\"\r\n    operation \"Monitor Fuel Temperature\"\r\n    operation \"Manage Fuel Flow\"\r\n  }\r\n  \"Fuel Tank\" -- \"Fuel Management System\" : \"Fuel Interface\"\r\n  \"Engine\" -- \"Fuel Management System\" : \"Fuel Interface\"\r\n  \"Fuel Management System\" -- \"Fuel Tank\" : \"Fuel Interface\"\r\n  \"Fuel Management System\" -- \"Engine\" : \"Fuel Interface\"\r\n}\r\n@enduml\r\n```\r\n\r\nExplanation:\r\n\r\n- The system is modeled as",
    "The following is an example of a SysML v2 textual model that satisfies the given requirements:\r\n\r\n```\r\nVehicle\r\n  - mass: Real\r\n  - AxleAssembly\r\n    - axle: Axle\r\n    - Axle\r\n      - wheel: Wheel\r\n      - Wheel\r\n      - Wheel\r\n    - Axle\r\n      - wheel: Wheel\r\n      - Wheel\r\n      - Wheel\r\n  - FrontAxleAssembly\r\n    - axle: Axle\r\n    - Axle\r\n      - wheel: Wheel\r\n      - Wheel\r\n      - Wheel\r\n    - Axle\r\n      - wheel: Wheel\r\n      - Wheel\r\n      - Wheel\r\n    - steeringAngle: Real\r\n  - RearAxleAssembly\r\n    - axle: Axle\r\n    - Axle\r\n      - wheel: Wheel\r\n      - Wheel\r\n      - Wheel\r\n    - Axle\r\n      - wheel: Wheel\r\n      - Wheel\r\n      - Wheel\r\n```\r\n\r\nIn this model, the `Vehicle` class represents the vehicle as a whole, which has a `mass` attribute. The `AxleAssembly` class represents the axle assemblies that make up the vehicle, which contain `Axle` components that in turn contain `Wheel` components. The `FrontAxleAssembly`"
]