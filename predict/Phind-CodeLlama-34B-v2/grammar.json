[
    "\n```sysml\npackage Vehicle {\n  class Vehicle {\n    attribute mass: Real\n    attribute status: Status\n    part engine: Engine\n    part driver: Personnel\n  }\n\n  class Status {\n    attribute gear: Gear\n    attribute accelerator: Real\n  }\n\n  class Engine {\n    // attributes and operations for engine\n  }\n\n  class Personnel {\n    // attributes and operations for personnel\n  }\n\n  class Gear {\n    // attributes and operations for gear\n  }\n}\n```",
    "\n```sysml\nblock Personnel {}\n\nblock Engine {}\n\nblock Vehicle {\n  part driver: Personnel;\n  part engine: Engine;\n}\n\nblock ManuallyOperatedVehicle extends Vehicle {}\n\nblock PoweredVehicle extends Vehicle {}\n\nblock ManuallyOperatedPoweredVehicle extends Vehicle {}\n```",
    "\n```sysml\npackage VehicleStructure {\n  class Vehicle {\n    part engine: Engine;\n    part transmission: Transmission;\n    part wheels: Set(Wheel, 4);\n  }\n  abstract class VehicleComponent {\n  }\n  class Engine extends VehicleComponent {\n  }\n  class Transmission extends VehicleComponent {\n  }\n  class Wheel extends VehicleComponent {\n  }\n}\n```",
    "\n\n```\npackage VehicleType {\n  class Vehicle {\n    component Engine;\n  }\n  class SmallVehicle extends Vehicle {\n    component SmallEngine extends Engine {\n      attribute cylinders = 4;\n    }\n  }\n  class LargeVehicle extends Vehicle {\n    component LargeEngine extends Engine {\n      attribute cylinders = 6;\n    }\n  }\n}\n```",
    "\n```sysml\nblock TrafficSignalSystem\n  part trafficSignal: TrafficSignal\n  part greenSignal: TrafficSignal\n  init\n    trafficSignal.color = \"red\"\n    greenSignal.color = \"green\"\n  end\nend\n\nblock TrafficSignal\n  attribute color: String\nend\n```",
    "\n\n```\npackage InformationClassification\n{\n  block TrafficLight\n  {\n    attribute color: string;\n    attribute code: string;\n    attribute grade: string;\n    attribute points: real;\n  }\n\n  package Unclassified\n  {\n    block UnclassifiedInfo extends TrafficLight\n    {\n      attribute color = \"green\";\n      attribute code = \"uncl\";\n      attribute grade: string;\n      attribute points: real;\n    }\n  }\n\n  package Confidential\n  {\n    block ConfidentialInfo extends TrafficLight\n    {\n      attribute color = \"yellow\";\n      attribute code = \"conf\";\n      attribute grade: string;\n      attribute points: real;\n    }\n  }\n\n  package Secret\n  {\n    block SecretInfo extends TrafficLight\n    {\n      attribute color = \"red\";\n      attribute code = \"secr\";\n      attribute grade: string;\n      attribute points: real;\n    }\n  }\n\n  package GradeClassification\n  {\n    block Grade\n    {\n      attribute letter: string;\n     ",
    "\n```\npackage VehicleType {\n  class SmallVehicle {\n    part engine: Engine {\n      part cylinder: Cylinder[4];\n    }\n  }\n  class LargeVehicle {\n    part engine: Engine {\n      part cylinder: Cylinder[6];\n    }\n  }\n  class Engine {\n    part cylinder: Cylinder;\n  }\n  class Cylinder {\n  }\n}\n```",
    "\n```\npackage VehicleModeling {\n  class Vehicle {\n    attribute qualityAttributes : String[];\n    attribute driverInformation : String;\n    part fuelTank : FuelTank;\n  }\n\n  class FuelTank {\n    attribute fuelType : String;\n  }\n\n  package System {\n    class Fuel {\n      attribute type : String;\n    }\n\n    class Personnel {\n      attribute name : String;\n    }\n  }\n}\n```",
    "\n```\npackage WheelAssembly {\n  block WheelBearingUnit {\n    // Wheel bearing unit properties and operations\n  }\n  block Tire {\n    // Tire properties and operations\n  }\n  block Bead {\n    // Bead properties and operations\n  }\n  block Hub {\n    // Hub properties and operations\n  }\n  block Rim {\n    // Rim properties and operations\n  }\n  block BoltMountingHole {\n    // Bolt mounting hole properties and operations\n  }\n  block ThreadedHole {\n    // Threaded hole properties and operations\n  }\n  block BoltConnection {\n    // Bolt connection properties and operations\n  }\n}\n```",
    "\n```\npackage FuelManagementSystem {\n  block FuelTankAssembly {\n    part fuelTank;\n    part fuelPump;\n    part temperatureSensor;\n    connector fuelSupplyPort;\n    connector fuelReturnPort;\n    connector temperatureTelemetryPort;\n  }\n  block Engine {\n    part engine;\n    part fuelInjector;\n    part temperatureSensor;\n    connector fuelSupplyPort;\n    connector fuelReturnPort;\n    connector temperatureTelemetryPort;\n  }\n  block FuelManagementSystem {\n    part FuelTankAssembly;\n    part Engine;\n    part controlUnit;\n    part dataStorage;\n    connector fuelSupplyPort;\n    connector fuelReturnPort;\n    connector temperatureTelemetryPort;\n  }\n}\n```",
    "\n```sysml\npackage Vehicle {\n  block CompleteVehicle {\n    attribute mass : Real = 1750;\n    part frontAxle : Axle;\n    part rearAxle : Axle;\n    part tires : Tires;\n  }\n  block Axle {\n    attribute mass : Real;\n    attribute steeringAngle : Real;\n    part tires : Tires;\n  }\n  block Tires {\n    attribute mass : Real;\n    attribute count : Integer;\n  }\n  package Configuration {\n    block VehicleConfiguration {\n      part completeVehicle : CompleteVehicle;\n      part frontAxle : Axle;\n      part rearAxle : Axle;\n      part tires : Tires;\n    }\n    instance vehicle1_c1 : VehicleConfiguration {\n      completeVehicle.mass = 2000;\n      frontAxle.steeringAngle = 30;\n    }\n  }\n}\n```\n```",
    "\n```\npackage CouplingSystem {\n  block Vehicle {\n    part hitch: Hitch;\n  }\n  block Trailer {\n    part connector: Connector;\n  }\n  block Hitch {\n    part couplingBall: CouplingBall;\n  }\n  block Connector {\n    part couplingBall: CouplingBall;\n  }\n  block CouplingBall {\n  }\n}\n```",
    "\n```sysml\npackage VehiclePowerTransmissionSystem {\n  block Engine {\n    port fuelCommandIn;\n    port powerOut;\n    port clutchIn;\n  }\n  block Transmission {\n    port powerIn;\n    port powerOut;\n    port clutchOut;\n  }\n  block Clutch {\n    port powerIn;\n    port powerOut;\n    port clutchIn;\n    port clutchOut;\n  }\n  block Driveshaft {\n    port powerIn;\n    port powerOut;\n  }\n  block RearAxleAssembly {\n    block Differential {\n      port powerIn;\n      port powerOut;\n    }\n    block HalfShaft {\n      port powerIn;\n      port powerOut;\n    }\n    block Wheel {\n      port powerIn;\n      port powerOut;\n      port roadInterface;\n    }\n  }\n  block RoadInterface {\n    port powerIn;\n    port powerOut;\n  }\n}\n```",
    "\n\n```sysml\npackage System {\n  block Subsystem1 {\n    part c1 {\n      port pb;\n    }\n    part c2 {\n      port pb;\n    }\n    connector SignalConnection {\n      flow port pb;\n    }\n    connection c1.pb -> SignalConnection.pb;\n    connection c2.pb -> SignalConnection.pb;\n  }\n  block Subsystem2 {\n    part c3 {\n      port pd;\n    }\n    part c4 {\n      port pd;\n    }\n    connector SignalConnection {\n      flow port pd;\n    }\n    connection c3.pd -> SignalConnection.pd;\n    connection c4.pd -> SignalConnection.pd;\n  }\n  interface pe {\n    port pb;\n  }\n  interface pf {\n    port pd;\n  }\n  connection Subsystem1.pe -> Subsystem2.pf;\n}\n\npackage Module {\n  block Module1 {\n    part c1 {\n      port pb;\n    }\n    part c2 {\n",
    "\n```\npackage AutomotivePowertrain {\n  block FuelCommand {\n    in port command\n    out port fuelFlow\n  }\n  block EngineControl {\n    in port fuelFlow\n    out port engineTorque\n    in port startStop\n  }\n  block Transmission {\n    in port engineTorque\n    out port driveshaftTorque\n  }\n  block Driveshaft {\n    in port driveshaftTorque\n    out port leftWheelTorque\n    out port rightWheelTorque\n  }\n  block PowerDistribution {\n    in port leftWheelTorque\n    in port rightWheelTorque\n  }\n}\n```",
    "\n```\npackage AutomotivePowertrainControl\n  block EngineControl\n    operation startEngine\n    operation shutdownEngine\n  end EngineControl\n\n  block FuelControl\n    operation commandFuel\n  end FuelControl\n\n  block TorqueControl\n    operation generateTorque\n    operation amplifyTorque\n    operation transmitTorque\n    operation distributeTorque\n  end TorqueControl\n\n  block StallDetection\n    operation detectStall\n    operation haltOperations\n  end StallDetection\n\n  block PowerTransmission\n    operation transmitPower\n  end PowerTransmission\n\n  block UserInterface\n    operation reliablePowerResponse\n    operation handlingExperience\n  end UserInterface\n\n  package\n    part engineControl: EngineControl\n    part fuelControl: FuelControl\n    part torqueControl: TorqueControl\n    part stallDetection: StallDetection\n    part powerTransmission: PowerTransmission\n    part userInterface: UserInterface\n  end AutomotivePowertrainControl\n```",
    "\n\n```\npackage VehiclePowertrainSystem {\n  block Engine {\n    in port FuelCommand\n    out port EngineOutputTorque\n  }\n  block Transmission {\n    in port EngineOutputTorque\n    out port TransmittedTorque\n  }\n  block Wheel {\n    in port TransmittedTorque\n  }\n  block EngineControl {\n    in port EngineStartSignal\n    in port EngineShutdownSignal\n    out port EngineOutputTorque\n  }\n  block TransmissionControl {\n    in port EngineOutputTorque\n    out port TransmittedTorque\n  }\n  block WheelControl {\n    in port TransmittedTorque\n  }\n  block VehiclePowertrainSystem {\n    in port FuelCommand\n    in port EngineStartSignal\n    in port EngineShutdownSignal\n  }\n}\n```",
    "\n```sysml\npackage VehicleAndTrailer {\n  block HitchBall {\n    part powerConnection {\n      type: PowerConnection;\n    }\n  }\n  block TrailerCoupler {\n    part powerConnection {\n      type: PowerConnection;\n    }\n  }\n  block Vehicle {\n    part frame {\n      part hitchBall {\n        type: HitchBall;\n      }\n    }\n  }\n  block Trailer {\n    part frame {\n      part trailerCoupler {\n        type: TrailerCoupler;\n      }\n    }\n  }\n  connector PowerConnection {\n    direction: inout;\n  }\n}\n```",
    "\n```\npackage VehicleTrailerSystem {\n  block Vehicle {\n    part Chassis;\n    part TowBall;\n  }\n  block Trailer {\n    part Coupler;\n    part TrailerFrame;\n  }\n  connection ConnectTrailer {\n    parame Connected: Boolean = false;\n    flow Real ConnectedSpeed;\n  }\n  operation Connect {\n    in Vehicle.TowBall;\n    in Trailer.Coupler;\n    inout ConnectTrailer;\n  }\n  operation Disconnect {\n    inout ConnectTrailer;\n  }\n}\n```",
    "\n```\npackage VehicleAndTrailer {\n  block Vehicle {\n    part Chassis {\n      block TowBallDevice {}\n    }\n  }\n  block Trailer {\n    part TrailerChassis {}\n    part CouplerMechanism {\n      operation engage() {}\n      operation disengage() {}\n    }\n  }\n  operation connect() {}\n  operation disconnect() {}\n}\n```",
    "\n```\npackage FuelSystem {\n  block FuelTank {\n    port in FuelSupply;\n    port out FuelReturn;\n    part Monitor {\n      attribute temperature;\n    }\n  }\n  block Engine {\n    port in FuelIntake;\n    port out FuelExhaust;\n  }\n  block Interface {\n    port in FuelConnection;\n  }\n  package FuelFlow {\n    flow FuelSupplyFlow from FuelTank.FuelSupply to Engine.FuelIntake;\n    flow FuelReturnFlow from Engine.FuelExhaust to FuelTank.FuelReturn;\n  }\n  package Monitoring {\n    flow TemperatureFlow from FuelTank.Monitor.temperature to Engine.Monitor.temperature;\n  }\n  package InterfaceConnections {\n    flow InterfaceConnection from FuelTank.Interface.FuelConnection to Engine.Interface.FuelConnection;\n  }\n}\n```",
    "\n```\npackage VehicleFuelDeliverySystem {\n  block StorageTank {\n    flowPort in;\n    flowPort out;\n    attribute maxCapacity : Real;\n  }\n  block FuelPump {\n    flowPort in;\n    flowPort out;\n  }\n  block VehicleFuelTank {\n    flowPort in;\n    attribute currentLevel : Real;\n    attribute maxCapacity : Real;\n  }\n  connector FuelFlow {\n    flow Real;\n  }\n  package FuelDeliverySystem {\n    block System {\n      part storageTank : StorageTank;\n      part fuelPump : FuelPump;\n      part vehicleFuelTank : VehicleFuelTank;\n      connector fuelFlow : FuelFlow;\n    }\n  }\n}\n```",
    "\n```\npackage AutomobileAssembly {\n  block GearboxAssembly {\n    part input {\n      VehicleAssembly vehicle;\n    }\n    part output {\n      VehicleAssemblyWithGearbox vehicleWithGearbox;\n    }\n  }\n  block EngineAssembly {\n    part input {\n      VehicleAssemblyWithGearbox vehicleWithGearbox;\n    }\n    part output {\n      VehicleAssemblyWithEngine vehicleWithEngine;\n    }\n  }\n  block FinalAssembly {\n    part input {\n      VehicleAssemblyWithEngine vehicleWithEngine;\n    }\n    part output {\n      FullyAssembledVehicle vehicle;\n    }\n  }\n}\n```",
    "\n\n```sysml\npackage VehicleA {\n  block Off {\n    operation enter() {\n      // Transition to Starting state\n    }\n  }\n  block Starting {\n    operation enter() {\n      // Transition to Running state\n    }\n  }\n  block Running {\n    operation enter() {\n      // Automatically perform self-checks, supply power, apply parking brake\n    }\n  }\n  block HealthManagement {\n    operation enter() {\n      // Monitor vehicle temperature\n    }\n  }\n  block Maintenance {\n    operation enter() {\n      // Handle maintenance tasks\n    }\n  }\n  block Degraded {\n    operation enter() {\n      // Handle degraded mode\n    }\n  }\n  block Normal {\n    operation enter() {\n      // Return to normal operation\n    }\n  }\n}\n\npackage VehicleController {\n  operation startUp() {\n    // Handle start-up signals\n  }\n  operation shutDown() {\n    // Handle shut-down signals\n  }\n  operation receiveStartSignal() {\n",
    "\n```sysml\npackage VehicleSystem {\n  block Vehicle {\n    part operation: Operation\n    part health: Health\n    part controller: Controller\n  }\n  block Operation {\n    operation startup() {\n      precondition: brakePedalPressed and startSignalReceived\n      behavior: {\n        selfInspection();\n        powerSupply();\n      }\n      postcondition: inOperation\n    }\n    operation shutdown() {\n      precondition: inOperation\n      behavior: {\n        // Shutdown procedures\n      }\n      postcondition: inShutdown\n    }\n  }\n  block Health {\n    operation detectOverheating() {\n      precondition: realTimeTemperatureSensing\n      behavior: {\n        sendWarningSignal();\n        setVehicleStatusToDegraded();\n        ensureSafety();\n      }\n      postcondition: overheatingDetected\n    }\n    operation manageMaintenance() {\n      behavior: {\n        // Regular maintenance procedures\n      }\n      postcondition: maintenanceCompleted\n    }\n    operation recoverFault",
    "\n```\npackage VehicleDynamics {\n  block Vehicle {\n    parameter Real mass;\n    parameter Real position;\n    parameter Real velocity;\n    parameter Real acceleration;\n  }\n  block Road {\n    parameter Real slope;\n    parameter Real frictionCoefficient;\n  }\n  block Environment {\n    part Vehicle vehicle;\n    part Road road;\n    flow Real time;\n  }\n  block Simulation {\n    part Environment environment;\n    flow Real timeSeries;\n  }\n}\n```",
    "\n\n```sysml\npackage VehicleConfiguration {\n  block SubsystemA {\n    block Component1 {}\n    block Component2 {}\n    block Component3 {}\n  }\n  block SubsystemB {\n    block Component4 {}\n    block Component5 {}\n    block Component6 {}\n  }\n  block ConfigurationA {\n    part SubsystemA1: SubsystemA {\n      part Component1 {}\n      part Component2 {}\n    }\n    part SubsystemB3: SubsystemB {\n      part Component4 {}\n      part Component5 {}\n    }\n  }\n  block ConfigurationB {\n    part SubsystemA2: SubsystemA {\n      part Component2 {}\n      part Component3 {}\n    }\n    part SubsystemB3: SubsystemB {\n      part Component4 {}\n      part Component5 {}\n    }\n  }\n  constraint constraint1 {\n    if (SubsystemA.second) then (SubsystemB.third) else (not SubsystemA.second)\n  }\n}\n```\n```",
    "\n```sysml\nblock SubsystemA {\n  part part1;\n  part part2;\n  part part3 {\n    port p1;\n  };\n  part part4;\n  part part5 {\n    port p2;\n  };\n  part part6;\n}\n\nblock SubsystemB {\n  part part1;\n  part part2;\n  part part3 {\n    port p1;\n  };\n  part part4;\n  part part5 {\n    port p2;\n  };\n  part part6;\n}\n\nblock VehicleConfigA {\n  subsystem SubsystemA;\n  subsystem SubsystemB;\n}\n\nblock VehicleConfigB {\n  subsystem SubsystemA;\n  subsystem SubsystemB;\n}\n```",
    "\n```\npackage VehicleProductLine {\n  block Engine {\n    attribute cylinderCount: Integer\n  }\n  block Transmission {\n    attribute type: String\n  }\n  block Wheel {\n    attribute rimWidth: Real\n  }\n  block Vehicle {\n    part engine: Engine\n    part transmission: Transmission\n    part wheels: Wheel\n    constraint performance {\n      engine.cylinderCount > 4 and transmission.type = \"automatic\" and wheel.rimWidth > 15.0\n    }\n    constraint compatibility {\n      // Add necessary constraints here\n    }\n  }\n  block ProductLine {\n    part vehicles: Vehicle[*]\n  }\n}\n```\n```",
    "\n\n```sysml\npackage Vehicle {\n  class Vehicle {\n    attribute mass: Real\n    attribute fuelStatus: FuelStatus\n    attribute powertrain: Powertrain\n    attribute reliability: Reliability\n  }\n\n  class FuelStatus {\n    attribute fuelLevel: Real\n  }\n\n  class Powertrain {\n    attribute engine: Engine\n    attribute transmission: Transmission\n    attribute driveInterface: DriveInterface\n  }\n\n  class Engine {\n    operation outputTorque(): Real\n  }\n\n  class Transmission {\n  }\n\n  class DriveInterface {\n  }\n\n  class Reliability {\n    attribute performance: Real\n    attribute durability: Real\n  }\n}\n```\n\nThis SysML v2 model represents the given requirements by creating a package named \"Vehicle\" that contains classes for \"Vehicle\", \"FuelStatus\", \"Powertrain\", \"Engine\", \"Transmission\", \"DriveInterface\", and \"Reliability\". The attributes and operations within these classes represent the specific properties and behaviors described in the requirements.",
    "\n```\npackage VehicleMassCompliance {\n  block TestOperator {\n    operation measureMass() : Real\n  }\n  block Vehicle {\n    attribute actualMass : Real\n  }\n  block ComplianceSystem {\n    part testOperator : TestOperator\n    part vehicle : Vehicle\n    operation checkCompliance() : Boolean\n  }\n  package Testing {\n    block TestingSession {\n      part complianceSystem : ComplianceSystem\n      operation testVehicle()\n    }\n  }\n}\n```",
    "\n```\npackage WaterSupplyNetwork\n{\n  block SpigotBank\n  {\n    flow port hotWaterOut;\n    flow port coldWureaterOut;\n  }\n\n  block Spigot\n  {\n    flow port hotWaterIn;\n    flow port coldWaterIn;\n  }\n\n  block Faucet\n  {\n    part Spigot hotSpigot;\n    part Spigot coldSpigot;\n  }\n\n  block FaucetInlet\n  {\n    flow port hotWaterIn;\n    flow port coldWaterIn;\n  }\n\n  // Associations\n  SpigotBank -- hotWaterOut > Faucet -- hotSpigot -- hotWaterIn;\n  SpigotBank -- coldWaterOut > Faucet -- coldSpigot -- coldWaterIn;\n}\n```",
    "\n```\npackage VehicleQualityModeling {\n  block Vehicle {\n    part engine;\n    part transmission;\n    part frontAxleAssembly;\n    part rearAxleAssembly;\n    attribute totalMass;\n    operation calculateTotalMass;\n    operation analyzeQuality;\n    operation defineRequirements;\n    operation formulateUseCases;\n    operation generateTasks;\n    operation trackAnalysis;\n    operation supportDesignOptimization;\n  }\n}\n```",
    "\n```\npackage VehiclePowertrain {\n  block Engine {\n    part Cylinder {\n      attribute count;\n      attribute size;\n    }\n    part Piston {\n      attribute count;\n      attribute size;\n    }\n    part ConnectingRod {\n      attribute count;\n      attribute length;\n    }\n    part Crankshaft {\n      attribute size;\n    }\n    operation assemble() {\n      pre: Cylinder.count = Piston.count = ConnectingRod.count\n      post: Engine.isAssembled\n    }\n  }\n  block EngineConfiguration {\n    attribute power;\n    attribute mass;\n    attribute efficiency;\n    attribute reliability;\n    attribute cost;\n  }\n  operation analyzeTradeoff() {\n    in: Engine, EngineConfiguration\n    out: EngineConfiguration\n  }\n  operation recommendOptimalEngine() {\n    in: Engine, EngineConfiguration\n    out: EngineConfiguration\n  }\n  operation explainEngineSelection() {\n    in: EngineConfiguration\n    out: String\n  }\n}\n```",
    "\n```\npackage VehicleFuelEconomy {\n  block Vehicle {\n    part powertrain;\n    part load;\n    part operatingConditions;\n  }\n  block FuelEconomy {\n    property minUrbanRange: 25 miles;\n    property minHighwayRange: 30 miles;\n    property fuelEconomyUnit: \"miles per gallon\";\n    property additionalLoad: 1000 pounds;\n  }\n  constraint checkFuelEconomy {\n    Vehicle.operatingConditions.urbanDriving(additionalLoad) -> FuelEconomy.minUrbanRange;\n    Vehicle.operatingConditions.highwayDriving(additionalLoad) -> FuelEconomy.minHighwayRange;\n  }\n}\n```",
    "\n```\npackage VehicleMotionSimulation\n{\n  block Vehicle\n  {\n    parameter Real mass;\n    parameter Real initialPosition;\n    parameter Real initialVelocity;\n    parameter Real[] powerOutputData;\n    \n    flow Real acceleration;\n    flow Real velocity;\n    flow Real position;\n    \n    operation calculate(parameter Real timeStep)\n    {\n      // Calculate acceleration, velocity, and position based on dynamic equations\n    }\n  }\n}\n```\n\nThe BNF grammar for this subset of SysML v2 is as follows:\n\n```\n<package> ::= \"package\" <identifier> \"{\" <block>* \"}\"\n<block> ::= \"block\" <identifier> \"{\" <parameter>* <flow>* <operation>* \"}\"\n<parameter> ::= \"parameter\" <type> <identifier> \";\"\n<flow> ::= \"flow\" <type> <identifier> \";\"\n<operation> ::= \"operation\" <identifier> \"(\" <parameter>* \")\" <block>\n<type> ::= \"Real\" | \"Integer\" | \"Boolean",
    "\n```sysml\npackage VehicleSystem {\n  class Vehicle {\n    attribute mass : Real = 2500;\n    part frontAxleAssembly : FrontAxleAssembly;\n    part rearAxleAssembly : RearAxleAssembly;\n  }\n\n  class FrontAxleAssembly {\n    attribute mass : Real = 150;\n    part frontWheel : Wheel;\n    part frontAxle : Axle;\n  }\n\n  class RearAxleAssembly {\n    attribute mass : Real = 250;\n    part rearWheel : Wheel;\n    part rearAxle : Axle;\n  }\n\n  class Wheel {\n    attribute mass : Real;\n  }\n\n  class Axle {\n    attribute mass : Real;\n    attribute steeringAngle : Real;\n  }\n}\n```",
    "\n```\npackage Vehicle {\n  block Vehicle {\n    part SeatBelt: SafetyFeature {\n      attribute mandatory = true;\n    }\n    part Bumper: SafetyFeature {\n      attribute mandatory = true;\n    }\n    part Airbag: SafetyFeature {\n      attribute mandatory = false;\n    }\n    part AntiLockBrakingSystem: SafetyFeature {\n      attribute mandatory = false;\n    }\n    part Alarm: SecurityDevice {\n    }\n    part KeylessEntrySystem: SecurityDevice {\n    }\n    operation filterAndOrganize(featureType: FeatureType) {\n      // implementation\n    }\n  }\n  abstract block SafetyFeature {\n  }\n  abstract block SecurityDevice {\n  }\n  enumeration FeatureType {\n    SAFETY,\n    SECURITY\n  }\n}\n```",
    "\n```sysml\npackage LayeredArchitecture {\n  block ApplicationLayer {\n    attribute x;\n    attribute y;\n    attribute z;\n    operation getZ: Real;\n    operation getServiceLayer: ServiceLayer;\n  }\n  block ServiceLayer {\n    operation getDataLayer: DataLayer;\n  }\n  block DataLayer {\n    attribute data;\n    operation storeData: Void;\n    operation retrieveData: Any;\n  }\n}\n```",
    "\n```\npackage powertrainSystem {\n  block torqueGenerator {\n    parameter Real torqueOutput >= 0;\n  }\n  block logicLayer {\n    part torqueGenerator: torqueGenerator;\n  }\n  block physicalLayer {\n    part engine: torqueGenerator;\n  }\n  block powertrain {\n    part logic: logicLayer;\n    part physical: physicalLayer;\n    constraint torqueTransmission {\n      engine.torqueOutput = logic.torqueGenerator.torqueOutput;\n    }\n  }\n}\n```",
    "\n\n```\nblock PowerTransmissionSystem\n  part torqueGenerator\n    block TorqueGenerator\n      operation generateTorque\n    end TorqueGenerator\n  end torqueGenerator\n  part powertrain\n    block Engine\n      operation executeTorque\n    end Engine\n  end powertrain\n  flow power from torqueGenerator to powertrain\n  flow torque from torqueGenerator to powertrain\n  map torqueGenerator.generateTorque to powertrain.Engine.executeTorque\nend PowerTransmissionSystem\n```",
    "\n\n```sysml\npackage VehicleSafetyAndAntiTheftFunctionCatalogue {\n  block BasicSafetyComponents {\n    part FrontSeatBelts {\n      type: SeatBelt;\n      location: Body;\n    }\n    part Bumpers {\n      type: Bumper;\n      location: Body;\n    }\n  }\n  block OptionalSafetyFeatures {\n    part DriverAirbag {\n      type: Airbag;\n      location: Body;\n      mandatory: false;\n    }\n    part AntiLockBrakingSystem {\n      type: System;\n      location: Body;\n      mandatory: false;\n    }\n  }\n  block SecurityComponents {\n    part AlarmSystem {\n      type: System;\n      location: Body;\n    }\n    part KeylessEntrySystem {\n      type: System;\n      location: Body;\n    }\n  }\n  block ComponentCategories {\n    part SafetyComponents {\n      type: Component;\n      location: Body;\n    }\n    part AntiTheftComponents {\n      type",
    "\n```\npackage FuelSupplyAndReturnManagement {\n  block FuelSystem {\n    part FuelTankAssembly {\n      block FuelTank { }\n      block FuelPump { }\n    }\n    connector FuelFlow {\n      flow: Real;\n      temperature: Real;\n    }\n    part Vehicle {\n      flow InFuelFlow: FuelFlow;\n      flow OutFuelFlow: FuelFlow;\n    }\n  }\n}\n```",
    "\n```\npackage Vehicle {\n  block Interior {\n    part SeatBelt mandatory;\n    part SeatBelt mandatory;\n    part Airbag optional;\n    part AntiTheftAlarm mandatory;\n  }\n  block Body {\n    part Bumper mandatory;\n    part KeylessEntrySystem mandatory;\n  }\n  block Chassis {\n    part Wheel count=2;\n    part AntiLockBrakingSystem count=2 optional;\n  }\n  block ComplianceManagementSystem {\n    operation identifyAndClassify() {\n      Interior.SeatBelt;\n      Interior.Airbag;\n      Interior.AntiTheftAlarm;\n      Body.Bumper;\n      Body.KeylessEntrySystem;\n      Chassis.Wheel;\n      Chassis.AntiLockBrakingSystem;\n    }\n  }\n}\n```",
    "\n```\npackage VehicleSafetyAndSecurityComponent {\n  block Interior {\n    part AlarmSystem;\n    part SeatBelts;\n    part FrontRowSeats;\n    part DriversAirbag;\n  }\n  block BodyAssembly {\n    part VehicleBody;\n    part Bumper;\n    part KeylessEntrySystem;\n  }\n  relationship Reflects {\n    source SafetyFeatures;\n    target Interior, BodyAssembly;\n  }\n  relationship Reflects {\n    source SecurityFeatures;\n    target Interior, BodyAssembly;\n  }\n  package Functions {\n    block SafetyFeatures {\n      part ConfigurationOfSeatBelts;\n      part Airbags;\n      part Bumpers;\n    }\n    block SecurityFeatures {\n      part OnboardAlarm;\n      part KeylessEntrySystem;\n    }\n  }\n}\n```",
    "\n```\nblock ClassifiedComponent\n  attribute securityClassification : String\n  operation classify(level : String)\n  operation displayClassification()\nend ClassifiedComponent\n\nblock System\n  part component1 : ClassifiedComponent\n  part component2 : ClassifiedComponent\n  part component3 : ClassifiedComponent\n  operation classifyComponents()\nend System\n\noperation System::classifyComponents()\n  component1.classify(\"Unclassified\")\n  component2.classify(\"Confidential\")\n  component3.classified(\"Secret\")\nend operation\n\noperation ClassifiedComponent::classify(level : String)\n  this.securityClassification = level\nend operation\n\noperation ClassifiedComponent::displayClassification()\n  print \"The security classification of this component is: \" + this.securityClassification\nend operation\n```",
    "\n```\npackage AutomotiveECU {\n  block VehicleControlUnit {\n    part BusIF;\n  }\n  block EngineControlUnit {\n    part BusIF;\n  }\n  connector CANbus {\n    flow Real speed;\n    flow Real torque;\n  }\n  block VehicleSubsystem {\n    part SensorIF;\n    flow Real sensorData;\n  }\n  block EngineSubsystem {\n    part SensorIF;\n    flow Real sensorData;\n  }\n  package ECUCommunication {\n    flow CANbus connection1;\n    flow CANbus connection2;\n  }\n}\n```",
    "\n\n```sysml\npackage BatteryManagementSystem {\n  block Battery {\n    operation checkStatus() : boolean\n    operation alertUser()\n  }\n\n  block BloodGlucoseMeter {\n    part battery : Battery\n    operation measureBloodGlucose() : real\n    operation emergencyResponse()\n  }\n\n  block System {\n    part bloodGlucoseMeter : BloodGlucoseMeter\n    operation manageBatteryStatus()\n    operation manageBloodGlucoseMeasurement()\n  }\n}\n```\n\nThe given SysML v2 model represents a system that manages the battery status of a blood glucose meter. The model consists of three main blocks: Battery, BloodGlucoseMeter, and System. The Battery block has operations to check the status of the battery and alert the user. The BloodGlucoseMeter block has operations to measure blood glucose and perform an emergency response. The System block has operations to manage the battery status and blood glucose measurement, and it is composed of a BloodGl",
    "\n\n```sysml\npackage Constants {\n  class MathConstants {\n    attribute e: Real = 2.71828182845904523536028747135266249775724709369995;\n    attribute pi: Real = 3.14159265358979323846264338327950288419716939937510;\n  }\n  class PhysConstants {\n    attribute c: Real = 299792458 (m/s);\n    attribute alpha: Real = 7.29735256939e-3 (1/s);\n    attribute m_e_over_m_p: Real = 0.00054461702187 (dimensionless);\n  }\n  class ScenarioConstants {\n    attribute g: Real = 9.8",
    "\n```\npackage AutomotiveComponentSpecification\n  block Tire\n    attribute manufacturer: String\n    attribute rimDiameter: Real\n    attribute width: Integer\n  end\n  block FrenchTire extends Tire\n  end\n  block MichelinTire extends FrenchTire\n  end\n  instance Tire1: MichelinTire\n    manufacturer = \"Michelin\"\n    rimDiameter = 18.0\n    width = 245\n  end\nend\n```",
    "\n```\npackage AutomotiveComponentModel\n{\n  class Vehicle\n  {\n    attribute mass: 1200 kg;\n    attribute length: 4.82 m;\n    part frontWheels: FrontWheels;\n  }\n\n  class FrontWheels\n  {\n    part leftWheel: Wheel;\n    part rightWheel: Wheel;\n  }\n\n  class Wheel\n  {\n    attribute hubDiameter: 18 in;\n    attribute width: 245 mm;\n    attribute outerDiameter: (hubDiameter + tireHeight) * 0.0254;\n    part tire: Tire;\n  }\n\n  class Tire\n  {\n    attribute height: 65 mm;\n  }\n}\n```\n\n––––––––––––––––––––––––––––––––––\n\nThe output model is a valid SysML v2 code that represents the given natural-language requirements. It defines a",
    "\n\n```\npackage Vehicle {\n  block Powertrain {\n    part engine: Engine;\n    part transmission: Transmission;\n  }\n  block Engine {\n    attribute type: String;\n  }\n  block Transmission {\n    attribute type: String;\n  }\n  block Vehicle {\n    part powertrain: Powertrain;\n    constraint {\n      self.powertrain.engine.type = \"four-cylinder\" implies self.powertrain.transmission.type = \"manual\";\n      self.powertrain.engine.type = \"six-cylinder\" implies self.powertrain.transmission.type = \"automatic\";\n    }\n  }\n}\n```",
    "\n```sysml\npackage Vehicle {\n  class Car {\n    attribute mass: Real = 1200;\n    attribute length: Real = 4.82;\n    part wheelAssemblies: Set(WheelAssembly);\n  }\n\n  class WheelAssembly {\n    part wheel: Wheel;\n    part brakeDisc: BrakeDisc;\n    constraint check_fitment {\n      brakeDisc.diameter <= wheel.outerDiameter\n    }\n  }\n\n  class Wheel {\n    part rim: Rim;\n    part tire: Tire;\n    attribute outerDiameter: Real;\n    constraint calculate_outerDiameter {\n      outerDiameter = rim.diameter + tire.outerDiameter\n    }\n  }\n\n  class Rim {\n    attribute diameter: Real = 18;\n  }\n\n  class Tire {\n    attribute width: Real = 245;\n    attribute height: Real = 45;\n    attribute treadDepth: Real = 6.0;\n   ",
    "\n```\npackage AutomotiveFuelSystem {\n  block FuelTankAssembly {\n    interface outlet {\n      flow port: fuel;\n      flow port: returnFuel;\n    }\n    part fuelTank;\n    part fuelPump;\n  }\n\n  block FuelPump {\n    interface inlet {\n      flow port: fuel;\n    }\n    interface outlet {\n      flow port: returnFuel;\n    }\n  }\n\n  block Engine {\n    interface inlet {\n      flow port: fuel;\n    }\n  }\n\n  block MonitoringSystem {\n    interface inlet {\n      flow port: fuel;\n    }\n    attribute temperature: Real;\n  }\n\n  package FuelFlow {\n    flow FuelFlow {\n      from FuelTankAssembly.fuelTank.outlet;\n      to FuelTankAssembly.fuelPump.inlet;\n      to Engine.inlet;\n      to MonitoringSystem.inlet;\n      back to FuelTankAssembly.outlet.fuel;\n      back to",
    "\n```sysml\npackage PhysicalQuantities {\n  class PhysicalQuantity {\n    attribute name: String;\n    attribute symbol: String;\n    attribute baseUnit: Unit;\n  }\n\n  class Unit {\n    attribute name: String;\n    attribute symbol: String;\n    attribute conversionFactorToBase: Real;\n  }\n\n  package ISQ {\n    PhysicalQuantity Length {\n      attribute symbol: \"L\";\n      attribute baseUnit: Meter;\n    }\n    PhysicalQuantity Mass {\n      attribute symbol: \"M\";\n      attribute baseUnit: Kilogram;\n    }\n    PhysicalQuantity Time {\n      attribute symbol: \"T\";\n      attribute baseUnit: Second;\n    }\n    PhysicalQuantity ElectricCurrent {\n      attribute symbol: \"I\";\n      attribute baseUnit: Ampere;\n    }\n    PhysicalQuantity Temperature {\n      attribute symbol: \"Θ\";\n      attribute baseUnit: Kelvin;\n    }\n    PhysicalQuantity AmountOfSubstance {\n      attribute symbol: \"N\";\n      attribute baseUnit: M",
    "\n```\npackage StandardizedUnitSystemLibrary {\n  block UnitConverter {\n    operation convert(inputUnit: Unit, outputUnit: Unit): Real;\n  }\n\n  block Unit {\n    attribute name: String;\n    attribute symbol: String;\n    attribute conversionFactor: Real;\n    attribute isBaseUnit: Boolean;\n  }\n\n  package ISQUnits {\n    // Define all ISQ units here\n  }\n\n  package USCustomaryUnits {\n    // Define all USCustomaryUnits here\n  }\n}\n```",
    "\n```\npackage CarHeadlampTiltAdjustment\n\nblock TiltAngle\n  parameter minTiltAngle: Real = 50;\n  parameter maxTiltAngle: Real = 80;\n  flow Real tiltAngle;\nend TiltAngle;\n\nblock Knob\n  flow Real knobValue;\n  flow Real tiltAngle: TiltAngle;\n  constraint \"knobValue >= tiltAngle.minTiltAngle and knobValue <= tiltAngle.maxTiltAngle\";\nend Knob;\n\nblock System\n  part knob: Knob;\n  part tiltAngle: TiltAngle;\n  constraint \"knob.knobValue >= tiltAngle.minTiltAngle and knob.knobValue <= tiltAngle.maxTiltAngle\";\nend System;\n```",
    "\n\n```sysml\npackage DataTypes {\n  dataType UnsignedInt {\n    constraint notEmpty()\n    constraint >= 0\n  }\n  dataType UnsignedFloat {\n    constraint notEmpty()\n    constraint >= 0\n  }\n  dataType DateTime {\n    constraint notEmpty()\n  }\n  dataType String {\n    constraint notEmpty()\n  }\n  dataType Boolean {\n    constraint notEmpty()\n  }\n  dataType Status {\n    enum critical = \"red\"\n    enum warning = \"yellow\"\n    enum normal = \"green\"\n  }\n  dataType Diameter {\n    enum small = 60\n    enum medium = 70\n    enum large = 80\n  }\n}\n```",
    "\n```sysml\nblock SparePartsManagement {\n  part Bags : Bag of SparePart;\n  part Lists : List of Integer;\n  part Sets : Set of String;\n  part OrderedSets : OrderedSet of Person;\n  part RealArrays : Array of Real[4];\n}\n\nblock Person {\n  attribute name : String;\n  attribute age : Integer;\n}\n\nblock SparePart {\n  attribute id : Integer;\n  attribute name : String;\n  attribute quantity : Integer;\n}\n```\n```",
    "\n\n```\npackage TireInformation {\n  class Tire {\n    attribute String manufacturerName\n    attribute Real rimDiameter\n    attribute Real tireWidth\n    attribute List<Real> installationPosition\n  }\n  class TireManufacturer {\n    attribute String name\n    attribute List<Tire> tires\n  }\n  package TireDatabase {\n    attribute List<TireManufacturer> manufacturers\n  }\n}\n```",
    "\n\n```\nblock SpacecraftTrajectorySamplingSystem\n  attributes\n    referenceTime: double\n    liftoffTime: string\n  parts\n    position: Vector3D\n    velocity: Vector3D\n  operations\n    sampleTrajectory(time: double): TrajectorySample\n  internals\n    TrajectorySample: block\n      attributes\n        time: double\n        position: Vector3D\n        velocity: Vector3D\nend SpacecraftTrajectorySamplingSystem\n\nblock Vector3D\n  attributes\n    x: double\n    y: double\n    z: double\nend Vector3D\n\nblock TrajectorySample\n  attributes\n    time: double\n    position: Vector3D\n    velocity: Vector3D\nend TrajectorySample\n```\n\n–––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––",
    "\n\n```sysml\npackage MaterialsScienceSystem {\n  class Substance {\n    attribute atomicMass: Real;\n  }\n  class Metal extends Substance {\n    attribute commonName: String;\n  }\n  class Alloy extends Substance {\n    attribute name: String;\n    part components: Component[*];\n  }\n  class Component {\n    attribute substance: Substance;\n    attribute massFraction: Real;\n  }\n  class Property {\n    attribute name: String;\n    attribute value: Real;\n    attribute unit: String;\n  }\n  class MechanicalProperty extends Property {\n    attribute derivedSIUnit: String;\n  }\n  Alloy.tensileStrength: MechanicalProperty;\n}\n```\n```",
    "\n\n```sysml\npackage EngineeringMaterialsDatabase {\n  class Material {\n    attribute String name;\n    attribute double atomicMass;\n    attribute Composition composition;\n    attribute MechanicalProperties mechanicalProperties;\n  }\n\n  class Composition {\n    attribute Map<String, double> elements;\n  }\n\n  class MechanicalProperties {\n    attribute double tensileStrength;\n    attribute String unit;\n  }\n\n  instance Steel_980 extends Material {\n    name = \"Steel_980\";\n    atomicMass = 55.845;\n    composition = new Composition();\n    composition.elements = {\n      \"iron\" -> 0.73,\n      \"carbon\" -> 0.14,\n      \"manganese\" -> 0.09\n    };\n    mechanicalProperties = new MechanicalProperties();\n    mechanicalProperties.tensileStrength = 1800;\n    mechanicalProperties.unit = \"MPa\";\n  }\n}\n```\n```",
    "\n```sysml\nblock PublishSubscribeSystem {\n  part MessageServer {\n    flow Publisher {\n      operation publish(topic: String, message: String)\n    }\n    flow Subscriber {\n      operation subscribe(topic: String)\n    }\n    flow MessageDistribution {\n      operation distribute(topic: String, message: String)\n    }\n  }\n  part User {\n    flow TopicSubscription {\n      operation subscribeToTopic(topic: String)\n    }\n  }\n}\n```",
    "\n```\npackage VehicleFuelSystem {\n  block FuelTankAssembly {\n    part fuelTank;\n    part fuelPump;\n    connector fuelSupplyLine;\n    connector fuelReturnLine;\n    flow in Fuel from fuelTank to fuelPump;\n    flow out Fuel from fuelPump to fuelSupplyLine;\n    flow in Fuel from fuelReturnLine to fuelTank;\n  }\n  block Engine {\n    part engine;\n    part fuelInjector;\n    connector fuelSupplyLine;\n    connector fuelReturnLine;\n    flow in Fuel from fuelSupplyLine to fuelInjector;\n    flow out Fuel from fuelInjector to engine;\n    flow out Fuel from engine to fuelReturnLine;\n  }\n  block FuelTemperatureMonitor {\n    part temperatureSensor;\n    flow in Fuel from temperatureSensor;\n    flow out FuelTemperature from temperatureSensor;\n  }\n  package FuelSystem {\n    block FuelTankAssembly;\n    block Engine;\n    block FuelTemperatureMonitor",
    "\n```\npackage PublishSubscribe {\n  block Producer {\n    operation publish(topic: String, message: String)\n  }\n\n  block Server {\n    operation subscribe(topic: String, consumer: Consumer)\n    operation publish(topic: String, message: String)\n  }\n\n  block Consumer {\n    operation subscribe(topic: String)\n    operation receive(topic: String, message: String)\n  }\n\n  block Message {\n    attribute topic: String\n    attribute content: String\n  }\n}\n```",
    "\n```\npackage TransportationSystem {\n  block TransportationService {\n    part driver: Person\n    part passengers: Set(1..4, Person)\n    part vehicle: Vehicle\n    part gasStation: GasStation\n    part environment: Environment\n\n    flow enterVehicle {\n      driver -> vehicle\n      passengers -> vehicle\n    }\n\n    flow operateVehicle {\n      driver -> vehicle\n    }\n\n    flow checkFuelLevel {\n      vehicle -> driver\n    }\n\n    flow refuel {\n      driver -> gasStation\n      gasStation -> vehicle\n    }\n\n    flow ensureSafety {\n      vehicle -> passengers\n      vehicle -> driver\n      vehicle -> environment\n    }\n\n    flow exitVehicle {\n      passengers -> vehicle\n      driver -> vehicle\n    }\n  }\n\n  block Person {\n    attribute name: String\n  }\n\n  block Vehicle {\n    attribute fuelLevel: Real\n    attribute maxFuelCapacity: Real\n  }\n\n  block GasStation {\n    attribute location: String\n  }\n\n  block Environment {\n    attribute conditions:",
    "\n```\npackage FuelSupplyAndReturnManagement {\n  block FuelTank {\n    port fuelOutlet {\n      type: FuelFlow;\n      direction: out;\n      attribute: temperature;\n    }\n    port fuelReturn {\n      type: FuelFlow;\n      direction: in;\n      attribute: temperature;\n    }\n  }\n  block EngineUnit {\n    port fuelInlet {\n      type: FuelFlow;\n      direction: in;\n      attribute: temperature;\n    }\n    port fuelOutlet {\n      type: FuelFlow;\n      direction: out;\n      attribute: temperature;\n    }\n  }\n  connector FuelFlow {\n    attribute: temperature;\n  }\n  package FuelInterfaces {\n    block ForwardFlow {\n      source: FuelTank.fuelOutlet;\n      target: EngineUnit.fuelInlet;\n    }\n    block ReverseFlow {\n      source: EngineUnit.fuelOutlet;\n      target: FuelTank.fuelReturn;\n    }\n  }\n}\n```",
    "\n```\npackage VehicleFuelSystem {\n  block FuelTankAssembly {\n    part fuelSupplyPort;\n    part fuelReturnPort;\n    part fuelTemperatureMonitor;\n  }\n  block Engine {\n    part fuelSupplyPort;\n    part fuelReturnPort;\n    part fuelTemperatureMonitor;\n  }\n  connector FuelFlow {\n    direction: inout;\n    part fuel;\n    part temperature;\n  }\n  constraint reliableFuelFlow {\n    // Constraint to ensure reliable fuel flow\n  }\n  constraint safeFuelFlow {\n    // Constraint to ensure safe fuel flow\n  }\n  constraint monitorFuelDelivery {\n    // Constraint to monitor fuel delivery during normal operation\n  }\n}\n```",
    "\n\n```\npackage PhotoCaptureSystem {\n  block Focus {\n    operation focus()\n  }\n\n  block Capture {\n    operation capture()\n  }\n\n  block User {\n    operation selectScene()\n  }\n\n  flow {\n    User.selectScene -> Focus.focus -> Capture.capture\n  }\n}\n```",
    "\n\n```\npackage PhotographyWorkflow {\n  block Focusing {\n    operation setScene()\n    operation performFocusing()\n    operation generateIntermediateImage()\n  }\n  block Shooting {\n    operation useIntermediateImage()\n    operation performShooting()\n    operation outputFinalImage()\n  }\n  block PhotographySystem {\n    part Focusing\n    part Shooting\n    operation startWorkflow()\n  }\n}\n```",
    "\n```\npackage PhotographyWorkflow {\n  block FocusingProcess {\n    operation focusOnScene()\n  }\n  block ShootingProcess {\n    operation shoot()\n  }\n  block User {\n    operation selectScene()\n  }\n  flow flow1 {\n    user.selectScene -> focusingProcess.focusOnScene -> shootingProcess.shoot\n  }\n}\n```",
    "\n```\npackage PhotographyAutomation {\n  block FocusProcessing {\n    operation focusProcess(scene: Scene) : Image\n  }\n\n  block ShootingOperation {\n    operation shoot(image: Image) : Photograph\n  }\n\n  block PhotographySystem {\n    part focusProcessing : FocusProcessing\n    part shootingOperation : ShootingOperation\n\n    operation processScene(scene: Scene) : Photograph {\n      image = focusProcessing.focusProcess(scene)\n      photograph = shootingOperation.shoot(image)\n      return photograph\n    }\n  }\n}\n```",
    "\n```\nblock PhotographyWorkflow\n  part Scene\n  part Focus\n  part Image\n  part Shoot\n  part Picture\n  flow\n    Scene -> Focus -> Image -> Shoot -> Picture\n  end\nend\n```",
    "\n```\npackage PhotographyWorkflow {\n  block Focus {\n    operation focus()\n  }\n  block Shoot {\n    operation shoot()\n  }\n  block User {\n    operation selectScene()\n    operation startShooting()\n  }\n  block Camera {\n    operation detectFocus()\n  }\n  package Sequence {\n    flow focusFlow {\n      participant focus\n      participant detectFocus\n    }\n    flow shootFlow {\n      participant detectFocus\n      participant shoot\n    }\n    flow userFlow {\n      participant user\n      participant focusFlow\n      participant shootFlow\n    }\n  }\n}\n```",
    "\n\n```\npackage FocusQualityEvaluation {\n  block FocusQualityEvaluator {\n    in (Image) imageToEvaluate\n    out (Boolean) isImageFocused\n  }\n}\n\npackage ShootingOperation {\n  block ShootingManager {\n    in (Scene) sceneInput\n    in (Image) focusedImage\n    out (Photograph) finalPhotograph\n  }\n}\n\npackage Workflow {\n  block UserWorkflow {\n    in (Scene) sceneInput\n    out (Photograph) finalPhotograph\n\n    part focusQualityEvaluator : FocusQualityEvaluation::FocusQualityEvaluator\n    part shootingManager : ShootingOperation::ShootingManager\n\n    sceneInput -> focusQualityEvaluator::imageToEvaluate\n    focusQualityEvaluator::isImageFocused -> shootingManager::sceneInput\n    focusQualityEvaluator::isImageFocused -> shootingManager::focusedImage\n    shootingManager::finalPhotograph -> finalPhotograph\n  }\n}\n```",
    "\n```\npackage PhotographyWorkflow {\n  block TakePhoto {\n    operation acquireScene()\n    operation inputFocus()\n    operation executeShooting()\n    operation displayResult()\n  }\n}\n```",
    "\n```\npackage VehicleBrakingSystem {\n  block VehicleBrakingSystem {\n    part brakePedalMonitor {\n      type BrakePedalMonitor;\n    }\n    part tractionInfoMonitor {\n      type TractionInfoMonitor;\n    }\n    part brakeControl {\n      type BrakeControl;\n    }\n    part safetyRegulator {\n      type SafetyRegulator;\n    }\n    flow {\n      brakePedalMonitor.brakePedal -> tractionInfoMonitor.tractionInfo;\n      tractionInfoMonitor.tractionInfo -> brakeControl.tractionInfo;\n      brakePedalMonitor.brakePedal -> brakeControl.brakePedal;\n      brakeControl.brakePressure -> safetyRegulator.brakePressure;\n    }\n  }\n  block BrakePedalMonitor {\n    output port brakePedal {\n      type BrakePedal;\n    }\n  }\n  block TractionInfoMonitor {\n    input port bra",
    "\n```sysml\npackage BatteryChargingControlSystem {\n  block Battery {\n    attribute level\n  }\n  block ChargingControlSystem {\n    operation monitorBatteryLevel()\n    operation chargeBattery()\n    operation terminateCharging()\n  }\n  block User {\n    operation startChargingControlSystem()\n  }\n  package RealTimeMonitoring {\n    block RealTimeMonitor {\n      operation monitor()\n    }\n  }\n  package ChargingControl {\n    block ChargingController {\n      operation control()\n    }\n  }\n  package TerminationControl {\n    block ChargingTerminationController {\n      operation control()\n    }\n  }\n  package ConvenienceAndSafety {\n    block HealthyCharging {\n      operation ensure()\n    }\n    block Convenience {\n      operation enhance()\n    }\n    block Safety {\n      operation improve()\n    }\n  }\n  package SystemFunctions {\n    block BatteryCapacityMonitoring {\n      operation monitor()\n    }\n",
    "\n```sysml\npackage BatteryChargingSystem {\n  block Battery {\n    attribute currentLevel : Real;\n    operation charge : Boolean;\n  }\n  block ChargingSystem {\n    part battery : Battery;\n    operation startCharging : Boolean;\n  }\n  function isChargingComplete : Boolean {\n    return this.battery.currentLevel >= 100;\n  }\n  operation ChargingSystem::startCharging() {\n    while (!isChargingComplete()) {\n      battery.charge();\n    }\n    return true;\n  }\n  operation Battery::charge() {\n    currentLevel = currentLevel + 1;\n    return true;\n  }\n}\n```\n\nThe output SysML v2 model represents the described requirements. The BatteryChargingSystem package contains two main blocks: Battery and ChargingSystem. The Battery block has an attribute to store the current battery level and an operation to charge the battery. The ChargingSystem block has a part that references the Battery block and an operation to",
    "\n```\npackage CameraFunction {\n  block Camera {\n    part autofocusSubsystem {\n      type AutofocusSubsystem;\n    }\n    part imagingSubsystem {\n      type ImagingSubsystem;\n    }\n    flow {\n      from autofocusSubsystem.out to imagingSubsystem.in;\n    }\n  }\n  block AutofocusSubsystem {\n    // implementation details\n  }\n  block ImagingSubsystem {\n    // implementation details\n  }\n}\n```",
    "\n```\npackage Shooting_Process_System {\n  block Digital_Camera {\n    part Viewfinder {\n      operation findScene()\n      operation focusOnScene()\n    }\n    part Imaging_Module {\n      operation generateImage()\n      operation captureAndProduce()\n    }\n    part Shooting_Process_Controller {\n      operation startShootingProcess()\n    }\n    part User_Interface {\n      operation selectScene()\n    }\n    relationship R1 {\n      source User_Interface.selectScene\n      target Viewfinder.findScene\n    }\n    relationship R2 {\n      source Viewfinder.focusOnScene\n      target Imaging_Module.generateImage\n    }\n    relationship R3 {\n      source Imaging_Module.captureAndProduce\n      target Shooting_Process_Controller.startShootingProcess\n    }\n  }\n}\n```",
    "\n```sysml\npackage VehicleSimulation {\n  block Vehicle {\n    parameter mass: Real;\n    parameter initialPosition: Real;\n    parameter initialVelocity: Real;\n    parameter timeInterval: Real;\n    parameter powerInput: List<Real>;\n    flow output position: List<Real>;\n\n    algorithm {\n      for i in 0..len(powerInput)-1 {\n        velocity = initialVelocity + powerInput[i] * timeInterval / mass;\n        position[i+1] = position[i] + velocity * timeInterval;\n      }\n    }\n  }\n}\n```",
    "\n\n```\npackage Shooting_System {\n  block Shooting_System {\n    part inputScene : Input_Scene;\n    part focusProcess : Focus_Process;\n    part captureImage : Capture_Image;\n    part displayPhoto : Display_Photo;\n    part userOperation : User_Operation;\n\n    flow {\n      inputScene -> focusProcess;\n      focusProcess -> captureImage;\n      captureImage -> displayPhoto;\n      userOperation -> inputScene;\n    }\n  }\n\n  block Input_Scene {\n    // Input scene properties and operations\n  }\n\n  block Focus_Process {\n    // Focus process properties and operations\n  }\n\n  block Capture_Image {\n    // Capture image properties and operations\n  }\n\n  block Display_Photo {\n    // Display photo properties and operations\n  }\n\n  block User_Operation {\n    // User operation properties and operations\n  }\n}\n```",
    "\n```\npackage CameraInformationProcessingWorkflow\n  block ViewPort\n    operation selectScene\n  end ViewPort\n\n  block Camera\n    part viewPort: ViewPort\n    operation focusOnScene: Image\n  end Camera\n\n  block Image\n  end Image\n\n  block Picture\n  end Picture\n\n  block DisplayPort\n    operation display: Picture\n  end DisplayPort\n\n  block System\n    part camera: Camera\n    part displayPort: DisplayPort\n    operation processWorkflow\n  end System\nend CameraInformationProcessingWorkflow\n```",
    "\n```sysml\npackage SensorManagementSystem {\n  block Sensor {\n    attribute boolean isReady;\n    operation update();\n  }\n\n  block SensorManager {\n    part sensor: Sensor[*];\n    operation manageSensors();\n  }\n\n  block System {\n    part sensorManager: SensorManager;\n    operation start();\n  }\n}\n\npackage SensorManagementSystem {\n  class SensorManager {\n    attribute sensor: Sensor[*];\n\n    operation manageSensors() {\n      for (s in sensor) {\n        if (s.isReady) {\n          s.update();\n        }\n      }\n    }\n  }\n\n  class System {\n    part sensorManager: SensorManager;\n\n    operation start() {\n      sensorManager.manageSensors();\n    }\n  }\n}\n```",
    "\n```\npackage VehicleStateManagement {\n  block Vehicle {\n    state off {\n      transition startSignal: starting\n    }\n    state starting {\n      transition powerOnSignal: on\n    }\n    state on {\n      transition shutdownSignal: off\n    }\n  }\n}\n```",
    "\n```\npackage VehicleStateManagement {\n  block VehicleStateManager {\n    state off {\n      transition VehicleStartSignal -> starting;\n    }\n    state starting {\n      transition VehicleOnSignal -> on;\n    }\n    state on {\n      transition VehicleOffSignal -> off;\n    }\n  }\n  signal VehicleStartSignal;\n  signal VehicleOnSignal;\n  signal VehicleOffSignal;\n}\n```",
    "\n```\npackage VehiclePowerManagement {\n  block VehiclePowerState {\n    part powerOffState;\n    part startPhase;\n    part poweredOnState;\n    part shutdownState;\n  }\n  block VehiclePowerControl {\n    flow startCommand;\n    flow startedSignal;\n    flow shutdownCommand;\n  }\n  block VehiclePowerManagement {\n    part powerState: VehiclePowerState;\n    part control: VehiclePowerControl;\n    flow selfDiagnosis;\n    flow powerSupply;\n    flow safetyOperations;\n  }\n}\n```",
    "\n\n```\npackage Vehicle {\n  block Vehicle {\n    state shutdown;\n    state startUp;\n    state running;\n    transition from shutdown to startUp on startSignal;\n    transition from startUp to running on startedSignal;\n    transition from running to shutdown on shutdownSignal;\n  }\n  signal startSignal;\n  signal startedSignal;\n  signal shutdownSignal;\n}\n```",
    "\n```\npackage VehiclePowerManagement {\n  block Vehicle {\n    part state: OperatingState;\n    part health: HealthState;\n    flow startSignal: Boolean;\n    flow onSignal: Boolean;\n    flow offSignal: Boolean;\n  }\n  block OperatingState {\n    flow start: Boolean;\n    flow on: Boolean;\n    flow off: Boolean;\n  }\n  block HealthState {\n    flow monitor: Boolean;\n  }\n}\n```",
    "\n```\npackage VehicleHealthManagement {\n  block VehicleHealthManager {\n    operation checkTemperature() {\n      if (vehicleTemperature > maxAllowableTemperature) {\n        sendWarningToController();\n        setVehicleHealthStatus(\"degraded\");\n      } else {\n        setVehicleHealthStatus(\"normal\");\n      }\n    }\n    operation performMaintenance() {\n      if (isMaintenanceTimeReached()) {\n        enterMaintenanceStatus();\n        updateNextMaintenanceCycleTime();\n      }\n      if (isMaintenanceStatusActiveFor(48 hours)) {\n        setVehicleHealthStatus(\"normal\");\n      }\n    }\n  }\n}\n```",
    "\n\n```\npackage ClockServer {\n  block Server {\n    part localClock : Clock;\n    port request : In;\n    state off {\n      on entry {\n        localClock.stop();\n      }\n      transition start() : waiting;\n    }\n    state waiting {\n      on entry {\n        localClock.start();\n      }\n      transition request() : response;\n    }\n    state response {\n      on entry {\n        localClock.wait(5 minutes);\n      }\n      transition done() : waiting;\n    }\n    on time(11:59:00) {\n      transition to off;\n    }\n  }\n  block Clock {\n    operation start();\n    operation stop();\n    operation wait(duration : Time);\n  }\n}\n```",
    "\n```\npackage VehicleStartStopSystem {\n  block StartStopController {\n    operation start()\n    operation stop()\n    operation powerOn()\n  }\n  block Vehicle {\n    operation start()\n    operation stop()\n    operation powerOn()\n    operation selfCheck()\n  }\n  block SafetyController {\n    operation applyParkingBrake()\n  }\n  package System {\n    part controller: StartStopController\n    part vehicle: Vehicle\n    part safetyController: SafetyController\n    flow startFlow {\n      from controller.start\n      to vehicle.start\n      to vehicle.selfCheck\n      to vehicle.powerOn\n      to controller.powerOn\n    }\n    flow stopFlow {\n      from controller.stop\n      to vehicle.stop\n      to safetyController.applyParkingBrake\n    }\n  }\n}\n```",
    "\n```\npackage VehicleControlSystem {\n  block StartStopControl {\n    part state: StateMachine {\n      state off {\n        transition startSignal: startUp\n      }\n      state startUp {\n        entry / selfCheck\n        transition selfCheckPassed: started\n      }\n      state started {\n        entry / supplyPower\n        transition vehicleShutdownSignal: off\n      }\n      state off {\n        entry / applyParkingBrake\n      }\n    }\n    part controller: VehicleController {\n      flow startSignal: boolean\n      flow vehicleShutdownSignal: boolean\n    }\n  }\n  block VehicleController {\n    flow startControlSignal: boolean\n  }\n}\n```",
    "\n\n```\nblock CruiseControlSystem\n  part driver\n  part cruiseController\n  part speedometer\n  part engine\n  part vehicle\n  part otherComponents\n\n  event setDesiredSpeed\n  event receiveSetSpeedCommand\n  event transmitActualSpeed\n  event receiveFuelControlCommand\n  event adjustEngineOutput\n\n  driver --(setDesiredSpeed)--> cruiseController\n  cruiseController --(receiveSetSpeedCommand)--> speedometer\n  speedometer --(transmitActualSpeed)--> cruiseController\n  cruiseController --(receiveFuelControlCommand)--> engine\n  engine --(adjustEngineOutput)--> vehicle\nend CruiseControlSystem\n```",
    "\n```\npackage CruiseControlSystem {\n  block CruiseController {\n    operation setSpeed(speed: Real)\n    operation getRealTimeVehicleSpeed(): Real\n    operation generateThrottleControlCommand(): Real\n    flow flow1 {\n      from setSpeed\n      to getRealTimeVehicleSpeed\n    }\n    flow flow2 {\n      from getRealTimeVehicleSpeed\n      to generateThrottleControlCommand\n    }\n    flow flow3 {\n      from generateThrottleControlCommand\n      to EngineSystem\n    }\n  }\n  block EngineSystem {\n    operation adjustPowerOutput(throttleCommand: Real)\n    flow flow4 {\n      from CruiseController\n      to adjustPowerOutput\n    }\n  }\n}\n```",
    "\n```\npackage CruiseControl\n{\n  block CruiseController\n  {\n    in port inControl: ControlSignal\n    in port inSpeed: SpeedSignal\n    out port outThrottle: ThrottleSignal\n  }\n\n  block Speedometer\n  {\n    out port outSpeed: SpeedSignal\n  }\n\n  block Engine\n  {\n    in port inThrottle: ThrottleSignal\n  }\n\n  block Driver\n  {\n    out port outControl: ControlSignal\n  }\n\n  connect(Driver.outControl, CruiseController.inControl)\n  connect(Speedometer.outSpeed, CruiseController.inSpeed)\n  connect(CruiseController.outThrottle, Engine.inThrottle)\n}\n```",
    "\n\n```\npackage CruiseControl\n{\n  block CruiseController\n  {\n    operation calculateThrottle()\n    {\n      // Implement throttle calculation logic here\n    }\n  }\n\n  block Speedometer\n  {\n    operation getSpeed()\n    {\n      // Implement speed sensing logic here\n    }\n  }\n\n  block Driver\n  {\n    operation setDesiredSpeed(desiredSpeed: Real)\n    {\n      // Implement command sending logic here\n    }\n  }\n\n  block Engine\n  {\n    operation applyThrottle(throttle: Real)\n    {\n      // Implement throttle application logic here\n    }\n  }\n\n  connector CommandBus\n  {\n    // Define command data types here\n  }\n\n  connector SpeedBus\n  {\n    // Define speed data types here\n  }\n\n  connector ThrottleBus\n  {\n    // Define throttle data types here\n  }\n}\n```",
    "\n```\nblock CruiseControlSystem {\n  part speedSensor {\n    interface in RealTimeSpeed {\n      datatype Real\n    }\n  }\n  part cruiseController {\n    interface in SetSpeed {\n      datatype Real\n    }\n    interface in RealTimeSpeed {\n      datatype Real\n    }\n    interface out EngineFuelControl {\n      datatype Real\n    }\n  }\n  part engine {\n    interface in EngineFuelControl {\n      datatype Real\n    }\n  }\n  flow {\n    from SetSpeed in cruiseController to EngineFuelControl in engine\n    from RealTimeSpeed in speedSensor to RealTimeSpeed in cruiseController\n  }\n}\n```",
    "\n```\npackage CruiseControlSystem {\n  block SetSpeedCommand {\n    parameter Real speed\n  }\n  block ActualSpeed {\n    output Real speed\n  }\n  block CruiseController {\n    input SetSpeedCommand setSpeedCommand\n    input ActualSpeed actualSpeed\n    output FuelControlCommand fuelControlCommand\n  }\n  block EngineController {\n    input FuelControlCommand fuelControlCommand\n    output EngineCommand engineCommand\n  }\n  block Engine {\n    input EngineCommand engineCommand\n  }\n  block MessageInterface {\n    inout SetSpeedCommand setSpeedCommand\n    inout ActualSpeed actualSpeed\n    inout FuelControlCommand fuelControlCommand\n    inout EngineCommand engineCommand\n  }\n  block System {\n    part setSpeedCommand: SetSpeedCommand\n    part actualSpeed: ActualSpeed\n    part cruiseController: CruiseController(setSpeedCommand, actualSpeed)\n    part engineController: EngineController(cruiseController.fuelControlCommand)\n    part engine: Engine(engineController.engineCommand)\n    part messageInterface: MessageInterface(setSpeedCommand, actualSpeed, cruise",
    "\n```\npackage VehicleLifecycleManagement {\n  block AssemblyAndDelivery {\n    operation deliver(vehicle: Vehicle, date: Date)\n  }\n\n  block Ownership {\n    operation transfer(vehicle: Vehicle, newOwner: Owner, date: Date)\n  }\n\n  block Driving {\n    operation trackDriver(vehicle: Vehicle, driver: Driver, date: Date)\n  }\n\n  block EndOfUse {\n    operation scrap(vehicle: Vehicle, date: Date)\n  }\n\n  class Vehicle {\n    attribute id: Identifier\n    attribute deliveryDate: Date\n    attribute owners: Set<Owner>\n    attribute drivers: Set<Driver>\n    attribute scrappingDate: Date\n  }\n\n  class Owner {\n    attribute id: Identifier\n    attribute name: String\n  }\n\n  class Driver {\n    attribute id: Identifier\n    attribute name: String\n  }\n\n  class Date {\n    attribute year: Integer\n    attribute month: Integer\n    attribute day: Integer\n  }",
    "\n\n```sysml\npackage Vehicle {\n  block Vehicle {\n    attribute mass: Real;\n    attribute operationalStatus: OperationalStatus;\n    part engine: Engine;\n    part driver: Driver;\n    part leftFrontWheel: Wheel;\n    part rightFrontWheel: Wheel;\n  }\n  block OperationalStatus {\n    attribute gear: Gear;\n    attribute acceleratorPedalPosition: Real;\n  }\n  block Engine { ... }\n  block Driver { ... }\n  block Wheel { ... }\n  block Gear { ... }\n}\n\ninstance vehicle_1: Vehicle {\n  operationalStatus.gear = ...;\n  operationalStatus.acceleratorPedalPosition = ...;\n  leftFrontWheel = ...;\n  rightFrontWheel = ...;\n}\n```\n\n––––––––––––––––––––––––––––––––––\n\nThe provided SysML v2 code is a valid output for the given natural-language requirement",
    "\n```\nblock Vehicle {\n  attribute real mass;\n  attribute Gear gear;\n  attribute real acceleratorPosition;\n}\n\nblock Gear {\n  attribute integer value;\n}\n\nblock Vehicle_1 is Vehicle {\n  attribute Gear gear_1 is instance of Gear;\n  attribute real mass_1;\n  attribute real acceleratorPosition_1;\n}\n\nflow initial {\n  Vehicle_1.gear_1.value = 0;\n  Vehicle_1.mass_1 = 2000;\n  Vehicle_1.acceleratorPosition_1 = 0.0;\n}\n\nflow next {\n  Vehicle_1.gear_1.value = 2;\n  Vehicle_1.mass_1 = 1500;\n  Vehicle_1.acceleratorPosition_1 = 0.5;\n}\n```",
    "\n\n```sysml\npackage Vehicle {\n  block Vehicle {\n    attribute mass: Real;\n    attribute gear: Gear;\n    attribute throttle: Real;\n    part engine: Engine;\n    relationship driver: Driver;\n  }\n  block Driver {\n    attribute name: String;\n  }\n  block Engine {\n    attribute power: Real;\n  }\n  enumeration Gear {\n    neutral, first, second, third, fourth, fifth;\n  }\n  package Scenario {\n    block InitialState {\n      relationship vehicle: Vehicle;\n      constraint mass = 2000;\n      constraint gear = Gear::neutral;\n      constraint throttle = 0;\n      relationship driver: Driver;\n      constraint driver.name = \"Alice\";\n    }\n    block SubsequentState {\n      relationship vehicle: Vehicle;\n      constraint mass = 1500;\n      constraint gear = Gear::second;\n      constraint throttle = 0.5;\n      relationship driver: Driver;\n      constraint driver.name = \"Bob",
    "\n```sysml\npackage Vehicle {\n  class Component {\n    attribute mass: Real\n    operation calculateTotalMass(): Real\n  }\n  class CompositeComponent extends Component {\n    association subcomponents: Component[*]\n    operation calculateTotalMass() = sum(subcomponents.calculateTotalMass())\n  }\n  class Vehicle {\n    association components: Component[*]\n    operation calculateTotalMass() = sum(components.calculateTotalMass())\n  }\n  class Engine extends Component {\n    attribute mass: Real\n    operation calculateTotalMass() = mass\n  }\n  class Transmission extends Component {\n    attribute mass: Real\n    operation calculateTotalMass() = mass\n  }\n}\n```\n\n––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––",
    "\n```\npackage VehicleManagementSystem {\n  class Component {\n    attribute String serialNumber\n    attribute Real mass\n  }\n  class Vehicle {\n    attribute String VIN\n    attribute Real mass\n    association Components: Component[*]\n  }\n  class Engine extends Component {\n    attribute String model\n  }\n  class Transmission extends Component {\n    attribute String type\n  }\n  operation calculateTotalMass(vehicle: Vehicle): Real {\n    // implementation\n  }\n  operation filterComponentsByMass(vehicle: Vehicle, threshold: Real): Set(Component) {\n    // implementation\n  }\n}\n```\n```",
    "\n```sysml\nblock SimpleThing {\n  attribute real simpleMass;\n  attribute real totalMass;\n  operation calculateTotalMass(): real {\n    return simpleMass;\n  }\n}\n\nblock CompositeThing {\n  attribute real simpleMass;\n  attribute real totalMass;\n  part {\n    Object[] subcomponents;\n  }\n  operation calculateTotalMass(): real {\n    real total = simpleMass;\n    for (Object subcomponent : subcomponents) {\n      total = total + subcomponent.calculateTotalMass();\n    }\n    return total;\n  }\n}\n\nblock Object {\n  attribute real simpleMass;\n  attribute real totalMass;\n  operation calculateTotalMass(): real {\n    return totalMass;\n  }\n}\n```\n\n––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––",
    "\n```sysml\npackage MassManagementSystem {\n  class Object {\n    attribute real basicMass;\n    attribute real totalMass;\n    association <0..*> Object : subcomponents;\n  }\n  class System {\n    operation calculateTotalMass(Object o);\n    operation filterSubcomponentsByMass(Object o, real minMass);\n  }\n}\n```\n```",
    "\n```\npackage VehicleDynamics\n{\n  block VehicleParameters\n  {\n    parameter Real wheelPower;\n    parameter Real aerodynamicDragCoefficient;\n    parameter Real frictionCoefficient;\n    parameter Real vehicleMass;\n    parameter Real currentSpeed;\n    parameter Real effectivePower;\n    parameter Real acceleration;\n    parameter Real initialSpeed;\n    parameter Real time;\n\n    output Real powerOutput;\n    output Real accelerationOutput;\n    output Real speedOutput;\n    output Real positionOutput;\n\n    algorithm\n      powerOutput = wheelPower - aerodynamicDragCoefficient * speedOutput^2 - frictionCoefficient * speedOutput;\n      accelerationOutput = effectivePower / vehicleMass;\n      speedOutput = initialSpeed + accelerationOutput * time;\n      positionOutput = initialSpeed * time + 0.5 * accelerationOutput * time^2;\n  }\n}\n```",
    "\n```sysml\npackage VehicleDynamics {\n  block Vehicle {\n    parameter Real mass;\n    parameter Real wheelEndOutputPower;\n    parameter Real aerodynamicDragCoefficient;\n    parameter Real rollingResistanceCoefficient;\n    parameter Real initialSpeed;\n    parameter Real initialPosition;\n    parameter Real timeStep;\n    \n    flow Real availableDrivingPower;\n    flow Real acceleration;\n    flow Real speed;\n    flow Real position;\n    \n    algorithm {\n      availableDrivingPower = wheelEndOutputPower - (aerodynamicDragCoefficient * speed^2 + rollingResistanceCoefficient * mass * 9.81);\n      acceleration = availableDrivingPower / mass;\n      speed = initialSpeed + acceleration * timeStep;\n      position = initialPosition + speed * timeStep + 0.5 * acceleration * timeStep^2;\n    }\n  }\n}\n```\n```",
    "\n```sysml\npackage VehicleDynamics {\n  block Vehicle {\n    parameter Real mass;\n    parameter Real wheelPower;\n    parameter Real dragCoefficient;\n    parameter Real rollingResistanceCoefficient;\n    parameter Real initialSpeed;\n    parameter Real initialPosition;\n    output Real speed;\n    output Real position;\n    output Real velocity;\n    output Real acceleration;\n    output Real displacement;\n  }\n}\n```",
    "\n```sysml\npackage VehicleDynamicSimulation\n  block Vehicle\n    parameter Real initialPosition = 0;\n    parameter Real initialVelocity = 0;\n    parameter Real mass = 0;\n    parameter Real power = 0;\n    parameter Real timeInterval = 0;\n    parameter Real airResistanceCoefficient = 0;\n    parameter Real frictionCoefficient = 0;\n    parameter Real otherParameters = 0;\n    Real acceleration;\n    Real finalVelocity;\n    Real finalPosition;\n  end Vehicle;\nend VehicleDynamicSimulation;\n```\n\n––––––––––––––––––––––––––––––––––\n\nThe given natural-language requirement can be directly translated into the provided SysML v2 code. The SysML v2 code defines a package named \"VehicleDynamicSimulation\" containing a block named \"Vehicle\". The block has parameters for initial position, initial velocity, mass, wheel-end drive power, time interval, air resistance coefficient,",
    "\n```\npackage Vehicle {\n  class Chassis {\n    attribute mass: Real;\n  }\n  class Engine {\n    attribute mass: Real;\n  }\n  class Gearbox {\n    attribute mass: Real;\n  }\n  class Vehicle {\n    attribute chassis: Chassis;\n    attribute engine: Engine;\n    attribute gearbox: Gearbox;\n    operation calculateTotalMass(): Real {\n      chassis.mass + engine.mass + gearbox.mass\n    }\n    operation checkWeightCompliance(): Boolean {\n      if (calculateTotalMass() <= 2500) {\n        return true;\n      } else {\n        issueWarning(\"Overweight warning: The total mass of the vehicle exceeds the permitted limit of 2500 kilograms.\");\n        return false;\n      }\n    }\n  }\n}\n```",
    "\n```\npackage VehicleMassBudgeting {\n  block Vehicle {\n    part chassis: MassComponent;\n    part engine: MassComponent;\n    part transmission: MassComponent;\n    constraint totalMassLessThanOrEqualTo2500Kg {\n      chassis.mass + engine.mass + transmission.mass <= 2500;\n    }\n  }\n  block MassComponent {\n    attribute mass: Real;\n  }\n}\n```",
    "\n\n```\npackage VehicleMassManagement {\n  block Vehicle {\n    part chassis: Chassis;\n    part engine: Engine;\n    part transmission: Transmission;\n    constraint totalMass {\n      chassis.mass + engine.mass + transmission.mass <= 2500;\n    }\n  }\n  block Chassis {\n    attribute mass: Real;\n  }\n  block Engine {\n    attribute mass: Real;\n  }\n  block Transmission {\n    attribute mass: Real;\n  }\n}\n```",
    "\n\n```\npackage VehicleWeightManagement {\n  block WeightManager {\n    parameter weightLimit: Real = 2500;\n    part chassis: Component;\n    part engine: Component;\n    part transmission: Component;\n    flow weightSum: Real;\n    constraint weightSum <= weightLimit;\n    operation calculateWeightSum() {\n      weightSum = chassis.weight + engine.weight + transmission.weight;\n    }\n    operation checkWeightCompliance() {\n      if (weightSum > weightLimit) {\n        // issue warning or impose restrictions\n      }\n    }\n  }\n  block Component {\n    parameter weight: Real;\n  }\n}\n```",
    "\n```\npackage VehicleDesign {\n  block Vehicle {\n    part chassis: Chassis;\n    part engine: Engine;\n    part transmission: Transmission;\n    constraint totalMass {\n      chassis.mass + engine.mass + transmission.mass <= 2500;\n    }\n    constraint dynamicBehavior {\n      if (initialVelocity > 0 and finalVelocity > 0 and mass > 0 and appliedForce > 0 and time > 0) {\n        changeInVelocity = (appliedForce * time) / mass;\n        finalVelocity = initialVelocity + changeInVelocity;\n      }\n    }\n  }\n  block Chassis {\n    attribute mass: Real;\n  }\n  block Engine {\n    attribute mass: Real;\n  }\n  block Transmission {\n    attribute mass: Real;\n  }\n}\n```",
    "\n```\npackage MaintenanceSchedulingSystem\n\nblock Vehicle {\n  attribute temperature: Real\n  attribute maxTemperature: Real\n  attribute maintenanceInterval: Duration\n  attribute nextMaintenanceTime: Time\n  attribute maintenanceStartTime: Time\n  attribute maintenanceEndTime: Time\n  attribute status: String\n\n  operation checkMaintenance(): Boolean\n  operation startMaintenance()\n  operation completeMaintenance()\n}\n\nblock MaintenanceSchedulingSystem {\n  part vehicle: Vehicle\n\n  operation scheduleMaintenance(vehicle: Vehicle)\n  operation monitorVehicle(vehicle: Vehicle)\n}\n```\n```",
    "\n```\npackage Vehicle {\n  block Vehicle {\n    part curbWeight: Mass;\n    part fuelMass: Mass;\n    part engine: Engine;\n    part transmission: Transmission;\n    part driveSystem: DriveSystem;\n    \n    constraint totalMass {\n      curbWeight.value + fuelMass.value <= maxMassLimit;\n      fuelMass.value > 0;\n    }\n    \n    flow torqueFlow {\n      engine.torqueOut -> clutch.torqueIn;\n      clutch.torqueOut -> transmission.torqueIn;\n      transmission.torqueOut -> driveSystem.torqueIn;\n    }\n    \n    flow speedCurve {\n      engine.speedIn -> engine.torqueOut;\n    }\n  }\n  \n  block Mass {\n    attribute value: Real;\n  }\n  \n  block Engine {\n    part speedIn: Speed;\n    part torqueOut: Torque;\n  }\n  \n  block Transmission {\n    part torqueIn: Torque;\n    part torqueOut: Torque",
    "\n```\npackage Vehicle {\n  block Vehicle {\n    part FuelTank {\n      attribute mass;\n    }\n    part Engine {\n      attribute torque;\n    }\n    part Transmission {\n      attribute torque;\n    }\n    part Clutch {\n      attribute torque;\n    }\n    constraint mass_constraint_full_tank {\n      self.FuelTank.mass + self.Engine.mass + self.Transmission.mass + self.Clutch.mass <= 2000;\n    }\n    constraint mass_constraint_empty_tank {\n      self.FuelTank.mass + self.Engine.mass + self.Transmission.mass + self.Clutch.mass <= 1500;\n    }\n    constraint torque_constraint {\n      self.Engine.torque >= self.Transmission.torque;\n      self.Transmission.torque >= self.Clutch.torque;\n    }\n  }\n}\n```",
    "\n```\npackage Vehicle {\n  block Vehicle {\n    part mass: Real;\n    part emptyMass: Real;\n    part fuelCapacity: Real;\n    part engine: Engine;\n    constraint mass <= 2000;\n    constraint emptyMass <= 1500;\n    constraint mass = emptyMass + fuelCapacity;\n  }\n  block Engine {\n    part torque: Real;\n    part speed: Real;\n    part clutch: Clutch;\n    part performanceTable: PerformanceTable;\n    constraint torque = performanceTable(speed);\n    flow flow_torque {\n      from port_torque;\n      to clutch.port_in;\n    }\n  }\n  block Clutch {\n    part port_in: Real;\n    part port_out: Real;\n    constraint port_out = port_in;\n  }\n  block PerformanceTable {\n    part table: List<(Real, Real)>;\n    function Real apply(Real speed) {\n      // implementation of linear interpolation\n    }\n  }\n}\n```\n```",
    "\n```\npackage Vehicle {\n  block MassControl {\n    parameter maxMass: Real = 2000;\n    parameter emptyMass: Real = 1500;\n    parameter curbMass: Real;\n    parameter fuelMass: Real;\n    derived totalMass: Real = curbMass + fuelMass;\n    constraint totalMass <= maxMass;\n    constraint totalMass <= emptyMass;\n  }\n  block Engine {\n    parameter torqueCharacteristics: TorqueCurve;\n    flow port engineOut;\n  }\n  block Clutch {\n    flow port engineIn;\n    flow port gearboxIn;\n  }\n  block Gearbox {\n    flow port clutchOut;\n  }\n}\n```",
    "\n```sysml\npackage VehiclePerformanceAnalysis {\n  block Vehicle {\n    attribute curbWeight: Real;\n    attribute payload: Real;\n    attribute wheelDiameter: Real;\n    attribute transmissionEfficiency: Real;\n    attribute fuelEconomyUrban: Real;\n    attribute fuelEconomyHighway: Real;\n  }\n  block DrivingCycle {\n    attribute timeStampedPosition: List<Real>;\n    attribute timeStampedSpeed: List<Real>;\n  }\n  block Analysis {\n    attribute vehicle: Vehicle;\n    attribute drivingCycle: DrivingCycle;\n    operation calculatePowerDemand(): Real;\n    operation calculateAcceleration(): Real;\n    operation calculateSpeed(): Real;\n    operation calculatePosition(): Real;\n    operation calculateFuelEconomy(): Real;\n    operation verifyCompliance(): Boolean;\n  }\n}\n```\n```",
    "\n```\npackage VehicleFuelEconomy {\n  block Vehicle {\n    attribute curbWeight: Real;\n    attribute load: Real;\n    attribute wheelDiameter: Real;\n    attribute transmissionEfficiency: Real;\n    // other vehicle parameters\n  }\n  block DrivingScenario {\n    attribute urbanDriving: Real;\n    attribute highwayDriving: Real;\n  }\n  block Analysis {\n    attribute drivingTrajectory: Real;\n    attribute speedVariation: Real;\n    attribute wheelPower: Real;\n    attribute acceleration: Real;\n    attribute energyConsumption: Real;\n    attribute enginePowerDemand: Real;\n    attribute fuelConsumption: Real;\n    attribute fuelEconomy: Real;\n  }\n  block VehicleFuelEconomy {\n    part vehicle: Vehicle;\n    part drivingScenario: DrivingScenario;\n    part analysis: Analysis;\n    operation calculateFuelEconomy() {\n      // implementation\n    }\n  }\n}\n```",
    "\n\n```\npackage EngineSelectionSystem {\n  block Engine {\n    attribute type: String;\n    attribute power: Real;\n    attribute mass: Real;\n    attribute efficiency: Real;\n    attribute cost: Real;\n  }\n\n  block EngineSelectionSystem {\n    part engine: Engine[*];\n    operation calculateIndicators(): Real[];\n    operation evaluationFunction(indicators: Real[]): Real;\n    operation screenAndRecommend(): Engine;\n  }\n}\n```",
    "\n```\npackage VehicleQualityChecks {\n  class CurbWeightCheck {\n    attribute maxCurbWeight: Real = 2500;\n    operation checkCurbWeight(vehicle: Vehicle): Boolean;\n  }\n  class Vehicle {\n    attribute curbWeight: Real;\n  }\n}\n```",
    "\n```\npackage VehicleMassVerificationSystem {\n  block Vehicle {}\n  block WeighingEquipment {}\n  block MassVerificationUnit {\n    operation checkMass(vehicle: Vehicle, weighingEquipment: WeighingEquipment): Boolean\n  }\n  constraint checkMass_invocation = invocation MassVerificationUnit::checkMass(vehicle, weighingEquipment)\n  constraint checkMass_precondition = precondition vehicle.mass <= 2500 and weighingEquipment.isCalibrated\n  constraint checkMass_postcondition = postcondition result implies vehicle.isQualified else not vehicle.isQualified\n}\n```",
    "\n```\npackage VehicleSystem {\n  block Vehicle {\n    part driver;\n    part passenger[4];\n    part environment;\n    part infrastructure;\n    flow rideExperience;\n    flow dailyTransportationTasks;\n  }\n  package HumanNeeds {\n    block User {\n      flow enterExitVehicle;\n      flow safety;\n      flow comfort;\n    }\n  }\n  package SurroundingEnvironment {\n    block EnvironmentalFactors {\n      flow safety;\n      flow sustainability;\n    }\n  }\n  package Infrastructure {\n    block GasStation {\n      flow compatibility;\n    }\n  }\n}\n```",
    "\n```\npackage TransportationSystem {\n  block Driver {\n    operation operate()\n  }\n  block Passenger {\n    operation enter()\n    operation exit()\n  }\n  block Vehicle {\n    part driver: Driver\n    part passengers: set(Passenger)\n    operation refuel()\n    operation startJourney()\n    operation endJourney()\n  }\n  block TransportationSystem {\n    part vehicle: Vehicle\n    operation startTransportation()\n    operation endTransportation()\n  }\n}\n```",
    "\n```\npackage VehicleProductLine {\n  block Engine {\n    attribute cylinderCount: Integer;\n    attribute cylinderDiameter: String;\n  }\n  block Transmission {\n    attribute type: String;\n  }\n  block Vehicle {\n    part engine: Engine;\n    part transmission: Transmission;\n    constraint engineTransmission {\n      if engine.cylinderCount = 4 then transmission.type = \"manual\"\n      else if engine.cylinderCount = 6 then transmission.type = \"automatic\"\n      else false\n    }\n    constraint cylinderDiameter {\n      if engine.cylinderDiameter = \"small\" then engine.cylinderCount * 70 = engine.cylinderVolume\n      else if engine.cylinderDiameter = \"large\" then engine.cylinderCount * 100 = engine.cylinderVolume\n      else false\n    }\n  }\n}\n```",
    "\n\n```\npackage Engine {\n  block Engine {\n    part Cylinder {\n      attribute cylinderDiameter: Integer;\n      attribute cylinderQuantity: Integer;\n    }\n    constraint Cylinder.cylinderDiameter in {70, 100};\n    constraint Cylinder.cylinderQuantity in {4, 6};\n  }\n  block EngineVariant {\n    part Engine: Engine;\n    attribute variant: String;\n  }\n  constraint EngineVariant.variant in {\"FourCylinder\", \"SixCylinder\"};\n}\n```",
    "\n```\npackage AutomotiveConfigurationSpace {\n  block Engine {\n    attribute cylinderCount: Integer;\n    attribute cylinderDiameter: Integer;\n  }\n  block Transmission {\n    attribute type: String;\n  }\n  block Vehicle {\n    part engine: Engine;\n    part transmission: Transmission;\n    constraint engineCylinderCountTransmissionType {\n      if engine.cylinderCount = 4 then transmission.type = \"manual\"\n      else if engine.cylinderCount = 6 then transmission.type = \"automatic\"\n      else false\n    }\n  }\n}\n```",
    "\n\n```\npackage SystemAssembly {\n  block ComputerSubsystem {\n    part SoftwareDesign {\n      attribute messageFormat;\n      attribute dataFormat;\n    }\n    part HardwareDesign {\n      attribute compatibility;\n    }\n  }\n  block StorageSubsystem {\n    part SoftwareDesign {\n      attribute messageFormat;\n      attribute dataFormat;\n    }\n    part HardwareDesign {\n      attribute compatibility;\n    }\n  }\n}\n\npackage System {\n  block System {\n    part SystemAssembly;\n    part SoftwareDesign {\n      attribute messageFormat;\n      attribute dataFormat;\n    }\n    part HardwareDesign {\n      attribute compatibility;\n    }\n  }\n}\n```",
    "\n```\npackage powertrainSystem {\n  block LogicalLayer {\n    part torqueGenerator {\n      interface powerGeneration;\n      interface torqueConversion;\n    }\n  }\n  block PhysicalLayer {\n    part powerUnit {\n      interface powerOutput;\n      interface torqueGeneration;\n    }\n  }\n  block Mapping {\n    association -torqueGenerator-> powerUnit;\n  }\n}\n```",
    "\n\n```sysml\nblock powertrain {\n  part engine {\n    operation generateTorque()\n  }\n}\n\nblock system {\n  part torqueGenerator {\n    operation generateTorque()\n  }\n  part powertrain {\n    allocation torqueGenerator.generateTorque -> powertrain.engine.generateTorque\n  }\n}\n```\n```",
    "\n```sysml\npackage VehicleFeatureAnnotationSystem {\n  block Interior {\n    part SeatBelt\n    part FrontSeat\n    part DriverAirbag\n    part AlarmSystem\n  }\n  block BodyAssembly {\n    part BodyShell\n    part Bumper\n    part KeylessEntryDevice\n  }\n  block Vehicle {\n    part Interior\n    part BodyAssembly\n  }\n}\n```",
    "\n\n```\npackage VehicleDynamicSimulation {\n  block Vehicle {\n    parameter Real initialVelocity = 0;\n    parameter Real initialPosition = 0;\n    parameter Real acceleration = 0;\n    parameter Real timeStep = 0;\n    \n    flow port in ModelCenter;\n    \n    flow Real velocity() out;\n    flow Real position() out;\n  }\n}\n```",
    "\n\n```sysml\npackage SafetyFeatures {\n  block SeatBelt {\n    attribute isMandatory = false\n  }\n  block DriverAirbag {\n    attribute isMandatory = false\n  }\n  block Bumper {\n    attribute isMandatory = true\n  }\n  block KeylessEntrySystem {\n    attribute isMandatory = false\n  }\n  block Wheel {\n    attribute isMandatory = false\n  }\n  block AntiLockBrakingSystem {\n    attribute isMandatory = false\n  }\n}\n\npackage MandatorySafetyFeatures {\n  block SeatBelt {\n    attribute isMandatory = true\n  }\n  block Bumper {\n    attribute isMandatory = true\n  }\n}\n```\n```",
    "\n```\npackage VehicleSafetyComplianceSystem {\n  block Vehicle {\n    part Interior {\n      part SeatBelt mandatory;\n      part SeatBelt mandatory;\n      part DriverAirbag optional;\n    }\n    part VehicleBody {\n      part Bumper mandatory;\n      part KeylessEntrySystem optional;\n    }\n    part Chassis {\n      part Tire (numberOfTires);\n      part ABS optional;\n    }\n  }\n}\n```",
    "\n```\npackage RiskManagementSystem {\n  block RiskScenario {\n    part situation: Situation;\n    part cause: Cause;\n    part failure: Failure;\n    part probability: Probability;\n    part severity: Severity;\n    part sequence: Sequence;\n    part impact: Impact;\n  }\n  block Situation {\n    attribute id: String;\n    attribute description: String;\n  }\n  block Cause {\n    attribute id: String;\n    attribute description: String;\n  }\n  block Failure {\n    attribute id: String;\n    attribute description: String;\n  }\n  block Probability {\n    attribute id: String;\n    attribute value: Real;\n  }\n  block Severity {\n    attribute id: String;\n    attribute level: String;\n  }\n  block Sequence {\n    attribute id: String;\n    attribute description: String;\n  }\n  block Impact {\n    attribute id: String;\n    attribute description: String;\n  }\n}\n```",
    "\n\n```\npackage RiskManagementSystem {\n  block RiskScenario {\n    part scenarioID: Identifier;\n    part scenarioName: String;\n    part causes: Set(Cause);\n    part failures: Set(Failure);\n  }\n\n  block Cause {\n    part causeID: Identifier;\n    part causeName: String;\n    part probability: Real;\n  }\n\n  block Failure {\n    part failureID: Identifier;\n    part failureName: String;\n    part severity: SeverityLevel;\n  }\n\n  enumeration SeverityLevel {\n    high, medium, low\n  }\n\n  block RiskAnalysis {\n    part riskScenarios: Set(RiskScenario);\n    operation analyzeRisk(): Real;\n  }\n}\n```\n\n–––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––",
    "\n\n```sysml\npackage EquipmentMonitoringSystem {\n  block Battery {\n    property level: Real\n    property minThreshold: Real\n    property agingProbability: Real\n  }\n\n  block System {\n    part battery: Battery\n    flow lowBattery: Boolean\n    flow risk: String\n    flow severity: Real\n    flow shutdown: Boolean\n\n    behavior lowBatteryDetection {\n      on battery.level < battery.minThreshold: {\n        lowBattery = true\n        risk = \"battery aging\" -> \"low battery level\"\n      }\n    }\n\n    behavior riskAnalysis {\n      on lowBattery: {\n        if risk = \"battery aging\" -> \"low battery level\": {\n          severity = 5\n        }\n      }\n    }\n\n    behavior shutdownProtection {\n      on lowBattery and time > 1 hour: {\n        shutdown = true\n      }\n    }\n  }\n}\n```",
    "\n```sysml\npackage TopLevelSystem {\n  block TopLevel {\n    part SubSystem1 {\n      block SubComponent1 {\n        // Interface definition and functionality\n      }\n      block SubComponent2 {\n        // Interface definition and functionality\n      }\n      // Additional subcomponents and interfaces\n    }\n    part SubSystem2 {\n      block SubComponent1 {\n        // Interface definition and functionality\n      }\n      block SubComponent2 {\n        // Interface definition and functionality\n      }\n      // Additional subcomponents and interfaces\n    }\n    // Additional subsystems and interfaces\n  }\n}\n```",
    "\n\n```sysml\n@model\nclass AutomotiveSystem {\n  part seatBelt: SafetyComponent {\n    attribute mandatory\n  }\n  part bumper: SafetyComponent {\n    attribute mandatory\n  }\n  part driverAirbag: SafetyComponent {\n    attribute optional\n  }\n  part ABS: SafetyComponent {\n    attribute optional\n  }\n  part engine: NonSafetyComponent\n  part transmission: NonSafetyComponent\n  part brakes: NonSafetyComponent\n}\n\n@model\nclass Component {\n  attribute interface\n}\n\n@model\nclass SafetyComponent extends Component {\n  attribute safety\n}\n\n@model\nclass NonSafetyComponent extends Component {\n}\n```\n\nThis output model represents the given requirements using the SysML v2 subset. It defines an `AutomotiveSystem` class with various subcomponents, including safety-related components with their mandatory or optional status. The `Component` class is extended by both `SafetyComponent` and `NonSafetyComponent` classes, allowing for the differentiation between safety and non-saf",
    "\n```sysml\npackage AutomotiveDomain {\n  block Car {\n    // The Car block represents the core component of the automotive domain.\n    // It is designed to facilitate communication and usage in various application scenarios.\n    // The model includes comprehensive explanatory comments to help developers and users better understand the meaning and application context of each element.\n    // The model associates relevant physical quantities such as \"Torque\" to ensure standardized and consistent expression of automotive characteristics.\n    // The overall design emphasizes clarity and extensibility, enabling convenient development, integration, and maintenance of subsequent automotive-related systems.\n  }\n}\n```",
    "\n```sysml\npackage AutomobileDocumentManagementSystem {\n  block Automobile {\n    attribute id\n    attribute name\n    attribute torque\n    attribute explanatoryDocument\n  }\n  block Car {\n    attribute id\n    attribute name\n    attribute torque\n    attribute explanatoryDocument\n  }\n  operation enterInformation(input: Automobile)\n  operation queryInformation(input: Automobile): Automobile\n  operation archiveInformation(input: Automobile)\n  operation addExplanatoryDocument(input: Automobile, document: String)\n  operation getExplanatoryDocument(input: Automobile): String\n}\n```\n```",
    "\n```sysml\nblock Automobile\n  part Car: Automobile\n  part Torque: Real\n  part TorqueValue: Real\nend Automobile\n\nblock PhysicalQuantity\n  part id: String\n  part value: Real\n  part unit: String\nend PhysicalQuantity\n\nblock System\n  part car: Car\n  part torque: Torque\n  part torqueValue: TorqueValue\n  part importPhysicalQuantity: PhysicalQuantity\nend System\n```",
    "\n```\npackage Vehicle {\n  class BasicVehicle {\n    +Engine engine;\n  }\n  class Engine {\n    +Integer cylinderCount;\n  }\n  operation configureEngineCylinders(VehicleType type) {\n    if (type == VehicleType.STANDARD) {\n      cylinderCount = 4..6;\n    } else if (type == VehicleType.SMALL) {\n      cylinderCount = 4;\n    } else if (type == VehicleType.LARGE) {\n      cylinderCount = 6;\n    }\n  }\n  enum VehicleType {\n    STANDARD,\n    SMALL,\n    LARGE\n  }\n}\n```",
    "\n```sysml\npackage FuelManagementSystem {\n  block FuelTank {\n    port in FuelSupplyInterface\n    port out FuelReturnInterface\n  }\n  block Engine {\n    port in FuelSupplyInterface\n    port out FuelReturnInterface\n  }\n  connector FuelSupplyInterface {\n    flow Real fuelFlow\n  }\n  connector FuelReturnInterface {\n    flow Real fuelReturn\n  }\n  block FuelTemperatureMonitor {\n    port in FuelSupplyInterface\n    port out FuelReturnInterface\n  }\n  block FuelFlowController {\n    port in FuelSupplyInterface\n    port out FuelReturnInterface\n  }\n  package FuelInterfaces {\n    connector StandardizedFuelInterface {\n      flow Real fuelFlow\n    }\n  }\n  package FuelManagementSystem {\n    block FuelTank {\n      part FuelInterfaces::StandardizedFuelInterface fuelSupplyInterface\n      part FuelInterfaces::StandardizedFuelInterface fuelReturnInterface\n    }\n    block Engine {\n      part FuelInterfaces::Standard",
    "\n```sysml\npackage VehicleStructuralArchitecture {\n  block Vehicle {\n    attribute mass: Real;\n    part frontAxleAssembly: AxleAssembly;\n    part rearAxleAssembly: AxleAssembly;\n  }\n  block AxleAssembly {\n    part axle: Axle;\n    part wheels: Array[1..2] of Wheel;\n  }\n  block Axle {\n    attribute type: String;\n  }\n  block Wheel {\n    attribute name: String;\n  }\n}\n```\n```"
]