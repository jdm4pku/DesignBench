[
    "\n```sysml\nblock Vehicle {\n  part engine: Engine;\n  part driver: Personnel;\n  property mass: Real;\n  property currentStatus: VehicleStatus;\n}\n\nblock Engine {\n  property horsepower: Real;\n  property torque: Real;\n}\n\nblock Personnel {\n  property name: String;\n  property age: Integer;\n}\n\nblock VehicleStatus {\n  property gear: GearSetting;\n  property acceleratorPedalPosition: Real;\n}\n\nenumeration GearSetting {\n  first,\n  second,\n  third,\n  fourth,\n  fifth,\n  sixth,\n  seventh,\n  eighth,\n  ninth,\n  tenth\n}\n```",
    "\n```sysml\nblock VehicleSystem {\n  block Personnel {\n    // Attributes and operations for Personnel\n  }\n\n  block Engine {\n    // Attributes and operations for Engine\n  }\n\n  block Vehicle {\n    // Attributes and operations for Vehicle\n  }\n\n  block ManuallyOperatedVehicle extends Vehicle {\n    // Attributes and operations for ManuallyOperatedVehicle\n  }\n\n  block PoweredVehicle extends Vehicle {\n    // Attributes and operations for PoweredVehicle\n  }\n\n  block ManuallyOperatedPoweredVehicle extends ManuallyOperatedVehicle, PoweredVehicle {\n    // Attributes and operations for ManuallyOperatedPoweredVehicle\n  }\n\n  // Relationships among entities\n}\n```",
    "\n```sysml\nblock VehicleStructure {\n  block Engine {\n    // Engine properties and operations\n  }\n\n  block Transmission {\n    // Transmission properties and operations\n  }\n\n  block Wheel {\n    // Wheel properties and operations\n  }\n\n  part engine: Engine {\n    // Engine instantiation and connections\n  }\n\n  part transmission: Transmission {\n    // Transmission instantiation and connections\n  }\n\n  part wheels: Wheel[4] {\n    // Wheel instantiations and connections\n  }\n}\n```\n\nThis SysML v2 textual code represents the given problem statement. It defines a `VehicleStructure` block that contains `Engine`, `Transmission`, and `Wheel` sub-blocks. The `VehicleStructure` block has exactly one `Engine`, one `Transmission`, and four `Wheel` parts, reflecting the compositional relationships and quantity requirements among the various components. The code is designed to be extensible for both vehicle and component types, to better meet the needs of automotive structure design and management.",
    "\n```sysml\nblock Vehicle\n  block Engine\n    part cylinder: Integer\n  end Engine\nend Vehicle\n\nblock SmallVehicle extends Vehicle\n  block SmallEngine extends Engine\n    part cylinder = 4\n  end SmallEngine\nend SmallVehicle\n\nblock LargeVehicle extends Vehicle\n  block LargeEngine extends Engine\n    part cylinder = 6\n  end LargeEngine\nend LargeVehicle\n```",
    "\n```sysml\nblock TrafficSignalSystem\n  part trafficSignal: TrafficSignal\n  part specificTrafficSignal: TrafficSignal\n\n  specificTrafficSignal.color = green\nend TrafficSignalSystem\n\nblock TrafficSignal\n  attribute color: string\nend TrafficSignal\n```",
    "\n```sysml\nblock InformationClassificationSystem\n  part information: Information\n  part grade: Grade\n  part trafficLight: TrafficLight\n  connector informationToTrafficLight\n  connector gradeToTrafficLight\n  connector trafficLightToGUI\nend InformationClassificationSystem\n\nblock Information\n  attribute level: String\n  attribute code: String\n  attribute color: String\n  operation classifyInformation(level: String): String\n  operation getCode(level: String): String\n  operation getColor(level: String): String\n  operation getScore(grade: String): Real\nend Information\n\nblock Grade\n  attribute level: String\n  attribute score: Real\n  operation classifyGrade(level: String): String\n  operation getScore(level: String): Real\nend Grade\n\nblock TrafficLight\n  attribute color: String\n  operation setColor(color: String)\n  operation getColor: String\nend TrafficLight\n\nInformation.classifyInformation(level: String) : String = \n  if level = \"Unclassified\" then\n    \"uncl\"\n  else if level = \"Confident",
    "\n```sysml\nblock SmallVehicle\n  part engine: Engine\nend SmallVehicle\n\nblock LargeVehicle\n  part engine: Engine\nend LargeVehicle\n\nblock Engine\n  part cylinder1: Cylinder\n  part cylinder2: Cylinder\n  part cylinder3: Cylinder\n  part cylinder4: Cylinder\n  part cylinder5: Cylinder\n  part cylinder6: Cylinder\nend Engine\n\nblock Cylinder\n  // Cylinder properties and operations\nend Cylinder\n\nblock VehicleType\n  flow smallVehicle: SmallVehicle\n  flow largeVehicle: LargeVehicle\nend VehicleType\n\nblock Vehicle\n  part vehicleType: VehicleType\nend Vehicle\n```",
    "Here is a possible SysML v2 textual code output for the given input requirement:\n\n```\nblock Vehicle {\n  part qualityAttributes : String;\n  part driverInformation : String;\n  part fuelTank : FuelTank;\n}\n\nblock FuelTank {\n  part fuelType : String;\n  part fuelAmount : Real;\n}\n\nblock Fuel {\n  part type : String;\n  part amount : Real;\n}\n\nblock Personnel {\n  part name : String;\n  part role : String;\n}\n\nVehicle *-- FuelTank;\nFuelTank *-- Fuel;\nVehicle *-- Personnel;\n```\n\nThis code defines four main blocks: Vehicle, FuelTank, Fuel, and Personnel. The Vehicle block has associations with both FuelTank and Personnel. The FuelTank block has an association with the Fuel block. This structure provides a clear overview of the relationships between the different elements in the system.",
    "\n```sysml\nblock WheelAssembly {\n  part wheelBearingUnit;\n  part tire;\n  part bead;\n  part hub;\n  part rim;\n  part boltMountingHole;\n  part threadedHole;\n  part boltConnection;\n\n  constraint - sealedConnection {\n    tire.bead1 = hub.rim1;\n    tire.bead2 = hub.rim2;\n  }\n\n  constraint - mountingConnection {\n    hub.boltMountingHole1 = threadedHole.boltConnection1;\n    hub.boltMountingHole2 = threadedHole.boltConnection2;\n    // Add more connections if needed\n  }\n}\n```",
    "\n```sysml\nblock FuelFlowManagement {\n  block FuelTankAssembly {\n    part fuelTank;\n    part fuelSupplyPort;\n    part fuelReturnPort;\n    part temperatureSensor;\n  }\n\n  block Engine {\n    part engine;\n    part fuelIntakePort;\n    part fuelReturnPort;\n    part temperatureSensor;\n  }\n\n  connector FuelFlow {\n    flow port fuelSupplyPort;\n    flow port fuelReturnPort;\n    flow port fuelIntakePort;\n    flow port engineFuelReturnPort;\n    flow port temperatureSensor;\n  }\n\n  constraint safetyEfficiency {\n    // Ensure safety and efficiency of fuel supply\n  }\n\n  constraint realTimeMonitoring {\n    // Enable real-time data on fuel supply, return flow, and related temperature parameters\n  }\n\n  constraint preciseControl {\n    // Enable precise control of fuel flow status\n  }\n}\n```",
    "\n```sysml\nblock Vehicle {\n  part frontAxle: Axle;\n  part rearAxle: Axle;\n  part tires: Tire[2];\n  attribute mass: Real = 1750;\n}\n\nblock Axle {\n  attribute mass: Real;\n  attribute steeringAngle: Real;\n}\n\nblock Tire {\n  attribute mass: Real;\n  attribute size: Real;\n}\n\nblock_definition vehicle1_c1 extends Vehicle {\n  redefines frontAxle = dedicatedFrontAxle;\n  part dedicatedFrontAxle: Axle;\n  attribute mass: Real = 2000;\n}\n\nblock_definition dedicatedFrontAxle extends Axle {\n  attribute steeringAngle: Real;\n}\n```",
    "\n```sysml\nblock Vehicle {\n  part Hitch {\n    flowPort connector;\n  }\n}\n\nblock Trailer {\n  part Hitch {\n    flowPort connector;\n  }\n}\n\nblock CouplingMechanism {\n  flowPort vehicleConnector;\n  flowPort trailerConnector;\n}\n\nblock System {\n  part Vehicle;\n  part Trailer;\n  part CouplingMechanism;\n\n  constraint <<vehicleConnector>> = <<Vehicle.Hitch.connector>>;\n  constraint <<trailerConnector>> = <<Trailer.Hitch.connector>>;\n}\n```",
    "\n```sysml\nblock VehiclePowerTransmissionSystem\n  part engine\n  part transmission\n  part clutch\n  part driveshaft\n  part rearAxleAssembly\n  part leftHalfShaft\n  part rightHalfShaft\n  part wheels\n  part fuelCommandPort\n  part powerPort\n  part clutchPort\n  part roadInterface\n  part vehicleInterface\n\n  flow powerFlow {\n    from(engine.powerPort) to (transmission.powerPort)\n    from(transmission.powerPort) to (clutch.powerPort)\n    from(clutch.powerPort) to (driveshaft.enginePort)\n    from(driveshaft.enginePort) to (rearAxleAssembly.driveshaftPort)\n    from(rearAxleAssembly.leftHalfShaftPort) to (leftHalfShaft.differentialPort)\n    from(rearAxleAssembly.rightHalfShaftPort) to (rightHalfShaft.differentialPort)\n    from(leftHalfShaft.differentialPort) to (",
    "\n\n```sysml\nblock b11\n  part c1\n  part c2\n  flowPort pb\n  flowPort pe\n  flow pe_c1_to_c2 : c1.pb -> c2.pe\nend b11\n\nblock b12\n  part c3\n  part c4\n  flowPort pd\n  flowPort pf\n  flow pf_c3_to_c4 : c3.pd -> c4.pf\nend b12\n\nblock b21\n  block b11\n    part c1\n    part c2\n    flowPort pb\n    flowPort pe\n    flow pe_c1_to_c2 : c1.pb -> c2.pe\n  end b11\n  // other parts and flows if any\nend b21\n\nblock b22\n  block b12\n    part c3\n    part c4\n    flowPort pd\n    flowPort pf\n    flow pf_c3_to_c4 : c3.pd -> c4.pf\n  end b12\n  // other parts and",
    "\n```sysml\nblock AutomotivePowertrain {\n  part FuelCommand: Port {\n    in event FuelIncrease\n    in event FuelDecrease\n  }\n  part EngineControl: Block {\n    in event Start\n    in event Stop\n  }\n  part TorqueGeneration: Function {\n    in event FuelCommand\n    out event TorqueGenerated\n  }\n  part Transmission: Block {\n    in event TorqueGenerated\n    out event TorqueTransmitted\n  }\n  part Driveshaft: Block {\n    in event TorqueTransmitted\n    out event ForceDistributed\n  }\n  part PowerDistribution: Block {\n    in event ForceDistributed\n  }\n  part EngineShutdown: Function {\n    in event Shutdown\n  }\n  part SafeOperation: Function {\n    in event EngineShutdown\n  }\n  // Connectors\n  FuelCommand -> EngineControl\n  FuelCommand -> TorqueGeneration\n  EngineControl -> TorqueGeneration\n  TorqueGeneration -> Transmission\n  Transmission -> Drivesh",
    "\n```sysml\nblock AutomotivePowertrainControlSystem {\n  part engineControl: EngineControl;\n  part torqueControl: TorqueControl;\n  part powerTransmission: PowerTransmission;\n  part wheelTorqueControl: WheelTorqueControl;\n  part stallDetection: StallDetection;\n  part powerResponse: PowerResponse;\n\n  flow engineStart {\n    engineControl.start -> torqueControl.start;\n    torqueControl.start -> powerTransmission.start;\n    powerTransmission.start -> wheelTorqueControl.start;\n    wheelTorqueControl.start -> stallDetection.start;\n    stallDetection.start -> powerResponse.start;\n  }\n\n  flow engineShutdown {\n    powerResponse.shutdown -> stallDetection.shutdown;\n    stallDetection.shutdown -> wheelTorqueControl.shutdown;\n    wheelTorqueControl.shutdown -> powerTransmission.shutdown;\n    powerTransmission.shutdown -> torqueControl",
    "\n```sysml\nblock VehiclePowertrainSystem {\n  part FuelCommand : InformationFlow;\n  part EngineStartSignal : Event;\n  part EngineOutputTorque : OpaqueBehavior;\n  part Transmission : OpaqueBehavior;\n  part WheelTorqueDistribution : OpaqueBehavior;\n  part EngineShutdownSignal : Event;\n\n  constraint initiation {\n    FuelCommand.initiates EngineOutputTorque;\n    EngineStartSignal.triggers EngineOutputTorque;\n  }\n\n  constraint flow {\n    EngineOutputTorque.flowsTo Transmission;\n    Transmission.flowsTo WheelTorqueDistribution;\n  }\n\n  constraint termination {\n    EngineShutdownSignal.terminates EngineOutputTorque;\n  }\n\n  constraint accuracy {\n    EngineOutputTorque.accuracy;\n    Transmission.accuracy;\n    WheelTorqueDistribution.accuracy;\n  }\n\n  constraint efficiency {\n    EngineOutputTorque.efficiency",
    "\n```sysml\nblock Vehicle {\n  part frame;\n  part hitchBall;\n}\n\nblock Trailer {\n  part frame;\n  part trailerCoupler;\n}\n\nblock HitchingMechanism {\n  flow port vehiclePower;\n  flow port trailerPower;\n\n  operation connect() {\n    vehiclePower -> hitchBall;\n    trailerPower -> trailerCoupler;\n  }\n\n  operation disconnect() {\n    hitchBall -> vehiclePower;\n    trailerCoupler -> trailerPower;\n  }\n}\n\nblock VehicleAndTrailer {\n  part vehicle;\n  part trailer;\n  part hitchingMechanism;\n\n  flow VehiclePower {\n    source vehicle;\n    target hitchingMechanism.vehiclePower;\n  }\n\n  flow TrailerPower {\n    source trailer;\n    target hitchingMechanism.trailerPower;\n  }\n\n  operation connect() {\n    hitchingMechanism.connect();\n  }\n\n",
    "\n```sysml\nblock Vehicle {\n  part Chassis {\n    flow Real towBall;\n  }\n}\n\nblock Trailer {\n  part Coupler {\n    flow Real trailerFrame;\n  }\n}\n\nblock ConnectionSystem {\n  flow Real connect(Vehicle.Chassis.towBall, Trailer.Coupler.trailerFrame);\n  flow Real disconnect(Vehicle.Chassis.towBall, Trailer.Coupler.trailerFrame);\n}\n```",
    "\n```sysml\nblock Vehicle {\n  part Chassis {\n    block TowBallDevice {\n      // details of tow ball device\n    }\n  }\n}\n\nblock Trailer {\n  part TrailerChassis {\n    // details of trailer chassis\n  }\n  part CouplerMechanism {\n    // details of coupler mechanism\n  }\n}\n\noperation connect() {\n  // operation to connect trailer to vehicle\n}\n\noperation disconnect() {\n  // operation to disconnect trailer from vehicle\n}\n```",
    "\n```sysml\nblock FuelSystem {\n  part FuelTank {\n    flowPort in;\n    flowPort out;\n    flowPort return;\n  }\n  part Engine {\n    flowPort in;\n    flowPort out;\n  }\n  connector FuelFlow {\n    flow in;\n    flow out;\n  }\n  connector FuelReturn {\n    flow in;\n    flow out;\n  }\n  constraint safety {\n    in.temperature < 100;\n  }\n  constraint efficiency {\n    in.flowRate > 5;\n  }\n  constraint interface {\n    in.connectorType = out.connectorType;\n  }\n}\n```",
    "\n```sysml\nblock VehicleFuelDeliverySystem {\n  part storageTank: Reservoir;\n  part fuelPump: Pump;\n  part vehicleFuelTank: Tank;\n\n  flow flow1: FuelFlow {\n    from storageTank.out;\n    to fuelPump.in;\n  }\n\n  flow flow2: FuelFlow {\n    from fuelPump.out;\n    to vehicleFuelTank.in;\n  }\n\n  constraint capacityConstraint {\n    vehicleFuelTank.maxCapacity = storageTank.capacity;\n  }\n\n  constraint realTimeMonitoring {\n    vehicleFuelTank.currentLevel = vehicleFuelTank.level;\n  }\n}\n\nblock Reservoir {\n  attribute capacity: Integer;\n  port out: FuelFlow;\n}\n\nblock Pump {\n  port in: FuelFlow;\n  port out: FuelFlow;\n}\n\nblock Tank {\n  attribute maxCapacity: Integer;\n  attribute level: Integer;\n  attribute currentLevel:",
    "\n```sysml\nblock AutomobileAssembly {\n  part gearbox;\n  part engine;\n  part vehicleAssembly;\n  part vehicleWithGearbox;\n  part fullyAssembledVehicle;\n\n  flow {\n    vehicleAssembly -> gearbox : installGearbox();\n    gearbox -> vehicleWithGearbox : produceWithGearbox();\n    vehicleWithGearbox -> engine : installEngine();\n    engine -> fullyAssembledVehicle : produceFullyAssembled();\n  }\n}\n```",
    "\n```sysml\nblock VehicleA {\n  block Off {\n    block Starting {\n      block Running {\n        operation vehicleOn()\n        operation supplyPower()\n        operation applyParkingBrake()\n      }\n      operation startSignal()\n      operation brakePedal()\n    }\n    block HealthManagement {\n      operation realTimeDetection()\n      operation outputTemperature()\n      operation sendOverTemperatureSignal()\n      operation safetyThreshold()\n      operation switchToDegradedMode()\n      operation receiveRestoreToNormalSignal()\n      operation switchToNormalState()\n    }\n    block Maintenance {\n      operation maintenance()\n    }\n    block Degraded {\n      operation degraded()\n    }\n    operation switchToStarting()\n    operation switchToRunning()\n    operation switchToHealthManagement()\n    operation switchToMaintenance()\n    operation switchToDegraded()\n  }\n  operation startUp()\n  operation shutDown()\n  operation switchToOff()\n  operation switchToNormal()\n}\n```",
    "\n```sysml\nblock Vehicle {\n  part StateMachine {\n    state Shutdown {\n      transition [startupCondition] to Operating\n    }\n    state Operating {\n      transition [overheatingCondition] to Degraded\n    }\n    state Degraded {\n      transition [maintenanceCondition] to Operating\n    }\n  }\n  part HealthManagement {\n    in RealTimeTemperature\n    out WarningSignal\n    out VehicleStatus\n  }\n  part Maintenance {\n    in Fuel\n    in MaintenanceInterval\n    in TemperatureThreshold\n  }\n}\n\nblock VehicleController {\n  part ControlOperations {\n    in StartSignal\n    in ShutdownSignal\n  }\n  part SignalProcessing {\n    in VehicleStatus\n    in WarningSignal\n  }\n}\n\nblock System {\n  part Configuration {\n    in Fuel\n    in MaintenanceInterval\n    in TemperatureThreshold\n  }\n  block Vehicle\n  block VehicleController\n}\n```",
    "\n```sysml\nblock VehicleDynamicSimulation {\n  parameter: Real mass;\n  parameter: Real position;\n  parameter: Real velocity;\n  parameter: Real acceleration;\n  parameter: Real slope;\n  parameter: Real surfaceFrictionCoefficient;\n  part: StateMachine {\n    state: OnState {\n      transition: to OffState;\n    }\n    state: OffState;\n  }\n  operation: simulate() {\n    // Implementation of the simulation logic\n  }\n  operation: recordSnapshot() {\n    // Implementation of the snapshot recording logic\n  }\n}\n```",
    "\n```sysml\npackage VehicleConfiguration {\n  block SubsystemA {\n    block Component1 {}\n    block Component2 {}\n    block Component3 {}\n  }\n  block SubsystemB {\n    block Component4 {}\n    block Component5 {}\n    block Component6 {}\n  }\n  block ConfigurationA {\n    part SubsystemA1: SubsystemA {\n      part Component1 {}\n      part Component2 {}\n    }\n    part SubsystemB3: SubsystemB {\n      part Component4 {}\n      part Component5 {}\n    }\n  }\n  block ConfigurationB {\n    part SubsystemA2: SubsystemA {\n      part Component2 {}\n      part Component3 {}\n    }\n    part SubsystemB3: SubsystemB {\n      part Component4 {}\n      part Component5 {}\n    }\n  }\n  constraint constraint1 {\n    if (SubsystemA.second) then (SubsystemB.third) else (not SubsystemA.second)\n  }\n}\n```",
    "\n```sysml\nblock SubsystemA\n  part part1: Port\n  part part2: Port\n  part part3: Port\n  part part4: Port\n  part part5: Port\n  part part6: Port\nend SubsystemA\n\nblock SubsystemB\n  part part1: Port\n  part part2: Port\n  part part3: Port\n  part part4: Port\n  part part5: Port\n  part part6: Port\nend SubsystemB\n\nblock VehicleConfigA\n  block subsystemA: SubsystemA\n  block subsystemB: SubsystemB\n  // Interconnection between subsystem ports\n  // Customization at both subsystem and component levels\n  // System-level constraints for consistency and rationality\nend VehicleConfigA\n\nblock VehicleConfigB\n  block subsystemA: SubsystemA\n  block subsystemB: SubsystemB\n  // Interconnection between subsystem ports\n  // Customization at both subsystem and component levels\n  // System-level constraints for consistency and rationality\nend VehicleConfigB\n```",
    "\n```sysml\nblock VehicleProductLine {\n  part engine: Engine;\n  part transmission: Transmission;\n  part wheels: Wheels;\n\n  constraint performanceRequirement {\n    engine.cylinder in {4, 6};\n    transmission.type in {\"manual\", \"automatic\"};\n    wheels.rimWidth in {\"narrow\", \"wide\"};\n  }\n\n  constraint compatibility {\n    engine.cylinder =< transmission.maxCylinder;\n    engine.power =< transmission.maxPower;\n    wheels.rimWidth =< engine.maxTorque;\n  }\n\n  block Engine {\n    attribute cylinder: Integer;\n    attribute power: Integer;\n    attribute maxTorque: Integer;\n  }\n\n  block Transmission {\n    attribute type: String;\n    attribute maxCylinder: Integer;\n    attribute maxPower: Integer;\n  }\n\n  block Wheels {\n    attribute rimWidth: String;\n  }\n}\n```",
    "\n```sysml\nblock Vehicle {\n  part mass: Real;\n  part fuelStatus: FuelStatus;\n  part powertrain: Powertrain;\n  part reliability: Reliability;\n}\n\nblock FuelStatus {\n  part isEmpty: Boolean;\n  part mass: Real;\n}\n\nblock Powertrain {\n  part engine: Engine;\n  part transmission: Transmission;\n  part driveInterface: DriveInterface;\n}\n\nblock Engine {\n  part torque: Real;\n}\n\nblock Transmission {\n  part gearRatio: Real;\n}\n\nblock DriveInterface {\n  part connection: Boolean;\n}\n\nblock Reliability {\n  part performance: Real;\n  part durability: Real;\n}\n\nblock System {\n  part vehicles: Set(Vehicle);\n  part defineVehicle(mass: Real, fuelStatus: FuelStatus, powertrain: Powertrain, reliability: Reliability): Vehicle;\n  part validateRequirements(vehicle: Vehicle): Boolean;\n}\n```",
    "\n```sysml\nblock VehicleMassComplianceChecker {\n  part testOperator {\n    block WeighingEquipment {\n      flow Real mass;\n    }\n  }\n  part Vehicle {\n    flow Real actualMass;\n  }\n  part ComplianceChecker {\n    flow Boolean isCompliant;\n  }\n  flow Real maxPermissibleMass;\n  flow Boolean isSequentialTesting;\n}\n```",
    "\n```sysml\nblock SpigotBank {\n  part hotWaterOutlet;\n  part coldWaterOutlet;\n}\n\nblock Spigot {\n  part hotWaterInlet;\n  part coldWaterInlet;\n}\n\nblock Faucet {\n  part hotWaterOutlet;\n  part coldWaterOutlet;\n}\n\nblock FaucetInlet {\n  part hotWaterInlet;\n  part coldWaterInlet;\n}\n\nflow flow1 {\n  from SpigotBank.hotWaterOutlet;\n  to Spigot.hotWaterInlet;\n}\n\nflow flow2 {\n  from SpigotBank.coldWaterOutlet;\n  to Spigot.coldWaterInlet;\n}\n\nflow flow3 {\n  from Spigot.hotWaterOutlet;\n  to FaucetInlet.hotWaterInlet;\n}\n\nflow flow4 {\n  from Spigot.coldWaterOutlet;\n  to FaucetInlet.coldWaterInlet;\n}\n",
    "\n```sysml\nblock VehicleQualityAnalysisSystem {\n  part inputData {\n    flow qualityDataIn: In\n  }\n  part aggregation {\n    flow totalMassOut: Out\n  }\n  part analysisRequirements {\n    flow analysisRequirementsIn: In\n  }\n  part analysisUseCases {\n    flow analysisUseCasesIn: In\n  }\n  part taskGeneration {\n    flow tasksOut: Out\n  }\n  part performanceOptimization {\n    flow performanceOut: Out\n  }\n  part efficiencyImprovement {\n    flow efficiencyOut: Out\n  }\n  part dataFoundation {\n    flow dataFoundationOut: Out\n  }\n  part designSupport {\n    flow designSupportOut: Out\n  }\n}\n```",
    "\n```sysml\nblock VehiclePowertrainConfiguration {\n  part engineType: EngineType;\n  part engineStructure: EngineStructure;\n  part engineComponents: EngineComponents;\n  part tradeOffAnalysis: TradeOffAnalysis;\n  part evaluationModel: EvaluationModel;\n  part optimalEngineSolution: OptimalEngineSolution;\n  part decisionTransparency: DecisionTransparency;\n}\n\nblock EngineType {\n  attribute fourCylinder: Boolean;\n  attribute sixCylinder: Boolean;\n  // other engine types\n}\n\nblock EngineStructure {\n  attribute cylinders: Integer;\n  attribute pistons: Integer;\n  attribute connectingRods: Integer;\n  attribute crankshafts: Integer;\n}\n\nblock EngineComponents {\n  attribute cylinder: Component;\n  attribute piston: Component;\n  attribute connectingRod: Component;\n  attribute crankshaft: Component;\n}\n\nblock TradeOffAnalysis {\n  operation analyze(engineType: EngineType, engineStructure: EngineStructure): EngineConfiguration;\n}\n",
    "\n```sysml\nblock VehicleFuelEconomy {\n  part powertrain: Powertrain;\n  part load: Load;\n  part operatingConditions: OperatingConditions;\n  part fuelConsumption: FuelConsumption;\n\n  constraint \"UrbanDriving\" {\n    fuelConsumption.rangePerGallon >= 25;\n  }\n\n  constraint \"HighwayDriving\" {\n    fuelConsumption.rangePerGallon >= 30;\n  }\n\n  constraint \"MeasurementUnit\" {\n    fuelConsumption.measurementUnit = \"miles per gallon\";\n  }\n\n  constraint \"AdditionalLoad\" {\n    load.additionalLoad = 1000;\n  }\n\n  constraint \"DrivingScenario\" {\n    operatingConditions.drivingScenario = \"standard urban and highway driving scenarios\";\n  }\n}\n\nblock Powertrain {\n  // Define attributes and operations related to powertrain\n}\n\nblock Load {\n  attribute additionalLoad: Integer;\n  // Define other attributes and",
    "\n```sysml\nblock VehicleMotionSimulation\n  parameter:\n    mass: Real;\n    initialPosition: Real;\n    initialVelocity: Real;\n    powerOutputData: Set(Real);\n  connector:\n    input:\n      mass: in Real;\n      initialPosition: in Real;\n      initialVelocity: in Real;\n      powerOutputData: in Set(Real);\n    output:\n      acceleration: out Real;\n      velocityVariation: out Real;\n      displacement: out Real;\n  operation:\n    calculateMotion: () -> () is exec;\n  constraint:\n    mass > 0;\n    initialPosition is Real;\n    initialVelocity is Real;\n    powerOutputData is Set(Real);\nend VehicleMotionSimulation;\n```",
    "\n```sysml\nblock VehicleSystem {\n  part frontAxleAssembly(FrontAxleAssembly) {\n    block FrontAxle {\n      attribute mass = 150;\n      attribute steeringAngle;\n    }\n    part FrontWheel {\n      attribute mass;\n    }\n  }\n  part rearAxleAssembly(RearAxleAssembly) {\n    block RearAxle {\n      attribute mass = 250;\n    }\n    part RearWheel {\n      attribute mass;\n    }\n  }\n  attribute totalMass = 2500;\n}\n```",
    "\n```sysml\nblock VehicleSafetySecuritySystem {\n  part seatBelt: SeatBelt;\n  part airbag: Airbag;\n  part bumper: Bumper;\n  part alarmDevice: AlarmDevice;\n  part antiLockBrakingSystem: AntiLockBrakingSystem;\n  part keylessEntrySystem: KeylessEntrySystem;\n\n  constraint mandatorySafetyFeatures {\n    seatBelt.mandatory;\n    bumper.mandatory;\n  }\n\n  constraint optionalSafetyFeatures {\n    airbag.optional;\n    antiLockBrakingSystem.optional;\n  }\n\n  constraint securityDevices {\n    alarmDevice.security;\n    keylessEntrySystem.security;\n  }\n\n  operation filterAndOrganize {\n    in String featureType;\n    out List<Component> components;\n  }\n}\n```",
    "\n```sysml\npackage ApplicationLayer {\n  block Application {\n    part serviceLayer: ServiceLayer\n  }\n}\n\npackage ServiceLayer {\n  block Service {\n    part dataLayer: DataLayer\n    property x: Integer\n    property y: Integer\n    property z: Integer {\n      derive: x * y\n    }\n  }\n}\n\npackage DataLayer {\n  block Data {\n    property dataStore: String\n  }\n}\n\npackage System {\n  block System {\n    part applicationLayer: ApplicationLayer\n    part serviceLayer: ServiceLayer\n    part dataLayer: DataLayer\n  }\n}\n```",
    "\n```sysml\nblock PowertrainSystem {\n  part torqueGenerator {\n    type: TorqueGenerator;\n    interface InOut {\n      in: input Real;\n      out: output Real;\n    }\n    constraint: out > 0;\n  }\n  part logicLayer {\n    type: LogicLayer;\n    interface InOut {\n      in: input Real;\n      out: output Real;\n    }\n  }\n  part physicalLayer {\n    type: PhysicalLayer;\n    interface InOut {\n      in: input Real;\n      out: output Real;\n    }\n  }\n  connection torqueGenerator.out -> logicLayer.in;\n  connection logicLayer.out -> physicalLayer.in;\n}\n```",
    "\n```sysml\nblock TorqueGenerator\n  operation generateTorque()\n    : Integer;\n  end;\nend;\n\nblock Engine\n  operation executeTorque(torque: Integer)\n    : Void;\n  end;\nend;\n\nblock Powertrain\n  part engine: Engine;\n  part torqueGenerator: TorqueGenerator;\n\n  operation mapTorqueGeneratorToEngine()\n    : Void;\n    engine.executeTorque(torqueGenerator.generateTorque());\n  end;\nend;\n\nblock System\n  part powertrain: Powertrain;\n\n  operation transmitPower()\n    : Void;\n    powertrain.mapTorqueGeneratorToEngine();\n  end;\n\n  operation outputPower()\n    : Void;\n    powertrain.mapTorqueGeneratorToEngine();\n  end;\nend;\n```",
    "\n```sysml\nblock VehicleSafetyAndAntiTheftFunctionCatalogue {\n  part basicSafetyComponents {\n    block frontSeatBelts {\n      // properties and constraints\n    }\n    block bumpers {\n      // properties and constraints\n    }\n    block driverAirbag {\n      // properties and constraints\n    }\n    block antiLockBrakingSystem {\n      // properties and constraints\n    }\n  }\n  part securityComponents {\n    block alarmSystem {\n      // properties and constraints\n    }\n    block keylessEntrySystem {\n      // properties and constraints\n    }\n  }\n  // other parts and blocks\n}\n```\n\nThis SysML v2 textual code represents the structure of the Vehicle Safety and Anti-theft Function Catalogue. The code is divided into two main parts: basicSafetyComponents and securityComponents. Each part contains blocks that represent the various components mentioned in the input requirement. The properties and constraints of each component block are not shown in this code snippet, as they would depend on the specific requirements and characteristics of each component.",
    "\n```sysml\nblock FuelSupplyAndReturnManagement {\n  block FuelTankAssembly {\n    block FuelTank {\n      // Fuel tank properties\n    }\n    block FuelPump {\n      // Fuel pump properties\n    }\n    flow flow_fuelFromTankToPump {\n      // Flow properties between fuel tank and fuel pump\n    }\n    flow flow_fuelFromPumpToConsumers {\n      // Flow properties between fuel pump and fuel-consuming units\n    }\n    flow flow_fuelReturn {\n      // Flow properties for fuel return to the tank\n    }\n  }\n  block FuelTemperatureMonitor {\n    // Monitor properties\n  }\n  connector fuelFlow {\n    // Connector properties for fuel flow\n  }\n  connector fuelReturn {\n    // Connector properties for fuel return\n  }\n  connector temperatureData {\n    // Connector properties for temperature data transmission\n  }\n  constraint safety_and_efficiency {\n    // Constraint for ensuring safety and efficiency\n  }\n",
    "\n```sysml\nblock Vehicle {\n  part Interior {\n    block SeatBelt {\n      attribute mandatory = true;\n      attribute quantity = 2;\n    }\n    block Airbag {\n      attribute mandatory = false;\n    }\n  }\n  part Exterior {\n    block Bumper {\n      attribute mandatory = true;\n    }\n    block KeylessEntrySystem {\n      attribute mandatory = true;\n    }\n  }\n  part Chassis {\n    block Wheel {\n      attribute quantity = 2;\n    }\n    block AntiLockBrakingSystem {\n      attribute mandatory = false;\n      attribute quantity = 2;\n    }\n  }\n  part AntiTheftAlarmDevice {\n    attribute mandatory = true;\n  }\n}\n```",
    "\n```sysml\nblock VehicleSafetyAndSecurity {\n  block Interior {\n    part AlarmSystem;\n    part SeatBelts;\n    part FrontRowSeats;\n    part DriversAirbag;\n  }\n  block BodyAssembly {\n    part VehicleBody;\n    part Bumper;\n    part KeylessEntrySystem;\n  }\n  Interior.AlarmSystem -> Interior.SeatBelts;\n  Interior.AlarmSystem -> Interior.FrontRowSeats;\n  Interior.AlarmSystem -> Interior.DriversAirbag;\n  Interior.SeatBelts -> BodyAssembly.VehicleBody;\n  Interior.FrontRowSeats -> BodyAssembly.VehicleBody;\n  Interior.DriversAirbag -> BodyAssembly.VehicleBody;\n  BodyAssembly.Bumper -> BodyAssembly.VehicleBody;\n  BodyAssembly.KeylessEntrySystem -> BodyAssembly.VehicleBody;\n}\n```",
    "Here is a possible SysML v2 textual code output for the given task:\n\n```\nblock SecurityClassification\n  part attribute: String\n  part classification: String\n\n  constraint c1\n    classification in {\"Unclassified\", \"Confidential\", \"Secret\"}\n  end c1\n\n  constraint c2\n    if classification = \"Confidential\" then\n      attribute <> null\n    else\n      attribute = null\n    endif\n  end c2\nend SecurityClassification\n```\n\nThis code defines a block `SecurityClassification` with two parts: `attribute` and `classification`. The `classification` part is constrained to be one of \"Unclassified\", \"Confidential\", or \"Secret\". If the `classification` is \"Confidential\", then the `attribute` part must be non-null; otherwise, it must be null.",
    "\n```sysml\nblock ECUCommunicationSystem {\n  part VCU {\n    block BusIF {}\n  }\n  part ECU {\n    block BusIF {}\n  }\n  part CANbus {\n    flow VCU.BusIF -> CANbus;\n    flow ECU.BusIF -> CANbus;\n  }\n  part SensorDataExchange {\n    flow CANbus -> SensorDataExchange;\n  }\n}\n```",
    "\n```sysml\nblock BatteryStatusDetection {\n  part highReliabilitySafetyMeasures: PreventiveMeasures;\n  part batteryStatusAlarm: Alarm;\n  part emergencyResponse: EmergencyResponse;\n\n  flow highReliability {\n    highReliabilitySafetyMeasures.preventiveMeasures -> batteryStatusAlarm;\n    batteryStatusAlarm.abnormalBloodGlucose -> emergencyResponse;\n  }\n}\n\nblock PreventiveMeasures {\n  operation detectBatteryStatus;\n  operation implementPreventiveMeasures;\n\n  flow preventiveMeasuresFlow {\n    detectBatteryStatus -> implementPreventiveMeasures;\n  }\n}\n\nblock Alarm {\n  operation monitorBloodGlucose;\n  operation triggerAlarm;\n\n  flow alarmFlow {\n    monitorBloodGlucose -> triggerAlarm;\n  }\n}\n\nblock EmergencyResponse {\n  operation assessRisk;\n  operation establishManagementMeasures;\n\n  flow emergencyResponseFlow {\n    assess",
    "\n```sysml\nblock Constants\n  parameter Real eulerNumber = 2.71828182845904523536028747135266249775724709369995 = 2.71828182845904523536028747135266249775724709369995;\n  parameter Real pi = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679 = 3.1415926535897932384",
    "\n```sysml\npackage Automotive::Components::Tires {\n  block Tire {\n    attribute manufacturer: String\n    attribute rimDiameter: Real\n    attribute width: Integer\n  }\n\n  instance MichelinTire : Tire {\n    manufacturer = \"Michelin\"\n    rimDiameter = 18.0\n    width = 245\n  }\n}\n```",
    "\n```sysml\npackage AutomotiveComponentModel\n\nblock Vehicle\n  attribute mass: 1200 kg\n  attribute length: 4.82 m\n  part frontLeftWheel: Wheel\n  part frontRightWheel: Wheel\nend Vehicle\n\nblock Wheel\n  attribute hubDiameter: 18 in\n  attribute width: 245 mm\n  attribute outerDiameter: (hubDiameter + tireHeight)\n  part tire: Tire\nend Wheel\n\nblock Tire\n  attribute height: 20 mm // example value; can be any height in SI or Imperial units\nend Tire\n```\n\nThis SysML v2 textual code represents the automotive component model as described in the input requirements. The Vehicle block has a mass and length attribute, and contains two Wheel parts (left and right front wheels). The Wheel block has attributes for hub diameter, width, and outer diameter (calculated as the sum of the hub diameter and tire height). The Wheel also contains a Tire part. The Tire block has an attribute for height,",
    "\n```sysml\nblock Vehicle {\n  part engine: Engine\n  part transmission: Transmission\n  constraint c1 {\n    engine.cylinders in {4, 6}\n    transmission.type in {\"manual\", \"automatic\"}\n    if engine.cylinders = 6 then\n      transmission.type = \"automatic\"\n    else\n      transmission.type = \"manual\"\n    end if\n  }\n}\n\nblock Engine {\n  attribute cylinders: Integer\n}\n\nblock Transmission {\n  attribute type: String\n}\n```",
    "\n```sysml\npackage Vehicle {\n  block Car {\n    part mass: Real;\n    part length: Real;\n    part wheelAssemblies: Set(WheelAssembly);\n    constraint mass = 1200;\n    constraint length = 4.82;\n    constraint wheelAssemblies.size >= 1;\n  }\n  block WheelAssembly {\n    part tire: Tire;\n    part brakeDisc: BrakeDisc;\n    constraint tire.outerDiameter >= brakeDisc.diameter;\n  }\n  block Tire {\n    part rimDiameter: Real;\n    part width: Real;\n    part height: Real;\n    part outerDiameter: Real;\n    part treadDepth: Real;\n    constraint rimDiameter = 18;\n    constraint width = 245;\n    constraint height = 45;\n    constraint treadDepth >= 3.5;\n    constraint treadDepth = 6;\n    constraint outerDiameter = rimDiameter + (2 * tread",
    "\n```sysml\nblock AutomotiveFuelSystem {\n  part FuelTankAssembly {\n    interface outlet {\n      flow port Fuel {\n        direction out;\n      }\n      flow port ReturnFuel {\n        direction in;\n      }\n    }\n    part FuelPump {\n      flow port Fuel {\n        direction in;\n      }\n      flow port ReturnFuel {\n        direction out;\n      }\n    }\n  }\n  part FuelTank {\n    flow port Fuel {\n      direction in;\n    }\n  }\n  constraint efficientFuelCirculation {\n    // Constraint to ensure efficient fuel circulation\n  }\n  constraint safeFuelCirculation {\n    // Constraint to ensure safe fuel circulation\n  }\n  constraint normalFuelSupply {\n    // Constraint to ensure normal fuel supply to the engine\n  }\n  constraint monitorFuelTemperature {\n    // Constraint to monitor and transmit fuel temperature information\n  }\n}\n```",
    "\n```sysml\nblock PhysicalQuantitySystem {\n  part length: PhysicalQuantity;\n  part mass: PhysicalQuantity;\n  part time: PhysicalQuantity;\n  part electricCurrent: PhysicalQuantity;\n  part temperature: PhysicalQuantity;\n  part amountOfSubstance: PhysicalQuantity;\n  part luminousIntensity: PhysicalQuantity;\n}\n\nblock PhysicalQuantity {\n  attribute value: Real;\n  attribute unit: Unit;\n\n  operation convertTo(targetUnit: Unit): Real;\n}\n\nblock Unit {\n  attribute symbol: String;\n  attribute name: String;\n  attribute conversionFactor: Real;\n}\n```\n\nExplanation:\nThe output model is a SysML v2 textual code that represents a PhysicalQuantitySystem block containing seven parts, each representing a base physical quantity in the International System of Quantities (ISQ). Each PhysicalQuantity part has a value and a unit, and can perform a conversion operation to a target unit. The Unit block represents a unit with a symbol, a name, and a conversion factor for",
    "\n```sysml\nblock UnitSystemLibrary\n  part USCustomaryUnits\n  part ISQ\n  operation convert(inputUnit: Unit, outputUnit: Unit): Unit\n  operation manageUnits(): List<Unit>\n  operation applyUnits(unit: Unit): Unit\n  constraint accuracy\n  constraint authoritativeStandardization\n  constraint efficiency\n  constraint reliability\nend UnitSystemLibrary\n\nblock Unit\n  attribute name: String\n  attribute symbol: String\n  attribute conversionFactor: Real\n  attribute quantity: Quantity\nend Unit\n\nblock Quantity\n  attribute name: String\n  attribute symbol: String\n  attribute SIUnit: Unit\n  attribute units: List<Unit>\nend Quantity\n```",
    "\n```sysml\nblock CarHeadlampTiltAdjustmentKnob {\n  part TiltAngle: Real;\n  constraint c1 { TiltAngle >= 50 and TiltAngle <= 80 };\n  part SI_Units: Unit;\n  part RealNumberConstants: Real;\n  RealNumberConstants.pi = 3.141592653589793;\n  RealNumberConstants.e = 2.718281828459045;\n}\n```",
    "\n```sysml\npackage DataTypes {\n  dataType UnsignedInteger {\n    constraint notEmpty();\n    constraint >= 0;\n  }\n\n  dataType UnsignedFloat {\n    constraint notEmpty();\n    constraint >= 0;\n  }\n\n  dataType DateTime {\n    constraint notEmpty();\n  }\n\n  dataType String {\n    constraint notEmpty();\n  }\n\n  dataType Boolean {\n    constraint notEmpty();\n  }\n\n  dataType Diameter {\n    attribute value : UnsignedInteger;\n    constraint value in {60, 70, 80};\n  }\n\n  enum Status {\n    critical : \"red\",\n    warning : \"yellow\",\n    normal : \"green\"\n  }\n}\n\nblock System {\n  part dataTypes : DataTypes;\n  flow flow1 : UnsignedInteger;\n  flow flow2 : UnsignedFloat;\n  flow flow3 : DateTime;\n  flow flow4 : String;\n  flow flow5 : Boolean;\n  flow flow6 : Diameter;\n  flow flow7 : Status;\n}\n```",
    "\n```sysml\nblock SparePartsManagement {\n  part: Bag(SparePart)\n  integers: List(Integer)\n  strings: Set(String)\n  personnel: OrderedSet(Person)\n  nestedPersonnel: List(Set(Person))\n  realNumbers: Array(Real, 4)\n}\n```",
    "\n```sysml\npackage TireInformation {\n  class Tire {\n    attribute manufacturer: String;\n    attribute rimDiameter: Real;\n    attribute tireWidth: Real;\n    attribute installationPosition: String;\n  }\n\n  package TireManufacturer {\n    class Michelin;\n    class Continental;\n    class Goodyear;\n    // Add more manufacturers as needed\n  }\n\n  package TireSize {\n    class Size18;\n    class Size19;\n    class Size20;\n    // Add more sizes as needed\n  }\n\n  package TireWidth {\n    class Width245;\n    class Width255;\n    class Width265;\n    // Add more widths as needed\n  }\n\n  package InstallationPosition {\n    class Position1;\n    class Position2;\n    class Position3;\n    // Add more positions as needed\n  }\n}\n```\n\nThis SysML v2 textual code represents a package named \"TireInformation\" that contains a class named \"Tire\" with attributes for manufacturer,",
    "\n```sysml\nblock SpacecraftTrajectorySampling {\n  parameter Integer referenceTimeZero in seconds\n  parameter Real liftoffTime in seconds\n  part TimePoint {\n    attribute Real time in seconds\n    part Position {\n      attribute Real x, y, z in meters\n    }\n    part Velocity {\n      attribute Real vx, vy, vz in meters per second\n    }\n  }\n  collection TimePoints : Set(TimePoint)\n}\n```",
    "\n```sysml\nblock AlloySystem {\n  part substance {\n    attribute atomicMass: Real;\n  }\n  part alloy {\n    attribute massFraction: Real;\n    part component: substance;\n  }\n  part material {\n    attribute tensileStrength: Real;\n  }\n  part metal: substance {\n    attribute commonName: String;\n  }\n  part alloyedMaterial: material {\n    part alloyComponent: alloy;\n  }\n}\n```",
    "\n```sysml\nblock MaterialDatabaseSystem {\n  block Material {\n    attribute atomicMass: Real;\n    attribute compositionalInformation: Map(String, Real);\n    block MechanicalProperties {\n      attribute tensileStrength: Real;\n      attribute units: String;\n    }\n  }\n  block Alloy extends Material {\n    attribute constituentMaterials: Map(String, Real);\n  }\n  operation searchMaterial(name: String): Material;\n  operation addMaterial(material: Material): Boolean;\n  operation updateMaterial(name: String, material: Material): Boolean;\n  operation deleteMaterial(name: String): Boolean;\n}\n\nblock Steel_980 extends Alloy {\n  attribute constituentMaterials: Map(\"iron\" -> 0.73, \"carbon\" -> 0.14, \"manganese\" -> 0.09);\n  block MechanicalProperties {\n    attribute tensileStrength: 980;\n    attribute units: \"MPa\";\n  }\n}\n```",
    "\n```sysml\nblock PublishSubscribeSystem\n  part server: Server\n  part publisher: Publisher\n  part subscriber: Subscriber\n  flow messageFlow\n    from publisher.publish\n    to server.receive\n    to server.distribute\n    to subscriber.receive\n  end\n  constraint topicManagement\n    publisher.publish.topic -> server.manageTopic\n    subscriber.subscribe.topic -> server.manageTopic\n  end\nend\n\nblock Server\n  operation receive(message: Message)\n  operation distribute(message: Message)\n  operation manageTopic(topic: Topic)\nend\n\nblock Publisher\n  operation publish(topic: Topic, message: Message)\nend\n\nblock Subscriber\n  operation subscribe(topic: Topic)\n  operation receive(message: Message)\nend\n\nclass Topic\n  attribute name: String\nend\n\nclass Message\n  attribute content: String\nend\n```",
    "\n```sysml\nblock FuelSystem {\n  part FuelTankAssembly {\n    flow in Fuel;\n    flow out ExhaustedFuel;\n    flow out TemperatureInfo;\n  }\n  part Engine {\n    flow in Fuel;\n    flow out ExhaustedFuel;\n    flow in TemperatureInfo;\n  }\n  connector FuelLines {\n    flow Fuel;\n    flow ExhaustedFuel;\n    flow TemperatureInfo;\n  }\n  constraint safety {\n    FuelTankAssembly.TemperatureInfo -> Engine.TemperatureInfo;\n  }\n  constraint efficiency {\n    FuelTankAssembly.ExhaustedFuel -> Engine.ExhaustedFuel;\n  }\n}\n```",
    "\n```sysml\nblock Server {\n  part topicSubscriptions: Dictionary<String, Set<Consumer>>;\n  part publishedMessages: Dictionary<String, Message>;\n\n  operation publish(producer: Producer, topic: String, message: Message) {\n    publishedMessages[topic] = message;\n    if (topicSubscriptions.containsKey(topic)) {\n      for (consumer in topicSubscriptions[topic]) {\n        consumer.receive(message);\n      }\n    }\n  }\n\n  operation subscribe(consumer: Consumer, topic: String) {\n    if (!topicSubscriptions.containsKey(topic)) {\n      topicSubscriptions[topic] = new Set<Consumer>();\n    }\n    topicSubscriptions[topic].add(consumer);\n  }\n}\n\nblock Producer {\n  operation publish(server: Server, topic: String, message: Message) {\n    server.publish(this, topic, message);\n  }\n}\n\nblock Consumer {\n  operation subscribe(server: Server, topic: String) {\n    server.subscribe(",
    "\n```sysml\nblock TransportationSystem {\n  part User {\n    flow inout Boarding;\n    flow inout Alighting;\n  }\n  part Driver {\n    flow inout Operate;\n  }\n  part Vehicle {\n    flow inout Refuel;\n    flow inout FuelLevel;\n  }\n  part Environment {\n    flow inout Consider;\n  }\n  constraint refueling {\n    if (FuelLevel < 0.1 * maxTankCapacity) then (Refuel)\n  }\n  constraint safeExit {\n    if (Alighting) then (not Operate)\n  }\n  constraint smoothBoarding {\n    if (Boarding) then (not Alighting)\n  }\n  constraint efficientTravel {\n    if (Operate) then (Boarding and Alighting and Refuel and Consider)\n  }\n}\n```",
    "\n```sysml\nblock FuelSupplyAndReturnManagement {\n  block FuelTankAssembly {\n    port fuelOutlet {\n      type FuelFlow;\n      attribute fuelTemperature: Real;\n    }\n    port fuelReturn {\n      type FuelFlow;\n      attribute fuelTemperature: Real;\n    }\n  }\n  block EngineUnit {\n    port fuelInlet {\n      type FuelFlow;\n      attribute fuelTemperature: Real;\n    }\n    port fuelOutlet {\n      type FuelFlow;\n      attribute fuelTemperature: Real;\n    }\n  }\n  connection EngineUnit.fuelInlet -> FuelTankAssembly.fuelOutlet;\n  connection EngineUnit.fuelOutlet -> FuelTankAssembly.fuelReturn;\n}\n```",
    "\n```sysml\nblock FuelSystem {\n  part FuelTankAssembly {\n    flowPort supplyPort;\n    flowPort returnPort;\n    property currentTemperature: Real;\n  }\n  part Engine {\n    flowPort supplyPort;\n    flowPort returnPort;\n    property currentTemperature: Real;\n  }\n  constraint reliableFuelFlow {\n    FuelTankAssembly.supplyPort -> Engine.supplyPort;\n    Engine.returnPort -> FuelTankAssembly.returnPort;\n  }\n  constraint monitorTemperature {\n    FuelTankAssembly.currentTemperature' = temperatureSensor.output;\n    Engine.currentTemperature' = temperatureSensor.output;\n  }\n  part temperatureSensor {\n    flowPort supplyPort;\n    property output: Real;\n  }\n}\n```",
    "\n```sysml\nblock PhotoCaptureSystem {\n  part sceneSelector: SceneSelector;\n  part autoFocus: AutoFocus;\n  part photoCapture: PhotoCapture;\n  part imageProcessor: ImageProcessor;\n\n  flow selectScene {\n    sceneSelector.out -> autoFocus.in;\n  }\n\n  flow autoFocusScene {\n    autoFocus.out -> imageProcessor.in;\n  }\n\n  flow capturePhoto {\n    imageProcessor.out -> photoCapture.in;\n  }\n\n  flow outputPhoto {\n    photoCapture.out -> user;\n  }\n}\n\nblock SceneSelector {\n  out: out;\n}\n\nblock AutoFocus {\n  in: in;\n  out: out;\n}\n\nblock PhotoCapture {\n  in: in;\n  out: out;\n}\n\nblock ImageProcessor {\n  in: in;\n  out: out;\n}\n```",
    "\n```sysml\nblock PhotographyWorkflow\n  part Focusing\n  part Shooting\n  flow\n    Focusing -> Shooting\n  end flow\nend PhotographyWorkflow\n```",
    "\n```sysml\nblock PhotoWorkflow\n  part FocusProcess\n  part ShootProcess\n  flow\n    FocusProcess.out -> ShootProcess.in\n  end flow\nend block\n\nblock FocusProcess\n  operation focus(scene: Scene) : Image\n  end operation\nend block\n\nblock ShootProcess\n  operation shoot(image: Image) : Photograph\n  end operation\nend block\n\ndatatype Scene\n  attribute location: String\n  attribute objects: Set(Object)\nend datatype\n\ndatatype Image\n  attribute pixels: Matrix(Integer)\n  attribute dimensions: Pair(Integer, Integer)\nend datatype\n\ndatatype Photograph\n  attribute file: File\n  attribute metadata: Metadata\nend datatype\n\ndatatype Object\n  attribute type: String\n  attribute position: Point\nend datatype\n\ndatatype Point\n  attribute x: Integer\n  attribute y: Integer\nend datatype\n\ndatatype Metadata\n  attribute camera: String\n  attribute exposure: Real\n  attribute date: Date\nend datatype\n\ndatatype File\n  attribute name: String\n",
    "\n```sysml\nblock PhotographyAutomation {\n  block FocusProcessing {\n    in port scene\n    out port suitableImage\n  }\n  block ShootingOperation {\n    in port image\n    out port photograph\n  }\n  block Integration {\n    in port scene\n    out port photograph\n  }\n  connect(FocusProcessing.suitableImage, ShootingOperation.image)\n  connect(FocusProcessing.scene, Integration.scene)\n  connect(ShootingOperation.photograph, Integration.photograph)\n}\n```",
    "\n```sysml\nblock PhotographyWorkflow\n  part Focus\n  part Scene\n  part Image\n  part Shoot\n  part Picture\n\n  flow\n    Focus(Scene) to Image\n    Shoot(Image) to Picture\n  end flow\nend block\n```",
    "\n```sysml\nblock PhotographyWorkflow\n  part Focus\n  part Shoot\n  flow\n    Focus->Shoot\n  end\nend\n```",
    "\n```sysml\nblock FocusManagement {\n  part sceneSelector: SceneSelector;\n  part focusAlgorithm: FocusAlgorithm;\n  part imageEvaluator: ImageEvaluator;\n  part shootingOperation: ShootingOperation;\n  part photographConverter: PhotographConverter;\n\n  flow {\n    sceneSelector.out -> focusAlgorithm.in;\n    focusAlgorithm.out -> imageEvaluator.in;\n    imageEvaluator.out -> shootingOperation.in;\n    shootingOperation.out -> photographConverter.in;\n    photographConverter.out -> \"photoOutput\";\n  }\n}\n\nblock SceneSelector {\n  out: out;\n}\n\nblock FocusAlgorithm {\n  in: in;\n  out: out;\n}\n\nblock ImageEvaluator {\n  in: in;\n  out: out;\n}\n\nblock ShootingOperation {\n  in: in;\n  out: out;\n}\n\nblock PhotographConverter {\n  in: in;\n  out: out;\n}\n```",
    "\n```sysml\nblock PhotographyWorkflow\n  part FocusFunction\n  part ShootingFunction\n  part DisplayFunction\n\n  FocusFunction.out -> ShootingFunction.in\n  ShootingFunction.out -> DisplayFunction.in\n\n  event TakePhoto\n  TakePhoto -> FocusFunction\nend PhotographyWorkflow\n```",
    "\n```sysml\nblock VehicleBrakeControlSystem {\n  part BrakePedalMonitor {\n    flow Real brakePressure;\n  }\n  part TractionMonitor {\n    flow Real roadAdhesion;\n  }\n  part BrakeControl {\n    flow Real adjustedBrakePressure;\n    flow Real modulationFrequency;\n  }\n  constraint init {\n    brakePressure = 0;\n    roadAdhesion = 0;\n    adjustedBrakePressure = 0;\n    modulationFrequency = 0;\n  }\n  constraint monitor {\n    brakePressure' = ...; // Monitor brake pedal pressure\n    roadAdhesion' = ...; // Monitor road adhesion\n    adjustedBrakePressure' = ...; // Adjust brake pressure based on brakePressure and roadAdhesion\n    modulationFrequency' = ...; // Adjust modulation frequency based on adjustedBrakePressure and roadAdhesion\n  }\n}\n```\n\nThis SysML v2 model represents the Vehicle",
    "\n```sysml\nblock BatteryChargingControlSystem\n  part battery: Battery\n  part charger: Charger\n  part monitor: Monitor\n\n  flow supplyCharge {\n    from charger.charge\n    to battery.charge\n  }\n\n  flow monitorBattery {\n    from monitor.level\n    to charger.level\n  }\n\n  constraint charger.level >= 100 then charger.charge = 0\nend BatteryChargingControlSystem\n\nblock Battery\n  part charge\n  part level\nend Battery\n\nblock Charger\n  part charge\n  part level\n  operation charge\nend Charger\n\nblock Monitor\n  part level\n  operation monitor\nend Monitor\n```",
    "\n```sysml\nblock ChargingSystem\n  part battery: Battery\n  part charger: Charger\n  part monitor: Monitor\n\n  flow flow1 {\n    from monitor.batteryLevel\n    to charger.charge\n    condition batteryLevel < 100%\n  }\n\n  flow flow2 {\n    from charger.charge\n    to monitor.batteryLevel\n  }\n\n  flow flow3 {\n    from monitor.batteryLevel\n    to charger.stop\n    condition batteryLevel >= 100%\n  }\nend ChargingSystem\n\nblock Battery\n  attribute batteryLevel: Integer\nend Battery\n\nblock Charger\n  operation charge\n  operation stop\nend Charger\n\nblock Monitor\n  operation getBatteryLevel: Integer\n  attribute batteryLevel: Integer\nend Monitor\n```",
    "\n```sysml\nblock CameraFunction {\n  part autofocusSubsystem : AutofocusSubsystem;\n  part imagingSubsystem : ImagingSubsystem;\n  part recordingSystem : RecordingSystem;\n\n  flow {\n    autofocusSubsystem.scene -> autofocusSubsystem.focus;\n    autofocusSubsystem.focus -> imagingSubsystem.focus;\n    imagingSubsystem.image -> recordingSystem.record;\n  }\n}\n\nblock AutofocusSubsystem {\n  in port scene;\n  out port focus;\n}\n\nblock ImagingSubsystem {\n  in port focus;\n  out port image;\n}\n\nblock RecordingSystem {\n  in port record;\n}\n```",
    "\n```sysml\nblock DigitalCamera {\n  part Viewfinder {\n    operation findScene()\n  }\n  part Focus {\n    operation autoFocus()\n  }\n  part Imaging {\n    operation captureImage()\n  }\n  operation shoot()\n}\n```",
    "\n```sysml\nblock VehicleSimulation\n  parameter mass: Real;\n  parameter initialPosition: Real;\n  parameter initialVelocity: Real;\n  parameter timeInterval: Real;\n  parameter powerInput: Real[*];\n  output position: Real[*];\n\n  operation calculateSpeed(power: Real): Real;\n    // Calculate speed based on power input\n  endcalculateSpeed;\n\n  operation calculatePosition(speed: Real, time: Real): Real;\n    // Calculate position based on speed and time\n  endcalculatePosition;\n\n  algorithm\n    position = [];\n    speed = calculateSpeed(powerInput[1]);\n    position = append(position, calculatePosition(speed, timeInterval));\n    for i in 2..len(powerInput) loop\n      speed = calculateSpeed(powerInput[i]);\n      position = append(position, calculatePosition(speed, timeInterval));\n    end for;\n  endalgorithm;\nend VehicleSimulation;\n```",
    "\n```sysml\nblock CameraSystem {\n  part FocusingProcess {\n    in scene: Scene\n    out image: Image\n  }\n  part Capture {\n    in image: Image\n    out photo: Photo\n  }\n  part Display {\n    in photo: Photo\n    out result: Result\n  }\n  constraint integration {\n    FocusingProcess.image -> Capture.image\n    Capture.photo -> Display.photo\n  }\n}\n```",
    "\n```sysml\nblock CameraInformationProcessingWorkflow\n  part viewPort: ViewPort\n  part focus: Focus\n  part capture: Capture\n  part displayPort: DisplayPort\n  part image: Image\n  part picture: Picture\n\n  flow selectScene {\n    viewPort -> focus\n  }\n\n  flow focusScene {\n    focus -> capture\n  }\n\n  flow captureImage {\n    capture -> picture\n  }\n\n  flow displayPicture {\n    picture -> displayPort\n  }\nend CameraInformationProcessingWorkflow\n\nblock ViewPort\n  ( *\n    name: \"ViewPort\"\n    type: \"Block\"\n  )\nend ViewPort\n\nblock Focus\n  ( *\n    name: \"Focus\"\n    type: \"Block\"\n  )\nend Focus\n\nblock Capture\n  ( *\n    name: \"Capture\"\n    type: \"Block\"\n  )\nend Capture\n\nblock DisplayPort\n  ( *\n    name: \"DisplayPort\"\n    type: \"Block\"\n  )\nend DisplayPort\n\nblock Image\n  ( *\n",
    "\n```sysml\nblock SensorManagementSystem\n  part sensor: Sensor\n  part updater: Updater\n  flow f1: SensorStatusReady\n  flow f2: SensorUpdate\n  flow f3: SensorTraversal\n  f1.src = sensor\n  f1.tgt = updater\n  f2.src = updater\n  f2.tgt = sensor\n  f3.src = sensor\n  f3.tgt = sensor\nend SensorManagementSystem\n\nblock Sensor\n  attribute status: SensorStatus\n  attribute id: String\n  operation update: SensorUpdate\n  operation checkStatus: SensorStatusReady\n  operation traverse: SensorTraversal\nend Sensor\n\nblock Updater\n  operation updateSensor: SensorUpdate\n  operation manageSensor: SensorManagement\nend Updater\n\nenumeration SensorStatus\n  ready\n  notReady\nend SensorStatus\n\nsignal SensorStatusReady\nsignal SensorUpdate\nsignal SensorTraversal\n\nsignal SensorManagement\n```",
    "\n```sysml\nblock VehicleStateMachine\n  part state: State\n  part off: State\n  part starting: State\n  part on: State\n  part vehicleStartSignal: Signal\n  part vehiclePowerOnSignal: Signal\n  part vehicleShutdownSignal: Signal\n\n  flow off->starting {\n    trigger vehicleStartSignal\n  }\n  flow starting->on {\n    trigger vehiclePowerOnSignal\n  }\n  flow on->off {\n    trigger vehicleShutdownSignal\n  }\nend VehicleStateMachine\n```",
    "\n```sysml\nblock VehicleStateManagement {\n  part state: VehicleState;\n  flow VehicleStartSignal;\n  flow VehicleOnSignal;\n  flow VehicleOffSignal;\n\n  transition from state.off to state.starting on VehicleStartSignal;\n  transition from state.starting to state.on on VehicleOnSignal;\n  transition from state.on to state.off on VehicleOffSignal;\n}\n\nblock VehicleState {\n  enum off {\n    on entry: setState(\"off\");\n  }\n  enum starting {\n    on entry: setState(\"starting\");\n  }\n  enum on {\n    on entry: setState(\"on\");\n  }\n  operation setState(state: string);\n}\n```",
    "\n```sysml\nblock VehiclePowerManagement {\n  part powerStatus: enumeration { off, startPhase, poweredOn }\n  part controlSignal: enumeration { startCommand, startedSignal, shutdownCommand }\n\n  flow {\n    powerStatus -> startPhase : on startCommand\n    powerStatus -> poweredOn : on startedSignal\n    powerStatus -> off : on shutdownCommand\n  }\n\n  operation selfDiagnosis()\n  operation supplyPower()\n  operation safetyOperations()\n\n  flow {\n    poweredOn -> selfDiagnosis\n    poweredOn -> supplyPower\n  }\n\n  flow {\n    powerStatus -> safetyOperations : on shutdownCommand\n  }\n}\n```",
    "\n```sysml\nblock VehicleControlSystem\n  part Vehicle\n    flow flow1: startSignal\n    flow flow2: startedSignal\n    flow flow3: shutdownSignal\n    flow flow4: vehicleStatus\n  part StateMachine\n    state shutdown\n    state startUp\n    state running\n    transition t1: shutdown->startUp : startSignal\n    transition t2: startUp->running : startedSignal\n    transition t3: running->shutdown : shutdownSignal\n  end StateMachine\nend VehicleControlSystem\n```",
    "\n```sysml\nblock VehiclePowerManagementSystem {\n  part OffState: State;\n  part StartState: State;\n  part OnState: State;\n\n  flow OffToStart {\n    from OffState;\n    to StartState;\n  }\n\n  flow StartToOn {\n    from StartState;\n    to OnState;\n  }\n\n  flow OnToOff {\n    from OnState;\n    to OffState;\n  }\n\n  block HealthStateManagement {\n    part Healthy: State;\n    part Unhealthy: State;\n\n    flow HealthyToUnhealthy {\n      from Healthy;\n      to Unhealthy;\n    }\n\n    flow UnhealthyToHealthy {\n      from Unhealthy;\n      to Healthy;\n    }\n  }\n}\n```",
    "\n```sysml\nblock VehicleHealthManagement {\n  part temperatureSensor {\n    type: Sensor\n    in: temperature: Real\n  }\n  part maxTemperature {\n    type: Constant\n    in: value: Real\n  }\n  part healthStatus {\n    type: Variable\n    in: status: String\n  }\n  part overTempWarning {\n    type: Alarm\n    in: warning: Boolean\n  }\n  part maintenanceSchedule {\n    type: Schedule\n    in: maintenanceTime: Time\n  }\n  part maintenanceDuration {\n    type: Constant\n    in: value: Time\n  }\n  part maintenanceStatus {\n    type: Variable\n    in: status: String\n  }\n  flow {\n    temperatureSensor.temperature -> maxTemperature.value\n    temperatureSensor.temperature > maxTemperature.value -> overTempWarning.warning\n    overTempWarning.warning -> healthStatus.status\n    maintenanceSchedule.maintenanceTime -> maintenanceStatus.status\n    maintenanceSchedule.maintenanceTime + maintenanceDuration.value -> maintenanceSchedule.",
    "\n```sysml\nblock Server {\n  part localClock : Clock;\n  port requestPort : Request;\n\n  state off {\n    on entry {\n      localClock.stop();\n    }\n    transition start() : off -> waiting;\n  }\n\n  state waiting {\n    on entry {\n      localClock.start();\n    }\n    transition request() : waiting -> response;\n  }\n\n  state response {\n    on entry {\n      localClock.wait(5 minutes);\n    }\n    transition localClock.timeout() : response -> waiting;\n  }\n\n  on localClock.time(11:59:00) {\n    transition to off;\n  }\n}\n\nblock Clock {\n  flow start();\n  flow stop();\n  flow wait(duration : Time);\n  event timeout();\n  event time(t : Time);\n}\n\nblock Request {\n  flow start();\n  flow request();\n}\n```",
    "\n```sysml\nblock VehicleStartStopSystem {\n  part Vehicle {\n    block OffState {\n      flow startSignal => StartProcess;\n    }\n    block StartProcess {\n      flow powerOnSignal => OperatingState;\n      flow brakePedalDepressed => powerOnSignal;\n    }\n    block OperatingState {\n      flow selfCheck => SupplyPower;\n      flow startSignal => SupplyPower;\n      flow SupplyPower => OperatingState;\n    }\n    block OffState {\n      flow stopSignal => OffState;\n      flow stopSignal => ApplyParkingBrake;\n    }\n  }\n  part Controller {\n    flow startSignal => startSignal;\n    flow powerOnSignal => powerOnSignal;\n  }\n  part SafetyCoordination {\n    flow startSignal => Controller.startSignal;\n    flow powerOnSignal => Controller.powerOnSignal;\n    flow stopSignal => Vehicle.stopSignal;\n    flow brakePedalDepressed => Vehicle.StartProcess",
    "\n```sysml\nblock VehicleControlSystem {\n  part VehicleController {\n    flow startSignal;\n    flow vehicleOnSignal;\n    flow startControlSignal;\n    flow shutdownSignal;\n    flow parkingBrakeSignal;\n  }\n  part VehicleStatus {\n    flow state;\n    flow selfCheck;\n    flow powerSupply;\n  }\n  part SafetyMeasures {\n    flow brakePedalDepressed;\n    flow applyParkingBrake;\n  }\n  constraint do {\n    state = off;\n    startSignal -> state = start-up;\n    state = start-up & vehicleOnSignal & brakePedalDepressed -> startControlSignal;\n    state = started & selfCheck & powerSupply;\n    shutdownSignal -> state = off;\n    state = off & parkingBrakeSignal -> applyParkingBrake;\n  }\n}\n```",
    "\n```sysml\nblock CruiseControlSystem {\n  part Driver {\n    event setDesiredSpeed(speed: real)\n  }\n  part CruiseController {\n    event receiveSetSpeedCommand(speed: real)\n    event receiveActualSpeed(speed: real)\n    event sendFuelControlCommand(command: real)\n  }\n  part Speedometer {\n    event receiveActualSpeedRequest()\n    event sendActualSpeed(speed: real)\n  }\n  part Engine {\n    event receiveFuelControlCommand(command: real)\n  }\n  part Vehicle {\n    event receiveSetSpeedCommand(speed: real)\n  }\n  event speedRequest(requester: block)\n  event speedResponse(speed: real)\n  event fuelControlCommand(command: real)\n}\n```",
    "\n```sysml\nblock CruiseControlSystem\n  part speedometer\n  part cruiseController\n  part engineSystem\n\n  flow\n    operation setSpeed(in speed: real)\n    operation getSpeed -> speedometer.speed\n    operation controlThrottle(in speedDifference: real)\n    operation sendCommand(in command: real) -> engineSystem.throttle\n  end flow\n\n  constraint speedDifference = speedometer.speed - getSpeed\n  constraint throttleCommand = controlThrottle(speedDifference)\n  constraint sendThrottleCommand = sendCommand(throttleCommand)\nend block\n```",
    "\n```sysml\nblock CruiseControlSystem {\n  part driver {\n    in message setSpeed\n  }\n  part cruiseController {\n    in message currentSpeed\n    out message throttleControl\n  }\n  part speedometer {\n    out message currentSpeed\n  }\n  part engine {\n    in message throttleControl\n  }\n  connect driver.setSpeed -> cruiseController.currentSpeed\n  connect speedometer.currentSpeed -> cruiseController.currentSpeed\n  connect cruiseController.throttleControl -> engine.throttleControl\n}\n```",
    "\n```\nblock CruiseControlSystem\n  part speedometer\n  part cruiseController\n  part engine\n\n  flow\n    driver -> speedometer : get_speed\n    driver -> cruiseController : set_desired_speed\n    speedometer -> cruiseController : report_current_speed\n    cruiseController -> engine : control_throttle\n  end\nend\n```",
    "\n```sysml\nblock AutomotiveCruiseControlSystem {\n  part cruiseControlInterface\n  part speedSensor\n  part cruiseController\n  part engine\n\n  flow {\n    cruiseControlInterface -> speedSensor : setSpeed\n    speedSensor -> cruiseController : actualSpeed\n    cruiseController -> engine : fuelControl\n  }\n}\n```",
    "\n```sysml\nblock Vehicle {\n  block CruiseController {\n    part speedSensor: SpeedSensor;\n    part engineController: EngineController;\n    flow setSpeedCommand {\n      in setSpeed: Real;\n      in actualSpeed: Real;\n      out fuelControlCommand: Real;\n    }\n    flow speedSensorReading {\n      in actualSpeed: Real;\n    }\n    flow fuelControlCommand {\n      in fuelControlCommand: Real;\n    }\n  }\n  block EngineController {\n    part engine: Engine;\n    flow fuelControlCommand {\n      in fuelControlCommand: Real;\n    }\n    flow engineControl {\n      in engineControlCommand: Real;\n    }\n  }\n  block Engine {\n    flow fuelFlowControl {\n      in fuelControlCommand: Real;\n    }\n  }\n}\n```",
    "\n```sysml\nblock VehicleLifecycle {\n  block Assembly {\n    operation deliver(date: Date)\n  }\n  block Delivery {\n    attribute deliveryDate: Date\n    operation recordOwner(ownerInfo: OwnerInfo)\n    operation recordDriver(driverInfo: DriverInfo)\n  }\n  block Ownership {\n    attribute ownerInfo: OwnerInfo\n    operation transfer(newOwnerInfo: OwnerInfo)\n  }\n  block Driving {\n    attribute driverInfo: DriverInfo\n    operation recordDrive(driveInfo: DriveInfo)\n  }\n  block EndOfUse {\n    operation scrap(scrappingInfo: ScrappingInfo)\n  }\n  operation getDeliveryDate(): Date\n  operation getOwnerInfo(): OwnerInfo\n  operation getDriverInfo(): DriverInfo\n  operation getDriveInfo(): DriveInfo\n  operation getScrappingInfo(): ScrappingInfo\n}\n```",
    "\n```sysml\npackage Vehicle {\n  block Vehicle {\n    part engine: Engine;\n    part driver: Driver;\n    part wheels: Wheel;\n    attribute mass: Real;\n    attribute operationalStatus: OperationalStatus;\n  }\n\n  block Driver {\n    attribute name: String;\n  }\n\n  block Wheel {\n    attribute position: Real;\n  }\n\n  block OperationalStatus {\n    attribute gear: Integer;\n    attribute acceleratorPedalPosition: Real;\n  }\n\n  instance vehicle_1: Vehicle {\n    engine = Engine();\n    driver = Driver();\n    wheels = Wheel();\n    mass = 1500;\n    operationalStatus = OperationalStatus();\n  }\n}\n```",
    "\n```sysml\nblock Vehicle {\n  attribute real mass;\n  attribute Gear gear;\n  attribute real acceleratorPosition;\n\n  block Gear {\n    attribute integer value;\n  }\n\n  flow flow1 {\n    from Vehicle_1.gear.value to Vehicle_1.gear.value;\n    from Vehicle_1.acceleratorPosition to Vehicle_1.acceleratorPosition;\n  }\n\n  flow flow2 {\n    from Vehicle_1.mass to Vehicle_1.mass;\n  }\n}\n\nblock Vehicle_1 extends Vehicle {\n  flow1.gear.value = 0;\n  flow1.acceleratorPosition = 0.0;\n  flow2.mass = 2000;\n\n  flow1.gear.value = 2;\n  flow1.acceleratorPosition = 0.5;\n  flow2.mass = 1500;\n}\n```",
    "\n```sysml\nblock Vehicle {\n  part engine;\n  attribute mass : Real;\n  attribute gear : GearType;\n  attribute throttle : Real;\n  attribute driver : DriverType;\n\n  enum GearType { neutral, first, second, third, fourth, fifth };\n  enum DriverType { Alice, Bob };\n\n  flow initial {\n    mass = 2000;\n    gear = neutral;\n    throttle = 0;\n    driver = Alice;\n  };\n\n  flow timeSlice1 {\n    mass = 1500;\n    gear = second;\n    throttle = 0.5;\n    driver = Bob;\n  };\n}\n```",
    "\n```sysml\nblock Vehicle {\n  part body: Component;\n  part engine: CoreComponent;\n  part transmission: CoreComponent;\n  part otherComponents: Component;\n\n  constraint totalMass {\n    self.mass = body.mass + engine.mass + transmission.mass + otherComponents.mass;\n  }\n}\n\nblock Component {\n  attribute mass: Real;\n}\n\nblock CoreComponent extends Component {\n  attribute specification: String;\n}\n```",
    "\n```sysml\nblock Vehicle {\n  part: Component\n  mass: Real\n  vin: String\n}\n\nblock Component {\n  mass: Real\n  serialNumber: String\n  subcomponents: Component[*]\n}\n\noperation calculateTotalMass(vehicle: Vehicle): Real {\n  var totalMass: Real = vehicle.mass\n  for each component in vehicle.part do {\n    totalMass = totalMass + calculateTotalMass(component)\n  }\n  return totalMass\n}\n\noperation filterSubcomponentsByMass(component: Component, threshold: Real): Component {\n  var filteredComponent: Component = create Component()\n  filteredComponent.mass = component.mass\n  filteredComponent.serialNumber = component.serialNumber\n  for each subcomponent in component.subcomponents do {\n    if subcomponent.mass >= threshold then {\n      add filteredComponent.subcomponents to filterSubcomponentsByMass(subcomponent, threshold)\n    }\n  }\n  return filteredComponent\n}\n```",
    "\n```sysml\nblock SimpleThing {\n  part simpleMass: Real;\n  part totalMass: Real;\n  constraint c1 {\n    totalMass = simpleMass;\n  }\n}\n\nblock CompositeThing {\n  part simpleMass: Real;\n  part totalMass: Real;\n  part subcomponents: Set(Object);\n  constraint c2 {\n    totalMass = simpleMass + sum(subcomponents, totalMass);\n  }\n}\n\nblock Object {\n  part simpleMass: Real;\n  part totalMass: Real;\n}\n\nderive SimpleThing from Object {\n  constraint c3 {\n    simpleMass = totalMass;\n  }\n}\n\nderive CompositeThing from Object {\n  part subcomponents: Set(Object);\n}\n```",
    "\n```sysml\nblock ObjectMassManagementSystem {\n  part object: Object\n  part subcomponent: Subcomponent\n  part massCalculation: MassCalculation\n  part massFiltering: MassFiltering\n  part massAggregation: MassAggregation\n\n  constraint massCalculation.input = object\n  constraint massCalculation.output = massAggregation.input\n  constraint massFiltering.input = subcomponent\n  constraint massFiltering.output = massAggregation.input\n  constraint massAggregation.output = totalMass\n\n  block Object {\n    attribute basicMass: Real\n    part subcomponents: Set(Subcomponent)\n  }\n\n  block Subcomponent {\n    attribute mass: Real\n  }\n\n  block MassCalculation {\n    operation calculateTotalMass(object: Object): Real\n  }\n\n  block MassFiltering {\n    operation filterSubcomponents(subcomponents: Set(Subcomponent), minMass: Real): Set(Subcomponent)\n  }\n\n  block MassAggregation {\n    operation aggregateMass(inputs: Set(Subcomponent)): Real\n  }",
    "\n```sysml\nblock VehicleDynamics\n  parameter Real wheelPower;\n  parameter Real aerodynamicDragCoefficient;\n  parameter Real frictionCoefficient;\n  parameter Real vehicleMass;\n  parameter Real speed;\n  parameter Real time;\n\n  output Real powerOutput;\n  output Real acceleration;\n  output Real finalSpeed;\n  output Real displacement;\n\n  algorithm\n    powerOutput = wheelPower - aerodynamicDragCoefficient * speed^2 - frictionCoefficient * speed;\n    acceleration = powerOutput / vehicleMass;\n    finalSpeed = speed + acceleration * time;\n    displacement = speed * time + 0.5 * acceleration * time^2;\nend VehicleDynamics;\n```\n\nThis SysML v2 block diagram represents the Vehicle Dynamics system. It takes in parameters such as wheelPower, aerodynamicDragCoefficient, frictionCoefficient, vehicleMass, speed, and time. It outputs powerOutput, acceleration, finalSpeed, and displacement. The algorithm section contains the equations for calculating these outputs. The powerOutput calculation considers",
    "\n```sysml\nblock VehicleDynamicModel\n  parameter Real initialSpeed;\n  parameter Real initialPosition;\n  parameter Real timeStep;\n  parameter Real aerodynamicDragCoefficient;\n  parameter Real rollingResistanceCoefficient;\n  parameter Real wheelEndOutputPower;\n  parameter Real totalVehicleMass;\n  \n  output Real acceleration;\n  output Real speed;\n  output Real position;\n  \n  algorithm\n    availableDrivingPower := wheelEndOutputPower - aerodynamicDragCoefficient * speed^2 - rollingResistanceCoefficient * totalVehicleMass * 9.81;\n    acceleration := availableDrivingPower / totalVehicleMass;\n    speed := initialSpeed + acceleration * timeStep;\n    position := initialPosition + speed * timeStep + 0.5 * acceleration * timeStep^2;\n  end algorithm;\nend VehicleDynamicModel;\n```",
    "\n```sysml\nblock VehicleDynamics\n  parameter Real vehicleMass;\n  parameter Real wheelPower;\n  parameter Real aerodynamicDragCoefficient;\n  parameter Real rollingResistanceCoefficient;\n  parameter Real initialSpeed;\n  parameter Real initialPosition;\n  output Real speed;\n  output Real position;\n\n  operation calculateDynamics()\n    : (speed, position) = calculateVehicleDynamics(vehicleMass, wheelPower, aerodynamicDragCoefficient, rollingResistanceCoefficient, initialSpeed, initialPosition);\n  endcalculateDynamics;\n\n  function (Real, Real) calculateVehicleDynamics(Real vehicleMass, Real wheelPower, Real aerodynamicDragCoefficient, Real rollingResistanceCoefficient, Real initialSpeed, Real initialPosition)\n    // Implement the vehicle dynamics calculation logic here\n  endcalculateVehicleDynamics;\nendVehicleDynamics;\n```\n\nThis SysML v2 model represents the described system. It defines the VehicleDynamics block with input parameters for vehicle mass",
    "\n```sysml\nblock VehicleDynamicSimulation\n  parameter:\n    initialPosition: Real;\n    initialVelocity: Real;\n    vehicleMass: Real;\n    wheelEndDrivePower: Real;\n    timeInterval: Real;\n    airResistanceCoefficient: Real;\n    frictionCoefficient: Real;\n  part:\n    acceleration: Real;\n    finalVelocity: Real;\n    finalPosition: Real;\n  constraint:\n    acceleration = (wheelEndDrivePower - (0.5 * airResistanceCoefficient * finalVelocity^2) - (frictionCoefficient * finalVelocity)) / vehicleMass;\n    finalVelocity = initialVelocity + acceleration * timeInterval;\n    finalPosition = initialPosition + initialVelocity * timeInterval + 0.5 * acceleration * timeInterval^2;\nend VehicleDynamicSimulation;\n```",
    "\n```sysml\nblock VehicleWeightManagement {\n  part chassis: MassParameter;\n  part engine: MassParameter;\n  part gearbox: MassParameter;\n\n  constraint totalMass {\n    chassis.mass + engine.mass + gearbox.mass <= 2500;\n  }\n\n  flow overweightWarning {\n    source chassis.mass + engine.mass + gearbox.mass > 2500;\n    target overweight;\n  }\n\n  event overweight;\n}\n\nblock MassParameter {\n  attribute mass: Real;\n}\n```",
    "\n```sysml\nblock VehicleMassBudget {\n  constraint massLimit {\n    self.totalMass <= 2500;\n  }\n  part chassis {\n    attribute mass;\n  }\n  part engine {\n    attribute mass;\n  }\n  part transmission {\n    attribute mass;\n  }\n  operation calculateTotalMass() {\n    self.totalMass = self.chassis.mass + self.engine.mass + self.transmission.mass;\n  }\n}\n```",
    "\n```sysml\nblock VehicleMassCompliance {\n  constraint c_totalMass {\n    self.totalMass = self.chassis.mass + self.engine.mass + self.transmission.mass;\n    self.totalMass <= 2500;\n  }\n  part chassis {\n    attribute mass : Real;\n  }\n  part engine {\n    attribute mass : Real;\n  }\n  part transmission {\n    attribute mass : Real;\n  }\n  attribute totalMass : Real;\n}\n```",
    "\n```sysml\nblock WeightManagementSystem {\n  part chassis: WeightComponent\n  part engine: WeightComponent\n  part transmission: WeightComponent\n  part totalWeight: WeightComponent\n\n  constraint weightLimit {\n    chassis.weight + engine.weight + transmission.weight <= 2500\n  }\n\n  flow {\n    chassis -> totalWeight\n    engine -> totalWeight\n    transmission -> totalWeight\n  }\n\n  constraint warning {\n    totalWeight.weight > 2500 => generateWarning\n  }\n\n  operation generateWarning() {\n    // Implement warning generation logic here\n  }\n}\n\nblock WeightComponent {\n  attribute weight: Real\n}\n```",
    "\n```sysml\nblock Vehicle {\n  part chassis: Mass { mass: 0..2500 }\n  part engine: Mass { mass: 0..2500 }\n  part transmission: Mass { mass: 0..2500 }\n  constraint totalMass {\n    chassis.mass + engine.mass + transmission.mass <= 2500\n  }\n  constraint dynamicBehavior {\n    force * time = 0.5 * mass * (finalVelocity^2 - initialVelocity^2)\n    mass > 0\n  }\n}\n\nblock Mass {\n  attribute mass: Real\n}\n```",
    "\n```sysml\nblock MaintenanceScheduler {\n  part Vehicle {\n    attribute time: Time\n    attribute interval: Interval\n    attribute maxTemp: Temperature\n    attribute status: Status\n  }\n\n  operation determineMaintenance() {\n    if (currentTime >= Vehicle.time) {\n      Vehicle.status = \"under maintenance\"\n    }\n  }\n\n  operation startMaintenance() {\n    if (Vehicle.status == \"under maintenance\" && previousHealthyState.endTime <= currentTime <= previousHealthyState.endTime + 2 seconds) {\n      Vehicle.status = \"maintenance in progress\"\n    }\n  }\n\n  operation completeMaintenance() {\n    if (Vehicle.status == \"maintenance in progress\" && maintenanceDuration <= 48 hours) {\n      Vehicle.status = \"healthy\"\n      Vehicle.time = Vehicle.time + Vehicle.interval\n    }\n  }\n}\n```",
    "\n```sysml\nblock Vehicle {\n  part FuelSystem {\n    flow Real FuelMass;\n    constraint FuelMass > 0;\n  }\n  part Engine {\n    flow Real Torque;\n    flow Real Speed;\n    operation generateTorque(Speed): Torque;\n  }\n  part Clutch {\n    flow Real EngineTorque;\n    flow Real TransmissionTorque;\n    operation transmitTorque(EngineTorque): TransmissionTorque;\n  }\n  part Transmission {\n    flow Real Power;\n  }\n  part DriveSystem {\n    flow Real Power;\n  }\n  constraint (FuelSystem.FuelMass + Vehicle.curbWeight) <= maxMassLimit;\n  binding Engine.Torque = Clutch.EngineTorque;\n  binding Clutch.TransmissionTorque = Transmission.Power;\n  binding Transmission.Power = DriveSystem.Power;\n}\n```",
    "\n```sysml\nblock Vehicle {\n  part FuelTank {\n    flowReal mass;\n    flowReal maxMass = 2000;\n    flowReal emptyMass = 1500;\n  }\n  part Powertrain {\n    flowReal torque;\n    flowReal speed;\n    flowReal speedTorqueCurve[1]; // Replace with actual speed-torque curve data\n    flowReal clutchInterface;\n  }\n  constraint emptyMass <= FuelTank.mass <= maxMass;\n  constraint Powertrain.torque = speedTorqueCurve[Powertrain.speed];\n  constraint Powertrain.clutchInterface >= Powertrain.torque;\n}\n```\n\nExplanation:\nThe output SysML model represents the vehicle system with two main parts: FuelTank and Powertrain. The FuelTank part has a mass flow that is constrained to be within the allowable limits of 1500 kg (emptyMass) and 2000 kg (maxMass). The Powertrain part has tor",
    "\n```sysml\nblock Vehicle {\n  part engine: Engine\n  constraint mass_requirement {\n    self.mass - engine.mass >= 1500\n    self.mass - engine.mass <= 2000\n  }\n}\n\nblock Engine {\n  attribute torque: Real\n  attribute speed: Real\n  operation calculateTorque() {\n    torque = calculateTorqueBasedOnSpeed(speed)\n  }\n  operation clutchInterface() {\n    // Interface for transmitting torque to the transmission system\n  }\n}\n\nfunction calculateTorqueBasedOnSpeed(speed: Real): Real {\n  // Implementation of the torque-speed performance table\n}\n```",
    "\n```sysml\nblock VehicleMassControl {\n  part fuelTank: FuelTank;\n  part vehicle: Vehicle;\n  part engine: Engine;\n  part gearbox: Gearbox;\n  part clutch: Clutch;\n\n  constraint mass_limit_full {\n    vehicle.mass + fuelTank.mass <= 2000;\n  }\n\n  constraint mass_limit_empty {\n    vehicle.mass + fuelTank.emptyMass <= 1500;\n  }\n\n  constraint torque_characteristics {\n    engine.torque = engine.torqueCharacteristics(gearbox.speed);\n  }\n\n  flow powerDelivery {\n    engine.torque' -> clutch.inputTorque;\n    clutch.outputTorque' -> gearbox.inputTorque;\n    gearbox.outputTorque' -> vehicle.power;\n  }\n}\n```",
    "\n```sysml\nblock VehiclePerformanceAnalyzer {\n  part input {\n    flow Real curbWeight;\n    flow Real payload;\n    flow Real wheelDiameter;\n    flow Real transmissionEfficiency;\n    flow Real fuelEconomyUrban;\n    flow Real fuelEconomyHighway;\n    flow String drivingCycle;\n  }\n  part output {\n    flow Real enginePower;\n    flow Real acceleration;\n    flow Real speed;\n    flow Real position;\n    flow Real fuelEconomy;\n  }\n  part complianceVerification {\n    flow Real energyConsumptionTarget;\n    flow Boolean complianceResult;\n  }\n  part configuration {\n    flow Real vehicleParameter;\n    flow Real driveCycleScenario;\n  }\n  part dynamicPerformanceCalculation {\n    operation calculateEnginePower() { ... }\n    operation calculateAcceleration() { ... }\n    operation calculateSpeed() { ... }\n    operation calculatePosition() { ... }\n    operation calculateFuelEconomy() { ... }\n  }\n  part complianceCheck {\n    operation check",
    "\n```sysml\nblock VehicleFuelEconomySimulation\n  part urbanDrivingScenario: DrivingScenario\n  part highwayDrivingScenario: DrivingScenario\n  part vehicleParameters: VehicleParameters\n  part drivingTrajectory: DrivingTrajectory\n  part speedVariation: SpeedVariation\n  part wheelPower: WheelPower\n  part vehicleDynamics: VehicleDynamics\n  part enginePowerDemand: EnginePowerDemand\n  part fuelConsumption: FuelConsumption\n  part fuelEconomy: FuelEconomy\n\n  constraint fuelEconomy.calculate = (fuelConsumption.value / 100) * 23.52\n  constraint fuelEconomy.verify = fuelEconomy.value > 30\n  constraint vehicleParameters.verify = vehicleParameters.curbWeight > 0 and vehicleParameters.load > 0 and vehicleParameters.wheelDiameter > 0 and vehicleParameters.transmissionEfficiency > 0\n  constraint speedVariation.verify = speedVariation.value",
    "\n```sysml\nblock EngineSelectionSystem {\n  part engineAnalysis {\n    block KPIs {\n      flow power;\n      flow mass;\n      flow efficiency;\n      flow cost;\n    }\n    operation calculateKPIs() {\n      // Calculate KPIs for each engine type\n    }\n  }\n  part evaluation {\n    flow unifiedEvaluationFunction;\n    operation evaluateEngines() {\n      // Apply unified evaluation function to all engines\n    }\n  }\n  part recommendation {\n    flow optimalEngine;\n    operation recommendEngine() {\n      // Recommend optimal engine based on evaluation results\n    }\n  }\n  operation process() {\n    // Execute engine analysis, evaluation, and recommendation\n  }\n}\n```",
    "\n```sysml\nblock VehicleQualityCheck {\n  part actualWeight: Real;\n  part processedWeight: Real;\n  part evaluationResult: String;\n\n  operation checkWeight() {\n    precondition actualWeight <= 2500;\n    postcondition processedWeight <= 2500;\n    postcondition evaluationResult = \"Qualified\" | \"Unqualified\";\n  }\n}\n```",
    "\n```sysml\nblock Vehicle {\n  part actualMass: Real\n}\n\nblock WeighingEquipment {\n  operation measureMass(vehicle: Vehicle): Real\n}\n\nblock MassVerificationUnit {\n  operation verifyMass(vehicle: Vehicle, weighingEquipment: WeighingEquipment): Boolean\n}\n\nblock VehicleInspectionSystem {\n  part vehicles: Set(Vehicle)\n  part weighingEquipment: WeighingEquipment\n  part massVerificationUnit: MassVerificationUnit\n\n  operation inspectVehicles() {\n    for vehicle in vehicles {\n      let actualMass = weighingEquipment.measureMass(vehicle) in\n      let isQualified = massVerificationUnit.verifyMass(vehicle, weighingEquipment) in\n      if isQualified then\n        // Vehicle is qualified\n      else\n        // Vehicle is unqualified\n      end if\n    }\n  }\n}\n```",
    "\n```sysml\nblock TransportationSystem {\n  part Driver;\n  part Passenger {\n    multiplicity(1..4);\n  }\n  part Environment;\n  part Infrastructure {\n    part GasStation;\n  }\n\n  constraint humanNeeds {\n    ensure rideExperience;\n    ensure convenience;\n    ensure dailyTransportationTasks;\n  }\n\n  constraint safety {\n    ensure passengerSafety;\n    ensure driverSafety;\n  }\n\n  constraint sustainability {\n    ensure environmentIntegration;\n  }\n\n  constraint compatibility {\n    ensure infrastructureCompatibility;\n  }\n}\n```",
    "\n```sysml\nblock TransportationSystem {\n  part Driver {\n    flow enter()\n    flow operate()\n  }\n  part Passenger {\n    flow enter()\n    flow exit()\n  }\n  part Vehicle {\n    flow refuel()\n  }\n  part GasStation {\n    flow refuel()\n  }\n  connector Environment {\n    flow influence()\n  }\n  constraint maxPassengers = 4\n  constraint primaryNeeds = \"convenience\"\n}\n```",
    "\n```sysml\nblock VehicleProductLine {\n  block Engine {\n    enum CylinderDiameter { small(70), large(100) }\n    enum CylinderCount { four(4), six(6) }\n    part cylinderDiameter: CylinderDiameter\n    part cylinderCount: CylinderCount\n  }\n  block Transmission {\n    enum Type { manual, automatic }\n    part type: Type\n  }\n  constraint engineTransmissionCombination {\n    self.Engine->Transmission.type = if self.Engine.cylinderCount = four then manual else automatic endif\n  }\n  part engine: Engine\n  part transmission: Transmission\n}\n```",
    "\n```sysml\nblock Engine\n  part Cylinder\n    attribute diameter: Integer\n  end Cylinder\n\n  part EngineVariant\n    attribute cylinderCount: Integer\n    attribute cylinderDiameter: Integer\n  end EngineVariant\n\n  part FourCylinderEngine\n    ref engineVariant: EngineVariant\n    part cylinder1: Cylinder\n    part cylinder2: Cylinder\n    part cylinder3: Cylinder\n    part cylinder4: Cylinder\n  end FourCylinderEngine\n\n  part SixCylinderEngine\n    ref engineVariant: EngineVariant\n    part cylinder1: Cylinder\n    part cylinder2: Cylinder\n    part cylinder3: Cylinder\n    part cylinder4: Cylinder\n    part cylinder5: Cylinder\n    part cylinder6: Cylinder\n  end SixCylinderEngine\nend Engine\n```",
    "\n```sysml\nblock AutomotiveConfigurationSpace {\n  block Engine {\n    attribute cylinderDiameter: Integer\n    attribute cylinderCount: Integer\n  }\n  block Transmission {\n    attribute type: String\n  }\n  block Vehicle {\n    part engine: Engine\n    part transmission: Transmission\n    constraint engine.cylinderDiameter in {70, 100}\n    constraint engine.cylinderCount in {4, 6}\n    constraint transmission.type in {\"manual\", \"automatic\"}\n    constraint if engine.cylinderCount = 4 then transmission.type = \"manual\"\n    constraint if engine.cylinderCount = 6 then transmission.type = \"automatic\"\n  }\n}\n```",
    "\n```sysml\nblock SystemAssembly\n  block ComputerSubsystem\n    part SoftwareDesign\n      property messageFormat\n      property dataFormat\n    end\n    part Functions\n      property utilizeFunctions\n      property integrateFunctions\n    end\n  end\n  block StorageSubsystem\n    part MessageFormatCompatibility\n      property messageFormat\n    end\n    part DataFormatCompatibility\n      property dataFormat\n    end\n  end\n  constraint seamlessOperation\n    SoftwareDesign.messageFormat = Functions.utilizeFunctions\n    SoftwareDesign.messageFormat = StorageSubsystem.MessageFormatCompatibility.messageFormat\n    SoftwareDesign.dataFormat = StorageSubsystem.DataFormatCompatibility.dataFormat\n  end\nend\n```",
    "\n```sysml\nblock powertrainSystem {\n  block logicalLayer {\n    block torqueGenerator {\n      operation convertPowerToTorque()\n    }\n  }\n  block physicalLayer {\n    block powerUnit {\n      operation outputPower()\n      operation generateTorque()\n    }\n  }\n  constraint map {\n    logicalLayer.torqueGenerator.convertPowerToTorque -> physicalLayer.powerUnit.generateTorque\n  }\n}\n```",
    "\n```sysml\nblock PowerTransmissionSystem {\n  part TorqueGenerator {\n    operation generateTorque()\n  }\n  part Powertrain {\n    part Engine {\n      operation generateTorque()\n    }\n  }\n  constraint allocation {\n    TorqueGenerator.generateTorque -> Powertrain.Engine.generateTorque\n  }\n}\n```",
    "\n```sysml\nblock VehicleFeatureAnnotationSystem\n  part Interior\n    block SeatBelt\n    block FrontSeats\n    block DriverAirbag\n    block AlarmSystem\n  end Interior\n\n  part BodyAssembly\n    block BodyShell\n    block Bumpers\n    block KeylessEntryDevice\n  end BodyAssembly\n\n  constraint\n    SeatBelt.safetyFunction = \"Safety\"\n    FrontSeats.safetyFunction = \"Safety\"\n    DriverAirbag.safetyFunction = \"Safety\"\n    AlarmSystem.safetyFunction = \"Security\"\n    BodyShell.safetyFunction = \"Safety\"\n    Bumpers.safetyFunction = \"Safety\"\n    KeylessEntryDevice.safetyFunction = \"Security\"\n  end constraint\nend VehicleFeatureAnnotationSystem\n```",
    "\n```sysml\nblock VehicleDynamicBehavior {\n  part inputParameters {\n    flow Real initialVelocity;\n    flow Real initialPosition;\n    flow Real acceleration;\n    flow Real timeStep;\n  }\n  part vehiclePhysicalModel {\n    flow Real velocity(initialVelocity);\n    flow Real position(initialPosition);\n    flow Real acceleration(acceleration);\n    flow Real timeStep(timeStep);\n  }\n  part simulation {\n    flow Real newVelocity;\n    flow Real newPosition;\n    operation calculate(velocity, position, acceleration, timeStep): (newVelocity, newPosition) {\n      // Integration with ModelCenter analysis tool\n    }\n  }\n  part outputResults {\n    flow Real outputVelocity(newVelocity);\n    flow Real outputPosition(newPosition);\n  }\n}\n```",
    "\n```sysml\npackage SafetyFeatures {\n  block SeatBelt {\n    attribute isMandatory = false\n  }\n  block DriverAirbag {\n    attribute isMandatory = false\n  }\n  block Bumper {\n    attribute isMandatory = true\n  }\n  block KeylessEntrySystem {\n    attribute isMandatory = false\n  }\n  block Wheel {\n    attribute isMandatory = false\n  }\n  block AntiLockBrakingSystem {\n    attribute isMandatory = false\n  }\n}\n\npackage MandatorySafetyFeatures {\n  block SeatBelt {\n    attribute isMandatory = true\n  }\n  block Bumper {\n    attribute isMandatory = true\n  }\n}\n```",
    "\n```sysml\nblock VehicleSafetyComplianceSystem {\n  part VehicleInterior {\n    part SeatBelt1 {\n      attribute isMandatory = true\n    }\n    part SeatBelt2 {\n      attribute isMandatory = true\n    }\n    part DriverAirbag {\n      attribute isOptional = true\n    }\n  }\n  part VehicleBody {\n    part Bumper {\n      attribute isMandatory = true\n    }\n    part KeylessEntrySystem {\n      attribute isOptional = true\n    }\n  }\n  part ChassisSystem {\n    part Tire {\n      attribute number = 4\n    }\n    part ABS {\n      attribute isOptional = true\n    }\n  }\n}\n```",
    "\n```sysml\nblock RiskManagementSystem {\n  part riskScenarios: Set(RiskScenario)\n  part failureCauses: Set(FailureCause)\n  part failures: Set(Failure)\n\n  operation analyzeCausalRelationships()\n  operation modelRiskScenarios()\n  operation evaluateRisks()\n  operation manageFailures()\n}\n\nblock RiskScenario {\n  attribute id: String\n  attribute name: String\n  attribute description: String\n  part situations: Set(Situation)\n  part potentialFailures: Set(Failure)\n}\n\nblock Situation {\n  attribute id: String\n  attribute name: String\n  attribute description: String\n  part causes: Set(FailureCause)\n}\n\nblock FailureCause {\n  attribute id: String\n  attribute name: String\n  attribute description: String\n  attribute probability: Real\n  part situations: Set(Situation)\n}\n\nblock Failure {\n  attribute id: String\n  attribute name: String\n  attribute description: String\n  attribute severityLevel: Integer\n  part",
    "\n```sysml\nblock RiskMetadataModel\n  part scenario: Scenario\n  part cause: Cause\n  part failure: Failure\n  part riskScenario: RiskScenario\n\n  relationship \"describes\" from scenario to cause\n  relationship \"describes\" from scenario to failure\n  relationship \"describes\" from cause to failure\n  relationship \"relatesTo\" from scenario to riskScenario\n  relationship \"relatesTo\" from cause to riskScenario\n  relationship \"relatesTo\" from failure to riskScenario\nend RiskMetadataModel\n\nblock Scenario\n  property name: String\n  property description: String\nend Scenario\n\nblock Cause\n  property name: String\n  property probability: Real\n  property description: String\nend Cause\n\nblock Failure\n  property name: String\n  property severity: Severity\n  property description: String\nend Failure\n\nblock RiskScenario\n  property name: String\n  property description: String\nend RiskScenario\n\nenumeration Severity\n  entry low\n  entry medium\n  entry high\nend Severity\n```",
    "\n```sysml\nblock BatteryMonitoringSystem {\n  part battery: Battery\n  part monitoringSystem: MonitoringSystem\n  part riskAnalysisSystem: RiskAnalysisSystem\n  part alertSystem: AlertSystem\n\n  flow lowBatteryFlow {\n    monitoringSystem.batteryLevel -> riskAnalysisSystem.analyze\n    riskAnalysisSystem.risk -> alertSystem.sendAlert\n  }\n\n  flow shutdownFlow {\n    monitoringSystem.lowBattery -> riskAnalysisSystem.analyze\n    riskAnalysisSystem.severity -> alertSystem.sendAlert\n    alertSystem.shutdown\n  }\n}\n\nblock Battery {\n  attribute aging: Aging\n  attribute level: BatteryLevel\n}\n\nblock MonitoringSystem {\n  operation monitor {\n    // Continuously monitor the battery level\n  }\n  port batteryLevel: BatteryLevel\n  port lowBattery: LowBattery\n}\n\nblock RiskAnalysisSystem {\n  operation analyze {\n    // Analyze the risk of battery aging leading to",
    "\n```sysml\n@model\nsystem System {\n  @block\n  subsystem Subsystem1 {\n    @block\n    component Component1 {\n      @property\n      string function = \"Function1\";\n      @property\n      string interface = \"Interface1\";\n    }\n    @block\n    component Component2 {\n      @property\n      string function = \"Function2\";\n      @property\n      string interface = \"Interface2\";\n    }\n  }\n  @block\n  subsystem Subsystem2 {\n    @block\n    component Component3 {\n      @property\n      string function = \"Function3\";\n      @property\n      string interface = \"Interface3\";\n    }\n    @block\n    component Component4 {\n      @property\n      string function = \"Function4\";\n      @property\n      string interface = \"Interface4\";\n    }\n  }\n}\n```\n\nThis SysML v2 textual code represents a system with two subsystems, each containing two components. The components have defined functions and interfaces, allowing for a clear structural decomposition of the system. This model can be used by system engineers and IV",
    "\n\n```sysml\n@model\nclass AutomotiveSystem {\n  @block\n  class Component {\n    @property\n    String name;\n    @property\n    String type;\n    @property\n    String safetyAttribute;\n    @property\n    boolean isMandatory;\n  }\n\n  @block\n  class Subsystem {\n    @property\n    String name;\n    @property\n    List<Component> components;\n    @property\n    List<Subsystem> subsystems;\n  }\n\n  @property\n  Subsystem rootSubsystem;\n}\n\n@model\nclass AutomotiveSystemView {\n  @operation\n  void displayHierarchicalStructure(Subsystem subsystem, int level) {\n    // implementation\n  }\n\n  @operation\n  void displaySafetyComponents() {\n    // implementation\n  }\n\n  @operation\n  void displayNonSafetyComponents() {\n    // implementation\n  }\n}\n```\n\nThis SysML v2 textual code represents the overall structure of the automotive system, including components and subsystems, their safety attributes",
    "\n```sysml\npackage AutomotiveDomain {\n  block Car {\n    // Core component representing an automobile in the automotive domain\n    // This block is designated with the alias \"Car\" for easy communication and usage across various application scenarios\n    // The model includes comprehensive explanatory comments to facilitate understanding of each element's meaning and application context\n    // Physical quantities such as \"Torque\" are associated with relevant elements to ensure standardized and consistent expression of automotive characteristics\n    // The overall design emphasizes clarity and extensibility for convenient development, integration, and maintenance of subsequent automotive-related systems\n  }\n}\n```",
    "\n```sysml\npackage AutomobileDocumentManagementSystem {\n  block Automobile {\n    attribute name: String;\n    attribute torque: TorqueValue;\n    part explanatoryDocument: Document;\n  }\n  alias Car = Automobile;\n  package PhysicalQuantitySystem {\n    block TorqueValue {\n      attribute value: Real;\n      attribute unit: String;\n    }\n  }\n  package Document {\n    attribute title: String;\n    attribute content: String;\n  }\n}\n```",
    "\n```sysml\nblock Automobile\n  part attribute Car: Automobile\n  part attribute Torque: Real\n  part attribute TorqueValue: Real\nend Automobile\n\nblock ScalarPhysicalQuantity\n  part attribute Name: String\n  part attribute Value: Real\nend ScalarPhysicalQuantity\n\nblock System\n  part attribute Cars: Set(Car)\n  part operation importTorqueValue(torqueValue: Real)\n  part operation importScalarPhysicalQuantity(name: String, value: Real)\nend System\n```\n\nExplanation:\nThe output SysML v2 model consists of three main blocks: Automobile, ScalarPhysicalQuantity, and System. \n\nThe Automobile block represents the automobile object with attributes Car, Torque, and TorqueValue. \n\nThe ScalarPhysicalQuantity block represents scalar physical quantities with attributes Name and Value. \n\nThe System block represents the overall system that manages automobiles and scalar physical quantities. It has a set attribute Cars to store automobiles and two operations importTorqueValue and importScalarPhysicalQuantity",
    "\n```sysml\nblock Vehicle {\n  part engine: Engine;\n  constraint c1 {\n    self.engine.cylinderCount in 4..6\n  }\n}\n\nblock SmallVehicle extends Vehicle {\n  constraint c2 {\n    self.engine.cylinderCount = 4\n  }\n}\n\nblock LargeVehicle extends Vehicle {\n  constraint c3 {\n    self.engine.cylinderCount = 6\n  }\n}\n\nblock Engine {\n  attribute cylinderCount: Integer;\n}\n```",
    "\n```sysml\nblock FuelManagementSystem {\n  part fuelTank: FuelTank;\n  part engine: Engine;\n  part temperatureMonitor: TemperatureMonitor;\n  part fuelInterface: FuelInterface;\n\n  flow supplyFuel {\n    from fuelTank.out;\n    to engine.in;\n    through fuelInterface.supply;\n  }\n\n  flow returnFuel {\n    from engine.out;\n    to fuelTank.in;\n    through fuelInterface.return;\n  }\n\n  constraint temperatureControl {\n    engine.temperature <= temperatureMonitor.maxSafeTemperature;\n  }\n}\n\nblock FuelTank {\n  port in: In;\n  port out: Out;\n}\n\nblock Engine {\n  port in: In;\n  port out: Out;\n  property temperature: Real;\n}\n\nblock TemperatureMonitor {\n  property maxSafeTemperature: Real;\n}\n\nblock FuelInterface {\n  port supply: InOut;\n  port return: InOut;\n}\n```",
    "\n```sysml\nblock VehicleStructuralArchitecture {\n  part Vehicle {\n    attribute mass : Real;\n    part FrontAxleAssembly {\n      part Axle;\n      part Wheel;\n      part Wheel;\n      part SteeringAngle (optional);\n    }\n    part RearAxleAssembly {\n      part Axle;\n      part Wheel;\n      part Wheel;\n    }\n  }\n}\n```"
]