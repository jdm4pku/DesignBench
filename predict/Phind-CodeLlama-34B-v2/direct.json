[
    "\n```sysml\npackage Vehicle {\n  block Vehicle {\n    part engine: Engine;\n    part driver: Personnel;\n    property mass: Real;\n    property currentStatus: VehicleStatus;\n  }\n  block Engine {\n    property horsepower: Real;\n    property torque: Real;\n  }\n  block Personnel {\n    property name: String;\n    property age: Integer;\n  }\n  block VehicleStatus {\n    property gear: Integer;\n    property acceleratorPedalPosition: Real;\n  }\n}\n```",
    "\n```sysml\npackage VehicleModel\n{\n  block Personnel {}\n  block Engine {}\n\n  package ManuallyOperatedVehicle\n  {\n    block Vehicle\n    {\n      part p1: Personnel\n    }\n  }\n\n  package PoweredVehicle\n  {\n    block Vehicle\n    {\n      part p1: Engine\n    }\n  }\n\n  package ManuallyOperatedPoweredVehicle\n  {\n    block Vehicle\n    {\n      part p1: Personnel\n      part p2: Engine\n    }\n  }\n}\n```",
    "\n```sysml\npackage VehicleStructure {\n  class Vehicle {\n    composition\n    Engine engine;\n    Transmission transmission;\n    Wheel wheels[4];\n  }\n  abstract class VehicleComponent {\n  }\n  class Engine extends VehicleComponent {\n  }\n  class Transmission extends VehicleComponent {\n  }\n  class Wheel extends VehicleComponent {\n  }\n}\n```",
    "\n```sysml\npackage VehicleType {\n  class Vehicle {\n    part engine: Engine\n  }\n  class Engine {\n    attribute numOfCylinders: Integer\n  }\n  class SmallVehicle extends Vehicle {\n    redefines engine: SmallEngine\n  }\n  class LargeVehicle extends Vehicle {\n    redefines engine: LargeEngine\n  }\n  class SmallEngine extends Engine {\n    attribute numOfCylinders = 4\n  }\n  class LargeEngine extends Engine {\n    attribute numOfCylinders = 6\n  }\n}\n```",
    "\n```\npackage TrafficSignalSystem\n{\n  block TrafficSignalComponent\n  {\n    enum Color { green, yellow, red }\n    part currentColor: Color = green\n  }\n\n  block SpecificTrafficSignalComponent extends TrafficSignalComponent\n  {\n    override part currentColor: Color = green\n  }\n}\n```",
    "\n```sysml\npackage InformationClassification {\n  block Unclassified {\n    attribute code = \"uncl\";\n    attribute color = \"green\";\n  }\n  block Confidential {\n    attribute code = \"conf\";\n    attribute color = \"yellow\";\n  }\n  block Secret {\n    attribute code = \"secr\";\n    attribute color = \"red\";\n  }\n  package GradeClassification {\n    block A {\n      attribute grade = \"A\";\n      attribute points = 4.0;\n    }\n    block B {\n      attribute grade = \"B\";\n      attribute points = 3.0;\n    }\n    block C {\n      attribute grade = \"C\";\n      attribute points = 2.0;\n    }\n    block D {\n      attribute grade = \"D\";\n      attribute points = 1.0;\n    }\n    block F {\n      attribute grade = \"F\";\n      attribute points = 0.0;\n    }\n  }\n}\n```",
    "\n```sysml\npackage VehicleType {\n  class SmallVehicle {\n    part engine: Engine {\n      property cylinderCount = 4\n    }\n  }\n  class LargeVehicle {\n    part engine: Engine {\n      property cylinderCount = 6\n    }\n  }\n  class Engine {\n    property cylinderCount: Integer\n  }\n  class Cylinder {\n    property isKeyRole = true\n  }\n}\n```",
    "\n```sysml\npackage VehicleModeling {\n  block Vehicle {\n    part qualityAttributes : QualityAttributes;\n    part driverInformation : DriverInformation;\n    part fuelTank : FuelTank;\n  }\n  block QualityAttributes {\n    // attributes related to the quality of a vehicle\n  }\n  block DriverInformation {\n    // attributes related to the driver of a vehicle\n  }\n  block FuelTank {\n    part fuel : Fuel;\n  }\n  block Fuel {\n    // attributes related to the type of fuel\n  }\n  block BasicInformation {\n    part fuel : Fuel;\n    part personnel : Personnel;\n  }\n  block Fuel {\n    // attributes related to fuel\n  }\n  block Personnel {\n    // attributes related to personnel\n  }\n}\n```",
    "\n```sysml\npackage WheelAssembly {\n  block WheelBearingUnit {\n  }\n  block Tire {\n    part bead {\n    }\n    part rim {\n    }\n  }\n  block Hub {\n    part mountingHole {\n    }\n    part threadedHole {\n    }\n  }\n  block Bolt {\n  }\n  connection sealedConnection(Tire.bead to Tire.rim) {\n    kind: assembly\n  }\n  connection mountingConnection(Hub.mountingHole to Hub.threadedHole via Bolt) {\n    kind: assembly\n  }\n}\n```",
    "\n```sysml\npackage FuelManagementSystem {\n  block FuelTankAssembly {\n    part fuelTank\n    part fuelSupplyPort\n    part fuelReturnPort\n    part temperatureSensor\n    flow supplyFuel {\n      from fuelTank.out\n      to fuelSupplyPort.in\n    }\n    flow returnFuel {\n      from fuelReturnPort.out\n      to fuelTank.in\n    }\n    flow monitorTemperature {\n      from temperatureSensor.out\n      to fuelSupplyPort.in\n      to fuelReturnPort.in\n    }\n  }\n  block Engine {\n    part engine\n    part fuelIntakePort\n    part fuelReturnPort\n    part temperatureSensor\n    flow receiveFuel {\n      from fuelIntakePort.in\n      to engine.in\n    }\n    flow returnFuel {\n      from engine.out\n      to fuelReturnPort.in\n    }\n    flow monitorTemperature {\n      from temperatureSensor.out\n      to fuelIntakePort.in\n      to fuelReturnPort.in\n    }\n  }\n  block",
    "\n```\npackage VehicleModeling\n  block Vehicle\n    attribute mass: Real\n    attribute name: String\n    part frontAxle: Axle\n    part rearAxle: Axle\n    part tires: Tires\n  end Vehicle\n\n  block Axle\n    attribute mass: Real\n    attribute name: String\n    attribute steeringAngle: Real\n    part tires: Tires\n  end Axle\n\n  block Tires\n    attribute mass: Real\n    attribute name: String\n    attribute count: Integer\n  end Tires\n\n  package DefaultVehicle\n    instance defaultVehicle: Vehicle\n      set mass = 1750\n      set name = \"defaultVehicle\"\n      set frontAxle = AxleInstance\n      set rearAxle = AxleInstance\n      set tires = TiresInstance\n  end DefaultVehicle\n\n  package VehicleVariant\n    instance vehicle1_c1: Vehicle\n      set mass = 2000\n      set name = \"vehicle1_c1\"\n      set front",
    "\n```sysml\npackage CouplingSystem {\n  block Vehicle {\n    part hitch: Hitch {\n      flow port couplingBall: CouplingBall\n    }\n  }\n  block Trailer {\n    part hitch: Hitch {\n      flow port couplingBall: CouplingBall\n    }\n  }\n  block Hitch {\n    flow port couplingBall: CouplingBall\n  }\n  block CouplingBall {\n  }\n  connection Vehicle.hitch.couplingBall - Trailer.hitch.couplingBall\n}\n```",
    "\n```sysml\npackage VehiclePowerTransmissionSystem {\n  block Engine {\n    port fuelCommandIn;\n    port powerOut;\n    port clutchIn;\n  }\n\n  block Transmission {\n    port powerIn;\n    port powerOut;\n    port clutchOut;\n  }\n\n  block Clutch {\n    port clutchIn;\n    port clutchOut;\n  }\n\n  block Driveshaft {\n    port powerIn;\n    port powerOut;\n  }\n\n  block RearAxleAssembly {\n    block Differential {\n      port powerIn;\n      port powerOut;\n    }\n\n    block HalfShaft {\n      port powerIn;\n      port powerOut;\n    }\n\n    block Wheel {\n      port powerIn;\n      port roadInterface;\n    }\n  }\n\n  block RoadInterface {\n  }\n\n  // Connectors\n  connector FuelCommandPort {\n  }\n\n  connector PowerPort {\n  }\n\n  connector ClutchPort {\n  }\n\n  // Flow",
    "\n```sysml\npackage Decomposition1\n{\n  block b11\n  {\n    part c1\n    {\n      port pb\n    }\n    part c2\n    {\n      port pe\n    }\n    flow f1\n    {\n      source c1.pb\n      target c2.pe\n    }\n  }\n  block b12\n  {\n    part c3\n    {\n      port pd\n    }\n    part c4\n    {\n      port pf\n    }\n    flow f2\n    {\n      source c3.pd\n      target c4.pf\n    }\n  }\n  flow f3\n  {\n    source b11.c2.pe\n    target b12.c3.pd\n  }\n}\n\npackage Decomposition2\n{\n  block b21\n  {\n    part c1\n    {\n      ref c1_ref\n    }\n    part c2\n    {\n      ref c2_ref\n    }\n  }\n  block b22\n  {\n    part c3\n   ",
    "\n```sysml\nblock PowertrainSystem {\n  part FuelCommand\n  part EngineStartStopControl\n  part PowerTransmission\n  part Driveshaft\n  part LeftWheel\n  part RightWheel\n  part EngineTorque\n\n  flow FuelCommand -> EngineTorque\n  flow EngineStartStopControl -> EngineTorque\n  flow EngineTorque -> PowerTransmission\n  flow PowerTransmission -> Driveshaft\n  flow Driveshaft -> LeftWheel\n  flow Driveshaft -> RightWheel\n  flow EngineStartStopControl -> EngineTorque\n  flow EngineStartStopControl -> PowerTransmission\n  flow EngineStartStopControl -> Driveshaft\n  flow EngineStartStopControl -> LeftWheel\n  flow EngineStartStopControl -> RightWheel\n}\n```",
    "\n```sysml\npackage AutomotivePowertrainControl {\n  block EngineControl {\n    operation receiveFuelControlCommand()\n    operation startEngine()\n    operation generateTorque()\n    operation amplifyTorque()\n    operation transmitTorque()\n    operation distributeTorque()\n    operation detectStall()\n    operation haltOperations()\n    operation controlPowerTransmission()\n    operation ensureReliablePowerResponse()\n  }\n  block PowerTransmission {\n    operation startPowerTransmission()\n    operation endPowerTransmission()\n    operation deliverPowerToWheels()\n  }\n  block UserExperience {\n    operation provideReliablePowerResponse()\n    operation ensureHandlingExperience()\n  }\n  package EngineControl {\n    block FuelControl {\n      operation controlFuelCommands()\n    }\n    block EngineStartShutdown {\n      operation controlEngineStart()\n      operation controlEngineShutdown()\n    }\n    block PowerDelivery {\n      operation coordinatePowerDelivery()\n      operation ensureCoordinatedPowerDelivery()\n    }\n ",
    "\n```sysml\npackage VehiclePowertrainSystem {\n  block Engine {\n    in port fuelCommand\n    out port engineOutputTorque\n    event startSignal\n    event shutdownSignal\n  }\n  block Transmission {\n    in port engineOutputTorque\n    out port amplifiedTorque\n  }\n  block Wheels {\n    in port amplifiedTorque\n    out port powerOutput\n  }\n  package ControlSystem {\n    block EngineControl {\n      in port fuelCommand\n      out port engineOutputTorque\n      event startSignal\n      event shutdownSignal\n    }\n    block TransmissionControl {\n      in port engineOutputTorque\n      out port amplifiedTorque\n    }\n    block WheelsControl {\n      in port amplifiedTorque\n      out port powerOutput\n    }\n  }\n}\n```",
    "\n```sysml\npackage VehicleAndTrailer {\n  block ConnectionMechanism {\n    part hitchBall: Frame {\n      interface connectTo(trailerCoupler: Frame) {\n        direction: inout;\n      }\n    }\n    part trailerCoupler: Frame {\n      interface connectTo(hitchBall: Frame) {\n        direction: inout;\n      }\n    }\n    constraint connect {\n      hitchBall.connectTo(trailerCoupler);\n      trailerCoupler.connectTo(hitchBall);\n    }\n    constraint disconnect {\n      hitchBall.disconnectFrom(trailerCoupler);\n      trailerCoupler.disconnectFrom(hitchBall);\n    }\n  }\n  block Frame {\n    property power: Power;\n    operation connectTo(frame: Frame) {\n      direction: inout;\n    }\n    operation disconnectFrom(frame: Frame) {\n      direction: inout;\n    }\n  }\n  block Power {\n    property voltage: Real;\n    property",
    "\n```sysml\npackage VehicleAndTrailer {\n  block Vehicle {\n    part chassis;\n    part towBall;\n  }\n  block Trailer {\n    part coupler;\n    part trailerFrame;\n  }\n  connector Connection {\n    flow port vehicle;\n    flow port trailer;\n  }\n  block System {\n    part vehicle;\n    part trailer;\n    flow connection;\n  }\n  package ConnectAndDisconnect {\n    operation connect(in vehicle: Vehicle, in trailer: Trailer, out connection: Connection);\n    operation disconnect(inout connection: Connection);\n  }\n}\n```",
    "\n```sysml\npackage VehicleAndTrailer {\n  block Vehicle {\n    part Chassis {\n      block TowBallDevice {}\n    }\n  }\n\n  block Trailer {\n    part TrailerChassis {}\n    part CouplerMechanism {\n      operation engage() {}\n      operation disengage() {}\n    }\n  }\n\n  operation connect() {}\n  operation disconnect() {}\n}\n```",
    "\n```sysml\npackage FuelSystem {\n  block FuelTank {\n    port in FuelSupply\n    port out FuelReturn\n    port out Temperature\n  }\n  block Engine {\n    port in FuelIntake\n    port out FuelExhaust\n  }\n  block FuelFlowMonitor {\n    port in FuelFlow\n    port out Temperature\n  }\n  block InterfaceConnections {\n    port in FuelConnection\n  }\n  package FuelSupplyAndReturn {\n    flow FuelFlow {\n      from FuelTank.FuelSupply\n      to Engine.FuelIntake\n      back from Engine.FuelExhaust\n      to FuelTank.FuelReturn\n    }\n    flow TemperatureFlow {\n      from FuelFlowMonitor.Temperature\n      to FuelFlowMonitor.Temperature\n    }\n  }\n  package SystemIntegration {\n    flow FuelConnectionFlow {\n      from FuelTank.FuelSupply\n      to Engine.FuelIntake\n      to FuelTank.",
    "\n```sysml\npackage FuelDeliverySystem {\n  block StorageTank {\n    part fuel: Real;\n    flow out FuelFlow: Real;\n  }\n\n  block FuelPump {\n    flow in FuelFlow: Real;\n    flow out FuelFlow: Real;\n  }\n\n  block VehicleFuelTank {\n    part fuel: Real;\n    part maxCapacity: Real;\n    flow in FuelFlow: Real;\n    flow out FuelFlow: Real;\n  }\n\n  block FuelManagementSystem {\n    block storageTank: StorageTank;\n    block fuelPump: FuelPump;\n    block vehicleFuelTank: VehicleFuelTank;\n\n    connector FuelFlow from storageTank.FuelFlow to fuelPump.FuelFlow;\n    connector FuelFlow from fuelPump.FuelFlow to vehicleFuelTank.FuelFlow;\n  }\n}\n```",
    "\n```sysml\npackage AutomobileAssembly {\n  block GearboxAssembly {\n    part input {\n      flow port vehicleAssembly\n    }\n    part output {\n      flow port gearboxAssembly\n    }\n  }\n  block EngineAssembly {\n    part input {\n      flow port vehicleWithGearbox\n    }\n    part output {\n      flow port fullyAssembledVehicle\n    }\n  }\n  flow port vehicleAssembly_in\n  flow port vehicleWithGearbox_in\n  flow port fullyAssembledVehicle_out\n}\n```",
    "\n```sysml\npackage VehicleA {\n  block Off {\n    flowPort start \"start signal\"\n    flowPort brake \"brake pedal pressed\"\n  }\n  block Starting {\n    flowPort vehicleOn \"vehicle-on signal\"\n  }\n  block Running {\n    flowPort vehicleOff \"vehicle-off signal\"\n    flowPort tempCheck \"temperature check\"\n    flowPort powerSupply \"power supply\"\n    flowPort parkingBrake \"parking brake\"\n  }\n  block HealthManagement {\n    flowPort tempThreshold \"temperature threshold\"\n    flowPort degradedMode \"degraded mode\"\n    flowPort maintenance \"maintenance\"\n    flowPort normal \"normal state\"\n  }\n  block Controller {\n    flowPort startUp \"start-up signal\"\n    flowPort shutDown \"shut-down signal\"\n  }\n  transition Off->Starting {\n    guard brake and start\n  }\n  transition Starting->Running {\n    guard vehicleOn\n  }\n  transition Running->HealthManagement {\n    guard tempCheck\n",
    "\n```sysml\npackage VehicleBehaviorSystem {\n  block Vehicle {\n    part operationStatus: StateMachine {\n      state Shutdown {\n        transition startUp: (brakePedalPressed && startSignalReceived)\n      }\n      state StartUp {\n        transition selfInspection: true\n      }\n      state SelfInspection {\n        transition powerSupply: true\n      }\n      state PowerSupply {\n        transition Operating: true\n      }\n      state Operating {\n        transition Degraded: temperatureOverheating\n      }\n      state Degraded {\n        transition Operating: true\n      }\n    }\n    part healthManagement {\n      flow temperature: Real\n      flow overheating: Boolean\n      flow status: State\n      flow warningSignal: Boolean\n      flow maintenance: Boolean\n      flow faultRecovery: Boolean\n    }\n  }\n  block VehicleController {\n    part controlOperations {\n      operation start: Boolean\n      operation shutdown: Boolean\n    }\n    part signalProcessing {\n      flow controlSignal: Boolean\n      flow",
    "\n```sysml\npackage VehicleDynamicSimulation {\n  block Vehicle {\n    part attribute mass: Real\n    part attribute position: Real\n    part attribute velocity: Real\n    part attribute acceleration: Real\n  }\n  block Road {\n    part attribute slope: Real\n    part attribute frictionCoefficient: Real\n  }\n  block Simulation {\n    part attribute time: Real\n    part attribute vehicle: Vehicle\n    part attribute road: Road\n    operation simulate()\n    operation recordSnapshot()\n  }\n}\n```",
    "\n```sysml\npackage VehicleConfiguration {\n  block SubsystemA {\n    block Component1 {}\n    block Component2 {}\n    block Component3 {}\n  }\n  block SubsystemB {\n    block Component4 {}\n    block Component5 {}\n    block Component6 {}\n  }\n  block ConfigurationA {\n    part subsystemA: SubsystemA {\n      select Component1 {}\n      select Component2 {}\n    }\n    part subsystemB: SubsystemB {\n      select Component4 {}\n      select Component5 {}\n    }\n  }\n  block ConfigurationB {\n    part subsystemA: SubsystemA {\n      select Component2 {}\n      select Component3 {}\n    }\n    part subsystemB: SubsystemB {\n      select Component4 {}\n      select Component5 {}\n    }\n  }\n  constraint constraint1 {\n    if (subsystemA.selected = Component2 and subsystemA.selected = Component3) {\n      subsystemB.selected = Component4 and subsystemB.selected = Component5\n    }\n  }\n}\n```",
    "\n```sysml\npackage VehiclePlatform {\n  block SubsystemA {\n    part part1 with { Port p1 }\n    part part2\n    part part3 with { Port p1 }\n    part part4\n    part part5 with { Port p2 }\n    part part6\n  }\n  block SubsystemB {\n    part part1 with { Port p1 }\n    part part2\n    part part3 with { Port p1 }\n    part part4\n    part part5 with { Port p2 }\n    part part6\n  }\n  block VehicleConfigA {\n    part SubsystemA\n    part SubsystemB\n  }\n  block VehicleConfigB {\n    part SubsystemA\n    part SubsystemB\n  }\n}\n```",
    "\n```sysml\npackage VehicleProductLine {\n  block Engine {\n    attribute cylinder: Integer\n  }\n  block Transmission {\n    attribute type: String\n  }\n  block Wheels {\n    attribute width: Integer\n  }\n  block Vehicle {\n    part engine: Engine\n    part transmission: Transmission\n    part wheels: Wheels\n    constraint performance {\n      engine.cylinder > 4 and transmission.type = \"automatic\" and wheels.width > 16\n    }\n    constraint compatibility {\n      engine.cylinder = 4 and transmission.type = \"manual\" and wheels.width <= 16\n    }\n  }\n  block ProductLine {\n    part vehicles: Vehicle[*]\n    constraint configuration {\n      for (vehicle in vehicles) {\n        if (vehicle.performance) {\n          vehicle.engine.cylinder = 6\n          vehicle.transmission.type = \"automatic\"\n          vehicle.wheels.width = 18\n        } else {\n          vehicle.engine.cylinder",
    "\n```\npackage VehicleManagementSystem {\n  class Vehicle {\n    attribute mass: Real\n    attribute fuelStatus: FuelStatus\n    attribute powertrain: Powertrain\n    attribute reliability: Reliability\n  }\n\n  class FuelStatus {\n    attribute isEmpty: Boolean\n  }\n\n  class Powertrain {\n    attribute engine: Engine\n    attribute transmission: Transmission\n    attribute driveInterface: DriveInterface\n  }\n\n  class Engine {\n    attribute torque: Real\n  }\n\n  class Transmission {\n  }\n\n  class DriveInterface {\n  }\n\n  class Reliability {\n    attribute performance: Real\n    attribute durability: Real\n  }\n\n  operation defineVehicle(vehicle: Vehicle) {\n    precondition: vehicle.mass > 0\n    postcondition: vehicle.fuelStatus.isEmpty = false\n  }\n\n  operation manageFuelStatus(vehicle: Vehicle) {\n    precondition: vehicle.fuelStatus.isEmpty = false\n    postcondition: vehicle.mass <= vehicle.powertrain",
    "\n```sysml\npackage VehicleMassCompliance {\n  block TestOperator {\n    operation measureMass() : Real\n  }\n\n  block Vehicle {\n    attribute actualMass : Real\n  }\n\n  block ComplianceSystem {\n    part testOperator : TestOperator\n    part vehicle : Vehicle\n    attribute maxPermissibleMass : Real\n\n    operation testVehicle() : Boolean {\n      vehicle.actualMass = testOperator.measureMass()\n      return vehicle.actualMass <= maxPermissibleMass\n    }\n  }\n}\n```",
    "\n```sysml\npackage WaterSupplyNetwork {\n  block SpigotBank {\n    port hotWaterOutlet;\n    port coldWaterOutlet;\n  }\n\n  block Spigot {\n    port hotWaterInlet;\n    port coldWaterInlet;\n  }\n\n  block Faucet {\n    part hotWaterInlet: FaucetInlet;\n    part coldWaterInlet: FaucetInlet;\n  }\n\n  block FaucetInlet {\n    flow port waterFlow;\n  }\n\n  package WaterFlow {\n    connector WaterFlow {\n      flow rate: Real;\n    }\n  }\n\n  package Connection {\n    block Connection {\n      part hotWaterConnection: ConnectionPort;\n      part coldWaterConnection: ConnectionPort;\n    }\n\n    block ConnectionPort {\n      flow port waterFlow: WaterFlow;\n    }\n  }\n\n  package System {\n    block System {\n      part spigotBank: SpigotBank;\n      part spigots: Spigot[*];\n     ",
    "\n```sysml\n@model vehicleQualityAnalysis\n\npackage Vehicle {\n  class Component {\n    attribute name: String\n    attribute mass: Real\n    attribute qualityData: Real\n  }\n\n  class Vehicle {\n    attribute components: Set(Component)\n    operation calculateTotalMass(): Real\n  }\n\n  class QualityAnalysis {\n    attribute requirements: Set(QualityRequirement)\n    operation formulateUseCases(): Set(AnalysisUseCase)\n    operation generateTasksAndPlans(objective: QualityObjective): Set(Task)\n  }\n\n  class QualityRequirement {\n    attribute description: String\n  }\n\n  class AnalysisUseCase {\n    attribute description: String\n  }\n\n  class QualityObjective {\n    attribute description: String\n  }\n\n  class Task {\n    attribute description: String\n  }\n}\n```",
    "\n```sysml\npackage VehiclePowertrain {\n  block EngineType {\n    part Cylinders: Integer;\n    part Pistons: Integer;\n    part ConnectingRods: Integer;\n    part Crankshaft: String;\n  }\n  block EngineEvaluation {\n    part Power: Real;\n    part Mass: Real;\n    part Efficiency: Real;\n    part Reliability: Real;\n    part Cost: Real;\n  }\n  block TradeoffAnalysis {\n    part EngineType: EngineType;\n    part EngineEvaluation: EngineEvaluation;\n    part RecommendedEngine: EngineType;\n    part Rationale: String;\n  }\n  operation analyzeTradeoff() {\n    in TradeoffAnalysis;\n    out TradeoffAnalysis;\n  }\n}\n```",
    "\n```sysml\npackage VehicleFuelEconomy {\n  block Vehicle {\n    part powertrain;\n    part load;\n    part operatingConditions;\n  }\n  block FuelEconomy {\n    property milesPerGallon: Real;\n    operation calculateEconomy(vehicle: Vehicle): Real;\n  }\n  block RegulatoryRequirement {\n    property urbanMinimum: Real = 25;\n    property highwayMinimum: Real = 30;\n    operation checkEconomy(economy: FuelEconomy): Boolean;\n  }\n  package Testing {\n    block TestScenario {\n      property additionalLoad: Real;\n      operation performTest(vehicle: Vehicle): FuelEconomy;\n    }\n    block UrbanTestScenario extends TestScenario {\n      property additionalLoad = 1000;\n    }\n    block HighwayTestScenario extends TestScenario {\n      property additionalLoad = 1000;\n    }\n  }\n}\n```",
    "\n\n```sysml\npackage VehicleMotionSimulation\n  block VehicleParameters\n    parameter mass: Real\n    parameter initialPosition: Real\n    parameter initialVelocity: Real\n    parameter powerOutputData: List(Real)\n  end\n\n  block DynamicEquations\n    input power: Real\n    input timeStep: Real\n    output acceleration: Real\n    output velocity: Real\n    output position: Real\n\n    equation\n      acceleration = ...\n      velocity = ...\n      position = ...\n  end\n\n  block VehicleMotionSimulation\n    input parameters: VehicleParameters\n    input power: Real\n    input timeStep: Real\n    output accelerationSequence: List(Real)\n    output velocitySequence: List(Real)\n    output positionSequence: List(Real)\n\n    parts\n      dynamicEquations: DynamicEquations\n\n    algorithm\n      ...\n  end\nend\n```",
    "\n```sysml\npackage VehicleSystem {\n  block Car {\n    part frontAxleAssembly {\n      part frontWheel1;\n      part frontWheel2;\n      part frontAxle {\n        attribute mass = 150 kg;\n        attribute steeringAngle;\n      }\n    }\n    part rearAxleAssembly {\n      part rearWheel1;\n      part rearWheel2;\n      part rearAxle {\n        attribute mass = 250 kg;\n      }\n    }\n    attribute totalMass = 2500 kg;\n  }\n}\n```",
    "\n```sysml\npackage VehicleSafetySecurity {\n  block Vehicle {\n    part seatBelt: SeatBelt {\n      attribute isMandatory = true\n    }\n    part bumper: Bumper {\n      attribute isMandatory = true\n    }\n    part airbag: Airbag {\n      attribute isOptional = true\n    }\n    part antiLockBrakingSystem: AntiLockBrakingSystem {\n      attribute isOptional = true\n    }\n    part alarmDevice: AlarmDevice {\n      attribute isSecurityDevice = true\n    }\n    part keylessEntrySystem: KeylessEntrySystem {\n      attribute isSecurityDevice = true\n    }\n  }\n\n  block SeatBelt {\n    attribute isMandatory\n  }\n\n  block Bumper {\n    attribute isMandatory\n  }\n\n  block Airbag {\n    attribute isOptional\n  }\n\n  block AntiLockBrakingSystem {\n    attribute isOptional\n  }\n\n  block AlarmDevice {\n    attribute isSecurityDevice\n  }\n\n  block Keyless",
    "\n```\npackage LayeredArchitecture\n{\n  block ApplicationLayer\n  {\n    part serviceLayer: ServiceLayer;\n    attribute x;\n    attribute y;\n    attribute z;\n    operation calculateZ(): Integer\n    {\n      z = serviceLayer.calculateZ(x, y);\n    }\n  }\n\n  block ServiceLayer\n  {\n    part dataLayer: DataLayer;\n    operation calculateZ(x: Integer, y: Integer): Integer\n    {\n      // Implement the logic to calculate z based on x and y\n      z = dataLayer.getZValue(x, y);\n    }\n  }\n\n  block DataLayer\n  {\n    operation getZValue(x: Integer, y: Integer): Integer\n    {\n      // Implement the logic to retrieve z value from data source\n    }\n  }\n}\n```",
    "\n```sysml\npackage powertrainSystem {\n  block torqueGenerator {\n    operation generateTorque() {\n      precondition: torque > 0\n    }\n  }\n\n  block logicLayer {\n    part torqueGenerator: torqueGenerator\n  }\n\n  block physicalLayer {\n    part engine: Engine\n  }\n\n  block powertrainSystem {\n    part logicLayer: logicLayer\n    part physicalLayer: physicalLayer\n\n    flow {\n      from: logicLayer.torqueGenerator.generateTorque()\n      to: physicalLayer.engine.applyTorque()\n    }\n  }\n}\n```",
    "\n```sysml\nblock TorqueGenerator\n  operation generateTorque()\nend TorqueGenerator\n\nblock Engine\n  operation executeTorque()\nend Engine\n\nblock Powertrain\n  part engine: Engine\n  part torqueGenerator: TorqueGenerator\n\n  flow\n    map(torqueGenerator.generateTorque()) to engine.executeTorque()\n  end\nend Powertrain\n\nblock System\n  part powertrain: Powertrain\n\n  flow\n    powertrain.torqueGenerator.generateTorque()\n    powertrain.engine.executeTorque()\n  end\nend System\n```",
    "\n```sysml\npackage VehicleSafetyAndAntiTheftFunctionCatalogue {\n  block BasicSafetyComponents {\n    part FrontSeatBelts {\n      type: SeatBelt;\n      location: Body;\n    }\n    part Bumpers {\n      type: Bumper;\n      location: Body;\n    }\n  }\n  block OptionalSafetyComponents {\n    part DriverAirbag {\n      type: Airbag;\n      location: Body;\n    }\n    part AntiLockBrakingSystem {\n      type: System;\n      location: Body;\n    }\n  }\n  block SecurityComponents {\n    part AlarmSystem {\n      type: System;\n      location: Body;\n    }\n    part KeylessEntrySystem {\n      type: System;\n      location: Body;\n    }\n  }\n  block MandatorySafetyComponents {\n    part FrontSeatBelts {\n      type: SeatBelt;\n      location: Body;\n    }\n    part Bumpers {\n      type: Bumper;\n      location:",
    "\n```sysml\npackage FuelSupplyAndReturnManagement {\n  block FuelTankAssembly {\n    part FuelTank {\n    }\n    part FuelPump {\n    }\n    flow SupplyFuel {\n      from FuelTank\n      to FuelPump\n    }\n    flow ReturnFuel {\n      from FuelPump\n      to FuelTank\n    }\n  }\n  block Vehicle {\n    part FuelTankAssembly\n    part FuelTemperatureMonitor\n    flow MonitorFuelTemperature {\n      from FuelTankAssembly\n      to FuelTemperatureMonitor\n    }\n  }\n  block FuelFlowPath {\n    part FuelTankAssembly\n    part FuelConsumingUnit {\n    }\n    flow SupplyFuelToConsumingUnit {\n      from FuelTankAssembly\n      to FuelConsumingUnit\n    }\n  }\n  block InterfaceDefinition {\n    part FuelFlowPath\n    part FuelTankAssembly\n  }\n}\n```",
    "\n```sysml\npackage Vehicle {\n  block SeatBelt {\n    attribute mandatory = true\n  }\n  block Airbag {\n    attribute mandatory = false\n  }\n  block AntiTheftAlarm {\n    attribute mandatory = true\n  }\n  block Bumper {\n    attribute mandatory = true\n  }\n  block KeylessEntrySystem {\n    attribute mandatory = true\n  }\n  block Wheel {\n    attribute quantity = 2\n  }\n  block AntiLockBrakingSystem {\n    attribute mandatory = false\n    attribute quantity = 2\n  }\n  package SafetySecurityManagement {\n    block IdentificationAndClassification {\n      flowPort in out\n    }\n  }\n}\n```",
    "\n```sysml\npackage VehicleSafetyAndSecurity {\n  block Interior {\n    part AlarmSystem\n    part SeatBelts\n    part FrontRowSeats\n    part DriversAirbag\n  }\n  block BodyAssembly {\n    part VehicleBody\n    part Bumper\n    part KeylessEntrySystem\n  }\n  block VehicleSafetyAndSecurityComponentSystem {\n    part Interior\n    part BodyAssembly\n  }\n}\n```",
    "\n```sysml\nblock ClassifiedComponent <<component>>\n  attribute securityClassification: String\n  operation classify(classification: String)\n  operation getClassification(): String\nend ClassifiedComponent\n\nblock_diagram\n  component ClassifiedComponent\n    attribute securityClassification = \"Unclassified\"\n    operation classify(classification)\n    operation getClassification()\n  end ClassifiedComponent\n```\n```",
    "\n```sysml\npackage AutomotiveECUCommunication {\n  block VehicleControlUnit {\n    part BusIF: BusInterface\n  }\n\n  block EngineControlUnit {\n    part BusIF: BusInterface\n  }\n\n  block BusInterface {\n    flow port CANBus: CANBus\n  }\n\n  block CANBus {\n    flow port VCU: VehicleControlUnit\n    flow port ECU: EngineControlUnit\n  }\n\n  block SensorDataExchange {\n    flow port VCU: VehicleControlUnit\n    flow port ECU: EngineControlUnit\n  }\n}\n```",
    "\n```sysml\npackage BGMonitoringSystem {\n  block Battery {\n    part batteryStatus: BatteryStatus\n    part batteryAlert: BatteryAlert\n  }\n  block BatteryStatus {\n    operation checkStatus()\n  }\n  block BatteryAlert {\n    operation alertUser()\n  }\n  block BloodGlucoseMonitor {\n    part bgMeasurement: BloodGlucoseMeasurement\n    part emergencyResponse: EmergencyResponse\n  }\n  block BloodGlucoseMeasurement {\n    operation monitorBG()\n  }\n  block EmergencyResponse {\n    operation respond()\n  }\n  package RiskManagement {\n    block KeyRiskScenarios {\n      operation establishManagementMeasures()\n    }\n  }\n}\n```",
    "\n```sysml\npackage Constants\n  class MathematicalConstants\n    attribute e: Real = 2.71828182845904523536028747135266249775724709369995\n    attribute pi: Real = 3.14159265358979323846264338327950288419716939937510\n  end class\n\n  class PhysicalConstants\n    attribute speedOfLight: Real = 299792458.0 # m/s\n    attribute fineStructureConstant: Real = 7.2973525693e-3 # dimensionless\n    attribute electronToProtonMassRatio: Real = 1.0 / 1836.15267389 # dimensionless\n  end class\n\n  class ScenarioConstants\n    attribute earthGravity: Real",
    "\n```\npackage AutomotiveComponentSpecification\n\nblock Tire\n  attribute manufacturer: String\n  attribute rimDiameter: Real\n  attribute width: Integer\nend Tire\n\nblock MichelinTire\n  superclass Tire\n  attribute manufacturer: String = \"Michelin\"\n  attribute rimDiameter: Real\n  attribute width: Integer\nend MichelinTire\n\nblock PirelliTire\n  superclass Tire\n  attribute manufacturer: String = \"Pirelli\"\n  attribute rimDiameter: Real\n  attribute width: Integer\nend PirelliTire\n```",
    "\n```sysml\npackage AutomotiveComponentModel\n  class Vehicle {\n    attribute mass: Real [SI: kg, Imperial: lb]\n    attribute length: Real [SI: m, Imperial: in]\n    part frontLeftWheel: Wheel\n    part frontRightWheel: Wheel\n  }\n  class Wheel {\n    attribute hubDiameter: Real [SI: m, Imperial: in]\n    attribute width: Real [SI: m, Imperial: in]\n    attribute tire: Tire\n  }\n  class Tire {\n    attribute height: Real [SI: m, Imperial: in]\n  }\n  Vehicle.mass = 1200 [SI: kg, Imperial: lb]\n  Vehicle.length = 4.82 [SI: m, Imperial: in]\n  Wheel.hubDiameter = 0.4572 [SI: m, Imperial: in]\n  Wheel.width = 0.245 [SI: m, Imperial: in]\n  Tire.height = Wheel.hubDiameter + Wheel",
    "\n```sysml\npackage Vehicle {\n  block Engine {\n    enum EngineType {\n      fourCylinder,\n      sixCylinder\n    }\n  }\n\n  block Transmission {\n    enum TransmissionType {\n      manual,\n      automatic\n    }\n  }\n\n  block Powertrain {\n    part engine: Engine\n    part transmission: Transmission\n    constraint engine.EngineType = sixCylinder => transmission.TransmissionType = automatic\n    constraint engine.EngineType = fourCylinder => transmission.TransmissionType = manual\n  }\n\n  block Vehicle {\n    part powertrain: Powertrain\n    constraint powertrain.engine.EngineType in {Engine.EngineType::fourCylinder, Engine.EngineType::sixCylinder}\n    constraint powertrain.transmission.TransmissionType in {Transmission.TransmissionType::manual, Transmission.TransmissionType::automatic}\n  }\n\n  block HighPerformanceVehicle {\n    extend Vehicle\n    constraint powertrain.engine.EngineType = sixCylinder\n  }\n",
    "\n```sysml\npackage Vehicle {\n  class Car {\n    attribute mass: Real = 1200;\n    attribute length: Real = 4.82;\n    part wheelAssemblies: Set(WheelAssembly);\n  }\n\n  class WheelAssembly {\n    part wheel: Wheel;\n    part brakeDisc: BrakeDisc;\n    constraint check_fitment {\n      brakeDisc.diameter <= wheel.outerDiameter\n    }\n  }\n\n  class Wheel {\n    part rim: Rim;\n    part tire: Tire;\n    attribute outerDiameter: Real;\n    constraint calculate_outerDiameter {\n      outerDiameter = rim.diameter + tire.outerWidth\n    }\n  }\n\n  class Rim {\n    attribute diameter: Real = 18 * 0.0254; // Convert 18 inches to meters\n  }\n\n  class Tire {\n    attribute width: Real = 245; // In millimeters\n    attribute height: Real = 4",
    "\n```sysml\npackage AutomotiveFuelSystem {\n  block FuelTankAssembly {\n    part FuelOutlet\n    part FuelReturn\n    part FuelPump\n    flow FuelFlow {\n      from FuelTankAssembly.FuelOutlet\n      to FuelPump\n      to FuelTankAssembly.FuelReturn\n    }\n  }\n  block FuelPump {\n    part FuelInlet\n    part FuelOutlet\n    flow FuelFlow {\n      from FuelPump.FuelInlet\n      to FuelPump.FuelOutlet\n    }\n  }\n  block FuelTemperatureMonitor {\n    part FuelTemperatureSensor\n    part FuelTemperatureTransmitter\n    flow TemperatureFlow {\n      from FuelTemperatureSensor\n      to FuelTemperatureTransmitter\n    }\n  }\n  package FuelSystem {\n    part FuelTank\n    part FuelTankAssembly\n    part FuelPump\n    part FuelTemperatureMonitor\n    flow FuelFlow {\n",
    "\n```sysml\npackage PhysicalQuantities {\n  class PhysicalQuantity {\n    attribute name: String\n    attribute symbol: String\n    attribute baseUnit: Unit\n    attribute derivedUnits: Set(Unit)\n  }\n\n  class Unit {\n    attribute name: String\n    attribute symbol: String\n    attribute conversionFactor: Real\n    attribute parentUnit: Unit\n  }\n\n  package ISQ {\n    PhysicalQuantity Length {\n      symbol = \"L\"\n      baseUnit = Meter\n    }\n    PhysicalQuantity Mass {\n      symbol = \"M\"\n      baseUnit = Kilogram\n    }\n    PhysicalQuantity Time {\n      symbol = \"T\"\n      baseUnit = Second\n    }\n    PhysicalQuantity ElectricCurrent {\n      symbol = \"I\"\n      baseUnit = Ampere\n    }\n    PhysicalQuantity Temperature {\n      symbol = \"Θ\"\n      baseUnit = Kelvin\n    }\n    PhysicalQuantity AmountOfSubstance {\n      symbol = \"N\"\n      baseUnit = Mole\n    }\n    Phys",
    "\n```sysml\npackage StandardizedUnitSystemLibrary {\n  block ISQ {\n    part quantity: Quantity\n    part unit: Unit\n  }\n  block USCustomaryUnits {\n    part quantity: Quantity\n    part unit: Unit\n  }\n  connector Conversion {\n    flow quantity: Quantity\n    flow unit: Unit\n  }\n  block ConversionService {\n    in ISQ\n    in USCustomaryUnits\n    out Conversion\n  }\n  block UnitManagement {\n    in Conversion\n    out Conversion\n  }\n  block DataProcessing {\n    in Conversion\n    out Conversion\n  }\n  block Communication {\n    in Conversion\n    out Conversion\n  }\n}\n```",
    "\n```sysml\npackage CarHeadlampTiltAdjustmentKnobVerificationSystem\n  block TiltAngleVerification\n    parameter minTiltAngle: Real = 50;\n    parameter maxTiltAngle: Real = 80;\n    input tiltAngle: Real;\n    output isTiltAngleValid: Boolean;\n    algorithm\n      isTiltAngleValid = (minTiltAngle <= tiltAngle) and (tiltAngle <= maxTiltAngle);\n    end algorithm;\n  end block;\nend package;\n```",
    "\n```sysml\npackage DataTypes {\n  class UnsignedInteger {\n    attribute: value : Integer\n    constraint: value >= 0\n  }\n\n  class UnsignedFloat {\n    attribute: value : Real\n    constraint: value >= 0\n  }\n\n  class DateTime {\n    attribute: value : String\n  }\n\n  class String {\n    attribute: value : String\n  }\n\n  class Boolean {\n    attribute: value : Boolean\n  }\n\n  class Status {\n    attribute: level : String\n    attribute: color : String\n    constraint: level in {\"Critical\", \"Warning\", \"Normal\"}\n    constraint: color in {\"Red\", \"Yellow\", \"Green\"}\n  }\n\n  class PhysicalDimension {\n    attribute: diameter : Integer\n    attribute: size : String\n    constraint: diameter in {60, 70, 80}\n    constraint: size in {\"Small\", \"Medium\", \"Large\"}\n  }\n}\n\npackage Main {\n  block: System {\n    part: dataTypes : DataTypes\n    part: status : Status\n",
    "\n```sysml\npackage PartsManagement {\n  class SparePart {\n    attribute String name;\n    attribute String description;\n    attribute int quantity;\n  }\n  package Bag {\n    stereotype = «collection»;\n    type SparePart;\n  }\n}\n\npackage PersonnelManagement {\n  class Person {\n    attribute String name;\n    attribute String position;\n    attribute String contact;\n  }\n  package OrderedSet {\n    stereotype = «collection»;\n    type Person;\n  }\n}\n\npackage IntegerManagement {\n  package List {\n    stereotype = «collection»;\n    type Integer;\n  }\n}\n\npackage StringManagement {\n  package Set {\n    stereotype = «collection»;\n    type String;\n  }\n}\n\npackage RealNumberManagement {\n  package Array {\n    stereotype = «collection»;\n    type Real;\n    attribute int length = 4;\n  }\n}\n\npackage NestedCollectionManagement {\n  package List {\n    stereotype = «collection»",
    "\n```\npackage TireInformationSystem {\n  class Tire {\n    attribute String manufacturerName\n    attribute Real rimDiameter\n    attribute Real tireWidth\n    attribute Real[3] installationPosition\n  }\n  class TireInformationSystem {\n    containment Tire tires\n  }\n}\n```",
    "\n```sysml\npackage TrajectoryRecordingSystem {\n  block SpacecraftTrajectorySampler {\n    parameter missionLiftoffTime: Time;\n    part missionLiftoffTimeInSeconds: Real;\n    operation calculateTimeInSeconds() {\n      // Calculate the mission liftoff time in seconds\n    }\n    operation sampleTrajectory() {\n      // Sample the spacecraft trajectory\n    }\n    operation recordTrajectoryData() {\n      // Record the spacecraft trajectory data\n    }\n  }\n  class TrajectoryData {\n    attribute time: Real;\n    attribute position: Vector{3};\n    attribute velocity: Vector{3};\n  }\n  package TrajectoryAnalysis {\n    operation analyzeTrajectory() {\n      // Analyze the recorded trajectory data\n    }\n    operation evaluatePerformance() {\n      // Evaluate the performance based on the trajectory analysis\n    }\n  }\n}\n```",
    "\n```sysml\npackage AlloyManagementSystem {\n  class Substance {\n    attribute String name;\n    attribute Real atomicMass;\n  }\n\n  class Alloy {\n    attribute String name;\n    attribute List<Component> components;\n    attribute Real tensileStrength;\n  }\n\n  class Component {\n    attribute Substance substance;\n    attribute Real massFraction;\n  }\n\n  package StandardSubstances {\n    substance Iron { atomicMass: 55.845; }\n    substance Carbon { atomicMass: 12.010; }\n    substance Manganese { atomicMass: 57.938; }\n\n    alloy Steel980 {\n      components: [\n        { substance: Iron, massFraction: 0.90 },\n        { substance: Carbon, massFraction: 0.08 },\n        { substance: Manganese, massFraction: 0.02 }\n      ];\n      tensileStrength: 450.0; // in",
    "\n```sysml\npackage EngineeringMaterialsDatabase {\n  class Material {\n    attribute String name;\n    attribute double atomicMass;\n    attribute Map<String, double> compositionalInformation;\n    attribute Map<String, double> mechanicalPropertyIndicators;\n  }\n\n  class EngineeringMaterial extends Material {\n    attribute Map<String, double> detailedCompositionalInformation;\n  }\n\n  class Metal extends EngineeringMaterial {\n    // ...\n  }\n\n  class Alloy extends EngineeringMaterial {\n    // ...\n  }\n\n  class Steel extends Metal {\n    attribute double tensileStrength;\n  }\n\n  Steel createSteel_980() {\n    Steel steel_980 = new Steel();\n    steel_980.name = \"Steel_980\";\n    steel_980.atomicMass = /* ... */;\n    steel_980.compositionalInformation = /* ... */;\n    steel_980.mechanicalPropertyIndicators = /* ... */;\n    steel_980.detailedCompositionalInformation = /*",
    "\n```sysml\nblock PublishSubscribeSystem\n  part server: Server\n  part producer: Producer\n  part consumer: Consumer\n  part topic: Topic\n\n  flow publishFlow {\n    from producer.publishOut\n    to server.receiveIn\n  }\n\n  flow subscribeFlow {\n    from consumer.subscribeIn\n    to server.manageSubscriptionIn\n  }\n\n  flow distributeFlow {\n    from server.distributeOut\n    to consumer.receiveIn\n  }\n\n  constraint topicManagement {\n    server.manageTopic(topic)\n  }\nend PublishSubscribeSystem\n\nblock Server\n  operation receiveIn()\n  operation manageSubscriptionIn()\n  operation manageTopic(topic: Topic)\n  operation distributeOut()\nend Server\n\nblock Producer\n  operation publishOut()\nend Producer\n\nblock Consumer\n  operation subscribeIn()\n  operation receiveIn()\nend Consumer\n\nblock Topic\n  attribute name: String\nend Topic\n```",
    "\n```sysml\npackage VehicleFuelSystem {\n  block FuelTankAssembly {\n    part fuelTank\n    part fuelLines\n    flow supplyFuel {\n      from fuelTank\n      to fuelLines\n    }\n    flow returnFuel {\n      from fuelLines\n      to fuelTank\n    }\n  }\n  block Engine {\n    part engine\n    part fuelLines\n    flow receiveFuel {\n      from fuelLines\n      to engine\n    }\n    flow returnUsedFuel {\n      from engine\n      to fuelLines\n    }\n  }\n  block MonitoringSystem {\n    part monitoringDevices\n    flow transmitTemperature {\n      from monitoringDevices\n    }\n  }\n  package FuelSystem {\n    part FuelTankAssembly\n    part Engine\n    part MonitoringSystem\n    flow fuelFlow {\n      from FuelTankAssembly.supplyFuel\n      to Engine.receiveFuel\n      from Engine.returnUsedFuel\n      to FuelTankAssembly.returnFuel\n    }\n    flow temperatureMonitoring {",
    "\n```sysml\npackage PublishSubscribe {\n  block Producer {\n    out p: Publisher\n  }\n  block Consumer {\n    in s: Subscriber\n  }\n  block Server {\n    in p: Publisher\n    out s: Subscriber\n  }\n  block Publisher {\n    out m: Message\n  }\n  block Subscriber {\n    in m: Message\n  }\n  block Message {\n    attribute topic: String\n    attribute content: String\n  }\n  connector PublisherToServer {\n    flow m: Message\n  }\n  connector SubscriberToServer {\n    flow m: Message\n  }\n  connector ServerToSubscriber {\n    flow m: Message\n  }\n  connector PublisherToConsumer {\n    flow m: Message\n  }\n  connector ServerToPublisher {\n    flow m: Message\n  }\n  connector ConsumerToServer {\n    flow m: Message\n  }\n}\n```",
    "\n```sysml\npackage TransportationService {\n  block Driver {\n    operation enterVehicle()\n    operation operateVehicle()\n    operation checkFuelLevel()\n    operation refuel()\n    operation exitVehicle()\n  }\n\n  block Passenger {\n    operation enterVehicle()\n    operation exitVehicle()\n  }\n\n  block Vehicle {\n    part driver: Driver\n    part passengers: Set(Passenger)\n    attribute fuelLevel: Real\n    attribute maxFuelCapacity: Real\n  }\n\n  block TransportationSystem {\n    part vehicle: Vehicle\n    operation startTransportation()\n    operation endTransportation()\n  }\n}\n```",
    "\n```sysml\npackage FuelSupplyAndReturnManagement {\n  block EngineUnit {\n    port fuelInlet {\n      type: FuelFlowInterface\n      direction: in\n    }\n  }\n\n  block FuelTankAssembly {\n    port fuelOutlet {\n      type: FuelFlowInterface\n      direction: out\n    }\n    port fuelReturn {\n      type: FuelFlowInterface\n      direction: in\n    }\n  }\n\n  interface FuelFlowInterface {\n    attribute real fuelTemperature\n  }\n\n  package VehicleFuelManagementSystem {\n    part engineUnit: EngineUnit\n    part fuelTankAssembly: FuelTankAssembly\n    connector fuelSupplyConnection {\n      type: FuelFlowInterface\n      part: engineUnit.fuelInlet -> fuelTankAssembly.fuelOutlet\n    }\n    connector fuelReturnConnection {\n      type: FuelFlowInterface\n      part: fuelTankAssembly.fuelReturn -> engineUnit.fuelInlet\n    }\n  }\n}\n```",
    "\n```sysml\npackage VehicleFuelSystem {\n  block FuelTankAssembly {\n    part fuel: Resource {\n      attribute currentTemperature: Real\n    }\n    flow supplyPort: ResourceFlow {\n      source fuel\n      target Engine.fuelSupplyPort\n    }\n  }\n  block Engine {\n    part fuel: Resource {\n      attribute currentTemperature: Real\n    }\n    flow fuelSupplyPort: ResourceFlow {\n      source FuelTankAssembly.supplyPort\n      target fuel\n    }\n    flow returnPort: ResourceFlow {\n      source fuel\n      target FuelTankAssembly.returnPort\n    }\n  }\n  block FuelSystem {\n    part monitoring: Monitoring {\n      attribute efficiency: Real\n      attribute reliability: Real\n      attribute safety: Real\n    }\n    connector Engine.fuelSupplyPort: ResourceFlow\n    connector FuelTankAssembly.supplyPort: ResourceFlow\n    connector Engine.returnPort: ResourceFlow\n    connector FuelTankAssembly.returnPort: ResourceFlow\n  }\n}\n```",
    "\n```sysml\nblock PhotoCaptureSystem\n  part sceneSelector: SceneSelector\n  part autoFocus: AutoFocus\n  part photoCapture: PhotoCapture\n\n  flow\n    sceneSelector.selectedScene -> autoFocus.inputScene\n    autoFocus.outputImage -> photoCapture.inputImage\n    photoCapture.outputPhoto -> user\nend PhotoCaptureSystem\n\nblock SceneSelector\n  out port selectedScene\nend SceneSelector\n\nblock AutoFocus\n  in port inputScene\n  out port outputImage\nend AutoFocus\n\nblock PhotoCapture\n  in port inputImage\n  out port outputPhoto\nend PhotoCapture\n```",
    "\n```sysml\nblock PhotoWorkflow\n  part Focusing\n  part Shooting\n  flow\n    Focusing -> Shooting\n  end flow\nend PhotoWorkflow\n```",
    "\n```sysml\npackage PhotographyWorkflow {\n  block FocusProcess {\n    operation focus()\n  }\n\n  block ShootProcess {\n    operation shoot()\n  }\n\n  block User {\n    operation selectScene()\n    operation viewImage()\n  }\n\n  flow flow1 {\n    user = User()\n    focusProcess = FocusProcess()\n    shootProcess = ShootProcess()\n    user.selectScene()\n    focusProcess.focus()\n    user.viewImage()\n    shootProcess.shoot()\n  }\n}\n```",
    "\n```sysml\npackage PhotographyAutomation\n  block FocusProcessing\n    in port: scene\n    out port: image\n  end FocusProcessing\n\n  block ShootingOperation\n    in port: image\n    out port: photograph\n  end ShootingOperation\n\n  block PhotographyAutomation\n    in port: shootingScene\n    out port: finalPhotograph\n\n    part: focusProcessing = FocusProcessing\n    part: shootingOperation = ShootingOperation\n\n    flow: shootingScene -> focusProcessing.scene\n    flow: focusProcessing.image -> shootingOperation.image\n    flow: shootingOperation.photograph -> finalPhotograph\n  end PhotographyAutomation\nend package\n```",
    "\n```sysml\nblock PhotographyWorkflow\n  part Focus\n  part Scene\n  part Image\n  part Shoot\n  part Picture\n\n  flow\n    Scene -> Focus -> Image -> Shoot -> Picture\nend PhotographyWorkflow\n```",
    "\n```sysml\npackage PhotographyWorkflow {\n  block Focus {\n    operation focus()\n  }\n\n  block Shoot {\n    operation shoot()\n  }\n\n  block User {\n    operation selectScene()\n    operation capturePhoto()\n  }\n\n  flow {\n    user.selectScene -> focus.focus -> {\n      if (focus.isFocused()) {\n        shoot.shoot -> user.capturePhoto\n      }\n    }\n  }\n}\n```",
    "\n```sysml\npackage FocusQualityEvaluation {\n  block FocusQualityEvaluator {\n    in (Image) imageIn\n    out (Boolean) isFocused\n  }\n}\n\npackage ShootingOperation {\n  block Shooting {\n    in (Image) imageIn\n    out (Photo) photoOut\n  }\n}\n\npackage Workflow {\n  block User {\n    out (Scene) sceneOut\n  }\n\n  block System {\n    in (Scene) sceneIn\n    out (Photo) photoOut\n\n    part focusQualityEvaluator: FocusQualityEvaluation.FocusQualityEvaluator\n    part shooting: ShootingOperation.Shooting\n\n    flow f1 {\n      from sceneIn to focusQualityEvaluator.imageIn\n      from focusQualityEvaluator.isFocused to shooting.imageIn\n      from shooting.photoOut to photoOut\n    }\n  }\n}\n```",
    "\n```\npackage PhotographyWorkflow\n  block TakePhoto\n    operation takePhoto\n  end\n\n  block Focus\n    operation focus\n  end\n\n  block Shoot\n    operation shoot\n  end\n\n  block Display\n    operation display\n  end\n\n  package System\n    part takePhoto: TakePhoto\n    part focus: Focus\n    part shoot: Shoot\n    part display: Display\n\n    flow acquireScene\n    flow performFocus\n    flow performShoot\n    flow showResult\n\n    flow takePhoto.takePhoto -> acquireScene\n    flow acquireScene -> focus.focus\n    flow focus.focus -> performFocus\n    flow performFocus -> shoot.shoot\n    flow shoot.shoot -> performShoot\n    flow performShoot -> display.display\n    flow display.display -> showResult\n  end\nend\n```",
    "\n```sysml\npackage VehicleBrakingSystem {\n  block AutomaticBrakingControl {\n    operation start() {\n      // Activate the system\n    }\n    operation monitorBrakePedal() {\n      // Monitor the status of the brake pedal\n    }\n    operation monitorTraction() {\n      // Monitor traction information\n    }\n    operation adjustBrakePressure() {\n      // Adjust the brake pressure\n    }\n    operation adjustModulationFrequency() {\n      // Adjust the modulation frequency\n    }\n    operation ensureSafety() {\n      // Ensure safe and reliable braking\n    }\n    operation optimizePerformance() {\n      // Operate in the optimal state\n    }\n  }\n}\n```",
    "\n```sysml\npackage BatteryChargingControlSystem {\n  block Battery {\n    part level: Real\n  }\n\n  block ChargingControlSystem {\n    flow Real monitorBatteryLevel()\n    operation automaticCharging()\n    operation automaticTermination()\n  }\n\n  block User {\n    operation monitorSystem()\n  }\n\n  package CoreFunctions {\n    block BatteryCapacityMonitoring {\n      operation monitor()\n    }\n\n    block AutomaticCharging {\n      operation charge()\n    }\n\n    block ChargingTerminationControl {\n      operation control()\n    }\n  }\n\n  package SystemInteraction {\n    connector MonitorBatteryLevel {\n      flow Real level\n    }\n\n    connector AutomaticCharging {\n      operation charge()\n    }\n\n    connector ChargingTerminationControl {\n      operation control()\n    }\n  }\n\n  package SystemFlow {\n    flow Real monitorBatteryLevel()\n    flow Real automaticCharging()\n    flow Real automaticTermination()\n",
    "\n```sysml\npackage ChargingSystem {\n  block Battery {\n    part level: Real;\n    operation charge(current: Real) {\n      precondition: level < 100\n      postcondition: level >= 100\n    }\n  }\n  block ChargingSystem {\n    part battery: Battery;\n    operation startCharging() {\n      precondition: battery.level < 100\n      postcondition: battery.level >= 100\n    }\n  }\n}\n```",
    "\n```sysml\npackage CameraFunction {\n  block Camera {\n    part autoFocusSubsystem {\n      type: AutoFocusSubsystem\n    }\n    part imagingSubsystem {\n      type: ImagingSubsystem\n    }\n    flow {\n      from: user\n      to: autoFocusSubsystem\n      label: \"select scene\"\n    }\n    flow {\n      from: autoFocusSubsystem\n      to: imagingSubsystem\n      label: \"obtain clear image\"\n    }\n    flow {\n      from: imagingSubsystem\n      to: user\n      label: \"capture photo\"\n    }\n    flow {\n      from: imagingSubsystem\n      to: system\n      label: \"record and save photo\"\n    }\n  }\n  block AutoFocusSubsystem {\n    // implementation details\n  }\n  block ImagingSubsystem {\n    // implementation details\n  }\n}\n```",
    "\n```sysml\npackage Shooting_Process {\n  block Viewfinder {\n    operation findScene()\n  }\n\n  block Focus {\n    operation autoFocus()\n  }\n\n  block Imaging {\n    operation generateImage()\n    operation captureImage()\n  }\n\n  block User {\n    operation selectScene()\n  }\n\n  flow {\n    findScene() -> autoFocus() -> generateImage() -> captureImage()\n    selectScene() -> findScene()\n  }\n}\n```",
    "\n```sysml\npackage VehicleSimulation {\n  block Vehicle {\n    part mass: Real;\n    part initialPosition: Real;\n    part initialVelocity: Real;\n    part timeInterval: Real;\n    part powerInput: Real;\n    part speed: Real;\n    part position: Real;\n\n    operation calculateSpeed() {\n      // Calculate speed based on power input and mass\n    }\n\n    operation calculatePosition() {\n      // Calculate position based on speed and time interval\n    }\n  }\n\n  block Simulation {\n    part vehicle: Vehicle;\n    part timeSteps: Integer;\n\n    operation runSimulation() {\n      // Run the simulation for the given time steps\n    }\n  }\n}\n```",
    "\n```\n@model\npackage CameraSystem\n\nblock Camera {\n  part inputScene: String\n  part focusedImage: Image\n  part capturedPhoto: Photo\n  part displayedPhoto: Photo\n\n  flow FocusScene {\n    inputScene -> focusedImage\n  }\n\n  flow CapturePhoto {\n    focusedImage -> capturedPhoto\n  }\n\n  flow DisplayPhoto {\n    capturedPhoto -> displayedPhoto\n  }\n\n  flow Shoot {\n    inputScene -> FocusScene -> CapturePhoto -> DisplayPhoto\n  }\n}\n\nblock Image {}\n\nblock Photo {}\n```",
    "\n```sysml\npackage CameraInformationProcessingWorkflow {\n  block Viewfinder {\n    operation selectScene()\n    flowPort out focusOnScene: FlowPort\n  }\n  block Focus {\n    flowPort in focusOnScene: FlowPort\n    operation focus()\n    flowPort out obtainImage: FlowPort\n  }\n  block Capture {\n    flowPort in obtainImage: FlowPort\n    operation capture()\n    flowPort out generatePhotograph: FlowPort\n  }\n  block Display {\n    flowPort in generatePhotograph: FlowPort\n    operation display()\n  }\n  block User {\n    operation selectScene()\n    operation shoot()\n  }\n  package SceneSelection {\n    block Viewfinder\n    block User\n  }\n  package Focusing {\n    block Focus\n  }\n  package Capturing {\n    block Capture\n  }\n  package Displaying {\n    block Display\n  }\n  package Workflow {\n    block SceneSelection\n    block Focusing\n    block Capturing\n    block Displaying\n  }\n}\n```",
    "\n```sysml\nblock SensorManagementSystem\n  part sensor: Sensor\n  part sensorStatus: SensorStatus\n  part updateOperation: UpdateOperation\n\n  flow SensorStatusToSensorManagementSystem {\n    from sensorStatus.readySensor\n    to SensorManagementSystem.manageSensors\n  }\n\n  flow SensorManagementSystemToUpdateOperation {\n    from SensorManagementSystem.manageSensors\n    to updateOperation.update\n  }\n\n  flow SensorManagementSystemToSensor {\n    from SensorManagementSystem.manageSensors\n    to sensor.traverse\n  }\nend SensorManagementSystem\n\nblock Sensor\n  operation traverse\n  operation update\nend Sensor\n\nblock SensorStatus\n  operation checkStatus\n  part readySensor: Sensor\nend SensorStatus\n\nblock UpdateOperation\n  operation update\nend UpdateOperation\n```",
    "\n```sysml\npackage VehicleStateManagement {\n  block Vehicle {\n    state off {\n      transition startSignal: starting\n    }\n    state starting {\n      transition powerOnSignal: on\n    }\n    state on {\n      transition shutdownSignal: off\n    }\n  }\n  signal startSignal\n  signal powerOnSignal\n  signal shutdownSignal\n}\n```",
    "\n```sysml\npackage VehicleStateManagement {\n  block Vehicle {\n    state off {\n      transition to starting : VehicleStartSignal;\n    }\n    state starting {\n      transition to on : VehicleOnSignal;\n    }\n    state on {\n      transition to off : VehicleOffSignal;\n    }\n  }\n}\n```",
    "\n```sysml\npackage VehiclePowerManagement {\n  block VehiclePowerState {\n    part: VehicleOff\n    part: VehicleStartPhase\n    part: VehiclePoweredOn\n  }\n\n  block VehicleOff {\n    operation enter()\n    operation exit()\n  }\n\n  block VehicleStartPhase {\n    operation enter()\n    operation exit()\n  }\n\n  block VehiclePoweredOn {\n    operation enter()\n    operation exit()\n    operation selfDiagnosis()\n    operation supplyPower()\n  }\n\n  block VehiclePowerManagement {\n    flow: VehicleStartCommand -> VehicleStartPhase\n    flow: VehicleStartedSignal -> VehiclePoweredOn\n    flow: VehiclePoweredOn -> VehicleShutdownCommand\n    flow: VehicleShutdownCommand -> VehicleOff\n  }\n}\n```",
    "\n```sysml\npackage VehicleControlSystem {\n  block StartUp {\n    event startSignal\n    event startedSignal\n    event shutdownSignal\n    event operationSignal\n    event vehicleStartSignal\n    event vehicleShutdownSignal\n    event vehicleStartedSignal\n    event vehicleOperationSignal\n  }\n  block Shutdown {\n    event startSignal\n    event startedSignal\n    event shutdownSignal\n    event operationSignal\n    event vehicleStartSignal\n    event vehicleShutdownSignal\n    event vehicleStartedSignal\n    event vehicleOperationSignal\n  }\n  block Running {\n    event startSignal\n    event startedSignal\n    event shutdownSignal\n    event operationSignal\n    event vehicleStartSignal\n    event vehicleShutdownSignal\n    event vehicleStartedSignal\n    event vehicleOperationSignal\n  }\n  transition from StartUp to Running {\n    guard vehicleStartSignal\n    effect setVehicleStatusToRunning\n  }\n  transition from Shutdown to StartUp {\n    guard vehicleStartSignal\n ",
    "\n```sysml\npackage VehiclePowerManagement {\n  block Off {\n    operation entry() {}\n  }\n  block Start {\n    operation entry() {}\n  }\n  block On {\n    operation entry() {}\n  }\n  transition OffToStart {\n    from Off\n    to Start\n    effect {\n      startUp()\n    }\n  }\n  transition StartToOn {\n    from Start\n    to On\n    effect {\n      onSignal()\n    }\n  }\n  transition OnToOff {\n    from On\n    to Off\n    effect {\n      offSignal()\n    }\n  }\n  statechart {\n    state Off {\n      entry {\n        Off.entry()\n      }\n      transition {\n        OffToStart\n      }\n    }\n    state Start {\n      entry {\n        Start.entry()\n      }\n      transition {\n        StartToOn\n      }\n    }\n    state On {\n      entry {\n        On.entry()\n      }\n      transition {\n        OnToOff\n      }\n    }\n  }\n}\n",
    "\n```sysml\npackage VehicleHealthManagement {\n  block Maintenance {\n    operation performMaintenance()\n    operation updateMaintenanceCycleTime()\n  }\n\n  block HealthMonitor {\n    operation monitorTemperature()\n    operation setStatus(status: String)\n  }\n\n  block VehicleController {\n    operation receiveWarning(warning: String)\n  }\n\n  block VehicleHealthManagementSystem {\n    part monitor: HealthMonitor\n    part maintenance: Maintenance\n    part controller: VehicleController\n\n    operation start()\n    operation stop()\n  }\n}\n```",
    "\n```sysml\nblock Server\n  part Clock : LocalClock\n  part RequestPort : Port\n  state off\n  state waiting\n  state response\n\n  transition from off to waiting\n    event start\n  end transition\n\n  transition from waiting to response\n    event request\n  end transition\n\n  transition from response to waiting\n    event waitForFiveMinutes\n  end transition\n\n  transition from response to off\n    event dailyReset\n  end transition\n\n  event dailyReset\n    at 11:59:00\n  end event\n\n  event waitForFiveMinutes\n    at 00:05:00\n  end event\nend block\n```",
    "\n```sysml\nblock VehicleStartStop {\n  part stateMachine : StateMachine {\n    state Off {\n      transition startSignal : To(StartProcess)\n    }\n    state StartProcess {\n      entry / powerOnSignal and brakeDepressed / : To(Operating)\n    }\n    state Operating {\n      entry / startSignal / : To(Operating)\n      do / selfCheck /\n      do / supplyPower /\n      transition stopSignal : To(Off)\n    }\n    state Off {\n      entry / stopSignal / : To(Off)\n      do / applyParkingBrake /\n    }\n  }\n  part selfCheck() : Operation {\n    stereotypes: «behavior»\n  }\n  part supplyPower() : Operation {\n    stereotypes: «behavior»\n  }\n  part applyParkingBrake() : Operation {\n    stereotypes: «behavior»\n  }\n}\n```",
    "\n```sysml\npackage VehicleControlSystem {\n  block StartStopControl {\n    part state: StateMachine {\n      state off {\n        transition startSignal: startUp\n      }\n      state startUp {\n        entry / selfCheck\n        transition selfCheckComplete: started\n      }\n      state started {\n        entry / supplyPower\n        exit / applyParkingBrake\n        transition shutdownSignal: off\n      }\n    }\n    part vehicleController {\n      flow startControlSignal\n      flow shutdownSignal\n    }\n  }\n}\n```",
    "\n```sysml\npackage CruiseControlSystem {\n  block Driver {\n    event setDesiredSpeed(speed: Real)\n  }\n\n  block CruiseController {\n    event receiveSetSpeedCommand(speed: Real)\n    event receiveActualSpeed(speed: Real)\n    event sendFuelControlCommand(command: Real)\n  }\n\n  block Speedometer {\n    event receiveActualSpeed(speed: Real)\n    event sendActualSpeed(speed: Real)\n  }\n\n  block Engine {\n    event receiveFuelControlCommand(command: Real)\n    event adjustOutput(command: Real)\n  }\n\n  block Vehicle {\n    part driver: Driver\n    part cruiseController: CruiseController\n    part speedometer: Speedometer\n    part engine: Engine\n\n    flow setDesiredSpeed {\n      driver.setDesiredSpeed -> cruiseController.receiveSetSpeedCommand\n    }\n\n    flow receiveActualSpeed {\n      speedometer.sendActualSpeed -> cruiseController.receiveActualSpeed\n    }\n\n    flow sendFuelControlCommand {\n     ",
    "\n```sysml\npackage CruiseControl\n  block SetSpeedCommand\n    operation setSpeed(speed: Real)\n  end\n\n  block CruiseController\n    part speedometer: Speedometer\n    part engineSystem: EngineSystem\n    flow port speedFlow\n    flow port throttleControlFlow\n    operation calculateThrottleControl(actualSpeed: Real, setSpeed: Real)\n  end\n\n  block Speedometer\n    operation getSpeed(): Real\n  end\n\n  block EngineSystem\n    operation applyThrottleControl(throttleControl: Real)\n  end\n\n  package Driver\n    flow port driverToCruiseController\n  end\n\n  package Vehicle\n    flow port cruiseControllerToEngineSystem\n  end\n\n  package Environment\n    flow port speedometerToCruiseController\n  end\n\n  package System\n    block System\n      part cruiseController: CruiseController\n      part driver: Driver\n      part vehicle: Vehicle\n      part environment: Environment\n      flow port driverToCruiseController\n      flow port cruiseControllerToEngineSystem\n      flow port speedometerToCruiseController",
    "\n```sysml\nblock CruiseControl\n  part speedSensor in SpeedSensor\n  part driver in Driver\n  part engine in Engine\n  part cruiseController in CruiseController\n\n  flow port in driverOut\n  flow port in speedSensorOut\n  flow port in engineIn\n  flow port in cruiseControllerOut\n\n  connector driverToCruiseController\n  connector speedSensorToCruiseController\n  connector cruiseControllerToEngine\n\n  block Driver\n    flow out driverOut\n  end\n\n  block SpeedSensor\n    flow out speedSensorOut\n  end\n\n  block Engine\n    flow in engineIn\n  end\n\n  block CruiseController\n    flow in speedSensorOut\n    flow in driverOut\n    flow out cruiseControllerOut\n    flow out engineIn\n  end\nend\n```",
    "\n```sysml\npackage CruiseControl\n  block DriverCommand\n    operation setDesiredSpeed(desiredSpeed: Real)\n  end\n\n  block Speedometer\n    operation getCurrentSpeed(): Real\n  end\n\n  block CruiseController\n    operation calculateThrottleControl(desiredSpeed: Real, currentSpeed: Real): Real\n  end\n\n  block Engine\n    operation setThrottle(throttle: Real)\n  end\n\n  flow\n    DriverCommand.setDesiredSpeed -> CruiseController.calculateThrottleControl\n    Speedometer.getCurrentSpeed -> CruiseController.calculateThrottleControl\n    CruiseController.calculateThrottleControl -> Engine.setThrottle\n  end\nend\n```",
    "\n```sysml\npackage AutomotiveCruiseControl\n  block CruiseControlInterface\n    operation setTargetSpeed(targetSpeed: Real)\n  end\n\n  block SpeedSensor\n    operation getCurrentSpeed(): Real\n  end\n\n  block CruiseController\n    in port targetSpeedIn: Real\n    in port currentSpeedIn: Real\n    out port fuelControlOut: Real\n    operation process()\n  end\n\n  block Engine\n    in port fuelControlIn: Real\n    operation adjustOutput(fuelControl: Real)\n  end\n\n  package Vehicle\n    part sensor: SpeedSensor\n    part controller: CruiseController\n    part engine: Engine\n    part interface: CruiseControlInterface\n\n    flow flow1\n      from interface.setTargetSpeed\n      to controller.targetSpeedIn\n\n    flow flow2\n      from sensor.getCurrentSpeed\n      to controller.currentSpeedIn\n\n    flow flow3\n      from controller.fuelControlOut\n      to engine.adjustOutput\n  end\nend\n```",
    "\n```sysml\npackage VehicleCruiseControl {\n  block CruiseController {\n    operation calculateFuelControlCommand()\n    operation processSetSpeedCommand()\n    flow in realTimeSpeed\n    flow out fuelControlCommand\n  }\n\n  block SpeedSensor {\n    flow out realTimeSpeed\n  }\n\n  block EngineController {\n    operation processFuelControlCommand()\n    flow in fuelControlCommand\n    flow out engineCommand\n  }\n\n  block Engine {\n    flow in engineCommand\n  }\n\n  connector MessageInterface {\n    flow speedControlCommand\n  }\n\n  CruiseController.calculateFuelControlCommand -> CruiseController.fuelControlCommand\n  CruiseController.processSetSpeedCommand -> SpeedSensor.realTimeSpeed\n  SpeedSensor.realTimeSpeed -> CruiseController.realTimeSpeed\n  CruiseController.fuelControlCommand -> EngineController.fuelControlCommand\n  EngineController.processFuelControlCommand -> EngineController.engineCommand\n  EngineController.engineCommand -> Engine.engineCommand\n}\n```",
    "\n```sysml\npackage VehicleLifecycle {\n  class Vehicle {\n    attribute String id;\n    attribute String make;\n    attribute String model;\n    attribute String color;\n    attribute String year;\n    attribute String deliveryDate;\n    attribute Owner currentOwner;\n    attribute List<Owner> previousOwners;\n    attribute List<DrivingOperation> drivingOperations;\n    attribute String scrappingDate;\n  }\n\n  class Owner {\n    attribute String name;\n    attribute String address;\n    attribute String phoneNumber;\n  }\n\n  class DrivingOperation {\n    attribute String date;\n    attribute Driver driver;\n  }\n\n  class Driver {\n    attribute String name;\n    attribute String licenseNumber;\n  }\n\n  package VehicleLifecycleManagement {\n    block Assembly {\n      operation assemble(in Vehicle vehicle);\n    }\n\n    block Delivery {\n      operation deliver(in Vehicle vehicle);\n    }\n\n    block OwnershipTransfer {\n      operation transfer(in Vehicle vehicle, in Owner newOwner);\n   ",
    "\n```sysml\npackage Vehicle {\n  block Vehicle {\n    part engine: Engine;\n    part driver: Driver;\n    part wheels: Wheels;\n    attribute mass: Real;\n    attribute operationalStatus: OperationalStatus;\n  }\n\n  block Driver {\n    attribute name: String;\n  }\n\n  block OperationalStatus {\n    attribute gear: Integer;\n    attribute acceleratorPedalPosition: Real;\n  }\n\n  block Wheels {\n    part leftFrontWheel: Wheel;\n    part rightFrontWheel: Wheel;\n  }\n\n  block Wheel {\n    attribute rotationSpeed: Real;\n    attribute pressure: Real;\n  }\n\n  instance vehicle_1: Vehicle;\n}\n```",
    "\n```sysml\npackage VehicleSystem {\n  block Vehicle {\n    attribute real mass;\n    block State {\n      attribute Gear gear;\n      attribute real acceleratorPosition;\n    }\n  }\n  block Vehicle_1 {\n    attribute Vehicle base;\n    block State_1 {\n      attribute Gear gear = 0;\n      attribute real acceleratorPosition = 0.0;\n    }\n    block State_2 {\n      attribute Gear gear = 2;\n      attribute real acceleratorPosition = 0.5;\n    }\n  }\n}\n```",
    "\n```\npackage Vehicle {\n  block Vehicle {\n    part engine: Engine;\n    attribute mass: Real;\n    attribute gear: Gear;\n    attribute throttle: Real;\n    attribute driver: Driver;\n  }\n  block Engine {\n    // attributes and operations specific to an engine\n  }\n  block Driver {\n    attribute name: String;\n    // other attributes and operations specific to a driver\n  }\n  enumeration Gear {\n    neutral, first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth\n  }\n  package Scenario {\n    block InitialState {\n      flow Vehicle vehicle;\n      flow Engine engine;\n      flow Driver alice;\n      flow Driver bob;\n      vehicle.mass = 2000;\n      vehicle.gear = Gear::neutral;\n      vehicle.throttle = 0;\n      vehicle.driver = alice;\n    }\n    block TimeSlice1 {\n      flow Vehicle vehicle;\n      vehicle.mass = 1500;\n     ",
    "\n```sysml\npackage VehicleMassModel\n  class Component\n    attribute mass: Real\n    operation calculateTotalMass(): Real\n  end\n\n  class CompositeComponent extends Component\n    attribute subcomponents: Set(Component)\n    operation calculateTotalMass(): Real\n  end\n\n  class Vehicle extends CompositeComponent\n    attribute coreComponents: Set(Component)\n  end\n\n  operation calculateVehicleMass(vehicle: Vehicle): Real\nend\n```",
    "\n```sysml\npackage VehicleManagementSystem {\n  class Vehicle {\n    attribute String VIN;\n    attribute Real totalMass;\n    part {\n      Component components;\n    }\n  }\n\n  class Component {\n    attribute String serialNumber;\n    attribute Real mass;\n    part {\n      Component subcomponents;\n    }\n  }\n\n  operation calculateTotalMass(vehicle: Vehicle) {\n    // Calculate total mass of the vehicle\n  }\n\n  operation filterComponentsByMass(vehicle: Vehicle, threshold: Real) {\n    // Filter components by mass\n  }\n}\n```",
    "\n```sysml\npackage ObjectManagement {\n  class Object {\n    attribute real simpleMass;\n    attribute real totalMass;\n  }\n\n  class SimpleThing extends Object {\n    constraint simpleMass = totalMass;\n  }\n\n  class CompositeThing extends Object {\n    association component: Object[*];\n    derived union: real = sum(component.totalMass);\n    constraint totalMass = simpleMass + union;\n  }\n}\n```",
    "\n```sysml\npackage ObjectMassManagementSystem {\n  class Object {\n    attribute basicMass: Real\n    attribute subcomponents: Set(Object)\n    operation calculateTotalMass(): Real {\n      if subcomponents->isEmpty() then basicMass\n      else basicMass + subcomponents->sum(o | o.calculateTotalMass())\n    }\n  }\n  class System {\n    attribute objects: Set(Object)\n    operation filterAndAggregate(minMass: Real): Real {\n      objects->select(o | o.calculateTotalMass() >= minMass)->sum(o | o.calculateTotalMass())\n    }\n  }\n}\n```",
    "\n```sysml\npackage VehicleDynamics\n  block VehicleParameters\n    parameter Real wheelPower 'Wheel power';\n    parameter Real aerodynamicDragCoefficient 'Aerodynamic drag coefficient';\n    parameter Real frictionCoefficient 'Friction coefficient';\n    parameter Real vehicleMass 'Vehicle mass';\n    parameter Real speed 'Speed';\n    parameter Real time 'Time';\n  end VehicleParameters;\n\n  block PowerOutput\n    input Real wheelPower;\n    input Real aerodynamicDragCoefficient;\n    input Real frictionCoefficient;\n    input Real vehicleMass;\n    output Real powerOutput 'Power output';\n  end PowerOutput;\n\n  block Acceleration\n    input Real powerOutput;\n    input Real vehicleMass;\n    input Real speed;\n    output Real acceleration 'Acceleration';\n  end Acceleration;\n\n  block SpeedCalculation\n    input Real acceleration;\n    input Real initialSpeed;\n    input Real time;\n    output Real speed 'Speed at any moment';\n  end SpeedCalculation;\n\n  block Displacement\n",
    "\n```sysml\npackage VehicleDynamicSimulation\n  block VehicleParameters\n    parameter Real dragCoefficient 'Aerodynamic drag coefficient';\n    parameter Real rollingResistanceCoefficient 'Rolling resistance coefficient';\n    parameter Real wheelEndOutputPower 'Wheel-end output power';\n    parameter Real totalVehicleMass 'Total vehicle mass';\n    parameter Real initialSpeed 'Initial speed';\n    parameter Real initialPosition 'Initial position';\n    parameter Real timeStep 'Time step';\n  end VehicleParameters;\n\n  block VehicleDynamics\n    import VehicleParameters::*;\n    Real availableDrivingPower 'Available driving power';\n    Real acceleration 'Vehicle acceleration';\n    Real speed 'Vehicle speed';\n    Real position 'Vehicle position';\n\n    equation\n      availableDrivingPower = wheelEndOutputPower - dragCoefficient * speed^2 - rollingResistanceCoefficient * speed;\n      acceleration = availableDrivingPower / totalVehicleMass;\n      speed = initialSpeed + acceleration * timeStep;\n      position = initialPosition + speed",
    "\n```sysml\npackage VehicleDynamics\n  block Vehicle\n    parameter Real mass;\n    parameter Real wheelPower;\n    parameter Real dragCoefficient;\n    parameter Real rollingResistanceCoefficient;\n    parameter Real initialSpeed;\n    parameter Real initialPosition;\n    output Real speed;\n    output Real position;\n  end Vehicle\n\n  block DrivingDynamics\n    parameter Vehicle vehicle;\n    input Real timeStep;\n    output Real speed;\n    output Real position;\n  end DrivingDynamics\nend VehicleDynamics\n```",
    "\n```sysml\npackage VehicleDynamicModel\n  block Vehicle\n    parameter Real initialPosition = 0;\n    parameter Real initialVelocity = 0;\n    parameter Real mass = 0;\n    parameter Real power = 0;\n    parameter Real timeInterval = 0;\n    parameter Real airResistanceCoefficient = 0;\n    parameter Real frictionCoefficient = 0;\n    parameter Real otherParameters = 0;\n    \n    output Real acceleration;\n    output Real finalVelocity;\n    output Real finalPosition;\n    \n    algorithm\n      // Calculate acceleration, final velocity, and final position based on the input parameters\n      // Consider the effects of air resistance, friction, and other factors\n      // Solve the dynamic equations under relevant constraints to ensure physical consistency and accuracy\n  end Vehicle;\nend VehicleDynamicModel;\n```",
    "\n```sysml\npackage VehicleWeightManagement {\n  block Chassis {\n    parameter mass: Real;\n  }\n  block Engine {\n    parameter mass: Real;\n  }\n  block Gearbox {\n    parameter mass: Real;\n  }\n  block Vehicle {\n    part chassis: Chassis;\n    part engine: Engine;\n    part gearbox: Gearbox;\n    constraint totalMass {\n      chassis.mass + engine.mass + gearbox.mass <= 2500;\n    }\n    operation checkOverweight() {\n      if (chassis.mass + engine.mass + gearbox.mass > 2500) {\n        print(\"Overweight warning: The total mass exceeds the permitted limit of 2500 kg.\");\n      }\n    }\n  }\n}\n```",
    "\n```sysml\npackage VehicleMassBudgeting {\n  block MassBudgetController {\n    part actualMasses: MassRepository;\n    part massLimit: MassLimit;\n    flow limitCheck {\n      actualMasses.totalMass -> massLimit.check;\n    }\n  }\n  block MassRepository {\n    attribute totalMass: Real;\n    operation addMass(component: String, mass: Real);\n    operation getMass(component: String): Real;\n  }\n  block MassLimit {\n    attribute limit: Real = 2500;\n    operation check(totalMass: Real): Boolean;\n  }\n}\n```",
    "\n```sysml\npackage VehicleMassManagement {\n  block Vehicle {\n    part chassis: MassComponent\n    part engine: MassComponent\n    part transmission: MassComponent\n    constraint totalMass {\n      chassis.mass + engine.mass + transmission.mass <= 2500\n    }\n  }\n  block MassComponent {\n    attribute mass: Real\n  }\n}\n```",
    "\n```sysml\npackage VehicleWeightManagement {\n  block WeightManager {\n    part chassisWeight: Real;\n    part engineWeight: Real;\n    part transmissionWeight: Real;\n    part totalWeight: Real;\n    \n    constraint weightLimit {\n      totalWeight <= 2500\n    }\n    \n    flow {\n      chassisWeight -> totalWeight;\n      engineWeight -> totalWeight;\n      transmissionWeight -> totalWeight;\n    }\n    \n    operation calculateTotalWeight() {\n      totalWeight = chassisWeight + engineWeight + transmissionWeight;\n    }\n    \n    event totalWeightExceedsLimit {\n      trigger totalWeight > 2500;\n      effect {\n        // Warning or restrictions to be implemented\n      }\n    }\n  }\n}\n```",
    "\n```sysml\npackage VehicleDesign {\n  block Vehicle {\n    part chassis: Chassis {\n      attribute mass: Real;\n    }\n    part engine: Engine {\n      attribute mass: Real;\n    }\n    part transmission: Transmission {\n      attribute mass: Real;\n    }\n    constraint totalMass {\n      chassis.mass + engine.mass + transmission.mass <= 2500;\n    }\n    block DynamicConstraints {\n      attribute initialVelocity: Real;\n      attribute finalVelocity: Real;\n      attribute mass: Real {\n        invariant 'Mass must be greater than zero': mass > 0;\n      }\n      attribute appliedForce: Real;\n      attribute time: Real;\n      constraint forceRelationship {\n        finalVelocity = initialVelocity + (appliedForce / mass) * time;\n      }\n    }\n  }\n}\n```",
    "\n```sysml\npackage MaintenanceScheduleSystem {\n  block Vehicle {\n    attribute String name\n    attribute Date nextMaintenanceTime\n    attribute Date actualMaintenanceTime\n    attribute Duration maintenanceInterval\n    attribute Integer maxTemperature\n    attribute State state\n  }\n\n  block MaintenanceScheduleSystem {\n    part Vehicle[] vehicles\n    operation checkMaintenance(): Boolean {\n      for (vehicle in vehicles) {\n        if (vehicle.state == \"under maintenance\") {\n          continue\n        }\n        if (now >= vehicle.nextMaintenanceTime) {\n          vehicle.actualMaintenanceTime = now\n          vehicle.state = \"under maintenance\"\n          return true\n        }\n      }\n      return false\n    }\n    operation completeMaintenance(Vehicle vehicle) {\n      require(vehicle.state == \"under maintenance\")\n      vehicle.nextMaintenanceTime = vehicle.actualMaintenanceTime + vehicle.maintenanceInterval\n      vehicle.state = \"healthy\"\n    }\n  }\n}\n```",
    "\n```sysml\nblock Vehicle {\n  part curbWeight: Mass\n  part fuelMass: Mass\n  part engine: Engine\n  part transmission: Transmission\n  part driveSystem: DriveSystem\n\n  constraint massLimit {\n    curbWeight + fuelMass <= maxMass\n    fuelMass > 0\n  }\n\n  flow speedCurve {\n    engine.torque' = engine.generateTorque(speed)\n  }\n\n  flow clutchInterface {\n    transmission.torque' = engine.torque\n  }\n\n  flow powerDelivery {\n    driveSystem.power' = transmission.power\n  }\n}\n\nblock Mass {}\n\nblock Engine {\n  operation generateTorque(speed: Real): Real\n}\n\nblock Transmission {\n  part torque: Real\n  part power: Real\n}\n\nblock DriveSystem {\n  part power: Real\n}\n```",
    "\n```sysml\npackage Vehicle {\n  block Vehicle {\n    part FuelTank {\n      attribute mass: Real\n      attribute isFull: Boolean\n    }\n    part Engine {\n      attribute torque: Real\n      attribute speed: Real\n      operation calculateTorque() : Real\n    }\n    part Clutch {\n      attribute torque: Real\n    }\n    part Transmission {\n      attribute torque: Real\n    }\n    constraint massControl {\n      if FuelTank.isFull then\n        Vehicle.mass = FuelTank.mass + sum(parts - FuelTank).mass\n      else\n        Vehicle.mass = FuelTank.mass + sum(parts - FuelTank).mass\n      endif\n      FuelTank.mass in 0..1500\n      Vehicle.mass in 0..2000\n    }\n    constraint torqueControl {\n      Clutch.torque = Engine.calculateTorque()\n      Transmission.torque = Clutch.torque\n    }\n  }\n}",
    "\n```sysml\npackage Vehicle {\n  block Vehicle {\n    part mass: Real;\n    part emptyMass: Real;\n    part fuelCapacity: Real;\n    constraint mass_constraint1 {\n      self.mass >= self.emptyMass\n    }\n    constraint mass_constraint2 {\n      self.mass <= 2000\n    }\n  }\n  block Engine {\n    part torque: Real;\n    part speed: Real;\n    part performanceTable: Table;\n    flow torqueFlow {\n      from clutch;\n      to transmissionSystem;\n    }\n    function calculateTorque() {\n      self.torque = self.performanceTable.get(self.speed);\n    }\n  }\n  block Clutch {\n    flow torqueFlow {\n      from engine;\n      to transmissionSystem;\n    }\n  }\n  block TransmissionSystem {\n    part torque: Real;\n    part gearRatio: Real;\n    function calculatePower() {\n      self.power = self.torque * self.gearRatio;\n    }",
    "\n```sysml\nblock VehicleMassControl {\n  part fuelTank: FuelTank;\n  part vehicle: Vehicle;\n  part engine: Engine;\n  part gearbox: Gearbox;\n  part clutch: Clutch;\n\n  constraint massLimit {\n    if (fuelTank.isFull) {\n      vehicle.mass <= 2000;\n    } else {\n      vehicle.mass <= 1500;\n    }\n  }\n\n  flow torqueFlow {\n    engine.torque -> clutch.inputTorque;\n    clutch.outputTorque -> gearbox.inputTorque;\n  }\n}\n\nblock FuelTank {\n  attribute isFull: boolean;\n  attribute mass: real;\n}\n\nblock Vehicle {\n  attribute mass: real;\n}\n\nblock Engine {\n  attribute torque: real;\n}\n\nblock Gearbox {\n  attribute inputTorque: real;\n}\n\nblock Clutch {\n  attribute inputTorque: real;\n ",
    "\n```sysml\npackage VehiclePerformanceAnalysis {\n  block Vehicle {\n    attribute curbWeight: Real\n    attribute payload: Real\n    attribute wheelDiameter: Real\n    attribute transmissionEfficiency: Real\n    attribute fuelEconomyUrban: Real\n    attribute fuelEconomyHighway: Real\n  }\n\n  block DrivingCycle {\n    attribute timeStampedPosition: List<Real>\n    attribute timeStampedSpeed: List<Real>\n  }\n\n  block AnalysisSystem {\n    part vehicle: Vehicle\n    part drivingCycle: DrivingCycle\n    operation calculateEnginePower(): Real\n    operation calculateAcceleration(): Real\n    operation calculateSpeed(): Real\n    operation calculatePosition(): Real\n    operation calculateFuelEconomy(): Real\n    operation verifyCompliance(): Boolean\n  }\n}\n```",
    "\n```sysml\npackage VehicleFuelEconomy {\n  block Vehicle {\n    part curbWeight: Real;\n    part load: Real;\n    part wheelDiameter: Real;\n    part transmissionEfficiency: Real;\n    part otherParameters: Real;\n    \n    flow DrivingScenario {\n      in urbanScenario: Real;\n      in highwayScenario: Real;\n      out fuelEconomy: Real;\n    }\n  }\n  \n  block DrivingScenario {\n    in vehicle: Vehicle;\n    out fuelEconomy: Real;\n  }\n  \n  block FuelEconomy {\n    in drivingScenario: DrivingScenario;\n    out fuelEconomy: Real;\n  }\n}\n```",
    "\n```sysml\npackage EngineSelectionSystem {\n  block Engine {\n    part power: Real;\n    part mass: Real;\n    part efficiency: Real;\n    part cost: Real;\n  }\n\n  block EngineType {\n    part engine: Engine;\n    operation calculateIndicators() : Real {\n      // Calculate and return the comprehensive evaluation result\n    }\n  }\n\n  block FourCylinderEngineType {\n    part engine: Engine;\n    operation calculateIndicators() : Real {\n      // Calculate and return the comprehensive evaluation result\n    }\n  }\n\n  block SixCylinderEngineType {\n    part engine: Engine;\n    operation calculateIndicators() : Real {\n      // Calculate and return the comprehensive evaluation result\n    }\n  }\n\n  block EngineSelectionSystem {\n    part engines: Set(EngineType);\n    operation selectOptimalEngine() : EngineType {\n      // Select and return the optimal engine based on the comprehensive evaluation results\n    }\n  }\n}\n```",
    "\n```sysml\npackage VehicleQualityCheck {\n  block CurbWeightCheck {\n    part actualWeight: Real;\n    part processedWeight: Real;\n    part evaluationResult: Boolean;\n\n    operation checkWeight() {\n      precondition: actualWeight is set\n      postcondition: evaluationResult is set\n      algorithm:\n        processedWeight = process(actualWeight);\n        evaluationResult = evaluate(processedWeight);\n    }\n\n    function process(weight: Real): Real {\n      return weight;\n    }\n\n    function evaluate(weight: Real): Boolean {\n      return weight <= 2500;\n    }\n  }\n}\n```",
    "\n```sysml\npackage VehicleMassVerification {\n  block Vehicle {}\n  block WeighingEquipment {\n    operation measureMass(): Real\n  }\n  block MassVerificationUnit {\n    operation verifyMass(vehicle: Vehicle, weighingEquipment: WeighingEquipment): Boolean\n  }\n  package Process {\n    flow VehicleToInspect {\n      source Vehicle\n      target MassVerificationUnit\n    }\n    flow WeighingEquipmentToUse {\n      source WeighingEquipment\n      target MassVerificationUnit\n    }\n  }\n}\n```",
    "\n```sysml\npackage VehicleSystem {\n  block Driver {\n  }\n\n  block Passenger {\n  }\n\n  block Vehicle {\n    part driver: Driver\n    part passengers: array 4 of Passenger\n  }\n\n  block TransportationSystem {\n    part vehicles: set of Vehicle\n    part environment: Environment\n    part infrastructure: set of Infrastructure\n  }\n\n  block Environment {\n  }\n\n  block Infrastructure {\n  }\n\n  flow Enter {\n    inout vehicle: Vehicle\n    inout transportationSystem: TransportationSystem\n  }\n\n  flow Exit {\n    inout vehicle: Vehicle\n    inout transportationSystem: TransportationSystem\n  }\n\n  flow Travel {\n    inout vehicle: Vehicle\n    inout transportationSystem: TransportationSystem\n  }\n\n  flow EnsureSafety {\n    inout vehicle: Vehicle\n    inout transportationSystem: TransportationSystem\n  }\n\n  flow EnsureSustainability {\n    inout vehicle: Vehicle",
    "\n```sysml\npackage TransportationSystem {\n  block Driver {\n    operation operate()\n    operation refuel()\n  }\n\n  block Passenger {\n    operation enter()\n    operation exit()\n  }\n\n  block Vehicle {\n    part driver: Driver\n    part passengers: Passenger [1..4]\n    operation transport()\n  }\n\n  block TransportationProcess {\n    part vehicle: Vehicle\n    operation start()\n    operation complete()\n  }\n\n  package Environment {\n    block Weather {\n      operation influence()\n    }\n\n    block GasStation {\n      operation refuel()\n    }\n  }\n\n  TransportationProcess.vehicle -> Vehicle\n  TransportationProcess.start -> Vehicle.transport\n  TransportationProcess.complete -> Vehicle.transport\n  Vehicle.driver -> Driver\n  Vehicle.passengers -> Passenger [1..4]\n  Driver.refuel -> Environment.GasStation.refuel\n  Environment.Weather.influence -> Driver.operate\n}\n```",
    "\n```sysml\npackage VehicleProductLine {\n  block Engine {\n    property cylinderCount: Integer\n    property cylinderDiameter: String\n  }\n  block Transmission {\n    property type: String\n  }\n  block Vehicle {\n    part engine: Engine\n    part transmission: Transmission\n    constraint engineTransmissionCombination {\n      if engine.cylinderCount = 4 then\n        transmission.type = \"manual\"\n      else if engine.cylinderCount = 6 then\n        transmission.type = \"automatic\"\n      endif\n    }\n  }\n}\n```",
    "\n```sysml\npackage Engine {\n  block Engine {\n    property cylinderCount: Integer;\n    property cylinderDiameter: Integer;\n    constraint cylinderCount in {4, 6};\n    constraint cylinderDiameter in {70, 100};\n  }\n  block FourCylinderEngine extends Engine {\n    constraint cylinderCount = 4;\n  }\n  block SixCylinderEngine extends Engine {\n    constraint cylinderCount = 6;\n  }\n}\n```",
    "\n```sysml\npackage AutomotiveConfigurationSpace {\n  block Engine {\n    attribute cylinderDiameter: Integer\n    attribute cylinderCount: Integer\n  }\n\n  block Transmission {\n    attribute type: String\n  }\n\n  block Vehicle {\n    part engine: Engine\n    part transmission: Transmission\n    constraint engine_transmission_constraint {\n      if engine.cylinderCount = 4 then\n        transmission.type = \"manual\"\n      else if engine.cylinderCount = 6 then\n        transmission.type = \"automatic\"\n      endif\n    }\n  }\n\n  package CylinderDiameter {\n    block Cylinder70mm {\n      attribute diameter: Integer = 70\n    }\n\n    block Cylinder100mm {\n      attribute diameter: Integer = 100\n    }\n  }\n\n  package CylinderCount {\n    block Cylinder4 {\n      attribute count: Integer = 4\n    }\n\n    block Cylinder6 {\n      attribute count: Integer = 6\n    }\n ",
    "\n```sysml\npackage SystemAssembly {\n  block ComputerSubsystem {\n    part softwareDesign;\n    part hardwareDesign;\n  }\n  block StorageSubsystem {\n    part messageFormat;\n    part dataFormat;\n  }\n}\n\npackage SoftwareDesign {\n  block MessageFormat {\n    property format;\n  }\n  block DataFormat {\n    property format;\n  }\n}\n\npackage HardwareDesign {\n  block ComputerSubsystem {\n    property utilizeFunctions;\n  }\n  block StorageSubsystem {\n    property accessFormats;\n  }\n}\n\npackage SystemIntegration {\n  block System {\n    part systemAssembly;\n    part software;\n    part hardware;\n  }\n}\n\npackage SystemFunction {\n  operation processInformation {\n    precondition: systemIntegration.systemAssembly.computerSubsystem.hardwareDesign.utilizeFunctions\n      and systemIntegration.systemAssembly.storageSubsystem.softwareDesign.messageFormat.format\n      and systemIntegration.systemAssembly.storageSubsystem.softwareDesign.dataFormat.format\n     ",
    "\n```sysml\npackage powertrainSystem {\n  block LogicalLayer {\n    part torqueGenerator\n  }\n  block PhysicalLayer {\n    part powerUnit\n  }\n  relationship map {\n    from LogicalLayer.torqueGenerator to PhysicalLayer.powerUnit\n  }\n}\n```",
    "\n```sysml\npackage Vehicle {\n  block PowerTransmissionSystem {\n    part TorqueGenerator {\n      operation generateTorque()\n    }\n  }\n  block Powertrain {\n    part Engine {\n      operation generateTorque()\n    }\n  }\n  flow PowerAndTorqueFlow {\n    PowerTransmissionSystem.TorqueGenerator.generateTorque -> Powertrain.Engine.generateTorque\n  }\n}\n```",
    "\n```sysml\npackage VehicleFeatureAnnotationSystem {\n  block Interior {\n    part SeatBelt\n    part FrontSeats\n    part DriverAirbag\n    part AlarmSystem\n  }\n  block BodyAssembly {\n    part BodyShell\n    part Bumpers\n    part KeylessEntryDevice\n  }\n  block Vehicle {\n    part Interior\n    part BodyAssembly\n  }\n  constraint SafetyRequirements {\n    SeatBelt.safety = true\n    DriverAirbag.safety = true\n    Bumpers.safety = true\n    AlarmSystem.security = true\n    KeylessEntryDevice.security = true\n  }\n}\n```",
    "\n```\npackage VehicleDynamicSimulation\n  block VehicleDynamicSimulation\n    parameter Real initialVelocity = 0 \"Initial velocity of the vehicle\";\n    parameter Real initialPosition = 0 \"Initial position of the vehicle\";\n    parameter Real acceleration \"Acceleration of the vehicle at a specific moment\";\n    parameter Real timeStep \"Time step for the simulation\";\n    output Real velocity \"Velocity of the vehicle after the time step\";\n    output Real position \"Position of the vehicle after the time step\";\n  equation\n    der(velocity) = acceleration;\n    velocity = initialVelocity + acceleration * timeStep;\n    position = initialPosition + 0.5 * acceleration * timeStep^2;\n  end VehicleDynamicSimulation;\nend VehicleDynamicSimulation;\n```",
    "\n```sysml\npackage SafetyFeatures {\n  block SeatBelt {\n    attribute isMandatory: Boolean = false\n  }\n  block DriverAirbag {\n    attribute isMandatory: Boolean = false\n  }\n  block Bumper {\n    attribute isMandatory: Boolean = true\n  }\n  block KeylessEntrySystem {\n    attribute isMandatory: Boolean = false\n  }\n  block Wheel {\n    attribute isMandatory: Boolean = false\n    part ABS: AntiLockBrakingSystem {\n      attribute isMandatory: Boolean = false\n    }\n  }\n}\n\npackage MandatorySafetyFeatures {\n  block SeatBelt {\n    attribute isMandatory: Boolean = true\n  }\n  block Bumper {\n    attribute isMandatory: Boolean = true\n  }\n}\n```",
    "\n```sysml\npackage VehicleSafetyComplianceSystem {\n  block SeatBelt {\n    attribute isMandatory: true\n  }\n  block DriverAirbag {\n    attribute isMandatory: false\n  }\n  block Bumper {\n    attribute isMandatory: true\n  }\n  block KeylessEntrySystem {\n    attribute isMandatory: false\n  }\n  block Tire {\n    attribute quantity: 4\n  }\n  block AntiLockBrakingSystem {\n    attribute isMandatory: false\n  }\n\n  package VehicleInterior {\n    part seatBelt1: SeatBelt\n    part seatBelt2: SeatBelt\n  }\n\n  package VehicleBody {\n    part bumper: Bumper\n    part keylessEntrySystem: KeylessEntrySystem\n  }\n\n  package ChassisSystem {\n    part tire1: Tire\n    part tire2: Tire\n    part tire3: Tire\n    part tire4: Tire\n    part abs: AntiLock",
    "\n```sysml\npackage RiskManagementSystem {\n  block Risk {\n    part situation: Situation\n    part cause: Cause\n    part failure: Failure\n    part probability: Probability\n    part severityLevel: SeverityLevel\n    part sequenceImpact: SequenceImpact\n  }\n  block Situation {\n    attribute id: String\n    attribute description: String\n  }\n  block Cause {\n    attribute id: String\n    attribute description: String\n  }\n  block Failure {\n    attribute id: String\n    attribute description: String\n  }\n  block Probability {\n    attribute value: Real\n  }\n  block SeverityLevel {\n    attribute value: Integer\n  }\n  block SequenceImpact {\n    attribute value: String\n  }\n  block RiskScenario {\n    part risk: Risk\n    part evaluation: Evaluation\n    part management: Management\n  }\n  block Evaluation {\n    operation evaluate: Real\n  }\n  block Management {\n    operation manage: Void\n  }\n}\n```",
    "\n```sysml\npackage RiskMetadataManagementSystem {\n  block Scenario {\n    part description: String\n    part causes: Set(Cause)\n    part failures: Set(Failure)\n  }\n\n  block Cause {\n    part description: String\n    part probability: Real\n  }\n\n  block Failure {\n    part description: String\n    part severity: Severity\n  }\n\n  enumeration Severity {\n    critical, high, medium, low\n  }\n\n  block RiskScenario {\n    part scenarios: Set(Scenario)\n    part causes: Set(Cause)\n    part failures: Set(Failure)\n  }\n\n  package RiskAnalysis {\n    operation analyzeRisk()\n    operation makeDecision()\n  }\n\n  package RiskManagement {\n    operation identifyRisk()\n    operation describeRisk()\n    operation trackRisk()\n  }\n\n  package SystemIntegration {\n    property isCompatibleWith: String\n  }\n\n  package RiskMetadataSystem {\n    part riskScenarios: Set(RiskScenario",
    "\n```sysml\npackage EquipmentMonitoringSystem {\n  block Battery {\n    part batteryLevel: Real\n    part agingFactor: Real\n    part minThreshold: Real\n    part isLowBattery: Boolean\n    part shutdown: Boolean\n    part severityLevel: Integer\n\n    flow monitorBattery {\n      par [\n        checkBatteryAging -> setAgingFactor,\n        checkBatteryLevel -> setBatteryLevel,\n        checkLowBattery -> setIsLowBattery,\n        checkShutdown -> setShutdown,\n        checkSeverityLevel -> setSeverityLevel\n      ]\n    }\n\n    function checkBatteryAging {\n      // Check aging factor and update agingFactor\n    }\n\n    function checkBatteryLevel {\n      // Check battery level and update batteryLevel\n    }\n\n    function checkLowBattery {\n      // Check if battery level is low and update isLowBattery\n    }\n\n    function checkShutdown {\n      // Check if",
    "\n```sysml\n@model\npackage System {\n  @block\n  class TopDownHierarchicalStructure {\n    @property\n    component: Component[*];\n    @property\n    subSystem: SubSystem[*];\n  }\n\n  @block\n  class Component {\n    @property\n    name: String;\n    @property\n    function: Function[*];\n    @property\n    interface: Interface;\n  }\n\n  @block\n  class SubSystem {\n    @property\n    name: String;\n    @property\n    function: Function[*];\n    @property\n    component: Component[*];\n    @property\n    subSystem: SubSystem[*];\n  }\n\n  @block\n  class Function {\n    @property\n    name: String;\n    @property\n    description: String;\n  }\n\n  @block\n  class Interface {\n    @property\n    definition: String;\n  }\n}\n```",
    "\n\n```sysml\n@modelType block\n@name AutomotiveSystem\n@taggedValue {name=”type”, value=”FunctionalSafetyDecomposition”}\n@blockDefinition\n  @part s : SeatBelt { @taggedValue {name=”type”, value=”SafetyComponent”} }\n  @part b : Bumper { @taggedValue {name=”type”, value=”SafetyComponent”} }\n  @part a : Airbag { @taggedValue {name=”type”, value=”SafetyComponent”, value2=”optional”} }\n  @part ab : ABS { @taggedValue {name=”type”, value=”SafetyComponent”, value2=”optional”} }\n  @part e : Engine { @taggedValue {name=”type”, value=”NonSafetyComponent”} }\n  @part t : Transmission { @taggedValue {name=”type”, value=”NonSafetyComponent”} }\n  @part c : Chassis { @taggedValue {name=”type”, value",
    "\n```sysml\npackage AutomotiveDomain {\n  block Car <<core>> {\n    // The Car block represents the automobile in the automotive domain.\n    // It is designed to be easily understood and used in various application scenarios.\n    property torque : Real; // Torque is a physical quantity associated with the Car block.\n  }\n}\n```",
    "\n```sysml\npackage AutomobileDocumentManagementSystem {\n  block Automobile {\n    attribute id: String\n    attribute name: String\n    attribute alias: String\n    attribute torque: TorqueValue\n    attribute explanatoryDocument: String\n  }\n  block TorqueValue {\n    attribute value: Real\n    attribute unit: String\n  }\n  operation query(searchTerm: String): List<Automobile>\n  operation archive(automobile: Automobile): Boolean\n  operation addExplanatoryDocument(automobile: Automobile, document: String): Boolean\n}\n```",
    "\n```sysml\npackage AutomobileManagementSystem {\n  class Automobile {\n    attribute String alias;\n    attribute TorqueValue torqueValue;\n  }\n  class TorqueValue {\n    attribute Real value;\n  }\n  package ScalarPhysicalQuantity {\n    class ScalarQuantity {\n      attribute Real value;\n    }\n    class Torque extends ScalarQuantity {\n      alias = \"Torque\";\n    }\n  }\n  package ImportManagement {\n    operation importAutomobileData(input Automobile automobile);\n    operation importBasicPhysicalQuantity(input ScalarPhysicalQuantity::ScalarQuantity quantity);\n  }\n}\n```",
    "\n```sysml\npackage Vehicle {\n  class BasicVehicle {\n    attribute String size\n    attribute Engine engine\n  }\n\n  class Engine {\n    attribute Integer cylinderCount\n  }\n\n  operation configureEngineCylinders(vehicle: BasicVehicle) {\n    if (vehicle.size == \"small\") {\n      vehicle.engine.cylinderCount = 4\n    } else if (vehicle.size == \"large\") {\n      vehicle.engine.cylinderCount = 6\n    } else {\n      vehicle.engine.cylinderCount = 5\n    }\n  }\n}\n```",
    "\n```\npackage FuelManagementSystem {\n  block FuelTank {\n    part fuel: Quantity\n    flow out fuelFlow: Quantity\n    flow in fuelReturn: Quantity\n    operation manageFuelFlow()\n    operation monitorFuelTemperature()\n  }\n  block Engine {\n    flow in fuelFlow: Quantity\n    flow out fuelReturn: Quantity\n    operation run()\n  }\n  block FuelInterface {\n    flow in fuelIn: Quantity\n    flow out fuelOut: Quantity\n  }\n  block FuelManagementSystem {\n    part tank: FuelTank\n    part engine: Engine\n    part interface: FuelInterface\n    connection C1: engine.fuelFlow -> interface.fuelIn\n    connection C2: interface.fuelOut -> engine.fuelReturn\n    connection C3: tank.fuelFlow -> interface.fuelIn\n    connection C4: interface.fuelOut -> tank.fuelReturn\n  }\n}\n```",
    "\n```sysml\npackage VehicleStructuralArchitecture {\n  block Vehicle {\n    attribute mass: Integer\n    part frontAxleAssembly: AxleAssembly\n    part rearAxleAssembly: AxleAssembly\n    part frontAxle: Axle\n    part rearAxle: Axle\n    part frontWheels: WheelSet\n    part rearWheels: WheelSet\n  }\n  block AxleAssembly {\n    part axle: Axle\n    part wheels: WheelSet\n  }\n  block Axle {\n    attribute steeringAngle: Real (optional)\n  }\n  block WheelSet {\n    part leftWheel: Wheel (optional)\n    part rightWheel: Wheel (optional)\n  }\n  block Wheel {\n    attribute name: String (optional)\n  }\n}\n```"
]