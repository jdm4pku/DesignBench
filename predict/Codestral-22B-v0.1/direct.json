[
    "\npackage VehicleManagement {\n  part type Vehicle {\n    attribute mass : Real;\n    attribute status : VehicleStatus;\n    reference engine : Engine[1];\n    reference driver : Driver[0..1];\n  }\n  part type VehicleStatus {\n    attribute gearSetting : GearSetting;\n    attribute acceleratorPedalPosition : Real;\n  }\n  part type Engine {\n    // Define engine attributes and behavior here\n  }\n  part type Driver {\n    // Define driver attributes and behavior here\n  }\n  // Define additional packages or elements as needed\n}",
    "\npackage VehicleModeling {\n  block Vehicle {\n    part Personnel;\n    part Engine;\n  }\n  block ManuallyOperatedVehicle {\n    part Personnel[1];\n  }\n  block PoweredVehicle {\n    part Engine;\n  }\n  block ManuallyOperatedPoweredVehicle {\n    part Personnel[1];\n    part Engine;\n  }\n  association PersonnelToVehicle {\n    end Personnel;\n    end Vehicle;\n    multiplicityRange 1..1;\n  }\n  association EngineToVehicle {\n    end Engine;\n    end Vehicle;\n    multiplicityRange 1..*;\n  }\n}",
    "\npackage VehicleStructure {\n  part type VehicleComponent;\n  part type Engine subclass VehicleComponent;\n  part type Transmission subclass VehicleComponent;\n  part type Wheel subclass VehicleComponent;\n  part type Vehicle {\n    part engine : Engine [1..1];\n    part transmission : Transmission [1..1];\n    part wheels : Wheel [4..4];\n  };\n}\n\nThe provided SysML v2 code defines a vehicle structure with a package named \"VehicleStructure\". Within this package, there are four part types: \"VehicleComponent\", \"Engine\", \"Transmission\", and \"Wheel\". The \"Engine\", \"Transmission\", and \"Wheel\" part types are subclasses of \"VehicleComponent\". The \"Vehicle\" part type is also defined, which has three parts: \"engine\" of type \"Engine\" with a multiplicity of 1..1, \"transmission\" of type \"Transmission\" with a multiplicity of 1..1, and \"wheels\" of type \"Wheel\" with a multiplicity of 4..4. This model reflects the compositional relationships and quantity requirements among",
    "\npackage VehicleSystem {\n  block Vehicle {\n    part Engine;\n  }\n  block SmallVehicle extends Vehicle {\n    part SmallEngine as Engine;\n  }\n  block LargeVehicle extends Vehicle {\n    part LargeEngine as Engine;\n  }\n  block Engine {\n    attribute numberOfCylinders;\n    part CylinderSystem;\n  }\n  block SmallEngine extends Engine {\n    numberOfCylinders = 4;\n  }\n  block LargeEngine extends Engine {\n    numberOfCylinders = 6;\n  }\n  block CylinderSystem {\n    attribute numberOfCylinders;\n  }\n}",
    "\npackage TrafficSignalSystem {\n  enumeration TrafficSignalColor {\n    green,\n    yellow,\n    red\n  }\n  part TrafficSignal {\n    color : TrafficSignalColor\n  }\n  part GreenTrafficSignal extends TrafficSignal {\n    [color = TrafficSignalColor::green]\n  }\n}\n\nThe provided SysML v2 code accurately represents the given natural-language requirements. The TrafficSignalSystem package contains an enumeration TrafficSignalColor that defines the possible colors for a traffic signal. The TrafficSignal part represents a traffic signal component with a color attribute of type TrafficSignalColor. Additionally, a GreenTrafficSignal part is defined that extends the TrafficSignal part and has a fixed color attribute value of green, indicating that it is always in the \"go\" state. This model supports the explicit indication of the traffic light's color, helping to facilitate orderly traffic flow and management.",
    "\npackage InformationClassification {\n  enumeration InformationLevel {\n    uncl,\n    conf,\n    secr\n  }\n  enumeration GradeLevel {\n    A,\n    B,\n    C,\n    D,\n    F\n  }\n  block ClassificationMechanism {\n    part informationLevel: InformationLevel\n    part gradeLevel: GradeLevel\n  }\n  block Information {\n    part classificationMechanism: ClassificationMechanism\n  }\n}\n\nThe model defines a package called InformationClassification that contains two enumerations: InformationLevel and GradeLevel. The InformationLevel enumeration includes the values uncl, conf, and secr, while the GradeLevel enumeration includes the values A, B, C, D, and F. The model also includes a block called ClassificationMechanism that has two parts: informationLevel and gradeLevel, which are of type InformationLevel and GradeLevel, respectively. Finally, the model includes a block called Information that has a part called classificationMechanism of type ClassificationMechanism.",
    "\npackage VehicleSystem {\n  part type Vehicle {\n    [1..1] engine : Engine;\n  }\n  part type SmallVehicle extends Vehicle {\n  }\n  part type LargeVehicle extends Vehicle {\n  }\n  part type Engine {\n    [4..6] cylinder : Cylinder;\n  }\n  part type Cylinder {\n  }\n}\n\nThe SmallVehicle and LargeVehicle part types extend the Vehicle part type, which is associated with the Engine part type. The Engine part type is associated with the Cylinder part type, which has a multiplicity of 4 to 6.",
    "\npackage VehicleModeling {\n  part type FuelTank {\n    [0..1] fuelType : Fuel;\n  }\n  part type Vehicle {\n    [0..1] driver : Personnel;\n    [0..1] fuelTank : FuelTank;\n    [0..*] qualityAttribute : QualityAttribute;\n  }\n  part type Fuel {\n    // Define fuel properties here\n  }\n  part type Personnel {\n    // Define personnel properties here\n  }\n  part type QualityAttribute {\n    // Define quality attribute properties here\n  }\n}",
    "\npackage AutomobileWheelAssembly {\n  part WheelBearingUnit;\n  part Tire {\n    part Bead[2];\n  };\n  part Hub {\n    part Rim[2];\n    part ThreadedHole[*];\n    part BoltMountingHole[*];\n  };\n  part Bolt;\n  connection TireToHub {\n    Tire.Bead[1] ≪connectedTo≫ Hub.Rim[1];\n    Tire.Bead[2] ≪connectedTo≫ Hub.Rim[2];\n  };\n  connection HubToBolt {\n    Hub.BoltMountingHole[*] ≪connectedTo≫ Hub.ThreadedHole[*];\n  };\n  connection BoltToTireAssembly {\n    Hub.BoltMountingHole[*] ≪connectedTo≫ Bolt;\n    Bolt ≪connectedTo≫ Tire;\n  };\n}\n\nThis SysML v2 model represents the structure of an automobile wheel",
    "\npackage FuelFlowManagement {\n  part FuelTankAssembly {\n    port FuelSupplyPort;\n    port FuelReturnPort;\n    port TemperatureSensorPort;\n  }\n  part Engine {\n    port FuelSupplyPort;\n    port FuelReturnPort;\n    port TemperatureSensorPort;\n  }\n  flow FuelFlow {\n    source FuelTankAssembly.FuelSupplyPort;\n    target Engine.FuelSupplyPort;\n  }\n  flow FuelReturnFlow {\n    source Engine.FuelReturnPort;\n    target FuelTankAssembly.FuelReturnPort;\n  }\n  flow TemperatureFlow {\n    source FuelTankAssembly.TemperatureSensorPort;\n    target Engine.TemperatureSensorPort;\n  }\n  interface FuelSupplyInterface {\n    end FuelTankAssembly.FuelSupplyPort;\n    end Engine.FuelSupplyPort;\n    flow FuelFlow;\n    flow TemperatureFlow;\n  }\n  interface FuelReturnInterface {\n    end FuelTankAssembly.F",
    "\npackage VehicleConfigurationModel {\n  part type Vehicle {\n    attribute mass : Real [1];\n  }\n  part type Axle {\n    attribute mass : Real [1];\n  }\n  part type Tire {\n    attribute mass : Real [1];\n  }\n  part type FrontAxle {\n    attribute steeringAngle : Real [1];\n  }\n  part type RearAxle {\n  }\n  part type DedicatedFrontAxle {\n    attribute steeringAngle : Real [1];\n  }\n  part type VehicleConfiguration {\n    attribute totalMass : Real [1];\n    part frontAxle : FrontAxle [1];\n    part rearAxle : RearAxle [1];\n    part tires : Tire [2];\n  }\n  VehicleConfiguration vehicle1_c1 {\n    totalMass = 2000;\n    frontAxle = DedicatedFrontAxle;\n    rearAxle = RearAxle;\n    tires[1].mass = 50;\n    tires[2].",
    "\npackage CouplingSystem {\n  part Vehicle {\n    port CouplingPort {\n      provided[1] : CouplingBall;\n    }\n  }\n  part Trailer {\n    port CouplingPort {\n      required[1] : CouplingBall;\n    }\n  }\n  part Hitch {\n    port VehiclePort {\n      required[1] : CouplingBall;\n    }\n    port TrailerPort {\n      required[1] : CouplingBall;\n    }\n    part CouplingBall;\n  }\n  connector CouplingConnector {\n    Vehicle.CouplingPort : CouplingBall <-> Hitch.VehiclePort : CouplingBall;\n    Trailer.CouplingPort : CouplingBall <-> Hitch.TrailerPort : CouplingBall;\n  }\n}",
    "\npackage VehiclePowerTransmissionSystem {\n  part Engine {\n    port fuelCommand : in Command;\n    port power : out Power;\n    port clutch : out Clutch;\n  }\n  part Transmission {\n    port power : in Power;\n    port clutch : in Clutch;\n    port driveshaft : out Driveshaft;\n  }\n  part Clutch {\n    port input : in Clutch;\n    port output : out Clutch;\n  }\n  part Driveshaft {\n    port input : in Driveshaft;\n    port output : out Driveshaft;\n  }\n  part RearAxleAssembly {\n    part Differential {\n      port leftHalfShaft : in HalfShaft;\n      port rightHalfShaft : in HalfShaft;\n    }\n    part LeftHalfShaft {\n      port input : in HalfShaft;\n      port output : out HalfShaft;\n    }\n    part RightHalfShaft {\n      port input : in HalfShaft;\n      port output : out HalfShaft;\n",
    "\npackage System {\n  part b11 {\n    part c1 {\n      port pb;\n    }\n    part c2 {\n      port pc;\n    }\n    interface pe {\n      end pe_end;\n    }\n    binding pe_binding {\n      partRole pe_end;\n      partRole pb;\n    }\n  }\n  part b12 {\n    part c3 {\n      port pd;\n    }\n    part c4;\n    interface pf {\n      end pf_end;\n    }\n    binding pf_binding {\n      partRole pf_end;\n      partRole pd;\n    }\n  }\n  interface pe {\n    end pe_end;\n  }\n  interface pf {\n    end pf_end;\n  }\n  part b21 {\n    part c1;\n    part c2;\n    part c3;\n    part c4;\n    connection c1_c2 {\n      end pc;\n      end pc;\n    }\n    connection c3_pf {\n      end pf_end;\n",
    "\npackage AutomotivePowertrain {\n  part AutomotivePowertrainSystem {\n    port fuelCommandIn;\n    port engineStartStopCommandIn;\n    port powerOutputOut;\n    port drivingForceControlOut;\n    flow fuelCommandFlow {\n      source fuelCommandIn;\n      target engine;\n    }\n    flow engineTorqueFlow {\n      source engine;\n      target transmission;\n    }\n    flow transmissionTorqueFlow {\n      source transmission;\n      target driveshaft;\n    }\n    flow driveshaftTorqueFlow {\n      source driveshaft;\n      target leftWheel;\n      target rightWheel;\n    }\n    flow engineStartStopCommandFlow {\n      source engineStartStopCommandIn;\n      target engine;\n    }\n    flow drivingForceControlFlow {\n      source drivingForceControlOut;\n      target leftWheel;\n      target rightWheel;\n    }\n    part engine {\n      port fuelCommandIn;\n      port engineStartStopCommandIn;\n      port engineTorqueOut;\n    }\n    part transmission {\n      port engineTorqueIn;\n      port transmissionTor",
    "\npackage AutomotivePowertrainControl {\n  part AutomotivePowertrainControlSystem {\n    [1] requirement: \"Upon receiving a fuel control command, the system sequentially starts the engine and generates torque according to the predetermined order.\"\n    [2] requirement: \"The generated torque is then successively amplified, transmitted, and distributed, delivering power stage by stage to the vehicle’s drive wheels to ensure normal driving.\"\n    [3] requirement: \"When a stall signal is detected, the relevant operational processes will be halted as required.\"\n    [4] requirement: \"The system supports engine start and shutdown control, as well as the entire power transmission process from fuel commands to actual wheel output torque, ensuring efficient and coordinated power delivery.\"\n    [5] requirement: \"It provides users with a reliable power response and handling experience.\"\n\n    part Engine {\n      [6] requirement: \"Supports start and shutdown control.\"\n    }\n\n    part PowerTransmissionSystem {\n      [7] requirement: \"Amplifies, transmits, and distributes torque.\"\n      [8] requirement: \"Delivers power stage by stage",
    "\npackage VehiclePowertrainSystem {\n  part Engine;\n  part Transmission;\n  part Wheel[4];\n  block PowerManagement {\n    input FuelCommand;\n    input EngineStartSignal;\n    input EngineShutdownSignal;\n    output EngineOutputTorque;\n    output AmplifiedTorque;\n    output DistributedTorque;\n    parameter NumberOfWheels = 4;\n    part Function {\n      name: GenerateEngineOutputTorque;\n      direction: in;\n      input: FuelCommand;\n      output: EngineOutputTorque;\n    };\n    part Function {\n      name: AmplifyTransmitTorque;\n      direction: in;\n      input: EngineOutputTorque;\n      output: AmplifiedTorque;\n    };\n    part Function {\n      name: DistributeTorque;\n      direction: in;\n      input: AmplifiedTorque;\n      output: DistributedTorque;\n      parameter NumberOfWheels;\n    };\n    part Function {\n      name: TerminatePowerOutput;\n      direction: in;\n      input: EngineShutdownSignal;",
    "\npackage PowerConnectionSystem {\n  part Vehicle {\n    part VehicleFrame;\n    part HitchBall;\n  };\n  part Trailer {\n    part TrailerFrame;\n    part TrailerCoupler;\n  };\n  block HitchingMechanism {\n    part HitchBall;\n    part TrailerCoupler;\n  };\n  flow ConnectionStatus {\n    direction in;\n    direction out;\n  };\n  requirement ConnectionDisconnection {\n    description: \"The system enables the vehicle and the trailer to be “connected” or “disconnected” via the hitching mechanism.\";\n  };\n  requirement SafetyReliability {\n    description: \"The system allows users to safely and reliably connect the trailer to the vehicle when needed, or disengage it.\";\n  };\n  requirement Flexibility {\n    description: \"This achieves a flexible combination and separation, meeting user requirements for vehicle and trailer power coupling functions in various scenarios.\";\n  };\n  Vehicle.HitchBall < HitchingMechanism.HitchBall;\n  Trailer.TrailerCoupler < H",
    "\npackage VehicleTrailerConnectionSystem {\n  part Vehicle {\n    part Chassis;\n    part TowBall;\n  };\n  part Trailer {\n    part Coupler;\n    part TrailerFrame;\n  };\n  block ConnectionSystem {\n    part VehicleConnectionPoint;\n    part TrailerConnectionPoint;\n    flow ConnectTrailer {\n      source VehicleConnectionPoint;\n      target TrailerConnectionPoint;\n    };\n    flow DisconnectTrailer {\n      source TrailerConnectionPoint;\n      target VehicleConnectionPoint;\n    };\n  };\n  usage VehicleConnectionPoint {\n    part Vehicle;\n    part TowBall;\n  };\n  usage TrailerConnectionPoint {\n    part Trailer;\n    part Coupler;\n  };\n}\n\nThis SysML v2 model represents the system as a package containing two parts: Vehicle and Trailer. Each part is further composed of its respective components. The ConnectionSystem block represents the system that manages the connection status between the vehicle and the trailer. It includes two usages: VehicleConnectionPoint and TrailerConnectionPoint, which are connected by",
    "\npackage TrailerConnectionSystem {\n  part Vehicle {\n    part Chassis {\n      part TowBallDevice;\n    }\n  }\n  part Trailer {\n    part TrailerChassis;\n    part CouplerMechanism {\n      block EngageDisengage {\n        parameter TowBall;\n      }\n    }\n  }\n  block Connect {\n    parameter Vehicle;\n    parameter Trailer;\n  }\n  block Disconnect {\n    parameter Vehicle;\n    parameter Trailer;\n  }\n  block SecureLatch {\n    parameter Vehicle;\n    parameter Trailer;\n  }\n  block SmoothSeparation {\n    parameter Vehicle;\n    parameter Trailer;\n  }\n  requirement HitchingOperation {\n    derivedFrom Connect;\n  }\n  requirement UnhitchingOperation {\n    derivedFrom Disconnect;\n  }\n  requirement SafeAttachment {\n    derivedFrom SecureLatch;\n  }\n  requirement ConvenientDetachment {\n    derivedFrom SmoothSeparation;\n  }\n}",
    "\npackage FuelSystem {\n  part FuelTank {\n    port FuelSupplyPort {\n      direction inout;\n    }\n  }\n  part Engine {\n    port FuelReturnPort {\n      direction inout;\n    }\n  }\n  flow FuelFlow {\n    source FuelTank::FuelSupplyPort;\n    target Engine::FuelReturnPort;\n  }\n  block FuelMonitor {\n    parameter Temperature;\n  }\n  connector FuelSupplyConnector {\n    end FuelTank::FuelSupplyPort;\n    end Engine::FuelReturnPort;\n  }\n  requirement StabilityRequirement {\n    derivedRequirement FuelSupplyConnector;\n  }\n  requirement ReliabilityRequirement {\n    derivedRequirement FuelSupplyConnector;\n  }\n}",
    "\npackage FuelDeliverySystem {\n  part StorageTank {\n    flowPort fuelOut;\n    attribute maxCapacity;\n    attribute currentLevel;\n  };\n  part FuelPump {\n    flowPort fuelIn;\n    flowPort fuelOut;\n  };\n  part Vehicle {\n    part FuelTank {\n      flowPort fuelIn;\n      attribute maxCapacity;\n      attribute currentLevel;\n    };\n  };\n  connector FuelFlow {\n    end fuelOut : StorageTank::fuelOut;\n    end fuelIn : FuelPump::fuelIn;\n    end fuelOut : FuelPump::fuelOut;\n    end fuelIn : Vehicle::FuelTank::fuelIn;\n  };\n}\n\nThis SysML v2 model represents the FuelDeliverySystem, which includes three parts: StorageTank, FuelPump, and Vehicle. The StorageTank has a flowPort for fuel output, and attributes for maximum capacity and current level. The FuelPump has flowPorts for fuel input and output. The Vehicle contains a FuelTank",
    "\npackage AutomobileAssembly {\n  part type VehicleAssembly;\n  part type Gearbox;\n  part type Engine;\n  part type VehicleAssemblyWithGearbox;\n  part type VehicleAssemblyWithEngine;\n  part type FullyAssembledVehicle;\n\n  block AutomobileAssemblyProcess {\n    part vehicleAssembly : VehicleAssembly;\n    part gearbox : Gearbox;\n    part engine : Engine;\n    part vehicleAssemblyWithGearbox : VehicleAssemblyWithGearbox;\n    part vehicleAssemblyWithEngine : VehicleAssemblyWithEngine;\n    part fullyAssembledVehicle : FullyAssembledVehicle;\n\n    flow installGearbox : VehicleAssembly -> VehicleAssemblyWithGearbox {\n      source = vehicleAssembly;\n      target = vehicleAssemblyWithGearbox;\n    }\n\n    flow installEngine : VehicleAssemblyWithGearbox -> FullyAssembledVehicle {\n      source = vehicleAssemblyWithGearbox;\n      target = fullyAssembledVehicle;\n    }\n  }\n}",
    "\npackage VehicleManagementSystem {\n  part VehicleA;\n  block VehicleController;\n  block System {\n    state Off;\n    state Starting;\n    state Running;\n    state HealthManagement;\n    state Maintenance;\n    state Degraded;\n    transition OffToStarting : Off -> Starting {\n      trigger startSignal;\n      guard brakePressed;\n    }\n    transition StartingToRunning : Starting -> Running {\n      trigger vehicleOnSignal;\n    }\n    transition RunningToHealthManagement : Running -> HealthManagement {\n      trigger exitRunning;\n    }\n    transition HealthManagementToDegraded : HealthManagement -> Degraded {\n      trigger temperatureExceedsThreshold;\n    }\n    transition DegradedToMaintenance : Degraded -> Maintenance {\n      trigger overTemperatureSignal;\n    }\n    transition MaintenanceToNormal : Maintenance -> Running {\n      trigger restoreToNormalSignal;\n    }\n  }\n  flow temperature;\n  flow startSignal;\n  flow vehicleOnSignal;\n  flow exitRunning;\n  flow temperatureExceedsThreshold;\n  flow overTemperature",
    "\npackage VehicleBehaviorModeling {\n  part Vehicle {\n    attribute fuel : Real;\n    attribute maintenanceInterval : Duration;\n    attribute temperatureThreshold : Real;\n    port vehicleController : VehicleController;\n    port environment : Environment;\n    flow temperature : Real;\n    block startupProcess {\n      parameter brakePedalPressed : Boolean;\n      parameter startSignalReceived : Boolean;\n    };\n    block selfInspection {\n    };\n    block powerSupply {\n    };\n    block healthManagement {\n      block regularMaintenance {\n      };\n      block faultRecovery {\n      };\n    };\n    state shutdown {\n    };\n    state normal {\n    };\n    state degraded {\n    };\n    state overheating {\n    };\n    state abnormal {\n    };\n    transition startup {\n      source shutdown;\n      target normal;\n      trigger startupProcess;\n      guard brakePedalPressed and startSignalReceived;\n    };\n    transition selfInspection {\n      source normal;\n      target normal;\n      trigger startupProcess;\n    };\n",
    "\npackage VehicleSimulation {\n  block VehicleSimulationSystem {\n    parameter mass : Real;\n    parameter position : Real[2];\n    parameter velocity : Real[2];\n    parameter acceleration : Real[2];\n    part road {\n      parameter slope : Real;\n      parameter frictionCoefficient : Real;\n    }\n    flow vehicleState : Real[*];\n    flow snapshot : Real[*];\n    operation recordSnapshot();\n    operation start();\n    operation shutdown();\n  }\n}\n\nThis SysML v2 model defines a package named \"VehicleSimulation\" that contains a block named \"VehicleSimulationSystem\". The \"VehicleSimulationSystem\" block has several parameters to define the vehicle's properties such as mass, position, velocity, and acceleration. It also has a part named \"road\" that contains parameters for the road's slope and friction coefficient. The system supports two flows: \"vehicleState\" and \"snapshot\". The \"vehicleState\" flow represents the state of the vehicle and the road at specific time points, while the \"snapshot\" flow represents the recorded state transitions of the vehicle. The",
    "\npackage AutomotiveConfigurationManagement {\n  part Automobile {\n    subsystem SubsystemA {\n      part SubsystemA_Config1 {\n        component Component1\n        component Component2\n      }\n      part SubsystemA_Config2 {\n        component Component2\n        component Component3\n      }\n    }\n    subsystem SubsystemB {\n      part SubsystemB_Config1 {\n        component Component4\n        component Component5\n      }\n      part SubsystemB_Config2 {\n        component Component5\n        component Component6\n      }\n    }\n  }\n  configuration ConfigurationA {\n    part Automobile {\n      part SubsystemA_Config1\n      part SubsystemB_Config1\n    }\n  }\n  configuration ConfigurationB {\n    part Automobile {\n      part SubsystemA_Config2\n      part SubsystemB_Config2\n    }\n  }\n  constraint Constraint1 {\n    (SubsystemA_Config2.occurrence <=> SubsystemB_Config2.occurrence)\n  }\n}",
    "\npackage VehicleConfigurationSystem {\n  part type Part1;\n  part type Part2;\n  part type Part3 {\n    port p1;\n  };\n  part type Part4;\n  part type Part5 {\n    port p2;\n    behavioral variant BehaviorVariant1;\n    behavioral variant BehaviorVariant2;\n  };\n  part type Part6;\n  subsystem type SubsystemA {\n    part: Part1[0..*];\n    part: Part2[0..*];\n    part: Part3[0..*];\n    part: Part4[0..*];\n    port p1;\n    port p2;\n  };\n  subsystem type SubsystemB {\n    part: Part5[0..*];\n    part: Part6[0..*];\n    port p1;\n    port p2;\n  };\n  configuration type VehicleConfigA {\n    part: SubsystemA[1];\n    part: SubsystemB[1];\n  };\n  configuration type VehicleConfigB {\n    part: SubsystemA[1];\n    part:",
    "\npackage VehicleConfigurationSystem {\n  part Vehicle {\n    part Engine {\n      attribute type : EngineType {\n        literal fourCylinder;\n        literal sixCylinder;\n      }\n    }\n    part Transmission {\n      attribute type : TransmissionType {\n        literal manual;\n        literal automatic;\n      }\n    }\n    part Wheels {\n      attribute type : WheelType {\n        literal narrowRim;\n        literal wideRim;\n      }\n    }\n    constraint Compatibility {\n      self.Engine.type = EngineType::sixCylinder implies\n        self.Transmission.type = TransmissionType::automatic and\n        self.Wheels.type = WheelType::wideRim;\n      self.Engine.type = EngineType::fourCylinder implies\n        self.Transmission.type = TransmissionType::manual and\n        self.Wheels.type = WheelType::narrowRim;\n    }\n  }\n  part VehicleModel {\n    attribute type : ModelType;\n  }\n  part ConfigurationSystem {\n    partType Vehicle",
    "\npackage AutomobileSystem {\n  part Vehicle {\n    attribute mass: Real;\n    attribute fuelStatus: FuelStatus;\n    attribute powertrain: Powertrain;\n    attribute reliability: Reliability;\n  }\n  part Engine {\n    attribute torque: Real;\n  }\n  part Transmission {\n    attribute driveInterface: DriveInterface;\n  }\n  interface DriveInterface {\n    operation transferPower();\n  }\n  enum FuelStatus {\n    FULL,\n    EMPTY\n  }\n  enum Reliability {\n    PERFORMANCE,\n    DURABILITY\n  }\n  part Powertrain {\n    attribute engine: Engine;\n    attribute transmission: Transmission;\n  }\n  constraint MassLimit {\n    vehicle.mass <= MaxMass;\n  }\n  constraint FueledMassRequirement {\n    if vehicle.fuelStatus = FuelStatus::FULL then\n      vehicle.mass = MassRequirement;\n    end if;\n  }\n  constraint ReliabilityRequirement {\n    vehicle.reliability = Reliability::PERFORMANCE or\n    vehicle.re",
    "\npackage VehicleMassComplianceVerificationSystem {\n  part Vehicle {\n    attribute actualMass : Real;\n  }\n  part WeighingEquipment {\n    operation measureMass() : Real;\n  }\n  part TestOperator {\n    operation operateEquipment(eq : WeighingEquipment) : Real;\n  }\n  part ComplianceChecker {\n    attribute maxPermissibleMass : Real;\n    operation checkCompliance(vehicle : Vehicle) : Boolean;\n  }\n  block VehicleMassComplianceVerificationSystem {\n    part vehicle : Vehicle;\n    part equipment : WeighingEquipment;\n    part operator : TestOperator;\n    part checker : ComplianceChecker;\n    flow measureMass {\n      source equipment;\n      target operator;\n    }\n    flow checkCompliance {\n      source vehicle;\n      target checker;\n    }\n  }\n}\n\nThe model defines a system for verifying vehicle mass compliance. It includes parts for the vehicle, weighing equipment, test operator, and compliance checker. The vehicle has an attribute for",
    "\npackage WaterSupplyNetwork {\n  part SpigotBank {\n    hotWaterOutlet : FlowPort;\n    coldWaterOutlet : FlowPort;\n  }\n  part Faucet {\n    hotWaterInlet : FlowPort;\n    coldWaterInlet : FlowPort;\n  }\n  part Spigot {\n    hotWaterPort : FlowPort;\n    coldWaterPort : FlowPort;\n  }\n  part FaucetInlet {\n    hotWaterPort : FlowPort;\n    coldWaterPort : FlowPort;\n  }\n  connector WaterPipeline {\n    hotWaterConnection : FlowPort;\n    coldWaterConnection : FlowPort;\n  }\n  SpigotBank.hotWaterOutlet <-> WaterPipeline.hotWaterConnection;\n  SpigotBank.coldWaterOutlet <-> WaterPipeline.coldWaterConnection;\n  WaterPipeline.hotWaterConnection <-> Spigot.hotWaterPort;\n  WaterPipeline.coldWaterConnection <-> Spigot.coldWaterPort;\n  Spigot.hotWaterPort <-> FaucetInlet.hotWaterPort;\n",
    "\n\npackage VehicleQualityAnalysisSystem {\n  part Engine;\n  part Transmission;\n  part FrontAxleAssembly;\n  part RearAxleAssembly;\n  part Vehicle {\n    part Engine;\n    part Transmission;\n    part FrontAxleAssembly;\n    part RearAxleAssembly;\n  };\n  block QualityDataInput {\n    in qualityData: QualityData;\n  };\n  block VehicleMassCalculator {\n    in qualityData: QualityData;\n    out totalMass: Mass;\n  };\n  block QualityAnalysisRequirementDefinition;\n  block AnalysisUseCaseFormulation;\n  block AnalysisTaskPlanner {\n    in analysisObjectives: AnalysisObjectives;\n    out analysisTasks: AnalysisTasks;\n    out analysisPlans: AnalysisPlans;\n  };\n  block VehicleDesignSupport {\n    out designOptimization: DesignOptimization;\n  };\n  flow f1 {\n    source QualityDataInput;\n    target VehicleMassCalculator;\n  };\n  flow f2 {\n    source VehicleMassCalculator;\n   ",
    "\npackage VehiclePowertrainConfiguration {\n  part EngineConfiguration {\n    attribute power : Real;\n    attribute mass : Real;\n    attribute efficiency : Real;\n    attribute reliability : Real;\n    attribute cost : Real;\n  }\n  part EngineStructure {\n    attribute type : String;\n  }\n  part Cylinder {\n    attribute number : Integer;\n  }\n  part Piston {\n    // No attributes defined\n  }\n  part ConnectingRod {\n    // No attributes defined\n  }\n  part Crankshaft {\n    // No attributes defined\n  }\n  part EvaluationModel {\n    // No attributes defined\n  }\n  part Explanation {\n    attribute rationality : String;\n  }\n  EngineConfiguration selects EvaluationModel;\n  EvaluationModel assesses EngineConfiguration;\n  EngineConfiguration recommends EngineStructure;\n  EngineStructure includes Cylinder;\n  EngineStructure includes Piston;\n  EngineStructure includes ConnectingRod;\n  EngineStructure includes Crankshaft;\n  EngineConfiguration provides Explanation;\n}\n\nThe SysML v2",
    "\npackage FuelEconomySystem {\n  part Vehicle {\n    attribute rangePerGallonUrban : Real;\n    attribute rangePerGallonHighway : Real;\n    attribute additionalLoad : Real;\n  }\n  part Powertrain {\n    // Define attributes and relationships specific to the powertrain\n  }\n  part Load {\n    // Define attributes and relationships specific to the load\n  }\n  part OperatingConditions {\n    // Define attributes and relationships specific to the operating conditions\n  }\n  part FuelConsumptionAssessment {\n    attribute urbanScenario : Boolean;\n    attribute highwayScenario : Boolean;\n    operation assessFuelConsumption();\n  }\n  constraint urbanRangeConstraint {\n    Vehicle.rangePerGallonUrban >= 25.0;\n  }\n  constraint highwayRangeConstraint {\n    Vehicle.rangePerGallonHighway >= 30.0;\n  }\n  constraint additionalLoadConstraint {\n    Vehicle.additionalLoad = 1000.0;\n  }\n  block FuelEconomySystemBlock {\n    part",
    "\npackage VehicleLongitudinalSimulation {\n  block Vehicle {\n    part Mass;\n    part Position;\n    part Velocity;\n    part Acceleration;\n  }\n  block UserInput {\n    part MassParameters;\n    part InitialPosition;\n    part InitialVelocity;\n    part SegmentedPowerOutputData;\n  }\n  block System {\n    part CalculateAcceleration;\n    part CalculateVelocity;\n    part CalculatePosition;\n    part OutputData;\n  }\n  flow CalculateAccelerationFlow {\n    source UserInput.SegmentedPowerOutputData;\n    target System.CalculateAcceleration;\n  }\n  flow CalculateVelocityFlow {\n    source System.CalculateAcceleration;\n    target System.CalculateVelocity;\n  }\n  flow CalculatePositionFlow {\n    source System.CalculateVelocity;\n    target System.CalculatePosition;\n  }\n  flow OutputDataFlow {\n    source System.CalculatePosition;\n    target System.OutputData;\n  }\n  flow UpdateVehicleStateFlow {\n    source",
    "\npackage VehicleSystem {\n  part Vehicle {\n    attribute mass : Real = 2500;\n    part FrontAxleAssembly {\n      attribute mass : Real = 150;\n      attribute steeringAngle : Real;\n      part FrontWheel[2];\n      part FrontAxle;\n    }\n    part RearAxleAssembly {\n      attribute mass : Real = 250;\n      part RearWheel[2];\n      part RearAxle;\n    }\n  }\n}\n\nThe provided SysML v2 code represents a vehicle system model that includes a car with a total mass of 2,500 kg. The car is composed of two main assemblies: the front axle assembly and the rear axle assembly. The front axle assembly has a mass of 150 kg and consists of two front wheels and a front axle. The front axle has properties for mass and steering angle. The rear axle assembly has a mass of 250 kg and consists of two rear wheels and a rear axle. The rear axle has a mass property. The model aims",
    "\npackage VehicleSafetySecuritySystem {\n  part Vehicle {\n    part SeatBelt {\n      feature Mandatory;\n    }\n    part Airbag {\n      feature Optional;\n    }\n    part AlarmDevice {\n      feature Security;\n    }\n    part KeylessEntrySystem {\n      feature Security;\n    }\n    part Bumper {\n      feature Mandatory;\n    }\n    part AntiLockBrakingSystem {\n      feature Optional;\n    }\n  }\n  block System {\n    feature FilterAndOrganize {\n      direction in;\n      type Vehicle;\n    }\n    feature Visualize {\n      direction out;\n      type TreeStructure;\n      type Table;\n    }\n  }\n}\n\nThe model defines a package for the Vehicle Safety and Security System. Within this package, there is a part representing the Vehicle, which contains parts for SeatBelt, Airbag, AlarmDevice, KeylessEntrySystem, Bumper, and AntiLockBrakingSystem. Each of these parts has a feature to indicate whether it is Mandatory, Optional, or a Security feature. The System block is",
    "\npackage System {\n  part ApplicationLayer;\n  part ServiceLayer;\n  part DataLayer;\n\n  flow ApplicationLayer.useFunctionalities < ServiceLayer;\n  flow ServiceLayer.retrieveData < DataLayer;\n  flow ServiceLayer.storeData > DataLayer;\n\n  attribute x : Integer;\n  attribute y : Integer;\n  attribute z : Integer {\n    derivedFrom x, y;\n  }\n}\n\nThis SysML v2 model represents the system architecture with three layers: ApplicationLayer, ServiceLayer, and DataLayer. The ApplicationLayer uses functionalities provided by the ServiceLayer, and the ServiceLayer retrieves and stores data from the DataLayer. The system has three core attributes: x, y, and z, where attribute z is derived from attributes x and y. The flows represent the dependencies and data flow between the layers.",
    "\npackage TorqueGenerationSystem {\n  part PowertrainSystem;\n  block TorqueGenerator {\n    [1..1] torqueGenerationFunction: Requirement {\n      text: \"The torque produced during operation must be greater than zero newton-meters to ensure driving capability.\";\n    }\n    [1..*] component: Component {\n      allocation: TorqueGeneratorFunctionAllocation;\n    }\n  }\n  block TorqueGeneratorFunctionAllocation {\n    allocatedFunction: TorqueGenerator::torqueGenerationFunction;\n    allocatedItem: PowertrainSystem;\n  }\n}\n\nThis SysML v2 model defines a package named \"TorqueGenerationSystem\" that includes a part representing the \"PowertrainSystem\". Within this package, there is a block named \"TorqueGenerator\" that contains a requirement for the torque generation function. This requirement specifies that the torque produced during operation must be greater than zero newton-meters. The \"TorqueGenerator\" block also includes a relationship to one or more components that are capable of generating torque.\n\nAdditionally, there is a block named \"TorqueGeneratorFunctionAllocation\" that represents the allocation and mapping",
    "\nblock System {\n  part PowerTransmission;\n  part TorqueGeneration;\n  part PowerOutput;\n}\n\nblock PowerTransmission {\n  part Engine;\n}\n\nblock TorqueGeneration {\n  refines System::TorqueGeneration;\n  blockFunction generateTorque;\n}\n\nblock Engine {\n  refines PowerTransmission::Engine;\n  blockFunction executeTorqueGeneration;\n}\n\nblock PowerOutput {\n  refines System::PowerOutput;\n  blockFunction transmitPower;\n}\n\nblockFunction generateTorque {\n  direction out;\n  blockActionEffect generateTorqueEffect;\n}\n\nblockFunction executeTorqueGeneration {\n  direction in;\n  blockActionEffect generateTorqueEffect;\n}\n\nblockFunction transmitPower {\n  direction out;\n  blockActionEffect transmitPowerEffect;\n}\n\nblockActionEffect generateTorqueEffect {\n  refines TorqueGeneration::generateTorque::generateTorqueEffect;\n  refines Engine::executeTorqueGeneration::generateTorqueEffect;\n}\n\nblockActionEffect transmitPowerEffect {\n  refines PowerOutput::transmitPower::",
    "\npackage VehicleSafetyAndAntiTheftFunctionCatalogue {\n  part Vehicle {\n    part SafetyComponents {\n      part MandatorySafetyComponents {\n        part FrontSeatBelts;\n        part Bumpers;\n      }\n      part OptionalSafetyComponents {\n        part DriversAirbag;\n        part AntiLockBrakingSystem;\n      }\n    }\n    part SecurityComponents {\n      part AlarmSystem;\n      part KeylessEntrySystem;\n    }\n    part SafetyAndSecurityComponents {\n      // No specific components mentioned\n    }\n  }\n}\n\nThis SysML model represents the Vehicle Safety and Anti-theft Function Catalogue as a package containing a Vehicle part. The Vehicle part is further divided into SafetyComponents, SecurityComponents, and SafetyAndSecurityComponents parts. The SafetyComponents part is further divided into MandatorySafetyComponents and OptionalSafetyComponents parts. The MandatorySafetyComponents part includes FrontSeatBelts and Bumpers, while the OptionalSafetyComponents part includes DriversAirbag and AntiLockBrakingSystem. The SecurityComponents part includes AlarmSystem",
    "\npackage FuelSupplySystem {\n  part Vehicle;\n  part FuelSystem;\n  part FuelTankAssembly;\n  part FuelPump;\n  part FuelTank;\n  part FuelConsumingUnit[*];\n  part ReturnLine;\n  flow FuelFlow;\n  flow FuelTemperatureInfo;\n\n  Vehicle \"equipped with\" FuelSystem;\n  FuelSystem \"composed of\" FuelTankAssembly;\n  FuelTankAssembly \"integrates\" FuelPump;\n  FuelTankAssembly \"integrates\" FuelTank;\n  FuelPump \"pressurizes\" FuelFlow;\n  FuelPump \"delivers\" FuelFlow \"to\" FuelConsumingUnit;\n  FuelConsumingUnit \"consumes\" FuelFlow;\n  ReturnLine \"allows\" FuelFlow \"to return to\" FuelTank;\n  FuelPump \"monitors\" FuelTemperatureInfo;\n  FuelPump \"transmits\" FuelTemperatureInfo;\n}",
    "\npackage SafetyAndSecurityCompliance {\n  part Vehicle {\n    part Interior {\n      part SeatBelt {\n        multiplicity 2;\n        isMandatory;\n      }\n      part Airbag {\n        isOptional;\n      }\n      part AntiTheftAlarmDevice {\n        isSecurityComponent;\n      }\n    }\n    part Body {\n      part Bumper {\n        isMandatory;\n        isSafetyComponent;\n      }\n      part KeylessEntrySystem {\n        isSecurityComponent;\n      }\n    }\n    part ChassisStructure {\n      part Wheel {\n        multiplicity 2;\n      }\n      part AntiLockBrakingSystem {\n        multiplicity 2;\n        isOptional;\n      }\n    }\n  }\n  block System {\n    part IdentificationAndClassificationManagement {\n      appliesTo Vehicle;\n    }\n  }\n}\n\nThis SysML v2 model represents the safety and security compliance configurations of a vehicle. The model includes components such as seat belts, airbags, anti-theft alarm devices, bump",
    "\npackage VehicleSafetyAndSecurity {\n  part Interior {\n    part AlarmSystem;\n    part SeatBelt;\n    part FrontRowSeat;\n    part DriversAirbag;\n  }\n  part BodyAssembly {\n    part VehicleBody;\n    part Bumper;\n    part KeylessEntrySystem;\n  }\n  blockBehavior SafetyFeatures {\n    part SeatBeltConfiguration;\n    part AirbagConfiguration;\n    part BumperConfiguration;\n  }\n  blockBehavior SecurityFeatures {\n    part OnboardAlarm;\n    part KeylessEntrySystem;\n  }\n  blockBehavior IntegratedSystem {\n    part SafetyFeatures;\n    part SecurityFeatures;\n  }\n}\n\nThe model defines a package VehicleSafetyAndSecurity that contains parts Interior and BodyAssembly. The Interior part includes sub-parts AlarmSystem, SeatBelt, FrontRowSeat, and DriversAirbag. The BodyAssembly part includes sub-parts VehicleBody, Bumper, and KeylessEntrySystem. The model also defines blockBehaviors SafetyFeatures and SecurityFeatures, which represent the safety and security features",
    "\npackage InformationSecurityManagement {\n  part type Component {\n    [1] classification : ClassificationLevel;\n  }\n  enumeration ClassificationLevel {\n    Unclassified,\n    Confidential,\n    Secret\n  }\n}\n\nThe given natural-language requirements have been successfully translated into a SysML v2 textual model. The model defines a package named \"InformationSecurityManagement\" that contains a part type called \"Component\" and an enumeration called \"ClassificationLevel\". The \"Component\" part type has a classification attribute of type \"ClassificationLevel\", which is a required attribute as indicated by the \"[1]\" multiplicity. The \"ClassificationLevel\" enumeration defines three possible values: \"Unclassified\", \"Confidential\", and \"Secret\". This model accurately captures the requirement of assigning a security classification level to each component and enabling the system to recognize and display the classification attribute of \"Confidential\" components.",
    "\nblock VehicleControlSystem {\n  part VehicleControlUnit;\n  part EngineControlUnit;\n  part CANBus;\n  part VehicleControlUnitBusIF;\n  part EngineControlUnitBusIF;\n  part SensorDataExchangeInterface;\n  VehicleControlUnitBusIF.connector: CANBus;\n  EngineControlUnitBusIF.connector: CANBus;\n  VehicleControlUnit.flow: VehicleControlUnitBusIF;\n  EngineControlUnit.flow: EngineControlUnitBusIF;\n  VehicleControlUnit.flow: SensorDataExchangeInterface;\n  EngineControlUnit.flow: SensorDataExchangeInterface;\n}\n\nThe model defines a block named VehicleControlSystem that contains the main components of the system: VehicleControlUnit, EngineControlUnit, CANBus, VehicleControlUnitBusIF, EngineControlUnitBusIF, and SensorDataExchangeInterface. The VehicleControlUnitBusIF and EngineControlUnitBusIF are connected to the CANBus using the connector relationship. The VehicleControlUnit and EngineControlUnit are connected to their respective BusIFs using the flow relationship. Additionally, both the VehicleControlUnit",
    "\npackage BloodGlucoseMeterSystem {\n  part Battery {\n    [1] status : BatteryStatus;\n  }\n  part BatteryStatus {\n    depleted : Boolean;\n    chargeable : Boolean;\n  }\n  part User {\n    alert : Boolean;\n  }\n  part BloodGlucoseMeasurementFunction {\n    abnormal : Boolean;\n  }\n  part AlarmMechanism {\n    [1] user : User;\n    [1] batteryStatus : BatteryStatus;\n    [1] bloodGlucoseMeasurementFunction : BloodGlucoseMeasurementFunction;\n  }\n  part EmergencyResponseMechanism {\n    [1] bloodGlucoseMeasurementFunction : BloodGlucoseMeasurementFunction;\n  }\n  part RiskManagement {\n    [*] keyScenario : KeyRiskScenario;\n  }\n  part KeyRiskScenario {\n    [1] risk : Risk;\n  }\n  part Risk {\n    description : String;\n  }\n  part Patient {\n    [*] receiveTherapeuticSupport",
    "\npackage ScientificComputing {\n  part StandardConstants {\n    attribute e : Real[20] = 2.71828182845904523536;\n    attribute pi : Real[20] = 3.14159265358979323846;\n  }\n  part PhysicalConstants {\n    attribute c : Real[20] = 299792458; // speed of light in vacuum, m/s\n    attribute alpha : Real[20] = 7.2973525693e-3; // fine-structure constant\n    attribute m_e_to_m_p : Real[20] = 5.4461702177e-4; // electron-to-proton mass ratio\n  }\n  part ScenarioBasedConstants {\n    attribute g : Real[20] = 9.80665; // standard gravitational acceleration on Earth, m/s^2\n    attribute A_ModelX : Real",
    "\npackage AutomotiveComponents {\n  part type Tire {\n    attribute manufacturer : String;\n    attribute rimDiameter : Real;\n    attribute width : Integer;\n  }\n  part instance MichelinTire : Tire {\n    manufacturer = \"Michelin\";\n    rimDiameter = 18.0;\n    width = 245;\n  }\n}\n\nThe provided SysML v2 code defines a package named \"AutomotiveComponents\" that contains a part type \"Tire\" with three attributes: \"manufacturer\" (String), \"rimDiameter\" (Real), and \"width\" (Integer). Additionally, it includes a part instance \"MichelinTire\" of the \"Tire\" type, which is initialized with the manufacturer \"Michelin\", rim diameter 18.0, and width 245. This model allows for the specification and instantiation of tires with different brands and specifications.",
    "\npackage AutomotiveComponentModel {\n  part Vehicle {\n    attribute mass : Real [1] {\n      unit = \"kg\";\n      unit = \"lbs\";\n    }\n    attribute length : Real [1] {\n      unit = \"m\";\n      unit = \"ft\";\n    }\n    part LeftFrontWheel : FrontWheel;\n    part RightFrontWheel : FrontWheel;\n  }\n  part FrontWheel {\n    attribute hubDiameter : Real [1] {\n      unit = \"in\";\n      unit = \"mm\";\n    }\n    attribute width : Real [1] {\n      unit = \"mm\";\n      unit = \"in\";\n    }\n    attribute outerDiameter : Real [1] {\n      unit = \"mm\";\n      unit = \"in\";\n    }\n    part Tire;\n  }\n}\n\nThe provided SysML v2 code defines a package named \"AutomotiveComponentModel\" that contains two parts: \"Vehicle\" and \"FrontWheel\". The \"Vehicle\" part has two attributes: \"mass\" and \"length\", both of which",
    "\npackage VehicleConfiguration {\n  part type Engine {\n    EngineType : EngineType [1];\n  }\n  part type Transmission {\n    TransmissionType : TransmissionType [1];\n  }\n  part type Powertrain {\n    engine : Engine [1..1];\n    transmission : Transmission [1..1];\n  }\n  part type Vehicle {\n    powertrain : Powertrain [1..1];\n  }\n  enum EngineType {\n    fourCylinder,\n    sixCylinder\n  }\n  enum TransmissionType {\n    manual,\n    automatic\n  }\n  constraint HighPerformanceModel {\n    vehicle.powertrain.engine.EngineType = EngineType::sixCylinder\n  }\n  constraint ValidPowertrainCombinations {\n    (vehicle.powertrain.engine.EngineType = EngineType::fourCylinder and\n     vehicle.powertrain.transmission.TransmissionType = TransmissionType::manual) or\n    (vehicle.powertrain.engine.EngineType = EngineType::sixCylinder and\n     vehicle.powertrain.transmission.Trans",
    "\npackage AutomotiveComponentModeling {\n  part type Vehicle {\n    attribute totalMass : Real {\n      value : 1200.0\n      unit : \"kg\"\n    }\n    attribute length : Real {\n      value : 4.82\n      unit : \"m\"\n    }\n    part : WheelAssembly[*]\n  }\n  part type WheelAssembly {\n    part : Tire[*]\n    part : BrakeDiscAssembly\n  }\n  part type Tire {\n    attribute rimDiameter : Real {\n      value : 18.0\n      unit : \"in\"\n    }\n    attribute width : Real {\n      value : 245.0\n      unit : \"mm\"\n    }\n    attribute height : Real {\n      value : 45.0\n      unit : \"mm\"\n    }\n    attribute treadDepth : Real {\n      value : 6.0\n      unit : \"mm\"\n    }\n    constraint treadDepth >= 3.5\n  }\n  part type BrakeDiscAssembly {\n    attribute radius",
    "\npackage AutomotiveFuelSystem {\n  part FuelTankAssembly {\n    port FuelOutlet {\n      direction in out;\n    }\n  }\n  part FuelPump {\n    partType FuelTankAssembly;\n    port FuelIn {\n      direction in;\n    }\n    port FuelOut {\n      direction out;\n    }\n  }\n  part FuelTank {\n    partType FuelTankAssembly;\n    port FuelIn {\n      direction in;\n    }\n    port FuelOut {\n      direction out;\n    }\n  }\n  flow FuelCirculation {\n    source FuelTankAssembly.FuelOutlet;\n    target FuelPump.FuelIn;\n    target FuelTank.FuelIn;\n    target Engine;\n  }\n  flow ReturnedFuel {\n    source FuelPump.FuelOut;\n    target FuelTankAssembly.FuelOutlet;\n  }\n  flow FuelTemperatureInfo {\n    source FuelTankAssembly;\n    target SystemMonitor;\n",
    "\npackage PhysicalQuantitySystem {\n  part PhysicalQuantity {\n    attribute name;\n    attribute symbol;\n    attribute baseQuantity;\n    attribute unit;\n  }\n  part QuantitySystem {\n    attribute name;\n    attribute baseQuantities : PhysicalQuantity[*];\n    attribute units : Unit[*];\n    operation importQuantitySystem(quantitySystem : QuantitySystem);\n    operation extendQuantitySystem(quantitySystem : QuantitySystem);\n    operation convertUnit(fromUnit : Unit, toUnit : Unit, value : Real);\n  }\n  part Unit {\n    attribute name;\n    attribute symbol;\n    attribute conversionFactor : Real;\n  }\n}\n\nThis SysML v2 model defines a package `PhysicalQuantitySystem` that contains three parts: `PhysicalQuantity`, `QuantitySystem`, and `Unit`.\n\nThe `PhysicalQuantity` part has attributes for the name, symbol, base quantity, and unit of a physical quantity.\n\nThe `QuantitySystem` part has attributes for the name, a collection of base physical quantities, and a collection of units. It also has operations for",
    "\npackage UnitSystemLibrary {\n  part ISQ;\n  part USCustomaryUnits;\n  block UnitConversion {\n    input ISQUnit;\n    input USCustomaryUnit;\n    output ConvertedUnit;\n  };\n  block UnitManagement {\n    input UnitType;\n    output ManagedUnit;\n  };\n  block UnitApplication {\n    input Unit;\n    output AppliedValue;\n  };\n  flow AccurateUnitTypes;\n  flow EfficientDataProcessing;\n  flow ReliableCommunication;\n  flow ReducedConfusion;\n  flow ErrorReduction;\n  ISQUnit <- UnitConversion.input;\n  USCustomaryUnit <- UnitConversion.input;\n  ConvertedUnit -> UnitConversion.output;\n  UnitType <- UnitManagement.input;\n  ManagedUnit -> UnitManagement.output;\n  Unit <- UnitApplication.input;\n  AppliedValue -> UnitApplication.output;\n  AccurateUnitTypes <- ISQ;\n  AccurateUnitTypes <- USCustomaryUnits;\n  EfficientDataProcessing <- UnitManagement;\n",
    "\npackage HeadlampBeamAdjustmentSystem {\n  part HeadlampBeamAdjustmentKnob {\n    attribute tiltAngle : Real [1..1] {\n      unit = \"degree\";\n      constraint = (50 <= value) and (value <= 80);\n    }\n  }\n  requirement SafetyAndRegulatoryCompliance {\n    description = \"The tilt angle of the headlamp beam (measured in degrees) must be between 50 degrees and 80 degrees.\";\n  }\n  requirement PrecisionAndConsistency {\n    description = \"The system adopts the International System of Units (SI) and standard real number constants (such as pi and Euler’s number e) to ensure precision and consistency in calculations.\";\n  }\n  requirement Reliability {\n    description = \"The system achieves scientific and reliable management of the headlamp beam adjustment knob functionality.\";\n  }\n}\n\nThis SysML v2 model defines a package for the Headlamp Beam Adjustment System, which includes a part representing the Headlamp Beam Adjustment Knob. The knob has an",
    "\npackage DataTypes {\n  datatype UnsignedInteger <<primitive>> {\n    constraint: value >= 0\n  }\n  datatype UnsignedFloat <<primitive>> {\n    constraint: value >= 0\n  }\n  datatype DateTime <<primitive>>\n  datatype String <<primitive>>\n  datatype Boolean <<primitive>>\n  datatype StatusColor <<enumeration>> {\n    member red\n    member yellow\n    member green\n  }\n  datatype Dimension {\n    attribute diameter: UnsignedInteger {\n      default: 60\n      constraint: value in {60, 70, 80}\n    }\n  }\n}\n\npackage StatusManagement {\n  part statusColorMap: StatusColor[*]\n  block StatusManager {\n    port statusColorMap\n    flow statusColorMap {\n      direction in\n      redefinedFlow: DataTypes::StatusColor[*]\n    }\n    flow status {\n      direction out\n      type: DataTypes::StatusColor\n    }\n    parameter statusLevels: StatusLevel[*]\n    flow statusLevels {\n     ",
    "\npackage Requirements {\n  block System {\n    part SpareParts {\n      part Bags {\n        type Bag<SparePart>;\n      }\n    }\n    part Integers {\n      part Lists {\n        type List<Integer>;\n      }\n    }\n    part Strings {\n      part Sets {\n        type Set<String>;\n      }\n    }\n    part Personnel {\n      part OrderedSets {\n        type OrderedSet<Person>;\n      }\n      part NestedCollections {\n        type List<Set<Person>>;\n      }\n    }\n    part RealNumbers {\n      part Arrays {\n        type Array[4]<Real>;\n      }\n    }\n  }\n}",
    "\npackage TireInformation {\n  block Tire {\n    attribute manufacturerName : String;\n    attribute rimDiameter : Real;\n    attribute tireWidth : Real;\n    attribute installationPosition : Vector[3];\n  }\n}\n\nThe model defines a package named \"TireInformation\" that contains a block named \"Tire\". The \"Tire\" block has four attributes: \"manufacturerName\" of type String, \"rimDiameter\" of type Real, \"tireWidth\" of type Real, and \"installationPosition\" of type Vector[3]. This model captures the requirements for a structured description of tire information, including the manufacturer name, rim diameter, tire width, and optional installation position information. The model also allows for data scalability to accommodate future additions of other brands, sizes, and installation information.",
    "\npackage SpacecraftTrajectoryRecording {\n  part Mission {\n    attribute liftoffTime : Time;\n  }\n\n  part Spacecraft {\n    attribute position : Position;\n    attribute velocity : Velocity;\n  }\n\n  part TrajectoryData {\n    attribute timePoint : Time;\n    attribute positionData : Position;\n    attribute velocityData : Velocity;\n  }\n\n  association TrajectoryRecording {\n    Spacecraft \"1\" -- \"*\" TrajectoryData : records;\n    Mission \"1\" -- \"*\" TrajectoryData : providesReferenceTime;\n  }\n\n  datatype Position {\n    attribute x : Real;\n    attribute y : Real;\n    attribute z : Real;\n    unit is \"m\";\n  }\n\n  datatype Velocity {\n    attribute vx : Real;\n    attribute vy : Real;\n    attribute vz : Real;\n    unit is \"m/s\";\n  }\n\n  datatype Time {\n    attribute value : Real;\n    unit is \"s\";\n  }\n}\n\nThe provided SysML v2 code defines",
    "\npackage MaterialScience {\n  part type Substance {\n    attribute atomicMass : Real;\n  }\n  part type Material extends Substance {\n    attribute tensileStrength : Real;\n  }\n  part type Metal extends Material {\n  }\n  part type Alloy extends Material {\n    attribute componentMaterials : List[ComponentMaterial];\n  }\n  part type ComponentMaterial {\n    attribute material : Material;\n    attribute massFraction : Real;\n  }\n  part type CommonMetal extends Metal {\n    attribute name : String;\n  }\n  part type TypicalAlloy extends Alloy {\n    attribute name : String;\n  }\n  part type SIUnit {\n    attribute name : String;\n  }\n  part type Property {\n    attribute name : String;\n    attribute unit : SIUnit;\n    attribute value : Real;\n  }\n  part type MetallicMaterial extends Material {\n    attribute properties : List[Property];\n  }\n  part type MetallicAlloy extends Alloy {\n    attribute properties : List[Property];\n  }\n  part type User {\n    attribute",
    "\npackage EngineeringMaterialsDatabase {\n  part type Material {\n    attribute atomicMass : Real;\n    attribute compositionalInformation : CompositionalInformation;\n    attribute mechanicalPropertyIndicators : MechanicalPropertyIndicators;\n  }\n  part type Metal extends Material {\n    attribute detailedCompositionalInformation : DetailedCompositionalInformation;\n  }\n  part type Alloy extends Metal {\n    attribute massFraction : Real[*];\n  }\n  part type CompositionalInformation {\n    attribute constituentMaterials : Material[*];\n  }\n  part type DetailedCompositionalInformation {\n    attribute massFraction : Real[*];\n    attribute constituentMaterials : Material[*];\n  }\n  part type MechanicalPropertyIndicators {\n    attribute tensileStrength : Quantity;\n  }\n  part type Quantity {\n    attribute value : Real;\n    attribute unit : Unit;\n  }\n  part type Unit {\n    attribute name : String;\n  }\n  part type Steel_980 extends Alloy {\n    attribute ironMassFraction : Real;\n    attribute carbon",
    "\npackage PubSubSystem {\n  part Publisher {\n    [1..*] publish(msg : Message) : void;\n  };\n  part Subscriber {\n    [1..*] receive(msg : Message) : void;\n    [1..*] subscribe(topic : Topic) : void;\n    [1..*] unsubscribe(topic : Topic) : void;\n  };\n  part Server {\n    [1..*] distribute(msg : Message) : void;\n    [1..*] subscribe(subscriber : Subscriber, topic : Topic) : void;\n    [1..*] unsubscribe(subscriber : Subscriber, topic : Topic) : void;\n  };\n  part Message {\n    topic : Topic;\n    content : String;\n  };\n  part Topic {\n    name : String;\n  };\n  Publisher \"1\" -- \"0..*\" Server : publishes;\n  Server \"1\" -- \"0..*\" Subscriber : distributes;\n  Subscriber \"1\" -- \"0..*\" Server : subscribes;\n  Server",
    "\npackage VehicleFuelSystem {\n  part FuelTankAssembly;\n  part Engine;\n  flow FuelFlow;\n  flow FuelReturnFlow;\n  item Fuel;\n  item FuelTemperature;\n  FuelFlow.item = Fuel;\n  FuelReturnFlow.item = Fuel;\n  FuelTankAssembly.flow = FuelFlow;\n  Engine.flow = FuelFlow;\n  Engine.flow = FuelReturnFlow;\n  FuelTankAssembly.flow = FuelReturnFlow;\n  Engine.attribute[1] = FuelTemperature;\n  FuelFlow.attribute[1] = FuelTemperature;\n  FuelReturnFlow.attribute[1] = FuelTemperature;\n}\n\nThe model defines a package called VehicleFuelSystem that contains the following elements:\n\n* Two parts: FuelTankAssembly and Engine\n* Two flows: FuelFlow and FuelReturnFlow\n* Two items: Fuel and FuelTemperature\n* The FuelFlow and FuelReturnFlow flows are associated with the Fuel item\n* The FuelTank",
    "\npackage PublishSubscribeMessageFlow {\n  part Producer;\n  part Server;\n  part Consumer;\n\n  flow PublishMessage {\n    source Producer;\n    target Server;\n  }\n\n  flow SubscribeTopic {\n    source Consumer;\n    target Server;\n  }\n\n  flow PushMessage {\n    source Server;\n    target Consumer;\n  }\n\n  requirement ReliableMessagePublishing {\n    derivedFrom PublishMessage;\n  }\n\n  requirement EfficientInformationExchange {\n    derivedFrom [PublishMessage, SubscribeTopic, PushMessage];\n  }\n}",
    "\npackage TransportationSystem {\n  part Driver;\n  part Passenger[0..4];\n  part Vehicle {\n    attribute maxFuelCapacity;\n    attribute currentFuelLevel;\n    constraint currentFuelLevel <= maxFuelCapacity;\n    constraint currentFuelLevel >= 0.1 * maxFuelCapacity;\n  };\n  part GasStation;\n  part Environment;\n  block Boarding {\n    input: Driver, Passenger[0..4];\n    output: Vehicle;\n  };\n  block Refueling {\n    input: Vehicle, GasStation;\n    output: Vehicle;\n    constraint Vehicle.currentFuelLevel < 0.1 * Vehicle.maxFuelCapacity;\n  };\n  block Alighting {\n    input: Vehicle;\n    output: Driver, Passenger[0..4];\n  };\n  flow Travel {\n    source: Boarding;\n    target: Alighting;\n    input: Driver, Passenger[0..4], Environment;\n    output: Environment;\n    precondition: Vehicle.currentFuelLevel >= 0.1",
    "\npackage FuelManagementSystem {\n  part FuelTank {\n    port FuelOutlet {\n      [1] fuelTemperature: Real;\n    }\n    port FuelReturn {\n      [1] fuelTemperature: Real;\n    }\n  }\n  part Engine {\n    port FuelInlet {\n      [1] fuelTemperature: Real;\n    }\n  }\n  connector FuelInterface {\n    FuelTank.FuelOutlet fuelOutlet;\n    Engine.FuelInlet fuelInlet;\n  }\n  connector FuelReturnInterface {\n    FuelTank.FuelReturn fuelReturn;\n    Engine.FuelInlet fuelInlet;\n  }\n}\n\nThis SysML v2 model represents the Fuel Management System with a FuelTank and an Engine. The FuelTank has two ports: FuelOutlet and FuelReturn, both with a fuelTemperature attribute. The Engine has a FuelInlet port with a fuelTemperature attribute. The FuelTank and Engine are connected via two connectors: FuelInterface and FuelReturn",
    "\npackage VehicleFuelSystem {\n  part FuelTankAssembly;\n  part Engine;\n  flow FuelFlow;\n  port FuelSupplyPort;\n  port FuelReturnPort;\n  property FuelTemperature;\n\n  FuelTankAssembly.fuelSupplyPort : FuelSupplyPort;\n  Engine.fuelReturnPort : FuelReturnPort;\n  FuelFlow.source : FuelSupplyPort;\n  FuelFlow.target : FuelReturnPort;\n  FuelSupplyPort.fuelTemperature : FuelTemperature;\n  FuelReturnPort.fuelTemperature : FuelTemperature;\n}",
    "\npackage PhotoCaptureSystem {\n  part User;\n  part Scene;\n  part System;\n\n  flow Focusing {\n    source System;\n    target Scene;\n  };\n\n  flow GeneratingIntermediateImage {\n    source Focusing;\n    target System;\n  };\n\n  flow CapturingFinalPhoto {\n    source GeneratingIntermediateImage;\n    target System;\n  };\n\n  flow OutputtingFinalPhoto {\n    source CapturingFinalPhoto;\n    target User;\n  };\n\n  block UserSelection {\n    part type[1] User;\n    part type[1] Scene;\n  };\n\n  block AutomaticFocusing {\n    part type[1] System;\n    part type[1] Scene;\n    flow type[1] Focusing;\n  };\n\n  block ImageGeneration {\n    part type[1] System;\n    flow type[1] GeneratingIntermediateImage;\n  };\n\n  block AutomaticShooting {\n    part type[1] System;\n    flow type[1] CapturingFinalPhoto;\n  };\n\n",
    "\nblock PhotographyWorkflow {\n  part SceneSelection;\n  part Focusing;\n  part Shooting;\n  flow SceneSelectionToFocusing;\n  flow FocusingToShooting;\n}\n\nblock SceneSelection {\n  parameter scene;\n  output scene;\n}\n\nblock Focusing {\n  input scene;\n  output focusedImage;\n}\n\nblock Shooting {\n  input focusedImage;\n  output finalPhotograph;\n}\n\nblock SceneSelectionToFocusing {\n  source SceneSelection;\n  target Focusing;\n  item scene;\n}\n\nblock FocusingToShooting {\n  source Focusing;\n  target Shooting;\n  item focusedImage;\n}",
    "\npackage PhotographyWorkflow {\n  part PhotographySystem {\n    [1] operation selectScene();\n    [1] operation performFocusing();\n    [1] operation performShooting();\n    [1] operation completeWorkflow();\n  }\n  flow completeWorkflow {\n    source = PhotographySystem::selectScene;\n    target = PhotographySystem::performFocusing;\n  }\n  flow completeWorkflow {\n    source = PhotographySystem::performFocusing;\n    target = PhotographySystem::performShooting;\n  }\n  flow completeWorkflow {\n    source = PhotographySystem::performShooting;\n    target = PhotographySystem::completeWorkflow;\n  }\n}\n\nThis SysML v2 model defines a package called \"PhotographyWorkflow\" that contains a part called \"PhotographySystem\". The PhotographySystem part has four operations: selectScene, performFocusing, performShooting, and completeWorkflow. The completeWorkflow operation is represented as a flow that connects the selectScene, performFocusing, performShooting, and completeWorkflow operations in sequence. This model capt",
    "\npackage PhotographyAutomationSystem {\n  block PhotographyAutomationSystem {\n    part User;\n    part Scene;\n    part Image;\n    part Photograph;\n    flow FocusProcessing {\n      source Scene;\n      target Image;\n    };\n    flow ShootingOperation {\n      source Image;\n      target Photograph;\n    };\n  };\n  requirement AutomatePhotographyProcess {\n    derivedRequirement FocusProcessingRequirement;\n    derivedRequirement ShootingOperationRequirement;\n  };\n  requirement FocusProcessingRequirement {\n    derivedRequirement SeamlessIntegrationRequirement;\n    derivedRequirement NoUserInterventionRequirement;\n  };\n  requirement ShootingOperationRequirement {\n    derivedRequirement SeamlessIntegrationRequirement;\n    derivedRequirement NoUserInterventionRequirement;\n  };\n  requirement SeamlessIntegrationRequirement;\n  requirement NoUserInterventionRequirement;\n}",
    "\npackage PhotographyWorkflow {\n  part type User;\n  part type System;\n  part type Scene;\n  part type Image;\n  part type Picture;\n\n  block PhotographyProcess {\n    ownedPart user: User[1];\n    ownedPart system: System[1];\n    ownedPart scene: Scene[1];\n    ownedPart image: Image[1];\n    ownedPart picture: Picture[1];\n\n    flow Focus {\n      source: [system];\n      target: [image];\n    }\n\n    flow Shoot {\n      source: [image];\n      target: [picture];\n    }\n\n    flow InputScene {\n      source: [user];\n      target: [scene];\n    }\n\n    flow OutputPhotograph {\n      source: [picture];\n      target: [user];\n    }\n  }\n}",
    "\npackage PhotographyWorkflow {\n  block PhotographySystem {\n    [1] port selectScene;\n    [1] port capturePhoto;\n    [1] port generateImage;\n    part FocusingModule {\n      [1] port focusScene;\n      [1] port checkFocus;\n    }\n    part ShootingModule {\n      [1] port takePhoto;\n    }\n  }\n  flow focusAndShoot {\n    source PhotographySystem.selectScene;\n    target PhotographySystem.generateImage;\n    flow focusScene {\n      source PhotographySystem.selectScene;\n      target PhotographySystem.FocusingModule.focusScene;\n    }\n    flow checkFocus {\n      source PhotographySystem.FocusingModule.focusScene;\n      target PhotographySystem.FocusingModule.checkFocus;\n    }\n    flow takePhoto {\n      source PhotographySystem.FocusingModule.checkFocus;\n      target PhotographySystem.ShootingModule.takePhoto;\n    }\n    flow generateImage {\n      source PhotographySystem.ShootingModule.takePhoto;\n      target PhotographySystem.",
    "\npackage PhotographySystem {\n  part User;\n  part Scene;\n  part Image;\n  part Photo;\n\n  flow SceneSelection {\n    source User;\n    target Scene;\n  }\n\n  flow Focusing {\n    source Scene;\n    target Image;\n  }\n\n  flow ImageEvaluation {\n    source Image;\n    target FocusQuality;\n  }\n\n  flow ShootingOperation {\n    source Image;\n    target Photo;\n    guard FocusQuality = WellFocused;\n  }\n\n  flow ImageConversion {\n    source Image;\n    target Photo;\n    guard FocusQuality = WellFocused;\n  }\n\n  flow PhotoProduction {\n    source Photo;\n    target User;\n  }\n\n  item FocusQuality {\n    attribute WellFocused;\n  }\n}\n\nThis SysML v2 model represents the system as a package containing parts (User, Scene, Image, Photo) and flows (SceneSelection, Focusing, ImageEvaluation, ShootingOperation, ImageConversion, PhotoProduction) that describe the work",
    "\npackage PhotographyWorkflow {\n  part PhotographySystem {\n    operation takePhoto() {\n      part FocusFunction {\n        operation acquireScene() : Scene;\n        operation focus(Scene) : Image;\n      }\n      operation shoot(Image) : Photo;\n      operation display(Photo);\n    }\n  }\n}\n\nThe given natural-language requirements have been successfully translated into a SysML v2 textual model. The model defines a package named \"PhotographyWorkflow\" that contains a part named \"PhotographySystem\". This system has an operation called \"takePhoto\" that encapsulates the entire photography workflow.\n\nThe \"takePhoto\" operation is composed of three sub-operations: \"acquireScene\", \"focus\", and \"shoot\", which are encapsulated within a part named \"FocusFunction\". The \"acquireScene\" operation returns a \"Scene\" object, which is then used as input for the \"focus\" operation, which in turn returns an \"Image\" object. The \"shoot\" operation takes the \"Image\" object as input and returns a \"Photo\" object. Finally, the \"display\" operation is used to display the resulting",
    "\npackage AutomaticBrakingControlSystem {\n  part Vehicle;\n  part User;\n  part BrakePedal;\n  part Road;\n  part BrakeSystem;\n\n  flow BrakePressure;\n  flow TractionInformation;\n\n  block System {\n    [1] port vehicle : Vehicle;\n    [1] port user : User;\n    [1] port brakePedal : BrakePedal;\n    [1] port road : Road;\n    [1] port brakeSystem : BrakeSystem;\n\n    flow BrakePressure;\n    flow TractionInformation;\n\n    activity ActivateSystem {\n      parameter startPosition : Boolean;\n      do {\n        if (startPosition) {\n          self.BrakePressure = self.brakePedal.detectBrakePressure();\n          self.TractionInformation = self.road.evaluateTraction();\n          self.brakeSystem.adjustBrakePressure(self.BrakePressure);\n          self.brakeSystem.adjustModulationFrequency(self.TractionInformation);\n        }\n     ",
    "\npackage BatteryChargingSystem {\n  part Battery {\n    attribute level {\n      type: Real;\n      range: [0..100];\n    }\n  }\n\n  part BatteryChargingControlSystem {\n    port battery {\n      type: Battery;\n    }\n\n    flow batteryLevelMonitoring {\n      source: [battery];\n      target: [this];\n    }\n\n    flow automaticCharging {\n      source: [this];\n      target: [battery];\n    }\n\n    flow chargingTerminationControl {\n      source: [this];\n      target: [this];\n    }\n  }\n\n  blockDiagram batteryChargingProcess {\n    partInstance batteryInstance {\n      partType: Battery;\n    }\n\n    partInstance batteryChargingControlSystemInstance {\n      partType: BatteryChargingControlSystem;\n    }\n\n    flowInstance batteryLevelMonitoringInstance {\n      flowType: batteryLevelMonitoring;\n      source: [batteryChargingControlSystemInstance];\n      target: [batteryCharg",
    "\npackage ChargingSystem {\n  part ChargingProcess {\n    [1] flow ChargeBattery {\n      direction in;\n    }\n    [1] flow MonitorBatteryLevel {\n      direction out;\n    }\n    [1] flow ReplenishBattery {\n      direction in;\n    }\n    [1] flow TerminateChargingProcess {\n      direction in;\n    }\n  }\n  block Battery {\n    [1..100] attribute {\n      type Percent;\n      name batteryLevel;\n    }\n  }\n  block System {\n    [1] part ChargingProcess;\n    [1] part Battery;\n  }\n  flow ChargeBattery {\n    source System;\n    target ChargingProcess;\n  }\n  flow MonitorBatteryLevel {\n    source ChargingProcess;\n    target System;\n  }\n  flow ReplenishBattery {\n    source ChargingProcess;\n    target Battery;\n  }\n  flow TerminateChargingProcess {\n    source ChargingProcess;\n   ",
    "\nblock System {\n  part Camera {\n    part AutofocusSubsystem {\n      operation autofocus();\n    }\n    part ImagingSubsystem {\n      operation captureImage();\n    }\n    operation selectScene();\n    operation savePhoto();\n  }\n}\n\nThe system is represented as a block with a part called Camera. The Camera block has two parts: AutofocusSubsystem and ImagingSubsystem. The AutofocusSubsystem has an operation called autofocus, and the ImagingSubsystem has an operation called captureImage. The Camera block also has two operations: selectScene and savePhoto. These operations represent the user's ability to select a scene and the system's ability to save the photo taken by the camera.",
    "\n\npackage DigitalCamera {\n  part DigitalCamera;\n  part User;\n  part ShootingModule;\n  part FocusingModule;\n  part ImagingModule;\n\n  block ShootingProcess {\n    part Viewfinding;\n    part Focusing;\n    part Imaging;\n  }\n\n  flow ShootScene {\n    source User;\n    target ShootingModule;\n  }\n\n  flow AutoFocus {\n    source ShootingModule;\n    target FocusingModule;\n  }\n\n  flow GenerateImage {\n    source FocusingModule;\n    target ImagingModule;\n  }\n\n  flow CapturePhoto {\n    source ImagingModule;\n    target DigitalCamera;\n  }\n\n  itemflow ImageData {\n    item Image;\n    source ImagingModule;\n    target DigitalCamera;\n  }\n\n  usage ShootingModuleUsage {\n    client DigitalCamera;\n    supplier ShootingModule;\n  }\n\n  usage FocusingModuleUsage {\n    client ShootingModule;\n    supplier FocusingModule;\n  }\n\n  usage Imaging",
    "\nblock VehicleSimulationSystem {\n  parameter Real mass;\n  parameter Real initialPosition;\n  parameter Real initialVelocity;\n  parameter Real timeInterval;\n  parameter Sequence<Real> powerInput;\n  flow Real position;\n  flow Real speed;\n  part Vehicle {\n    attribute Real mass;\n  };\n  block CalculateSpeed {\n    input Real powerInput;\n    input Real mass;\n    input Real speed;\n    output Real speed;\n  };\n  block CalculatePosition {\n    input Real speed;\n    input Real position;\n    input Real timeInterval;\n    output Real position;\n  };\n  block OutputTrajectory {\n    input Real position;\n    output Real position;\n  };\n  connect CalculateSpeed.powerInput to powerInput;\n  connect CalculateSpeed.mass to mass;\n  connect CalculateSpeed.speed to speed;\n  connect CalculatePosition.speed to speed;\n  connect CalculatePosition.position to position;\n  connect CalculatePosition.timeInterval to timeInterval;\n  connect OutputTrajectory.position to position;\n}",
    "\npackage CameraSystem {\n  part Camera;\n  part Display;\n  block SceneProcessing {\n    input scene;\n    output image;\n    operation focus(scene) : image;\n  };\n  block ImageGeneration {\n    input image;\n    output photo;\n    operation capture(image) : photo;\n  };\n  block PhotoDisplay {\n    input photo;\n    operation display(photo);\n  };\n  flow SceneToImage {\n    source SceneProcessing.scene;\n    target SceneProcessing.focus;\n  };\n  flow ImageToPhoto {\n    source SceneProcessing.image;\n    target ImageGeneration.capture;\n  };\n  flow PhotoToDisplay {\n    source ImageGeneration.photo;\n    target PhotoDisplay.display;\n  };\n  item's base_class[1] = <<Physical>>;\n  item's base_class[2] = <<Behavior>>;\n  item's base_class[3] = <<Interaction>>;\n}\n\nThe provided SysML v2 code defines a system called \"CameraSystem\" that consists of three parts: \"Camera\",",
    "\npackage CameraInformationProcessingWorkflow {\n  part Camera {\n    port viewPort;\n    port displayPort;\n  }\n  block User {\n    part Camera;\n    operation selectScene;\n    operation shoot;\n  }\n  block System {\n    part Camera;\n    operation focus;\n    operation capture;\n    operation display;\n  }\n  flow focusFlow {\n    source User.selectScene;\n    target System.focus;\n  }\n  flow captureFlow {\n    source System.focus;\n    target System.capture;\n  }\n  flow displayFlow {\n    source System.capture;\n    target System.display;\n  }\n  itemflow imageFlow {\n    item Image;\n    source System.focus;\n    target System.capture;\n  }\n  itemflow pictureFlow {\n    item Picture;\n    source System.capture;\n    target System.display;\n  }\n  itemflow sceneFlow {\n    item Scene;\n    source User.selectScene;\n    target System.focus;\n  }\n}\n\nThe model defines a package `CameraInformationProcessingWorkflow` that",
    "\npackage SensorManagement {\n  part type Sensor {\n    [1] status : SensorStatus;\n  }\n  enum SensorStatus {\n    ready,\n    notReady\n  }\n  block SensorManager {\n    [*] sensors : Sensor;\n    [1] updateSensorOperation : UpdateSensorOperation;\n  }\n  block UpdateSensorOperation {\n    [1] sensor : Sensor;\n  }\n  flow updateSensor {\n    source : SensorManager;\n    target : UpdateSensorOperation;\n    guard : sensor.status = SensorStatus::ready;\n  }\n  flow processSensor {\n    source : SensorManager;\n    target : Sensor;\n    guard : sensor.status = SensorStatus::ready;\n  }\n  flow maintainSensor {\n    source : SensorManager;\n    target : Sensor;\n    guard : sensor.status = SensorStatus::ready;\n  }\n}\n\nThis SysML model defines a SensorManagement package that contains a Sensor part type with a status attribute of type SensorStatus. The SensorStatus enum defines two possible states: ready",
    "\npackage VehicleStateManagement {\n  block Vehicle {\n    part VehicleStateMachine {\n      state Off {\n        [isInitial]\n        transition StartSignalReceived\n      }\n      state Starting {\n        transition PowerOnSignalReceived\n      }\n      state On {\n        transition ShutdownSignalReceived\n      }\n      transition StartSignalReceived {\n        source Off\n        target Starting\n      }\n      transition PowerOnSignalReceived {\n        source Starting\n        target On\n      }\n      transition ShutdownSignalReceived {\n        source On\n        target Off\n      }\n    }\n  }\n}",
    "\npackage VehicleStateManagement {\n  block Vehicle {\n    part VehicleStateMachine;\n  }\n  block VehicleStateMachine {\n    part VehicleOffState;\n    part VehicleStartingState;\n    part VehicleOnState;\n    part VehicleOffSignal;\n    part VehicleStartSignal;\n    part VehicleOnSignal;\n    flow VehicleOffToStarting;\n    flow VehicleStartingToOn;\n    flow VehicleOnToOff;\n  }\n  state VehicleOffState {\n    [isInitial]\n    outgoing VehicleOffToStarting;\n  }\n  state VehicleStartingState {\n    incoming VehicleOffToStarting;\n    outgoing VehicleStartingToOn;\n  }\n  state VehicleOnState {\n    incoming VehicleStartingToOn;\n    outgoing VehicleOnToOff;\n  }\n  signal VehicleOffSignal {\n    incoming VehicleOnToOff;\n  }\n  signal VehicleStartSignal {\n    incoming VehicleOffToStarting;\n  }\n  signal VehicleOnSignal {\n   ",
    "\npackage VehiclePowerManagement {\n  part Vehicle;\n  part User;\n\n  block VehiclePowerSystem {\n    part VehiclePowerController;\n    part SafetyOperations;\n    part SelfDiagnosisOperations;\n    part FunctionalUnits;\n\n    state Off;\n    state StartPhase;\n    state PoweredOn;\n\n    flow VehicleStartCommand: User -> VehiclePowerController;\n    flow VehicleStartedSignal: Vehicle -> VehiclePowerController;\n    flow VehicleShutdownCommand: User -> VehiclePowerController;\n\n    transition StartPhaseTransition {\n      source = Off;\n      target = StartPhase;\n      trigger = VehicleStartCommand;\n    }\n\n    transition PoweredOnTransition {\n      source = StartPhase;\n      target = PoweredOn;\n      trigger = VehicleStartedSignal;\n    }\n\n    transition OffTransition {\n      source = PoweredOn;\n      target = Off;\n      trigger = VehicleShutdownCommand;\n    }\n\n    behavior SelfDiagnosisBehavior {\n      context = SelfDiagnosisOperations;\n      when = during Powered",
    "\npackage VehicleManagement {\n  block Vehicle {\n    part VehicleController;\n    part VehicleStatus;\n  }\n  block VehicleController {\n    [1] startSignal : block VehicleSignal;\n    [1] shutdownSignal : block VehicleSignal;\n    [1] startedSignal : block VehicleSignal;\n  }\n  block VehicleStatus {\n    [1] state : enum VehicleState {\n      shutdown,\n      startup,\n      running\n    };\n  }\n  block VehicleSignal {\n    // No attributes or operations defined\n  }\n  block VehicleState {\n    // No attributes or operations defined\n  }\n  VehicleController.startSignal -> VehicleStatus.state : startSignalReceived {\n    source[1] : VehicleController;\n    target[1] : VehicleStatus;\n    guard : source.state = VehicleState::shutdown;\n    effect : target.state = VehicleState::startup;\n  }\n  VehicleController.startedSignal -> VehicleStatus.state : startedSignalReceived {\n    source[1] : VehicleController",
    "\npackage PowerManagement {\n  block Vehicle {\n    part OperatingState {\n      state Off;\n      state Start;\n      state On;\n    }\n    part HealthState;\n  }\n  block User {\n    part StartSignal;\n    part OnSignal;\n    part OffSignal;\n  }\n  block System {\n    part OperatingStateManagement {\n      flow SwitchToStartState {\n        source User.StartSignal;\n        target Vehicle.OperatingState.Start;\n      }\n      flow SwitchToOnState {\n        source User.OnSignal;\n        target Vehicle.OperatingState.On;\n      }\n      flow SwitchToOffState {\n        source User.OffSignal;\n        target Vehicle.OperatingState.Off;\n      }\n    }\n    part HealthStateManagement {\n      source Vehicle.HealthState;\n    }\n  }\n}\n\nThis SysML v2 model represents the power management system for vehicles. The Vehicle block contains two parts: OperatingState and HealthState. The OperatingState part has three states: Off, Start, and On. The User block represents",
    "\npackage VehicleHealthMonitoringSystem {\n  part Vehicle {\n    attribute currentTemperature;\n    attribute maxAllowableTemperature;\n    attribute healthStatus;\n    attribute maintenanceStatus;\n    attribute maintenanceCycleTime;\n  }\n  part VehicleController {\n    operation sendOverTemperatureWarning();\n  }\n  block System {\n    part VehicleController;\n    part Vehicle;\n    flow f1 {\n      source Vehicle;\n      target VehicleController;\n      guard currentTemperature > maxAllowableTemperature;\n      effect sendOverTemperatureWarning();\n    }\n    flow f2 {\n      source Vehicle;\n      target Vehicle;\n      guard currentTemperature > maxAllowableTemperature;\n      effect healthStatus = \"degraded\";\n    }\n    flow f3 {\n      source Vehicle;\n      target Vehicle;\n      guard currentTemperature <= maxAllowableTemperature;\n      effect healthStatus = \"normal\";\n    }\n    flow f4 {\n      source null;\n      target Vehicle;\n      guard maintenanceCycleTime reached;\n      effect maintenanceStatus = \"main",
    "\npackage ServerSystem {\n  block Server {\n    part LocalClock {\n      [1] clock;\n    }\n    port RequestPort {\n      [1] provides startCommand: Command;\n      [1] provides requestMessage: Message;\n    }\n    stateMachine ServerStateMachine {\n      state Off {\n        [1] entry / startCommandReceived() : Boolean;\n        [0..1] do / switchToWaitingState();\n      }\n      state Waiting {\n        [1] entry / requestMessageReceived() : Boolean;\n        [0..1] do / switchToResponseState();\n        [1] do / dailyReset();\n      }\n      state Response {\n        [1] entry / waitForFiveMinutes();\n        [0..1] do / switchToWaitingState();\n      }\n      transition startCommandReceived {\n        source Off;\n        target Waiting;\n      }\n      transition requestMessageReceived {\n        source Waiting;\n        target Response;\n      }\n      transition waitForFiveMinutes {\n        source Response;\n        target Waiting;\n      }\n      transition daily",
    "\npackage VehicleStartStopSystem {\n  block Vehicle {\n    part BrakePedal;\n    part Controller;\n    part System;\n  }\n\n  block System {\n    part StartProcess;\n    part OperatingState;\n    part OffState;\n    part SelfCheck;\n    part PowerSupply;\n    part ParkingBrake;\n  }\n\n  flow StartSignal {\n    source Vehicle;\n    target System;\n  }\n\n  flow PowerOnSignal {\n    source Vehicle;\n    target System;\n  }\n\n  flow StartSignalToController {\n    source System;\n    target Controller;\n  }\n\n  flow StopSignal {\n    source Vehicle;\n    target System;\n  }\n\n  flow PowerSupplySignal {\n    source System;\n    target Vehicle;\n  }\n\n  flow ApplyParkingBrake {\n    source System;\n    target BrakePedal;\n  }\n\n  requirement SafetyAndReliability {\n    derivedRequirement[1] : SystemReliability;\n    derivedRequirement[2] : Coord",
    "\npackage VehicleControlSystem {\n  block Vehicle {\n    part BrakePedal;\n    part VehicleController;\n    part PowerSupply;\n    part ParkingBrake;\n    state off;\n    state started;\n  }\n  block System {\n    part Vehicle;\n    state startUp;\n    state selfCheck;\n    state shutDown;\n  }\n  flow startSignal;\n  flow startControlSignal;\n  flow vehicleOnSignal;\n  flow shutDownSignal;\n  require {\n    startSignal.source = System;\n    startSignal.target = Vehicle;\n    startControlSignal.source = System;\n    startControlSignal.target = VehicleController;\n    vehicleOnSignal.source = Vehicle;\n    vehicleOnSignal.target = System;\n    shutDownSignal.source = System;\n    shutDownSignal.target = Vehicle;\n  }\n  block startUpProcess {\n    state startUp;\n    flow startSignal;\n    flow vehicleOnSignal;\n    flow startControlSignal;\n    transition t1 {\n      source = off;\n      target = start",
    "\npackage CruiseControlSystem {\n  part: Driver;\n  part: CruiseController;\n  part: Speedometer;\n  part: Engine;\n  part: Vehicle;\n\n  event SetSpeedCommand {\n    parameter: desiredSpeed;\n  }\n\n  event FuelControlCommand {\n    parameter: fuelControlValue;\n  }\n\n  event SpeedInformation {\n    parameter: actualSpeed;\n  }\n\n  flow SetSpeedCommand {\n    source: Driver;\n    target: CruiseController;\n  }\n\n  flow SpeedInformation {\n    source: Speedometer;\n    target: CruiseController;\n  }\n\n  flow FuelControlCommand {\n    source: CruiseController;\n    target: Engine;\n  }\n\n  flow SpeedInformation {\n    source: Speedometer;\n    target: Vehicle;\n  }\n\n  flow FuelControlCommand {\n    source: Engine;\n    target: Vehicle;\n  }\n}",
    "\npackage CruiseControlSystem {\n  part Driver;\n  part CruiseController;\n  part Speedometer;\n  part EngineSystem;\n\n  flow SetSpeedCommand {\n    source Driver;\n    target CruiseController;\n  }\n\n  flow RealTimeSpeedInfo {\n    source Speedometer;\n    target CruiseController;\n  }\n\n  flow ThrottleControlCommand {\n    source CruiseController;\n    target EngineSystem;\n  }\n\n  block CruiseControlFunction {\n    part CruiseController;\n    part Speedometer;\n    part EngineSystem;\n\n    flow SetSpeedCommand;\n    flow RealTimeSpeedInfo;\n    flow ThrottleControlCommand;\n  }\n\n  block Vehicle {\n    part Driver;\n    part CruiseControlFunction;\n    part EngineSystem;\n  }\n}\n\nThis SysML model represents the cruise control system for vehicles. The system consists of four parts: the driver, the cruise controller, the speedometer, and the engine system. The driver sends a set speed command to the cruise controller, and the cruise controller acquires real-time vehicle speed information from the",
    "\npackage AutomotiveCruiseControl {\n  part Driver;\n  part CruiseController;\n  part SpeedSensor;\n  part Engine;\n\n  interface ControlInterface {\n    sendSetSpeedCommand(speed: Real);\n  }\n\n  interface SpeedInformation {\n    getCurrentSpeed(): Real;\n  }\n\n  interface ThrottleControlCommand {\n    setThrottle(command: Real);\n  }\n\n  Driver.controlInterface: ControlInterface[1];\n  CruiseController.controlInterface: ControlInterface[0..1];\n  CruiseController.speedInformation: SpeedInformation[1];\n  CruiseController.throttleControlCommand: ThrottleControlCommand[1];\n  SpeedSensor.speedInformation: SpeedInformation[0..1];\n  Engine.throttleControlCommand: ThrottleControlCommand[0..1];\n}\n\nThe provided SysML v2 code defines a package named \"AutomotiveCruiseControl\" that contains four parts: Driver, CruiseController, SpeedSensor, and Engine. It also defines three interfaces: ControlInterface, SpeedInformation, and ThrottleControlCommand. The",
    "\npackage CruiseControl {\n  part Driver;\n  part Vehicle;\n  part CruiseController;\n  part Engine;\n  part Speedometer;\n\n  flow Driver.setSpeedRequest(speed: Integer) to CruiseController;\n  flow CruiseController.calculateThrottle(speed: Integer, currentSpeed: Integer) to Engine;\n  flow Speedometer.sendSpeedInfo(currentSpeed: Integer) to CruiseController;\n\n  item's base class Vehicle {\n    part CruiseController;\n    part Engine;\n    part Speedometer;\n  }\n\n  item's base class Driver {\n    part setSpeedRequest(speed: Integer);\n  }\n\n  item's base class CruiseController {\n    part calculateThrottle(speed: Integer, currentSpeed: Integer);\n  }\n\n  item's base class Engine {\n    // No specific behavior defined for Engine\n  }\n\n  item's base class Speedometer {\n    part sendSpeedInfo(currentSpeed: Integer);\n  }\n}\n\nThis SysML v2 model represents the cruise control functionality of an automotive system",
    "\npackage AutomotiveCruiseControl {\n  part AutomotiveVehicle {\n    [1] cruiseControlInterface : CruiseControlInterface;\n    [1] cruiseController : CruiseController;\n    [1] speedSensor : SpeedSensor;\n    [1] engine : Engine;\n  };\n\n  part CruiseControlInterface {\n    [1] setSpeedCommand : SetSpeedCommand;\n  };\n\n  part CruiseController {\n    [1] setSpeed : SetSpeed;\n    [1] actualSpeed : ActualSpeed;\n    [1] engineFuelControlCommand : EngineFuelControlCommand;\n  };\n\n  part SpeedSensor {\n    [1] actualSpeed : ActualSpeed;\n  };\n\n  part Engine {\n    [1] engineOutput : EngineOutput;\n    [1] engineFuelControlCommand : EngineFuelControlCommand;\n  };\n\n  flow SetSpeedCommand {\n    source : CruiseControlInterface;\n    target : CruiseController;\n  };\n\n  flow ActualSpeed {\n    source : SpeedSensor;\n    target : CruiseController;\n  };\n",
    "\n\npackage CruiseControlSystem {\n  part Vehicle;\n  part Driver;\n  part CruiseController;\n  part SpeedSensor;\n  part EngineController;\n  part Engine;\n\n  interface SpeedCommand {\n    sendOperation sendSetSpeedCommand;\n  }\n\n  interface SpeedInfo {\n    sendOperation sendRealTimeSpeedInfo;\n  }\n\n  interface FuelControlCommand {\n    sendOperation sendFuelControlCommand;\n  }\n\n  interface MessageInterface {\n    sendOperation sendMessage;\n    receiveOperation receiveMessage;\n  }\n\n  Driver.speedCommand : SpeedCommand[1];\n  CruiseController.speedCommand : SpeedCommand[1];\n  CruiseController.speedInfo : SpeedInfo[1];\n  SpeedSensor.speedInfo : SpeedInfo[1];\n  CruiseController.fuelControlCommand : FuelControlCommand[1];\n  EngineController.fuelControlCommand : FuelControlCommand[1];\n  Engine.fuelControlCommand : FuelControlCommand[1];\n\n  Vehicle.driver : Driver[1];\n  Vehicle.cruiseController : Cru",
    "\npackage VehicleLifecycleManagement {\n  part type Vehicle {\n    [1] assemblyStage: AssemblyStage;\n    [1] deliveryStage: DeliveryStage;\n    [0..*] ownershipStages: OwnershipStage;\n    [1] endOfUseStage: EndOfUseStage;\n  }\n  part type AssemblyStage {\n  }\n  part type DeliveryStage {\n    deliveryDate: Date;\n  }\n  part type OwnershipStage {\n    ownerInformation: OwnerInformation;\n    [0..*] drivingOperations: DrivingOperation;\n  }\n  part type OwnerInformation {\n  }\n  part type DrivingOperation {\n    driver: Driver;\n  }\n  part type Driver {\n  }\n  part type EndOfUseStage {\n    scrappingInformation: ScrappingInformation;\n  }\n  part type ScrappingInformation {\n  }\n}\n\nThe SysML v2 textual model provided accurately represents the given natural-language requirements. It defines a package called \"VehicleLifecycleManagement\" that contains various part types to manage the entire lifecycle of a vehicle. The",
    "\npackage VehicleModel {\n  part type Vehicle {\n    attribute mass : Real;\n    attribute operationalStatus : OperationalStatus;\n  }\n  part type OperationalStatus {\n    attribute gearSetting : GearSetting;\n    attribute acceleratorPedalPosition : Real;\n  }\n  part type Engine {\n  }\n  part type Driver {\n  }\n  part type Wheel {\n  }\n  part vehicle_1 : Vehicle {\n    part leftFrontWheel : Wheel;\n    part rightFrontWheel : Wheel;\n  }\n  association VehicleDriver {\n    member vehicle : Vehicle[1];\n    member driver : Driver[1];\n  }\n  association VehicleEngine {\n    member vehicle : Vehicle[1];\n    member engine : Engine[1];\n  }\n  association VehicleWheels {\n    member vehicle : Vehicle[1];\n    member wheels : Wheel[*];\n  }\n}",
    "\npackage VehicleSystem {\n  part type Vehicle {\n    attribute mass : Real;\n    attribute gear : Integer;\n    attribute acceleratorPosition : Real;\n  }\n  part type Engine {\n  }\n  part type Driver {\n  }\n  part Vehicle_1 : Vehicle {\n    attribute mass : Real = 2000.0;\n    attribute gear : Integer = 0;\n    attribute acceleratorPosition : Real = 0.0;\n  }\n  part Engine_1 : Engine {\n  }\n  part Driver_1 : Driver {\n  }\n  association VehicleToEngine {\n    member end vehicleEnd : Vehicle[1..1];\n    member end engineEnd : Engine[1..1];\n  }\n  association VehicleToDriver {\n    member end vehicleEnd : Vehicle[1..1];\n    member end driverEnd : Driver[1..1];\n  }\n  block VehicleSystem {\n    part Vehicle_1;\n    part Engine_1;\n    part Driver_1;\n    association VehicleToEngine {\n      part Vehicle_1;\n",
    "\npackage VehicleModeling {\n  part type Vehicle {\n    attribute mass: Real;\n    attribute gearPosition: GearPosition;\n    attribute throttlePosition: Real[0..1];\n    attribute driver: Driver;\n  }\n  part type Engine {\n  }\n  part type Driver {\n    attribute name: String;\n  }\n  enumeration GearPosition {\n    neutral, first, second, third, fourth, fifth, sixth, reverse\n  }\n  vehicle: Vehicle {\n    part engine: Engine;\n    part alice: Driver {\n      name = \"Alice\";\n    }\n    part bob: Driver {\n      name = \"Bob\";\n    }\n  }\n  timeSlice1: TimeSlice {\n    vehicle.mass = 2000.0;\n    vehicle.gearPosition = GearPosition::neutral;\n    vehicle.throttlePosition = 0.0;\n    vehicle.driver = alice;\n  }\n  timeSlice2: TimeSlice {\n    vehicle.mass = 1500.0;\n    vehicle.gearPosition",
    "\npackage VehicleMassModeling {\n  part type Vehicle {\n    [1..1] mass : Real;\n    [0..*] component : Component;\n  };\n  part type Component {\n    [1..1] mass : Real;\n    [0..*] subcomponent : Component;\n  };\n  part type Engine extends Component;\n  part type Transmission extends Component;\n}\n\nThis SysML v2 model defines a package called VehicleMassModeling that contains three part types: Vehicle, Component, Engine, and Transmission. The Vehicle part type has a required attribute called mass of type Real and an optional association end called component that refers to the Component part type. The Component part type also has a required attribute called mass of type Real and an optional association end called subcomponent that refers to itself, allowing for the creation of hierarchical structures of components. The Engine and Transmission part types are defined as subtypes of the Component part type, allowing for the explicit definition of core components.",
    "\npackage VehicleMassManagement {\n  part type Vehicle {\n    attribute vin : String {\n      multiplicity ranges 1..1;\n    }\n    attribute mass : Real {\n      multiplicity ranges 0..1;\n    }\n    reference part[0..*] component : Component;\n  }\n  part type Component {\n    attribute serialNumber : String {\n      multiplicity ranges 1..1;\n    }\n    attribute mass : Real {\n      multiplicity ranges 0..1;\n    }\n    reference part[0..*] subComponent : Component;\n  }\n  part type Engine extends Component;\n  part type Transmission extends Component;\n  block VehicleMassCalculator {\n    parameter Real threshold;\n    parameter Real[*] mainComponentMasses;\n    flow in vehicle : Vehicle;\n    flow out totalMass : Real;\n    part function calculateTotalMass() : Real {\n      body {\n        totalMass = vehicle.mass;\n        for each component in vehicle.component {\n          if (component.mass >= threshold) {\n            totalMass = totalMass + component.mass;\n           ",
    "\npackage QualityAggregationManagement {\n  part SimpleThing {\n    attribute simpleMass : Real;\n    attribute totalMass : Real;\n    constraint totalMass = simpleMass;\n  }\n  part CompositeThing {\n    attribute simpleMass : Real;\n    attribute totalMass : Real;\n    constraint totalMass = simpleMass + sum(subcomponents.totalMass);\n    part subcomponents[*] {\n      type Thing;\n    }\n  }\n  part Thing {\n    subclass SimpleThing;\n    subclass CompositeThing;\n  }\n}",
    "\npackage MassManagementSystem {\n  part type Object {\n    attribute mass : Real;\n    attribute subcomponents : Object[*];\n  }\n\n  block MassManagementSystem {\n    part objects : Object[*];\n    part minimumMassThreshold : Real;\n\n    flow totalMass : Real;\n\n    requirement calculateTotalMass {\n      description: \"The system can automatically calculate the total mass, including all subcomponents.\";\n    }\n\n    requirement supportMassBasedFiltering {\n      description: \"The system supports mass-based filtering and aggregation of components.\";\n    }\n\n    requirement hierarchicalDecomposition {\n      description: \"This system is suitable for hierarchical decomposition and overall mass control of complex products or equipment structures.\";\n    }\n\n    requirement flexibleAggregation {\n      description: \"This system enables users to flexibly aggregate mass information from different dimensions according to actual needs.\";\n    }\n\n    constraint totalMassCalculation {\n      description: \"The total mass equals the sum of the object's own basic mass and the full mass of all its subcomponents that meet the specified minimum mass requirement.\";\n      language: OCL;\n",
    "\npackage VehicleDynamicsCalculator {\n  part Vehicle {\n    attribute powerOutput : Real;\n    attribute acceleration : Real;\n    attribute speed : Real;\n    attribute position : Real;\n    attribute wheelPower : Real;\n    attribute aerodynamicDragCoefficient : Real;\n    attribute frictionCoefficient : Real;\n    attribute mass : Real;\n  }\n\n  block VehicleDynamicsCalculator {\n    parameter vehicle : Vehicle;\n    parameter time : Real;\n\n    equation definition calculatePowerOutput {\n      vehicle.powerOutput = vehicle.wheelPower * (1 - vehicle.aerodynamicDragCoefficient * vehicle.speed^2 - vehicle.frictionCoefficient * vehicle.speed);\n    }\n\n    equation definition calculateAcceleration {\n      vehicle.acceleration = (vehicle.powerOutput - vehicle.aerodynamicDragCoefficient * vehicle.speed^3 - vehicle.frictionCoefficient * vehicle.speed^2) / vehicle.mass;\n    }\n\n    equation definition calculateSpeed {\n      vehicle.speed =",
    "\npackage VehicleSimulation {\n  block VehicleSimulationSystem {\n    part Vehicle {\n      attribute mass : Real;\n      attribute speed : Real;\n      attribute position : Real;\n    }\n    part Environment {\n      attribute aerodynamicDragCoefficient : Real;\n      attribute rollingResistanceCoefficient : Real;\n    }\n    part Calculation {\n      attribute timeStep : Real;\n      attribute availableDrivingPower : Real;\n      attribute acceleration : Real;\n      operation calculateAcceleration();\n      operation calculateSpeed();\n      operation calculatePosition();\n    }\n    flow calculateAvailableDrivingPower;\n    flow calculateAcceleration;\n    flow calculateSpeed;\n    flow calculatePosition;\n  }\n  flow calculateAvailableDrivingPower {\n    source Environment;\n    target Calculation;\n  }\n  flow calculateAcceleration {\n    source Calculation;\n    target Vehicle;\n  }\n  flow calculateSpeed {\n    source Calculation;\n    target Vehicle;\n  }\n  flow calculatePosition {\n    source Calculation;\n    target V",
    "\npackage VehicleDynamicsModeling {\n  part Vehicle {\n    attribute mass : Real;\n    attribute wheelPower : Real;\n    attribute aerodynamicDragCoefficient : Real;\n    attribute rollingResistanceCoefficient : Real;\n    attribute speed : Real;\n    attribute position : Real;\n  }\n  block DynamicsCalculator {\n    part Vehicle vehicle;\n    operation calculateSpeedAndPosition(timeStep : Real);\n  }\n  block DynamicsSimulation {\n    part DynamicsCalculator calculator;\n    operation simulate(initialSpeed : Real, initialPosition : Real, timeStep : Real, duration : Real);\n  }\n  block UserInterface {\n    part DynamicsSimulation simulation;\n    operation displayResults();\n  }\n}\n\nThis SysML v2 model defines a package `VehicleDynamicsModeling` that contains a `Vehicle` part with attributes for mass, wheel power, aerodynamic drag coefficient, rolling resistance coefficient, speed, and position. A `DynamicsCalculator` block is also defined, which has a `Vehicle` part and an operation to calculate",
    "\npackage VehicleDynamics {\n  block Vehicle {\n    part Position {\n      property initialValue : Real;\n      property finalValue : Real;\n    }\n    part Velocity {\n      property initialValue : Real;\n      property finalValue : Real;\n    }\n    part Mass : Real;\n    part WheelEndDrivePower : Real;\n    part TimeInterval : Real;\n    part DragCoefficient : Real;\n    part FrictionCoefficient : Real;\n    part Acceleration : Real;\n  }\n  block User {\n    part Input {\n      property initialPosition : Real;\n      property initialVelocity : Real;\n      property vehicleMass : Real;\n      property wheelEndDrivePower : Real;\n      property timeInterval : Real;\n    }\n  }\n  block System {\n    part CalculateAcceleration : block;\n    part CalculateFinalVelocity : block;\n    part CalculateFinalPosition : block;\n  }\n  flow CalculateAccelerationFlow {\n    source User.Input;\n    target Vehicle.Acceleration;\n  }\n ",
    "\npackage VehicleWeightManagement {\n  part Vehicle {\n    mass : Real [1..1];\n  }\n  part Chassis extends Vehicle {\n    mass : Real [1..1];\n  }\n  part Engine extends Vehicle {\n    mass : Real [1..1];\n  }\n  part Gearbox extends Vehicle {\n    mass : Real [1..1];\n  }\n  block VehicleWeightCalculator {\n    maxWeight : Real [1..1] = 2500;\n    vehicle : Vehicle [1..1];\n    chassis : Chassis [1..1];\n    engine : Engine [1..1];\n    gearbox : Gearbox [1..1];\n    totalMass : Real [1..1];\n    overweightWarning : Boolean [1..1];\n    flow calculateTotalMass {\n      source calculateTotalMass;\n      target calculateTotalMass;\n      parameter totalMass : Real [1..1];\n      body {\n        totalMass = chassis.mass + engine.mass + gearbox.mass;\n      }\n    }\n",
    "\npackage VehicleMassBudgetingSystem {\n  part Chassis;\n  part Engine;\n  part Transmission;\n  part Component;\n  part Vehicle;\n\n  block VehicleMassCalculator {\n    [1] massLimit: Parameter<Real> = 2500;\n    [1] components: List<Component>;\n\n    flow calculateTotalMass {\n      direction in;\n      source calculateComponentMasses;\n      target checkMassLimit;\n    }\n\n    flow calculateComponentMasses {\n      direction out;\n      target calculateTotalMass;\n    }\n\n    flow checkMassLimit {\n      direction in;\n      source calculateTotalMass;\n    }\n\n    flow recordEngineMass {\n      direction in;\n      source enterComponentMass;\n    }\n\n    flow recordTransmissionMass {\n      direction in;\n      source enterComponentMass;\n    }\n\n    flow enterComponentMass {\n      direction out;\n      target recordEngineMass;\n      target recordTransmissionMass;\n    }\n  }\n\n  block ComponentMassEntry {\n    [1] component: Component",
    "\npackage VehicleMassManagementSystem {\n  part type Chassis {\n    attribute mass : Real;\n  }\n  part type Engine {\n    attribute mass : Real;\n  }\n  part type Transmission {\n    attribute mass : Real;\n  }\n  part type Vehicle {\n    part chassis : Chassis;\n    part engine : Engine;\n    part transmission : Transmission;\n    constraint totalMass : self.chassis.mass + self.engine.mass + self.transmission.mass <= 2500;\n  }\n  block VehicleMassManagementSystem {\n    part vehicle : Vehicle;\n    flow massData : Real[1];\n    parameter upperMassLimit : Real = 2500;\n    partFunction verifyMass {\n      input massData;\n      output isWithinLimit : Boolean;\n      body: isWithinLimit := self.vehicle.totalMass;\n    }\n  }\n}\n\nThis SysML v2 model defines a package for the Vehicle Mass Management System. It includes part types for Chassis, Engine, and Transmission, each with a",
    "\npackage VehicleWeightManagementSystem {\n  part Chassis {\n    weight : Real;\n  }\n  part Engine {\n    weight : Real;\n  }\n  part Transmission {\n    weight : Real;\n  }\n  block VehicleWeightSystem {\n    weightLimit : Real = 2500;\n    totalWeight : Real;\n    parts : Chassis[1..1], Engine[1..1], Transmission[1..1];\n    weightLimitExceeded : Boolean;\n    weightLimitExceeded = totalWeight > weightLimit;\n    totalWeight = parts.weight->sum();\n  }\n}\n\nThis SysML v2 model defines a package for the Vehicle Weight Management System. It includes three parts: Chassis, Engine, and Transmission, each with a weight attribute. The VehicleWeightSystem block manages the weight of these components. It has a weightLimit attribute set to 2500 kg, a totalWeight attribute, and a parts attribute that references the three components. The weightLimitExceeded attribute is a derived attribute that checks if the total weight exceeds the weight limit. The total",
    "\npackage VehicleSystem {\n  part type Chassis {\n    attribute mass : Real;\n  }\n  part type Engine {\n    attribute mass : Real;\n  }\n  part type Transmission {\n    attribute mass : Real;\n  }\n  part type Vehicle {\n    part chassis : Chassis;\n    part engine : Engine;\n    part transmission : Transmission;\n    constraint totalMassConstraint {\n      self.chassis.mass + self.engine.mass + self.transmission.mass <= 2500;\n    }\n    part type DynamicBehavior {\n      attribute initialVelocity : Real;\n      attribute finalVelocity : Real;\n      attribute mass : Real;\n      attribute appliedForce : Real;\n      attribute time : Real;\n      constraint massConstraint {\n        self.mass > 0;\n      }\n      constraint dynamicConstraint {\n        self.appliedForce * self.time = (self.finalVelocity - self.initialVelocity) * self.mass;\n      }\n    }\n    part dynamicBehavior : DynamicBehavior;\n  }\n}",
    "\npackage VehicleMaintenanceSystem {\n  part Vehicle {\n    attribute nextMaintenanceTime : Time;\n    attribute maintenanceInterval : TimeInterval;\n    attribute maxAllowedTemperature : Temperature;\n    attribute status : VehicleStatus;\n    attribute actualMaintenanceStartTime : Time;\n    attribute maintenanceDuration : TimeInterval;\n    attribute healthStatus : HealthStatus;\n  }\n  enum VehicleStatus {\n    normal,\n    underMaintenance\n  }\n  enum HealthStatus {\n    normal,\n    unhealthy\n  }\n  block MaintenanceScheduler {\n    parameter vehicle : Vehicle;\n    operation determineMaintenanceTime() : Boolean;\n    operation switchToMaintenance() : void;\n    operation postponeMaintenanceTime() : void;\n    operation restoreHealthStatus() : void;\n  }\n  block MaintenanceManager {\n    parameter vehicle : Vehicle;\n    operation initiateMaintenance() : void;\n    operation completeMaintenance() : void;\n  }\n  block MaintenanceMonitor {\n    parameter vehicle : Vehicle;\n    operation monitorTemperature() : void;\n  }\n ",
    "\npackage VehicleSystem {\n  part Vehicle {\n    attribute totalMass {\n      type: Real;\n      constraint: totalMass <= maxMassLimit;\n    }\n    attribute curbWeight {\n      type: Real;\n      constraint: curbWeight >= 0;\n    }\n    attribute fuelMass {\n      type: Real;\n      constraint: fuelMass > 0;\n    }\n    attribute maxMassLimit {\n      type: Real;\n    }\n    part Engine {\n      operation generateTorque(speed: Real): Real {\n        body:\n          // Implementation of the torque generation logic based on the speed curve\n      }\n    }\n    part Transmission {\n      // Implementation of the transmission logic to effectively transmit the engine torque\n    }\n    part Clutch {\n      // Implementation of the clutch interface logic to ensure smooth power delivery\n    }\n    flow torque {\n      source: [Engine.generateTorque];\n      target: [Transmission];\n    }\n  }\n}",
    "\nblock Vehicle {\n  part FuelTank {\n    property [0..1] maxFuelMass;\n    property [0..1] currentFuelMass;\n  }\n  part Engine {\n    property [0..1] torque;\n    property [0..1] speedTorqueCurve;\n  }\n  part Transmission {\n    property [0..1] clutchInterface;\n  }\n  property [0..1] dryMass;\n  property [0..1] totalMass;\n  constraint totalMass <= 2000 when FuelTank.currentFuelMass = FuelTank.maxFuelMass;\n  constraint totalMass <= 1500 when FuelTank.currentFuelMass = 0;\n  constraint Engine.torque = Transmission.clutchInterface;\n  constraint Engine.torque >= Engine.speedTorqueCurve.torque(Transmission.speed);\n}\n\nThe provided SysML v2 code defines a block named \"Vehicle\" that represents the overall system. The vehicle has three main components: \"FuelTank\", \"Engine\", and \"Trans",
    "\npackage VehicleEngineSystem {\n  part Vehicle {\n    attribute totalMass : Real [1];\n    attribute emptyMass : Real [1];\n    constraint totalMass <= 2000;\n    constraint emptyMass <= 1500;\n  }\n  part Engine {\n    attribute torque : Real [1];\n    interface ClutchInterface {\n      [provided] operation transmitTorque : Real [1];\n    }\n    constraint torque.varyingWithSpeed;\n  }\n  connector ClutchConnector {\n    Engine.ClutchInterface : ClutchInterface [1];\n    TransmissionSystem.TorqueInterface : TorqueInterface [1];\n  }\n  part TransmissionSystem {\n    interface TorqueInterface {\n      [required] operation receiveTorque : Real [1];\n    }\n  }\n}\n\nThis SysML v2 model defines a package for the vehicle engine system, which includes a vehicle part with attributes for total mass and empty mass, and constraints to ensure these masses do not exceed the specified limits. The model also includes an engine part with an attribute for torque, a clutch interface for transm",
    "\nblock Vehicle {\n  part CurbMass;\n  part FuelTank {\n    attribute maxCapacity;\n    attribute currentCapacity;\n  };\n  part Engine {\n    attribute torqueCharacteristics;\n  };\n  part Gearbox;\n  part Clutch;\n  constraint TotalMassLimit {\n    (CurbMass + FuelTank.currentCapacity) <= 2000 when FuelTank.currentCapacity = FuelTank.maxCapacity else\n    (CurbMass + FuelTank.currentCapacity) <= 1500;\n  };\n  constraint TorqueTransmission {\n    Engine.torqueCharacteristics -> Clutch -> Gearbox;\n  };\n}\n\nThe provided SysML v2 code defines a block named \"Vehicle\" that includes parts such as \"CurbMass\", \"FuelTank\", \"Engine\", \"Gearbox\", and \"Clutch\". The \"FuelTank\" part has attributes for \"maxCapacity\" and \"currentCapacity\". The \"Engine\" part has an attribute for \"torqueCharacteristics\". The model includes two constraints: \"TotalMassLimit\"",
    "\npackage VehiclePerformanceAnalysis {\n  part Vehicle {\n    attribute curbWeight : Real;\n    attribute payload : Real;\n    attribute wheelDiameter : Real;\n    attribute transmissionEfficiency : Real;\n    attribute fuelEconomyUrban : Real;\n    attribute fuelEconomyHighway : Real;\n  }\n\n  part DrivingCycle {\n    attribute position : Sequence[Real];\n    attribute speed : Sequence[Real];\n    attribute time : Sequence[Real];\n  }\n\n  block VehiclePerformanceAnalyzer {\n    port vehicle : Vehicle;\n    port drivingCycle : DrivingCycle;\n    port enginePower : Real;\n    port acceleration : Real;\n    port fuelEconomy : Real;\n    port compliance : Boolean;\n    parameter targetFuelEconomy : Real;\n  }\n\n  block FuelEconomyCalculator {\n    port vehicle : Vehicle;\n    port drivingCycle : DrivingCycle;\n    port fuelEconomy : Real;\n  }\n\n  block ComplianceVerifier {\n",
    "\npackage VehicleFuelEconomySimulation {\n  part Vehicle {\n    attribute curbWeight;\n    attribute load;\n    attribute wheelDiameter;\n    attribute transmissionEfficiency;\n    // other vehicle parameters\n  }\n\n  part DrivingScenario {\n    attribute urban;\n    attribute highway;\n    attribute trajectory;\n    attribute speedVariation;\n  }\n\n  part Model {\n    operation calculateWheelPower(DrivingScenario);\n    operation calculateAcceleration(Vehicle, DrivingScenario);\n    operation calculateEnergyConsumption(Vehicle, DrivingScenario);\n    operation calculateEnginePowerDemand(Vehicle, DrivingScenario);\n    operation calculateFuelConsumption(Vehicle, DrivingScenario);\n    operation calculateFuelEconomy(Vehicle, DrivingScenario);\n  }\n\n  part User {\n    operation assessVehicleDesign(Model);\n  }\n\n  flow calculateFuelEconomy {\n    source Model.calculateFuelConsumption;\n    target Model.calculateFuelEconomy;\n  }\n",
    "\npackage EngineSelectionSystem {\n  part Engine {\n    attribute power : Real;\n    attribute mass : Real;\n    attribute efficiency : Real;\n    attribute cost : Real;\n  }\n\n  part FourCylinderEngine extends Engine;\n  part SixCylinderEngine extends Engine;\n\n  block EngineSelection {\n    part PerformanceEvaluation {\n      operation calculatePerformanceIndicators(e : Engine) : (Real, Real, Real, Real);\n    }\n\n    part EconomicEvaluation {\n      operation calculateCost(e : Engine) : Real;\n    }\n\n    part UnifiedEvaluation {\n      operation evaluate(e : Engine) : Real;\n    }\n\n    part Recommendation {\n      operation recommendOptimalEngine(engines : list<Engine>) : Engine;\n    }\n\n    flow calculatePerformanceIndicators(e : Engine) : (Real, Real, Real, Real);\n    flow calculateCost(e : Engine) : Real;\n    flow evaluate(e : Engine) : Real;\n    flow recommendOptimalEngine(engines : list<Engine>) : Engine;\n  }\n",
    "\npackage VehicleQualityCheck {\n  block Vehicle {\n    part Weight {\n      attribute curbWeight {\n        type: Real;\n        range: interval[0..2500];\n      }\n    }\n  }\n\n  block VehicleQualityCheckSystem {\n    part DataCollection {\n      operation collectWeightData(v: Vehicle) : Real;\n    }\n    part DataProcessing {\n      operation processWeightData(data: Real) : Real;\n    }\n    part Evaluation {\n      operation evaluateWeight(processedData: Real) : Boolean;\n    }\n  }\n\n  flow collectWeightDataFlow {\n    source: DataCollection;\n    target: DataProcessing;\n  }\n  flow processWeightDataFlow {\n    source: DataCollection;\n    target: Evaluation;\n  }\n  flow evaluateWeightFlow {\n    source: Evaluation;\n    target: VehicleQualityCheckSystem;\n  }\n\n  requirement VehicleWeightRequirement {\n    text: \"The curb weight of each vehicle must be less than or equal to 2,500 kilograms",
    "\npackage VehicleMassVerificationSystem {\n  part Vehicle {\n    attribute mass : Real;\n  }\n  part WeighingEquipment {\n    operation measureMass() : Real;\n  }\n  part MassVerificationUnit {\n    operation processData(mass : Real) : Boolean;\n  }\n  flow measureMassFlow {\n    source WeighingEquipment::measureMass;\n    target MassVerificationUnit::processData;\n  }\n  constraint maxMassConstraint {\n    specification Vehicle::mass <= 2500;\n  }\n  requirement massRequirement {\n    derivedRequirement maxMassConstraint;\n  }\n}\n\nThis SysML v2 model represents the Vehicle Mass Verification System as described in the requirement. It includes parts for Vehicle, WeighingEquipment, and MassVerificationUnit. The Vehicle part has an attribute for mass, the WeighingEquipment part has an operation to measure mass, and the MassVerificationUnit part has an operation to process data and evaluate the mass. A flow connects the measureMass operation of the WeighingEquipment part to the",
    "\npackage TransportationSystem {\n  part HumanUser;\n  part Driver extends HumanUser;\n  part Passenger extends HumanUser;\n  part Vehicle {\n    attribute maxPassengers : Integer = 4;\n    attribute currentPassengers : Integer = 0;\n    attribute startingPoint : Location;\n    attribute destination : Location;\n    operation enterVehicle(user : HumanUser);\n    operation exitVehicle(user : HumanUser);\n  };\n  part GasStation {\n    attribute location : Location;\n  };\n  part Environment {\n    attribute factors : Factor[*];\n  };\n  block TransportationTask {\n    attribute startTime : Time;\n    attribute endTime : Time;\n    attribute startLocation : Location;\n    attribute endLocation : Location;\n    attribute users : HumanUser[*];\n    attribute vehicle : Vehicle;\n    attribute environment : Environment;\n    constraint users.size() <= vehicle.maxPassengers;\n    constraint users.contains(vehicle.driver);\n    constraint users.excludes(vehicle.driver) implies users.size() <= vehicle.maxPassengers - 1;\n   ",
    "\npackage TransportationSystem {\n  part Driver;\n  part Passenger[0..4];\n  part Vehicle;\n  part GasStation;\n  part StartingPoint;\n  part Destination;\n\n  flow EnterVehicle {\n    source StartingPoint;\n    target Vehicle;\n    participant Driver;\n    participant Passenger[0..4];\n  }\n\n  flow OperateVehicle {\n    source Vehicle;\n    target Vehicle;\n    participant Driver;\n  }\n\n  flow Refuel {\n    source Vehicle;\n    target GasStation;\n    target Vehicle;\n    participant Driver;\n  }\n\n  flow ExitVehicle {\n    source Vehicle;\n    target Destination;\n    participant Driver;\n    participant Passenger[0..4];\n  }\n\n  requirement SimpleInteractions {\n    derivedFromRequirement[1] = \"The system should ensure that interactions among all participants are simple and convenient, meeting the primary needs of daily transportation.\";\n  }\n}\n\nThis SysML v2 model represents the transportation system with the necessary components and flows. The Driver, Passenger,",
    "\npackage VehicleConfiguration {\n  part type Engine {\n    attribute cylinders : Integer {\n      constraint: cylinders = 4 or cylinders = 6\n    }\n    attribute cylinderDiameter : Diameter {\n      constraint: cylinderDiameter = Diameter::small or cylinderDiameter = Diameter::large\n    }\n  }\n  part type Transmission {\n    attribute type : TransmissionType {\n      constraint: type = TransmissionType::manual or type = TransmissionType::automatic\n    }\n  }\n  part type Vehicle {\n    part engine : Engine {\n      constraint: engine.cylinders = 4 implies transmission.type = TransmissionType::manual\n      constraint: engine.cylinders = 6 implies transmission.type = TransmissionType::automatic\n    }\n    part transmission : Transmission\n  }\n  enum Diameter {\n    small = 70\n    large = 100\n  }\n  enum TransmissionType {\n    manual\n    automatic\n  }\n}\n\nThis SysML v2 model defines a package",
    "\npackage EngineSystem {\n  block Engine {\n    part[0..1] Cylinder;\n    constraint\n      self.Cylinder->size() = 4 or self.Cylinder->size() = 6;\n  }\n  block Cylinder {\n    attribute diameter : {70, 100};\n  }\n  block FourCylinderEngine {\n    part[4] Cylinder;\n  }\n  block SixCylinderEngine {\n    part[6] Cylinder;\n  }\n  usage EngineVariant {\n    part[1] Engine;\n  }\n  block FourCylinderEngineVariant {\n    part[1] FourCylinderEngine;\n  }\n  block SixCylinderEngineVariant {\n    part[1] SixCylinderEngine;\n  }\n}\n\nThis SysML model defines an EngineSystem package that contains blocks for Engine, Cylinder, FourCylinderEngine, SixCylinderEngine, and EngineVariant. The Engine block has a part relationship with Cylinder, and a constraint is defined to ensure that the number of Cylinder parts",
    "\npackage AutomotiveConfigurationSpace {\n  part type Engine {\n    Engine4Cylinder : Engine {\n      cylinderDiameter : {70mm, 100mm}\n    }\n    Engine6Cylinder : Engine {\n      cylinderDiameter : {70mm, 100mm}\n    }\n  }\n  part type TransmissionSystem {\n    ManualGearbox : TransmissionSystem\n    AutomaticGearbox : TransmissionSystem\n  }\n  block Vehicle {\n    engine : Engine[1]\n    transmissionSystem : TransmissionSystem[1]\n    constraint Constraint1 {\n      engine.oclIsKindOf(Engine4Cylinder) implies transmissionSystem.oclIsKindOf(ManualGearbox)\n    }\n    constraint Constraint2 {\n      engine.oclIsKindOf(Engine6Cylinder) implies transmissionSystem.oclIsKindOf(AutomaticGearbox)\n    }\n  }\n}\n\nThis SysML v2 model defines a package named AutomotiveConfigurationSpace that contains two part types: Engine and TransmissionSystem.",
    "\npackage System {\n  part: SystemAssembly {\n    part: ComputerSubsystem {\n      requirement: UtilizeAndIntegrateSoftwareFunctions;\n    }\n    part: StorageSubsystem {\n      requirement: AccessAndCompatibleWithMessageAndDataFormats;\n    }\n  }\n  section: SoftwareDesign {\n    block: MessageFormat;\n    block: DataFormat;\n  }\n  requirement: SeamlessSystemOperation;\n}\n\nThe OMG SysML v2 textual model is created based on the given natural-language requirements. The system is composed of a SystemAssembly, which includes a ComputerSubsystem and a StorageSubsystem. The SoftwareDesign section defines the MessageFormat and DataFormat. The ComputerSubsystem has a requirement to utilize and integrate all functions specified in the software design. The StorageSubsystem has a requirement to access and be compatible with the message and data formats defined by the software. The entire system has a requirement for seamless system operation, ensuring efficient, reliable, and compliant processes of information storage, transmission, and processing.",
    "\npackage PowertrainSystem {\n  part LogicalLayer {\n    part TorqueGenerator {\n      [1] powerToTorque : Requirement;\n    }\n  }\n  part PhysicalLayer {\n    part PowerUnit {\n      [1] powerOutput : Function;\n      [1] torqueGeneration : Function;\n    }\n  }\n  LogicalLayer.TorqueGenerator.powerToTorque <-> PhysicalLayer.PowerUnit;\n}\n\nThis SysML v2 model defines a package for the PowertrainSystem, which contains two parts: LogicalLayer and PhysicalLayer. The LogicalLayer contains a part called TorqueGenerator, which has a requirement called powerToTorque. The PhysicalLayer contains a part called PowerUnit, which has two functions: powerOutput and torqueGeneration. There is an association between the TorqueGenerator's powerToTorque requirement and the PowerUnit, representing the mapping relationship between the logical and physical layers.",
    "\nblock System {\n  part PowerTransmissionSystem {\n    capability DeliverPower;\n    capability GenerateTorque;\n  }\n  part TorqueGenerator {\n    action GenerateTorque;\n  }\n  part Powertrain {\n    part Engine {\n      action GenerateTorque;\n    }\n  }\n  allocate GenerateTorque from TorqueGenerator to Powertrain;\n  allocate GenerateTorque from Engine to Powertrain;\n  require DeliverPower from PowerTransmissionSystem;\n  require GenerateTorque from PowerTransmissionSystem;\n}\n\nThe model defines a system with a power transmission system that has capabilities to deliver power and generate torque. The torque generator component is responsible for generating torque, which is realized through the action of generating torque by the engine within the powertrain component. The model specifies that the logical-layer torque generator is allocated to the physical powertrain component, and the specific operation of generating torque is further allocated to the engine within the powertrain. The system requires the power transmission system to deliver power and generate torque to meet the practical requirements for power output during vehicle operation.",
    "\npackage VehicleFeatureAnnotationSystem {\n  part InteriorAssembly {\n    part SeatBelts {\n      safetyFunction: SafetyFunction;\n    }\n    part FrontSeats {\n      safetyFunction: SafetyFunction;\n    }\n    part DriverAirbag {\n      safetyFunction: SafetyFunction;\n    }\n    part AlarmSystem {\n      protectionFunction: ProtectionFunction;\n    }\n  }\n  part BodyAssembly {\n    part BodyShell {\n      safetyFunction: SafetyFunction;\n    }\n    part Bumpers {\n      safetyFunction: SafetyFunction;\n    }\n    part KeylessEntryDevice {\n      protectionFunction: ProtectionFunction;\n    }\n  }\n  part SafetyFunction {\n  }\n  part ProtectionFunction {\n  }\n}\n\nThis SysML v2 model defines a package for the Vehicle Feature Annotation System. Within this package, there are two parts: InteriorAssembly and BodyAssembly. Each assembly contains multiple components, each with an associated safetyFunction or protectionFunction. The SafetyFunction and ProtectionFunction parts are also defined within the package.",
    "\npackage VehicleSimulationSystem {\n  part Vehicle {\n    attribute initialVelocity : Real;\n    attribute initialPosition : Real;\n    attribute acceleration : Real;\n    attribute timeStep : Real;\n    attribute velocity : Real;\n    attribute position : Real;\n  }\n\n  part ModelCenterAnalysisTool {\n    attribute physicalModel : PhysicalModel;\n  }\n\n  flow calculateVelocityAndPosition {\n    source Vehicle;\n    target ModelCenterAnalysisTool;\n    parameter initialVelocity : Real;\n    parameter initialPosition : Real;\n    parameter acceleration : Real;\n    parameter timeStep : Real;\n    parameter physicalModel : PhysicalModel;\n    parameter velocity : Real;\n    parameter position : Real;\n  }\n\n  flow transferData {\n    source Vehicle;\n    target ModelCenterAnalysisTool;\n    parameter initialVelocity : Real;\n    parameter initialPosition : Real;\n    parameter acceleration : Real;\n    parameter timeStep : Real;\n    parameter physicalModel : PhysicalModel;\n  }\n\n  flow outputResults {\n    source ModelCenterAnalysisTool;\n    target Vehicle;\n",
    "\npackage SafetyFeatures {\n  part Interior {\n    seatBelt : SeatBelt[2];\n    airbag : Airbag[0..1];\n  }\n  part Body {\n    bumper : Bumper[1];\n    keylessEntry : KeylessEntry[0..1];\n  }\n  part WheelAssembly {\n    wheel : Wheel[2];\n    abs : Abs[0..1];\n  }\n}\npackage MandatorySafetyFeatures {\n  part Interior {\n    seatBelt : SeatBelt[2];\n  }\n  part Body {\n    bumper : Bumper[1];\n  }\n}\n\n\nThe provided SysML v2 code accurately represents the given natural language requirements. The model includes two packages: \"SafetyFeatures\" and \"MandatorySafetyFeatures\". The \"SafetyFeatures\" package contains parts for the interior, body, and wheel assembly, each with their respective components. The \"Interior\" part includes two mandatory seat belts and an optional airbag. The \"Body\" part includes a mandatory bumper and an optional keyless entry system. The \"",
    "\npackage VehicleSafetyComplianceSystem {\n  part Vehicle {\n    part Interior {\n      part SeatBelt [0..2] {\n        feature SafetyFeature;\n      }\n      part DriversAirbag [0..1] {\n        feature OptionalSafetyFeature;\n      }\n    }\n    part Body {\n      part Bumper {\n        feature RequiredSafetyComponent;\n      }\n      part KeylessEntrySystem [0..1] {\n        feature NonMandatoryConfiguration;\n      }\n    }\n    part ChassisSystem {\n      part Tire [4] {\n      }\n      part AntiLockBrakingSystem [0..1] {\n        feature OptionalSafetyFeature;\n      }\n    }\n  }\n  block SafetyComponent {\n  }\n  block SafetyFeature {\n  }\n  block RequiredSafetyComponent {\n    extends SafetyFeature;\n  }\n  block OptionalSafetyFeature {\n    extends SafetyFeature;\n  }\n  block NonMandatoryConfiguration {\n  }\n}\n\nThe provided SysML v2 code defines",
    "\npackage RiskManagementSystem {\n  part Risk {\n    attribute probability : Real;\n    attribute severity : SeverityLevel;\n    attribute causes : Cause[*];\n    attribute failures : Failure[*];\n  }\n  part Cause {\n    attribute probability : Real;\n  }\n  part Failure {\n    attribute severity : SeverityLevel;\n  }\n  part Situation {\n    attribute causes : Cause[*];\n    attribute failures : Failure[*];\n  }\n  enum SeverityLevel {\n    low, medium, high\n  }\n  association RiskCausedBy {\n    source [1..*] Risk : causes;\n    target [1..*] Cause : causesRisk;\n  }\n  association RiskLeadsTo {\n    source [1..*] Risk : failures;\n    target [1..*] Failure : resultsFromRisk;\n  }\n  association SituationCausedBy {\n    source [1..*] Situation : causes;\n    target [1..*] Cause : causesSituation;\n",
    "\npackage RiskModelingSystem {\n  part Scenario {\n    attribute name : String;\n    attribute description : String;\n    end\n  part Cause {\n    attribute name : String;\n    attribute probability : Real;\n    end\n  part Failure {\n    attribute type : String;\n    attribute severity : String;\n    end\n  association ScenarioCause {\n    end\n    end\n  association ScenarioFailure {\n    end\n    end\n  association CauseFailure {\n    end\n    end\n  association ScenarioScenario {\n    end\n    end\n  association CauseCause {\n    end\n    end\n  association FailureFailure {\n    end\n    end\n  part RiskScenario {\n    end\n  association RiskScenarioScenario {\n    end\n    end\n  association RiskScenarioCause {\n    end\n    end\n  association RiskScenarioFailure {\n    end\n    end\n  }\n\nThe model includes parts for Scenario, Cause, and Failure, each with relevant attributes. Associations are defined to represent the relationships between these parts, such as",
    "\npackage EquipmentRiskAnalysis {\n  block Equipment {\n    part Battery {\n      attribute batteryLevel : Real;\n      attribute minimumThreshold : Real;\n      attribute failureProbability : Real;\n    }\n    block RiskAnalysis {\n      block RiskDetection {\n        operation detectBatteryAgingRisk() : Boolean;\n      }\n      block StateAnalysis {\n        operation analyzeLowBatteryState() : Boolean;\n      }\n      block FailureConsequence {\n        operation handleDeviceShutdown() : Boolean;\n      }\n    }\n    block SeverityLevel {\n      attribute level : Integer;\n    }\n  }\n}\n\nThis SysML v2 model represents the equipment and its components, including the battery. The battery has attributes for battery level, minimum threshold, and failure probability. The Equipment block also contains a RiskAnalysis block that includes RiskDetection, StateAnalysis, and FailureConsequence blocks. The RiskDetection block has an operation to detect battery aging risk, the StateAnalysis block has an operation to analyze the low battery state, and the FailureConsequence block has an operation to handle device shutdown. Additionally,",
    "\nblock System {\n  part subsystem1;\n  part subsystem2;\n  ...\n  part component1 {\n    interface interface1;\n    interface interface2;\n    ...\n  };\n  part component2 {\n    interface interface3;\n    interface interface4;\n    ...\n  };\n  ...\n}\n\nblock subsystem1 {\n  part subsubsystem1;\n  part subsubsystem2;\n  ...\n  part subcomponent1 {\n    interface interface5;\n    interface interface6;\n    ...\n  };\n  part subcomponent2 {\n    interface interface7;\n    interface interface8;\n    ...\n  };\n  ...\n}\n\nblock subsystem2 {\n  part subsubsystem3;\n  part subsubsystem4;\n  ...\n  part subcomponent3 {\n    interface interface9;\n    interface interface10;\n    ...\n  };\n  part subcomponent4 {\n    interface interface11;\n    interface interface12;\n    ...\n  };\n  ...\n}\n\n...\n\nblock component1 {\n  interface interface1;\n ",
    "\npackage AutomotiveSystem {\n  part AutomotiveSystemRoot <<RootComponent>> {\n    safetyAttribute: SafetyAttributes;\n    functionalAttribute: FunctionalAttributes;\n  }\n  part Subsystem <<Subsystem>> {\n    safetyAttribute: SafetyAttributes;\n    functionalAttribute: FunctionalAttributes;\n  }\n  part Component <<Component>> {\n    safetyAttribute: SafetyAttributes;\n    functionalAttribute: FunctionalAttributes;\n  }\n  part SafetyComponent <<Component>> {\n    safetyAttribute: SafetyAttributes {\n      isMandatory: Boolean;\n    }\n  }\n  part NonSafetyComponent <<Component>> {\n    functionalAttribute: FunctionalAttributes;\n  }\n  part SeatBelt <<SafetyComponent>> {\n    isMandatory = true;\n  }\n  part Bumper <<SafetyComponent>> {\n    isMandatory = true;\n  }\n  part DriverAirbag <<SafetyComponent>> {\n    isMandatory = false;\n  }\n  part AntiLockBrakingSystem <<SafetyComponent>> {\n    isMandatory = false;\n  }\n ",
    "\npackage AutomotiveDomain {\n  part Automobile {\n    alias Car;\n    comment \"Core component in the automotive domain\";\n    physicalQuantity Torque;\n  }\n  comment \"This model provides standardized definitions and annotations for fundamental concepts and elements in the automotive domain.\";\n}\n\nThe given natural-language requirements have been successfully translated into a SysML v2 textual model. The model defines a package named \"AutomotiveDomain\" that contains a part named \"Automobile\". This part has an alias defined as \"Car\" to facilitate communication and usage. A comment is also added to provide a clear explanation of the part's role in the automotive domain. Additionally, a physical quantity named \"Torque\" is associated with the \"Automobile\" part to ensure standardized and consistent expression of automotive characteristics. Finally, a comment is added to the package to describe the overall purpose and design of the model.",
    "\npackage AutomobileDocumentManagement {\n  part Automobile {\n    attribute TorqueValue;\n    attribute Documentation;\n  }\n  part Car alias Automobile;\n  part ISQStandard;\n  part TorqueValue;\n  part Documentation;\n}\n\nThe model defines a package named \"AutomobileDocumentManagement\" that contains the following parts:\n\n1. \"Automobile\": This part represents the core object of the system, which can manage and record information and documentation about automobiles. It has two attributes: \"TorqueValue\" and \"Documentation\".\n2. \"Car\": This part is an alias for \"Automobile\", allowing different user groups to perform searches and operations flexibly according to their own habits.\n3. \"ISQStandard\": This part represents the standard physical quantity system that the system supports for unified referencing and management of physical quantities.\n4. \"TorqueValue\": This part represents the torque value, which is a physical quantity that can be managed and documented within the system.\n5. \"Documentation\": This part represents the explanatory documents that can be added for different objects and their aliases to ensure that information within the platform is clearly an",
    "\npackage AutomobileSystem {\n  part Automobile as Car {\n    attribute TorqueValue as Torque;\n  }\n  part ScalarPhysicalQuantityData;\n}\n\nThe model defines a package named \"AutomobileSystem\" that contains two parts: \"Automobile\" and \"ScalarPhysicalQuantityData\". The \"Automobile\" part is aliased as \"Car\" and has an attribute named \"TorqueValue\" that is aliased as \"Torque\". This model represents the system's ability to manage and represent information related to automobiles, with a focus on torque values. The \"ScalarPhysicalQuantityData\" part is also included to support the flexible importing and management of various scalar physical quantity data.",
    "\npackage VehicleSystem {\n  part type Vehicle {\n    [1..1] engine : Engine;\n  }\n  part type BasicVehicle < Vehicle {\n  }\n  part type SmallVehicle < BasicVehicle {\n    engine.cylinders = 4;\n  }\n  part type LargeVehicle < BasicVehicle {\n    engine.cylinders = 6;\n  }\n  part type Engine {\n    cylinders : Integer [4..6];\n  }\n}\n\nThe provided model defines a package called \"VehicleSystem\" that contains the necessary part types for vehicles, engines, and their configurations. The \"Vehicle\" part type is the base type for all vehicles, which has a composition relationship with the \"Engine\" part type. The \"BasicVehicle\" part type is a subtype of \"Vehicle\" and is further specialized into \"SmallVehicle\" and \"LargeVehicle\" part types. The \"SmallVehicle\" part type has a fixed number of engine cylinders set to 4, while the \"LargeVehicle\" part type has a fixed number of engine cylinders set to 6.",
    "\npackage FuelManagementSystem {\n  block FuelSystem {\n    part FuelTank;\n    part Engine;\n    flow FuelFlow;\n    flow FuelReturn;\n    interface FuelInterface;\n    requirement ManageFuelFlow;\n    requirement SupportFuelReturn;\n    requirement MonitorFuelTemperature;\n    requirement StandardizedFuelInterfaces;\n  }\n  flow FuelFlow {\n    source FuelTank;\n    target Engine;\n  }\n  flow FuelReturn {\n    source Engine;\n    target FuelTank;\n  }\n  interface FuelInterface {\n    end FuelTank;\n    end Engine;\n  }\n  requirement ManageFuelFlow {\n    derivedRequirement MonitorFuelTemperature;\n    derivedRequirement SupportFuelReturn;\n  }\n  requirement StandardizedFuelInterfaces {\n    derivedRequirement FuelInterface;\n  }\n}\n\nThe output model is a SysML v2 textual model that represents the Fuel Management System. The FuelSystem block contains the FuelTank and Engine parts, as well as the F",
    "\npackage VehicleStructuralArchitecture {\n  part type Vehicle {\n    attribute mass : Real;\n  }\n  part type AxleAssembly {\n    part frontAxle : FrontAxle;\n    part rearAxle : RearAxle;\n  }\n  part type FrontAxle {\n    part wheel1 : Wheel;\n    part wheel2 : Wheel;\n  }\n  part type RearAxle {\n    part wheel1 : Wheel;\n    part wheel2 : Wheel;\n  }\n  part type SteeringFrontAxle {\n    part frontAxle : FrontAxle;\n    attribute steeringAngle : Real;\n  }\n  part type Wheel {\n  }\n  part type NamedWheel {\n    part wheel : Wheel;\n    attribute name : String;\n  }\n  part type VehicleConfiguration {\n    part vehicle : Vehicle;\n    part axleAssembly : AxleAssembly;\n  }\n  part type NamedVehicleConfiguration {\n    part vehicleConfiguration : VehicleConfiguration;\n    part frontLeftWheel"
]