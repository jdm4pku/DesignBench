[
    "package 'VehicleSystem' {\n\tattribute def VehicleMass;\n\tattribute def VehicleStatus;\n\tattribute def GearSetting;\n\tattribute def AcceleratorPedalPosition;\n\tattribute def Engine;\n\tattribute def Driver;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tattribute vehicleMass: VehicleMass;\n\t\t\tattribute vehicleStatus: VehicleStatus;\n\t\t\tattribute gearSetting: GearSetting;\n\t\t\tattribute acceleratorPedalPosition: AcceleratorPedalPosition;\n\t\t\tpart engineComponent: Engine;\n\t\t\tpart driverComponent: Driver;\n\t\t}\n\t\tpart engine {\n\t\t\t// Engine component modeling and management\n\t\t}\n\t\tpart driver {\n\t\t\t// Personnel component modeling and management\n\t\t}\n\t}\n}",
    "package 'VehicleModelingSystem' {\n\tclass 'Vehicle' {\n\t\tattribute def type: String;\n\t}\n\tclass 'ManuallyOperatedVehicle' extends Vehicle {\n\t\tattribute def driver: Personnel;\n\t}\n\tclass 'PoweredVehicle' extends Vehicle {\n\t\tattribute def engine: Engine;\n\t}\n\tclass 'ManuallyOperatedPoweredVehicle' extends ManuallyOperatedVehicle, PoweredVehicle {\n\t}\n\tclass 'Personnel' {\n\t\tattribute def name: String;\n\t}\n\tclass 'Engine' {\n\t\tattribute def power: Integer;\n\t}\n}",
    "package 'VehicleStructure' {\n\tclass VehicleComponent {\n\t}\n\tclass Engine extends VehicleComponent {\n\t}\n\tclass Transmission extends VehicleComponent {\n\t}\n\tclass Wheel extends VehicleComponent {\n\t}\n\tclass Vehicle {\n\t\tpart engine: Engine[1];\n\t\tpart transmission: Transmission[1];\n\t\tpart wheels: Wheel[4];\n\t}\n}",
    "package 'VehicleSystem' {\n\tclassifier def Vehicle {\n\t\tattribute def engine: Engine;\n\t}\n\tclassifier def SmallVehicle subclass Vehicle {\n\t\tattribute def engine: SmallEngine;\n\t}\n\tclassifier def LargeVehicle subclass Vehicle {\n\t\tattribute def engine: LargeEngine;\n\t}\n\tclassifier def Engine {\n\t\tattribute def cylinders: Cylinder[*];\n\t}\n\tclassifier def SmallEngine subclass Engine {\n\t\tattribute def cylinders: Cylinder[4];\n\t}\n\tclassifier def LargeEngine subclass Engine {\n\t\tattribute def cylinders: Cylinder[6];\n\t}\n\tclassifier def Cylinder {\n\t\t// Define cylinder properties here\n\t}\n}",
    "package 'TrafficSignalSystem' {\n\tattribute def ColorState {\n\t\tvalue green;\n\t\tvalue yellow;\n\t\tvalue red;\n\t}\n\tpart context {\n\t\tpart trafficSignal {\n\t\t\tattribute currentColorState: ColorState;\n\t\t}\n\t\tpart greenTrafficSignal {\n\t\t\tattribute currentColorState: ColorState = ColorState::green;\n\t\t}\n\t}\n}",
    "package 'InformationClassificationManagement' {\n\tattribute def InformationClassification {\n\t\tattribute unclassified: Boolean;\n\t\tattribute confidential: Boolean;\n\t\tattribute secret: Boolean;\n\t\tattribute code: String;\n\t\tattribute color: String;\n\t}\n\tattribute def GradeClassification {\n\t\tattribute A: Boolean;\n\t\tattribute B: Boolean;\n\t\tattribute C: Boolean;\n\t\tattribute D: Boolean;\n\t\tattribute F: Boolean;\n\t\tattribute score: Real;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tperform classifyInformation {\n\t",
    "package 'VehicleSystem' {\n\tpart type SmallVehicle {\n\t\tpart engine: Engine {\n\t\t\tmultiplicity 1..1;\n\t\t\tattribute numCylinders {\n\t\t\t\tvalue 4;\n\t\t\t}\n\t\t}\n\t}\n\tpart type LargeVehicle {\n\t\tpart engine: Engine {\n\t\t\tmultiplicity 1..1;\n\t\t\tattribute numCylinders {\n\t\t\t\tvalue 6;\n\t\t\t}\n\t\t}\n\t}\n\tpart type Engine {\n\t\tpart cylinder: Cylinder[numCylinders];\n\t\tattribute numCylinders;\n\t}\n\tpart type Cylinder {\n\t\t// Cylinder's attributes and behaviors can be defined here\n\t}\n}",
    "package 'VehicleModelingSystem' {\n\tattribute def QualityAttribute;\n\tattribute def DriverInfo;\n\tattribute def FuelType;\n\tattribute def FuelInfo;\n\tattribute def PersonnelInfo;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tattribute qualityAttributes: QualityAttribute[*];\n\t\t\tattribute driverInfo: DriverInfo;\n\t\t\tpart fuelTank {\n\t\t\t\tattribute fuelType: FuelType;\n\t\t\t}\n\t\t}\n\t\tpart fuelManagement {\n\t\t\tattribute fuelInfo: FuelInfo[*];\n\t\t}\n\t\tpart personnelManagement {\n\t\t\tattribute personnelInfo: PersonnelInfo[*];\n\t\t}\n\t}\n}",
    "package 'AutomobileWheelAssembly' {\n\tpart def WheelBearingUnit;\n\tpart def Tire;\n\tpart def Bead;\n\tpart def Hub;\n\tpart def Rim;\n\tpart def BoltMountingHole;\n\tpart def ThreadedHole;\n\tpart def Bolt;\n\tpart context {\n\t\tpart tireAssembly {\n\t\t\tpart wheelBearingUnit: WheelBearingUnit;\n\t\t\tpart tire: Tire;\n\t\t\tpart bead1: Bead;\n\t\t\tpart bead2: Bead;\n\t\t\tpart hub: Hub;\n\t\t\tpart rim1: Rim;\n\t\t\tpart rim2: Rim;\n\t\t\tperform sealAndFasten {\n\t",
    "package 'FuelManagementSystem' {\n\tattribute def Fuel;\n\tattribute def Temperature;\n\tport def FuelSupplyPort {\n\t\tout fuel: Fuel;\n\t\tin returnFuel: Fuel;\n\t\tout temperature: Temperature;\n\t}\n\tport def FuelReturnPort {\n\t\tin returnFuel: Fuel;\n\t\tout temperature: Temperature;\n\t}\n\tpart context {\n\t\tpart fuelTankAssembly {\n\t\t\tport fuelSupplyPort: FuelSupplyPort;\n\t\t\tperform fuelTransferRegion.supplyFuel {\n\t\t\t\tout fuel = fuelSupplyPort.fuel;\n\t\t\t\tout temperature = fuelSupplyPort.temperature;\n\t\t\t}\n\t\t\tport fuelReturnPort: ~FuelReturnPort;\n\t\t\tperform fuelTransferRegion.receiveExcessFuel {\n\t\t",
    "package 'VehicleConfiguration' {\n\tattribute def Mass {\n\t\tdefaultValue: 1750;\n\t}\n\tattribute def SteeringAngle;\n\tclass Vehicle {\n\t\tattribute mass: Mass;\n\t\tpart frontAxle: FrontAxle;\n\t\tpart rearAxle: RearAxle;\n\t}\n\tclass FrontAxle {\n\t\tattribute mass: Mass;\n\t\tpart tire1: Tire;\n\t\tpart tire2: Tire",
    "package 'CouplingSystem' {\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport hitchPort: HitchPort;\n\t\t}\n\t\tpart trailer {\n\t\t\tport hitchPort: ~HitchPort;\n\t\t}\n\t\tpart hitch {\n\t\t\tport vehiclePort: VehiclePort;\n\t\t\tport trailerPort: TrailerPort;\n\t\t\tpart couplingBall {\n\t\t\t\tport vehiclePort: ~VehiclePort;\n\t\t\t\tport trailerPort: ~TrailerPort;\n\t\t\t}\n\t\t}\n\t}\n\tport def HitchPort {\n\t",
    "package 'VehiclePowerTransmissionSystem' {\n\tattribute def FuelCommand;\n\tattribute def Power;\n\tattribute def ClutchSignal;\n\tattribute def RoadSurface;\n\tpart engine {\n\t\tport fuelCommandPort {\n\t\t",
    "package 'IntegratedSystem' {\n\tpart subsystem b11 {\n\t\tpart component c1 {\n\t\t\tport pb {\n\t\t\t\tinterface pe;\n\t\t\t}",
    "package 'AutomotivePowertrain' {\n\tattribute def FuelCommand;\n\tattribute def EngineTorque;\n\tattribute def TransmissionTorque;\n\tattribute def DriveshaftTorque;\n\tattribute def WheelTorque;\n\tport def FuelCommandPort {\n\t\tout fuelCommand : FuelCommand;\n\t}\n\tport def EngineTorquePort {\n\t\tout engineTorque: EngineTorque;\n\t}\n\tport def TransmissionTorquePort {\n\t\tout transmissionTorque: TransmissionTorque;\n\t}\n\tport def DriveshaftTorquePort {\n\t\tout driveshaftTorque: DriveshaftTorque;\n\t}\n\tport def LeftWheelTorque",
    "package 'AutomotivePowertrain' {\n\tattribute def FuelControlCmd;\n\tattribute def Torque;\n\tattribute def StallSignal;\n\tport def FuelControlCmdPort {\n\t\tin fuelControlCmd : FuelControlCmd;\n\t}\n\tport def TorquePort {\n\t\tout torque: Torque;\n\t}\n\tport def StallSignalPort {\n\t\tin stallSignal: StallSignal;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport fuelControlCmdPort: FuelControlCmdPort;\n\t\t\tperform powertrainControl.sendFuelControlCmd {\n\t\t\t\tin fuelControlCmd = fuelControlCmdPort.fuelControlCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToPowertrain connect user.f",
    "package 'VehiclePowertrainSystem' {\n\tattribute def FuelCommand;\n\tattribute def EngineOutputTorque;\n\tattribute def TransmissionTorque;\n\tattribute def WheelTorque;\n\tport def FuelCommandPort {\n\t\tout fuelCommand : FuelCommand;\n\t}\n\tport def EngineOutputTorquePort {\n\t\tout engineOutputTorque: EngineOutputTorque;\n\t}\n\tport def TransmissionTorquePort {\n\t\tout transmissionTorque: TransmissionTorque;\n\t}\n\tport def WheelTorquePort {\n\t\tout wheelTorque: WheelTorque;\n\t}\n\tpart context {\n\t\tpart driver {\n\t\t\tport fuelCommandPort: FuelCommandPort;\n\t\t\tperform powertrainControl.sendFuelCommand {\n\t\t\t\tout fuelCommand = fuel",
    "package 'TrailerConnectionSystem' {\n\tattribute def ConnectionCmd;\n\tattribute def ConnectionStatus;\n\tport def ConnectionCmdPort {\n\t\tout connectionCmd : ConnectionCmd;\n\t}\n\tport def ConnectionStatusPort {\n\t\tout connectionStatus: ConnectionStatus;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport connectionCmdPort: ConnectionCmdPort;\n\t\t\tperform connectTrailer.sendConnectionCmd {\n\t\t\t\tout connectionCmd = connectionCmdPort.connectionCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToVehicle connect user.connectionCmdPort to vehicle.connectionCmdPort {\n\t\t\tref flow references connectTrailer.connectionCmdFlow\n\t\t\t\tfrom source.connectionCmd to target.connectionCmd;\n\t\t}\n\t\tpart vehicle {\n\t\t\tport connectionCmdPort: ~ConnectionCmdPort;\n\t\t\tperform connectTrailer.manageConnection",
    "package 'TrailerConnectionSystem' {\n\tpart context {\n\t\tpart vehicle {\n\t\t\tpart chassis {\n\t\t\t\tport towBallPort: TowBallPort;\n\t\t\t}\n\t\t}\n\t\tpart trailer {\n\t\t\tpart trailerFrame {\n\t\t\t\tport couplerPort: CouplerPort;\n\t\t\t}\n\t\t}\n\t\tinterface connectionInterface connect vehicle.chassis.towBallPort to trailer.trailerFrame.couplerPort {\n\t\t\tref flow references connectFlow\n\t\t\t\tfrom source.connectionStatus to target.connectionStatus;\n\t\t}\n\t}\n\tattribute def ConnectionStatus;\n\tport def TowBallPort {\n\t\tout connection",
    "package 'DynamicConnectionModel' {\n\tattribute def ConnectionStatus;\n\tattribute def EngageDisengageCmd;\n\tport def ConnectionStatusPort {\n\t\tout connectionStatus : ConnectionStatus;\n\t}\n\tport def EngageDisengageCmdPort {\n\t\tout engageDisengageCmd : EngageDisengageCmd;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport engageDisengageCmdPort: EngageDisengageCmdPort;\n\t\t\tperform connectionOperations.sendEngageDisengageCmd {\n\t\t\t\tout engageDisengageCmd = engageDisengageCmdPort.engageDisengageCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToVehicle connect user.engageDisengageCmdPort to vehicle.engageDisengageCmdPort {\n\t",
    "package 'FuelSystem' {\n\tattribute def Fuel;\n\tattribute def Temperature;\n\tport def FuelSupplyPort {\n\t\tout fuel: Fuel;\n\t}\n\tport def FuelReturnPort {\n\t\tin fuel: Fuel;\n\t}\n\tport def TemperaturePort {\n\t\tout temperature: Temperature;\n\t}\n\tpart context {\n\t\tpart fuelTankAssembly {\n\t\t\tport fuelSupplyPort: FuelSupplyPort;\n\t\t\tperform fuelFlow.supplyFuel {\n\t\t\t\tout fuel = fuelSupplyPort.fuel;\n\t\t\t}\n\t\t\tport fuelReturnPort: FuelReturnPort;\n\t\t\tperform fuelFlow.returnFuel {\n\t\t\t\tin fuel = fuelReturnPort.fuel;\n\t\t\t}\n\t\t",
    "package 'FuelDeliverySystem' {\n\tattribute def Fuel;\n\tpart context {\n\t\tpart storageTank {\n\t\t\tport fuelOutPort: FuelPort;\n\t\t\tperform fuelTransfer.extractFuel {\n\t\t\t\tout fuel = fuelOutPort.fuel;\n\t\t\t}\n\t\t}\n\t\tpart fuelPump {\n\t\t\tport fuelInPort: FuelPort;\n\t\t\tport fuelOutPort: FuelPort;\n\t\t\tperform fuelTransfer.pumpFuel {\n\t\t\t\tin fuel = fuelInPort.fuel;\n\t\t\t\tout fuel = fuelOutPort.fuel;\n\t\t\t}\n\t\t}\n\t",
    "package 'AutomobileAssembly' {\n\tattribute def VehicleAssembly;\n\tattribute def Gearbox;\n\tattribute def Engine;\n\tport def VehicleAssemblyPort {\n\t\tin vehicleAssembly: VehicleAssembly;\n\t\tout vehicleAssembly: VehicleAssembly;\n\t}\n\tport def GearboxPort {\n\t\tin gearbox: Gearbox;\n\t}\n\tport def EnginePort {\n\t\tin engine: Engine;\n\t}\n\tpart context {\n\t\tpart assemblyLine {\n\t\t\tport vehicleAssemblyPort: VehicleAssemblyPort;\n\t\t\tperform assemblyProcess.installGearbox {\n\t\t\t\tin vehicleAssembly = vehicleAssemblyPort.",
    "package 'VehicleSystem' {\n\tattribute def StartSignal;\n\tattribute def BrakePedal;\n\tattribute def VehicleOnSignal;\n\tattribute def OverTemperatureSignal;\n",
    "package 'VehicleSystem' {\n\tattribute def StartSignal;\n\tattribute def BrakePedal;\n\tattribute def Temperature;\n\tattribute def WarningSignal;\n\tattribute def ControlSignal;\n\tattribute def StatusSignal;\n\tattribute def Fuel;\n\tattribute def MaintenanceInterval;\n\tattribute def TemperatureThreshold;\n\tport def StartSignalPort {\n\t\tin startSignal : StartSignal;\n\t}\n\tport def BrakePedalPort {\n\t\tin brakePedal",
    "package 'VehicleSimulationSystem' {\n\tattribute def Mass;\n\tattribute def Position;\n\tattribute def Velocity;\n\tattribute def Acceleration;\n\tattribute def SlopeAngle;\n\tattribute def FrictionCoefficient;\n\tattribute def TimePoint;\n\tattribute def VehicleState;\n\tattribute def RoadState;\n\tpart context {\n\t\tpart user {\n\t\t\tperform simulation.defineParameters {\n\t\t\t\tout mass = massPort.mass;\n\t\t\t\tout position = positionPort.position;\n\t\t\t\tout velocity = velocityPort.velocity;\n\t\t\t\tout acceleration = accelerationPort.acceleration;\n\t\t\t\tout slopeAngle = slopeAnglePort.slopeAngle;\n\t\t\t\tout frictionCoefficient = friction",
    "package 'ConfigurationManagementSystem' {\n\tattribute def SubsystemAConfig;\n\tattribute def SubsystemBConfig;\n\tpart context {\n\t\tpart user {\n",
    "package 'VehicleSystem' {\n\tpart type Part1;\n\tpart type Part2;\n\tpart type Part3 {\n\t\tport def p1;\n\t}\n\tpart type Part4;\n\tpart type Part5 {\n\t\tport def p2;\n\t\tbehavioral feature def Variant1;\n\t\tbehavioral feature def Variant2;\n\t}",
    "package 'VehicleConfigurationSystem' {\n\tattribute def EngineType;\n\tattribute def TransmissionType;\n\tattribute def WheelType;\n\tattribute def PerformanceRequirement;\n\tattribute def UserPreference;\n\tattribute def ConfigurationScheme;\n\tport def EngineTypePort {\n\t\tout engineType : EngineType;\n\t}\n\tport def TransmissionTypePort {\n\t\tout transmissionType : TransmissionType;\n\t}\n\tport def WheelTypePort {\n\t\tout wheelType : WheelType;\n\t}\n\tport def PerformanceRequirementPort {\n\t\tout performanceRequirement : PerformanceRequirement;\n\t}\n\tport def UserPreferencePort {\n\t\t",
    "package 'AutomobileSystem' {\n\tattribute def Mass;\n\tattribute def FuelStatus;\n\tattribute def Torque;\n\tattribute def Reliability;\n\tclass def Vehicle {\n\t\tattribute mass: Mass;\n\t\tattribute fuelStatus: FuelStatus;\n\t}\n\tclass def Engine {\n\t\tattribute torque: Torque;\n\t}",
    "package 'VehicleMassComplianceSystem' {\n\tattribute def Mass;\n\tattribute def MaxPermissibleMass;\n\tattribute def ComplianceResult;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport def massPort {\n\t\t\t\tout mass: Mass;\n\t\t\t}\n\t\t}\n\t\tpart weighingEquipment {\n\t\t\tport def vehiclePort {\n\t\t\t\tin vehicle: Vehicle;\n\t\t\t}\n\t\t\tport def massPort {\n\t\t\t\tout mass: Mass;\n\t\t\t}\n\t\t\tperform measureMass {\n\t\t\t\tin vehicle = vehiclePort.vehicle;\n\t\t\t\tout mass = massPort.mass;\n\t\t\t}\n\t\t}\n\t\tpart testOperator {\n\t",
    "package 'WaterSupplyNetwork' {\n\tattribute def Water;\n\tpart context {\n\t\tpart spigotBank {\n\t\t\tport hotWaterOutlet: WaterOutlet {\n\t\t\t\tout hotWater: Water;\n\t\t\t}\n\t\t\tport coldWaterOutlet: WaterOutlet {\n\t\t\t\tout coldWater: Water;\n\t\t\t}\n\t\t}\n\t\tpart faucet {\n\t\t\tport hotWaterInlet: FaucetInlet {\n\t\t\t\tin hotWater: Water;\n\t\t\t}\n\t\t\tport coldWaterInlet: FaucetInlet {\n\t\t\t\tin coldWater: Water;\n\t\t\t}\n\t\t}\n\t\tinterface hotWaterConnection connect spigotBank.hotWaterOutlet to fauc",
    "package 'VehicleQualityAnalysisSystem' {\n\tattribute def QualityData;\n\tattribute def Mass;\n\tattribute def AnalysisRequirement;\n\tattribute def AnalysisObjective;\n\tattribute def AnalysisTask;\n\tattribute def AnalysisPlan;\n\tpart context {\n\t\tpart user {\n\t\t\tport inputDataPort {\n\t\t\t\tin qualityData: QualityData;\n\t\t\t}\n\t\t\tperform inputData.inputComponentData {\n\t\t\t\tin qualityData = inputDataPort.qualityData;\n\t\t\t}\n\t\t\tport defineRequirementPort {\n\t\t\t\tin analysisRequirement: AnalysisRequirement;\n\t\t\t}\n\t\t\tperform defineRequirement.defineAnalysisRequirement {\n\t\t\t\tin analysisRequirement = defineRequirementPort.analysisRequirement;\n\t\t\t}\n\t\t\tport",
    "package 'VehiclePowertrainConfigurationSystem' {\n\tattribute def EngineType;\n\tattribute def PerformanceIndicator;\n\tattribute def Component;\n\tattribute def EvaluationModel;\n\tattribute def EngineSolution;\n\tport def EngineTypePort {\n\t\tin engineType: EngineType;\n\t}\n\tport def PerformanceIndicatorPort {\n\t\tin performanceIndicator: PerformanceIndicator;\n\t}\n\tport def ComponentPort {\n\t\tin component: Component;\n\t}\n\tport def EvaluationModelPort {\n\t\tin evaluationModel: EvaluationModel;\n\t}\n\tport def EngineSolutionPort {\n",
    "package 'FuelEconomySystem' {\n\tattribute def VehiclePowertrain;\n\tattribute def Load;\n\tattribute def OperatingConditions;\n\tattribute def FuelConsumption;\n\tattribute def FuelEconomy;\n\tattribute def UrbanDrivingScenario;\n\tattribute def HighwayDrivingScenario;\n\tattribute def MinUrbanFuelEconomy = 25;\n\tattribute def MinHighwayFuelEconomy = 30;\n\tattribute def AdditionalLoad = 1000;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tattribute powertrain: VehiclePowertrain;\n\t\t\tattribute load: Load;\n\t\t\tattribute operatingConditions: Oper",
    "package 'VehicleMotionSimulation' {\n\tattribute def Mass;\n\tattribute def Position;\n\tattribute def Velocity;\n\tattribute def PowerOutput;\n\tattribute def TimeStep;\n\tattribute def Acceleration;\n\tattribute def Displacement;\n\tport def InputPort {\n\t\tin mass: Mass;\n\t\tin initialPosition: Position;\n\t\tin initialVelocity: Velocity;\n\t\tin powerOutputData: PowerOutput;\n\t\tin timeStep: TimeStep;\n\t}\n\tport def OutputPort {\n\t\tout accelerationSequence: Acceleration;\n\t\tout velocityVariationSequence: Velocity;\n\t\tout displacementSequence: Displacement;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport inputPort: InputPort;\n\t\t\tperform simulation.inputData {\n\t\t\t\tin mass",
    "package 'VehicleSystem' {\n\tattribute def Mass;\n\tattribute def SteeringAngle;\n\tpart def FrontWheel {\n\t\tattribute mass: Mass;\n\t}\n\tpart def RearWheel {\n\t\tattribute mass: Mass;\n\t}\n\tpart def FrontAxle {\n\t\tattribute mass: Mass;\n\t\tattribute steeringAngle: SteeringAngle;\n\t\tpart frontWheel1: FrontWheel;\n\t\tpart frontWheel2: FrontWheel;\n\t}\n\tpart def RearAxle {\n\t\tattribute mass: Mass;\n\t\tpart rearWheel1: RearWheel;\n\t\tpart rearWheel2: RearWheel;\n\t",
    "package 'VehicleSafetySecuritySystem' {\n\tattribute def Component;\n\tattribute def SafetyFeature;\n\tattribute def SecurityFeature;\n\tpart context {\n\t\tpart user {\n\t\t\tperform viewComponents.filterAndOrganize {\n\t\t\t\tin components = vehicle.components;\n\t\t\t\tout organizedComponents;\n\t\t\t}\n\t\t\tperform viewComponents.visualize {\n\t\t\t\tin components = organizedComponents;\n\t\t\t}\n\t\t}\n\t\tpart vehicle {\n\t\t\tattribute components: Component[*];\n\t\t\tattribute safetyFeatures: SafetyFeature[*];\n",
    "package 'System' {\n\tattribute def X;\n\tattribute def Y;\n\tattribute def Z;\n\tpart context {\n\t\tpart applicationLayer {\n\t\t\tport serviceLayerPort: ServiceLayerPort;\n\t\t\tperform useService {\n\t\t\t\tin x = serviceLayerPort.x;\n\t\t\t\tin y = serviceLayerPort.y;\n\t\t\t\tout z = serviceLayerPort.z;\n\t\t\t}\n\t\t}\n\t\tpart serviceLayer {\n\t\t\tport applicationLayerPort: ~ApplicationLayerPort;\n\t\t\tport dataLayerPort: DataLayerPort;\n\t\t\tperform provideService {\n\t\t\t\tin x = applicationLayerPort.x;\n\t\t\t\tin y = applicationLayerPort.y;\n\t\t\t\tout z = applicationLayerPort.z;\n\t\t\t\tin data = dataLayerPort.data;\n\t\t\t}\n\t\t}\n\t\tpart dataLayer {\n\t\t\tport serviceLayerPort: ~DataLayerPort;\n\t",
    "package 'TorqueGenerationSystem' {\n\tattribute def Torque;\n\tpart context {\n\t\tpart torqueGenerator {\n\t\t\tperform generateTorque {\n\t\t\t\tout torque: Torque;\n\t\t\t}\n\t\t}\n\t\tpart powertrain {\n\t\t\tperform transmitTorque {\n\t\t\t\tin torque: Torque;\n\t\t\t}\n\t\t}\n\t\tinterface torqueGenerationInterface connect torqueGenerator.generateTorque to powertrain.transmitTorque {\n\t\t\tref flow references generateTorque.torqueFlow\n\t\t\t\tfrom source.torque to target.torque;\n\t\t}\n\t}\n\taction generateTorque {\n\t\tout torque: Torque {\n\t\t\tconstraint torque > 0 Nm;\n\t\t}\n\t}\n\taction transmitTorque {\n\t\tin torque: Torque;\n\t}\n}",
    "package 'PowerSystem' {\n\tattribute def Power;\n\tattribute def Torque;\n\tport def PowerOutputPort {\n\t\tout power: Power;\n\t}\n\tport def TorqueOutputPort {\n\t\tout torque: Torque;\n\t}\n\tpart context {\n\t\tpart torqueGenerator {\n\t\t\tport powerInputPort: PowerInputPort;\n\t\t\tport torqueOutputPort: TorqueOutputPort;\n\t\t\tperform generateTorque {\n\t\t\t\tin power = powerInputPort.power;\n\t\t\t\tout torque = torqueOutputPort.torque;\n\t\t\t}\n\t\t}\n\t\tpart powertrain {\n\t\t\tpart engine {\n\t\t\t\tport powerInputPort: PowerInputPort;\n\t\t\t\tport torqueOutputPort: TorqueOutputPort;\n\t\t\t\tperform generateTorque {\n\t\t\t\t\tin power = powerInputPort.power;\n\t\t\t\t\tout tor",
    "package 'VehicleSafetyAndAntiTheft' {\n\tattribute def SafetyComponent;\n\tattribute def AntiTheftComponent;\n\tattribute def MandatorySafetyComponent;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tpart body {\n\t\t\t\tpart frontSeatBelts: SafetyComponent;\n\t\t\t\tpart bumpers: SafetyComponent;\n\t\t\t}\n\t\t\tpart interior {\n\t\t\t\tpart driversAirbag: SafetyComponent;\n\t\t\t\tpart antiLockBr",
    "package 'FuelSupplySystem' {\n\tattribute def Fuel;\n\tattribute def FuelTemperature;\n\tport def FuelPort {\n\t\tin fuel: Fuel;\n\t\tout returnFuel: Fuel;\n\t}\n\tport def FuelTemperaturePort {\n\t\tout fuelTemperature: FuelTemperature;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport fuelPort: FuelPort;\n\t\t\tport fuelTemperaturePort: FuelTemperaturePort;\n\t\t\tperform fuelManagement.consumeFuel {\n\t\t\t\tin fuel = fuelPort.fuel;\n\t\t\t}\n\t\t\tperform fuelManagement.monitorFuelTemperature {\n\t\t\t\tout fuelTemperature = fuelTemperaturePort.fuelTemperature;\n\t\t\t}\n\t",
    "package 'Vehicle' {\n\tattribute def SeatBelt;\n\tattribute def Airbag;\n\tattribute def AntiTheftAlarm;\n\tattribute def Bumper;\n\tattribute def KeylessEntrySystem;\n\tattribute def Wheel;\n\tattribute def AntiLockBrakingSystem;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tpart interior {\n\t\t\t\tpart seat1 {\n\t\t\t\t\tattribute seatBelt: SeatBelt { isMandatory = true; }\n\t\t\t\t}\n\t\t\t\tpart seat2 {\n\t\t\t\t\tattribute seatBelt: SeatB",
    "package 'VehicleSafetySecuritySystem' {\n\tattribute def AlarmSystem;\n\tattribute def SeatBelt;\n\tattribute def FrontRowSeat;\n\tattribute def Airbag;\n\tattribute def VehicleBody;\n\tattribute def Bumper;\n\tattribute def KeylessEntrySystem;\n\n\tpart context {\n\t\tpart Interior {\n\t\t\tpart alarmSystem: AlarmSystem;\n\t\t\tpart seatBelt: SeatBelt;\n\t\t\tpart frontRowSeat: FrontRowSeat;\n\t\t\tpart airbag: Airbag;\n\t\t}\n\t\tpart BodyAssembly {\n\t\t\tpart vehicleBody: VehicleBody;\n\t\t\tpart bumper: Bumper;\n\t\t\tpart keylessEntrySystem: KeylessEntrySystem;\n\t\t}",
    "package 'InformationSecurityManagement' {\n\tattribute def SecurityClassification;\n\tpart context {\n\t\tpart system {\n\t\t\tpart component1 {\n\t\t\t\tattribute securityClassification: SecurityClassification;\n\t\t\t}\n\t\t\tpart component2 {\n\t\t\t\tattribute securityClassification: SecurityClassification;\n\t\t\t}\n\t\t\t// Add more components as needed\n\t\t\tperform classifyComponents {\n\t\t\t\tin componentList;\n\t\t\t\tout classifiedComponents;\n\t\t\t}\n\t\t}\n\t}\n\taction classifyComponents {\n\t\tin componentList;\n\t\tout classifiedComponents;\n\t\tperform assignClassification {\n\t\t\tin component = componentList.selectAny();\n\t\t\tout classifiedComponent;\n\t\t}\n\t\tsuccession flow componentFlow from assignClassification.classifiedComponent to classifyComponents.classifiedComponents;\n\t\taction assignClassification {\n\t\t\tin component;\n\t\t\tout classifiedComponent;\n\t\t\t// Implementation details for assigning security classification to a component\n\t\t}\n\t",
    "package 'AutomotiveECUCommunication' {\n\tattribute def CANBus;\n\tattribute def VehicleState;\n\tattribute def EngineState;\n\tattribute def SensorData;\n\tpart context {\n\t\tpart VCU {\n\t\t\tport canBusPort: CANBusPort;\n\t\t\tperform monitorAndControl.monitorVehicleState {\n\t\t\t\tin vehicleState = canBusPort.vehicleState;\n\t\t\t}\n\t\t\tperform monitorAndControl.exchangeSensorData {\n\t\t\t\tin sensorData = sensorDataPort.sensorData;\n\t\t\t\tout sensorData = sensorDataPort.sensorData;\n\t\t\t}\n\t\t\tport sensorDataPort: SensorDataPort;\n\t\t}\n\t\t",
    "package 'BloodGlucoseMeter' {\n\tattribute def BatteryStatus;\n\tattribute def Alert;\n\tattribute def BloodGlucoseMeasurement;\n\tport def BatteryStatusPort {\n\t\tout batteryStatus : BatteryStatus;\n\t}\n\tport def AlertPort {\n\t\tout alert: Alert;\n\t}\n\tport def BloodGlucoseMeasurementPort {\n\t\tout bloodGlucoseMeasurement: BloodGlucoseMeasurement;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport alertPort: AlertPort;\n\t\t\tperform monitorBattery.receiveAlert {\n\t\t\t\tin alert = alertPort.alert;\n\t\t\t}\n\t",
    "package 'ScientificConstants' {\n\tattribute def MathematicalConstant;\n\tattribute def PhysicalConstant;\n\tattribute def ScenarioBasedConstant;\n\tpart context {\n\t\tpart user {\n\t\t\tperform compute.useConstants {\n\t\t\t\tin mathematicalConstant = mathematicalConstants.mathematicalConstant;\n\t\t\t\tin physicalConstant = physicalConstants.physicalConstant;\n\t\t\t\tin scenarioBasedConstant = scenarioBasedConstants.scenarioBasedConstant;\n\t\t\t}\n\t\t}\n\t\tpart mathematicalConstants {\n\t\t\tattribute e: MathematicalConstant;\n\t\t\tattribute pi: MathematicalConstant;\n\t\t}\n\t\tpart physicalConstants {\n\t",
    "package 'AutomotiveComponents' {\n\tclass Tire {\n\t\tattribute def manufacturer: String;\n\t\tattribute def rimDiameter: Real;\n\t\tattribute def width: Integer;\n\t}\n\tpart context {\n\t\tpart tireInstance: Tire {\n\t\t\tmanufacturer = \"Michelin\";\n\t\t\trimDiameter = 18.0;\n\t\t\twidth = 245;\n\t\t}\n\t}\n}",
    "package 'AutomotiveComponentModel' {\n\tattribute def Mass;\n\tattribute def Length;\n\tattribute def Diameter;\n\tattribute def Width;\n\tattribute def Height;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tattribute mass: Mass { value: 1200; unit: \"kg\"; }\n\t\t\tattribute length: Length { value: 4.82; unit: \"m\"; }\n\t\t\tpart leftFrontWheel: frontWheel {\n\t\t\t\tattribute hubDiameter: Diameter { value: 18; unit: \"in\"; }\n\t\t\t\tattribute width: Width { value: 245; unit: \"mm\"; }\n\t\t\t\tpart tire;\n",
    "package 'VehiclePowertrainConfiguration' {\n\tattribute def EngineType {\n\t\tenum literal fourCylinder;\n\t\tenum literal sixCylinder;\n\t}\n\tattribute def TransmissionType {\n\t\tenum literal manual;\n\t\tenum literal automatic;\n\t}\n\tattribute def PerformanceLevel {\n\t\tenum literal standard;\n\t\tenum literal highPerformance;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tattribute engineType: EngineType;\n\t\t\tattribute transmissionType: TransmissionType;\n\t\t\tattribute performanceLevel: PerformanceLevel;\n\t\t\tconstraint selectEngineType {\n\t\t\t\tengineType = (performanceLevel = PerformanceLevel::highPerformance) implies EngineType::sixCylinder;\n\t\t\t\tengineType = (performanceLevel =",
    "package 'AutomotiveComponentModeling' {\n\tattribute def Mass { type: Real; unit: kg; }\n\tattribute def Length { type: Real; unit: m; }\n\tattribute def Diameter { type: Real; unit: m; }\n\tattribute def Radius { type: Real",
    "package 'AutomotiveFuelSystem' {\n\tattribute def Fuel;\n\tattribute def Temperature;\n\tport def FuelOutletPort {\n\t\tout fuel: Fuel;\n\t\tin returnFuel: Fuel;\n\t}\n\tport def TemperaturePort {\n\t\tout temperature: Temperature;\n\t}\n\tpart context {\n\t\tpart fuelTankAssembly {\n\t\t\tport fuelOutletPort: FuelOutletPort;\n\t\t}\n\t\tpart fuelPump {\n\t\t\tperform fuelCirculation.pumpFuel {\n\t\t\t\tin fuel = fuelTankAssembly.fuelOutletPort.fuel;\n\t\t\t\tout fuel = fuelOutletPort.fuel;\n\t\t\t\tin returnFuel =",
    "package 'PhysicalQuantitySystem' {\n\tattribute def Quantity;\n\tattribute def Unit;\n\tattribute def ConversionFactor;\n\tpart context {\n\t\tpart user {\n\t\t\tperform manageQuantities.importData {\n\t\t\t\tin quantityData: Quantity;\n\t\t\t}\n\t\t\tperform manageQuantities.convertUnits {\n\t\t\t\tin quantity: Quantity;\n\t\t\t\tin sourceUnit: Unit;\n\t\t\t\tin targetUnit: Unit;\n\t\t\t\tout convertedQuantity: Quantity;\n\t\t\t}\n\t\t}\n\t\tpart physicalQuantitySystem {\n\t\t\tperform manageQuantities.storeData {\n\t\t\t\tin quantityData: Quantity;\n\t\t\t}\n\t\t\tperform manageQuantities.retrieveData {\n\t\t\t\tout quantityData: Quantity;\n\t\t\t}\n\t\t\tperform manageQuantities.performConversion {\n\t\t\t",
    "package 'UnitSystemLibrary' {\n\tattribute def ISQUnit;\n\tattribute def USCustomaryUnit;\n\tattribute def ConversionFactor;\n\tport def ISQUnitPort {\n\t\tin isqUnit : ISQUnit;\n\t\tout convertedUSCustomaryUnit : USCustomaryUnit;\n\t}\n\tport def USCustomaryUnitPort {\n\t\tin usCustomaryUnit : USCustomaryUnit;\n\t\tout convertedISQUnit : ISQUnit;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport isqUnitPort: ISQUnitPort;\n\t\t\tport usCustomaryUnitPort: USCustomaryUnitPort;\n\t\t\tperform unitConversion.convertISQToUSCustomary {\n\t\t\t\tin isqUnit = isqUnitPort.isqUnit;\n\t\t\t\tout convertedUSCustomaryUnit = usCustomaryUnitPort.convertedUSCustomary",
    "package 'HeadlampTiltAdjustmentSystem' {\n\tattribute def TiltAngle;\n\tattribute def ComplianceStatus;\n\tpart context {\n\t\tpart headlampTiltAdjustmentKnob {\n\t\t\tport tiltAnglePort {\n\t\t\t\tout tiltAngle: TiltAngle;\n\t\t\t}\n\t\t}\n\t\tpart verificationSystem {\n\t\t\tport tiltAnglePort {\n\t\t\t\tin tiltAngle: TiltAngle;\n\t\t\t}\n\t\t\tport complianceStatusPort {\n\t\t\t\tout complianceStatus: ComplianceStatus;\n\t\t\t}\n\t\t\tperform verifyTiltAngle {\n\t\t\t\tin tiltAngle = tiltAnglePort.tiltAngle;\n\t\t\t\tout complianceStatus = complianceStatusPort.complianceStatus;\n\t\t\t}\n\t\t}\n\t\tinterface headl",
    "package 'DataManagementSystem' {\n\tattribute def UnsignedInteger {\n\t\ttype: Integer[0..*];\n\t}\n\tattribute def UnsignedFloat {\n\t\ttype: Real[0..*];\n\t}\n\tattribute def DateTime;\n\tattribute def String;\n\tattribute def Boolean;\n\tattribute def StatusColor {\n\t\ttype: Enumeration {\n\t\t\tenumeration literal red;\n\t\t\tenumeration literal yellow;\n\t\t\tenumeration literal green;\n\t\t}\n\t}\n\tattribute def Status {",
    "package 'SparePartsManagementSystem' {\n\tattribute def SparePart;\n\tattribute def Integer;\n\tattribute def String;\n\tattribute def Person;\n\tattribute def Real;\n\n\tpart context {\n\t\tpart sparePartsManager {\n\t\t\tattribute spareParts: Bag<SparePart>;\n\t\t\tattribute integerList: List<Integer>;\n\t\t\tattribute stringSet: Set<String>;\n\t\t\tattribute personnelSet: OrderedSet<Person>;\n\t\t\tattribute personnelSetsList: List<Set<Person>>;\n\t\t\tattribute realArray: Real[4];\n\t\t}\n\n\t\tpart businessFunctions {\n\t\t",
    "package 'TireInformationSystem' {\n\tattribute def ManufacturerName;\n\tattribute def RimDiameter;\n\tattribute def TireWidth;\n\tattribute def InstallationPosition;\n\tpart context {\n\t\tpart user {\n\t\t\tperform manageTireInformation.addTire {\n\t\t\t\tin manufacturerName: ManufacturerName;\n\t\t\t\tin rimDiameter: RimDiameter;\n\t\t\t\tin tireWidth: TireWidth;\n\t\t\t\tin installationPosition: InstallationPosition;\n\t\t\t}\n\t\t}\n\t\tpart tireDatabase {\n\t\t\tperform manageTireInformation.storeTireInformation {\n\t\t\t\tin manufacturerName: ManufacturerName;\n\t\t\t\tin rimDiameter: RimDiameter;",
    "package 'SpacecraftTrajectorySamplingSystem' {\n\tattribute def Time;\n\tattribute def Position;\n\tattribute def Velocity;\n\tattribute def UTC_Time;\n\tpart context {\n\t\tpart spacecraft {\n\t\t\tport positionPort {\n\t\t\t\tout position: Position;\n\t\t\t}\n\t\t\tport velocityPort {\n\t\t\t\tout velocity: Velocity;\n\t\t\t}\n\t\t}\n\t\tpart system {\n\t\t\tport positionPort: ~Position;\n\t\t\tport velocityPort: ~Velocity;\n\t",
    "package 'AlloyPropertySystem' {\n\tattribute def SubstanceCharacteristic;\n\tattribute def Material;\n\tattribute def MechanicalProperty;\n\tattribute def MassFraction;\n\tattribute def SIUnit;\n\tattribute def TensileStrength;\n\tpart context {\n\t\tpart user {\n\t\t\tperform manageAlloyProperties.createInstance",
    "package 'EngineeringMaterialsDatabase' {\n\tattribute def Material;\n\tattribute def Property;\n\tattribute def Composition;\n\tattribute def MechanicalProperty;\n\tattribute def TensileStrength;\n\tattribute def MassFraction;\n\tpart context {\n\t\tpart user {\n\t\t\tperform materialManagement.addMaterial {\n\t\t\t\tout material = materialPort.material;\n\t",
    "package 'PubSubSystem' {\n\tattribute def Message;\n\tattribute def Topic;\n\tport def ProducerPort {\n\t\tout publishMessage : Message;\n\t\tout topic : Topic;\n\t}\n\tport def ConsumerPort {\n\t\tin receiveMessage : Message;\n\t\tout subscribeTopic : Topic;\n\t}\n\tpart context {\n\t\tpart producer {\n\t\t\tport producerPort: ProducerPort;\n\t\t\tperform publishMessageRegion.publishMessage {\n\t\t\t\tout publishMessage = producerPort.publishMessage;\n\t\t\t\tout topic = producerPort.topic;\n\t\t\t}\n\t\t}\n\t\tinterface producerToServer connect producer.producerPort to server.producerPort {\n\t\t\tref",
    "package 'VehicleFuelSystem' {\n\tattribute def Fuel;\n\tattribute def Temperature;\n\tport def FuelSupplyPort {\n\t\tout fuel: Fuel;\n\t}\n\tport def FuelReturnPort {\n\t\tin fuel: Fuel;\n\t}\n\tport def TemperaturePort {\n\t\tout temperature: Temperature;\n\t}\n\tpart context {\n\t\tpart fuelTankAssembly {\n\t\t\tport fuelSupplyPort: FuelSupplyPort;\n\t\t\tperform fuelFlow.supplyFuel {\n\t\t\t\tout fuel = fuelSupplyPort.fuel;\n\t\t\t}\n\t\t}\n\t\tinterface fuelSupply connect fuelTankAssembly.fuelSupplyPort to engine.fuelSupplyPort {\n\t\t\tref flow references fuelFlow.supplyFuelFlow",
    "package 'MessageFlowSystem' {\n\tattribute def TopicMessage;\n\tattribute def SubscriptionRequest;\n\tport def ProducerPort {\n\t\tout publishMessage : TopicMessage;\n\t}\n\tport def ServerPort {\n\t\tin subscribeRequest : SubscriptionRequest;\n\t\tout publishMessage : TopicMessage;\n\t\tin publishMessage : TopicMessage;\n\t\tout deliverMessage : TopicMessage;\n\t}\n\tport def ConsumerPort {\n\t\tout subscribeRequest : SubscriptionRequest;\n\t\tin deliverMessage : TopicMessage;\n\t}\n\tpart context {\n\t\tpart producer {\n\t\t\tport producerPort: ProducerPort;\n\t\t\tperform messageFlow.publishMessage {\n\t\t\t\tout publishMessage = producerPort.publishMessage;\n\t\t\t}\n\t\t}\n\t\tinterface producerToServer",
    "package 'TransportationSystem' {\n\tattribute def FuelLevel;\n\tattribute def User;\n\tattribute def Vehicle;\n\tport def UserPort {\n\t\tin user: User[4];\n\t}\n\tport def VehiclePort {\n\t\tout vehicle: Vehicle;\n\t\tout fuelLevel: FuelLevel;\n\t}\n\tpart context {\n\t\tpart driver {\n\t\t\tport userPort: UserPort;\n\t\t\tperform travel.boardVehicle {\n\t\t\t\tin user = userPort.user;\n\t\t\t}\n\t\t\tperform travel.operateVehicle {\n\t\t\t\tout vehicle = vehiclePort.vehicle;\n\t\t\t}\n\t\t}\n\t\tpart vehicle {\n\t\t\tport userPort: ~UserPort;\n\t\t\tperform travel",
    "package 'FuelSupplyAndReturnSystem' {\n\tattribute def Fuel;\n\tattribute def Temperature;\n\tport def FuelOutletPort {\n\t\tout fuel: Fuel;\n\t\tout temperature: Temperature;\n\t}\n\tport def FuelInletPort {\n\t\tin fuel: Fuel;\n\t\tin temperature: Temperature;\n\t}\n\tpart context {\n\t\tpart fuelTankAssembly {\n\t\t\tport fuelOutletPort: FuelOutletPort;\n\t\t\tperform fuelSupplyAndReturn.supplyFuel {\n\t\t\t\tout fuel = fuelOutletPort.fuel;\n\t\t\t\t",
    "package 'FuelSystem' {\n\tattribute def Fuel;\n\tattribute def Temperature;\n\tport def FuelSupplyPort {\n\t\tout fuel: Fuel;\n\t\tout temperature: Temperature;\n\t}\n\tport def FuelReturnPort {\n\t\tin fuel: Fuel;\n\t\tout temperature: Temperature;\n\t}\n\tpart context {\n\t\tpart fuelTankAssembly {\n\t\t\tport fuelSupplyPort: FuelSupplyPort;\n\t\t\tport fuelReturnPort: FuelReturnPort;\n\t\t\tperform fuelFlowRegion.supplyFuel {\n\t\t\t\tout fuel = fuelSupplyPort.fuel;\n\t\t\t\tout temperature = fuelSupplyPort.temperature;\n\t\t\t}\n\t\t\tperform fuelFlowRegion.returnFuel {\n\t\t\t\tin fuel = fuelReturnPort.fuel;\n\t\t\t\t",
    "package 'PhotoCaptureSystem' {\n\tattribute def SceneSelection;\n\tattribute def FocusedImage;\n\tattribute def FinalPhoto;\n\tport def SceneSelectionPort {\n\t\tout sceneSelection : SceneSelection;\n\t}\n\tport def FocusedImagePort {\n\t\tout focusedImage: FocusedImage;\n\t}\n\tport def FinalPhotoPort {\n\t\tout finalPhoto: FinalPhoto;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport sceneSelectionPort: SceneSelectionPort;\n\t\t\tperform capturePhoto.selectScene {\n\t\t\t\tout sceneSelection = sceneSelectionPort.sceneSelection;\n\t\t\t}\n\t\t}\n\t\tinterface userToSystem connect user.sceneSelectionPort to system.sceneSelectionPort {\n\t\t\tref flow references capturePhoto.sceneSelectionFlow\n\t\t\t\tfrom source.sceneSelection to target.sceneSelection;\n\t\t}\n\t\tpart system {\n\t\t\tport sceneSelectionPort: ~SceneSelectionPort;\n\t\t",
    "package 'PhotographySystem' {\n\tattribute def Scene;\n\tattribute def Image;\n\tport def ScenePort {\n\t\tin scene: Scene;\n\t}\n\tport def ImagePort {\n\t\tout image: Image;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport scenePort: ScenePort;\n\t\t\tperform photographyWorkflow.selectScene {\n\t\t\t\tout scene = scenePort.scene;\n\t\t\t}\n\t\t}\n\t\tinterface userToSystem connect user.scenePort to system.scenePort {\n\t\t\tref flow references photographyWorkflow.sceneFlow\n\t\t\t\tfrom source.scene to target.scene;\n\t\t}\n\t\tpart system {\n\t\t\tport scenePort: ~ScenePort;\n\t\t\tperform photographyWorkflow.focusScene {\n",
    "package 'PhotographySystem' {\n\tattribute def Scene;\n\tattribute def Image;\n\tattribute def Photograph;\n\tport def SceneSelectionPort {\n\t\tout selectedScene : Scene;\n\t}\n\tport def ImagePort {\n\t\tout image: Image;\n\t}\n\tport def PhotographPort {\n\t\tout photograph: Photograph;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport sceneSelectionPort: SceneSelectionPort;\n\t\t\tperform photographyWorkflow.selectScene {\n\t\t\t\tout selectedScene = sceneSelectionPort.selectedScene;\n\t\t\t}\n\t\t}\n\t\tinterface userToSystem connect user.sceneSelectionPort to system.sceneSelectionPort {\n\t\t\tref flow references photographyWorkflow.sceneSelectionFlow\n\t\t\t\tfrom source.selectedScene to target.selectedScene;\n\t\t}\n\t\tpart system {\n\t\t\tport sceneSelectionPort: ~SceneSelectionPort;\n\t\t\tperform photographyWorkflow.",
    "package 'PhotographySystem' {\n\tattribute def Scene;\n\tattribute def Image;\n\tattribute def Photograph;\n\tport def ScenePort {\n\t\tin scene : Scene;\n\t}\n\tport def ImagePort {\n\t\tout image: Image;\n\t}\n\tport def PhotographPort {\n\t\tout photograph: Photograph;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport scenePort: ScenePort;\n\t\t\tperform photographyProcess.provideScene {\n\t\t\t\tin scene = scenePort.scene;\n\t\t\t}\n\t\t}\n\t\tinterface userToSystem connect user.scenePort to system.scenePort {\n\t\t\tref flow references photographyProcess.sceneFlow\n\t\t\t\tfrom source.scene to target.scene;\n\t\t}\n\t\tpart system {\n\t\t\tport scenePort: ~ScenePort;\n\t\t\tperform photographyProcess.focusProcessing {\n\t\t\t\tin scene = scenePort.scene;\n\t\t\t\tout image = imagePort.image;",
    "package 'PhotographyWorkflow' {\n\tattribute def Scene;\n\tattribute def Image;\n\tattribute def Picture;\n\tport def ScenePort {\n\t\tin scene : Scene;\n\t}\n\tport def PicturePort {\n\t\tout picture: Picture;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport scenePort: ScenePort;\n\t\t\tperform photographyProcess.inputScene {\n\t\t\t\tin scene = scenePort.scene;\n\t\t\t}\n\t\t}\n\t\tinterface userToPhotographyWorkflow connect user.scenePort to photographyWorkflow.scenePort {\n\t\t\tref flow references inputScene.sceneFlow\n\t\t\t\tfrom source.scene to target.scene;\n\t\t}\n\t\tpart photographyWorkflow {\n\t\t\tport scenePort: ~ScenePort;\n\t\t\tperform photographyProcess.focusScene",
    "package 'PhotographySystem' {\n\tattribute def Scene;\n\tattribute def FocusStatus;\n\tattribute def Image;\n\tport def ScenePort {\n\t\tout selectedScene : Scene;\n\t}\n\tport def FocusStatusPort {\n\t\tout focusStatus : FocusStatus;\n\t}\n\tport def ImagePort {\n\t\tout image : Image;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport scenePort: ScenePort;\n\t\t\tperform captureProcess.selectScene {\n\t\t\t\tout selectedScene = scenePort.selectedScene;\n\t\t\t}\n\t\t}\n\t\tinterface userToCamera connect user.scenePort to camera.scenePort {\n\t\t\tref flow references captureProcess.sceneSelectionFlow\n\t\t\t\tfrom source.selectedScene to target.selectedScene;\n\t\t}\n\t\tpart camera {\n\t\t\tport scenePort: ~ScenePort;\n\t\t\tperform captureProcess.focusScene {\n\t\t\t\tin selectedScene = scenePort.selectedScene",
    "package 'PhotographySystem' {\n\tattribute def Scene;\n\tattribute def Image;\n\tattribute def Photo;\n\tport def SceneInputPort {\n\t\tin scene: Scene;\n\t}\n\tport def ImageOutputPort {\n\t\tout image: Image;\n\t}\n\tport def PhotoOutputPort {\n\t\tout photo: Photo;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport sceneInputPort: SceneInputPort;\n\t\t\tperform shootingProcess.selectScene {\n\t\t\t\tin scene = sceneInputPort.scene;\n\t\t\t}\n\t\t}\n\t\tinterface userToSystem connect user.sceneInputPort to system.sceneInputPort {\n\t\t\tref flow references selectScene.sceneFlow\n\t\t\t\tfrom source.scene to target.scene;\n\t\t}\n\t\tpart system {\n\t\t\tport sceneInputPort: ~SceneInputPort",
    "package 'PhotographySystem' {\n\tattribute def Scene;\n\tattribute def Image;\n\tattribute def Photo;\n\tport def TriggerPort {\n\t\tin trigger: Boolean;\n\t}\n\tport def DisplayPort {\n\t\tout display: Photo;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport triggerPort: TriggerPort;\n\t\t\tperform photographyWorkflow.triggerPhotography {\n\t\t\t\tin trigger = triggerPort.trigger;\n\t\t\t}\n\t\t}\n\t\tinterface userToSystem connect user.triggerPort to system.triggerPort {\n\t\t\tref flow references photographyWorkflow.triggerFlow\n\t\t\t\tfrom source.trigger to target.trigger;\n\t\t}\n\t\tpart system {\n\t\t\tport triggerPort: ~TriggerPort;\n\t\t\tperform",
    "package 'AutomaticBrakeControlSystem' {\n\tattribute def BrakePedalStatus;\n\tattribute def TractionInfo;\n\tattribute def BrakePressure;\n\tattribute def ModulationFrequency;\n\tport def BrakePedalStatusPort {\n\t\tout brakePedalStatus : BrakePedalStatus;\n\t}\n\tport def TractionInfoPort {\n\t\tout tractionInfo : TractionInfo;\n\t}\n\tport def BrakePressurePort {\n\t\tout brakePressure : BrakePressure;\n\t}\n\tport def ModulationFrequencyPort {\n\t\tout modulationFrequency : ModulationFrequency;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport brakeP",
    "package 'BatteryChargingControlSystem' {\n\tattribute def BatteryLevel;\n\tattribute def ChargeCommand;\n\tport def BatteryLevelPort {\n\t\tout batteryLevel : BatteryLevel;\n\t}\n\tport def ChargeCommandPort {\n\t\tout chargeCommand : ChargeCommand;\n\t}\n\tpart context {\n\t\tpart battery {\n\t\t\tport batteryLevelPort: BatteryLevelPort;\n\t\t}\n\t\tpart charger {\n\t\t\tport batteryLevelPort: ~BatteryLevelPort;\n\t\t\tport chargeCommandPort: ChargeCommandPort;\n\t\t\tperform chargeControl.monitorBatteryLevel {\n\t\t\t\tin batteryLevel = batteryLevelPort.batteryLevel;\n\t\t\t}\n\t\t\tperform chargeControl.supplyCharge {\n\t\t\t\tout chargeCommand = chargeCommandPort.chargeCommand;\n\t\t\t}\n\t\t\tperform chargeControl.terminateCh",
    "package 'BatteryChargingSystem' {\n\tattribute def BatteryLevel;\n\tattribute def ChargingStatus;\n\tport def BatteryLevelPort {\n\t\tout batteryLevel : BatteryLevel;\n\t}\n\tport def ChargingStatusPort {\n\t\tout chargingStatus: ChargingStatus;\n\t}\n\tpart context {\n\t\tpart battery {\n\t\t\tport batteryLevelPort: BatteryLevelPort;\n\t\t\tperform chargeCycle.monitorBatteryLevel {\n\t\t\t\tout batteryLevel = batteryLevelPort.batteryLevel;\n\t\t\t}\n\t\t}\n\t\tinterface batteryToSystem connect battery.batteryLevelPort to chargingSystem.batteryLevelPort {\n\t\t\tref flow references monitorBatteryLevel.batteryLevelFlow\n\t\t\t\tfrom source.batteryLevel to target.batteryLevel;\n\t\t}\n\t\tpart chargingSystem {\n\t\t\tport batteryLevelPort: ~BatteryLevelPort;",
    "package 'CameraSystem' {\n\tattribute def Scene;\n\tattribute def Image;\n\tport def ScenePort {\n\t\tin selectedScene : Scene;\n\t}\n\tport def ImagePort {\n\t\tout capturedImage: Image;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport scenePort: ScenePort;\n\t\t\tperform captureImage.selectScene {\n\t\t\t\tin selectedScene = scenePort.selectedScene;\n\t\t\t}\n\t\t}\n\t\tinterface userToCameraSystem connect user.scenePort to cameraSystem.scenePort {\n\t\t\tref flow references selectScene.selectedSceneFlow\n\t\t\t\tfrom source.selectedScene to target.selectedScene;\n\t\t}\n\t\tpart cameraSystem {\n\t\t\tport scenePort: ~ScenePort;\n\t\t\tperform captureImage.autofocus {\n",
    "package 'DigitalCamera' {\n\tattribute def SceneSelection;\n\tattribute def Focus;\n\tattribute def ImageGeneration;\n\tattribute def Capture;\n\tattribute def Photo;\n\tport def SceneSelectionPort {\n\t\tout sceneSelection : SceneSelection;\n\t}\n\tport def FocusPort {\n\t\tout focus: Focus;\n\t}\n\tport def ImageGenerationPort {\n\t\tout imageGeneration: ImageGeneration;\n\t}\n\tport def CapturePort {\n\t\tout capture: Capture;\n\t}\n\tport def PhotoPort {\n\t\tout photo: Photo;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport sceneSelectionPort: SceneSelectionPort;\n\t\t\tperform shootingProcess.selectScene {\n\t\t\t\tout sceneSelection = sceneSelectionPort.sceneSelection;\n\t\t\t}\n\t\t}\n\t\t",
    "package 'VehicleSimulation' {\n\tattribute def Mass;\n\tattribute def Position;\n\tattribute def Velocity;\n\tattribute def TimeInterval;\n\tattribute def PowerInput;\n\tport def InputPort {\n\t\tin mass: Mass;\n\t\tin initialPosition: Position;\n\t\tin initialVelocity: Velocity;\n\t\tin timeInterval: TimeInterval;\n\t\tin powerInput: PowerInput[*];\n\t}\n\tport def OutputPort {\n\t\tout positionOutput: Position[*];\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport inputPort: InputPort;\n\t\t\tperform simulateVehicle.provideInput {\n\t\t\t\tin mass = inputPort.mass;\n\t\t\t\tin initialPosition = inputPort.initialPosition;\n\t\t\t\tin initialVelocity = inputPort.initialVelocity;\n\t\t\t\t",
    "package 'CameraSystem' {\n\tattribute def Scene;\n\tattribute def Image;\n\tattribute def Photo;\n\tport def SceneInputPort {\n\t\tin scene: Scene;\n\t}\n\tport def ImageOutputPort {\n\t\tout image: Image;\n\t}\n\tport def PhotoDisplayPort {\n\t\tout photo: Photo;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport sceneInputPort: SceneInputPort;\n\t\t\tperform shootPhoto.inputScene {\n\t\t\t\tin scene = sceneInputPort.scene;\n\t\t\t}\n\t\t}\n\t\tinterface userToCameraSystem connect user.sceneInputPort to cameraSystem.sceneInputPort {\n\t\t\tref flow references inputSceneFlow\n\t\t\t\tfrom source.scene to target.scene;\n\t\t}\n\t\tpart cameraSystem {\n\t\t\tport sceneInputPort: ~SceneInputPort;\n",
    "package 'CameraSystem' {\n\tattribute def Scene;\n\tattribute def Image;\n\tattribute def Picture;\n\tport def ViewPort {\n\t\tout scene: Scene;\n\t}\n\tport def DisplayPort {\n\t\tin picture: Picture;\n\t}\n\tpart context {\n\t\tpart User {\n\t\t\tport viewPort: ViewPort;\n\t\t\tperform Workflow.SelectScene {\n\t\t\t\tout scene = viewPort.scene;\n\t\t\t}\n\t\t}\n\t\tinterface UserToCameraSystem connect User.viewPort to CameraSystem.viewPort {\n\t\t\tref flow references Workflow.SceneSelectionFlow\n\t\t\t\tfrom source.scene to target.scene;\n\t\t}\n\t\tpart CameraSystem {\n\t\t\tport viewPort: ~ViewPort;\n\t\t\tperform Workflow.FocusAndCapture {\n\t\t\t\tin scene = viewPort.scene;\n\t\t\t",
    "package 'SensorManagementSystem' {\n\tattribute def SensorStatus;\n\tattribute def UpdateOperation;\n\tport def SensorStatusPort {\n\t\tout sensorStatus : SensorStatus;\n\t}\n\tport def UpdateOperationPort {\n\t\tout updateOperation : UpdateOperation;\n\t}\n\tpart context {\n\t\tpart system {\n\t\t\tport sensorStatusPort: SensorStatusPort;\n\t\t\tport updateOperationPort: UpdateOperationPort;\n\t\t\tperform manageSensors.monitorSensorStatus {\n\t\t\t\tout sensorStatus = sensorStatusPort.sensorStatus;\n\t\t\t}\n\t\t\tperform manageSensors.updateReadySensors {\n\t\t\t\tin sensorStatus = sensorStatusPort.sensorStatus;\n\t\t\t\tout updateOperation = updateOperationPort.updateOperation;\n\t\t\t}\n\t\t}\n\t\tpart sensor {\n\t\t\tport sensorStatusPort: ~SensorStatusPort;\n\t\t\tport updateOperationPort: ~UpdateOperationPort;\n\t\t\tperform manageSensors.provide",
    "package 'VehicleStateManagement' {\n\tattribute def StartSignal;\n\tattribute def PowerOnSignal;\n\tattribute def ShutdownSignal;\n\tattribute def VehicleState;\n\tport def StartSignalPort {\n\t\tout startSignal : StartSignal;\n\t}\n\tport def PowerOnSignalPort {\n\t\tout powerOnSignal : PowerOnSignal;\n\t}\n\tport def ShutdownSignalPort {\n\t\tout shutdownSignal : ShutdownSignal;\n\t}\n\tport def VehicleStatePort {\n\t\tout vehicleState: VehicleState;\n\t}\n\tpart context {\n\t\tpart controller {\n\t\t\tport startSignalPort: StartSignalPort;\n\t\t\tport powerOnSignalPort: PowerOnSignalPort;\n\t\t\tport shutdownSignalPort: ShutdownSignalPort;\n\t\t\tperform manageVehicleState.sendStartSignal",
    "package 'VehicleControlSystem' {\n\tattribute def VehicleStartSignal;\n\tattribute def VehicleOnSignal;\n\tattribute def VehicleOffSignal;\n\tattribute def VehicleState;\n\tport def VehicleStartSignalPort {\n\t\tout vehicleStartSignal : VehicleStartSignal;\n\t}\n\tport def VehicleOnSignalPort {\n\t\tout vehicleOnSignal : VehicleOnSignal;\n\t}\n\tport def VehicleOffSignalPort {\n\t\tout vehicleOffSignal : VehicleOffSignal;\n\t}\n\tport def VehicleStatePort {\n\t\tout vehicleState: VehicleState;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport vehicleStartSignalPort: VehicleStartSignalPort;\n\t\t\tport vehicle",
    "package 'VehiclePowerManagement' {\n\tattribute def StartCmd;\n\tattribute def StartedSignal;\n\tattribute def ShutdownCmd;\n\tport def StartCmdPort {\n\t\tout startCmd : StartCmd;\n\t}\n\tport def StartedSignalPort {\n\t\tin startedSignal : StartedSignal;\n\t}\n\tport def ShutdownCmdPort {\n\t\tout shutdownCmd : ShutdownCmd;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport startCmdPort: StartCmdPort;\n\t\t\tperform powerControl.sendStartCmd {\n\t\t\t\tout startCmd = startCmdPort.startCmd;\n\t\t\t}\n\t\t\tport shutdownCmdPort: ShutdownCmdPort;\n",
    "package 'VehicleSystem' {\n\tattribute def StartSignal;\n\tattribute def ShutdownSignal;\n\tattribute def VehicleStartedSignal;\n\tattribute def VehicleStatus;\n\tport def StartSignalPort {\n\t\tout startSignal : StartSignal;\n\t}\n\tport def ShutdownSignalPort {\n\t\tout shutdownSignal : ShutdownSignal;\n\t}\n\tport def VehicleStartedSignalPort {\n\t\tout vehicleStartedSignal : VehicleStartedSignal;\n\t}\n\tport def VehicleStatusPort {\n\t\tout vehicleStatus : VehicleStatus;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport startSignalPort: StartSignalPort;\n\t\t\tport shutdownSignalPort: ShutdownSignalPort;\n\t\t\tperform vehicleControl.sendStartSignal {\n\t\t\t\tout startSignal = startSignalPort.start",
    "package 'VehiclePowerManagement' {\n\tattribute def StartSignal;\n\tattribute def OnSignal;\n\tattribute def OffSignal;\n\tattribute def OperatingState;\n\tattribute def HealthState;\n\tport def StartSignalPort {\n\t\tout startSignal : StartSignal;\n\t}\n\tport def OnSignalPort {\n\t\tout onSignal : OnSignal;\n\t}\n\tport def OffSignalPort {\n\t\tout offSignal : OffSignal;\n\t}\n\tport def OperatingStatePort {\n\t\tout operatingState : OperatingState;\n\t}\n\tport def HealthStatePort {\n\t\tout healthState : HealthState;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport startSignalPort: StartSignal",
    "package 'VehicleHealthMonitoringSystem' {\n\tattribute def Temperature;\n\tattribute def HealthStatus;\n\tattribute def MaintenanceStatus;\n\tattribute def Time;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport temperaturePort {\n\t\t\t\tout currentTemperature: Temperature;\n\t\t\t}\n\t\t\tport healthStatusPort {\n\t\t\t\tin healthStatus: HealthStatus;\n\t\t\t}\n\t\t\tport maintenanceStatusPort {\n\t\t\t\tin maintenanceStatus: MaintenanceStatus;\n\t\t\t}\n\t\t}\n",
    "package 'TimedClockServer' {\n\tattribute def StartCmd;\n\tattribute def RequestMsg;\n\tport def RequestPort {\n\t\tin requestMsg : RequestMsg;\n\t}\n\tport def StartCmdPort {\n\t\tin startCmd : StartCmd;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport requestPort: RequestPort;\n\t\t\tperform controlServer.sendRequest {\n\t\t\t\tout requestMsg = requestPort.requestMsg;\n\t\t\t}\n\t\t\tport startCmdPort: StartCmdPort;\n\t\t\tperform controlServer.sendStartCmd {\n\t\t\t\tout startCmd = startCmdPort.startCmd;\n\t\t\t}\n\t\t}\n\t\tinterface",
    "package 'VehicleControlSystem' {\n\tattribute def StartSignal;\n\tattribute def StopSignal;\n\tattribute def PowerOnSignal;\n\tattribute def BrakePedal;\n\tattribute def ControllerSignal;\n\tport def StartSignalPort {\n\t\tin startSignal : StartSignal;\n\t}\n\tport def StopSignalPort {\n\t\tin stopSignal : StopSignal;\n\t}\n\tport def PowerOnSignalPort {\n\t\tout powerOnSignal : PowerOnSignal;\n\t}\n\tport def BrakePedalPort {\n\t\tin brakePedal : BrakePedal;\n\t}\n\tport def ControllerSignalPort {\n\t\tout controllerSignal : ControllerSignal;\n\t}\n\tpart",
    "package 'VehicleControlSystem' {\n\tattribute def StartSignal;\n\tattribute def VehicleOnSignal;\n\tattribute def ShutdownSignal;\n\tattribute def StartControlSignal;\n\tattribute def BrakePedalStatus;\n\tattribute def VehicleState;\n\tport def StartSignalPort {\n\t\tin startSignal : StartSignal;\n\t}\n\tport def VehicleOnSignalPort {\n\t\tin vehicleOnSignal : VehicleOnSignal;\n\t}\n\tport def ShutdownSignalPort {\n\t\tin shutdownSignal : ShutdownSignal;",
    "package 'CruiseControlSystem' {\n\tattribute def SetSpeedCmd;\n\tattribute def SpeedInfo;\n\tattribute def FuelControlCmd;\n\tport def SetSpeedCmdPort {\n\t\tout setSpeedCmd : SetSpeedCmd;\n\t}\n\tport def SpeedInfoPort {\n\t\tout speedInfo: SpeedInfo;\n\t}\n\tport def FuelControlCmdPort {\n\t\tout fuelControlCmd: FuelControlCmd;\n\t}\n\tpart context {\n\t\tpart driver {\n\t\t\tport setSpeedCmdPort: SetSpeedCmdPort;\n\t\t\tperform cruiseFunction.sendSetSpeedCmd {\n\t\t\t\tout setSpeedCmd = setSpeedCmdPort.setSpeedCmd;\n\t\t\t}\n\t\t}\n\t\tinterface driverToC",
    "package 'CruiseControlSystem' {\n\tattribute def SpeedCmd;\n\tattribute def VehicleSpeed;\n\tattribute def ThrottleCmd;\n\tport def SpeedCmdPort {\n\t\tout speedCmd : SpeedCmd;\n\t}\n\tport def VehicleSpeedPort {\n\t\tin vehicleSpeed : VehicleSpeed;\n\t}\n\tport def ThrottleCmdPort {\n\t\tout throttleCmd : ThrottleCmd;\n\t}\n\tpart context {\n\t\tpart driver {\n\t\t\tport speedCmdPort: SpeedCmdPort;\n\t\t\tperform cruiseControl.sendSpeedCmd {\n\t\t\t\tout speedCmd = speedCmdPort.speedCmd;\n\t\t\t}\n\t\t}\n\t\tinterface driverToCruiseController connect driver.speedCmdPort to cruiseController.speedCmdPort {\n\t\t\tref flow references cruiseControl.speedCmdFlow\n\t\t\t\tfrom source.speedCmd",
    "package 'CruiseControlSystem' {\n\tattribute def SpeedCommand;\n\tattribute def SpeedInfo;\n\tattribute def ThrottleCommand;\n\tport def SpeedCommandPort {\n\t\tout speedCommand : SpeedCommand;\n\t}\n\tport def SpeedInfoPort {\n\t\tin speedInfo : SpeedInfo;\n\t}\n\tport def ThrottleCommandPort {\n\t\tout throttleCommand : ThrottleCommand;\n\t}\n\tpart context {\n\t\tpart driver {\n\t\t\tport speedCommandPort: SpeedCommandPort;\n\t\t\tperform cruiseControl.sendSpeedCommand {\n\t\t\t\tout speedCommand = speedCommandPort.speedCommand;\n\t\t\t}\n\t\t}\n\t\tinterface driverToCruiseController",
    "package 'CruiseControl' {\n\tattribute def SpeedCommand;\n\tattribute def SpeedFeedback;\n\tattribute def ThrottleControl;\n\tport def SpeedCommandPort {\n\t\tout speedCommand : SpeedCommand;\n\t}\n\tport def SpeedFeedbackPort {\n\t\tin speedFeedback: SpeedFeedback;\n\t}\n\tport def ThrottleControlPort {\n\t\tout throttleControl: ThrottleControl;\n\t}\n\tpart context {\n\t\tpart driver {\n\t\t\tport speedCommandPort: SpeedCommandPort;\n\t\t\tperform cruiseControl.sendSpeedCommand {\n\t\t\t\tout speedCommand = speedCommandPort.speedCommand;\n\t\t\t}\n\t\t}\n\t\t",
    "package 'AutomotiveCruiseControl' {\n\tattribute def SpeedCommand;\n\tattribute def SpeedSensorData;\n\tattribute def EngineFuelControlCommand;\n\tport def SpeedCommandPort {\n\t\tout speedCommand : SpeedCommand;\n\t}\n\tport def SpeedSensorDataPort {\n\t\tout speedSensorData: SpeedSensorData;\n\t}\n\tport def EngineFuelControlCommandPort {\n\t\tout engineFuelControlCommand: EngineFuelControlCommand;\n\t}\n\tpart context {\n\t\tpart driver {\n\t\t\tport speedCommand",
    "package 'CruiseControlSystem' {\n\tattribute def SetSpeedCmd;\n\tattribute def SpeedInfo;\n\tattribute def FuelControlCmd;\n\tport def SetSpeedCmdPort {\n\t\tout setSpeedCmd : SetSpeedCmd;\n\t}\n\tport def SpeedInfoPort {\n\t\tout speedInfo: SpeedInfo;\n\t}\n\tport def FuelControlCmdPort {\n\t\tout fuelControlCmd: FuelControlCmd;\n\t}\n\tpart context {\n\t\tpart driver {\n\t\t\tport setSpeedCmdPort: SetSpeedCmdPort;\n\t\t\tperform cruiseControl.sendSetSpeedCmd {\n\t\t\t\tout setSpeedCmd = setSpeedCmdPort.setSpeedCmd;\n\t\t\t}\n\t\t}\n\t\tinterface driverToCruise",
    "package 'VehicleLifecycleManagement' {\n\tattribute def OwnerInfo;\n\tattribute def DriverInfo;\n\tattribute def DeliveryDate;\n\tattribute def ScrappingInfo;\n\tpart context {\n\t\tpart assembly {\n\t\t\tperform assembleVehicle;\n\t\t}\n\t\tpart delivery {\n\t\t\tperform deliverVehicle {\n\t\t\t\tout deliveryDate: DeliveryDate;\n\t\t\t}\n\t\t}\n\t\tpart ownership {\n\t\t\tperform transferOwnership {\n\t\t\t\tin ownerInfo: OwnerInfo;\n\t\t\t}\n\t\t\tperform trackDrivers {\n\t\t\t\tin driverInfo: DriverInfo",
    "package 'VehicleSystem' {\n\tattribute def Mass;\n\tattribute def OperationalStatus;\n\tattribute def GearSetting;\n\tattribute def AcceleratorPedalPosition;\n\tattribute def Wheel;\n\tpart type Vehicle {\n\t\tattribute mass: Mass;\n\t\tattribute operationalStatus: OperationalStatus;\n\t\tpart engine;\n\t\treference driver;\n\t\tpart leftFrontWheel: Wheel;\n\t\tpart rightFrontWheel: Wheel;\n\t}\n\tpart vehicle_1: Vehicle;\n\tpart leftFrontWheel_1: Wheel {\n\t\tpart definition {\n\t\t\ttimeSnapshot leftFrontWheel_1_Snapshot1 {\n\t\t\t\t// Define attributes or relationships at this time snapshot\n\t\t\t}\n\t\t\ttimeSnapshot left",
    "package 'VehicleSystem' {\n\tattribute def Mass;\n\tattribute def Gear;\n\tattribute def AcceleratorPosition;\n\tpart type Vehicle {\n\t\tattribute mass: Mass;\n\t\tattribute gear: Gear;\n\t\tattribute acceleratorPosition: AcceleratorPosition;\n\t}\n\tpart Vehicle_1: Vehicle {\n\t\tattribute mass = 2000 kg;\n\t\tattribute gear = 0;\n\t\tattribute acceleratorPosition = 0.0;\n\t}\n\tpart Engine {\n\t\t// Define engine attributes and relationships as needed\n\t}\n\tpart Driver {\n\t\t// Define driver attributes and relationships as needed\n\t}\n\t// Define relationships",
    "package 'VehicleModel' {\n\tattribute def Mass;\n\tattribute def GearPosition;\n\tattribute def ThrottlePosition;\n\tattribute def Driver;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tattribute mass: Mass = 2000;\n\t\t\tattribute gearPosition: GearPosition = neutral;\n\t\t\tattribute throttlePosition: ThrottlePosition = 0;\n\t\t\tattribute driver: Driver = Alice;\n\t\t\tpart engine {\n\t\t\t\t// Engine properties and behaviors can be added here\n\t\t\t}\n\t\t}\n\t\tpart timeSlice1 {\n",
    "package 'VehicleMassModelingSystem' {\n\tattribute def Mass;\n\tclass def Component {\n\t\tattribute mass: Mass;\n\t\toperation calculateTotalMass(): Mass;\n\t}\n\tclass def SimpleComponent extends Component {\n\t\t// No additional attributes or operations\n\t}\n\tclass def CompositeComponent extends Component {\n\t\tattribute components: Component[*];\n\t\toperation calculateTotalMass() {\n\t\t\ttotalMass = mass;\n\t\t\tfor each c in components {\n\t\t\t\ttotalMass += c.calculateTotalMass();\n\t\t\t}\n\t\t\treturn totalMass;\n\t\t}\n\t}\n\tclass def",
    "package 'VehicleMassManagementSystem' {\n\tattribute def Mass;\n\tattribute def SerialNumber;\n\tattribute def VIN;\n\tclass def Vehicle {\n\t\tattribute mass: Mass;\n\t\tattribute vin: VIN;\n\t\tpart def components[*] {\n\t\t\tattribute mass: Mass;\n\t\t\tattribute serialNumber: SerialNumber;\n\t\t}\n\t}\n\tclass def Engine extends Vehicle.components {\n\t\tattribute mass: Mass;\n\t}\n\tclass def Transmission extends Vehicle.components {\n\t\tattribute mass: Mass;\n\t}\n\tpart context {\n\t",
    "package 'MassAggregationSystem' {\n\tattribute def SimpleMass;\n\tattribute def TotalMass;\n\tclass def SimpleThing {\n\t\tattribute simpleMass: SimpleMass;\n\t\tattribute totalMass: TotalMass {\n\t\t\tderive from simpleMass;\n\t\t}\n\t}\n\tclass def CompositeThing {\n\t\tattribute simpleMass: SimpleMass;\n\t\tattribute totalMass: TotalMass {\n\t\t\tderive from (simpleMass + subcomponents.totalMass);\n\t\t}\n\t\tpart subcomponents: SimpleThing[*] {\n\t\t\tcomposite;\n\t\t}\n\t}\n}",
    "package 'MassAggregationSystem' {\n\tattribute def Mass;\n\tattribute def MinMassThreshold;\n\tclass Object {\n\t\tattribute basicMass: Mass;\n\t\tattribute subcomponents: Object[*];\n\t\toperation calculateTotalMass(): Mass;\n\t\toperation filterAndAggregate(minThreshold: MinMassThreshold): Mass;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport objectPort: Object;\n\t\t\tperform massOperations.requestTotalMass {\n\t\t\t\tin object = objectPort.object;\n\t\t\t\tout totalMass = massSystem.totalMass;\n\t\t\t}\n\t\t\tperform massOperations",
    "package 'VehicleDynamicsSystem' {\n\tattribute def WheelPower;\n\tattribute def AerodynamicDragCoefficient;\n\tattribute def FrictionCoefficient;\n\tattribute def VehicleMass;\n\tattribute def Speed;\n\tattribute def Time;\n\tattribute def PowerOutput;\n\tattribute def Acceleration;\n\tattribute def Position;\n\n\tpart context {\n\t\tpart user {\n\t\t\tperform calculatePowerOutput {\n\t\t\t\tin wheelPower;\n\t\t\t\tin aerodynamicDragCoefficient;\n\t\t\t\tin frictionCoefficient;\n\t\t\t\tin vehicleMass;\n",
    "package 'VehicleSimulationSystem' {\n\tattribute def TimeStep;\n\tattribute def InitialSpeed;\n\tattribute def InitialPosition;\n\tattribute def WheelEndOutputPower;\n\tattribute def TotalVehicleMass;\n\tattribute def AerodynamicDragCoefficient;\n\tattribute def RollingResistanceCoefficient;\n\tattribute def Acceleration;\n\tattribute def Speed;\n\tattribute def Position;\n\tport def InputPort {\n\t\tin timeStep: TimeStep;\n\t\tin initialSpeed: InitialSpeed;\n\t\tin initialPosition: InitialPosition;\n\t\tin wheelEndOutputPower: WheelEndOutputPower;\n\t\tin",
    "package 'VehicleDynamicsModel' {\n\tattribute def Mass;\n\tattribute def WheelPower;\n\tattribute def AerodynamicDragCoefficient;\n\tattribute def RollingResistanceCoefficient;\n\tattribute def Speed;\n\tattribute def Position;\n\tattribute def TimeStep;\n\tattribute def Velocity;\n\tattribute def Acceleration;\n\tattribute def Displacement;\n\tattribute def DynamicStates;\n\tport def InputParametersPort {\n\t\tin mass: Mass;\n\t\tin wheelPower: WheelPower;\n\t\tin aerodynamicDragCoefficient: AerodynamicDragCoefficient;\n\t\tin rollingResistanceCoefficient: RollingResistanceCoefficient;\n\t\tin initialSpeed: Speed;\n\t\tin initialPosition: Position;\n\t}\n\tport def OutputStatesPort {\n\t",
    "package 'VehicleMotionSimulation' {\n\tattribute def InitialPosition;\n\tattribute def InitialVelocity;\n\tattribute def VehicleMass;\n\tattribute def WheelEndDrivePower;\n\tattribute def TimeInterval;\n\tattribute def DragCoefficient;\n\tattribute def FrictionCoefficient;\n\tattribute def Acceleration;\n\tattribute def FinalVelocity;\n\tattribute def FinalPosition;\n\tpart context {\n\t\tpart user {\n\t\t\tperform calculateMotion.provideInput {\n\t\t\t\tout initialPosition = initialPositionPort.initialPosition;\n\t\t\t\tout initialVelocity = initialVelocityPort.initialVelocity;\n",
    "package 'VehicleWeightManagementSystem' {\n\tattribute def Mass;\n\tattribute def OverweightWarning;\n\tpart context {\n\t\tpart chassis {\n\t\t\tattribute mass: Mass;\n\t\t}\n\t\tpart engine {\n\t\t\tattribute mass: Mass;\n\t\t}\n\t\tpart gearbox {\n\t\t\tattribute mass: Mass;\n\t\t}\n\t\tpart vehicleWeightManagementSystem {\n\t\t\tperform calculateTotalMass {\n\t\t\t\tin chassisMass = chassis.mass;\n\t\t\t\tin engineMass = engine.mass;\n\t\t\t\tin gearboxMass = gearbox.mass;\n\t\t\t\tout totalMass: Mass;\n\t\t\t}\n\t\t\tperform checkWeightCompliance {\n\t\t\t\tin totalMass = calculateTotalMass",
    "package 'VehicleMassBudgetSystem' {\n\tattribute def ComponentMass;\n\tattribute def EngineMass;\n\tattribute def TransmissionMass;\n\tattribute def TotalMassLimit;\n\tpart context {\n\t\tpart user {\n\t\t\tperform enterComponentMasses {\n\t\t\t\tout componentMasses: ComponentMass[*];\n\t\t\t}\n\t\t\tperform enterEngineMass {\n\t\t\t\tout engineMass: EngineMass;\n\t\t\t}\n\t\t\tperform enterTransmissionMass {\n\t\t\t\tout transmissionMass: TransmissionMass;\n\t\t\t}\n\t\t}\n\t\tpart vehicleMassBudgetSystem {\n\t\t\tperform calculateTotalMass {\n\t\t\t",
    "package 'VehicleMassManagementSystem' {\n\tattribute def Mass;\n\tpart context {\n\t\tpart chassis {\n\t\t\tattribute mass: Mass;\n\t\t}\n\t\tpart engine {\n\t\t\tattribute mass: Mass;\n\t\t}\n\t\tpart transmission {\n\t\t\tattribute mass: Mass;\n\t\t}\n\t\tpart vehicle {\n\t\t\tattribute totalMass: Mass;\n\t\t\tperform checkMassCompliance {\n\t\t\t\tin chassisMass = chassis.mass;\n\t\t\t\tin engineMass = engine.mass;\n\t\t\t\tin transmissionMass = transmission.mass;\n\t\t\t\tout totalMass = vehicle.totalMass;\n\t\t\t}\n\t\t}\n\t}\n\taction check",
    "package 'VehicleWeightSystem' {\n\tattribute def Weight;\n\tattribute def ChassisWeight;\n\tattribute def EngineWeight;\n\tattribute def TransmissionWeight;\n\tattribute def Warning;\n\tport def ChassisWeightPort {\n\t\tin chassisWeight: ChassisWeight;\n\t}\n\tport def EngineWeightPort {\n\t\tin engineWeight: EngineWeight;\n\t}\n\tport def TransmissionWeightPort {\n\t\tin transmissionWeight: TransmissionWeight;\n\t}\n\tport def WarningPort {\n\t\tout warning: Warning;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport chassisWeightPort: ChassisWeightPort;\n\t\t\tport engineWeightPort: EngineWeightPort;\n\t\t\tport transmissionWeightPort: TransmissionWeightPort;\n\t\t\tperform weightManagement.recordWeights {\n",
    "package 'Vehicle' {\n\tattribute def Mass;\n\tattribute def Force;\n\tattribute def Time;\n\tattribute def Velocity;\n\tpart context {\n\t\tpart chassis {\n\t\t\tattribute chassisMass: Mass;\n\t\t}\n\t\tpart engine {\n\t\t\tattribute engineMass: Mass;\n\t\t}\n\t\tpart transmission {\n\t\t\tattribute transmissionMass: Mass;\n\t\t}\n\t\tconstraint totalMassConstraint {\n\t\t\tchassisMass + engineMass + transmissionMass <= 2500;\n\t\t}\n\t\tpart vehicle {\n\t\t\tattribute initialVelocity: Velocity;\n\t\t\tattribute finalVelocity: Velocity;\n\t\t\tattribute totalMass: Mass;\n\t",
    "package 'VehicleMaintenanceSystem' {\n\tattribute def MaintenanceTime;\n\tattribute def MaintenanceInterval;\n\tattribute def MaxTemperature;\n\tattribute def VehicleStatus;\n\tattribute def MaintenanceStartTime;\n\tattribute def MaintenanceDuration;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tattribute maintenanceTime: MaintenanceTime;\n\t\t\tattribute maintenanceInterval: MaintenanceInterval;\n\t\t\tattribute maxTemperature: MaxTemperature;\n\t\t\tattribute vehicleStatus: VehicleStatus;\n\t\t\tattribute maintenanceStartTime: MaintenanceStartTime;\n\t\t\tattribute maintenanceDuration: MaintenanceDuration;\n\t\t\tperform maintenanceRegion.checkMaintenanceTime {\n\t\t\t\tin maintenanceTime = vehicle.maintenanceTime;\n\t\t\t\tout vehicleStatus",
    "package 'VehicleSystem' {\n\tattribute def Mass;\n\tattribute def FuelMass;\n\tattribute def Speed;\n\tattribute def Torque;\n\tattribute def MaxMassLimit;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tattribute totalMass: Mass;\n\t\t\tattribute fuelMass: FuelMass;\n\t\t\tconstraint totalMass <= maxMassLimit;\n\t\t\tconstraint fuelMass > 0;\n\t\t}\n\t\tpart engine {\n\t\t\tattribute speed: Speed;\n\t\t\tattribute torque: Torque;\n\t\t\tperform generateTorque {\n\t\t\t\tin speed = speed;\n\t\t\t\tout torque = torque;\n\t\t\t}\n\t\t}\n\t\tpart transmission {\n\t\t\tattribute torque: Torque;\n\t\t\tperform transmitTorque {\n\t\t\t\tin torque = torque;\n\t\t\t}\n\t\t}\n\t\tpart clutch {\n\t\t\tinterface engineToTransmission connect engine.torque to transmission.torque {\n\t\t\t\t",
    "package 'VehicleSystem' {\n\tattribute def Mass;\n\tattribute def Torque;\n\tattribute def Speed;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tattribute def fuelMass;\n\t\t\tattribute def dryMass;\n\t\t\tconstraint totalMassConstraint {\n\t\t\t\t(fuelMass = 500kg) implies (dryMass + fuelMass <= 2000kg);\n\t\t\t\t(fuelMass = 0kg) implies (dryMass + fuelMass <= 1500kg);\n\t\t\t}\n\t\t}\n\t\tpart engine {\n\t\t\tport def clutchInterface {\n\t\t\t\tout torque: Torque;\n\t\t\t}\n\t\t",
    "package 'VehicleSystem' {\n\tattribute def Mass;\n\tattribute def Torque;\n\tattribute def Speed;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tattribute mass: Mass;\n\t\t\tconstraint mass <= 2000 when fueled;\n\t\t\tconstraint mass <= 1500 when empty;\n\t\t\tport enginePort: EnginePort;\n\t\t\tport transmissionPort: TransmissionPort;\n\t\t}\n\t\tpart engine {\n\t\t\tattribute torque: Torque;\n\t\t\tattribute speed: Speed;\n\t\t\tconstraint torque varies with speed;\n\t\t\tport enginePort: ~EnginePort;\n\t\t\tport clutchPort: ClutchPort;\n\t\t\tperform transmitTorque {\n\t\t\t\tout torque = enginePort.torque;\n\t\t\t}\n\t\t}\n\t\tpart transmission {\n\t\t\t",
    "package 'Vehicle' {\n\tattribute def Mass;\n\tattribute def FuelMass;\n\tattribute def Torque;\n\tattribute def Speed;\n\tattribute def ClutchInterface;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tattribute curbMass: Mass;\n\t\t\tattribute fuelMass: FuelMass;\n\t\t\tattribute totalMass: Mass;\n\t\t\tconstraint totalMass <= 2000 when fuelMass = full;\n\t\t\tconstraint totalMass <= 1500 when fuelMass = empty;\n\t\t\tperform powerTransmission.generateTorque {\n\t\t\t\tout torque = engine.torque;\n\t\t\t}\n\t\t\tperform powerTransmission.transmitTorque {\n\t\t\t\tin torque =",
    "package 'VehiclePerformanceAnalysisSystem' {\n\tattribute def VehicleAttributes;\n\tattribute def DrivingCycle;\n\tattribute def EnginePower;\n\tattribute def Acceleration;\n\tattribute def Speed;\n\tattribute def Position;\n\tattribute def FuelEconomy;\n\tattribute def EnergyConsumptionTarget;\n\tport def VehicleAttributesPort {\n\t\tin vehicleAttributes: VehicleAttributes;\n\t}\n\tport def DrivingCycle",
    "package 'VehicleFuelEconomySimulation' {\n\tattribute def VehicleParameters;\n\tattribute def DrivingScenario;\n\tattribute def WheelPower;\n\tattribute def Acceleration;\n\tattribute def EnergyConsumption;\n\tattribute def EnginePower;\n\tattribute def FuelConsumption;\n\tattribute def FuelEconomy;\n\tport def VehicleParametersPort {\n\t\tout vehicleParameters : VehicleParameters;\n\t}\n\tport def DrivingScenarioPort {\n\t\tout drivingScenario : DrivingScenario;\n\t}\n\tport def FuelEconomyPort {\n\t\tout fuelEconomy : FuelEconomy;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport",
    "package 'EngineSelectionSystem' {\n\tattribute def EngineType;\n\tattribute def PerformanceIndicator;\n\tattribute def EvaluationFunction;\n\tattribute def EngineSelection;\n\tpart context {\n\t\tpart user {\n\t\t\tperform selectEngine.initiateSelection {\n\t\t\t\tout engineType = engineTypePort.engineType;\n\t\t\t}\n\t\t\tport engineTypePort {\n\t\t\t\tout engineType: EngineType;\n\t\t\t}\n\t\t}\n\t\tpart engineSelectionSystem {\n\t\t\tperform selectEngine.aggregatePerformanceIndicators {\n\t\t\t\tin engineType = engineTypePort.engineType;\n\t\t\t\tout performanceIndicator = performanceIndicatorPort.performanceIndicator;\n\t\t\t}\n\t\t\tport engineTypePort {\n\t\t\t\tin engineType: EngineType;\n\t\t\t}\n\t\t\tport performanceIndicatorPort {\n\t\t\t\tout performanceIndicator: PerformanceIndicator;\n\t\t\t}\n",
    "package 'VehicleQualitySystem' {\n\tattribute def WeightData;\n\tattribute def ProcessedData;\n\tattribute def EvaluationResult;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tport weightDataPort {\n\t\t\t\tout weightData: WeightData;\n\t\t\t}\n\t\t}\n\t\tpart system {\n\t\t\tport weightDataPort {\n\t\t\t\tin weightData: WeightData;\n\t\t\t}\n\t\t\tport processedDataPort {\n\t\t\t\tout processedData: ProcessedData;\n\t\t\t}\n\t\t\tport evaluationResultPort {\n\t\t\t\tout evaluationResult: EvaluationResult;\n\t\t\t}\n\t\t\tperform checkCurbWeight {\n\t\t\t\tin weightData = weightDataPort.weightData;\n\t\t\t\tout processedData = processedDataPort.processedData;\n\t\t\t\tout evaluationResult = evaluationResultPort.",
    "package 'VehicleMassVerificationSystem' {\n\tattribute def Mass;\n\tattribute def QualificationStatus;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tattribute mass: Mass;\n\t\t}\n\t\tpart weighingEquipment {\n\t\t\tperform measureMass {\n\t\t\t\tout measuredMass: Mass;\n\t\t\t}\n\t\t}\n\t\tpart massVerificationUnit {\n\t\t\tperform evaluateMass {\n\t\t\t\tin measuredMass: Mass;\n\t\t\t\tout qualificationStatus: QualificationStatus;\n\t\t\t}\n\t\t}\n\t\tinterface vehicleToWeighingEquipment connect vehicle.mass to weighingEquipment.measuredMass {",
    "package 'TransportationSystem' {\n\tattribute def User;\n\tattribute def Vehicle;\n\tattribute def Destination;\n\tattribute def GasStation;\n\tport def UserPort {\n\t\tin enterVehicle: User;\n\t\tout exitVehicle: User;\n\t}\n\tport def VehiclePort {\n\t\tin boardUser: User;\n\t\tout disembarkUser: User;\n\t}\n\tport def DestinationPort {\n\t\tin arrive: Vehicle;\n\t}\n\tport def GasStationPort {\n\t\tin refuel: Vehicle;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport userPort: UserPort;\n\t\t\tperform travel.boardVehicle {\n\t\t\t\tin enterVehicle = userPort.enterVehicle;\n\t\t\t\tout",
    "package 'TransportationSystem' {\n\tattribute def User;\n\tattribute def Driver;\n\tattribute def Passenger;\n\tattribute def Vehicle;\n\tattribute def GasStation;\n\tattribute def Location;\n\tport def UserPort {\n\t\tin enterVehicle: Vehicle;\n\t\tout exitVehicle: Vehicle;\n\t}\n\tport def DriverPort {\n\t\tin operateVehicle: Vehicle;\n\t\tin refuel: GasStation;\n\t}\n\tport def PassengerPort {\n\t\tin enterVehicle: Vehicle;\n\t\tout exitVehicle: Vehicle;\n\t}\n\tport def VehiclePort {\n\t\tout currentLocation: Location;\n\t}\n\tport def GasStationPort {\n\t\tin refuelVehicle: Vehicle;\n\t}\n\tpart context {\n\t\tpart driver {\n\t\t\tport userPort: UserPort;\n\t\t\tport driverPort: DriverPort;\n\t\t\tperform transportationProcess.",
    "package 'VehicleConfigurationSystem' {\n\tattribute def EngineType {\n\t\tenum FourCylinder, SixCylinder;\n\t}\n\tattribute def CylinderDiameter {\n\t\tenum Small, Large;\n\t}\n\tattribute def TransmissionType {\n\t\tenum Manual, Automatic;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tperform configureVehicle.selectEngineType {\n\t\t\t\tout engineType = engineTypePort.engineType;\n\t\t\t}\n\t\t\tperform configureVehicle.selectCylinderDiam",
    "package 'EngineSystem' {\n\tattribute def CylinderDiameter {\n\t\tvalue 70mm;\n\t\tvalue 100mm;\n\t}\n\tattribute def CylinderQuantity {\n\t\tvalue 4;\n\t\tvalue 6;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport configPort {\n\t\t\t\tout cylinderDiameter: CylinderDiameter;\n\t\t\t\tout cylinderQuantity: CylinderQuantity;\n\t\t\t}\n\t\t\tperform configureEngine.sendConfig {\n\t\t\t\tout cylinderDiameter = configPort.cylinderDiameter;\n\t\t\t\tout cylinderQuantity = configPort.cylinderQuantity;\n\t\t\t}\n\t\t}\n\t\tinterface userToEngineSystem connect user.configPort to engineSystem.configPort {\n",
    "package 'AutomotiveConfigurationSpace' {\n\tattribute def EngineType {\n\t\tenumeration literal FourCylinder;\n\t\tenumeration literal SixCylinder;\n\t}\n\tattribute def CylinderDiameter {\n\t\tenumeration literal SeventyMM;\n\t\tenumeration literal HundredMM;\n\t}\n\tattribute def TransmissionType {\n\t\tenumeration literal Manual;\n\t\tenumeration literal Automatic;\n\t}\n\tpart context {\n\t\tpart vehicle {\n\t\t\tattribute engineType: EngineType;\n\t\t\tattribute cylinderDiameter: CylinderD",
    "package 'System' {\n\tpart systemAssembly {\n\t\tpart computerSubsystem {\n\t\t\tperform processInformation.integrateFunctions {\n\t\t\t\tin message = messagePort.message;\n\t\t\t\tin data = dataPort.data;\n\t\t\t}\n\t\t\tport messagePort {\n\t\t\t\tin message: MessageFormat;\n\t\t\t}\n\t\t\tport dataPort {\n\t\t\t\tin data: DataFormat;\n\t\t\t}\n\t\t}\n\t\tpart storageSubsystem {\n\t\t\tperform processInformation.accessData {\n\t\t\t\tin message = messagePort.message;\n\t\t\t\tin data = dataPort.data;\n\t\t\t}\n\t\t\tport messagePort {\n\t\t\t\tin message: MessageFormat;\n\t\t\t}\n\t\t\tport dataPort {\n\t\t\t\tin data: DataFormat;\n\t\t\t",
    "package 'PowertrainSystem' {\n\tpackage 'LogicalLayer' {\n\t\tpart def TorqueGenerator {\n\t\t\tperform convertPowerToTorque {\n\t\t\t\tin power;\n\t\t\t\tout torque;\n\t\t\t}\n\t\t}\n\t}\n\tpackage 'PhysicalLayer' {\n\t\tpart def PowerUnit {\n\t\t\tperform outputPower {\n\t\t\t\tout power;\n\t\t\t}\n\t\t\tperform generateTorque {\n\t\t\t\tout torque;\n\t\t\t}\n\t\t}\n\t}\n\tpart context {\n\t\tpart torqueGenerator: LogicalLayer::TorqueGenerator;\n\t\tpart powerUnit:",
    "package 'PowerTransmissionSystem' {\n\tattribute def Power;\n\tattribute def Torque;\n\tpart context {\n\t\tpart system {\n\t\t\tperform generateTorque.providePowerAndTorque {\n\t\t\t\tout power = powerPort.power;\n\t\t\t\tout torque = torquePort.torque;\n\t\t\t}\n\t\t\tport powerPort {\n\t\t\t\tout power: Power;\n\t\t\t}\n\t\t\tport torquePort {\n\t\t\t\tout torque: Torque;\n\t\t\t}\n\t\t}\n\t\tpart torqueGenerator {\n\t\t\tperform generateTorque.generateTorque {\n\t\t\t\tout torque = torquePort",
    "package 'VehicleFeatureAnnotationSystem' {\n\tattribute def SafetyFeature;\n\tattribute def SecurityFeature;\n\tattribute def Component;\n\tpart context {\n\t\tpart interiorAssembly {\n\t\t\tpart seatBelts {\n\t\t\t\tattribute safetyFeature: SafetyFeature = 'Seat Belts';\n\t\t\t\tattribute component: Component = 'Interior';\n\t\t\t}\n\t\t\tpart driverAirbag {\n\t\t\t\tattribute safetyFeature: SafetyFeature = 'Driver Airbag';\n\t\t\t\tattribute component: Component = 'Interior';\n\t\t\t}\n\t\t\tpart alarmSystem {\n\t\t\t\tattribute securityFeature: SecurityFeature = 'Anti-",
    "package 'VehicleSimulationSystem' {\n\tattribute def Velocity;\n\tattribute def Position;\n\tattribute def Acceleration;\n\tattribute def TimeStep;\n\tattribute def PhysicalModel;\n\tport def InputPort {\n\t\tin initialVelocity: Velocity;\n\t\tin initialPosition: Position;\n\t\tin acceleration: Acceleration;\n\t\tin timeStep: TimeStep;\n\t\tin physicalModel: PhysicalModel;\n\t}\n\tport def OutputPort {\n\t\tout velocity: Velocity;\n\t\tout position: Position;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport inputPort: InputPort;\n\t\t\tperform simulationAnalysis.inputData {\n\t\t\t\tin initialVelocity = inputPort.initialVelocity;\n\t\t\t\tin initialPosition = inputPort.initialPosition;\n\t\t\t\tin acceleration = inputPort.acceleration;\n\t\t\t\tin timeStep = inputPort.time",
    "package 'CarSafety' {\n\tpackage 'SafetyFeatures' {\n\t\tpart 'SeatBelt' {\n\t\t\tattribute isMandatory: Boolean = true;\n\t\t\tattribute isSafety: Boolean = true;\n\t\t}\n\t\tpart 'Airbag' {\n\t\t\tattribute isMandatory: Boolean = false;\n\t\t\tattribute isSafety: Boolean = true;\n\t\t}\n\t\tpart 'Bumper' {\n\t\t",
    "package 'VehicleSafetyComplianceSystem' {\n\tattribute def SafetyFeature;\n\tattribute def MandatorySafetyFeature;\n\tattribute def OptionalSafetyFeature;\n\tattribute def NonMandatoryConfiguration;\n\tpart context {\n\t\tpart vehicle {\n\t\t\tpart interior {\n\t\t\t\tpart seatBelt1: SafetyFeature;\n\t\t\t\tpart seatBelt2: SafetyFeature;\n\t\t\t\tpart driverAirbag: OptionalSafetyFeature;\n\t\t\t}\n\t\t\tpart body {\n\t\t\t\tpart bumper: MandatorySafetyFeature;\n\t\t\t\tpart keylessEntrySystem: NonMandatoryConfiguration;\n\t\t",
    "package 'RiskManagementSystem' {\n\tattribute def Situation;\n\tattribute def Cause;\n\tattribute def Failure;\n\tattribute def Probability;\n\tattribute def SeverityLevel;\n\tpart context {\n\t\tpart user {\n\t\t\tperform riskAnalysis.identifySituations {\n\t\t\t\tout situation: Situation;\n\t\t\t}\n\t\t\tperform riskAnalysis.describeCauses {\n\t\t\t\tin situation: Situation;\n\t\t\t\tout cause: Cause;\n\t\t\t}\n\t\t\tperform riskAnalysis.recordProbability {\n\t\t\t\tin cause: Cause;\n\t\t\t\tout probability: Probability;\n\t\t\t}\n\t\t\tperform riskAnalysis.identifyFailures {\n\t\t\t\tin situation: Situation;\n\t\t\t\tout failure: Failure;\n\t\t\t}\n\t\t\tperform riskAnalysis.recordS",
    "package 'RiskMetadataSystem' {\n\tattribute def Scenario;\n\tattribute def Cause;\n\tattribute def Failure;\n\tattribute def Severity;\n\tattribute def Probability;\n\tattribute def RiskScenario;\n\tpart context {\n\t\tpart user {\n\t\t\tperform riskModeling.identifyScenario {\n\t\t\t\tout scenario = scenarioPort.scenario;\n\t\t\t}\n\t\t\tperform riskModeling.describeCause {\n\t\t\t\tin scenario = scenarioPort.scenario;\n\t\t\t\tout cause = causePort.cause;\n\t\t\t\tout probability = probabilityPort.probability;\n\t\t\t}\n\t\t\tperform riskModeling.associateFailure {\n\t\t\t\t",
    "package 'RiskAnalysisSystem' {\n\tattribute def BatteryLevel;\n\tattribute def Risk;\n\tattribute def FailureConsequence;\n\tattribute def SeverityLevel;\n\tpart context {\n\t\tpart equipment {\n\t\t\tport batteryLevelPort {\n\t\t\t\tout batteryLevel : BatteryLevel;\n\t\t\t}\n\t\t}\n\t\tpart riskAnalysisSystem {\n\t\t\tport batteryLevelPort {\n\t\t\t\tin batteryLevel : BatteryLevel;\n\t\t\t}\n\t\t\tport riskPort {\n\t\t\t\tout",
    "package 'System' {\n\tpart context {\n\t\tpart subsystem1 {\n\t\t\t// Define functions and capabilities\n\t\t}\n\t\tpart subsystem2 {\n\t\t\t// Define functions and capabilities\n\t\t}\n\t\t// Define interfaces between subsystems\n\t}\n\t// Define interfaces with external systems or users\n}\n\npackage 'Subsystem1' {\n\tpart context {\n\t\tpart component1 {\n\t\t\t// Define functions and capabilities\n\t\t}\n\t\tpart component2 {\n\t\t\t// Define functions and capabilities\n\t\t}\n\t\t// Define interfaces between components\n\t}\n\t// Define interfaces with subsystem2 and external systems or users\n}\n\npackage 'Subsystem2' {\n\tpart context {\n\t\tpart component3 {\n\t\t\t// Define functions and capabilities\n\t\t}\n",
    "package 'AutomotiveSystem' {\n\tattribute def SafetyAttribute;\n\tattribute def ComponentType;\n\tattribute def MandatoryStatus;\n\tpart context {\n\t\tpart rootComponent {\n\t\t\tport safetyComponentPort: SafetyComponentPort;\n\t\t\tport nonSafetyComponentPort: NonSafetyComponentPort",
    "package 'AutomotiveDomain' {\n\tpart def Car {\n\t\talias '汽车 (Car)';\n\t\tcomment 'Core component in the automotive domain';\n\t}\n\tattribute def Torque {\n\t\tcomment 'Physical quantity representing rotational force';\n\t}\n\tpart carInstance: Car {\n\t\tattribute torque: Torque;\n\t}\n}",
    "package 'AutomobileDocumentManagementSystem' {\n\tattribute def Information;\n\tattribute def TorqueValue;\n\tattribute def Document;\n\tclass def Automobile {\n\t\tattribute info: Information;\n\t\tattribute torqueValue: TorqueValue;\n\t\tattribute document: Document;\n\t}\n\talias Car for Automobile;\n\tpart context {\n\t\tpart user {\n\t\t\tperform manageAutomobile.enterInformation {\n\t\t\t\tin info = automobile.info;\n\t\t\t}\n\t\t\tperform manageAutomobile.queryInformation {\n\t\t\t\tin info = automobile.info;\n\t\t\t}\n",
    "package 'AutomobileSystem' {\n\tattribute def TorqueValue;\n\talias Torque for TorqueValue;\n\tclass Car {\n\t\tattribute torqueValue: TorqueValue;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tperform manageAutomobiles {\n\t\t\t\tin car: Car;\n\t\t\t\tin torque: Torque;\n\t\t\t}\n\t\t}\n\t\tpart automobileSystem {\n\t\t\tperform importData {\n\t\t\t\tin data: ScalarPhysicalQuantity;\n\t\t\t}\n\t\t\tperform manageAutomobiles {\n\t\t\t\tin car: Car;\n\t\t\t\tin torque: Torque;\n\t\t\t}\n\t\t}\n\t}\n\taction manageAutomobiles {\n\t\tin car: Car;\n\t\tin torque: Torque;\n\t}\n\taction importData",
    "package 'VehicleSystem' {\n\tclass def Vehicle {\n\t\tattribute def size: Size;\n\t\tattribute def engine: Engine;\n\t}\n\tclass def Engine {\n\t\tattribute def cylinders: Cylinder[4..6];\n\t}\n\tclass def Cylinder {\n\t}\n\tclass def Size {\n\t\tenumeration literal small;\n\t\tenumeration literal large;\n\t}\n\tblock def VehicleConfiguration {\n\t\tpart vehicle: Vehicle {\n\t\t\tperform configureEngine {\n\t\t\t\tin size = vehicle.size;\n\t\t\t\tout engine = vehicle.engine;\n\t\t\t}\n\t\t}\n\t\taction configureEngine {\n\t\t\tin size: Size;\n\t\t\tout engine: Engine;\n\t\t\tparameter cylinderCount: Integer;\n\t\t\tconstraint cylinderCount = if size = Size::small then 4 else 6 endif;\n\t\t\tperform createEngine {\n\t\t\t\tin cylinder",
    "package 'FuelManagementSystem' {\n\tattribute def Fuel;\n\tattribute def Temperature;\n\tport def FuelSupplyPort {\n\t\tout fuel: Fuel;\n\t}\n\tport def FuelReturnPort {\n\t\tin fuel: Fuel;\n\t}\n\tport def TemperatureSensorPort {\n\t\tout temperature: Temperature;\n\t}\n\tpart context {\n\t\tpart FuelTank {\n\t\t\tport fuelSupplyPort: FuelSupplyPort;\n\t\t\tperform manageFuelFlow.supplyFuel {\n\t\t\t\tout fuel = fuelSupplyPort.fuel;\n\t\t\t}\n\t\t}\n\t\tinterface fuelSupplyInterface connect FuelTank.fuelSupplyPort to Engine.fuelSupplyPort {\n\t\t\tref flow references manageFuelFlow.fuelSupplyFlow\n\t\t\t\tfrom source.fuel to target.fuel;\n\t\t}\n\t\tpart Engine {\n\t\t\tport fuelSupplyPort: ~FuelSupplyPort;\n\t\t\tperform manageFuelFlow",
    "package 'VehicleStructuralArchitecture' {\n\tattribute def Mass;\n\tpart type Vehicle {\n\t\tattribute mass: Mass;\n\t\tpart frontAxleAssembly: FrontAxleAssembly;\n\t\tpart rearAxleAssembly: RearAxleAssembly;\n\t}\n\tpart type AxleAssembly {\n\t\tpart axleComponents[*];\n\t\tpart wheels[2];\n\t}\n\tpart type FrontAxleAssembly extends AxleAssembly {\n\t\tattribute steeringAngle: Angle;\n\t}\n\tpart type RearAxleAssembly extends AxleAssembly"
]