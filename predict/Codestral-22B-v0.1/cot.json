[
    "block Vehicle {\n  part engine : Engine;\n  part driver : Driver;\n  attribute mass : Real;\n  attribute status : VehicleStatus;\n}\n\nblock Engine {\n  // Define engine attributes and behaviors here\n}\n\nblock Driver {\n  // Define driver attributes and behaviors here\n}\n\nblock VehicleStatus {\n  attribute gearSetting : GearSetting;\n  attribute acceleratorPedalPosition : Real;\n}\n\nenum GearSetting {\n  PARK, REVERSE, NEUTRAL, DRIVE, LOW, HIGH\n}\n```",
    "package VehicleModeling {\n  block Vehicle {\n    part driver: Personnel[1];\n  }\n  block ManuallyOperatedVehicle extends Vehicle {\n  }\n  block PoweredVehicle extends Vehicle {\n    part engine: Engine[1];\n  }\n  block ManuallyOperatedPoweredVehicle extends ManuallyOperatedVehicle, PoweredVehicle {\n  }\n  block Personnel {\n  }\n  block Engine {\n  }\n}\n```",
    "package VehicleStructure {\n  block VehicleComponent {\n  }\n  block Engine extends VehicleComponent {\n  }\n  block Transmission extends VehicleComponent {\n  }\n  block Wheel extends VehicleComponent {\n  }\n  block Vehicle {\n    part engine : Engine [1..1];\n    part transmission : Transmission [1..1];\n    part wheels : Wheel [4..4];\n  }\n}\nThe SysML v2 textual code defines a package `VehicleStructure` that contains the necessary blocks to represent the vehicle structure. The `VehicleComponent` block is the superclass for all vehicle components. The `Engine`, `Transmission`, and `Wheel` blocks are subclasses of `VehicleComponent`, representing the specific components of a vehicle. The `Vehicle` block represents the overall vehicle structure, with parts for the engine, transmission, and wheels. The multiplicity constraints are used to ensure that a vehicle must have exactly one engine, one transmission, and four wheels. This model supports extensibility for both vehicle and component types, allowing for different vehicle configurations and component varieties.",
    "block Vehicle {\n  part Engine;\n}\n\nblock SmallVehicle extends Vehicle {\n  part SmallEngine as Engine;\n}\n\nblock LargeVehicle extends Vehicle {\n  part LargeEngine as Engine;\n}\n\nblock Engine {\n  property numberOfCylinders;\n  subsystem CylinderSystem;\n}\n\nblock SmallEngine extends Engine {\n  numberOfCylinders = 4;\n}\n\nblock LargeEngine extends Engine {\n  numberOfCylinders = 6;\n}\n\nblock CylinderSystem {\n  property numberOfCylinders;\n}\nThe SysML v2 textual code defines two types of vehicles, `SmallVehicle` and `LargeVehicle`, both of which are subtypes of the `Vehicle` block. Each vehicle has an `Engine` part. The `SmallVehicle` is equipped with a `SmallEngine`, and the `LargeVehicle` is equipped with a `LargeEngine`. Both `SmallEngine` and `LargeEngine` are subtypes of the `Engine` block. The `Engine` block has a property",
    "block TrafficSignalSystem {\n  part trafficSignal: TrafficSignal;\n}\n\nblock TrafficSignal {\n  attribute color: Color;\n}\n\nenum Color {\n  green,\n  yellow,\n  red\n}\n\nblock AlwaysGreenTrafficSignal extends TrafficSignal {\n  constraint color = Color::green;\n}\nExplanation:\nThe input requirement describes a traffic signal system that includes a traffic signal component with three possible color states: green, yellow, and red. The system also defines a specific traffic signal component that is always in the green state. The SysML model defines a TrafficSignalSystem block that contains a TrafficSignal part. The TrafficSignal block has a color attribute of type Color, which is an enumeration with three possible values: green, yellow, and red. The AlwaysGreenTrafficSignal block extends the TrafficSignal block and adds a constraint that the color attribute must always be green.",
    "package InformationClassificationManagement {\n  enumeration InformationLevel {\n    uncl,\n    conf,\n    secr\n  }\n  enumeration GradeLevel {\n    A,\n    B,\n    C,\n    D,\n    F\n  }\n  class Information {\n    informationLevel : InformationLevel = uncl\n    gradeLevel : GradeLevel = F\n  }\n}\n```",
    "block VehicleSystem {\n  part SmallVehicle {\n    part Engine {\n      part Cylinder[4]\n    }\n  }\n  part LargeVehicle {\n    part Engine {\n      part Cylinder[6]\n    }\n  }\n}\nThe SysML v2 textual code provided defines a system called \"VehicleSystem\" that consists of two types of vehicles: \"SmallVehicle\" and \"LargeVehicle\". Each vehicle has an \"Engine\" part, and the number of \"Cylinder\" parts within each engine is specified using multiplicity. The engine of a \"SmallVehicle\" contains 4 cylinders, while the engine of a \"LargeVehicle\" contains 6 cylinders. This design allows for engine configurations with 4 to 6 cylinders to meet the performance requirements of different vehicle types.",
    "block Vehicle {\n  part fuelTank;\n  part driver;\n  quality Attribute qualityAttributes;\n}\n\nblock FuelTank {\n  attribute type;\n}\n\nblock Driver {\n  attribute name;\n  attribute licenseNumber;\n}\n\nblock Fuel {\n  attribute type;\n  attribute price;\n}\n\nblock Personnel {\n  attribute name;\n  attribute role;\n}\n\nassociation Vehicle_FuelTank {\n  Vehicle.fuelTank <-> FuelTank;\n}\n\nassociation Vehicle_Driver {\n  Vehicle.driver <-> Driver;\n}\n\nassociation FuelTank_Fuel {\n  FuelTank.type <-> Fuel.type;\n}\n\nassociation Personnel_Vehicle {\n  Personnel <-> Vehicle;\n}\nThe SysML v2 textual code provided defines a system for vehicle modeling. It includes blocks for Vehicle, FuelTank, Driver, Fuel, and Personnel. The Vehicle block has parts for fuelTank and driver, and",
    "block AutomobileWheelAssembly {\n  part: WheelBearingUnit\n  part: Tire\n  part: Bead[2]\n  part: Hub\n  part: Rim[2]\n  part: BoltMountingHole[*]\n  part: ThreadedHole[*]\n  part: Bolt[*]\n\n  Tire.seal()\n  Tire.fasten(Bead[0], Rim[0])\n  Tire.fasten(Bead[1], Rim[1])\n\n  BoltMountingHole.connect(ThreadedHole, Bolt)\n\n  Hub.connect(BoltMountingHole)\n  Tire.connect(Rim)\n}\n```",
    "block FuelManagementSystem {\n  part FuelTankAssembly {\n    port FuelSupplyPort;\n    port FuelReturnPort;\n    flow FuelFlow {\n      source FuelSupplyPort;\n      target Engine.FuelIntakePort;\n    };\n    flow ExcessFuelReturnFlow {\n      source Engine.FuelReturnPort;\n      target FuelReturnPort;\n    };\n    flow TemperatureDataFlow {\n      item TemperatureData;\n      source FuelTankAssembly;\n      target UserInterface;\n    };\n  };\n  part Engine {\n    port FuelIntakePort;\n    port FuelReturnPort;\n    flow FuelSupplyFlow {\n      source FuelTankAssembly.FuelSupplyPort;\n      target FuelIntakePort;\n    };\n    flow FuelReturnFlow {\n      source FuelIntakePort;\n      target FuelReturnPort;\n    };\n    flow TemperatureDataFlow {\n      item TemperatureData;\n      source Engine;\n      target UserInterface;\n    };\n  };\n",
    "package VehicleModeling {\n  block Vehicle {\n    attribute mass : Real = 1750;\n    part frontAxle : FrontAxle;\n    part rearAxle : RearAxle;\n  }\n\n  block FrontAxle {\n    part tire1 : Tire;\n    part tire2 : Tire;\n  }\n\n  block RearAxle {\n    part tire1 : Tire;\n    part tire2 : Tire;\n  }\n\n  block Tire {\n  }\n\n  block DedicatedFrontAxle extends FrontAxle {\n    attribute steeringAngle : Real;\n  }\n\n  block VehicleConfiguration {\n    attribute name : String;\n    part vehicle : Vehicle;\n  }\n\n  block VehicleConfiguration_vehicle1_c1 extends VehicleConfiguration {\n    attribute name = \"vehicle1_c1\";\n    part vehicle : Vehicle {\n      attribute mass = 2000;\n      part frontAxle : DedicatedFrontAxle;\n    }\n",
    "package CouplingSystem {\n  part Vehicle {\n    port CouplingPort {\n      required {\n        CouplingBall : CouplingBall\n      }\n    }\n  }\n  part Trailer {\n    port CouplingPort {\n      required {\n        CouplingBall : CouplingBall\n      }\n    }\n  }\n  part Hitch {\n    partType CouplingBall\n    port VehiclePort {\n      provided {\n        CouplingBall : CouplingBall\n      }\n    }\n    port TrailerPort {\n      provided {\n        CouplingBall : CouplingBall\n      }\n    }\n  }\n  connector CouplingConnector {\n    end VehicleEnd {\n      role Vehicle::CouplingPort\n    }\n    end HitchEnd {\n      role Hitch::VehiclePort\n    }\n  }\n  connector CouplingConnector {\n    end TrailerEnd {\n      role Trailer::CouplingPort\n    }\n    end HitchEnd {\n      role Hitch::TrailerPort\n    }\n  }",
    "block VehiclePowerTransmissionSystem {\n  part Engine {\n    port FuelCommand in\n    port Power out\n    port Clutch out\n  }\n  part Transmission {\n    port Power in\n    port Clutch in\n    port Power out\n  }\n  part Clutch {\n    port Power in\n    port Clutch in\n    port Power out\n  }\n  part Driveshaft {\n    port Power in\n    port Power out\n  }\n  part RearAxleAssembly {\n    part Differential {\n      port Power in\n      port Power out\n    }\n    part LeftHalfShaft {\n      port Power in\n      port Power out\n    }\n    part RightHalfShaft {\n      port Power in\n      port Power out\n    }\n    part LeftWheel {\n      port Power in\n      port Road out\n    }\n    part RightWheel {\n      port Power in\n      port Road out\n    }\n  }\n  Engine.Power -> Transmission.Power\n  Engine.Clutch -> Clutch.Clutch\n  Transmission.Power ->",
    "package System {\n  subsystem b11 {\n    component c1 {\n      port pb {\n        interface pe;\n      }\n    }\n    component c2 {\n      port pc;\n    }\n    interface pe;\n  }\n  subsystem b12 {\n    component c3 {\n      port pd {\n        interface pf;\n      }\n    }\n    component c4;\n    interface pf;\n  }\n  interface pe;\n  interface pf;\n  subsystem b21 {\n    component c1;\n    component c2;\n    component c3;\n    component c4;\n  }\n  subsystem b22 {\n    component c1;\n    component c2;\n    component c3;\n    component c4;\n  }\n  connection c1.pc to c2.pc;\n  connection c3.pd to pf;\n  connection c1.pb to pe;\n  connection pe to b12.pf;\n}\n```",
    "block AutomotivePowertrain {\n  part FuelCommandInput;\n  part EngineStartStopControl;\n  part PowerTransmission;\n  part PowerDistribution;\n\n  flow FuelCommand {\n    source FuelCommandInput;\n    target EngineStartStopControl;\n  };\n\n  flow EngineTorque {\n    source EngineStartStopControl;\n    target PowerTransmission;\n  };\n\n  flow AmplifiedTorque {\n    source PowerTransmission;\n    target PowerDistribution;\n  };\n\n  flow DrivingForceLeftWheel {\n    source PowerDistribution;\n    target LeftWheel;\n  };\n\n  flow DrivingForceRightWheel {\n    source PowerDistribution;\n    target RightWheel;\n  };\n\n  flow EngineShutdownCommand {\n    source User;\n    target EngineStartStopControl;\n  };\n}\nThe SysML v2 textual code defines a block named `AutomotivePowertrain` that represents the system. It contains parts such as `FuelCommandInput`, `EngineStartStopControl`, `PowerTransmission`, and",
    "block AutomotivePowertrainControlSystem {\n  part EngineControlSystem;\n  part FuelControlSystem;\n  part TorqueAmplificationSystem;\n  part PowerTransmissionSystem;\n  part StallDetectionSystem;\n  part UserInterface;\n\n  EngineControlSystem.startCommand(fuelControlCommand);\n  EngineControlSystem.generateTorque(predefinedOrder);\n  TorqueAmplificationSystem.amplifyTorque(EngineControlSystem.torque);\n  PowerTransmissionSystem.transmitPower(TorqueAmplificationSystem.amplifiedTorque);\n  PowerTransmissionSystem.distributePower(PowerTransmissionSystem.transmittedPower);\n  PowerTransmissionSystem.deliverPowerToDriveWheels(PowerTransmissionSystem.distributedPower);\n  StallDetectionSystem.detectStallSignal();\n  if (StallDetectionSystem.stallSignalDetected) {\n    EngineControlSystem.haltOperation();\n    TorqueAmplificationSystem.haltOperation();\n    PowerTransmissionSystem.haltOperation();\n  }\n  UserInterface.displayPowerResponse();\n ",
    "block VehiclePowertrainSystem {\n  part Engine;\n  part Transmission;\n  part Wheels;\n  flow FuelCommand;\n  flow EngineStartSignal;\n  flow EngineShutdownSignal;\n  flow EngineOutputTorque;\n  flow AmplifiedTorque;\n  flow DistributedTorque;\n\n  FuelCommand -> Engine;\n  EngineStartSignal -> Engine;\n  EngineShutdownSignal -> Engine;\n  Engine -> EngineOutputTorque;\n  EngineOutputTorque -> Transmission;\n  Transmission -> AmplifiedTorque;\n  AmplifiedTorque -> Wheels;\n  Wheels -> DistributedTorque;\n\n  requirement \"Power demand response\" {\n    FuelCommand -> EngineOutputTorque;\n  }\n\n  requirement \"Torque transmission\" {\n    EngineOutputTorque -> AmplifiedTorque;\n    AmplifiedTorque -> DistributedTorque;\n  }\n\n  requirement \"Power distribution\" {\n    DistributedTorque -> Wheels;\n  }\n\n  requirement \"Efficient operation\" {\n    EngineStartSignal -> EngineOutput",
    "block VehicleTrailerConnectionSystem {\n  part Vehicle {\n    frame VehicleFrame;\n    hitchball HitchBall;\n  }\n  part Trailer {\n    frame TrailerFrame;\n    trailerCoupler TrailerCoupler;\n  }\n  connection HitchingMechanism {\n    end Vehicle.HitchBall;\n    end Trailer.TrailerCoupler;\n  }\n  requirement UserSafety {\n    description: \"The system shall ensure safe and reliable connection between the vehicle and the trailer.\";\n  }\n  requirement FlexibleCombination {\n    description: \"The system shall allow for flexible combination and separation of the vehicle and the trailer.\";\n  }\n  requirement ScenarioAdaptability {\n    description: \"The system shall meet user requirements for vehicle and trailer power coupling functions in various scenarios.\";\n  }\n}\n```",
    "block VehicleTrailerConnectionSystem {\n  part Vehicle {\n    part Chassis {\n      port TowBall\n    }\n  }\n  part Trailer {\n    part TrailerFrame {\n      port Coupler\n    }\n  }\n  connection Connection {\n    end Vehicle.Chassis.TowBall\n    end Trailer.TrailerFrame.Coupler\n  }\n}\nThis SysML model defines a system called `VehicleTrailerConnectionSystem` that manages the connection status between a vehicle and a trailer. The vehicle is composed of a `Chassis` with a `TowBall` port, and the trailer is composed of a `TrailerFrame` with a `Coupler` port. The `Connection` between the vehicle and the trailer is established through the `TowBall` port on the vehicle's chassis and the `Coupler` port on the trailer's frame. This model allows for the convenient connection and disconnection of the trailer via the system, ensuring safety and reliability in vehicle-trailer combinations.",
    "block VehicleSystem {\n  part Chassis {\n    feature TowBallDevice\n  }\n  part Trailer {\n    part TrailerChassis\n    part CouplerMechanism {\n      feature EngageDisengageFunction : Function {\n        input TowBall\n        output Engaged : Boolean\n      }\n    }\n  }\n  feature ConnectDisconnectFunction : Function {\n    input Trailer\n    output Connected : Boolean\n  }\n}\nThis SysML model represents the VehicleSystem, which consists of a Chassis with a TowBallDevice and a Trailer with a TrailerChassis and a CouplerMechanism. The CouplerMechanism has an EngageDisengageFunction that takes the TowBall as input and outputs a Boolean value indicating whether it is engaged or not. The VehicleSystem also has a ConnectDisconnectFunction that takes the Trailer as input and outputs a Boolean value indicating whether it is connected or not.",
    "block MotorVehicleFuelSystem {\n  part FuelTankAssembly {\n    port FuelSupplyPort {\n      flow FuelSupplyFlow {\n        direction out;\n      }\n    }\n    port FuelReturnPort {\n      flow FuelReturnFlow {\n        direction in;\n      }\n    }\n  }\n  part Engine {\n    port FuelSupplyPort {\n      flow FuelSupplyFlow {\n        direction in;\n      }\n    }\n    port FuelReturnPort {\n      flow FuelReturnFlow {\n        direction out;\n      }\n    }\n  }\n  flow FuelSupplyFlow {\n    source FuelTankAssembly::FuelSupplyPort;\n    target Engine::FuelSupplyPort;\n    parameter Temperature;\n  }\n  flow FuelReturnFlow {\n    source Engine::FuelReturnPort;\n    target FuelTankAssembly::FuelReturnPort;\n  }\n  requirement StabilityRequirement {\n    description \"The fuel system should maintain stability during vehicle operation.\";\n  }\n  requirement ReliabilityRequ",
    "context VehicleFuelDeliverySystem {\n  part StorageTank {\n    property maxCapacity;\n    property currentLevel;\n  }\n  part FuelPump {\n    property flowRate;\n  }\n  part Vehicle {\n    part FuelTank {\n      property maxCapacity;\n      property currentLevel;\n    }\n  }\n  flow FuelFlow {\n    source StorageTank;\n    target FuelPump;\n    target Vehicle.FuelTank;\n  }\n}\n```",
    "block VehicleAssemblyProcess {\n  part VehicleWithoutGearboxAndEngine;\n  part VehicleWithGearbox;\n  part FullyAssembledVehicle;\n  flow InstallGearbox: VehicleWithoutGearboxAndEngine -> VehicleWithGearbox;\n  flow InstallEngine: VehicleWithGearbox -> FullyAssembledVehicle;\n  requirement Sequence: first InstallGearbox then InstallEngine;\n  requirement FunctionalGearbox: FullyAssembledVehicle.gearbox.isFunctional;\n  requirement FunctionalEngine: FullyAssembledVehicle.engine.isFunctional;\n}\n```",
    "block VehicleA {\n  part VehicleController\n  part System\n\n  System : block {\n    state Off\n    state Starting\n    state Running\n    state HealthManagement\n    state Maintenance\n    state Degraded\n\n    transition Off -> Starting :\n      trigger startSignal\n      guard brakePressed\n\n    transition Starting -> Running :\n      trigger vehicleOnSignal\n\n    transition Running -> Off :\n      effect applyParkingBrake\n      effect powerOff\n\n    transition Running -> Degraded :\n      guard temperature > safetyThreshold\n      effect sendOverTemperatureSignal\n\n    transition Degraded -> Maintenance :\n      trigger restoreToNormalSignal\n\n    transition Maintenance -> Normal :\n      trigger restoreToNormalSignal\n  }\n\n  VehicleController : block {\n    state Off\n    state Running\n\n    transition Off -> Running :\n      trigger startSignal\n\n    transition Running -> Off :\n      trigger shutdownSignal\n  }\n}\n```",
    "block VehicleBehaviorModelingSystem {\n  part Vehicle {\n    attribute status {\n      value normal\n      value shutdown\n      value degraded\n    }\n    attribute brakePedalStatus {\n      value pressed\n      value released\n    }\n    attribute startSignal {\n      value received\n      value notReceived\n    }\n    attribute temperature {\n      type Real\n    }\n    attribute temperatureThreshold {\n      type Real\n    }\n    operation startUp {\n      precondition:\n        self.status = shutdown and\n        self.brakePedalStatus = pressed and\n        self.startSignal = received\n      postcondition:\n        self.status = normal\n    }\n    operation selfInspection {\n      precondition:\n        self.status = normal\n      postcondition:\n        // No specific postcondition mentioned\n    }\n    operation powerSupply {\n      precondition:\n        self.status = normal\n      postcondition:\n        // No specific postcondition mentioned\n    }\n    operation overheatingDetection {\n      precondition:\n        self.temperature > self.temperature",
    "block VehicleSimulationSystem {\n  part Vehicle {\n    attribute mass : Real;\n    attribute position : Real[2];\n    attribute velocity : Real[2];\n    attribute acceleration : Real[2];\n  }\n  part Road {\n    attribute slope : Real;\n    attribute frictionCoefficient : Real;\n  }\n  flow simulate : !Vehicle -> !Road;\n  flow recordSnapshot : !Vehicle -> !Snapshot;\n  part Snapshot {\n    attribute time : Real;\n    attribute vehicleState : VehicleState;\n  }\n  enum VehicleState {\n    on,\n    driving,\n    off\n  }\n}\n```",
    "package AutomotiveProductConfiguration {\n  part type Automobile;\n  part type SubsystemA {\n    part type SubsystemA_Config1 {\n      part type Component1;\n      part type Component2;\n    };\n    part type SubsystemA_Config2 {\n      part type Component2;\n      part type Component3;\n    };\n  };\n  part type SubsystemB {\n    part type SubsystemB_Config1 {\n      part type Component4;\n      part type Component5;\n    };\n    part type SubsystemB_Config2 {\n      part type Component5;\n      part type Component6;\n    };\n  };\n  part type ConfigurationA {\n    part type SubsystemA_Config1;\n    part type SubsystemB_Config1;\n  };\n  part type ConfigurationB {\n    part type SubsystemA_Config2;\n    part type SubsystemB_Config1;\n  };\n  constraint Constraint1 {\n    if (selected(SubsystemA_Config2)) then\n      selected(SubsystemB_Config2)\n    else\n      not selected(Sub",
    "package VehicleConfigurationSystem {\n  part type Part1;\n  part type Part2;\n  part type Part3 {\n    port p1;\n  };\n  part type Part4;\n  part type Part5 {\n    port p2;\n    behavioral variant Variant1;\n    behavioral variant Variant2;\n  };\n  part type Part6;\n\n  subsystem type SubsystemA {\n    part: Part1[1..*];\n    part: Part2[1..*];\n    part: Part3[1..*];\n    part: Part4[1..*];\n    port: p1;\n    port: p2;\n  };\n\n  subsystem type SubsystemB {\n    part: Part5[1..*];\n    part: Part6[1..*];\n    port: p1;\n    port: p2;\n  };\n\n  configuration type VehicleConfigA {\n    subsystem: SubsystemA[1];\n    subsystem: SubsystemB[1];\n  };\n\n  configuration type VehicleConfigB {\n    subsystem: Sub",
    "block VehicleConfigurationSystem {\n  part EngineConfiguration {\n    property[1] engineType: EngineType {\n      value: 4-cylinder, 6-cylinder\n    }\n  }\n  part TransmissionConfiguration {\n    property[1] transmissionType: TransmissionType {\n      value: automatic, manual\n    }\n  }\n  part WheelConfiguration {\n    property[1] wheelType: WheelType {\n      value: narrow-rim, wide-rim\n    }\n  }\n  constraint CompatibilityConstraint {\n    specification: engineType.compatibleWith(transmissionType) and engineType.compatibleWith(wheelType) and transmissionType.compatibleWith(wheelType)\n  }\n  constraint PerformanceConstraint {\n    specification: if highPerformance then engineType = 6-cylinder and transmissionType = automatic and wheelType = wide-rim else engineType = 4-cylinder and transmissionType = manual and wheelType = narrow-rim\n  }\n  part VehicleModelSelection {\n    property[0..*] selectedModels: VehicleModel\n  }\n}",
    "context AutomobileSystem {\n  part Vehicle {\n    attribute mass: Integer[2000..2500];\n    attribute fuelStatus: FuelStatus;\n    attribute powertrain: Powertrain;\n    attribute reliability: Reliability;\n  }\n\n  part Engine {\n    attribute torque: Integer;\n    interface driveInterface: DriveInterface;\n  }\n\n  part Transmission {\n    interface driveInterface: DriveInterface;\n  }\n\n  interface DriveInterface {\n    operation transferPower();\n  }\n\n  enum FuelStatus {\n    full,\n    empty\n  }\n\n  class Powertrain {\n    attribute powerDelivery: Boolean;\n  }\n\n  class Reliability {\n    attribute performance: Integer;\n    attribute durability: Integer;\n  }\n}\n```",
    "block VehicleMassComplianceVerificationSystem {\n  part Vehicle\n  part WeighingEquipment\n  part TestOperator\n  part MaxPermissibleMass\n\n  flow MeasureMass {\n    source TestOperator\n    target Vehicle\n    target WeighingEquipment\n    parameter MeasuredMass\n  }\n\n  flow CompareMass {\n    source MeasureMass\n    target MaxPermissibleMass\n    parameter ComplianceResult\n  }\n\n  flow DetermineCompliance {\n    source CompareMass\n    target Vehicle\n    parameter ComplianceStatus\n  }\n\n  flow SequentialTesting {\n    source Vehicle\n    target VehicleMassComplianceVerificationSystem\n    parameter TestResult\n  }\n}\nThe SysML v2 textual code provided defines a block diagram for the Vehicle Mass Compliance Verification System. The system consists of four parts: Vehicle, WeighingEquipment, TestOperator, and MaxPermissibleMass. There are five flows defined in the system: MeasureMass, CompareMass, DetermineCompl",
    "block WaterSupplyNetwork {\n  part SpigotBank {\n    interface Spigot[hot, cold]\n  }\n  part Faucet[*] {\n    part FaucetInlet[hot, cold]\n    port hot : Spigot[hot]\n    port cold : Spigot[cold]\n  }\n}\nThis SysML model defines a `WaterSupplyNetwork` block that contains a `SpigotBank` part with two interfaces, `Spigot[hot]` and `Spigot[cold]`. The `WaterSupplyNetwork` also contains multiple `Faucet` parts, each with two `FaucetInlet` parts for hot and cold water. Each `Faucet` part is connected to the corresponding interfaces of the `SpigotBank` part through `hot` and `cold` ports. This model accurately represents the functional and physical structure of the water supply network as described in the input requirement.",
    "block VehicleQualityAnalysisSystem {\n  part Engine\n  part Transmission\n  part FrontAxleAssembly\n  part RearAxleAssembly\n\n  requirement QualityDataInput :\n    description = \"Users can input quality data for each component.\"\n\n  requirement TotalMassCalculation :\n    description = \"The system will automatically aggregate and calculate the total mass of the vehicle.\"\n\n  requirement QualityAnalysisRequirementsDefinition :\n    description = \"The system supports the definition of quality analysis requirements.\"\n\n  requirement AnalysisUseCaseFormulation :\n    description = \"The system supports the formulation of analysis use cases.\"\n\n  requirement AutomaticAnalysisTaskGeneration :\n    description = \"Based on set analysis objectives, it can automatically generate analysis tasks and plans.\"\n\n  requirement ComprehensiveEvaluation :\n    description = \"The system achieves comprehensive evaluation for vehicle quality.\"\n\n  requirement RequirementsTracking :\n    description = \"The system provides requirements tracking for vehicle quality.\"\n\n  requirement ScientificSupport :\n    description = \"The system provides scientific support for vehicle design and performance optimization.\"\n\n  requirement DevelopmentEfficiencyImprovement",
    "block VehiclePowertrainConfigurationSystem {\n  part engineConfigurationSelection : EngineConfigurationSelection;\n  part engineModeling : EngineModeling;\n  part tradeOffAnalysis : TradeOffAnalysis;\n  part recommendation : Recommendation;\n  part explanation : Explanation;\n}\n\nblock EngineConfigurationSelection {\n  attribute engineTypes : EngineType[*];\n  attribute performanceIndicators : PerformanceIndicator[*];\n  operation selectEngineConfiguration();\n}\n\nblock EngineModeling {\n  attribute engineStructures : EngineStructure[*];\n  attribute components : Component[*];\n  operation assembleComponents();\n}\n\nblock TradeOffAnalysis {\n  attribute evaluationModel : EvaluationModel;\n  operation assessPerformanceData();\n}\n\nblock Recommendation {\n  attribute optimalEngineSolution : EngineConfiguration;\n  operation recommendOptimalSolution();\n}\n\nblock Explanation {\n  attribute rationality : Rationality;\n  operation viewExplanation();\n}\n\nenum EngineType {\n  fourCylinderEngine,\n  sixCylinderEngine,\n  // ...\n}\n",
    "block VehicleFuelEconomySystem {\n  requirement UrbanDrivingRequirement {\n    description = \"The vehicle's range per gallon must not be less than 25 miles under urban driving conditions.\"\n    derivedFrom = RegulatoryRequirements\n  }\n  requirement HighwayDrivingRequirement {\n    description = \"The vehicle's range per gallon must not be less than 30 miles under highway driving conditions.\"\n    derivedFrom = RegulatoryRequirements\n  }\n  requirement FuelEconomyMeasurementRequirement {\n    description = \"Fuel economy is measured in 'miles per gallon,' based on the US customary gallon (231 cubic inches).\"\n    derivedFrom = PerformanceRequirements\n  }\n  requirement AdditionalLoadRequirement {\n    description = \"Fuel economy tests are conducted with the vehicle assuming an additional load of 1,000 pounds.\"\n    derivedFrom = TestingRequirements\n  }\n  requirement DrivingScenarioRequirement {\n    description = \"Fuel economy tests are conducted under standard urban and highway driving scenarios respectively.\"\n    derivedFrom = TestingRequirements\n ",
    "block VehicleLongitudinalDynamicSimulation {\n  parameter VehicleMass : Real;\n  parameter InitialPosition : Real;\n  parameter InitialVelocity : Real;\n  parameter PowerOutputData : Sequence[Real];\n  input TimeStep : Real;\n  output AccelerationSequence : Sequence[Real];\n  output VelocitySequence : Sequence[Real];\n  output DisplacementSequence : Sequence[Real];\n}\n\nThe system is a block named VehicleLongitudinalDynamicSimulation. It has four parameters: VehicleMass, InitialPosition, InitialVelocity, and PowerOutputData. It has one input: TimeStep. It has three outputs: AccelerationSequence, VelocitySequence, and DisplacementSequence. The parameters and inputs are all of type Real. The outputs are all of type Sequence[Real].",
    "block Vehicle {\n  property mass = 2500 kg;\n  part frontAxleAssembly {\n    property mass = 150 kg;\n    part frontWheel[2];\n    part frontAxle {\n      property steeringAngle;\n    };\n  };\n  part rearAxleAssembly {\n    property mass = 250 kg;\n    part rearWheel[2];\n    part rearAxle;\n  };\n};\n```",
    "block VehicleSafetySecuritySystem {\n  part SeatBelts : MandatorySafetyFeature;\n  part Bumpers : MandatorySafetyFeature;\n  part Airbags : OptionalSafetyFeature;\n  part AntiLockBrakingSystems : OptionalSafetyFeature;\n  part Alarms : SecurityDevice;\n  part KeylessEntrySystems : SecurityDevice;\n\n  filterBy(featureType : FeatureType) : Component[*];\n  visualize(components : Component[*], visualizationType : VisualizationType) : Visualization;\n}\n\nblock MandatorySafetyFeature extends SafetyFeature {\n  isMandatory = true;\n}\n\nblock OptionalSafetyFeature extends SafetyFeature {\n  isMandatory = false;\n}\n\nblock SafetyFeature extends VehicleComponent {\n}\n\nblock SecurityDevice extends VehicleComponent {\n}\n\nblock VehicleComponent {\n}\n\nblock FeatureType {\n  isSafety : Boolean;\n  isSecurity : Boolean;\n}\n\nblock VisualizationType {\n  isTreeStructure : Boolean;\n  is",
    "block ApplicationLayer {\n  part ServiceLayer;\n  part DataLayer;\n}\n\nblock ServiceLayer {\n  requires DataLayer;\n}\n\nblock DataLayer {\n}\n\nblock AttributeX {\n}\n\nblock AttributeY {\n}\n\nblock AttributeZ {\n  requires AttributeX;\n  requires AttributeY;\n}\n\nApplicationLayer.part->ServiceLayer;\nApplicationLayer.part->DataLayer;\nServiceLayer.require->DataLayer;\nAttributeZ.require->AttributeX;\nAttributeZ.require->AttributeY;\n```",
    "block PowertrainSystem {\n  requirement TorqueGeneration {\n    description: \"The system should include relevant components capable of generating torque, and it is required that the torque produced during operation must be greater than zero newton-meters to ensure driving capability.\"\n    derived_from: [PowerOutputRequirements]\n  }\n  block LogicLayer {\n    part TorqueGenerator {\n      description: \"The logic layer's torque generator function should be effectively allocated and mapped to the physical layer of the powertrain.\"\n      requirement: [TorqueGeneration]\n    }\n  }\n  block PhysicalLayer {\n    part Powertrain {\n      description: \"The physical layer of the powertrain includes actual components such as the engine.\"\n      requirement: [TorqueGeneration]\n    }\n  }\n}\n```",
    "block System {\n  part PowerTransmission;\n  part TorqueGenerator;\n  part Powertrain {\n    part Engine;\n  };\n  flow Power;\n  flow Torque;\n  require {\n    PowerTransmission.isTransmittable(Power);\n    PowerTransmission.isOutputtable(Power);\n    TorqueGenerator.isGeneratable(Torque);\n    Powertrain.contains(Engine);\n    Engine.isExecutable(TorqueGenerator.generate(Torque));\n  };\n}\n```",
    "block VehicleSafetyAndAntiTheftSystem {\n  part SafetyComponents {\n    block BasicSafetyComponents {\n      part FrontSeatBelts;\n      part Bumpers;\n    }\n    block OptionalSafetyComponents {\n      part DriversAirbag;\n      part AntiLockBrakingSystem;\n    }\n  }\n  part SecurityComponents {\n    part AlarmSystem;\n    part KeylessEntrySystem;\n  }\n  part SafetyAndSecurityComponents {\n    // components that affect both safety and anti-theft\n  }\n  part MandatorySafetyComponents {\n    // all mandatory safety components\n  }\n}\nThe SysML v2 textual code provided defines a block diagram for the Vehicle Safety and Anti-Theft System. It includes four main parts: Safety Components, Security Components, Safety and Security Components, and Mandatory Safety Components. The Safety Components part is further divided into Basic Safety Components and Optional Safety Components. The Security Components part includes an Alarm System and a Keyless Entry System. The Safety and Security Components part and",
    "block VehicleFuelSystem {\n  part FuelTankAssembly {\n    part FuelPump {\n      operation pressurizeFuel() : FuelPressure;\n      operation deliverFuel(FuelConsumingUnit) : FuelFlow;\n      operation returnFuel() : FuelFlow;\n    }\n    part FuelTank;\n  }\n  operation monitorFuelTemperature() : FuelTemperature;\n  operation transmitFuelTemperature(FuelTemperature) : void;\n  flow FuelFlow;\n  data FuelTemperature;\n  data FuelPressure;\n}\nThe SysML v2 textual code defines a block `VehicleFuelSystem` that represents the complete fuel supply and return management system for vehicles. The `VehicleFuelSystem` contains a `FuelTankAssembly` part, which in turn contains a `FuelPump` part and a `FuelTank` part. The `FuelPump` part has operations to pressurize fuel, deliver fuel to fuel-consuming units, and return fuel to the tank. The `",
    "block Vehicle {\n  part Interior {\n    part SeatBelt[2] {\n      property type = SafetyFeature;\n      property isMandatory = true;\n    }\n    part Airbag {\n      property type = SafetyFeature;\n      property isMandatory = false;\n    }\n    part AntiTheftAlarm {\n      property type = SecurityFeature;\n    }\n  }\n  part Body {\n    part Bumper {\n      property type = SafetyComponent;\n      property isMandatory = true;\n    }\n    part KeylessEntrySystem {\n      property type = SecurityComponent;\n    }\n  }\n  part Chassis {\n    part Wheel[2];\n    part AntiLockBrakingSystem[2] {\n      property type = SafetyComponent;\n      property isMandatory = false;\n    }\n  }\n  property safetyAndSecurityCompliance = ComplianceManagement;\n}\n```",
    "context VehicleSafetySecuritySystem {\n  part Interior {\n    feature AlarmSystem;\n    feature SeatBelts;\n    feature FrontRowSeats;\n    feature DriversAirbag;\n  }\n  part BodyAssembly {\n    feature VehicleBody;\n    feature Bumper;\n    feature KeylessEntrySystem;\n  }\n  requirement Safety {\n    description \"Enhance protection of driver and passengers during driving\";\n    derivedRequirement SeatBeltsConfiguration;\n    derivedRequirement AirbagsConfiguration;\n    derivedRequirement BumpersConfiguration;\n  }\n  requirement Security {\n    description \"Provide support for anti-theft and convenient access for users\";\n    derivedRequirement AlarmSystemInstallation;\n    derivedRequirement KeylessEntrySystemInstallation;\n  }\n}\n```",
    "block ComponentClassificationSystem {\n  part component\n  requirement ComponentClassification {\n    description: \"Classify and label each component to meet information security management requirements.\"\n    derivedRequirement ComponentClassificationLevel {\n      description: \"Every component must be clearly assigned a security classification level.\"\n    }\n    derivedRequirement ConfidentialComponent {\n      description: \"When a component is marked as 'Confidential,' the system should be able to recognize and display its corresponding classification attribute.\"\n    }\n  }\n  block Component {\n    attribute classificationLevel\n  }\n}\n```",
    "block AutomotiveECUModel {\n  part VehicleControlUnit;\n  part EngineControlUnit;\n  part CANBus;\n  part VehicleControlUnitBusIF;\n  part EngineControlUnitBusIF;\n  part SensorDataExchangeInterfaces;\n\n  VehicleControlUnitBusIF.canBus = CANBus;\n  EngineControlUnitBusIF.canBus = CANBus;\n\n  VehicleControlUnit.busIF = VehicleControlUnitBusIF;\n  EngineControlUnit.busIF = EngineControlUnitBusIF;\n\n  VehicleControlUnit.monitorsAndControls = EngineControlUnit;\n  EngineControlUnit.monitorsAndControls = VehicleControlUnit;\n\n  VehicleControlUnit.exchangesSensorDataWith = SensorDataExchangeInterfaces;\n  EngineControlUnit.exchangesSensorDataWith = SensorDataExchangeInterfaces;\n}\nThis SysML v2 textual code defines a block named `AutomotiveECUModel` that contains the main components of an automotive Electronic Control Unit (ECU) communication and control model. The model includes a `V",
    "block \"Blood Glucose Meter System\" {\n  requirement \"High Reliability and Safety\" {\n    description = \"Ensure high reliability and safety during use.\"\n  }\n  requirement \"Battery Status Detection\" {\n    description = \"Automatically detect battery status and alert user.\"\n  }\n  requirement \"Preventive Measures for Battery Status\" {\n    description = \"Implement measures to prevent battery issues.\"\n  }\n  requirement \"Alarm and Emergency Response Mechanisms\" {\n    description = \"Have appropriate alarm and emergency response mechanisms for abnormalities in blood glucose measurement function.\"\n  }\n  requirement \"Rigorous Approval and Management Measures\" {\n    description = \"Requirements have undergone rigorous approval, and management measures have been established for key risk scenarios.\"\n  }\n  requirement \"Timely, Continuous, and Safe Therapeutic Support\" {\n    description = \"Ensure patients can receive timely, continuous, and safe therapeutic support under all circumstances.\"\n  }\n}\n```",
    "package ScientificConstants {\n  part MathematicalConstants {\n    constant e = 2.71828182845904523536028747135266249775724709369995...\n    constant pi = 3.14159265358979323846264338327950288419716939937510...\n  }\n  part PhysicalConstants {\n    constant c = 299792458 m/s\n    constant alpha = 7.2973525693e-3\n    constant m_e_to_m_p = 5.4461702177e-4\n  }\n  part ScenarioBasedConstants {\n    constant g = 9.80665 m/s^2\n    constant A_ModelX = 100 dB\n  }\n}",
    "package AutomotiveComponents {\n  class Tire {\n    attribute manufacturer : String;\n    attribute rimDiameter : Real;\n    attribute width : Integer;\n  }\n  tire MichelinTire {\n    manufacturer = \"Michelin\";\n    rimDiameter = 18.0;\n    width = 245;\n  }\n}\n```",
    "package AutomotiveComponentModel {\n  part Vehicle {\n    attribute mass : Real [1] {\n      unit = \"kg\";\n      unit = \"lbs\";\n    }\n    attribute length : Real [1] {\n      unit = \"m\";\n      unit = \"ft\";\n    }\n    part leftFrontWheel : Wheel [1];\n    part rightFrontWheel : Wheel [1];\n  }\n  part Wheel {\n    attribute hubDiameter : Real [1] {\n      unit = \"in\";\n      unit = \"mm\";\n    }\n    attribute width : Real [1] {\n      unit = \"mm\";\n      unit = \"in\";\n    }\n    attribute outerDiameter : Real [1] {\n      unit = \"in\";\n      unit = \"mm\";\n      derived = \"hubDiameter + tireHeight\";\n    }\n    part tire : Tire [1];\n  }\n  part Tire {\n    attribute height : Real [1] {\n      unit = \"mm\";\n      unit = \"in\";\n    }\n  }\n",
    "block VehiclePowertrainConfiguration {\n  part EngineType: EngineType;\n  part TransmissionType: TransmissionType;\n  part PerformanceLevel: PerformanceLevel;\n\n  constraint selectOneEngineType:\n    EngineType.isSelected = 1;\n\n  constraint selectOneTransmissionType:\n    TransmissionType.isSelected = 1;\n\n  constraint highPerformanceModelRequiresSixCylinderEngine:\n    if PerformanceLevel = PerformanceLevel::High then\n      EngineType = EngineType::SixCylinder;\n    else\n      EngineType = EngineType::FourCylinder;\n\n  constraint validPowertrainCombinations:\n    (EngineType = EngineType::FourCylinder and TransmissionType = TransmissionType::Manual) or\n    (EngineType = EngineType::SixCylinder and TransmissionType = TransmissionType::Automatic);\n}\n\nenum EngineType {\n  FourCylinder,\n  SixCylinder;\n  attribute isSelected: Boolean;\n}\n\nenum TransmissionType {\n  Manual,\n  Automatic;\n ",
    "block Vehicle {\n  property mass = 1200 kg;\n  property length = 4.82 m;\n  part wheelAssembly[*];\n}\n\nblock WheelAssembly {\n  part tire[*];\n  part brakeDisc;\n}\n\nblock Wheel {\n  part rim;\n  part tire;\n  property rimDiameter = 18 inches;\n  property outerDiameter = calculateOuterDiameter();\n}\n\nblock Tire {\n  property width = 245 mm;\n  property height = 45 mm;\n  property treadDepth = 6.0 mm;\n  constraint treadDepth >= 3.5 mm;\n}\n\nblock BrakeDisc {\n  property radius = 95 mm;\n  property diameter = 2 * radius;\n  constraint diameter < Wheel.outerDiameter;\n}\n\nblock Rim {\n  constraint diameter >= BrakeDisc.diameter;\n}\n```",
    "block AutomotiveFuelSystem {\n  part FuelTankAssembly {\n    port FuelOutlet {\n      direction out;\n      type Fuel;\n      returnFunction true;\n    }\n  }\n  part FuelPump {\n    location FuelTankAssembly;\n    flow FuelFlow {\n      source FuelTankAssembly.FuelOutlet;\n      sink Engine;\n      returnFlow true;\n    }\n  }\n  requirement FuelCirculation {\n    description \"Fuel can circulate efficiently and safely among all components\";\n  }\n  requirement FuelSupply {\n    description \"Ensure normal fuel supply to the engine\";\n  }\n  requirement FuelTemperatureMonitoring {\n    description \"Monitor and transmit fuel temperature information\";\n  }\n}\n```",
    "block PhysicalQuantitySystem {\n  part QuantityManager {\n    quantity[1..*] : Quantity\n  }\n  part UnitManager {\n    unit[1..*] : Unit\n  }\n  part DataManager {\n    data[1..*] : Data\n  }\n  part ImportManager {\n    import[1..*] : Import\n  }\n  part ExtensionManager {\n    extension[1..*] : Extension\n  }\n  part ConversionManager {\n    conversion[1..*] : Conversion\n  }\n}\n\nblock Quantity {\n  name : String\n  symbol : String\n  definition : String\n  baseQuantity : Boolean\n}\n\nblock Unit {\n  name : String\n  symbol : String\n  definition : String\n  quantity : Quantity[1]\n}\n\nblock Data {\n  value : Real\n  unit : Unit[1]\n  quantity : Quantity[1]\n}\n\nblock Import {\n  source : String\n  quantity[1..*] : Quantity\n  unit[1..*] : Unit\n}\n\nblock",
    "block UnitSystemLibrary {\n  part ISQ\n  part USCustomaryUnits\n  requirement \"Support interoperability and adaptation between ISQ and USCustomaryUnits\"\n  requirement \"Enable users to conveniently manage, convert, and apply various units of physical quantities\"\n  requirement \"Ensure the accuracy and authoritative standardization of all unit types\"\n  requirement \"Enhance the efficiency and reliability of data processing and communication\"\n}\n```",
    "block HeadlampTiltAdjustmentSystem {\n  part HeadlampBeamTiltAngle {\n    property Value {\n      type Real;\n      constraint {\n        Value >= 50.0 and Value <= 80.0;\n      };\n    };\n  };\n  property SIUnit {\n    type String;\n    value \"International System of Units (SI)\";\n  };\n  property StandardConstants {\n    type String;\n    value \"pi and Euler’s number e\";\n  };\n}\nThis SysML v2 textual code defines a block `HeadlampTiltAdjustmentSystem` that contains a part `HeadlampBeamTiltAngle`. The `HeadlampBeamTiltAngle` has a property `Value` of type `Real` with a constraint that ensures the value falls within the range of 50 to 80 degrees. The system also has properties for the SI unit and standard real number constants used in calculations.",
    "block System {\n  part DataTypes {\n    datatype UnsignedInteger {\n      property[0..1] value : Integer {\n        constraint: value >= 0\n      }\n    }\n    datatype UnsignedFloat {\n      property[0..1] value : Real {\n        constraint: value >= 0\n      }\n    }\n    datatype DateTime {\n      property[0..1] value : DateTime\n    }\n    datatype String {\n      property[0..1] value : String\n    }\n    datatype Boolean {\n      property[0..1] value : Boolean\n    }\n    datatype Diameter {\n      property[0..1] value : Real {\n        constraint: value in {60, 70, 80}\n        default: 60\n      }\n    }\n  }\n  part StatusColors {\n    datatype StatusColor {\n      property[0..1] color : String {\n        constraint: color in {\"red\", \"yellow\", \"green\"}\n      }\n      property[0..1] level : String {\n        constraint: level in",
    "package SparePartsManagement {\n  block SparePartsSystem {\n    part SparePartsCollection : Bag<SparePart>;\n    part IntegerCollection : List<Integer>;\n    part StringCollection : Set<String>;\n    part PersonnelCollection : OrderedSet<Person>;\n    part NestedCollection : List<Set<Person>>;\n    part RealCollection : Real[4];\n  }\n}\n\nThe SysML v2 textual code provided defines a package named \"SparePartsManagement\" that contains a block named \"SparePartsSystem\". This block has several parts, each representing a different type of collection that the system needs to manage. The collections include \"SparePartsCollection\" (a Bag of SparePart elements), \"IntegerCollection\" (a List of Integer values), \"StringCollection\" (a Set of String values), \"PersonnelCollection\" (an OrderedSet of Person elements), \"NestedCollection\" (a List of Sets of Person elements), and \"RealCollection\" (a fixed-length array of Real values with a length of 4). This code accurately represents the requirements provided.",
    "block TireInformationSystem {\n  part tireInformation[*] {\n    attribute manufacturerName : String;\n    attribute rimDiameter : Real;\n    attribute tireWidth : Real;\n    attribute installationPosition : Vector[3];\n  }\n}\n```",
    "block SpacecraftTrajectorySamplingSystem {\n  part MissionLiftoffTime : Time = 0 s;\n  part UTCLiftoffTime : Time = 22:42:32.924534 on August 23, 2020;\n  part SamplingPoints : List<SamplingPoint>;\n\n  block SamplingPoint {\n    part Time : Time;\n    part Position : Position;\n    part Velocity : Velocity;\n  }\n\n  block Position {\n    part X : Real;\n    part Y : Real;\n    part Z : Real;\n  }\n\n  block Velocity {\n    part Vx : Real;\n    part Vy : Real;\n    part Vz : Real;\n  }\n}",
    "package MaterialScience {\n  part type Substance {\n    attribute atomicMass: Real;\n  }\n\n  part type Material extends Substance {\n    attribute tensileStrength: Real;\n  }\n\n  part type Metal extends Material {\n    // No additional attributes\n  }\n\n  part type Alloy extends Material {\n    attribute components: Material[*];\n    attribute massFractions: Real[*];\n    derived tensileStrength: Real = components->selectByKind(Metal)->collect(tensileStrength * massFractions)->sum();\n  }\n\n  part type CommonMetal extends Metal {\n    // No additional attributes\n  }\n\n  part type TypicalAlloy extends Alloy {\n    // No additional attributes\n  }\n\n  part instance Iron: CommonMetal {\n    atomicMass = 55.845;\n    tensileStrength = 290; // Example value\n  }\n\n  part instance Carbon: CommonMetal {\n    atomicMass = 12.0107;\n    tensileStrength =",
    "block EngineeringMaterialsDatabase {\n  part materials[*] Material;\n  part properties[*] Property;\n\n  materials.description = \"Various types of engineering materials, including metals and their alloys\";\n  properties.description = \"Fundamental properties of materials, such as atomic mass, compositional information, and mechanical property indicators\";\n\n  block Material {\n    attribute name: String;\n    attribute atomicMass: Real;\n    part compositions[*] Composition;\n    part mechanicalProperties[*] MechanicalProperty;\n  }\n\n  block Composition {\n    attribute material: Material;\n    attribute massFraction: Real;\n  }\n\n  block MechanicalProperty {\n    attribute name: String;\n    attribute value: Real;\n    attribute unit: String;\n  }\n\n  materials.mechanicalProperties.unit = {\"Newtons per square millimeter\", \"Pascal\"};\n\n  Material steel_980 {\n    name = \"Steel_980\";\n    atomicMass = 78.0;\n    Composition {\n      material = Material",
    "block PubSubSystem {\n  part Server\n  part Producer\n  part Consumer\n\n  Server.publishPort : blockPort\n  Server.subscribePort : blockPort\n  Producer.publishPort : blockPort\n  Consumer.subscribePort : blockPort\n\n  Server.publishPort <-> Producer.publishPort : flow\n  Server.subscribePort <-> Consumer.subscribePort : flow\n\n  Server.publishPort.publish(message) : operation\n  Server.subscribePort.subscribe(topic) : operation\n  Producer.publishPort.publish(message, topic) : operation\n  Consumer.subscribePort.receive(message) : operation\n\n  Server.publishPort.publish(message) -> Server.subscribePort.receive(message) : flow\n  Producer.publishPort.publish(message, topic) -> Server.publishPort.publish(message) : flow\n  Server.subscribePort.subscribe(topic) -> Server.subscribePort.receive(message) : flow\n  Server.subscribePort.receive(message) -> Consumer.subscribePort.receive(message) : flow\n}\n``",
    "block VehicleFuelSystem {\n  part FuelTankAssembly;\n  part Engine;\n  flow FuelFlow;\n  flow FuelReturnFlow;\n  item Fuel;\n  item FuelTemperature;\n  requirement FuelSupply;\n  requirement FuelRecycle;\n  requirement FuelTemperatureMonitoring;\n  requirement OperationalSafety;\n  requirement SystemEfficiency;\n\n  FuelSupply: FuelTankAssembly -> FuelFlow -> Engine;\n  FuelRecycle: Engine -> FuelReturnFlow -> FuelTankAssembly;\n  FuelTemperatureMonitoring: FuelFlow -> FuelTemperature -> FuelTankAssembly;\n  OperationalSafety: FuelTemperature -> Engine;\n  SystemEfficiency: FuelTemperature -> FuelSupply;\n}\nThis SysML model represents a vehicle fuel system with a fuel tank assembly, an engine, and fuel flow and return flows. It also includes fuel and fuel temperature as items, and requirements such as fuel supply, fuel recycle, fuel temperature monitoring, operational safety, and system",
    "block MessageFlowSystem {\n  part Producer;\n  part Server;\n  part Consumer;\n\n  flow PublishMessage {\n    source Producer;\n    target Server;\n  };\n\n  flow SubscribeTopic {\n    source Consumer;\n    target Server;\n  };\n\n  flow PushMessage {\n    source Server;\n    target Consumer;\n  };\n\n  requirement ReliableMessagePublishing {\n    derivedFrom PublishMessage;\n  };\n\n  requirement EfficientInformationExchange {\n    derivedFrom PublishMessage;\n    derivedFrom SubscribeTopic;\n    derivedFrom PushMessage;\n  };\n}\n```",
    "block TransportationSystem {\n  part User[1..5]\n  part Vehicle\n  part GasStation\n  part Environment\n\n  requirement \"Facilitate user boarding\" {\n    User.enter(Vehicle)\n  }\n\n  requirement \"Timely refueling during the journey\" {\n    when Vehicle.fuelLevel < 0.1 * Vehicle.maxTankCapacity then\n      User.goTo(GasStation)\n      User.refuel(Vehicle)\n    end\n  }\n\n  requirement \"Smooth boarding and alighting of passengers and driver\" {\n    User.exit(Vehicle)\n  }\n\n  requirement \"Efficient and safe travel experience\" {\n    Environment.consider()\n  }\n}\n```",
    "context VehicleFuelSystem {\n  part fuelTankAssembly;\n  part engineUnit;\n  flow fuelSupplyFlow: fuelTankAssembly.fuelOutletPort -> engineUnit.fuelInletPort;\n  flow fuelReturnFlow: engineUnit.fuelInletPort -> fuelTankAssembly.fuelOutletPort;\n  port fuelTankAssembly.fuelOutletPort {\n    attribute fuelTemperature;\n  }\n  port engineUnit.fuelInletPort {\n    attribute fuelTemperature;\n  }\n  interface fuelInterface {\n    end fuelTankAssembly.fuelOutletPort;\n    end engineUnit.fuelInletPort;\n  }\n  requirement fuelSupplyRequirement: fuelSupplyFlow.isForwardFlow = true;\n  requirement fuelReturnRequirement: fuelReturnFlow.isReverseFlow = true;\n  objective fuelManagementObjective: \"Ensure continuous and reliable fuel supply to the engine and support fuel return processing\";\n  objective safetyObjective: \"Improve the intelligence and safety of the overall vehicle fuel management\";\n}\n```",
    "block VehicleFuelSystem {\n  part FuelTankAssembly {\n    port fuelSupplyPort {\n      flow fuelFlow;\n      attribute fuelTemperature;\n    }\n    port fuelReturnPort {\n      flow fuelReturnFlow;\n      attribute fuelTemperature;\n    }\n  }\n  part Engine {\n    port fuelSupplyPort {\n      flow fuelFlow;\n      attribute fuelTemperature;\n    }\n    port fuelReturnPort {\n      flow fuelReturnFlow;\n      attribute fuelTemperature;\n    }\n  }\n  requirement ReliabilityRequirement {\n    description: \"The system should operate reliably during normal vehicle operation.\"\n  }\n  requirement SafetyRequirement {\n    description: \"The system should ensure the safety of fuel delivery during normal vehicle operation.\"\n  }\n  requirement MonitoringRequirement {\n    description: \"The system should provide monitoring and regulation of fuel delivery during normal vehicle operation.\"\n  }\n}\n```",
    "block SceneCaptureSystem {\n  part User\n  part Camera\n  part SceneSelection\n  part AutoFocus\n  part ImageCapture\n  part ImageOutput\n\n  User.selects(SceneSelection)\n  SceneSelection.selects(Camera)\n  Camera.focuses(AutoFocus)\n  AutoFocus.generates(IntermediateImage)\n  Camera.captures(ImageCapture)\n  ImageCapture.outputs(ImageOutput)\n  User.obtains(ImageOutput)\n}\n```",
    "block PhotographyWorkflow {\n  part SceneSelection\n  part Focusing\n  part Shooting\n  part ImageOutput\n\n  SceneSelection -> Focusing\n  Focusing -> Shooting\n  Shooting -> ImageOutput\n\n  requirement FocusingRequirement {\n    name: \"Focusing Requirement\"\n    description: \"The system shall automatically perform focusing on the selected scene and generate an intermediate image.\"\n  }\n\n  requirement ShootingRequirement {\n    name: \"Shooting Requirement\"\n    description: \"The system shall carry out the shooting operation based on the focused image, thereby outputting the final photograph.\"\n  }\n\n  requirement SequenceRequirement {\n    name: \"Sequence Requirement\"\n    description: \"The entire workflow is completed sequentially through the two steps of “Focusing” and “Shooting”.\"\n  }\n\n  requirement QualityRequirement {\n    name: \"Quality Requirement\"\n    description: \"The image has achieved clear focus before shooting and resulting in high-quality photo output.\"\n  }\n\n  requirement EfficiencyRequirement {\n    name:",
    "block PhotographyWorkflowSystem {\n  part SceneSelection\n  part FocusingProcess\n  part ShootingProcess\n  part Image\n  part FinalPhotograph\n\n  SceneSelection -> FocusingProcess : selects\n  FocusingProcess -> Image : generates\n  Image -> ShootingProcess : uses\n  ShootingProcess -> FinalPhotograph : produces\n\n  SceneSelection -> FocusingProcess : automatic\n  FocusingProcess -> ShootingProcess : automatic\n  ShootingProcess -> FinalPhotograph : automatic\n\n  SceneSelection -> FinalPhotograph : convenience\n  ShootingProcess -> FinalPhotograph : quality\n}\nThis SysML v2 textual code defines a block diagram for a Photography Workflow System. The system consists of five parts: SceneSelection, FocusingProcess, ShootingProcess, Image, and FinalPhotograph. The relationships between these parts are also defined. The SceneSelection part selects a specific scene, which is then used by the FocusingProcess part to generate an image. This image is then used by the ShootingProcess part to produce a final",
    "block PhotographySystem {\n  part User\n  part Scene\n  part Image\n  part Photograph\n\n  User -> Scene : provides\n  Scene -> Image : focusProcessing\n  Image -> Photograph : shootingOperation\n\n  User -> Photograph : obtains\n}\n```",
    "block PhotographyWorkflow {\n  part Scene\n  part Image\n  part Picture\n  part Focus\n  part Shoot\n  Scene -> Focus : input\n  Focus -> Image : output\n  Image -> Shoot : input\n  Shoot -> Picture : output\n}\n```",
    "block PhotographyWorkflowSystem {\n  part Camera\n  part User\n  part Scene\n  part Image\n\n  flow Focusing {\n    source Camera\n    target Scene\n  }\n\n  flow Shooting {\n    source Camera\n    target Image\n  }\n\n  flow SelectScene {\n    source User\n    target Scene\n  }\n\n  flow CapturePhotograph {\n    source User\n    target Image\n  }\n\n  flow GenerateImage {\n    source Camera\n    target Image\n  }\n\n  flow DetectFocus {\n    source Camera\n    target Focusing\n  }\n\n  flow ProceedShooting {\n    source DetectFocus\n    target Shooting\n    guard [DetectFocus.isClear]\n  }\n\n  flow AutomaticProcess {\n    source SelectScene\n    target Focusing\n    target Shooting\n  }\n\n  flow ConvenientExperience {\n    source User\n    target CapturePhotograph\n    guard [User.oneClick]\n  }\n\n  flow EnsureQuality {\n    source Shooting\n    target",
    "block PhotographySystem {\n  part User\n  part Scene\n  part Image\n  part Photo\n\n  flow SceneSelection {\n    source User\n    target Scene\n  }\n\n  flow Focusing {\n    source Scene\n    target Image\n  }\n\n  flow FocusQualityEvaluation {\n    source Image\n    target Image\n  }\n\n  flow Shooting {\n    source Image\n    target Photo\n    guard [Image.focusQuality = \"well-focused\"]\n  }\n\n  flow ImageConversion {\n    source Image\n    target Photo\n    guard [Image.focusQuality = \"well-focused\"]\n  }\n\n  flow ShootingProcess {\n    source Scene\n    target Photo\n    guard [Image.focusQuality = \"well-focused\"]\n  }\n}\nThe SysML v2 textual code defines a block named `PhotographySystem` that represents the overall system. It has four parts: `User`, `Scene`, `Image`, and `Photo`. There are six flows defined within the system: `SceneSelection`,",
    "block PhotographyWorkflow {\n  part Camera\n  part FocusFunction\n  part ShootingOperation\n  part Display\n\n  Camera.focusFunction = FocusFunction\n  Camera.shootingOperation = ShootingOperation\n  Camera.display = Display\n\n  operation takePhoto() {\n    Camera.acquireScene()\n    FocusFunction.focus(Camera.scene)\n    ShootingOperation.shoot(FocusFunction.focusedImage)\n    Display.show(ShootingOperation.photo)\n  }\n}\n```",
    "block AutomaticBrakeControlSystem {\n  part Vehicle;\n  part BrakePedal;\n  part TractionInformation;\n  part BrakePressure;\n  part RoadAdhesion;\n  part RoadConditions;\n  part BrakingProcess;\n  part BrakingPerformance;\n  part DrivingSafety;\n  part DrivingComfort;\n\n  Vehicle.keyTurnedToStart -> AutomaticBrakeControlSystem.activate;\n  AutomaticBrakeControlSystem.activate -> AutomaticBrakeControlSystem.monitor(BrakePedal, TractionInformation);\n  AutomaticBrakeControlSystem.monitor(BrakePedal, TractionInformation) -> AutomaticBrakeControlSystem.detect(BrakePressure);\n  AutomaticBrakeControlSystem.detect(BrakePressure) -> AutomaticBrakeControlSystem.evaluate(RoadConditions);\n  AutomaticBrakeControlSystem.evaluate(RoadConditions) -> AutomaticBrakeControlSystem.adjust(BrakePressure, BrakingProcess);\n  AutomaticBrakeControlSystem.adjust(B",
    "context BatteryChargingSystem {\n  part Battery {\n    property BatteryLevel {\n      type Real;\n      multiplicity [0..1];\n    }\n  }\n\n  part Charger {\n    operation Charge {\n      input Battery;\n    }\n    operation StopCharge {\n      input Battery;\n    }\n  }\n\n  flow BatteryCharging {\n    source Charger;\n    target Battery;\n  }\n\n  requirement BatteryCapacityMonitoring {\n    description \"The system shall monitor the current battery level in real time.\";\n  }\n\n  requirement AutomaticCharging {\n    description \"The system shall automatically supply charge when the battery level is below 100%.\";\n  }\n\n  requirement ChargingTerminationControl {\n    description \"The system shall automatically terminate the charging process when the battery level reaches or exceeds 100%.\";\n  }\n\n  constraint BatteryChargingControl {\n    description \"The Charger shall charge the Battery when the BatteryLevel is below 100% and stop",
    "context BatteryChargingSystem {\n  part Battery {\n    property batteryLevel : Real [0..100] {\n      description = \"The current battery level displayed as a percentage.\"\n    }\n  }\n\n  flow ChargingProcess {\n    source BatteryChargingSystem\n    target Battery\n    description = \"The flow of energy from the charging source to the battery.\"\n  }\n\n  block ChargingController {\n    property isCharging : Boolean {\n      description = \"Indicates whether the battery is currently being charged.\"\n    }\n\n    requirement ChargingRequirement {\n      description = \"The battery level should be below 100% to initiate charging.\"\n    }\n\n    requirement TerminationRequirement {\n      description = \"The charging process should be terminated when the battery level reaches or exceeds 100%.\"\n    }\n\n    requirement AutomationRequirement {\n      description = \"The entire charging operation should be fully automated with no manual intervention.\"\n    }\n\n    requirement SafetyRequirement {\n      description = \"The battery should be safely and reliably",
    "block CameraSystem {\n  part AutofocusSubsystem;\n  part ImagingSubsystem;\n  part PhotoStorage;\n\n  flow SceneSelection {\n    source User;\n    target AutofocusSubsystem;\n  };\n\n  flow ImageCapture {\n    source AutofocusSubsystem;\n    target ImagingSubsystem;\n  };\n\n  flow PhotoRecording {\n    source ImagingSubsystem;\n    target PhotoStorage;\n  };\n\n  requirement {\n    name: \"Automatic Focusing\";\n    description: \"The camera should automatically focus on objects within the scene.\";\n  };\n\n  requirement {\n    name: \"Image Capture\";\n    description: \"The camera should capture a clear and realistic image through the autofocus subsystem.\";\n  };\n\n  requirement {\n    name: \"Photo Recording\";\n    description: \"All photos taken should be recorded and saved by the system.\";\n  };\n\n  requirement {\n    name: \"User Interface\";\n    description: \"Users do not need to concern themselves with the internal technical details. They only need to select or confirm the scene",
    "block ShootingSystem {\n  block ViewfindingModule {\n    part FocusingModule;\n    part ImagingModule;\n  }\n  block UserInterface {\n    port selectScene;\n  }\n  flow focusScene {\n    source UserInterface::selectScene;\n    target ViewfindingModule::FocusingModule;\n  }\n  flow generateImage {\n    source ViewfindingModule::FocusingModule;\n    target ViewfindingModule::ImagingModule;\n  }\n  flow capturePhoto {\n    source ViewfindingModule::ImagingModule;\n    target ShootingSystem;\n  }\n}\n\nThe SysML v2 textual code provided defines a block diagram for a ShootingSystem that implements the shooting process of a digital camera. The system consists of a ViewfindingModule, which includes a FocusingModule and an ImagingModule, and a UserInterface. The UserInterface has a port called selectScene, which is used to select the shooting scene. The focusScene flow connects the selectScene port of the UserInterface to the FocusingModule of the ViewfindingModule, allowing the camera to automatically focus on the selected scene.",
    "block VehicleSimulationSystem {\n  part Vehicle {\n    property mass : Real;\n    property position : Real;\n    property velocity : Real;\n  }\n  part SimulationParameters {\n    property timeInterval : Real;\n    property powerInput : Sequence[Real];\n  }\n  flow calculatePosition : Real;\n  flow calculateVelocity : Real;\n  flow outputTrajectory : Sequence[Real];\n  require {\n    mass > 0;\n    timeInterval > 0;\n    powerInput.size() > 0;\n  }\n  perform {\n    calculatePosition = Vehicle.position + Vehicle.velocity * timeInterval;\n    calculateVelocity = Vehicle.velocity + powerInput[i] / Vehicle.mass * timeInterval;\n    outputTrajectory.add(calculatePosition);\n  }\n}\n```",
    "block CameraSystem {\n  part Camera\n  part Display\n  flow SceneInput\n  flow Focusing\n  flow ImageGeneration\n  flow PhotoDisplay\n  requirement \"The system shall implement basic camera shooting and display functionality.\"\n  requirement \"The system shall perform a focusing process on the scene to obtain an image.\"\n  requirement \"The system shall capture the obtained image to generate a photo.\"\n  requirement \"The system shall automatically display the captured photo on the screen.\"\n  requirement \"The user shall be able to view the shooting result immediately.\"\n  requirement \"The entire process shall ensure that scene processing, image generation, and photo display are seamlessly and automatically integrated.\"\n  requirement \"The user shall only need to perform a simple shooting operation to obtain a complete experience of photographing and viewing the result.\"\n  SceneInput -> Focusing\n  Focusing -> ImageGeneration\n  ImageGeneration -> PhotoDisplay\n  PhotoDisplay -> Display\n  Camera -> ImageGeneration\n  ImageGeneration -> Camera\n}\n```",
    "block CameraSystem {\n  part viewPort;\n  part Image;\n  part Picture;\n  part displayPort;\n\n  flow focusFlow {\n    source viewPort;\n    target Image;\n  }\n\n  flow captureFlow {\n    source Image;\n    target Picture;\n  }\n\n  flow displayFlow {\n    source Picture;\n    target displayPort;\n  }\n\n  requirement {\n    name: \"User selects scene\";\n    description: \"User selects a scene through the camera’s viewfinder (viewPort)\";\n  }\n\n  requirement {\n    name: \"Automatic focusing\";\n    description: \"The system focuses on the scene to obtain an image (Image)\";\n  }\n\n  requirement {\n    name: \"Photograph generation\";\n    description: \"The system captures the image to generate a photograph (Picture)\";\n  }\n\n  requirement {\n    name: \"Photograph display\";\n    description: \"The system displays the photograph on the screen via the display port (displayPort)\";\n  }\n\n  requirement {\n    name: \"",
    "block SensorManagementSystem {\n  part sensors: Sensor[*];\n  block SensorUpdater {\n    operation updateSensor(s: Sensor);\n  }\n  requirement r1: forAll(sensors, s | s.status = Ready implies SensorUpdater.updateSensor(s));\n  requirement r2: forAll(sensors, s | s.status = Ready implies eventually(s.status = Updated));\n}\nThe SensorManagementSystem block represents the overall system. It contains a multiplicity of Sensor parts, which represent the individual sensors that the system manages. The SensorUpdater block is responsible for updating the sensors. It has an operation called updateSensor that takes a Sensor as a parameter.\n\nThe first requirement, r1, specifies that whenever a sensor's status is Ready, the SensorUpdater's updateSensor operation should be invoked for that sensor. The second requirement, r2, specifies that whenever a sensor's status is Ready, eventually the sensor's status should be Updated.\n\nThese requirements ensure that all available sensors are kept up-to-date,",
    "block VehicleStateManager {\n  part Vehicle {\n    state Off;\n    state Starting;\n    state On;\n  }\n\n  flow VehicleStartSignal;\n  flow VehiclePowerOnSignal;\n  flow VehicleShutdownSignal;\n\n  requirement ReliableStateTransition {\n    description: \"The system must reliably ensure that the vehicle state responds appropriately to the corresponding control signals, and safely and sequentially transitions between each state.\"\n  }\n\n  requirement InitialOffState {\n    description: \"The vehicle is initially in the off state.\"\n  }\n\n  requirement StartStateTransition {\n    description: \"Upon receiving a 'vehicle start signal', the vehicle switches to the 'starting' state.\"\n  }\n\n  requirement OnStateTransition {\n    description: \"Subsequently, when a 'vehicle power-on signal' is received, the vehicle transitions to the 'on' state.\"\n  }\n\n  requirement ShutdownStateTransition {\n    description: \"At any time, if a 'vehicle shutdown signal' is received, the vehicle state switches back to the 'off' state.\"",
    "block VehicleStateManagementSystem {\n  part VehicleStateMachine {\n    state Off {\n      entry / VehicleStateMachine.isOff()\n      do / VehicleStateMachine.setOff()\n      exit / VehicleStateMachine.unsetOff()\n      transition VehicleStartSignal / VehicleStateMachine.start()\n    }\n    state Starting {\n      entry / VehicleStateMachine.isStarting()\n      do / VehicleStateMachine.setStarting()\n      exit / VehicleStateMachine.unsetStarting()\n      transition VehicleOnSignal / VehicleStateMachine.on()\n    }\n    state On {\n      entry / VehicleStateMachine.isOn()\n      do / VehicleStateMachine.setOn()\n      exit / VehicleStateMachine.unsetOn()\n      transition VehicleOffSignal / VehicleStateMachine.off()\n    }\n  }\n}\n```",
    "context VehiclePowerManagement {\n  part Vehicle {\n    state Off;\n    state StartPhase;\n    state PoweredOn;\n  }\n\n  flow VehicleStartCommand;\n  flow VehicleStartedSignal;\n  flow VehicleShutdownCommand;\n\n  requirement \"When the user sends a vehicle start command, the system switches the vehicle from the off state to the start phase.\" {\n    source VehicleStartCommand;\n    target Vehicle;\n    trigger \"VehicleStartCommand is received\";\n    effect \"Vehicle transitions from Off state to StartPhase state\";\n  }\n\n  requirement \"Upon receiving the vehicle started signal, it enters the vehicle powered-on state.\" {\n    source VehicleStartedSignal;\n    target Vehicle;\n    trigger \"VehicleStartedSignal is received\";\n    effect \"Vehicle transitions from StartPhase state to PoweredOn state\";\n  }\n\n  requirement \"During the powered-on period, the system automatically performs self-diagnosis operations and continuously supplies power to various functional units of the vehicle.\" {\n    source Vehicle;\n    target Vehicle;\n",
    "block VehicleSystem {\n  part Vehicle {\n    state shutdown;\n    state startup;\n    state running;\n  }\n  signal startSignal;\n  signal startedSignal;\n  signal shutdownSignal;\n  requirement \"The system shall be capable of managing the vehicle’s start-up, operation, and shutdown processes.\" {\n    derived from \"The system shall accurately respond to the corresponding signals, enabling automatic switching among the three main states—shutdown, start-up, and running—so that the user can conveniently and safely control the vehicle’s start and stop processes.\";\n  }\n  requirement \"When the user issues a vehicle start signal while the vehicle is in the shutdown state, the vehicle should enter the start-up state.\" {\n    derived from \"The system shall accurately respond to the corresponding signals, enabling automatic switching among the three main states—shutdown, start-up, and running—so that the user can conveniently and safely control the vehicle’s start and stop processes.\";\n  }\n  requirement \"Upon receiving a vehicle started signal, the system shall set the vehicle status to running.\" {\n    derived from \"The system shall",
    "block VehiclePowerManagement {\n  part Vehicle {\n    state Off {\n      transition Start on startSignal;\n    }\n    state Start {\n      transition On on OnSignal;\n    }\n    state On {\n      transition Off on offSignal;\n    }\n  }\n  part HealthStateManagement {\n    // Placeholder for future expansion\n  }\n}\n```",
    "block VehicleHealthMonitoringSystem {\n  part VehicleTemperatureSensor;\n  part VehicleController;\n  part VehicleMaintenanceScheduler;\n\n  flow f1: VehicleTemperatureSensor.temperature -> checkTemperature;\n  flow f2: checkTemperature.result -> VehicleController.warning;\n  flow f3: checkTemperature.result -> updateStatus;\n  flow f4: VehicleMaintenanceScheduler.maintenanceTime -> updateStatus;\n  flow f5: updateStatus.status -> VehicleController.healthStatus;\n\n  block checkTemperature {\n    parameter maxAllowableTemperature;\n    input temperature;\n    output result;\n  };\n\n  block updateStatus {\n    input temperature;\n    input maintenanceTime;\n    output status;\n  };\n}\nThe SysML v2 textual code defines a block diagram model of the Vehicle Health Monitoring System. The system consists of three parts: VehicleTemperatureSensor, VehicleController, and VehicleMaintenanceScheduler. There are five flows in the system:\n\n1. f1: The",
    "block Server {\n  part LocalClock\n  port RequestPort\n  state OffState\n  state WaitingState\n  state ResponseState\n  state PowerOffState\n  transition StartCommandReceived {\n    source OffState\n    target WaitingState\n    trigger StartCommand\n  }\n  transition RequestMessageReceived {\n    source WaitingState\n    target ResponseState\n    trigger RequestMessage\n  }\n  transition ResponseTimeout {\n    source ResponseState\n    target WaitingState\n    trigger Timeout(5 minutes)\n  }\n  transition DailyPowerOff {\n    source [WaitingState, ResponseState]\n    target PowerOffState\n    trigger DailyPowerOffEvent(11:59:00)\n  }\n  transition PowerOn {\n    source PowerOffState\n    target WaitingState\n    trigger DailyPowerOnEvent(00:00:00)\n  }\n}\n```",
    "block VehicleControlSystem {\n  part Vehicle {\n    state Off;\n    state Operating;\n    state StartProcess;\n    state StopProcess;\n    transition StartProcess <<start signal>>;\n    transition Operating <<start signal>> from StartProcess when BrakePedalDepressed;\n    transition StopProcess <<stop signal>> from Operating;\n    transition Off <<stop signal>> from StopProcess;\n    requirement SafetyRequirement {\n      description: \"Ensure the safety and reliability of the vehicle’s start-stop process.\";\n    };\n    requirement CoordinationRequirement {\n      description: \"Coordinated control with the controller.\";\n    };\n  };\n  part Controller {\n    state PowerOff;\n    state PowerOn;\n    transition PowerOn <<start signal>> from PowerOff when BrakePedalDepressed;\n    transition PowerOff <<stop signal>> from PowerOn;\n  };\n  flow StartSignal {\n    source Vehicle;\n    target Controller;\n    trigger StartProcess;\n  };\n  flow StopSignal {\n    source Vehicle;\n    target Controller;\n    trigger StopProcess;",
    "block VehicleControlSystem {\n  part VehicleController;\n  part Driver;\n  part BrakePedal;\n  part Vehicle;\n\n  flow VehicleStartSignal;\n  flow VehicleOnSignal;\n  flow StartControlSignal;\n  flow ShutdownSignal;\n\n  item VehicleState {\n    state Off;\n    state Started;\n  }\n\n  requirement VehicleStartRequirement {\n    description: \"The system shall allow the vehicle to be started when the driver prepares to start the vehicle and the brake pedal is depressed and a vehicle-on signal is received.\";\n    verify: VehicleStartSignal and BrakePedal.depressed and VehicleOnSignal -> StartControlSignal;\n  }\n\n  requirement VehicleShutdownRequirement {\n    description: \"The system shall ensure that the vehicle can be shut down safely by switching the vehicle state to off and applying the parking brake before shutdown.\";\n    verify: ShutdownSignal -> VehicleState.Off and BrakePedal.apply;\n  }\n\n  requirement VehicleSelfCheckRequirement {\n    description:",
    "block Driver {\n  part CruiseController;\n  part Speedometer;\n  part Engine;\n  part Vehicle;\n}\n\nblock CruiseController {\n  part Speedometer;\n  part Engine;\n  part Vehicle;\n}\n\nblock Speedometer {\n  part CruiseController;\n  part Vehicle;\n}\n\nblock Engine {\n  part CruiseController;\n  part Vehicle;\n}\n\nblock Vehicle {\n  part Driver;\n  part CruiseController;\n  part Speedometer;\n  part Engine;\n}\n\nflow SetSpeedCommand {\n  source Driver;\n  target CruiseController;\n}\n\nflow ActualSpeedInfo {\n  source Speedometer;\n  target CruiseController;\n}\n\nflow FuelControlCommand {\n  source CruiseController;\n  target Engine;\n}\n\nflow RealTimeSpeedInfo {\n  source Speedometer;\n  target CruiseController;\n}\n\nflow EngineOutputAdjustment {\n  source Engine;\n  target Vehicle;\n}\n```",
    "block VehicleCruiseControlSystem {\n  part Driver\n  part CruiseController\n  part Speedometer\n  part EngineSystem\n\n  Driver.setSpeedCommand -> CruiseController\n  CruiseController.setSpeed <- Driver\n  CruiseController.realTimeSpeedInfo <- Speedometer\n  CruiseController.throttleControlCommand -> EngineSystem\n  EngineSystem.powerOutput <- CruiseController\n\n  requirement \"Automatic response to driver's intent\" {\n    CruiseController.setSpeed -> CruiseController.realTimeSpeedInfo\n    CruiseController.realTimeSpeedInfo -> CruiseController.throttleControlCommand\n    CruiseController.throttleControlCommand -> EngineSystem.powerOutput\n  }\n\n  requirement \"Improve driving comfort and safety\" {\n    CruiseController.throttleControlCommand -> EngineSystem.powerOutput\n  }\n}\n```",
    "block AutomotiveCruiseControl {\n  part Driver;\n  part CruiseController;\n  part SpeedSensor;\n  part Engine;\n\n  flow SetSpeedCommand {\n    source Driver;\n    target CruiseController;\n  };\n\n  flow CurrentSpeedInfo {\n    source SpeedSensor;\n    target CruiseController;\n  };\n\n  flow ThrottleControlCommand {\n    source CruiseController;\n    target Engine;\n  };\n\n  requirement \"Maintain Set Speed\" {\n    satisfiedBy CruiseController;\n    verifies SetSpeedCommand;\n    verifies CurrentSpeedInfo;\n    verifies ThrottleControlCommand;\n  };\n}\n```",
    "block AutomotiveCruiseControl {\n  part Driver\n  part Vehicle\n  part CruiseController\n  part Engine\n  part Speedometer\n\n  Driver.speedSettingRequest -> CruiseController\n  CruiseController.speedSetting -> CruiseController\n  CruiseController.throttleControlInstructions -> Engine\n  Speedometer.realTimeSpeedInfo -> CruiseController\n\n  require {\n    CruiseController.speedSetting = Driver.speedSettingRequest\n    CruiseController.throttleControlInstructions = calculateThrottle(CruiseController.speedSetting, Speedometer.realTimeSpeedInfo)\n  }\n\n  ensure {\n    Vehicle.speed = CruiseController.speedSetting\n  }\n}\n```",
    "block AutomotiveCruiseControl {\n  part DriverInterface;\n  part Vehicle;\n  part CruiseController;\n  part SpeedSensor;\n  part Engine;\n\n  DriverInterface.setSpeedCommand -> CruiseController;\n  SpeedSensor.speedInfo -> CruiseController;\n  CruiseController.fuelControlCommand -> Engine;\n\n  CruiseController.setSpeed = DriverInterface.setSpeedCommand;\n  Vehicle.actualSpeed = SpeedSensor.speedInfo;\n  Engine.power = CruiseController.fuelControlCommand;\n\n  constraint AutomotiveCruiseControl.setSpeed = AutomotiveCruiseControl.actualSpeed;\n  constraint AutomotiveCruiseControl.setSpeed = AutomotiveCruiseControl.power;\n}\nThe SysML v2 textual code defines a block named `AutomotiveCruiseControl` that represents the overall system. It contains parts such as `DriverInterface`, `Vehicle`, `CruiseController`, `SpeedSensor`, and `Engine`. The code also defines connections between these parts, such as `DriverInterface.setSpeedCommand` to `",
    "block VehicleCruiseControlSystem {\n  part CruiseController;\n  part SpeedSensor;\n  part EngineController;\n  part Engine;\n\n  flow SetSpeedCommand {\n    source Driver;\n    target CruiseController;\n  };\n\n  flow RealTimeSpeedInfo {\n    source SpeedSensor;\n    target CruiseController;\n  };\n\n  flow FuelControlCommand {\n    source CruiseController;\n    target EngineController;\n  };\n\n  flow ProcessedFuelControlCommand {\n    source EngineController;\n    target Engine;\n  };\n\n  requirement ReliableOperation {\n    appliesToPart CruiseController;\n    appliesToPart SpeedSensor;\n    appliesToPart EngineController;\n    appliesToPart Engine;\n  };\n\n  requirement EfficientOperation {\n    appliesToPart CruiseController;\n    appliesToPart SpeedSensor;\n    appliesToPart EngineController;\n    appliesToPart Engine;\n  };\n\n  requirement SafeOperation {\n    appliesToPart CruiseController;\n    appliesToPart SpeedSensor;\n    appliesToPart EngineController;\n    applies",
    "context VehicleLifecycleManagement {\n  part assemblyStage: Stage {\n    description: \"The stage where a vehicle goes through assembly.\"\n  }\n  part deliveryStage: Stage {\n    description: \"The stage where a vehicle is delivered to a customer.\"\n    property deliveryDate: Date {\n      description: \"The specific delivery date for the vehicle.\"\n    }\n  }\n  part ownershipStage: Stage {\n    description: \"The stage where a vehicle changes ownership.\"\n    property owner: Owner {\n      description: \"The information about the owner of the vehicle.\"\n    }\n  }\n  part drivingStage: Stage {\n    description: \"The stage where a vehicle is driven by different drivers.\"\n    property driver: Driver {\n      description: \"The information about the actual driver of the vehicle.\"\n    }\n  }\n  part endOfUseStage: Stage {\n    description: \"The stage where a vehicle reaches the end of its useful life.\"\n    property scrappingInfo: ScrappingInfo {\n      description: \"The information about the scrapping (or de-registration) of the vehicle.\"\n    }\n  }",
    "package VehicleModel {\n  part type Vehicle {\n    attribute mass : Real;\n    attribute operationalStatus : OperationalStatus;\n  }\n\n  part type OperationalStatus {\n    attribute gearSetting : GearSetting;\n    attribute acceleratorPedalPosition : Real;\n  }\n\n  part type Engine;\n  part type Driver;\n  part type Wheel;\n\n  part vehicle_1 : Vehicle {\n    part leftFrontWheel : Wheel;\n    part rightFrontWheel : Wheel;\n  }\n\n  usage leftFrontWheelUsage : Wheel;\n  usage rightFrontWheelUsage : Wheel;\n\n  association vehicle_1.leftFrontWheel to leftFrontWheelUsage {\n    timeSnapshot at 0 {\n      status = \"normal\";\n    }\n    timeSnapshot at 10 {\n      status = \"damaged\";\n    }\n  }\n\n  association vehicle_1.rightFrontWheel to rightFrontWheelUsage {\n    timeSnapshot at 0 {\n      status = \"normal\";\n    }\n    timeSnapshot at 15",
    "package VehicleSystem {\n  part type Vehicle {\n    attribute mass : Real;\n    attribute gear : Integer;\n    attribute acceleratorPosition : Real;\n  }\n  part Vehicle_1 : Vehicle {\n    attribute mass : Real = 2000.0;\n    attribute gear : Integer = 0;\n    attribute acceleratorPosition : Real = 0.0;\n  }\n  part Vehicle_1_Next : Vehicle {\n    attribute mass : Real = 1500.0;\n    attribute gear : Integer = 2;\n    attribute acceleratorPosition : Real = 0.5;\n  }\n}\n\nThis SysML v2 textual code defines a package named \"VehicleSystem\" that contains a part type \"Vehicle\" with attributes for mass, gear setting, and accelerator pedal position. Two instances of the \"Vehicle\" part type are also defined: \"Vehicle_1\" with initial attribute values and \"Vehicle_1_Next\" with updated attribute values. This model allows for the description and analysis of the relationships among vehicle components and the evolution of their attributes over time.",
    "package VehicleModel {\n  part Vehicle {\n    attribute mass : Real;\n    attribute gearPosition : GearPosition;\n    attribute throttlePedalPosition : Real;\n    attribute driver : Driver;\n  }\n\n  part Engine {\n    // Engine properties and behaviors can be added here\n  }\n\n  enum GearPosition {\n    neutral, first, second, third, fourth, fifth, reverse\n  }\n\n  part Driver {\n    attribute name : String;\n  }\n\n  part Alice extends Driver {\n    name = \"Alice\";\n  }\n\n  part Bob extends Driver {\n    name = \"Bob\";\n  }\n\n  block VehicleModel {\n    part vehicle : Vehicle;\n    part alice : Alice;\n    part bob : Bob;\n\n    flow vehicleAttributesChange {\n      vehicle.mass = 2000;\n      vehicle.gearPosition = GearPosition::neutral;\n      vehicle.throttlePedalPosition = 0;\n      vehicle.driver = alice;\n\n      // Time slice change\n      vehicle.",
    "block VehicleModelingSystem {\n  part vehicle : Vehicle;\n  part component : Component;\n\n  flow calculateTotalMass : Mass;\n  flow recordComponentInfo : ComponentInfo;\n\n  requirement \"Calculate total mass of a vehicle\" {\n    vehicle.calculateTotalMass();\n  }\n\n  requirement \"Record component information\" {\n    component.recordComponentInfo();\n  }\n}\n\nblock Vehicle {\n  attribute mass : Mass;\n\n  operation calculateTotalMass() : Mass;\n}\n\nblock Component {\n  attribute mass : Mass;\n  attribute number : Integer;\n  attribute weight : Weight;\n\n  operation recordComponentInfo() : ComponentInfo;\n}\n\nblock Engine extends Component {\n  // Engine-specific attributes and operations can be defined here\n}\n\nblock Transmission extends Component {\n  // Transmission-specific attributes and operations can be defined here\n}\n\ndatatype Mass {\n  // Definition of mass data type\n}\n\ndatatype Weight {\n  // Definition of weight data type\n}\n\ndatatype ComponentInfo {\n  attribute number : Integer;\n  attribute",
    "block VehicleManagementSystem {\n  part vehicle : Vehicle[1..*];\n  part component : Component[1..*];\n}\n\nblock Vehicle {\n  attribute vin : String;\n  attribute mass : Real;\n  part component : Component[0..*];\n}\n\nblock Component {\n  attribute serialNumber : String;\n  attribute mass : Real;\n  part subComponent : Component[0..*];\n}\n\nblock Engine extends Component {\n  attribute mass : Real;\n}\n\nblock Transmission extends Component {\n  attribute mass : Real;\n}\n```",
    "block MassAggregationSystem {\n  part simpleThing : SimpleThing;\n  part compositeThing : CompositeThing;\n}\n\nblock SimpleThing {\n  attribute simpleMass : Real;\n  attribute totalMass : Real;\n  constraint totalMass = simpleMass;\n}\n\nblock CompositeThing {\n  attribute simpleMass : Real;\n  attribute totalMass : Real;\n  part subcomponents : SimpleThing[*];\n  constraint totalMass = simpleMass + sum(subcomponents.totalMass);\n}\n```",
    "block MassManagementSystem {\n  part massObject {\n    attribute basicMass : Real;\n    attribute totalMass : Real;\n    part subcomponent[*] {\n      attribute basicMass : Real;\n      attribute totalMass : Real;\n    }\n  }\n  operation calculateTotalMass() : Real;\n  operation filterAndAggregate(minMassThreshold : Real) : Real;\n}\n```",
    "block VehicleDynamicsCalculator {\n  part PowerCalculator {\n    parameter wheelPower : Real;\n    parameter dragCoefficient : Real;\n    parameter frictionCoefficient : Real;\n    parameter vehicleMass : Real;\n    parameter speed : Real;\n    output availablePower : Real;\n  };\n  part AccelerationCalculator {\n    input effectivePower : Real;\n    input mass : Real;\n    input currentSpeed : Real;\n    output acceleration : Real;\n  };\n  part SpeedCalculator {\n    input acceleration : Real;\n    input initialSpeed : Real;\n    input time : Real;\n    output speed : Real;\n  };\n  part DisplacementCalculator {\n    input speed : Real;\n    input time : Real;\n    output displacement : Real;\n  };\n}\nThe SysML v2 textual code defines a block named VehicleDynamicsCalculator that encapsulates four parts: PowerCalculator, AccelerationCalculator, SpeedCalculator, and DisplacementCalculator. Each",
    "block VehicleSimulationSystem {\n  part Vehicle\n  part Environment\n  part TimeStep\n  part AerodynamicDragCoefficient\n  part RollingResistanceCoefficient\n  part WheelEndOutputPower\n  part TotalVehicleMass\n  part InitialSpeed\n  part InitialPosition\n  part AvailableDrivingPower\n  part Acceleration\n  part NewSpeed\n  part NewPosition\n\n  flow CalculateAvailableDrivingPower {\n    source Environment\n    source AerodynamicDragCoefficient\n    source RollingResistanceCoefficient\n    source TotalVehicleMass\n    source InitialSpeed\n    target AvailableDrivingPower\n  }\n\n  flow CalculateAcceleration {\n    source AvailableDrivingPower\n    source WheelEndOutputPower\n    source TotalVehicleMass\n    target Acceleration\n  }\n\n  flow CalculateNewSpeed {\n    source InitialSpeed\n    source Acceleration\n    source TimeStep\n    target NewSpeed\n  }\n\n  flow CalculateNewPosition {\n    source InitialPosition\n    source InitialSpeed\n    source Acceleration\n    source Time",
    "block VehicleDynamicsModel {\n  part Vehicle {\n    property mass : Real;\n    property wheelPower : Real;\n    property aerodynamicDragCoefficient : Real;\n    property rollingResistanceCoefficient : Real;\n    property initialSpeed : Real;\n    property initialPosition : Real;\n    property speed : Real;\n    property position : Real;\n  }\n  flow calculateSpeedAndPosition : Real[1];\n  flow updateSpeedAndPosition : Real[2];\n  flow predictDynamicStates : Real[*];\n  flow analyzeVehiclePerformance : Real[*];\n  flow automateSimulation : Real[*];\n  flow manageSimulation : Real[*];\n\n  calculateSpeedAndPosition(mass, wheelPower, aerodynamicDragCoefficient, rollingResistanceCoefficient, initialSpeed, initialPosition) -> updateSpeedAndPosition(speed, position);\n  updateSpeedAndPosition(speed, position) -> predictDynamicStates(velocity, acceleration, displacement);\n  predictDynamicStates(velocity, acceleration, displacement) -> analyzeVehiclePerformance(",
    "block VehicleDynamicCalculator {\n  part InitialPosition : Real;\n  part InitialVelocity : Real;\n  part VehicleMass : Real;\n  part WheelEndDrivePower : Real;\n  part TimeInterval : Real;\n  part DragCoefficient : Real;\n  part FrictionCoefficient : Real;\n  part Acceleration : Real;\n  part FinalVelocity : Real;\n  part FinalPosition : Real;\n\n  flow CalculateAcceleration : (WheelEndDrivePower, VehicleMass) -> Acceleration;\n  flow CalculateFinalVelocity : (InitialVelocity, Acceleration, TimeInterval) -> FinalVelocity;\n  flow CalculateFinalPosition : (InitialPosition, InitialVelocity, Acceleration, TimeInterval) -> FinalPosition;\n\n  constraint PhysicalConsistency : Acceleration >= 0;\n  constraint AirResistance : DragCoefficient > 0;\n  constraint FrictionalResistance : FrictionCoefficient > 0;\n}\n\nThe SysML v2 textual code defines a block named \"VehicleDynamic",
    "block VehicleWeightManagementSystem {\n  part Chassis {\n    property mass : Real;\n  }\n  part Engine {\n    property mass : Real;\n  }\n  part Gearbox {\n    property mass : Real;\n  }\n  property maxWeight : Real = 2500;\n  property totalWeight : Real = Chassis.mass + Engine.mass + Gearbox.mass;\n  constraint totalWeight <= maxWeight;\n  requirement OverweightWarning {\n    description: \"Issue an overweight warning if the combined mass of the chassis, engine, and gearbox exceeds the specified limit.\";\n    constraint: totalWeight > maxWeight;\n  }\n}\n```",
    "block VehicleMassBudgetSystem {\n  part Chassis : Component {\n    property mass : Mass;\n  }\n  part Engine : Component {\n    property mass : Mass;\n  }\n  part Transmission : Component {\n    property mass : Mass;\n  }\n  property totalMassLimit : Mass = 2500 kg;\n  property totalMass : Mass;\n  constraint totalMass <= totalMassLimit;\n}\nThis SysML model defines a system called `VehicleMassBudgetSystem` that manages the mass of a vehicle. The vehicle is composed of three major components: `Chassis`, `Engine`, and `Transmission`. Each component has a `mass` property. The system also has a `totalMassLimit` property set to 2500 kilograms. The `totalMass` property is calculated as the sum of the masses of the three components. The system has a constraint that the `totalMass` must be less than or equal to the `totalMassLimit`.",
    "block VehicleMassManagementSystem {\n  part Chassis {\n    property mass : Real;\n  }\n  part Engine {\n    property mass : Real;\n  }\n  part Transmission {\n    property mass : Real;\n  }\n  property totalMass : Real;\n  property massLimit : Real = 2500;\n  constraint totalMass <= massLimit;\n}\nThis SysML model defines a block `VehicleMassManagementSystem` that manages and regulates the mass of a vehicle. The vehicle is composed of three parts: `Chassis`, `Engine`, and `Transmission`, each with a `mass` property. The system also has a `totalMass` property and a `massLimit` property set to 2500. A constraint is defined to ensure that the `totalMass` does not exceed the `massLimit`.",
    "block VehicleWeightSystem {\n  part Chassis {\n    weight : Integer[1];\n  }\n  part Engine {\n    weight : Integer[1];\n  }\n  part Transmission {\n    weight : Integer[1];\n  }\n  derived totalWeight = Chassis.weight + Engine.weight + Transmission.weight;\n  constraint totalWeight <= 2500;\n}\nThe SysML v2 textual code defines a block named `VehicleWeightSystem` that contains three parts: `Chassis`, `Engine`, and `Transmission`. Each part has a weight attribute of type Integer with a multiplicity of 1. The `VehicleWeightSystem` block also has a derived attribute `totalWeight` that is the sum of the weights of the `Chassis`, `Engine`, and `Transmission` parts. A constraint is defined to ensure that the `totalWeight` does not exceed 2500.",
    "block Vehicle {\n  part Chassis {\n    attribute mass : Real;\n  }\n  part Engine {\n    attribute mass : Real;\n  }\n  part Transmission {\n    attribute mass : Real;\n  }\n  constraint totalMass : sum(Chassis.mass, Engine.mass, Transmission.mass) <= 2500;\n  block DynamicBehavior {\n    attribute initialVelocity : Real;\n    attribute finalVelocity : Real;\n    attribute mass : Real;\n    attribute appliedForce : Real;\n    attribute time : Real;\n    constraint massGreaterThanZero : mass > 0;\n    constraint physicalRelationship : appliedForce * time = mass * (finalVelocity - initialVelocity);\n  }\n}\n```",
    "block VehicleMaintenanceSystem {\n  part vehicle;\n  part maintenanceSchedule;\n  part vehicleStatus;\n  part maintenanceInterval;\n  part maximumAllowedTemperature;\n  part actualMaintenanceStartTime;\n  part maintenanceDuration;\n\n  vehicleStatus : VehicleStatus = normal;\n  maintenanceDuration : Duration = 48 hours;\n\n  block maintenanceSchedule {\n    part nextMaintenanceTime;\n    part scheduledMaintenanceTime;\n\n    nextMaintenanceTime : Time;\n    scheduledMaintenanceTime : Time;\n\n    constraint nextMaintenanceTime > now;\n    constraint scheduledMaintenanceTime = nextMaintenanceTime;\n    constraint vehicleStatus = underMaintenance when scheduledMaintenanceTime <= now;\n  }\n\n  block vehicle {\n    part maximumAllowedTemperature;\n\n    maximumAllowedTemperature : Temperature;\n\n    constraint maximumAllowedTemperature <= 100 degrees Celsius;\n  }\n\n  block maintenance {\n    part actualMaintenanceStartTime;\n    part maintenanceDuration;\n\n    actualMaintenanceStartTime : Time;\n    maintenanceDuration : Duration;\n",
    "block Vehicle {\n  property mass : Real;\n  property fuelMass : Real;\n  property maxMassLimit : Real;\n  constraint mass <= maxMassLimit;\n  constraint fuelMass > 0;\n}\n\nblock Engine {\n  property speed : Real;\n  property torque : Real;\n  property speedCurve : Real[*];\n  constraint torque = speedCurve[speed];\n}\n\nblock Transmission {\n  property torque : Real;\n}\n\nblock Clutch {\n  port engineTorque : Real;\n  port transmissionTorque : Real;\n  constraint engineTorque = transmissionTorque;\n}\n\npart engine : Engine;\npart transmission : Transmission;\npart clutch : Clutch;\n\nconnect engine.torque to clutch.engineTorque;\nconnect clutch.transmissionTorque to transmission.torque;\n```",
    "block Vehicle {\n  property maxMassWithFullFuel : 2000 kg;\n  property maxMassWithEmptyFuel : 1500 kg;\n  part engine : Engine;\n  part transmission : Transmission;\n  interface Clutch {\n    direction in;\n    direction out;\n    property torque : Nm;\n  }\n  interface EngineToTransmission {\n    direction in;\n    direction out;\n    property torque : Nm;\n    property speed : rpm;\n    property torqueCurve : SpeedTorqueCurve;\n  }\n  requirement RegulateVehicleMassControl {\n    derived from VehicleMassControl;\n  }\n  requirement EnsurePowertrainInterfaceAndPerformance {\n    derived from PowertrainInterfaceAndPerformance;\n  }\n  requirement EnsureSafetyOfVehicleDesign {\n    derived from VehicleSafety;\n  }\n  requirement EnsureEffectivenessOfPowerTransmission {\n    derived from PowerTransmissionEffectiveness;\n  }\n}\nThe SysML v2 textual code provided defines a block named \"Vehicle\"",
    "block Vehicle {\n  property mass_full : Real [1..1] = 2000;\n  property mass_empty : Real [1..1] = 1500;\n  part engine : Engine;\n}\n\nblock Engine {\n  property torque : Real [1..*];\n  port clutch_interface : ClutchInterface;\n  constraint torque_speed_relation : torque = f(speed);\n}\n\nblock TransmissionSystem {\n  port clutch_interface : ClutchInterface;\n}\n\nblock ClutchInterface {\n  property torque : Real [1..*];\n}\n\nrequirement mass_limit_full : Vehicle.mass_full <= 2000;\nrequirement mass_limit_empty : Vehicle.mass_empty <= 1500;\nrequirement torque_transmission : Engine.clutch_interface.torque = TransmissionSystem.clutch_interface.torque;\nrequirement torque_speed_relation : Engine.torque_speed_relation;\n```",
    "block VehicleMassControl {\n  requirement VehicleMassLimit {\n    description: \"The actual mass of the vehicle must not exceed the specified limit.\"\n    derived_from: [VehicleSafetyStandards]\n    verifies: [VehicleMassCalculation]\n  }\n  requirement VehicleMassCalculation {\n    description: \"The total vehicle mass is the sum of the vehicle’s curb mass and the fuel mass.\"\n    derived_from: [DesignRequirements]\n    verifies: [VehicleMassLimit]\n  }\n  requirement FullFuelTankMassLimit {\n    description: \"When the fuel tank is full, the total vehicle mass must not exceed 2000 kg.\"\n    derived_from: [VehicleMassLimit]\n    verifies: [VehicleMassCalculation]\n  }\n  requirement EmptyFuelTankMassLimit {\n    description: \"When the fuel tank is empty, the total vehicle mass must not exceed 1500 kg.\"\n    derived_from: [VehicleMassLimit]\n    verifies: [VehicleMassCalculation]\n",
    "block VehiclePerformanceAnalysisSystem {\n  part VehicleAttributes {\n    attribute curbWeight : Real;\n    attribute payload : Real;\n    attribute wheelDiameter : Real;\n    attribute transmissionEfficiency : Real;\n    attribute fuelEconomyUrban : Real;\n    attribute fuelEconomyHighway : Real;\n  }\n  part DrivingCycle {\n    attribute timeStampedPosition : Sequence<Real>;\n    attribute timeStampedSpeed : Sequence<Real>;\n  }\n  part EnginePowerCalculation : Block {\n    input VehicleAttributes;\n    input DrivingCycle;\n    output enginePower : Real;\n  }\n  part AccelerationCalculation : Block {\n    input DrivingCycle;\n    output acceleration : Real;\n  }\n  part FuelEconomyCalculation : Block {\n    input VehicleAttributes;\n    input DrivingCycle;\n    output fuelEconomy : Real;\n  }\n  part ComplianceVerification : Block {\n    input fuelEconomy : Real;\n    input targetFuelEconom",
    "block VehicleFuelEconomySimulation {\n  part VehicleParameters {\n    attribute curbWeight;\n    attribute load;\n    attribute wheelDiameter;\n    attribute transmissionEfficiency;\n    // other vehicle parameters\n  }\n\n  part DrivingScenarios {\n    attribute urbanDrivingTrajectory;\n    attribute highwayDrivingTrajectory;\n    attribute speedVariations;\n  }\n\n  part VehicleDynamics {\n    operation calculateWheelPower;\n    operation calculateAcceleration;\n    operation calculateEnergyConsumption;\n  }\n\n  part EngineModel {\n    operation calculateEnginePowerDemand;\n  }\n\n  part FuelConsumptionCalculation {\n    operation calculateFuelConsumption;\n    operation calculateFuelEconomy;\n  }\n\n  requirement FuelEconomyRequirement {\n    description \"Exceed 30 miles per gallon\";\n  }\n\n  requirement EmissionsRequirement {\n    description \"Meet energy-saving and emissions reduction requirements\";\n  }\n\n  requirement RegulatoryComplianceRequirement {\n",
    "block EngineSelectionSystem {\n  part FourCylinderEngine\n  part SixCylinderEngine\n\n  flow aggregateAndCalculateKPIs {\n    source FourCylinderEngine, SixCylinderEngine\n    target KPIs\n  }\n\n  flow evaluateEngines {\n    source KPIs\n    target EvaluationResults\n  }\n\n  flow screenAndRecommendEngines {\n    source EvaluationResults\n    target OptimalEngineSelection\n  }\n\n  requirement {\n    name: \"MaximizeEnginePerformance\"\n    description: \"The system should maximize the performance of the selected engine.\"\n  }\n\n  requirement {\n    name: \"MaximizeEconomicEfficiency\"\n    description: \"The system should maximize the economic efficiency of the selected engine.\"\n  }\n}\n\nblock FourCylinderEngine {\n  attribute power\n  attribute mass\n  attribute efficiency\n  attribute cost\n}\n\nblock SixCylinderEngine {\n  attribute power\n  attribute mass\n  attribute efficiency\n  attribute cost\n}\n\nblock KPIs {\n  attribute power\n  attribute",
    "block VehicleWeightCheckSystem {\n  part Vehicle\n  part WeightDataCollector\n  part WeightDataProcessor\n  part WeightEvaluator\n\n  requirement WeightLimit {\n    description: \"The curb weight of each vehicle must be less than or equal to 2,500 kilograms.\"\n    derivedFrom: [Vehicle]\n    satisfiedBy: [WeightEvaluator]\n  }\n\n  flow WeightDataCollection {\n    source: [WeightDataCollector]\n    target: [WeightDataProcessor]\n  }\n\n  flow WeightDataProcessing {\n    source: [WeightDataProcessor]\n    target: [WeightEvaluator]\n  }\n\n  flow WeightEvaluation {\n    source: [WeightEvaluator]\n    target: [VehicleWeightCheckSystem]\n  }\n\n  constraint WeightEvaluationResult {\n    description: \"The system must produce a qualified or unqualified evaluation result.\"\n    satisfiedBy: [WeightEvaluator]\n  }\n}\n```",
    "block VehicleMassVerificationSystem {\n  part vehicle : Vehicle;\n  part weighingEquipment : WeighingEquipment;\n  part massVerificationUnit : MassVerificationUnit;\n\n  flow measureMass {\n    source weighingEquipment;\n    target massVerificationUnit;\n  }\n\n  flow processData {\n    source massVerificationUnit;\n    target massVerificationUnit;\n  }\n\n  flow evaluateData {\n    source massVerificationUnit;\n    target massVerificationUnit;\n  }\n\n  requirement massLimit {\n    name = \"Mass Limit\";\n    description = \"The actual mass of each vehicle should not exceed 2,500 kilograms.\";\n    verifiedBy = evaluateData;\n  }\n\n  requirement independentVerification {\n    name = \"Independent Verification\";\n    description = \"The mass verification process should be carried out independently for each vehicle.\";\n    verifiedBy = measureMass;\n  }\n\n  requirement compliance {\n    name = \"Compliance\";\n    description = \"All vehicles involved in verification should comply with the",
    "block TransportationSystem {\n  part Driver;\n  part Passenger[0..4];\n  part Vehicle;\n  part Environment;\n  part Infrastructure;\n\n  requirement R1: \"The system should support a driver and up to four passengers sharing a vehicle.\";\n  requirement R2: \"Users can freely enter and exit the vehicle, and the system should ensure that this process is simple and smooth.\";\n  requirement R3: \"The system should fully consider and integrate surrounding environmental factors to ensure the safety and sustainability of the entire journey.\";\n  requirement R4: \"The system should be compatible with related infrastructure such as gas stations.\";\n  requirement R5: \"The system’s operation should be centered on human needs, with a focus on ride experience and various conveniences.\";\n\n  flow F1: \"Travel from the starting point to the destination.\";\n  flow F2: \"Smoothly complete all kinds of daily transportation tasks.\";\n\n  usecase U1: \"Use the vehicle to travel.\";\n  usecase U2: \"Enter and exit the vehicle.\";\n\n  constraint C1: \"The system should ensure the safety and comfort of all",
    "block TransportationSystem {\n  part Driver\n  part Passenger[0..4]\n  part Vehicle\n  part GasStation\n  part StartingPoint\n  part Destination\n\n  Driver.operates(Vehicle)\n  Driver.exits(Vehicle)\n  Passenger.enters(Vehicle)\n  Passenger.exits(Vehicle)\n  Vehicle.refuels(GasStation)\n\n  Driver.travels(StartingPoint, Destination)\n  Passenger.travels(StartingPoint, Destination)\n\n  constraint SimpleInteractions :\n    forAll interactions : Interaction |\n      interactions.isSimple() and interactions.isConvenient()\n\n  requirement DailyTransportation :\n    ensure Driver.isSafelyTransported(StartingPoint, Destination)\n    ensure Passenger.isSafelyTransported(StartingPoint, Destination)\n}\n```",
    "block VehicleConfigurationSystem {\n  part Engine {\n    part FourCylinderEngine {\n      attribute cylinders = 4;\n      attribute diameter = [70, 100];\n    }\n    part SixCylinderEngine {\n      attribute cylinders = 6;\n      attribute diameter = [70, 100];\n    }\n  }\n  part Transmission {\n    part ManualTransmission;\n    part AutomaticTransmission;\n  }\n  constraint FourCylinderEngine -> ManualTransmission;\n  constraint SixCylinderEngine -> AutomaticTransmission;\n}\nThe SysML v2 textual code defines a block `VehicleConfigurationSystem` that contains two parts: `Engine` and `Transmission`. The `Engine` part has two sub-parts: `FourCylinderEngine` and `SixCylinderEngine`, each with attributes for the number of cylinders and possible diameters. The `Transmission` part has two sub-parts: `ManualTransmission` and `AutomaticTransmission`. The code also includes constraints to ensure",
    "block Engine {\n  part Cylinder[4..6] {\n    property diameter : {70, 100}\n  }\n  property variant : {\"four-cylinder\", \"six-cylinder\"}\n}\nThe SysML v2 textual code defines a block named \"Engine\" that contains a part named \"Cylinder\". The \"Cylinder\" part is multiplicity-constrained to be between 4 and 6, and it has a property named \"diameter\" that can be either 70 or 100. The \"Engine\" block also has a property named \"variant\" that can be either \"four-cylinder\" or \"six-cylinder\". This model accurately represents the functional and non-functional requirements of the system, allowing for the design of a configurable engine with flexible adjustment of engine performance and size.",
    "block AutomotiveConfigurationSpace {\n  part engine : EngineType;\n  part transmission : TransmissionType;\n}\n\nblock EngineType {\n  part cylinderDiameter : CylinderDiameter;\n}\n\nenum CylinderDiameter {\n  mm70,\n  mm100\n}\n\nblock FourCylinderEngine extends EngineType {\n  cylinderDiameter = mm70;\n}\n\nblock SixCylinderEngine extends EngineType {\n  cylinderDiameter = mm100;\n}\n\nblock TransmissionType {\n}\n\nblock ManualTransmission extends TransmissionType {\n}\n\nblock AutomaticTransmission extends TransmissionType {\n}\n\nconstraint AutomotiveConfigurationSpace::EngineTransmissionConstraint {\n  (engine.oclIsKindOf(FourCylinderEngine) implies transmission.oclIsKindOf(ManualTransmission)) and\n  (engine.oclIsKindOf(SixCylinderEngine) implies transmission.oclIsKindOf(AutomaticTransmission))\n}\nThe SysML",
    "block System {\n  part ComputerSubsystem;\n  part StorageSubsystem;\n  requirement {\n    SoftwareDesign.MessageFormat;\n    SoftwareDesign.DataFormat;\n  };\n  requirement {\n    ComputerSubsystem.Utilize(SoftwareDesign.Functions);\n    ComputerSubsystem.Integrate(SoftwareDesign.Functions);\n    StorageSubsystem.Access(SoftwareDesign.MessageFormat);\n    StorageSubsystem.Access(SoftwareDesign.DataFormat);\n    System.SeamlessOperation(Software, Hardware);\n    System.Efficient(Processes);\n    System.Reliable(Processes);\n    System.Compliant(Processes, DataStructureSpecifications);\n  };\n}\n```",
    "block PowertrainSystem {\n  part LogicalLayer {\n    block TorqueGenerator {\n      requirement \"Convert power into torque\"\n    }\n  }\n  part PhysicalLayer {\n    block PowerUnit {\n      requirement \"Capable of power output\"\n      requirement \"Capable of torque generation\"\n    }\n  }\n  requirement \"Map TorqueGenerator to corresponding PowerUnit\"\n}\n```",
    "block System {\n  part PowerTransmissionSystem {\n    capability: DeliverPower\n    capability: GenerateTorque\n  }\n  part TorqueGenerator {\n    operation: GenerateTorque\n  }\n  part Powertrain {\n    part Engine {\n      operation: GenerateTorque\n    }\n  }\n  allocation: TorqueGenerator -> Powertrain\n  allocation: GenerateTorque -> Engine\n  requirement: EffectivePowerManagement\n}\n```",
    "package VehicleFeatureAnnotationSystem {\n  part InteriorAssembly {\n    part SeatBelts {\n      safetyFunction: SafetyFunction;\n    }\n    part FrontSeats {\n      safetyFunction: SafetyFunction;\n    }\n    part DriverAirbag {\n      safetyFunction: SafetyFunction;\n    }\n    part AlarmSystem {\n      protectionFunction: ProtectionFunction;\n    }\n  }\n  part BodyAssembly {\n    part BodyShell {\n      safetyFunction: SafetyFunction;\n    }\n    part Bumpers {\n      safetyFunction: SafetyFunction;\n    }\n    part KeylessEntryDevice {\n      protectionFunction: ProtectionFunction;\n    }\n  }\n}\n```",
    "block VehicleDynamicSimulationSystem {\n  part VehicleModel;\n  part ModelCenterAnalysisTool;\n  port initialVelocity;\n  port initialPosition;\n  port acceleration;\n  port timeStep;\n  port velocityOutput;\n  port positionOutput;\n  requirement R1: VehicleModel shall calculate the vehicle's velocity and position after the specified time step based on the given physical model;\n  requirement R2: ModelCenterAnalysisTool shall automatically calculate and output the vehicle's velocity and position after the specified time step based on the given physical model;\n  requirement R3: The system shall ensure accurate data transfer and reliable output of simulation results;\n  requirement R4: The system shall enable users to conveniently obtain key dynamic parameters to support vehicle performance analysis and design optimization;\n  flow f1: initialVelocity, initialPosition, acceleration, timeStep -> VehicleModel -> velocityOutput, positionOutput;\n  flow f2: velocityOutput, positionOutput -> ModelCenterAnalysisTool;\n}\n```",
    "package SafetyFeatures {\n  part Interior {\n    part SeatBelt {\n      @type = Safety;\n      isMandatory = true;\n    }\n    part Airbag {\n      @type = Safety;\n      isMandatory = false;\n    }\n  }\n  part Body {\n    part Bumper {\n      @type = Safety;\n      isMandatory = true;\n    }\n    part KeylessEntrySystem {\n      @type = Safety;\n      isMandatory = false;\n    }\n  }\n  part WheelAssembly {\n    part Wheel {\n      quantity = 2;\n    }\n    part AntiLockBrakingSystem {\n      @type = Safety;\n      isMandatory = false;\n    }\n  }\n}\npackage MandatorySafetyFeatures {\n  part Interior {\n    part SeatBelt {\n      @type = Safety;\n      isMandatory = true;\n    }\n  }\n  part Body {\n    part Bumper {\n      @type = Safety;\n      isMandatory = true;\n",
    "block VehicleSafetyComplianceSystem {\n  block Vehicle {\n    block Interior {\n      part SeatBelt[2] {\n        applyStereotype SafetyFeature;\n      }\n      part DriversAirbag {\n        applyStereotype SafetyFeature;\n        applyStereotype Optional;\n      }\n    }\n    block Body {\n      part Bumper {\n        applyStereotype SafetyComponent;\n        applyStereotype Mandatory;\n      }\n      part KeylessEntrySystem {\n        applyStereotype NonMandatoryConfiguration;\n      }\n    }\n    block ChassisSystem {\n      part Tire[4] {\n        applyStereotype Fixed;\n      }\n      part AntiLockBrakingSystem {\n        applyStereotype SafetyFeature;\n        applyStereotype Optional;\n      }\n    }\n  }\n}\nThe SysML v2 textual code provided defines a block diagram model for the Vehicle Safety Compliance System. The model consists of a Vehicle block that contains three sub-blocks: Interior, Body, and Ch",
    "block RiskFailureManagementSystem {\n  part RiskIdentification {\n    operation identifySituations;\n    operation describeCauses;\n    operation describeFailures;\n    attribute causeProbability;\n    attribute failureSeverity;\n  }\n  part CausalRelationshipAnalysis {\n    operation analyzeSequence;\n    operation analyzeImpactMechanisms;\n  }\n  part RiskScenarioModeling {\n    operation modelScenarios;\n    operation evaluateRisk;\n    operation manageRisk;\n  }\n}\n\nThe SysML v2 textual code defines a block named RiskFailureManagementSystem that includes three parts: RiskIdentification, CausalRelationshipAnalysis, and RiskScenarioModeling. Each part has specific operations and attributes to fulfill the functional and non-functional requirements mentioned in the input.",
    "block System {\n  part Scenario {\n    attribute description;\n  }\n  part Cause {\n    attribute probability;\n    attribute description;\n  }\n  part Failure {\n    attribute severity;\n    attribute description;\n  }\n  part RiskScenario {\n    attribute description;\n  }\n  relationship ScenarioCause {\n    source Scenario;\n    target Cause;\n  }\n  relationship ScenarioFailure {\n    source Scenario;\n    target Failure;\n  }\n  relationship CauseFailure {\n    source Cause;\n    target Failure;\n  }\n  relationship ScenarioScenario {\n    source Scenario;\n    target Scenario;\n  }\n  relationship RiskScenarioScenario {\n    source RiskScenario;\n    target Scenario;\n  }\n  relationship RiskScenarioCause {\n    source RiskScenario;\n    target Cause;\n  }\n  relationship RiskScenarioFailure {\n    source RiskScenario;\n    target Failure;\n  }\n  annotation (standardProfile=\"SysML",
    "block Equipment {\n  part Battery\n  requirement \"Monitor battery level during operation\"\n  requirement \"Detect battery aging and identify risk\"\n  requirement \"Determine low battery state when level falls below threshold\"\n  requirement \"Analyze low battery state and shut down device if necessary\"\n  requirement \"Assign severity level for high-level failures\"\n  requirement \"Alert users and maintenance personnel for timely intervention\"\n  requirement \"Ensure reliable operation of equipment and normal usage needs of user\"\n}\n```",
    "block System {\n  part Subsystem1;\n  part Subsystem2;\n  ...\n  part SubsystemN;\n\n  interface Interface1 {\n    // Define interface details\n  }\n  interface Interface2 {\n    // Define interface details\n  }\n  ...\n  interface InterfaceM {\n    // Define interface details\n  }\n\n  requirement Requirement1 {\n    // Define requirement details\n  }\n  requirement Requirement2 {\n    // Define requirement details\n  }\n  ...\n  requirement RequirementP {\n    // Define requirement details\n  }\n}\n\nExplanation:\nThe input requirement is about the system's ability to decompose structurally into subsystems and components, with well-defined interfaces. The output model represents this by defining a system block with multiple subsystem parts and interfaces. Additionally, requirements are included to ensure that the system's functional and performance requirements are met.",
    "block AutomotiveSystem {\n  part SeatBelts {\n    safety_attribute: mandatory;\n  }\n  part Bumpers {\n    safety_attribute: mandatory;\n  }\n  part DriverAirbags {\n    safety_attribute: optional;\n  }\n  part AntiLockBrakingSystem {\n    safety_attribute: optional;\n  }\n  // Add more components as needed\n}\n\nview HierarchicalStructure {\n  format: tree;\n  contents: AutomotiveSystem;\n}\n\nview SafetyComponents {\n  format: tabular;\n  contents: select AutomotiveSystem.* where safety_attribute is not null;\n}\n\nview NonSafetyComponents {\n  format: tabular;\n  contents: select AutomotiveSystem.* where safety_attribute is null;\n}\n```",
    "package AutomotiveDomain {\n  part type Car {\n    alias \"汽车\";\n    comment \"Core component in the automotive domain.\";\n    physicalQuantity Torque;\n  }\n  physicalQuantity Torque {\n    comment \"Physical quantity associated with the automotive domain.\";\n  }\n  comment \"This model provides standardized definitions and annotations for fundamental concepts and elements in the automotive domain.\";\n  comment \"The model emphasizes clarity and extensibility for convenient development, integration, and maintenance of subsequent automotive-related systems.\";\n}\n```",
    "context AutomobileDocumentManagement {\n  part Automobile {\n    attribute information : String;\n    attribute documentation : String;\n    alias Car;\n    part TorqueValue {\n      attribute value : Real;\n      constraint value.unit = ISQ;\n    }\n    annotation : String;\n  }\n}\n```",
    "package AutomobileManagement {\n  class Car {\n    attribute TorqueValue : Real;\n  }\n  alias Torque for Real;\n  alias ScalarPhysicalQuantity for Real;\n}\nThis SysML v2 textual code defines a package named \"AutomobileManagement\" that contains a class named \"Car\" and two aliases: \"Torque\" and \"ScalarPhysicalQuantity.\" The \"Car\" class has an attribute named \"TorqueValue\" of type \"Real,\" which represents the torque value associated with a car. The \"Torque\" alias is defined for the \"Real\" type, allowing users to refer to torque values using the alias \"Torque.\" The \"ScalarPhysicalQuantity\" alias is also defined for the \"Real\" type, enabling the flexible import and management of various scalar physical quantity data.",
    "package VehicleSystem {\n  block Vehicle {\n    part Engine {\n      part Cylinder[4..6] {\n        attribute {\n          type : enumeration VehicleType {\n            literal Small\n            literal Large\n          }\n        }\n      }\n    }\n  }\n}\nThe SysML model defines a package `VehicleSystem` that contains a block `Vehicle`. The `Vehicle` block has a part `Engine`, which in turn has a part `Cylinder` with a multiplicity range of 4 to 6. The `Cylinder` part has an attribute of type `VehicleType`, which is an enumeration with two literals: `Small` and `Large`. This model represents the requirement of having an engine with 4 to 6 cylinders, where the number of cylinders is determined based on the vehicle type (small or large).",
    "block FuelManagementSystem {\n  requirement \"Manage fuel flow\" {\n    derivedRequirement \"Ensure fuel delivery from tank to engine\"\n    derivedRequirement \"Support fuel return\"\n  }\n  requirement \"Monitor fuel temperature\"\n  requirement \"Realize fuel supply and return through fuel interfaces\"\n  requirement \"Connect fuel tank and engine via standardized fuel interfaces\"\n}\nThe SysML v2 textual code provided is a representation of the Fuel Management System, which includes several requirements related to managing fuel flow, monitoring fuel temperature, and ensuring the reliability and safety of fuel flow through standardized fuel interfaces. The system is required to manage fuel flow by ensuring fuel delivery from the fuel tank to the engine and supporting fuel return. Additionally, the system needs to monitor the temperature of the fuel and realize fuel supply and return through fuel interfaces. Lastly, the fuel tank and the engine should be connected via standardized fuel interfaces to ensure the reliability and safety of fuel flow.",
    "package VehicleStructuralArchitecture {\n  block Vehicle {\n    attribute mass : Real;\n    part frontAxleAssembly : FrontAxleAssembly;\n    part rearAxleAssembly : RearAxleAssembly;\n  }\n  block FrontAxleAssembly {\n    part axleComponents : AxleComponents;\n    part leftWheel : Wheel;\n    part rightWheel : Wheel;\n  }\n  block RearAxleAssembly {\n    part axleComponents : AxleComponents;\n    part leftWheel : Wheel;\n    part rightWheel : Wheel;\n  }\n  block SpecialFrontAxleAssembly extends FrontAxleAssembly {\n    attribute steeringAngle : Real;\n  }\n  block AxleComponents {\n    // Define axle components here\n  }\n  block Wheel {\n    // Define wheel attributes here\n  }\n}\n```"
]