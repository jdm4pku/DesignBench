[
    "package VehicleManagement {\n\n  part type Vehicle {\n    attribute mass : Real;\n    attribute status : VehicleStatus;\n    reference engine : Engine[1];\n    reference driver : Driver[0..1];\n  }\n\n  part type Engine {\n    // Engine attributes and relationships go here\n  }\n\n  part type Driver {\n    // Driver attributes and relationships go here\n  }\n\n  part type VehicleStatus {\n    attribute gearSetting : GearSetting;\n    attribute acceleratorPedalPosition : Real;\n  }\n\n  enum GearSetting {\n    PARK, REVERSE, NEUTRAL, DRIVE, LOW, HIGH\n  }\n\n}\n\nNote:\n\n1. The SysML v2 model is a textual representation of the system model.\n2. The model is defined within a package named \"VehicleManagement\".\n3. The \"Vehicle\" part type has two attributes: \"mass\" of type Real and \"status\" of type \"VehicleStatus\".\n4. The \"Vehicle\" part type has a reference to an \"Engine\" part",
    "\npackage VehicleModeling {\n  part Vehicle {\n    subpart ManuallyOperatedVehicle {\n      attribute driver : Personnel [multiplicity = 1..1];\n    }\n    subpart PoweredVehicle {\n      attribute engine : Engine [multiplicity = 1..1];\n    }\n    subpart ManuallyOperatedPoweredVehicle {\n      attribute driver : Personnel [multiplicity = 1..1];\n      attribute engine : Engine [multiplicity = 1..1];\n    }\n  }\n  part Personnel {\n  }\n  part Engine {\n  }\n}\n\nThis SysML model defines a package called VehicleModeling that contains three parts: Vehicle, Personnel, and Engine. The Vehicle part is further divided into three subparts: ManuallyOperatedVehicle, PoweredVehicle, and ManuallyOperatedPoweredVehicle. Each ManuallyOperatedVehicle has a driver attribute of type Personnel with a multiplicity of 1..1, meaning each vehicle is driven by exactly one driver. Each PoweredVehicle has an engine attribute of type Engine with a multiplicity of 1",
    "\n\npackage VehicleStructure {\n\n  class Vehicle {\n\n    attribute name : String;\n\n    attribute components : Component[4..4];\n\n    attribute engine : Engine[1..1];\n\n    attribute transmission : Transmission[1..1];\n\n    attribute wheels : Wheel[4..4];\n\n  }\n\n  class Component {\n\n    attribute name : String;\n\n  }\n\n  class Engine extends Component {\n\n  }\n\n  class Transmission extends Component {\n\n  }\n\n  class Wheel extends Component {\n\n  }\n\n}\n\n––––––––––––––––––––––––––––––––––\n\nThe given natural-language requirements have been successfully translated into a SysML v2 textual model. The model defines a package called \"VehicleStructure\" which contains the classes \"Vehicle\", \"Component\", \"Engine\", \"Transmission\", and \"Wheel\".\n\nThe \"Vehicle\" class has attributes for \"name\", \"components\", \"engine\", \"transmission\", and \"wheels",
    "\n\npackage VehicleSystem {\n\n  block Vehicle {\n    part Engine;\n  }\n\n  block SmallVehicle extends Vehicle {\n    part SmallEngine as Engine;\n  }\n\n  block LargeVehicle extends Vehicle {\n    part LargeEngine as Engine;\n  }\n\n  block Engine {\n    attribute numberOfCylinders;\n  }\n\n  block SmallEngine extends Engine {\n    numberOfCylinders = 4;\n  }\n\n  block LargeEngine extends Engine {\n    numberOfCylinders = 6;\n  }\n\n}\n\nThis SysML model defines a vehicle system with two types of vehicles: small and large. Each vehicle has an engine component, which is specialized into small and large engines. The number of cylinders in each engine type is defined as an attribute. This model ensures that the system can adaptively and reliably handle different types of vehicles with their specific engine specifications.",
    "\npackage TrafficSignalSystem {\n  part TrafficSignal {\n    attribute color : Color;\n  }\n  part GreenTrafficSignal extends TrafficSignal {\n    [color = green];\n  }\n  enum Color {\n    green,\n    yellow,\n    red\n  }\n}\n\nThe output model defines a package named TrafficSignalSystem that contains a part named TrafficSignal with an attribute named color of type Color. The model also defines a part named GreenTrafficSignal that extends TrafficSignal and has a default value of green for its color attribute. The model also defines an enumeration named Color with three possible values: green, yellow, and red.",
    "\n\npackage InformationClassification {\n\n  enum InformationLevel {\n    uncl,\n    conf,\n    secr\n  }\n\n  enum GradeLevel {\n    A,\n    B,\n    C,\n    D,\n    F\n  }\n\n  block ClassificationMechanism {\n    part informationLevel: InformationLevel\n    part gradeLevel: GradeLevel\n  }\n\n  block Information {\n    part classification: ClassificationMechanism\n  }\n\n  block System {\n    part information: Information[*]\n  }\n\n}\n\n––––––––––––––––––––––––––––––––––\n\nThe given natural-language requirement is about implementing an information classification management mechanism in a system. The mechanism is based on the \"traffic light\" principle, where information is divided into three levels: \"Unclassified,\" \"Confidential,\" and \"Secret.\" Each level corresponds to a code and a color. Additionally, the system needs to support grade classification, with levels A, B, C, D, and F corresponding to 4.0",
    "\npackage VehicleSystem {\n  part type Vehicle {\n    [1..1] engine : Engine;\n  }\n  part type SmallVehicle {\n    [1..1] engine : Engine {\n      numberOfCylinders = 4;\n    }\n  }\n  part type LargeVehicle {\n    [1..1] engine : Engine {\n      numberOfCylinders = 6;\n    }\n  }\n  part type Engine {\n    numberOfCylinders : Integer;\n    [numberOfCylinders] cylinder : Cylinder;\n  }\n  part type Cylinder {\n  }\n}\n\nThe output model defines a package named \"VehicleSystem\" that contains four part types: \"Vehicle\", \"SmallVehicle\", \"LargeVehicle\", and \"Engine\". The \"Vehicle\" part type has a composition relationship with the \"Engine\" part type. The \"SmallVehicle\" and \"LargeVehicle\" part types are specialized part types of the \"Vehicle\" part type and have a composition relationship with the \"Engine\" part type. The \"Engine\" part type has a composition",
    "\n\npackage VehicleModeling {\n\n  part type FuelTank {\n    [0..1] fuelType : Fuel;\n  };\n\n  part type Vehicle {\n    [0..1] driver : Personnel;\n    [1] fuelTank : FuelTank;\n    [0..*] qualityAttribute : QualityAttribute;\n  };\n\n  part type Fuel {\n    // attributes for fuel type\n  };\n\n  part type Personnel {\n    // attributes for personnel\n  };\n\n  part type QualityAttribute {\n    // attributes for quality attributes\n  };\n\n}\n\n––––––––––––––––––––––––––––––––––\n\nThe given natural-language requirements have been translated into a SysML v2 textual model. The model includes part types for FuelTank, Vehicle, Fuel, Personnel, and QualityAttribute. The FuelTank part type has a composition relationship with the Fuel part type, allowing it to store a specific type of fuel. The Vehicle part type has",
    "\n\npackage AutomobileWheelAssembly {\n\n  part WheelBearingUnit;\n  part Tire;\n  part Bead;\n  part Hub;\n  part Rim;\n  part BoltMountingHole;\n  part ThreadedHole;\n  part Bolt;\n\n  association TireToRim {\n    Tire.sealsAndFastens(Tire.bead, Hub.rim);\n    Tire.sealsAndFastens(Tire.bead, Hub.rim);\n  }\n\n  association HubToBoltMountingHole {\n    Hub.provides(Hub.boltMountingHole);\n  }\n\n  association BoltMountingHoleToThreadedHole {\n    BoltMountingHole.connectsTo(ThreadedHole) via Bolt;\n  }\n\n  association HubToTireAssembly {\n    Hub.ensuresReliableConnectionWith(Tire);\n  }\n\n  requirement StructuralStrengthAndSafety {\n    description = \"This model provides a detailed description of the specific relationships and connection methods between each component",
    "\n\npackage FuelFlowManagement {\n\n  part FuelTank {\n    port FuelSupply {\n      flow Fuel;\n    }\n    port FuelReturn {\n      flow Fuel;\n    }\n    port TemperatureSensor {\n      flow TemperatureData;\n    }\n  }\n\n  part Engine {\n    port FuelIntake {\n      flow Fuel;\n    }\n    port FuelReturn {\n      flow Fuel;\n    }\n    port TemperatureSensor {\n      flow TemperatureData;\n    }\n  }\n\n  connector FuelTransfer {\n    FuelTank.FuelSupply <-> Engine.FuelIntake;\n    Engine.FuelReturn <-> FuelTank.FuelReturn;\n    FuelTank.TemperatureSensor <-> Engine.TemperatureSensor;\n  }\n\n  interface FuelFlowMonitoring {\n    flow FuelSupplyData;\n    flow FuelReturnData;\n    flow TemperatureData;\n  }\n\n  connector Monitoring {\n    FuelTank.Temperature",
    "\n\npackage VehicleModeling {\n\n  part type Vehicle {\n    attribute mass : Real [1750];\n    part frontAxle : FrontAxle;\n    part rearAxle : RearAxle;\n  }\n\n  part type FrontAxle {\n    part tire1 : Tire;\n    part tire2 : Tire;\n  }\n\n  part type RearAxle {\n    part tire1 : Tire;\n    part tire2 : Tire;\n  }\n\n  part type Tire {\n    // No specific attributes defined\n  }\n\n  part type DedicatedFrontAxle {\n    attribute steeringAngle : Real;\n  }\n\n  part vehicle1_c1 : Vehicle {\n    attribute mass : Real [2000];\n    part frontAxle : DedicatedFrontAxle;\n  }\n\n}\n\nThis SysML model defines the core components of the vehicle modeling system, including the Vehicle, FrontAxle, RearAxle, and Tire part types. The Vehicle part type has",
    "\n\npackage CouplingSystem {\n\n  part Vehicle {\n    port CouplingPort {\n      reference Hitch.CouplingBall;\n    }\n  }\n\n  part Trailer {\n    port CouplingPort {\n      reference Hitch.Connector;\n    }\n  }\n\n  part Hitch {\n    part CouplingBall;\n    part Connector;\n  }\n\n  connector Coupling {\n    end Vehicle.CouplingPort;\n    end Trailer.CouplingPort;\n  }\n\n}\n\nThis SysML model represents the coupling system between a vehicle and a trailer. The vehicle and trailer are modeled as parts, each with a CouplingPort that references the CouplingBall and Connector in the Hitch component, respectively. The Hitch component is also modeled as a part, containing the CouplingBall and Connector. A connector, named Coupling, is used to connect the CouplingPort of the vehicle and trailer. This model allows for the reusability and flexible combination of components, as well as the modularity and simplified maintenance of the coupling system.",
    "\npackage VehiclePowerTransmissionSystem {\n  part Engine {\n    port fuelCommand : in Command;\n    port power : out Power;\n    port clutch : out Clutch;\n  }\n  part Transmission {\n    port power : in Power;\n    port clutch : in Clutch;\n    port driveshaft : out Driveshaft;\n  }\n  part Clutch {\n    port transmission : in Transmission;\n    port engine : in Engine;\n  }\n  part Driveshaft {\n    port transmission : in Transmission;\n    port rearAxleAssembly : out RearAxleAssembly;\n  }\n  part RearAxleAssembly {\n    port driveshaft : in Driveshaft;\n    part Differential {\n      port leftHalfShaft : out HalfShaft;\n      port rightHalfShaft : out HalfShaft;\n    }\n    part LeftHalfShaft {\n      port differential : in Differential;\n      port leftWheel : out Wheel;\n    }\n    part RightHalfShaft {\n      port differential :",
    "\n\npackage System {\n  part b11 {\n    part c1 {\n      port pb {\n        provided pe;\n      }\n    }\n    part c2 {\n      port pc;\n    }\n    port pe {\n      required pb;\n    }\n    port pf {\n      required pd;\n    }\n  }\n  part b12 {\n    part c3 {\n      port pd {\n        provided pf;\n      }\n    }\n    part c4 {\n      port pg;\n    }\n  }\n  part b21 {\n    reference c1;\n    reference c2;\n    reference c3;\n    reference c4;\n  }\n  part b22 {\n    reference c1;\n    reference c2;\n    reference c3;\n    reference c4;\n  }\n  port pe {\n    required b11.pe;\n    provided b21.c1.pb;\n  }\n  port pf {\n    required b12.pf;\n    provided b21.pf;\n  }\n  port pc {\n   ",
    "\npackage AutomotivePowertrain {\n  part AutomotivePowertrainSystem;\n  part Engine;\n  part Transmission;\n  part Driveshaft;\n  part LeftWheel;\n  part RightWheel;\n\n  AutomotivePowertrainSystem.flow[1] : FuelCommand;\n  AutomotivePowertrainSystem.flow[2] : EngineTorque;\n  AutomotivePowertrainSystem.flow[3] : DrivingForce;\n  AutomotivePowertrainSystem.flow[4] : EngineShutdownCommand;\n\n  Engine.flow[1] : FuelCommand (in);\n  Engine.flow[2] : EngineTorque (out);\n  Engine.flow[3] : EngineShutdownCommand (in);\n\n  Transmission.flow[1] : EngineTorque (in);\n  Transmission.flow[2] : DrivingForce (out);\n\n  Driveshaft.flow[1] : DrivingForce (in);\n  Driveshaft.flow[2] : DrivingForce (out);\n\n  LeftWheel.flow[1] : DrivingForce (in",
    "\n\npackage AutomotivePowertrainControl {\n\n  part AutomotivePowertrainControlSystem {\n\n    port fuelControlCommand : in Command;\n    port stallSignal : in Signal;\n    port wheelOutputTorque : out Torque;\n\n    part Engine {\n\n      port startCommand : in Command;\n      port shutdownCommand : in Command;\n      port torqueOutput : out Torque;\n\n      flow startEngine : Command;\n      flow generateTorque : Torque;\n      flow shutdownEngine : Command;\n\n      block startEngineBehavior {\n        [startEngine] start;\n        [generateTorque] generate;\n        [shutdownEngine] stop;\n      }\n\n    }\n\n    part PowerTransmission {\n\n      port torqueInput : in Torque;\n      port torqueOutput : out Torque;\n\n      flow amplifyTorque : Torque;\n      flow transmitTorque : Torque;\n      flow distributeTorque : Torque;\n\n      block powerTransmissionBehavior {\n        [amplifyTorque] amplify;\n        [transmitTorque] transmit;\n       ",
    "\n\npackage VehiclePowertrainSystem {\n\n  part Vehicle;\n\n  part Driver;\n\n  part Engine;\n\n  part Transmission;\n\n  part Wheel[4];\n\n  block VehiclePowertrainManagement {\n\n    input FuelCommand;\n\n    input EngineStartSignal;\n\n    input EngineShutdownSignal;\n\n    output EngineOutputTorque;\n\n    output TransmittedTorque;\n\n    output DistributedTorque;\n\n    parameter EngineTorqueAmplificationFactor;\n\n    parameter TransmissionEfficiency;\n\n    parameter WheelEfficiency;\n\n    requirement R1: \"The system shall achieve integrated management of the vehicle powertrain system according to the driver's fuel input command.\";\n\n    requirement R2: \"When the engine start signal is activated, the system shall first generate the corresponding engine output torque based on the fuel command.\";\n\n    requirement R3: \"The system shall then amplify and transmit the torque sequentially through the transmission.\";\n\n    requirement R4: \"Subsequently, the system shall distribute the torque to each wheel.\";\n\n    requirement R5: \"",
    "\n\npackage VehicleTrailerConnectionSystem {\n\n  part Vehicle {\n    part VehicleFrame;\n    part HitchBall;\n  };\n\n  part Trailer {\n    part TrailerFrame;\n    part TrailerCoupler;\n  };\n\n  block HitchingMechanism {\n    part HitchBall;\n    part TrailerCoupler;\n  };\n\n  flow ConnectionStatus {\n    source Vehicle;\n    target Trailer;\n  };\n\n  requirement ConnectionDisconnectionRequirement {\n    derivedRequirement ConnectionRequirement;\n    derivedRequirement DisconnectionRequirement;\n  };\n\n  requirement ConnectionRequirement {\n    refinedBy ConnectionStatus;\n  };\n\n  requirement DisconnectionRequirement {\n    refinedBy ConnectionStatus;\n  };\n\n  requirement FlexibleCombinationRequirement;\n\n  requirement SeparationRequirement;\n\n  requirement SafetyRequirement;\n\n  requirement ReliabilityRequirement;\n\n  requirement ScenarioRequirement;\n\n}\n\n––––––––––––––––––",
    "\n\npackage VehicleTrailerConnectionSystem {\n\n  part Vehicle {\n    part Chassis;\n    part TowBall;\n  }\n\n  part Trailer {\n    part Coupler;\n    part TrailerFrame;\n  }\n\n  block ConnectionSystem {\n    partBehavior {\n      connect(v: Vehicle, t: Trailer) : Boolean;\n      disconnect(v: Vehicle, t: Trailer) : Boolean;\n    }\n  }\n\n  flow Connected {\n    source Vehicle.TowBall;\n    target Trailer.Coupler;\n  }\n\n  flow Disconnected {\n    source Vehicle.TowBall;\n    target Trailer.Coupler;\n  }\n\n  itemConnection Connection {\n    connector Connected;\n    connector Disconnected;\n  }\n\n  usage VehicleUsage {\n    client ConnectionSystem;\n    supplier Vehicle;\n  }\n\n  usage TrailerUsage {\n    client ConnectionSystem;\n    supplier Trailer;\n  }\n\n}\n\n–––––––––",
    "\n\npackage TrailerConnectionSystem {\n\n  part Vehicle {\n    part Chassis {\n      part TowBall\n    }\n  }\n\n  part Trailer {\n    part TrailerChassis\n    part Coupler {\n      part EngagementMechanism\n    }\n  }\n\n  block HitchingOperation {\n    [isComposite]\n    part Vehicle\n    part Trailer\n    flow connect {\n      direction in\n      item[1] Trailer\n      item[2] Vehicle\n    }\n  }\n\n  block UnhitchingOperation {\n    [isComposite]\n    part Vehicle\n    part Trailer\n    flow disconnect {\n      direction out\n      item[1] Trailer\n      item[2] Vehicle\n    }\n  }\n\n  flow connectTrailer {\n    direction in\n    item[1] Trailer\n    item[2] Vehicle\n    redefinedFlow[1] HitchingOperation::connect\n    redefinedFlow[2] UnhitchingOperation::disconnect\n  }\n\n  flow disconnectTrailer {\n",
    "\n\npackage FuelSystem {\n\n  part FuelTank {\n    port FuelSupplyPort {\n      direction in;\n    }\n    port FuelReturnPort {\n      direction out;\n    }\n  }\n\n  part Engine {\n    port FuelSupplyPort {\n      direction in;\n    }\n    port FuelReturnPort {\n      direction out;\n    }\n  }\n\n  flow FuelFlow {\n    source FuelTank.FuelSupplyPort;\n    target Engine.FuelSupplyPort;\n  }\n\n  flow FuelReturnFlow {\n    source Engine.FuelReturnPort;\n    target FuelTank.FuelReturnPort;\n  }\n\n  block FuelMonitor {\n    parameter Temperature;\n  }\n\n  connector FuelSupplyConnector {\n    end FuelTank.FuelSupplyPort;\n    end Engine.FuelSupplyPort;\n  }\n\n  connector FuelReturnConnector {\n    end Engine.FuelReturnPort;\n    end FuelTank.FuelReturnPort;\n",
    "\n\npackage FuelDeliverySystem {\n\n  part StorageTank {\n    attribute maxCapacity;\n    attribute currentLevel;\n  }\n\n  part FuelPump {\n    attribute flowRate;\n  }\n\n  part Vehicle {\n    part FuelTank {\n      attribute maxCapacity;\n      attribute currentLevel;\n    }\n  }\n\n  flow FuelFlow {\n    source StorageTank;\n    target FuelPump;\n  }\n\n  flow FuelFlow {\n    source FuelPump;\n    target Vehicle.FuelTank;\n  }\n\n  requirement FuelTransferRequirement {\n    description \"The system focuses on the transfer and quantity changes of fuel at each stage, ensuring that vehicles can obtain the required fuel in a timely, safe, and accurate manner to meet normal operation needs.\";\n  }\n\n  requirement FuelQuantityRequirement {\n    description \"The system monitors both the maximum capacity and the current fuel level in real-time.\";\n  }\n\n}\n\n––––––––––––––––––––",
    "\n\npackage AutomobileAssembly {\n\n  partType VehicleAssembly {\n\n    part Gearbox;\n\n    part Engine;\n\n  }\n\n  partType VehicleAssemblyWithGearbox {\n\n    part Gearbox;\n\n  }\n\n  partType VehicleAssemblyWithEngine {\n\n    part Engine;\n\n  }\n\n  partType FullyAssembledVehicle {\n\n    part Gearbox;\n\n    part Engine;\n\n  }\n\n  block AssemblyProcess {\n\n    flow AssemblyStep1 : VehicleAssembly -> VehicleAssemblyWithGearbox;\n\n    flow AssemblyStep2 : VehicleAssemblyWithGearbox -> FullyAssembledVehicle;\n\n  }\n\n}\n\npackage AutomobileAssembly {\n\n  partType VehicleAssembly {\n\n    part Gearbox;\n\n    part Engine;\n\n  }\n\n  partType VehicleAssemblyWithGearbox {\n\n    part Gearbox;\n\n  }\n\n  partType VehicleAssemblyWithEngine {\n\n    part Engine;\n\n  }\n\n  partType FullyAssembled",
    "\npackage VehicleSystem {\n  part VehicleA;\n  block Controller;\n  block System;\n  block VehicleController;\n  block VehicleHealthMonitor;\n  block VehiclePowerSupply;\n  block VehicleStartup;\n  block VehicleStateManager;\n  block VehicleTemperatureSensor;\n  block VehicleBrake;\n  block VehicleParkingBrake;\n  block VehicleSelfCheck;\n  block VehicleDegradedMode;\n  block VehicleMaintenanceMode;\n  block VehicleNormalMode;\n  block VehicleOffMode;\n  block VehicleRunningMode;\n  block VehicleStartingMode;\n  block VehicleHealthManagementMode;\n  block StartSignal;\n  block VehicleOnSignal;\n  block RestoreToNormalSignal;\n  block OverTemperatureSignal;\n  flow BrakePedalPressed;\n  flow StartSignalReceived;\n  flow VehicleOnSignalReceived;\n  flow RestoreToNormalSignalReceived;\n  flow OverTemperatureDetected;\n  flow OverTemperatureSignalSent;\n  flow SelfCheckPerformed;",
    "\npackage VehicleBehaviorModeling {\n  part Vehicle {\n    attribute fuel : Real;\n    attribute maintenanceInterval : Integer;\n    attribute temperatureThreshold : Real;\n    attribute status : StatusKind;\n    operation start();\n    operation shutdown();\n    operation selfInspection();\n    operation powerSupply();\n    operation sendWarningSignal();\n    operation switchToDegradedMode();\n    operation regularMaintenance();\n    operation faultRecovery();\n  }\n  part VehicleController {\n    operation receiveAndProcessSignals();\n    operation automaticControl();\n  }\n  block System {\n    part Vehicle;\n    part VehicleController;\n  }\n  enum StatusKind {\n    normal,\n    degraded\n  }\n}\n\nNote:\n- The SysML v2 textual model is a subset of the UML 2.5 textual model.\n- The \"package\" keyword is used to define a namespace.\n- The \"part\" keyword is used to define a class.\n- The \"attribute\" keyword is used to define a property of a class.\n- The \"operation\" keyword is used to",
    "\n\npackage VehicleSimulation {\n\n  part Vehicle {\n    attribute mass : Real;\n    attribute position : Real[2];\n    attribute velocity : Real[2];\n    attribute acceleration : Real[2];\n  }\n\n  part Road {\n    attribute slope : Real;\n    attribute frictionCoefficient : Real;\n  }\n\n  block VehicleSimulationSystem {\n    part vehicle : Vehicle;\n    part road : Road;\n    part simulationTimeSeries : TimeSeries;\n\n    flow snapshotRecording : TimeSeries -> TimeSeries;\n\n    requirement vehicleDynamicsAnalysis : Analysis;\n    requirement roadAdaptabilityAssessment : Analysis;\n\n    constraint vehicleStateTransitions {\n      vehicle.state = 'on' at simulationTimeSeries.start;\n      vehicle.state = 'off' at simulationTimeSeries.end;\n    }\n  }\n\n  block TimeSeries {\n    attribute start : Time;\n    attribute end : Time;\n    attribute timePoints : Time[*];\n  }\n\n  block Analysis {\n    part vehicleSimulationSystem : VehicleSimulationSystem;\n ",
    "\npackage AutomotiveConfigurationSystem {\n  part Automobile;\n  part SubsystemA {\n    part SubsystemA_Config1 {\n      part Component1;\n      part Component2;\n    }\n    part SubsystemA_Config2 {\n      part Component2;\n      part Component3;\n    }\n  }\n  part SubsystemB {\n    part SubsystemB_Config1 {\n      part Component4;\n      part Component5;\n    }\n    part SubsystemB_Config2 {\n      part Component5;\n      part Component6;\n    }\n  }\n  part ConfigurationA {\n    part SubsystemA_Config1;\n    part SubsystemB_Config1;\n  }\n  part ConfigurationB {\n    part SubsystemA_Config2;\n    part SubsystemB_Config1;\n  }\n  constraint Constraint1 {\n    (SubsystemA_Config2.selected) -> (SubsystemB_Config2.selected);\n  }\n  constraint Constraint2 {\n    not (SubsystemA_Config2.selected and not SubsystemB_Config2.selected);\n ",
    "\npackage VehicleConfigurationSystem {\n  part type Part1;\n  part type Part2;\n  part type Part3 {\n    port p1;\n  };\n  part type Part4;\n  part type Part5 {\n    port p2;\n    behavioral variant Variant1;\n    behavioral variant Variant2;\n  };\n  part type Part6;\n  subsystem type SubsystemA {\n    part: Part1[1..*];\n    part: Part2[1..*];\n    part: Part3[1..*];\n    part: Part4[1..*];\n    part: Part5[1..*];\n    port p1;\n    port p2;\n  };\n  subsystem type SubsystemB {\n    part: Part4[1..*];\n    part: Part5[1..*];\n    part: Part6[1..*];\n    port p2;\n    port p3;\n  };\n  configuration type VehicleConfigA {\n    subsystem: SubsystemA[1];\n    subsystem: SubsystemB[1];\n    connection:",
    "\n\npackage VehicleConfigurationSystem {\n\n  part type Engine {\n    attribute cylinders : Integer;\n  }\n\n  part type Transmission {\n    attribute type : TransmissionType;\n  }\n\n  part type Wheel {\n    attribute rimWidth : Real;\n  }\n\n  part type Vehicle {\n    attribute performanceRequirement : PerformanceRequirement;\n    attribute userPreferences : UserPreferences;\n    part engine : Engine;\n    part transmission : Transmission;\n    part wheels : Wheel[4];\n  }\n\n  block VehicleConfigurationSystem {\n    part vehicles : Vehicle[*];\n    operation configureVehicle(v : Vehicle) : Vehicle;\n  }\n\n  constraint Constraint1 {\n    vehicles.engine.cylinders >= 4 and vehicles.engine.cylinders <= 6;\n  }\n\n  constraint Constraint2 {\n    vehicles.transmission.type in {Automatic, Manual};\n  }\n\n  constraint Constraint3 {\n    vehicles.wheels.rimWidth >= 0.0 and vehicles.wheels.rimWidth <= ",
    "\n\npackage AutomobileSystem {\n\n  part Vehicle {\n    attribute mass : Real;\n    attribute fuelStatus : FuelStatus;\n    attribute powertrain : Powertrain;\n    attribute reliability : Reliability;\n  }\n\n  part Engine {\n    attribute torque : Real;\n  }\n\n  part Transmission {\n    attribute driveInterface : DriveInterface;\n  }\n\n  part Powertrain {\n    part engine : Engine;\n    part transmission : Transmission;\n  }\n\n  part DriveInterface {\n    // Define attributes and operations as needed\n  }\n\n  part FuelStatus {\n    // Define attributes and operations as needed\n  }\n\n  part Reliability {\n    // Define attributes and operations as needed\n  }\n\n  // Define relationships and constraints as needed\n}\n\nThis SysML model defines the main components of the automobile system, including vehicles, engines, transmissions, and their interfaces. The model also includes attributes for key properties such as mass, fuel status, powertrain, and reliability. The powertrain is further decomposed into engine and transmission components, each with its own attributes.",
    "\n\npackage VehicleMassComplianceVerificationSystem {\n\n  part Vehicle;\n\n  part WeighingEquipment;\n\n  part TestOperator;\n\n  part ComplianceResult;\n\n  block VehicleMassMeasurement {\n\n    part Vehicle;\n\n    part WeighingEquipment;\n\n    part TestOperator;\n\n    part ComplianceResult;\n\n    flow measureMass {\n\n      source WeighingEquipment;\n\n      target ComplianceResult;\n\n    }\n\n  }\n\n  block ComplianceCheck {\n\n    part ComplianceResult;\n\n    flow checkCompliance {\n\n      source ComplianceResult;\n\n      target ComplianceResult;\n\n    }\n\n  }\n\n  flow testVehicles {\n\n    source Vehicle;\n\n    target ComplianceResult;\n\n  }\n\n}\n\nThis SysML model represents the Vehicle Mass Compliance Verification System, which includes parts such as Vehicle, WeighingEquipment, TestOperator, and ComplianceResult. The V",
    "\n\npackage WaterSupplySystem {\n\n  part type SpigotBank {\n    hotWaterOutlet : FlowPort;\n    coldWaterOutlet : FlowPort;\n  };\n\n  part type Spigot {\n    hotWaterInlet : FlowPort;\n    coldWaterInlet : FlowPort;\n  };\n\n  part type Faucet {\n    hotWaterInlet : FlowPort;\n    coldWaterInlet : FlowPort;\n  };\n\n  flow connection HotWaterConnection {\n    source : SpigotBank.hotWaterOutlet;\n    target : Spigot.hotWaterInlet;\n  };\n\n  flow connection ColdWaterConnection {\n    source : SpigotBank.coldWaterOutlet;\n    target : Spigot.coldWaterInlet;\n  };\n\n  flow connection HotWaterToFaucetConnection {\n    source : Spigot.hotWaterInlet;\n    target : Faucet.hotWaterInlet;\n  };\n\n  flow connection ColdWaterToFaucetConnection {\n    source : Spigot.coldWaterInlet;\n   ",
    "\n\npackage VehicleQualityAnalysisSystem {\n\n  part Vehicle {\n    part Engine;\n    part Transmission;\n    part FrontAxleAssembly;\n    part RearAxleAssembly;\n  }\n\n  block QualityDataInput {\n    [0..*] requirement : InputQualityDataRequirement;\n  }\n\n  block VehicleMassCalculation {\n    [0..*] requirement : CalculateTotalMassRequirement;\n  }\n\n  block QualityAnalysisRequirementDefinition {\n    [0..*] requirement : DefineQualityAnalysisRequirement;\n  }\n\n  block AnalysisUseCaseFormulation {\n    [0..*] requirement : FormulateAnalysisUseCaseRequirement;\n  }\n\n  block AnalysisTaskGeneration {\n    [0..*] requirement : GenerateAnalysisTaskRequirement;\n  }\n\n  block AnalysisPlanGeneration {\n    [0..*] requirement : GenerateAnalysisPlanRequirement;\n  }\n\n  block QualityEvaluation {\n    [0..*] requirement : ComprehensiveEvaluationRequirement;\n    [0..*] requirement : Requirements",
    "\n\npackage VehiclePowertrainConfiguration {\n\n  part type Engine {\n    attribute power : Real;\n    attribute mass : Real;\n    attribute efficiency : Real;\n    attribute reliability : Real;\n    attribute cost : Real;\n  }\n\n  part type FourCylinderEngine extends Engine;\n  part type SixCylinderEngine extends Engine;\n\n  part type Cylinder;\n  part type Piston;\n  part type ConnectingRod;\n  part type Crankshaft;\n\n  part type EngineAssembly {\n    part cylinders : Cylinder[*];\n    part pistons : Piston[*];\n    part connectingRods : ConnectingRod[*];\n    part crankshaft : Crankshaft;\n  }\n\n  block EngineSelectionSystem {\n    part engineConfigurations : EngineAssembly[*];\n\n    flow evaluatePerformance : (EngineAssembly) -> (Real);\n    flow recommendEngine : (EngineAssembly[*]) -> (EngineAssembly);\n    flow explainRationale : (EngineAssembly) -> (String);\n  }\n\n  usage evaluatePer",
    "\n\npackage FuelEconomySystem {\n\n  part Vehicle;\n\n  part FuelTank;\n\n  part Powertrain;\n\n  part Load;\n\n  part OperatingConditions;\n\n  part FuelConsumption;\n\n  part UrbanDrivingScenario;\n\n  part HighwayDrivingScenario;\n\n  part RegulatoryRequirements;\n\n  part PerformanceRequirements;\n\n  Vehicle.rangePerGallon : Real;\n\n  FuelTank.capacity : Real;\n\n  Powertrain.power : Real;\n\n  Load.weight : Real;\n\n  OperatingConditions.speed : Real;\n\n  OperatingConditions.grade : Real;\n\n  FuelConsumption.rate : Real;\n\n  UrbanDrivingScenario.speed : Real;\n\n  UrbanDrivingScenario.grade : Real;\n\n  HighwayDrivingScenario.speed : Real;\n\n  HighwayDrivingScenario.grade : Real;\n\n  RegulatoryRequirements.urbanMinRange : Real;\n\n  RegulatoryRequirements.highwayMin",
    "\npackage VehicleLongitudinalDynamicsSimulation {\n  part Vehicle {\n    attribute mass : Real;\n    attribute position : Real;\n    attribute velocity : Real;\n    attribute acceleration : Real;\n  }\n  part PowerOutputData {\n    attribute segmentedPowerData : Sequence[Real];\n  }\n  part DynamicEquations {\n    attribute timeStep : Real;\n    operation calculateAcceleration() : Real;\n    operation calculateVelocity() : Real;\n    operation calculatePosition() : Real;\n  }\n  flow calculateAcceleration : Vehicle.acceleration;\n  flow calculateVelocity : Vehicle.velocity;\n  flow calculatePosition : Vehicle.position;\n  block VehicleLongitudinalDynamicsSimulation {\n    part : Vehicle;\n    part : PowerOutputData;\n    part : DynamicEquations;\n    flow : calculateAcceleration;\n    flow : calculateVelocity;\n    flow : calculatePosition;\n  }\n}\n\nThis SysML model defines a package named VehicleLongitudinalDynamicsSimulation. Within this package, there are three",
    "\n\npackage VehicleSystem {\n\n  part FrontAxleAssembly {\n    [mass: 150 kg]\n    part FrontWheel[2]\n    part FrontAxle {\n      [mass: 150 kg, steeringAngle: 0 deg]\n    }\n  }\n\n  part RearAxleAssembly {\n    [mass: 250 kg]\n    part RearWheel[2]\n    part RearAxle {\n      [mass: 250 kg]\n    }\n  }\n\n  [mass: 2500 kg]\n\n}\n\nNote:\n\n1. The model is named \"VehicleSystem\".\n2. The total mass of the vehicle is 2,500 kg.\n3. The front axle assembly has a mass of 150 kg and consists of two front wheels and a front axle.\n4. The front axle has a mass of 150 kg and a steering angle of 0 degrees.\n5. The rear axle assembly has a mass of 250 kg and consists of two rear",
    "\n\npackage VehicleSafetySecuritySystem {\n\n  part type SeatBelt {\n    attribute isMandatory : Boolean = true;\n  }\n\n  part type Airbag {\n    attribute isMandatory : Boolean = false;\n  }\n\n  part type AlarmDevice {\n    attribute isSecurityDevice : Boolean = true;\n  }\n\n  part type Bumper {\n    attribute isMandatory : Boolean = true;\n  }\n\n  part type AntiLockBrakingSystem {\n    attribute isMandatory : Boolean = false;\n  }\n\n  part type KeylessEntrySystem {\n    attribute isSecurityDevice : Boolean = true;\n  }\n\n  part type Vehicle {\n    part seatBelt : SeatBelt[1..1];\n    part airbag : Airbag[0..1];\n    part alarmDevice : AlarmDevice[1..*];\n    part bumper : Bumper[1..1];\n    part antiLockBrakingSystem : AntiLockBrakingSystem[0..1];\n    part keylessEntrySystem : KeylessEntrySystem[1..1];\n",
    "\n\npackage System {\n\n  part ApplicationLayer;\n  part ServiceLayer;\n  part DataLayer;\n\n  flow ApplicationLayer.useServiceLayer {\n    source ApplicationLayer;\n    target ServiceLayer;\n  }\n\n  flow ServiceLayer.useDataLayer {\n    source ServiceLayer;\n    target DataLayer;\n  }\n\n  attribute x {\n    owner ApplicationLayer;\n  }\n\n  attribute y {\n    owner ServiceLayer;\n  }\n\n  attribute z {\n    owner System;\n    derivedFrom x, y;\n  }\n\n}\n\n––––––––––––––––––––––––––––––––––\n\nThe given natural-language requirements have been successfully translated into a SysML v2 textual model. The model includes three parts: ApplicationLayer, ServiceLayer, and DataLayer, which represent the layers of the system. Two flows are defined to show the dependencies between the layers: ApplicationLayer uses ServiceLayer, and ServiceLayer uses DataLayer. Three attributes are also defined: x, y, and z. Attribute x is owned",
    "\n\npackage TorqueGenerationSystem {\n\n  part PowertrainSystem;\n\n  part TorqueGenerator {\n    [0..1] component Engine;\n    [1..*] component TorqueComponent;\n\n    constraint TorqueProduction:\n      sum(TorqueComponent.producedTorque) > 0 Nm;\n  };\n\n  blockFunction TorqueGeneration {\n    input PowertrainSystem;\n    output TorqueGenerator;\n\n    allocation AllocateTorqueGeneration:\n      map TorqueGeneration to TorqueGenerator;\n  };\n\n  requirement TorqueGenerationRequirement {\n    derivedRequirement TorqueProductionRequirement:\n      TorqueGenerator.TorqueProduction;\n  };\n\n}\n\n––––––––––––––––––––––––––––––––––\n\nThe given natural-language requirements have been successfully translated into a SysML v2 textual model. The model includes a package named \"TorqueGenerationSystem\" that contains a part \"PowertrainSystem\" and a part \"TorqueGenerator\". The \"TorqueGenerator",
    "\npackage System {\n  part PowerTransmissionSystem;\n  part TorqueGenerator;\n  part Powertrain;\n  part Engine;\n\n  flow PowerTransmission;\n  flow TorqueGeneration;\n\n  PowerTransmissionSystem \"transmits and outputs\" PowerTransmission;\n  PowerTransmissionSystem \"provides\" PowerTransmission;\n  PowerTransmissionSystem \"generates\" TorqueGeneration;\n  TorqueGenerator \"generates\" TorqueGeneration;\n  Powertrain \"contains\" Engine;\n  Engine \"executes\" TorqueGeneration;\n  TorqueGenerator \"maps and implements onto\" Engine;\n}\n\nNote:\n- The \"transmits and outputs\" relationship is represented by the \"flow\" keyword in SysML.\n- The \"provides\" relationship is not explicitly represented in SysML and can be inferred from the \"transmits and outputs\" relationship.\n- The \"generates\" relationship is represented by the \"flow\" keyword in SysML.\n- The \"contains\" relationship is represented by the \"part\" keyword in SysML.\n- The \"executes\" relationship is not explicitly represented in SysML",
    "\npackage VehicleSafetyAndAntiTheftFunctionCatalogue {\n  part Vehicle {\n    part SafetyComponents {\n      part MandatorySafetyComponents {\n        part FrontSeatBelts;\n        part Bumpers;\n      }\n      part OptionalSafetyComponents {\n        part DriversAirbag;\n        part AntiLockBrakingSystem;\n      }\n    }\n    part SecurityComponents {\n      part AlarmSystem;\n      part KeylessEntrySystem;\n    }\n  }\n}\n\n––––––––––––––––––––––––––––––––––\n\nInput Requirement:\nThe Vehicle Communication System is a critical component of the vehicle that enables communication between the vehicle and external systems, such as other vehicles, infrastructure, and the internet. The system must be able to support various communication protocols, such as Bluetooth, Wi-Fi, and 5G, to ensure compatibility and flexibility. The system should also be able to transmit and receive data related to safety, security, and convenience features, such as vehicle-to-veh",
    "\n\npackage FuelSupplySystem {\n  part Vehicle;\n  part FuelSystem {\n    part FuelTankAssembly {\n      part FuelPump;\n      part FuelTank;\n    };\n    part FuelConsumingUnit[*];\n    part ReturnLine;\n  };\n  part FuelFlowPath;\n  part FuelInterface;\n  part FuelTemperatureSensor;\n  part FuelTemperatureMonitor;\n  part FuelTemperatureTransmitter;\n\n  FuelPump -> FuelTank : pressurizes;\n  FuelPump -> FuelConsumingUnit[*] : delivers;\n  ReturnLine -> FuelTank : returns;\n  FuelTemperatureSensor -> FuelTemperatureMonitor : monitors;\n  FuelTemperatureMonitor -> FuelTemperatureTransmitter : transmits;\n  FuelTankAssembly -> FuelFlowPath : follows;\n  FuelFlowPath -> FuelInterface : defines;\n  FuelTankAssembly -> FuelInterface : conformsTo;\n  FuelConsumingUnit[*] -> FuelInterface",
    "\npackage SafetyAndSecurityCompliance {\n  part Vehicle {\n    part Interior {\n      part SeatBelt [2] {\n        applyStereotype SafetyFeature {\n          isMandatory = true;\n        }\n      }\n      part Airbag {\n        applyStereotype SafetyFeature {\n          isMandatory = false;\n        }\n      }\n      part AntiTheftAlarm {\n        applyStereotype SecurityFeature;\n      }\n    }\n    part Body {\n      part Bumper {\n        applyStereotype SafetyFeature {\n          isMandatory = true;\n        }\n      }\n      part KeylessEntrySystem {\n        applyStereotype SecurityFeature;\n      }\n    }\n    part Chassis {\n      part Wheel [2];\n      part AntiLockBrakingSystem [2] {\n        applyStereotype SafetyFeature {\n          isMandatory = false;\n        }\n      }\n    }\n  }\n  applyStereotype IdentificationAndClassificationManagement;\n}\n\nNote:\n- The SysML v2 textual model is a",
    "\n\npackage VehicleSafetySecuritySystem {\n  part Interior {\n    part AlarmSystem;\n    part SeatBelt;\n    part FrontRowSeat;\n    part DriversAirbag;\n  }\n  part BodyAssembly {\n    part VehicleBody;\n    part Bumper;\n    part KeylessEntrySystem;\n  }\n  blockBehavior SafetyFeatures {\n    usage SeatBelt;\n    usage DriversAirbag;\n    usage Bumper;\n  }\n  blockBehavior SecurityFeatures {\n    usage AlarmSystem;\n    usage KeylessEntrySystem;\n  }\n}\n\n––––––––––––––––––––––––––––––––––\n\nThe given natural-language requirements have been successfully transformed into a SysML v2 textual model. The model includes a package named \"VehicleSafetySecuritySystem\" that contains two parts: \"Interior\" and \"BodyAssembly\". The \"Interior\" part includes sub-parts such as \"AlarmSystem\", \"SeatBelt\", \"FrontRowSe",
    "\n\npackage InformationSecurityManagement {\n\n  part type Component {\n    attribute classification : ClassificationLevel;\n  }\n\n  enumeration ClassificationLevel {\n    Unclassified,\n    Confidential,\n    Secret\n  }\n\n  block System {\n    part components : Component[*];\n    flow classifyAndLabelComponents {\n      source : System;\n      target : components;\n      parameter : classification : ClassificationLevel;\n    }\n    flow displayClassificationAttribute {\n      source : components;\n      guard : components.classification = ClassificationLevel::Confidential;\n      target : System;\n    }\n  }\n}\n\n––––––––––––––––––––––––––––––––––\n\nThe given natural-language requirements have been successfully translated into a SysML v2 textual model. The model defines a package called \"InformationSecurityManagement\" that contains a part type \"Component\" with an attribute \"classification\" of type \"ClassificationLevel\". The \"ClassificationLevel\" is an enumeration that includes the values \"Unclassified\",",
    "\n\npackage AutomotiveECUModel {\n\n  part VehicleControlUnit;\n\n  part EngineControlUnit;\n\n  part CANBus;\n\n  interface BusIF {\n\n    end VehicleControlUnit;\n\n    end EngineControlUnit;\n\n    end CANBus;\n\n  }\n\n  interface SensorDataExchange;\n\n}\n\n––––––––––––––––––––––––––––––––––\n\nThe given natural-language requirements have been successfully translated into a SysML v2 textual model. The model is structured within a package named \"AutomotiveECUModel\". This package contains three parts: \"VehicleControlUnit\", \"EngineControlUnit\", and \"CANBus\". Additionally, there are two interfaces defined: \"BusIF\" and \"SensorDataExchange\". The \"BusIF\" interface connects the \"VehicleControlUnit\", \"EngineControlUnit\", and \"CANBus\" parts, enabling communication and control between these components. The \"SensorDataExchange\" interface is reserved for future functional expansion, suggesting potential support for additional sensor data exchange",
    "\n\npackage BloodGlucoseMeterSystem {\n  part Battery {\n    attribute status;\n  }\n  part GlucoseMeasurementFunction {\n    attribute measurement;\n  }\n  block System {\n    part Battery;\n    part GlucoseMeasurementFunction;\n    requirement BatteryStatusPrevention {\n      description \"Implement preventive measures for battery status\";\n    }\n    requirement AbnormalGlucoseMeasurementAlert {\n      description \"Have appropriate alarm and emergency response mechanisms in case of abnormalities in the blood glucose measurement function\";\n    }\n    requirement RigorousApproval {\n      description \"Related system requirements have undergone rigorous approval\";\n    }\n    requirement RiskManagement {\n      description \"Management measures have been established for key risk scenarios to ensure that patients can receive timely, continuous, and safe therapeutic support under all circumstances\";\n    }\n    flow BatteryStatusDetection {\n      source Battery;\n      target System;\n      description \"Automatically detect the battery status\";\n    }\n    flow BatteryAlert {\n      source System;\n      target User;\n      description \"",
    "\n\npackage ScientificComputing {\n\n  part type Constant {\n    [0..1] attribute value : Real;\n    [0..1] attribute unit : String;\n  }\n\n  part type MathematicalConstant extends Constant {\n    [1] attribute name : String;\n  }\n\n  part type PhysicalConstant extends Constant {\n    [1] attribute name : String;\n  }\n\n  part type ScenarioBasedConstant extends Constant {\n    [1] attribute name : String;\n    [1] attribute scenario : String;\n  }\n\n  part instance EulerNumber : MathematicalConstant {\n    value = 2.71828182845904523536;\n    name = \"Euler's number\";\n  }\n\n  part instance Pi : MathematicalConstant {\n    value = 3.14159265358979323846;\n    name = \"Pi\";\n  }\n\n  part instance SpeedOfLight : PhysicalConstant {\n    value = 299792458;\n",
    "\n\npackage AutomotiveComponents {\n\n  partType Tire {\n\n    attribute manufacturer : String;\n\n    attribute rimDiameter : Real;\n\n    attribute width : Integer;\n\n  }\n\n  partDefinition MichelinTire : Tire {\n\n    parameter: manufacturer = \"Michelin\";\n\n    parameter: rimDiameter = 18.0;\n\n    parameter: width = 245;\n\n  }\n\n}\n\n––––––––––––––––––––––––––––––––––\n\nThe given natural-language requirements have been successfully translated into a SysML v2 textual model. The model includes a package named \"AutomotiveComponents\" that contains a partType named \"Tire\". The \"Tire\" partType has three attributes: \"manufacturer\" of type String, \"rimDiameter\" of type Real, and \"width\" of type Integer. Additionally, the model includes a partDefinition named \"MichelinTire\" that is an instance of the \"Tire\" partType. The \"",
    "\n\npackage AutomotiveComponentModel {\n\n  part Vehicle {\n    attribute mass : Real [1] {\n      unit \"kg\"\n      unit \"lbs\"\n    }\n    attribute length : Real [1] {\n      unit \"m\"\n      unit \"ft\"\n    }\n    part leftFrontWheel : Wheel [1]\n    part rightFrontWheel : Wheel [1]\n  }\n\n  part Wheel {\n    attribute hubDiameter : Real [1] {\n      unit \"in\"\n      unit \"mm\"\n    }\n    attribute width : Real [1] {\n      unit \"mm\"\n      unit \"in\"\n    }\n    attribute outerDiameter : Real [1] {\n      derived\n    }\n    part tire : Tire [1]\n  }\n\n  part Tire {\n  }\n\n}\n\nNote:\n- The derived attribute 'outerDiameter' is not explicitly defined in the requirements, but it is implied by the statement \"the outer diameter of the wheel determined by both the hub diameter and the tire height\".\n- The 'Tire' part",
    "\npackage VehicleConfiguration {\n  part Vehicle {\n    part Engine {\n      part FourCylinderEngine;\n      part SixCylinderEngine;\n    }\n    part Transmission {\n      part ManualTransmission;\n      part AutomaticTransmission;\n    }\n  }\n  block VehicleConfiguration {\n    part Vehicle;\n    part Engine;\n    part Transmission;\n    constraint selectOneEngine: Vehicle.Engine->size() = 1;\n    constraint selectOneTransmission: Vehicle.Transmission->size() = 1;\n    constraint highPerformanceSixCylinder: Vehicle.isHighPerformance implies Vehicle.Engine->includes(SixCylinderEngine);\n    constraint fourCylinderManual: Vehicle.Engine->includes(FourCylinderEngine) implies Vehicle.Transmission->includes(ManualTransmission);\n    constraint sixCylinderAutomatic: Vehicle.Engine->includes(SixCylinderEngine) implies Vehicle.Transmission->includes(AutomaticTransmission);\n  }\n}\n\nThis SysML model defines a package called Vehicle",
    "\n\npackage AutomotiveComponentModeling {\n\n  partType Vehicle {\n    attribute totalMass : Real {\n      value 1200.0\n      unit \"kg\"\n    }\n    attribute length : Real {\n      value 4.82\n      unit \"m\"\n    }\n    part wheelAssembly[*] {\n      part tire[*] {\n        attribute rimDiameter : Real {\n          value 0.4572\n          unit \"m\"\n        }\n        attribute width : Real {\n          value 0.245\n          unit \"m\"\n        }\n        attribute height : Real {\n          value 0.045\n          unit \"m\"\n        }\n        attribute treadDepth : Real {\n          value 0.006\n          unit \"m\"\n        }\n        constraint treadDepth >= 0.0035\n      }\n      part brakeDiscAssembly {\n        attribute radius : Real {\n          value 0.095\n          unit \"m\"\n        }\n        constraint diameter < tire.outerDiameter\n      }",
    "\n\npackage AutomotiveFuelSystem {\n\n  part FuelTankAssembly {\n    port fuelOutlet {\n      direction in out;\n      interface Fuel;\n    }\n  }\n\n  part FuelPump {\n    port fuelIn {\n      direction in;\n      interface Fuel;\n    }\n    port fuelOut {\n      direction out;\n      interface Fuel;\n    }\n  }\n\n  flow FuelCirculation {\n    source FuelTankAssembly.fuelOutlet;\n    target FuelPump.fuelIn;\n  }\n\n  flow FuelSupply {\n    source FuelPump.fuelOut;\n    target Engine;\n  }\n\n  flow FuelReturn {\n    source Engine;\n    target FuelPump.fuelIn;\n  }\n\n  flow FuelTemperatureInfo {\n    source FuelTankAssembly;\n    target SystemMonitor;\n    interface TemperatureInfo;\n  }\n\n  requirement EfficientCirculation {\n    derivedRequirement FuelCirculation;\n  }\n\n  requirement",
    "\n\npackage PhysicalQuantitySystem {\n\n  part PhysicalQuantity {\n    attribute name : String;\n    attribute symbol : String;\n    attribute baseQuantity : Boolean;\n    attribute unit : Unit[*];\n  }\n\n  part Unit {\n    attribute name : String;\n    attribute symbol : String;\n    attribute conversionFactor : Real;\n  }\n\n  part ImportOperation {\n    operation importQuantity(quantity : PhysicalQuantity);\n  }\n\n  part ExtendOperation {\n    operation extendQuantity(quantity : PhysicalQuantity);\n  }\n\n  part UnitConversionOperation {\n    operation convertUnit(fromUnit : Unit, toUnit : Unit, value : Real) : Real;\n  }\n\n  part DataProcessingOperation {\n    operation processData(quantity : PhysicalQuantity, data : Real);\n  }\n\n  part UserRequirement {\n    attribute requirement : String;\n  }\n\n  PhysicalQuantity.unit[*] -- Unit.quantity[*];\n  ImportOperation.importQuantity(quantity : PhysicalQuantity) -- PhysicalQuantity;\n  Extend",
    "\n\npackage UnitSystemLibrary {\n\n  part UnitType {\n    attribute name : String;\n    attribute symbol : String;\n    attribute definition : String;\n    attribute conversionFactor : Real;\n  }\n\n  part ISQUnit extends UnitType {\n    attribute baseUnit : UnitType[1];\n    attribute prefix : String;\n  }\n\n  part USCustomaryUnit extends UnitType {\n    attribute baseUnit : UnitType[1];\n  }\n\n  part UnitConversionService {\n    operation convert(sourceUnit : UnitType, targetUnit : UnitType) : Real;\n  }\n\n  part UnitManagementService {\n    operation addUnit(unit : UnitType) : Boolean;\n    operation removeUnit(unit : UnitType) : Boolean;\n    operation getUnit(name : String) : UnitType[0..1];\n    operation listUnits() : Sequence<UnitType>;\n  }\n\n  part UnitApplicationService {\n    operation applyUnit(quantity : Real, unit : UnitType) : Real;\n  }\n\n  usage unitConversionService : UnitConversionService;\n  usage unitManagementService",
    "\n\npackage HeadlampBeamAdjustmentSystem {\n\n  part HeadlampBeamAdjustmentKnob;\n\n  part HeadlampBeam;\n\n  flow HeadlampBeamAdjustment;\n\n  block HeadlampBeamAdjustmentVerification;\n\n  block HeadlampBeamAdjustmentValidation;\n\n  block SIUnitConversion;\n\n  block RealNumberConstants;\n\n  HeadlampBeamAdjustmentKnob.flow[1] = HeadlampBeamAdjustment;\n\n  HeadlampBeamAdjustment.source = HeadlampBeamAdjustmentKnob;\n\n  HeadlampBeamAdjustment.target = HeadlampBeam;\n\n  HeadlampBeamAdjustmentVerification.nestedNode[1] = SIUnitConversion;\n\n  HeadlampBeamAdjustmentVerification.nestedNode[2] = RealNumberConstants;\n\n  HeadlampBeamAdjustmentValidation.nestedNode[1] = SIUnitConversion;\n\n  HeadlampBeamAdjustmentValidation.nestedNode[2] = RealNumberConstants;\n\n  Head",
    "\n\npackage DataTypes {\n\n  datatype UnsignedInteger {\n    property value : Integer[1..*];\n    constraint value >= 0;\n  };\n\n  datatype UnsignedFloat {\n    property value : Real[1..*];\n    constraint value >= 0;\n  };\n\n  datatype DateTime {\n    property value : DateTime[1..1];\n  };\n\n  datatype String {\n    property value : String[1..*];\n  };\n\n  datatype Boolean {\n    property value : Boolean[1..1];\n  };\n\n  datatype StatusColor {\n    property color : String[1..1];\n    property level : StatusLevel[1..1];\n  };\n\n  enum StatusLevel {\n    values = (Critical, Warning, Normal);\n  };\n\n  datatype Diameter {\n    property value : Real[1..1];\n    property options : DiameterOptions[1..1];\n    constraint value = options.value;\n  };\n\n  enum DiameterOptions {\n    values = (Small, Medium, Large);\n    property",
    "\n\npackage SparePartsManagement {\n\n  class SparePart {\n  }\n\n  class Person {\n  }\n\n  class Real {\n  }\n\n  class Integer {\n  }\n\n  class String {\n  }\n\n  class Bag {\n    element[0..*] SparePart;\n  }\n\n  class List {\n    element[0..*] Integer;\n  }\n\n  class Set {\n    element[0..*] String;\n  }\n\n  class OrderedSet {\n    element[0..*] Person;\n  }\n\n  class Array {\n    element[0..3] Real;\n  }\n\n  class NestedCollection {\n    element[0..*] Set<Person>;\n  }\n\n  class System {\n    part[0..*] Bag;\n    part[0..*] List;\n    part[0..*] Set;\n    part[0..*] OrderedSet;\n    part[0..*] Array;\n    part[0..*] NestedCollection;\n  }\n\n}\n\nThis",
    "\n\npackage TireInformationSystem {\n\n  part type Tire {\n    attribute manufacturerName : String;\n    attribute rimDiameter : Real;\n    attribute tireWidth : Real;\n    attribute installationPosition : Vector[3];\n  }\n\n  block TireDatabase {\n    feature tires : Tire[*];\n  }\n\n  block UserInterface {\n    feature displayTireInformation(t : Tire);\n  }\n\n  block TireInformationSystem {\n    part tireDatabase : TireDatabase;\n    part userInterface : UserInterface;\n  }\n\n  flow displayTireInformation {\n    source userInterface.displayTireInformation;\n    target tireDatabase.tires;\n  }\n\n}\n\n––––––––––––––––––––––––––––––––––\n\nThe given natural-language requirement is translated into a SysML v2 textual model that includes a TireInformationSystem package. Within this package, there is a Tire part type that has attributes for manufacturerName, rimDiameter, tireWidth,",
    "\n\npackage SpacecraftTrajectoryRecording {\n  part Spacecraft {\n    attribute position : Real[3];\n    attribute velocity : Real[3];\n  }\n\n  part TrajectoryRecorder {\n    attribute referenceTime : Real;\n    attribute liftoffTime : Time;\n    attribute sampledData : List<SampledDataPoint>;\n  }\n\n  part SampledDataPoint {\n    attribute time : Real;\n    attribute position : Real[3];\n    attribute velocity : Real[3];\n  }\n\n  association asctoRec {\n    Spacecraft asctoRec.spacecraft [1..1] to TrajectoryRecorder asctoRec.recorder [1..1];\n  }\n\n  association recToData {\n    TrajectoryRecorder recToData.recorder [1..1] to SampledDataPoint recToData.dataPoint [*];\n  }\n}\n\nThe system model includes a Spacecraft part with attributes for position and velocity. A TrajectoryRecorder part is also defined with attributes for referenceTime, liftoffTime, and sampledData. The sam",
    "\n\npackage MaterialScience {\n\n  part type Substance {\n    attribute atomicMass : Real;\n  }\n\n  part type Material extends Substance {\n  }\n\n  part type Metal extends Material {\n  }\n\n  part type Alloy extends Material {\n    attribute componentMaterials[*] : Material;\n    attribute massFractions[*] : Real;\n    attribute tensileStrength : Real;\n  }\n\n  part type CommonMetal extends Metal {\n    attribute name : String;\n  }\n\n  part type TypicalAlloy extends Alloy {\n    attribute name : String;\n  }\n\n  part type SIUnit {\n    attribute name : String;\n  }\n\n  part type NewtonPerSquareMillimeter extends SIUnit {\n  }\n\n  part type Property {\n    attribute value : Real;\n    attribute unit : SIUnit;\n  }\n\n  part type MechanicalProperty extends Property {\n  }\n\n  part type TensileStrength extends MechanicalProperty {\n  }\n\n  part type MaterialScienceSystem {\n    attribute substances[",
    "\n\npackage EngineeringMaterialsDatabase {\n\n  part type Material {\n    attribute atomicMass : Real;\n    attribute compositionalInformation : CompositionalInformation;\n    attribute mechanicalPropertyIndicators : MechanicalPropertyIndicators;\n  }\n\n  part type Metal extends Material {\n    attribute compositionalInformation : CompositionalInformation {\n      attribute massFraction : Real[*];\n    }\n  }\n\n  part type Alloy extends Metal {\n    // No additional attributes\n  }\n\n  part type CompositionalInformation {\n    attribute constituentMaterials : Material[*];\n    attribute massFraction : Real[*];\n  }\n\n  part type MechanicalPropertyIndicators {\n    attribute tensileStrength : Real;\n    attribute unit : Unit;\n  }\n\n  part type Unit {\n    attribute name : String;\n    attribute conversionFactor : Real;\n  }\n\n  part type Steel_980 extends Alloy {\n    attribute compositionalInformation : CompositionalInformation {\n      attribute constituentMaterials : Material[3] {\n        Iron;\n        Carbon;\n        M",
    "\n\npackage PubSubSystem {\n  part Publisher;\n  part Subscriber;\n  part Server;\n  flow PublishMessage;\n  flow SubscribeTopic;\n  flow DistributeMessage;\n  PublishMessage.source = Publisher;\n  PublishMessage.target = Server;\n  SubscribeTopic.source = Subscriber;\n  SubscribeTopic.target = Server;\n  DistributeMessage.source = Server;\n  DistributeMessage.target = Subscriber;\n}\n\nThe system model includes three parts: Publisher, Subscriber, and Server. It also includes three flows: PublishMessage, SubscribeTopic, and DistributeMessage. The PublishMessage flow is from Publisher to Server, the SubscribeTopic flow is from Subscriber to Server, and the DistributeMessage flow is from Server to Subscriber.",
    "\n\npackage VehicleFuelSystem {\n\n  part FuelTankAssembly;\n\n  part Engine;\n\n  part FuelLine;\n\n  flow FuelSupply;\n\n  flow FuelReturn;\n\n  flow FuelTemperatureInfo;\n\n  FuelTankAssembly.outgoingFuelSupply[1] = FuelSupply;\n\n  FuelSupply.to[1] = FuelLine;\n\n  FuelLine.to[1] = Engine;\n\n  Engine.outgoingFuelReturn[1] = FuelReturn;\n\n  FuelReturn.to[1] = FuelLine;\n\n  FuelLine.to[2] = FuelTankAssembly;\n\n  Engine.outgoingFuelTemperatureInfo[1] = FuelTemperatureInfo;\n\n  FuelTemperatureInfo.to[1] = System;\n\n}\n\nThis SysML model represents the basic structure and operating principles of a vehicle fuel system. The FuelTankAssembly and Engine are parts of the system, connected by FuelLines for fuel supply and return. The Fuel",
    "\n\npackage PublishSubscribeMessageFlow {\n\n  part Producer {\n    sendMessage(m: Message) : void;\n  }\n\n  part Server {\n    publish(m: Message) : void;\n    subscribe(t: Topic) : void;\n    deliver(m: Message) : void;\n  }\n\n  part Consumer {\n    receiveMessage(m: Message) : void;\n  }\n\n  flow publishMessage {\n    source Producer::sendMessage;\n    target Server::publish;\n  }\n\n  flow subscribeTopic {\n    source Consumer;\n    target Server::subscribe;\n  }\n\n  flow deliverMessage {\n    source Server::deliver;\n    target Consumer::receiveMessage;\n  }\n\n  item Message {\n    topic : Topic;\n  }\n\n  item Topic {\n  }\n\n  usage publishSubscription {\n    client Server;\n    supplier publishMessage;\n    client Consumer;\n    supplier subscribeTopic;\n  }\n\n  usage deliverSubscription {\n    client Server;\n    supplier deliverMessage;\n    client",
    "\n\npackage TransportationSystem {\n  part User;\n  part Driver;\n  part Passenger;\n  part Vehicle;\n  part GasStation;\n  part Environment;\n\n  block Boarding {\n    part BoardingUser;\n    part BoardingVehicle;\n    flow BoardingFlow;\n  }\n\n  block Refueling {\n    part RefuelingDriver;\n    part RefuelingVehicle;\n    part RefuelingGasStation;\n    flow RefuelingFlow;\n  }\n\n  block Alighting {\n    part AlightingUser;\n    part AlightingVehicle;\n    flow AlightingFlow;\n  }\n\n  flow TransportationFlow;\n\n  constraint FuelLevelConstraint {\n    Vehicle.fuelLevel > 0.1 * Vehicle.maxTankCapacity;\n  }\n\n  requirement SafetyRequirement {\n    AllUsers.safelyExitsVehicle;\n  }\n\n  requirement EfficiencyRequirement {\n    TransportationFlow.isEfficient;\n  }\n\n  requirement SmoothnessRequirement {\n    Board",
    "\n\npackage FuelSupplyAndReturnSystem {\n\n  part FuelTankAssembly;\n\n  part EngineUnit;\n\n  interface FuelInterface {\n\n    flow FuelFlow;\n\n    attribute FuelTemperature;\n\n  }\n\n  port FuelOutletPort {\n\n    flow FuelFlow;\n\n    attribute FuelTemperature;\n\n  }\n\n  port FuelInletPort {\n\n    flow FuelFlow;\n\n    attribute FuelTemperature;\n\n  }\n\n  FuelTankAssembly.FuelOutletPort: FuelInterface.FuelFlow;\n\n  EngineUnit.FuelInletPort: FuelInterface.FuelFlow;\n\n}\n\nThe system is modeled as a package named \"FuelSupplyAndReturnSystem\". It contains two parts: \"FuelTankAssembly\" and \"EngineUnit\". An interface named \"FuelInterface\" is defined to connect the fuel tank and the engine. This interface has a flow named \"FuelFlow\" and an attribute named \"FuelTemperature\". The fuel tank has a port named \"FuelOutletPort\"",
    "\n\npackage VehicleFuelSystem {\n\n  part FuelTankAssembly {\n    port fuelSupplyPort {\n      flow fuelFlow;\n      parameter fuelTemperature;\n    }\n    port fuelReturnPort {\n      flow fuelFlow;\n      parameter fuelTemperature;\n    }\n  }\n\n  part Engine {\n    port fuelSupplyPort {\n      flow fuelFlow;\n      parameter fuelTemperature;\n    }\n    port fuelReturnPort {\n      flow fuelFlow;\n      parameter fuelTemperature;\n    }\n  }\n\n  flow FuelFlow {\n    source FuelTankAssembly.fuelSupplyPort;\n    target Engine.fuelSupplyPort;\n  }\n\n  flow FuelReturnFlow {\n    source Engine.fuelReturnPort;\n    target FuelTankAssembly.fuelReturnPort;\n  }\n\n  require ReliabilityRequirement {\n    description \"The system should ensure reliable fuel flow and information tracking during both supply and return processes.\";\n  }\n\n  require SafetyRequirement {\n    description \"The system should meet the requirements for safety during normal vehicle operation",
    "\n\npackage PhotoCaptureSystem {\n\n  part User;\n\n  part Scene;\n\n  part System;\n\n  block Focusing {\n    input Scene;\n    output IntermediateImage;\n  };\n\n  block Shooting {\n    input IntermediateImage;\n    output FinalPhoto;\n  };\n\n  flow FocusAndShoot {\n    source User;\n    target FinalPhoto;\n    flowProperty SceneSelection;\n    flowProperty Focusing;\n    flowProperty Shooting;\n  };\n\n  itemSelection SceneSelection {\n    selectingItem Scene;\n    selectedItem Scene;\n  };\n\n  usage FocusingUsage {\n    client System;\n    supplier Focusing;\n  };\n\n  usage ShootingUsage {\n    client System;\n    supplier Shooting;\n  };\n\n  flow SceneSelectionFlow {\n    source User;\n    target Scene;\n  };\n\n  flow IntermediateImageFlow {\n    source Focusing;\n    target Shooting;\n  };\n\n  flow FinalPhotoFlow {\n    source Shooting;\n   ",
    "\n\npackage PhotographyWorkflow {\n\n  block PhotographySystem {\n\n    part SceneSelection {\n\n      [1] operation selectScene();\n\n    }\n\n    part Focusing {\n\n      [1] operation focusScene();\n\n    }\n\n    part Shooting {\n\n      [1] operation shoot();\n\n    }\n\n    flow focusFlow {\n\n      source SceneSelection;\n\n      target Focusing;\n\n    }\n\n    flow shootFlow {\n\n      source Focusing;\n\n      target Shooting;\n\n    }\n\n  }\n\n}\n\nThe system is named \"PhotographySystem\" and is contained within the \"PhotographyWorkflow\" package. It has three parts: \"SceneSelection\", \"Focusing\", and \"Shooting\". The \"SceneSelection\" part has an operation \"selectScene()\". The \"Focusing\" part has an operation \"focusScene()\". The \"Shooting\" part has an operation \"shoot()\". There are two flows: \"focusFlow\" and \"shootFlow\". The \"focusFlow\" flow goes from \"SceneSelection\" to \"",
    "\n\npackage PhotographyWorkflow {\n\n  part PhotographySystem {\n\n    [1] operation selectScene();\n\n    [1] operation performFocusing();\n\n    [1] operation performShooting();\n\n    [1] operation completeWorkflow();\n\n    [1..1] flow selectSceneToFocusing {\n\n      source selectScene;\n\n      target performFocusing;\n\n    }\n\n    [1..1] flow focusingToShooting {\n\n      source performFocusing;\n\n      target performShooting;\n\n    }\n\n    [1..1] flow shootingToWorkflowCompletion {\n\n      source performShooting;\n\n      target completeWorkflow;\n\n    }\n\n  }\n\n}\n\nThe system model includes a package named \"PhotographyWorkflow\" that contains a part named \"PhotographySystem\". The \"PhotographySystem\" part has four operations: \"selectScene\", \"performFocusing\", \"performShooting\", and \"completeWorkflow\". There are three flows defined to represent the workflow: \"selectSceneToFocusing\", \"focusingToSh",
    "\n\npackage PhotographyAutomationSystem {\n\n  part PhotographyAutomationSystem;\n\n  part User;\n\n  part ShootingScene;\n\n  block FocusProcessing {\n\n    input ShootingScene;\n\n    output Image;\n\n  };\n\n  block ShootingOperation {\n\n    input Image;\n\n    output Photograph;\n\n  };\n\n  flow FocusToShooting {\n\n    source FocusProcessing.output;\n\n    target ShootingOperation.input;\n\n  };\n\n  flow UserToScene {\n\n    source User;\n\n    target ShootingScene;\n\n  };\n\n  flow ShootingToUser {\n\n    source ShootingOperation.output;\n\n    target User;\n\n  };\n\n}\n\nThis SysML model represents the Photography Automation System, which consists of three main parts: the PhotographyAutomationSystem itself, the User, and the ShootingScene. The system performs two main operations: FocusProcessing and ShootingOperation. The FocusProcessing block takes the ShootingScene as input and outputs an Image. The Shoot",
    "\npackage PhotographyWorkflow {\n  part type Scene;\n  part type Image;\n  part type Picture;\n  block Focus {\n    in part Scene;\n    out part Image;\n  };\n  block Shoot {\n    in part Image;\n    out part Picture;\n  };\n}\n\nExplanation:\nThe system is modeled as a package named \"PhotographyWorkflow\". It contains three part types: \"Scene\", \"Image\", and \"Picture\". Two blocks, \"Focus\" and \"Shoot\", are defined to represent the focusing and shooting operations. The \"Focus\" block takes a \"Scene\" as input and produces an \"Image\" as output. The \"Shoot\" block takes an \"Image\" as input and produces a \"Picture\" as output.",
    "\n\npackage PhotographyWorkflow {\n\n  part type Camera {\n    [1] operation focus();\n    [1] operation shoot();\n  }\n\n  block PhotographySystem {\n    [1..1] part camera;\n    [1] operation selectScene();\n    [1] operation capturePhotograph();\n  }\n\n  flow PhotographyWorkflow {\n    source PhotographySystem::selectScene;\n    target PhotographySystem::capturePhotograph;\n    guard [1] focusClear : Boolean;\n    parameter [1] scene : Scene;\n    parameter [1] finalImage : Image;\n  }\n\n  item flow PhotographyWorkflow::focusing {\n    source PhotographySystem::camera;\n    target PhotographySystem::camera.focus;\n    parameter [1] scene : Scene;\n  }\n\n  item flow PhotographyWorkflow::shooting {\n    source PhotographySystem::camera;\n    target PhotographySystem::camera.shoot;\n    parameter [1] finalImage : Image;\n  }\n\n  item flow PhotographyWorkflow::focusClearCheck {\n    source Phot",
    "\n\npackage PhotographyWorkflow {\n\n  part User;\n\n  part Scene;\n\n  part Image;\n\n  part Photo;\n\n  block Focusing {\n    input Scene;\n    output Image;\n  };\n\n  block Evaluation {\n    input Image;\n    output boolean;\n  };\n\n  block Shooting {\n    input Image;\n    output Photo;\n  };\n\n  block ShootingProcess {\n    input Scene;\n    output Photo;\n    part Focusing;\n    part Evaluation;\n    part Shooting;\n    flow f1: Scene -> Focusing.Scene;\n    flow f2: Focusing.Image -> Evaluation.Image;\n    flow f3: Evaluation.boolean -> Shooting.enable;\n    flow f4: Focusing.Image -> Shooting.Image;\n    flow f5: Shooting.Photo -> Photo;\n  };\n\n  interaction UserInteraction {\n    item User;\n    item Scene;\n    item Photo;\n    item ShootingProcess;\n    flow f6: User.select",
    "\n\npackage PhotographyWorkflow {\n\n  part PhotographySystem {\n\n    operation takePhoto() {\n\n      parttype SceneAcquisition {\n\n        operation acquireScene() : Scene;\n\n      }\n\n      parttype FocusFunction {\n\n        operation focus(scene : Scene) : Image;\n\n      }\n\n      parttype ShootingOperation {\n\n        operation shoot(image : Image) : Photo;\n\n      }\n\n      parttype DisplayOperation {\n\n        operation display(photo : Photo) : void;\n\n      }\n\n      // Implementation\n\n      scene = acquireScene();\n\n      image = focus(scene);\n\n      photo = shoot(image);\n\n      display(photo);\n\n    }\n\n  }\n\n}\n\n––––––––––––––––––––––––––––––––––\n\nThe given natural-language requirement is about designing a photography workflow system that automatically completes all steps once the \"take photo\" operation is triggered. The system includes components for scene acquisition, focus function",
    "\n\npackage AutomaticBrakingControlSystem {\n\n  part Vehicle;\n\n  block AutomaticBrakingControlSystem {\n\n    port startPosition;\n\n    port brakePedalStatus;\n\n    port tractionInformation;\n\n    port brakePressure;\n\n    port brakeModulationFrequency;\n\n    block BrakePressureDetection {\n\n      port brakePedalStatus (in);\n\n      port brakePressure (out);\n\n    };\n\n    block TractionEvaluation {\n\n      port tractionInformation (in);\n\n      port brakeModulationFrequency (out);\n\n    };\n\n    block IntelligentBrakeControl {\n\n      port brakePressure (in);\n\n      port brakeModulationFrequency (in);\n\n      port brakePressure (out);\n\n    };\n\n    block SafeBrakingPerformance {\n\n      port brakePressure (in);\n\n      port brakeModulationFrequency (in);\n\n    };\n\n  };\n\n  flow f1 {\n\n    source startPosition;\n",
    "\n\npackage BatteryChargingSystem {\n  part Battery;\n  part BatteryChargingController;\n\n  flow BatteryLevel;\n  flow Charge;\n\n  block BatteryCapacityMonitoring {\n    requirement: \"Monitor the current battery level in real time\";\n    out BatteryLevel;\n  };\n\n  block AutomaticCharging {\n    requirement: \"Automatically supply charge when the battery level is below 100%\";\n    in BatteryLevel;\n    out Charge;\n  };\n\n  block ChargingTerminationControl {\n    requirement: \"Automatically terminate the charging process when the battery level reaches or exceeds 100%\";\n    in BatteryLevel;\n    in Charge;\n  };\n\n  usage BatteryChargingController_BatteryCapacityMonitoring {\n    source BatteryChargingController;\n    target BatteryCapacityMonitoring;\n  };\n\n  usage BatteryChargingController_AutomaticCharging {\n    source BatteryChargingController;\n    target AutomaticCharging;\n  };\n\n  usage",
    "\n\npackage BatteryChargingSystem {\n  part Battery;\n  part Charger;\n  block ChargingProcess {\n    flow currentBatteryLevel;\n    flow chargingStatus;\n    flow chargingOperation;\n    parameter batteryLevelThreshold = 100;\n    parameter chargingTerminationCondition = (currentBatteryLevel >= batteryLevelThreshold);\n    requirement r1 = \"The system continuously monitors the current battery level.\";\n    requirement r2 = \"If the battery level is below 100%, it will automatically replenish the battery.\";\n    requirement r3 = \"The system automatically terminates the charging process when the battery level reaches or exceeds 100%.\";\n    requirement r4 = \"The entire charging operation is fully automated, requiring no manual intervention.\";\n    requirement r5 = \"The system safely and reliably fully charges the battery while preventing overcharging.\";\n    constraint c1 = chargingOperation.at(chargingStatus.start) implies currentBatteryLevel < batteryLevelThreshold;\n    constraint c2 = chargingOperation.at(chargingStatus.end) implies chargingTerminationCondition;\n    constraint c3 = chargingOperation.",
    "\n\npackage CameraSystem {\n\n  part Camera;\n\n  part AutofocusSubsystem;\n\n  part ImagingSubsystem;\n\n  part Photo;\n\n  part User;\n\n  Camera.focusesOn(AutofocusSubsystem);\n\n  Camera.captures(ImagingSubsystem);\n\n  Camera.records(Photo);\n\n  User.selects(Camera);\n\n  User.uses(Camera);\n\n}\n\n––––––––––––––––––––––––––––––––––\n\npackage CameraSystem {\n  part Camera;\n  part AutofocusSubsystem;\n  part ImagingSubsystem;\n  part Photo;\n  part User;\n  Camera.focusesOn(AutofocusSubsystem);\n  Camera.captures(ImagingSubsystem);\n  Camera.records(Photo);\n  User.selects(Camera);\n  User.uses(Camera);\n}",
    "\n\npackage DigitalCamera {\n\n  part DigitalCamera;\n\n  part User;\n\n  part ShootingModule;\n\n  part FocusingModule;\n\n  part ImagingModule;\n\n  part SceneSelection;\n\n  part ImageGeneration;\n\n  part ImageCapture;\n\n  part ImageProduction;\n\n  DigitalCamera : User;\n\n  DigitalCamera : ShootingModule;\n\n  ShootingModule : FocusingModule;\n\n  ShootingModule : ImagingModule;\n\n  FocusingModule : SceneSelection;\n\n  FocusingModule : ImageGeneration;\n\n  ImagingModule : ImageCapture;\n\n  ImagingModule : ImageProduction;\n\n  SceneSelection -> ImageGeneration;\n\n  ImageGeneration -> ImageCapture;\n\n  ImageCapture -> ImageProduction;\n\n}\n\n––––––––––––––––––––––––––––––––––\n\nThe output System Model is a SysML v2 textual model that represents the digital camera system and its components. The model includes",
    "\n\npackage VehicleSimulation {\n\n  part Vehicle {\n    attribute mass : Real;\n    attribute position : Real;\n    attribute velocity : Real;\n  }\n\n  part Simulation {\n    attribute timeStep : Real;\n    attribute powerInput : Real[*];\n    attribute positionOutput : Real[*];\n\n    operation calculatePosition() : Real[*];\n  }\n\n  flow calculatePosition {\n    source Simulation::calculatePosition;\n    target Vehicle::position;\n  }\n\n  flow inputPower {\n    source Simulation::powerInput;\n    target Simulation::calculatePosition;\n  }\n\n  flow inputTimeStep {\n    source Simulation::timeStep;\n    target Simulation::calculatePosition;\n  }\n\n  flow inputMass {\n    source Vehicle::mass;\n    target Simulation::calculatePosition;\n  }\n\n  flow outputPosition {\n    source Simulation::positionOutput;\n    target System::null;\n  }\n\n  flow inputInitialPosition {\n    source Vehicle::position;\n    target Simulation::calculatePosition;",
    "\n\npackage CameraSystem {\n\n  part Camera;\n\n  part Display;\n\n  block SceneProcessing {\n\n    input scene;\n\n    output image;\n\n    operation focus(scene) : image;\n\n  };\n\n  block ImageGeneration {\n\n    input image;\n\n    output photo;\n\n    operation capture(image) : photo;\n\n  };\n\n  block PhotoDisplay {\n\n    input photo;\n\n    operation display(photo);\n\n  };\n\n  flow SceneInput {\n\n    source Camera;\n\n    target SceneProcessing;\n\n  };\n\n  flow ImageOutput {\n\n    source SceneProcessing;\n\n    target ImageGeneration;\n\n  };\n\n  flow PhotoOutput {\n\n    source ImageGeneration;\n\n    target PhotoDisplay;\n\n  };\n\n  flow DisplayPhoto {\n\n    source PhotoDisplay;\n\n    target Display;\n\n  };\n\n  requirement SceneProcessingRequirement {\n\n    derivedRequirement SceneInput;\n\n    derivedRequirement ImageOutput;\n\n  };\n\n  requirement ImageGenerationRequirement {\n",
    "\n\npackage CameraWorkflow {\n\n  part Camera {\n    port viewPort;\n    port displayPort;\n  }\n\n  part Image {\n  }\n\n  part Picture {\n  }\n\n  flow focus {\n    source Camera.viewPort;\n    target Image;\n  }\n\n  flow capture {\n    source Image;\n    target Picture;\n  }\n\n  flow display {\n    source Picture;\n    target Camera.displayPort;\n  }\n\n  block workflow {\n    part Camera;\n    part Image;\n    part Picture;\n    flow focus;\n    flow capture;\n    flow display;\n  }\n\n}\n\n––––––––––––––––––––––––––––––––––\n\nThe given natural-language requirements describe a camera information processing workflow. The system consists of a Camera, an Image, and a Picture. The Camera has two ports: viewPort and displayPort. The system focuses on the scene selected through the viewPort to obtain an Image. This Image is then captured to generate a Picture.",
    "\n\npackage SensorManagementSystem {\n\n  part type Sensor {\n    [0..*] status : SensorStatus;\n  };\n\n  enum SensorStatus {\n    ready,\n    notReady\n  };\n\n  block SensorManager {\n    [*] sensors : Sensor;\n\n    flow detectReadySensor : Sensor;\n    flow updateSensor : Sensor;\n\n    parameter updateInterval : Duration;\n\n    part behavior {\n      every updateInterval do\n        for each sensor in sensors\n          if sensor.status = SensorStatus::ready then\n            updateSensor(sensor);\n          end if;\n          end for;\n      end do;\n    };\n  };\n\n  flow detectReadySensor {\n    source : SensorManager;\n    target : input Sensor;\n  };\n\n  flow updateSensor {\n    source : SensorManager;\n    target : input Sensor;\n  };\n\n};\n\nThis SysML model defines a SensorManagementSystem package that contains a Sensor part type, a SensorStatus enumeration, a SensorManager block, and two flows: detectReady",
    "\n\npackage VehicleStateManagement {\n\n  block Vehicle {\n\n    part VehicleState {\n\n      [1] state Off {\n\n        [1..1] entry / startVehicle : VehicleStartSignal;\n\n        [0..1] exit / shutdownVehicle : VehicleShutdownSignal;\n\n      }\n\n      [1] state Starting {\n\n        [1..1] entry / powerOn : VehiclePowerOnSignal;\n\n        [0..1] exit / shutdownVehicle : VehicleShutdownSignal;\n\n      }\n\n      [1] state On {\n\n        [0..1] exit / shutdownVehicle : VehicleShutdownSignal;\n\n      }\n\n    }\n\n  }\n\n  block VehicleStartSignal {}\n\n  block VehiclePowerOnSignal {}\n\n  block VehicleShutdownSignal {}\n\n}\n\nExplanation:\nThe system is modeled as a package containing a Vehicle block. The Vehicle block contains a VehicleState part, which is composed of three states: Off, Starting, and On. Each state has an entry and exit",
    "\npackage VehicleStateManagement {\n  part Vehicle {\n    port VehicleStartSignal;\n    port VehicleOnSignal;\n    port VehicleOffSignal;\n    state Off {\n      entry / VehicleStartSignal.receive() {\n        transition ToStarting;\n      }\n    }\n    state Starting {\n      entry / VehicleOnSignal.receive() {\n        transition ToOn;\n      }\n    }\n    state On {\n      entry / VehicleOffSignal.receive() {\n        transition ToOff;\n      }\n    }\n    transition ToStarting : Off -> Starting;\n    transition ToOn : Starting -> On;\n    transition ToOff : On -> Off;\n  }\n}\n\nThis SysML model defines a package \"VehicleStateManagement\" containing a part \"Vehicle\" with three ports: \"VehicleStartSignal\", \"VehicleOnSignal\", and \"VehicleOffSignal\". The \"Vehicle\" part has three states: \"Off\", \"Starting\", and \"On\". Transitions between these states are triggered by the reception of the corresponding signals. The initial state is \"Off\", and the system",
    "\npackage VehiclePowerManagement {\n  part Vehicle;\n  part User;\n  part FunctionalUnit;\n  block VehiclePowerSystem {\n    port startCommand;\n    port startSignal;\n    port shutdownCommand;\n    port startedSignal;\n    state off;\n    state startPhase;\n    state poweredOn;\n    transition startPhase_to_poweredOn {\n      source off;\n      target startPhase;\n      trigger startCommand;\n    }\n    transition poweredOn_to_off {\n      source poweredOn;\n      target off;\n      trigger shutdownCommand;\n    }\n    transition startPhase_to_off {\n      source startPhase;\n      target off;\n      trigger !startedSignal;\n    }\n    transition poweredOn_to_startPhase {\n      source poweredOn;\n      target startPhase;\n      trigger !startCommand;\n    }\n    transition startPhase_to_startPhase {\n      source startPhase;\n      target startPhase;\n      trigger startCommand;\n    }\n    transition poweredOn_to_poweredOn {\n      source poweredOn;\n      target poweredOn",
    "\n\npackage VehicleManagement {\n\n  part Vehicle {\n\n    state Shutdown {\n\n      entry /\n\n        if (startSignal) then\n\n          setState(Startup)\n\n        end if;\n\n      end entry;\n\n    }\n\n    state Startup {\n\n      entry /\n\n        if (startedSignal) then\n\n          setState(Running)\n\n        end if;\n\n      end entry;\n\n    }\n\n    state Running {\n\n      entry /\n\n        if (shutdownSignal) then\n\n          setState(Shutdown)\n\n        end if;\n\n      end entry;\n\n    }\n\n  }\n\n}\n\n––––––––––––––––––––––––––––––––––\n\nNote:\n\n- The system is the VehicleManagement package.\n- The vehicle is a part of the VehicleManagement package.\n- The vehicle has three states: Shutdown, Startup, and Running.\n- The vehicle transitions from Shutdown to Startup when it receives",
    "\n\npackage VehiclePowerManagement {\n\n  part Vehicle;\n\n  block VehicleOperatingState {\n\n    state Off;\n\n    state Start;\n\n    state On;\n\n    transition StartSignal : Off -> Start;\n\n    transition OnSignal : Start -> On;\n\n    transition OffSignal : On -> Off;\n\n  }\n\n  block VehicleHealthState {\n\n    // Placeholder for future health state management\n\n  }\n\n}\n\n––––––––––––––––––––––––––––––––––\n\nThe given natural-language requirements have been translated into a SysML v2 textual model. The system is named \"VehiclePowerManagement\" and it consists of two main blocks: \"VehicleOperatingState\" and \"VehicleHealthState\".\n\nThe \"VehicleOperatingState\" block has three states: \"Off\", \"Start\", and \"On\". There are three transitions defined: \"StartSignal\" from \"Off\" to \"Start\", \"OnSignal\" from \"Start\" to \"On\", and \"OffSignal",
    "\n\npackage VehicleHealthMonitoringSystem {\n\n  part Vehicle {\n    attribute currentTemperature;\n    attribute maxAllowableTemperature;\n    attribute healthStatus;\n    attribute maintenanceStatus;\n    attribute maintenanceCycleTime;\n  }\n\n  part VehicleController {\n    operation sendOverTemperatureWarning();\n  }\n\n  block VehicleHealthMonitoring {\n    part Vehicle;\n    part VehicleController;\n\n    flow checkTemperature {\n      source Vehicle;\n      target checkTemperatureDecision;\n    }\n\n    decisionNode checkTemperatureDecision {\n      input checkTemperature;\n      output isOverTemperature;\n      output isSafeTemperature;\n    }\n\n    flow sendWarning {\n      source checkTemperatureDecision;\n      target VehicleController;\n      guard isOverTemperature;\n    }\n\n    flow setDegradedStatus {\n      source checkTemperatureDecision;\n      target Vehicle;\n      guard isOverTemperature;\n    }\n\n    flow setNormalStatus {\n      source checkTemperatureDecision;\n      target Vehicle;",
    "\n\npackage ServerSystem {\n\n  part Server {\n\n    port RequestPort {\n\n      provided RequestInterface {\n\n        operation StartCommand();\n\n        operation RequestMessage();\n\n      }\n\n    }\n\n    attribute LocalClock;\n\n    block StateMachine {\n\n      state OffState {\n\n        entry / startUp();\n\n        transition StartCommand() to WaitingState;\n\n      }\n\n      state WaitingState {\n\n        transition RequestMessage() to ResponseState;\n\n        transition at(11:59:00) to OffState;\n\n      }\n\n      state ResponseState {\n\n        transition after(5 minutes) to WaitingState;\n\n      }\n\n    }\n\n  }\n\n}\n\n––––––––––––––––––––––––––––––––––\n\nThe given natural-language requirements have been successfully translated into a SysML v2 textual model. The model includes a package named \"ServerSystem\" that contains a part named \"Server\". The \"Server\" part has a port",
    "\npackage VehicleStartStopSystem {\n  part Vehicle;\n  part Controller;\n  block StartStopProcess {\n    part StartProcess;\n    part OperatingState;\n    part StopProcess;\n    flow StartSignal;\n    flow PowerOnSignal;\n    flow StopSignal;\n    flow BrakePedalDepressed;\n    flow SelfCheck;\n    flow PowerSupply;\n    flow ParkingBrake;\n    flow CoordinatedControl;\n    StartProcess.in: StartSignal;\n    StartProcess.out: PowerOnSignal;\n    StartProcess.out: BrakePedalDepressed;\n    OperatingState.in: PowerOnSignal;\n    OperatingState.out: SelfCheck;\n    OperatingState.out: PowerSupply;\n    OperatingState.out: CoordinatedControl;\n    StopProcess.in: StopSignal;\n    StopProcess.out: ParkingBrake;\n    BrakePedalDepressed.source: StartProcess;\n    BrakePedalDepressed.target: StartProcess;\n    CoordinatedControl.source: OperatingState;\n    CoordinatedControl.",
    "\npackage VehicleControlSystem {\n  part VehicleController;\n  part Driver;\n  part BrakePedal;\n  part Vehicle;\n  interface VehicleStartSignal {\n    sendStartSignal();\n  }\n  interface VehicleOnSignal {\n    sendOnSignal();\n  }\n  interface StartControlSignal {\n    sendStartControlSignal();\n  }\n  interface ShutdownSignal {\n    sendShutdownSignal();\n  }\n  block VehicleControlSystem {\n    ownedPart VehicleController;\n    ownedPart Driver;\n    ownedPart BrakePedal;\n    ownedPart Vehicle;\n    required VehicleStartSignal;\n    required VehicleOnSignal;\n    provided StartControlSignal;\n    provided ShutdownSignal;\n    state Off;\n    state Started;\n    transition Startup {\n      source Off;\n      target Started;\n      trigger VehicleStartSignal::sendStartSignal();\n      guard BrakePedal::isDepressed() and VehicleOnSignal::isReceived();\n      effect VehicleController::sendStartControlSignal();\n    }\n    transition Shutdown {\n     ",
    "\n\npackage cruiseControlSystem {\n\n  part driver;\n\n  part cruiseController;\n\n  part speedometer;\n\n  part engine;\n\n  part vehicle;\n\n  event setSpeedCommand {\n\n    parameter desiredSpeed;\n\n  }\n\n  event actualSpeedInfo {\n\n    parameter actualSpeed;\n\n  }\n\n  event fuelControlCommand {\n\n    parameter fuelControl;\n\n  }\n\n  event realTimeSpeedInfo {\n\n    parameter realTimeSpeed;\n\n  }\n\n  event engineOutputAdjustment {\n\n    parameter engineOutput;\n\n  }\n\n  driver.send(setSpeedCommand);\n\n  cruiseController.receive(setSpeedCommand);\n\n  speedometer.transmit(actualSpeedInfo);\n\n  cruiseController.receive(actualSpeedInfo);\n\n  cruiseController.generate(fuelControlCommand);\n\n  engine.receive(fuelControlCommand);\n\n  speedometer.transmit(realTimeSpeedInfo);\n\n  cruiseController.receive(realTimeSpeedInfo);\n\n  engine.adjust(engineOutputAdjustment);\n\n}",
    "\n\npackage CruiseControlSystem {\n  part Vehicle;\n  part Driver;\n  part CruiseController;\n  part Speedometer;\n  part EngineSystem;\n\n  interface SetSpeedCommand {\n    send(speed: Real);\n  }\n\n  interface ThrottleControlCommand {\n    send(power: Real);\n  }\n\n  interface VehicleSpeedInfo {\n    getSpeed(): Real;\n  }\n\n  Vehicle -- Driver : controls;\n  Driver -- CruiseController : SetSpeedCommand;\n  CruiseController -- Speedometer : VehicleSpeedInfo;\n  CruiseController -- EngineSystem : ThrottleControlCommand;\n}\n\n––––––––––––––––––––––––––––––––––\n\nThe given natural-language requirements have been successfully translated into a SysML v2 textual model. The model includes the following parts: Vehicle, Driver, CruiseController, Speedometer, and EngineSystem. Additionally, it defines three interfaces: SetSpeedCommand, ThrottleControlCommand, and VehicleSpeedInfo.",
    "\n\npackage AutomotiveCruiseControl {\n\n  part Driver;\n\n  part CruiseController;\n\n  part SpeedSensor;\n\n  part Engine;\n\n  interface ControlInterface {\n\n    operation setSpeed(speed: Real);\n\n  }\n\n  interface SpeedInformation {\n\n    operation getSpeed(): Real;\n\n  }\n\n  interface ThrottleControlCommand {\n\n    operation setThrottle(throttle: Real);\n\n  }\n\n  Driver.controlInterface: ControlInterface[1];\n\n  CruiseController.controlInterface: ControlInterface[0..1];\n\n  CruiseController.speedInformation: SpeedInformation[1];\n\n  CruiseController.throttleControlCommand: ThrottleControlCommand[1];\n\n  SpeedSensor.speedInformation: SpeedInformation[1];\n\n  Engine.throttleControlCommand: ThrottleControlCommand[1];\n\n}\n\npackage AutomotiveCruiseControl::Behavior {\n\n  blockset AutomotiveCruiseControlBehavior {\n\n    partBehavior DriverBehavior {\n\n      operation setSpeedCommand(speed: Real) {",
    "\n\npackage AutomotiveCruiseControl {\n\n  part Driver;\n\n  part Vehicle {\n\n    part CruiseController;\n\n    part Engine;\n\n    part Speedometer;\n\n  };\n\n  interface SpeedSettingRequest {\n\n    speed : Real;\n\n  };\n\n  interface SpeedFeedback {\n\n    speed : Real;\n\n  };\n\n  interface ThrottleControlInstruction {\n\n    throttlePosition : Real;\n\n  };\n\n  Driver.speedSettingRequest : SpeedSettingRequest[1];\n\n  Vehicle.speedFeedback : SpeedFeedback[1];\n\n  CruiseController.throttleControlInstruction : ThrottleControlInstruction[1];\n\n  Engine.throttleControlInstruction : ThrottleControlInstruction[1];\n\n  SpeedSettingRequest.speedFeedback : SpeedFeedback[1];\n\n  SpeedFeedback.throttleControlInstruction : ThrottleControlInstruction[1];\n\n  SpeedFeedback.speedSettingRequest : SpeedSettingRequest[1];\n\n  ThrottleControlInstruction.speedFeedback : SpeedFeedback[1];\n",
    "\n\npackage AutomotiveCruiseControl {\n\n  part AutomotiveVehicle {\n    [0..1] cruiseController : CruiseController;\n    [0..1] engine : Engine;\n    [0..1] speedSensor : SpeedSensor;\n  }\n\n  part CruiseController {\n    [0..1] cruiseControlInterface : CruiseControlInterface;\n    [0..1] engineFuelControlCommandPort : EngineFuelControlCommandPort;\n    [0..1] speedFeedbackPort : SpeedFeedbackPort;\n    [0..1] targetSpeedPort : TargetSpeedPort;\n  }\n\n  part Engine {\n    [0..1] engineFuelControlCommandPort : EngineFuelControlCommandPort;\n    [0..1] engineOutputPort : EngineOutputPort;\n  }\n\n  part SpeedSensor {\n    [0..1] speedFeedbackPort : SpeedFeedbackPort;\n  }\n\n  interface CruiseControlInterface {\n    [0..1] targetSpeedPort : TargetSpeedPort;\n  }\n\n  interface EngineFuelControlCommandPort {\n    // No attributes defined",
    "\n\npackage CruiseControlSystem {\n\n  part Vehicle;\n\n  part Driver;\n\n  part CruiseController;\n\n  part SpeedSensor;\n\n  part EngineController;\n\n  part Engine;\n\n  interface SpeedCommand {\n\n    sendOperation sendSetSpeedCommand();\n\n  }\n\n  interface FuelControlCommand {\n\n    sendOperation sendFuelControlCommand();\n\n  }\n\n  interface SpeedInformation {\n\n    sendOperation sendSpeedInformation();\n\n  }\n\n  Vehicle.driver : Driver[1];\n\n  Vehicle.cruiseController : CruiseController[1];\n\n  Vehicle.speedSensor : SpeedSensor[1];\n\n  Vehicle.engineController : EngineController[1];\n\n  Vehicle.engine : Engine[1];\n\n  Driver.speedCommand : SpeedCommand[1];\n\n  CruiseController.speedCommand : SpeedCommand[1];\n\n  CruiseController.fuelControlCommand : FuelControlCommand[1];\n\n  CruiseController.speedInformation : SpeedInformation[1];\n\n  SpeedSensor.speedInformation : SpeedInformation",
    "\n\npackage VehicleLifecycleManagement {\n\n  part type Vehicle {\n    attribute assemblyDate : Date;\n    attribute deliveryDate : Date;\n    attribute scrappingDate : Date;\n    attribute owner : Owner;\n    attribute drivers : Driver[*];\n  }\n\n  part type Owner {\n    attribute name : String;\n    attribute contactInfo : String;\n  }\n\n  part type Driver {\n    attribute name : String;\n    attribute licenseNumber : String;\n  }\n\n  association Ownership {\n    member vehicle : Vehicle[1];\n    member owner : Owner[1];\n    member startDate : Date;\n    member endDate : Date;\n  }\n\n  association Driving {\n    member vehicle : Vehicle[1];\n    member driver : Driver[1];\n    member startTime : DateTime;\n    member endTime : DateTime;\n  }\n\n}\n\nThis SysML model defines a package for the Vehicle Lifecycle Management system. It includes three part types: Vehicle, Owner, and Driver. The Vehicle part type has attributes for assemblyDate, deliveryDate,",
    "\npackage VehicleModel {\n  part type Vehicle {\n    attribute mass : Real;\n    attribute operationalStatus : OperationalStatus;\n  }\n  part type Driver {\n  }\n  part type Wheel {\n  }\n  part type Engine {\n  }\n  part type OperationalStatus {\n    attribute gearSetting : GearSetting;\n    attribute acceleratorPedalPosition : Real;\n  }\n  enum GearSetting {\n    PARK,\n    REVERSE,\n    NEUTRAL,\n    DRIVE,\n    LOW\n  }\n  part vehicle_1 : Vehicle {\n    part leftFrontWheel : Wheel;\n    part rightFrontWheel : Wheel;\n    part engine : Engine;\n    part driver : Driver;\n  }\n  snapshot leftFrontWheel_snapshot_1 {\n    part leftFrontWheel : Wheel;\n  }\n  snapshot rightFrontWheel_snapshot_2 {\n    part rightFrontWheel : Wheel;\n  }\n}\n\nThis SysML v2 textual model defines a package called \"VehicleModel\" that contains",
    "\npackage VehicleSystem {\n  part Vehicle_1 {\n    attribute mass : Real;\n    attribute gear : Integer;\n    attribute accelerator : Real;\n  }\n  block Vehicle {\n    attribute mass : Real;\n    attribute gear : Integer;\n    attribute accelerator : Real;\n  }\n  block Engine {\n  }\n  block Driver {\n  }\n  association Vehicle_Engine {\n    member Vehicle_1;\n    member Engine;\n  }\n  association Vehicle_Driver {\n    member Vehicle_1;\n    member Driver;\n  }\n}\n\nExplanation:\nThe system is modeled as a package named \"VehicleSystem\". The specific vehicle instance \"Vehicle_1\" is modeled as a part. The attributes of the vehicle are defined within the part and block definitions of \"Vehicle_1\" and \"Vehicle\" respectively. The \"Engine\" and \"Driver\" components are modeled as blocks. The relationships between \"Vehicle_1\" and \"Engine\", and \"Vehicle_1\" and \"Driver\" are modeled as associations named \"Vehicle_Engine\" and \"Vehicle",
    "\npackage VehicleModel {\n  part type Vehicle {\n    attribute mass: Real;\n    attribute gearPosition: GearPosition;\n    attribute throttlePosition: Real;\n    attribute driver: Driver;\n  }\n  part type Engine {\n  }\n  enumeration GearPosition {\n    neutral, first, second, third, fourth, fifth, reverse\n  }\n  part type Driver {\n    attribute name: String;\n  }\n  instance Alice of Driver {\n    name = \"Alice\";\n  }\n  instance Bob of Driver {\n    name = \"Bob\";\n  }\n  instance vehicle of Vehicle {\n    mass = 2000.0;\n    gearPosition = GearPosition::neutral;\n    throttlePosition = 0.0;\n    driver = Alice;\n  }\n  instance engine of Engine {\n  }\n  instance vehicle2 of Vehicle {\n    mass = 1500.0;\n    gearPosition = GearPosition::second;\n    throttlePosition = 0.5;\n    driver = Bob;\n  }\n}\n",
    "\n\npackage VehicleMassModeling {\n\n  part type Vehicle {\n    mass : Real;\n  }\n\n  part type Component {\n    mass : Real;\n  }\n\n  part type Engine extends Component;\n  part type Transmission extends Component;\n\n  association VehicleComposition {\n    member vehicle : Vehicle[1];\n    member component : Component[*];\n  }\n\n  constraint TotalMass {\n    vehicle.mass = sum(vehicle.component.mass);\n  }\n\n  constraint EngineMass {\n    vehicle.engine.mass > 0;\n  }\n\n  constraint TransmissionMass {\n    vehicle.transmission.mass > 0;\n  }\n\n}\n\n––––––––––––––––––––––––––––––––––\n\nThe given natural-language requirements have been translated into a SysML v2 textual model. The model is structured within a package named \"VehicleMassModeling\". It defines two part types: \"Vehicle\" and \"Component\". The \"Vehicle\" part",
    "\n\npackage VehicleMassManagement {\n\n  part type Vehicle {\n    attribute vin : String;\n    attribute mass : Real;\n    reference part[*] component;\n  }\n\n  part type Component {\n    attribute serialNumber : String;\n    attribute mass : Real;\n    reference part[*] subComponent;\n  }\n\n  part type Engine is Component {\n    attribute mass : Real;\n  }\n\n  part type Transmission is Component {\n    attribute mass : Real;\n  }\n\n  block VehicleMassCalculator {\n    parameter Real threshold;\n    parameter Vehicle vehicle;\n    parameter Real totalMass;\n    part filter;\n    part summarizer;\n  }\n\n  block Filter {\n    parameter Real threshold;\n    parameter Component component;\n    parameter Component[*] filteredSubComponents;\n  }\n\n  block Summarizer {\n    parameter Vehicle vehicle;\n    parameter Real totalMass;\n  }\n\n  connector VehicleToCalculator {\n    vehicle : Vehicle;\n    totalMass : Real;\n  }\n\n  connector ComponentToFilter {",
    "\n\npackage QualityAggregationManagement {\n\n  part simpleThing {\n    attribute simpleMass : Real;\n    attribute totalMass : Real;\n  };\n\n  part compositeThing {\n    attribute simpleMass : Real;\n    attribute totalMass : Real;\n    part subcomponent[*] : Thing;\n  };\n\n  part Thing {\n    attribute totalMass : Real;\n  };\n\n  block System {\n    part object[*] : Thing;\n  };\n\n  flow calculateTotalMass {\n    source System;\n    target object;\n    parameter object;\n    parameter totalMass;\n  };\n\n  constraintBlock hierarchicalManagement {\n    constraint c1 {\n      object.oclIsKindOf(compositeThing) implies\n      object.totalMass = object.simpleMass +\n      object.subcomponent->collect(totalMass)->sum();\n    };\n    constraint c2 {\n      object.oclIsKindOf(simpleThing) implies\n      object.totalMass = object.simpleMass;\n    };\n  };\n\n}\n\n–––––––",
    "\n\npackage MassManagementSystem {\n\n  part type Object {\n    attribute mass : Real;\n    attribute subcomponents : Object[*];\n  }\n\n  part type CompositeObject : Object {\n    attribute minMassThreshold : Real;\n  }\n\n  block MassManagementSystem {\n    part objects : Object[*];\n    part compositeObjects : CompositeObject[*];\n\n    flow totalMass : Real;\n\n    parameter minMassThreshold : Real;\n\n    part calculateTotalMass {\n      [objects.mass + compositeObjects.select(mass >= minMassThreshold).mass.sum()] -> totalMass;\n    }\n\n    part filterAndAggregate {\n      compositeObjects.select(mass >= minMassThreshold) -> objects;\n    }\n  }\n}\n\n––––––––––––––––––––––––––––––––––\n\nThe given natural-language requirement is translated into a SysML v2 textual model that includes two part types: Object and CompositeObject. The Object part type has two attributes: mass and subcomponents.",
    "\n\npackage VehicleDynamicsCalculator {\n\n  part Vehicle {\n    attribute powerOutput : Real;\n    attribute acceleration : Real;\n    attribute speed : Real;\n    attribute position : Real;\n  }\n\n  part OperatingConditions {\n    attribute wheelPower : Real;\n    attribute aerodynamicDragCoefficient : Real;\n    attribute frictionCoefficient : Real;\n    attribute vehicleMass : Real;\n    attribute speed : Real;\n  }\n\n  block PowerCalculator {\n    input wheelPower : Real;\n    input aerodynamicDragCoefficient : Real;\n    input frictionCoefficient : Real;\n    input vehicleMass : Real;\n    input speed : Real;\n    output powerOutput : Real;\n  }\n\n  block AccelerationCalculator {\n    input powerOutput : Real;\n    input vehicleMass : Real;\n    input speed : Real;\n    output acceleration : Real;\n  }\n\n  block SpeedCalculator {\n    input acceleration : Real;\n    input initialSpeed : Real;\n    input time :",
    "\n\npackage VehicleSimulation {\n\n  part Vehicle {\n    attribute mass : Real;\n    attribute speed : Real;\n    attribute position : Real;\n    attribute aerodynamicDragCoefficient : Real;\n    attribute rollingResistanceCoefficient : Real;\n  }\n\n  part Environment {\n    attribute timeStep : Real;\n  }\n\n  part Simulation {\n    attribute initialSpeed : Real;\n    attribute initialPosition : Real;\n    attribute availableDrivingPower : Real;\n    attribute acceleration : Real;\n    attribute newSpeed : Real;\n    attribute newPosition : Real;\n\n    operation calculateAvailableDrivingPower();\n    operation calculateAcceleration();\n    operation calculateNewSpeed();\n    operation calculateNewPosition();\n  }\n\n  flow calculateAvailableDrivingPower {\n    source Vehicle.aerodynamicDragCoefficient;\n    source Vehicle.rollingResistanceCoefficient;\n    source Vehicle.speed;\n    target Simulation.availableDrivingPower;\n  }\n\n  flow calculateAcceleration {\n    source Simulation.availableDrivingPower",
    "\n\npackage VehicleDynamicsModeling {\n\n  part Vehicle {\n    attribute mass : Real;\n    attribute wheelPower : Real;\n    attribute aerodynamicDragCoefficient : Real;\n    attribute rollingResistanceCoefficient : Real;\n    attribute speed : Real;\n    attribute position : Real;\n  }\n\n  part User {\n    attribute inputParameters : List<Real>;\n  }\n\n  part System {\n    attribute timeStep : Real;\n    operation calculateSpeedAndPosition();\n    operation predictDynamicStates();\n  }\n\n  flow calculateSpeedAndPositionFlow {\n    source User;\n    target System;\n  }\n\n  flow predictDynamicStatesFlow {\n    source System;\n    target User;\n  }\n\n  block VehicleDynamicsModelingSystem {\n    part Vehicle;\n    part User;\n    part System;\n    flow calculateSpeedAndPositionFlow;\n    flow predictDynamicStatesFlow;\n  }\n\n}\n\nThis SysML model represents a system for modeling and computing the vehicle's driving dynamics. It includes a Vehicle part with attributes such as mass,",
    "\n\npackage VehicleDynamics {\n\n  part Vehicle {\n    attribute mass : Real;\n    attribute position : Real;\n    attribute velocity : Real;\n    attribute acceleration : Real;\n  }\n\n  part Environment {\n    attribute dragCoefficient : Real;\n    attribute frictionCoefficient : Real;\n  }\n\n  part UserInput {\n    attribute initialPosition : Real;\n    attribute initialVelocity : Real;\n    attribute drivePower : Real;\n    attribute timeInterval : Real;\n  }\n\n  part Calculation {\n    operation calculateAcceleration();\n    operation calculateFinalVelocity();\n    operation calculateFinalPosition();\n  }\n\n  block VehicleDynamicsSystem {\n    part : Vehicle;\n    part : Environment;\n    part : UserInput;\n    part : Calculation;\n  }\n\n  flow calculateAccelerationFlow {\n    source : UserInput.drivePower;\n    target : Vehicle.acceleration;\n  }\n\n  flow calculateFinalVelocityFlow {\n    source : Vehicle.acceleration;\n   ",
    "\n\npackage VehicleWeightManagement {\n\n  part Vehicle {\n    mass : Real [1..1];\n  };\n\n  part Chassis {\n    mass : Real [1..1];\n  };\n\n  part Engine {\n    mass : Real [1..1];\n  };\n\n  part Gearbox {\n    mass : Real [1..1];\n  };\n\n  block VehicleWeightCalculator {\n    input : Vehicle;\n    output : Real;\n  };\n\n  block WeightLimitChecker {\n    input : Real;\n    output : Boolean;\n  };\n\n  block OverweightWarning {\n    input : Boolean;\n  };\n\n  connector VehicleToCalculator {\n    vehicle : Vehicle [1..1];\n    calculator : VehicleWeightCalculator [1..1];\n  };\n\n  connector CalculatorToChecker {\n    calculator : VehicleWeightCalculator [1..1];\n    checker : WeightLimitChecker [1..1];\n  };\n\n  connector CheckerToWarning {\n    checker :",
    "\n\npackage VehicleMassBudgetingSystem {\n\n  part Vehicle {\n    attribute totalMass : Real [1];\n    attribute massLimit : Real [1] = 2500;\n    attribute isDesignRequirementsMet : Boolean [0..1];\n  }\n\n  part Chassis extends Vehicle {\n    attribute mass : Real [1];\n  }\n\n  part Engine extends Vehicle {\n    attribute mass : Real [1];\n  }\n\n  part Transmission extends Vehicle {\n    attribute mass : Real [1];\n  }\n\n  block MassCalculator {\n    input massOfChassis : Real [1];\n    input massOfEngine : Real [1];\n    input massOfTransmission : Real [1];\n    output totalMass : Real [1];\n  }\n\n  block DesignRequirementChecker {\n    input totalMass : Real [1];\n    input massLimit : Real [1];\n    output isDesignRequirementsMet : Boolean [0..1];\n  }\n\n  flow CalculateTotalMass {\n    source MassCalculator.totalMass;\n",
    "\n\npackage VehicleMassManagementSystem {\n\n  parttype Chassis {\n    attribute mass : Real;\n  };\n\n  parttype Engine {\n    attribute mass : Real;\n  };\n\n  parttype Transmission {\n    attribute mass : Real;\n  };\n\n  parttype Vehicle {\n    attribute totalMass : Real;\n    part chassis : Chassis;\n    part engine : Engine;\n    part transmission : Transmission;\n  };\n\n  block VehicleMassManagementSystem {\n    attribute upperMassLimit : Real = 2500;\n    part vehicle : Vehicle;\n\n    flow verifyMassCompliance : Real;\n\n    parameter massData : Real[3];\n\n    part verifyMassCompliance {\n      attribute isCompliant : Boolean;\n    };\n\n    requirement verifyMassComplianceRequirement {\n      description: \"The total mass of the complete vehicle must not exceed 2,500 kilograms.\";\n    };\n\n    requirement safetyRequirement {\n      description: \"The vehicle must meet requirements concerning safety.\";\n    };\n\n    requirement performance",
    "\n\npackage VehicleWeightManagementSystem {\n\n  part Vehicle {\n    weight : Integer [1..2500];\n  }\n\n  part Chassis extends Vehicle;\n  part Engine extends Vehicle;\n  part Transmission extends Vehicle;\n\n  block VehicleWeightManager {\n    weightLimit : Integer = 2500;\n    chassisWeight : Integer;\n    engineWeight : Integer;\n    transmissionWeight : Integer;\n\n    flow calculateTotalWeight {\n      source [1] : Chassis.weight;\n      source [2] : Engine.weight;\n      source [3] : Transmission.weight;\n      target : VehicleWeightManager.chassisWeight, VehicleWeightManager.engineWeight, VehicleWeightManager.transmissionWeight;\n    }\n\n    flow sumWeights {\n      source [1] : VehicleWeightManager.chassisWeight;\n      source [2] : VehicleWeightManager.engineWeight;\n      source [3] : VehicleWeightManager.transmissionWeight;\n      target : Vehicle.weight;\n    }\n\n    flow check",
    "\n\npackage VehicleSystem {\n  part Vehicle {\n    attribute mass : Real [1..1];\n    part Chassis {\n      attribute mass : Real [1..1];\n    }\n    part Engine {\n      attribute mass : Real [1..1];\n    }\n    part Transmission {\n      attribute mass : Real [1..1];\n    }\n    constraint TotalMassConstraint {\n      self.mass = self.Chassis.mass + self.Engine.mass + self.Transmission.mass;\n      self.mass <= 2500;\n    }\n    part DynamicBehavior {\n      attribute initialVelocity : Real [1..1];\n      attribute finalVelocity : Real [1..1];\n      attribute mass : Real [1..1];\n      attribute appliedForce : Real [1..1];\n      attribute time : Real [1..1];\n      constraint MassConstraint {\n        self.mass > 0;\n      }\n      constraint DynamicConstraint {\n        self.appliedForce * self.time = self.mass * (self.finalVelocity - self.initialVelocity);\n     ",
    "\n\npackage VehicleMaintenanceSystem {\n\n  part Vehicle {\n    attribute nextMaintenanceTime : Time;\n    attribute maintenanceInterval : Time;\n    attribute maxAllowedTemperature : Temperature;\n    attribute status : Status;\n  }\n\n  block MaintenanceSystem {\n    part vehicle : Vehicle;\n    attribute currentTime : Time;\n\n    flow checkMaintenanceTime {\n      source vehicle;\n      target checkMaintenanceTime;\n    }\n\n    flow updateVehicleStatus {\n      source checkMaintenanceTime;\n      target vehicle.status;\n    }\n\n    flow startMaintenance {\n      source updateVehicleStatus;\n      target startMaintenance;\n      guard vehicle.status = \"under maintenance\";\n    }\n\n    flow endMaintenance {\n      source startMaintenance;\n      target endMaintenance;\n      guard duration(startMaintenance, endMaintenance) <= 48 hours;\n    }\n\n    flow updateNextMaintenanceTime {\n      source endMaintenance;\n      target vehicle.nextMaintenanceTime;\n    }\n\n    flow updateVehicleHealthStatus {\n      source",
    "\npackage VehicleSystem {\n  part Vehicle {\n    attribute totalMass {\n      type Real;\n      constraint totalMass <= maximumMassLimit;\n    }\n    attribute curbWeight {\n      type Real;\n    }\n    attribute fuelMass {\n      type Real;\n      constraint fuelMass > 0;\n    }\n    part Engine {\n      operation generateTorque(speed: Real): Real {\n        body generateTorque(speed) = speed * torqueCoefficient;\n      }\n    }\n    part Transmission {\n      port clutchInterface {\n        type Real;\n      }\n    }\n    constraint totalMass = curbWeight + fuelMass;\n    constraint Engine.generateTorque(speed) = Transmission.clutchInterface;\n  }\n  attribute maximumMassLimit {\n    type Real;\n  }\n}\n\nThis SysML model defines a package called VehicleSystem that contains a part called Vehicle. The Vehicle part has attributes for totalMass, curbWeight, and fuelMass, with constraints defined for totalMass and fuelMass. The Vehicle part also contains an Engine part and a Transmission part",
    "\n\npackage VehicleSystem {\n  part Vehicle {\n    attribute maxMassWithFullFuel : Real [1] = 2000;\n    attribute maxMassWithEmptyFuel : Real [1] = 1500;\n  }\n  part Engine {\n    interface ClutchInterface {\n      [provided] torque : Real [1];\n    }\n    attribute speedTorqueCurve : Table [1];\n  }\n  part Transmission {\n    interface ClutchInterface {\n      [required] torque : Real [1];\n    }\n  }\n  connector EngineToTransmission {\n    end Engine::ClutchInterface;\n    end Transmission::ClutchInterface;\n  }\n}\n\n––––––––––––––––––––––––––––––––––\n\nThe given natural-language requirements have been successfully translated into a SysML v2 textual model. The model includes a package named \"VehicleSystem\" that contains three parts: \"Vehicle\", \"Engine\", and \"Transmission\".\n\nThe \"",
    "\n\npackage VehicleSystem {\n\n  part Vehicle {\n    attribute mass : Real [1500..2000];\n    attribute fueledMass : Real [1..2000];\n    attribute emptyMass : Real [1..1500];\n  }\n\n  part Engine {\n    attribute torque : Real;\n    attribute speed : Real;\n    attribute performanceTable : Table;\n  }\n\n  part TransmissionSystem {\n    attribute torque : Real;\n  }\n\n  part ClutchInterface {\n    attribute torque : Real;\n  }\n\n  connector ClutchConnection {\n    end engineEnd : Engine [1];\n    end transmissionEnd : TransmissionSystem [1];\n    end interfaceEnd : ClutchInterface [1];\n  }\n\n  constraint MassConstraint {\n    Vehicle.fueledMass <= 2000;\n    Vehicle.emptyMass <= 1500;\n  }\n\n  constraint TorqueTransmissionConstraint {\n    Engine.torque = ClutchInterface.torque;\n    ClutchInterface.torque = Transmission",
    "\n\npackage VehicleSystem {\n\n  part Vehicle {\n    attribute curbMass;\n    attribute fuelMass;\n    attribute totalMass;\n    attribute maxFuelMass;\n    attribute maxTotalMassFull;\n    attribute maxTotalMassEmpty;\n    attribute engineTorque;\n    attribute gearboxTorque;\n    attribute clutchTorque;\n  }\n\n  block VehicleMassControl {\n    parameter maxTotalMassFull = \"2000\";\n    parameter maxTotalMassEmpty = \"1500\";\n    requirement r1: Vehicle.totalMass <= maxTotalMassFull when Vehicle.fuelMass = Vehicle.maxFuelMass;\n    requirement r2: Vehicle.totalMass <= maxTotalMassEmpty when Vehicle.fuelMass = 0;\n  }\n\n  block PowerTransmission {\n    requirement r3: Vehicle.engineTorque = Vehicle.clutchTorque;\n    requirement r4: Vehicle.clutchTorque = Vehicle.gearboxTorque;\n  }\n\n  block DesignAndSafetyStandards {\n    requirement r5: Vehicle",
    "\n\npackage VehiclePerformanceAnalysis {\n\n  part Vehicle {\n    attribute curbWeight : Real;\n    attribute payload : Real;\n    attribute wheelDiameter : Real;\n    attribute transmissionEfficiency : Real;\n    attribute fuelEconomyUrban : Real;\n    attribute fuelEconomyHighway : Real;\n  }\n\n  part DrivingCycle {\n    attribute position : Sequence[Real];\n    attribute speed : Sequence[Real];\n    attribute time : Sequence[Real];\n  }\n\n  block VehiclePerformanceAnalyzer {\n    port vehicle : Vehicle;\n    port drivingCycle : DrivingCycle;\n    port enginePower : Real;\n    port acceleration : Real;\n    port fuelEconomy : Real;\n    port compliance : Boolean;\n    parameter targetFuelEconomy : Real;\n  }\n\n  block VehiclePerformanceAnalysisSystem {\n    part analyzer : VehiclePerformanceAnalyzer;\n    part vehicle : Vehicle;\n    part drivingCycle : DrivingCycle;\n    port targetFuelEconomy : Real",
    "\n\npackage VehicleFuelEconomySimulation {\n\n  part Vehicle {\n    attribute curbWeight;\n    attribute load;\n    attribute wheelDiameter;\n    attribute transmissionEfficiency;\n    // other vehicle parameters\n  }\n\n  part DrivingScenario {\n    attribute urban;\n    attribute highway;\n  }\n\n  part Trajectory {\n    attribute speedVariations;\n  }\n\n  part WheelPower {\n    // calculation based on driving scenario and trajectory\n  }\n\n  part VehicleDynamics {\n    attribute acceleration;\n    attribute energyConsumption;\n    // calculation based on wheel power\n  }\n\n  part EnginePower {\n    // calculation based on vehicle dynamics\n  }\n\n  part FuelConsumption {\n    attribute litersPer100Kilometers;\n    // calculation based on engine power\n  }\n\n  part UserAssessment {\n    // analysis based on fuel consumption\n  }\n\n  flow calculateWheelPower(drivingScenario: DrivingScenario, trajectory: Trajectory): WheelPower;\n  flow",
    "\n\npackage EngineSelectionSystem {\n\n  part Engine {\n    attribute power : Real;\n    attribute mass : Real;\n    attribute efficiency : Real;\n    attribute cost : Real;\n  }\n\n  part FourCylinderEngine extends Engine;\n  part SixCylinderEngine extends Engine;\n\n  block EngineSelection {\n    input engine : Engine[*];\n    output selectedEngine : Engine;\n    parameter evaluationFunction : Function;\n\n    part PerformanceCalculator {\n      input engine : Engine;\n      output performance : Real;\n\n      part PowerCalculator {\n        input engine : Engine;\n        output power : Real;\n      }\n\n      part MassCalculator {\n        input engine : Engine;\n        output mass : Real;\n      }\n\n      part EfficiencyCalculator {\n        input engine : Engine;\n        output efficiency : Real;\n      }\n\n      part CostCalculator {\n        input engine : Engine;\n        output cost : Real;\n      }\n    }\n\n    part Evaluator {\n      input engine : Engine;\n      input performance : Real;\n      input evaluation",
    "\npackage VehicleQualityCheck {\n  part Vehicle {\n    attribute curbWeight;\n  }\n\n  block VehicleQualityCheckSystem {\n    part vehicle;\n    operation checkCurbWeight();\n  }\n\n  block DataCollection {\n    operation collectWeightData();\n  }\n\n  block DataProcessing {\n    operation processWeightData();\n  }\n\n  block Evaluation {\n    operation evaluateWeight();\n  }\n\n  flow checkCurbWeight {\n    source VehicleQualityCheckSystem::checkCurbWeight;\n    target DataCollection::collectWeightData;\n    target DataProcessing::processWeightData;\n    target Evaluation::evaluateWeight;\n  }\n\n  flow processWeightData {\n    source DataCollection::collectWeightData;\n    target DataProcessing::processWeightData;\n  }\n\n  flow evaluateWeight {\n    source DataProcessing::processWeightData;\n    target Evaluation::evaluateWeight;\n  }\n\n  constraint MaxCurbWeight {\n    specification Vehicle::curbWeight <= 2500;\n  }\n}\n\nThis SysML",
    "\n\npackage VehicleMassVerificationSystem {\n\n  part type Vehicle {\n    attribute mass : Real;\n  }\n\n  part type WeighingEquipment {\n    operation measureMass() : Real;\n  }\n\n  part type MassVerificationUnit {\n    operation processData(mass : Real) : Boolean;\n  }\n\n  block VehicleMassVerificationSystem {\n    part vehicle : Vehicle;\n    part weighingEquipment : WeighingEquipment;\n    part massVerificationUnit : MassVerificationUnit;\n\n    flow measureMass {\n      source flowPort: weighingEquipment.measureMass;\n      target flowPort: massVerificationUnit.processData;\n    }\n  }\n\n  requirement massLimit {\n    constraint: vehicle.mass <= 2500;\n  }\n\n  requirement massVerification {\n    refine massLimit;\n    constraint: massVerificationUnit.processData(weighingEquipment.measureMass());\n  }\n\n}\n\nThis SysML model defines a system for verifying the mass of vehicles. It includes part",
    "\n\npackage TransportationSystem {\n  part TransportVehicle {\n    attribute maxPassengers : Integer {\n      value : 4\n    }\n    attribute driver : Driver\n    attribute passengers : List<Passenger>\n    operation enterVehicle(p : Passenger) : Boolean\n    operation exitVehicle(p : Passenger) : Boolean\n  }\n  part GasStation {\n    attribute compatible : Boolean {\n      value : true\n    }\n  }\n  part Environment {\n    attribute safetyFactors : List<SafetyFactor>\n    attribute sustainabilityFactors : List<SustainabilityFactor>\n  }\n  part User {\n    attribute needs : List<Need>\n    attribute rideExperience : RideExperience\n    attribute conveniences : List<Convenience>\n  }\n  part Driver : User {\n    association drives : TransportVehicle[1]\n  }\n  part Passenger : User {\n    association rides : TransportVehicle[1..1]\n  }\n  association uses : Environment[1]\n  association supports : User[1..*]\n  constraint maxPassengersConstraint {\n   ",
    "\n\npackage TransportationSystem {\n\n  part type Driver;\n  part type Passenger;\n  part type Vehicle;\n  part type GasStation;\n\n  block TransportationScenario {\n    part driver: Driver[1];\n    part passengers: Passenger[0..4];\n    part vehicle: Vehicle[1];\n    part gasStations: GasStation[*];\n\n    flow enterVehicle(driver: Driver, vehicle: Vehicle);\n    flow operateVehicle(driver: Driver, vehicle: Vehicle);\n    flow refuel(driver: Driver, gasStation: GasStation);\n    flow exitVehicle(driver: Driver, vehicle: Vehicle);\n  }\n\n  requirement meetDailyTransportationNeeds {\n    derived from: TransportationScenario;\n    satisfied by: enterVehicle, operateVehicle, refuel, exitVehicle;\n  }\n\n}\n\n––––––––––––––––––––––––––––––––––\n\nThe given natural-language requirements have been successfully transformed into a SysML",
    "\n\npackage VehicleConfiguration {\n\n  part type Engine {\n    attribute cylinders : Integer {\n      constraint: value = 4 or value = 6\n    }\n    attribute cylinderDiameter : Diameter {\n      constraint: value = Diameter::small or value = Diameter::large\n    }\n  }\n\n  part type Transmission {\n    attribute type : TransmissionType {\n      constraint: value = TransmissionType::manual or value = TransmissionType::automatic\n    }\n  }\n\n  part type Vehicle {\n    part engine : Engine {\n      constraint: engine.cylinders = 4 implies transmission.type = TransmissionType::manual\n      constraint: engine.cylinders = 6 implies transmission.type = TransmissionType::automatic\n    }\n    part transmission : Transmission\n  }\n\n  enum Diameter {\n    small = 70,\n    large = 100\n  }\n\n  enum TransmissionType {\n    manual,\n    automatic\n  }\n\n}\n\n–––––––––––––",
    "\n\npackage EngineSystem {\n  part type Cylinder {\n    attribute diameter {\n      type: Real;\n      value: 70.0 or 100.0;\n    }\n  }\n\n  part type Engine {\n    attribute cylinderCount {\n      type: Integer;\n      value: 4 or 6;\n    }\n    attribute cylinderDiameter {\n      type: Real;\n      value: 70.0 or 100.0;\n    }\n    part cylinders[0..*] {\n      type: Cylinder;\n      multiplicity: cylinderCount;\n    }\n  }\n\n  part engineVariants[0..*] {\n    type: Engine;\n  }\n}\n\n––––––––––––––––––––––––––––––––––\n\nThe output System Model is a SysML v2 textual model that represents the engine system as described in the input requirement. It defines two part types: Cylinder and Engine. The Cylinder part",
    "\n\npackage AutomotiveConfiguration {\n\n  part type Engine {\n    attribute cylinderCount : Integer {\n      constraint: cylinderCount = 4 or cylinderCount = 6\n    }\n    attribute cylinderDiameter : Integer {\n      constraint: cylinderDiameter = 70 or cylinderDiameter = 100\n    }\n  }\n\n  part type Transmission {\n    attribute type : String {\n      constraint: type = \"manual\" or type = \"automatic\"\n    }\n  }\n\n  part type Vehicle {\n    part engine : Engine\n    part transmission : Transmission\n    constraint: engine.cylinderCount = 4 implies transmission.type = \"manual\"\n    constraint: engine.cylinderCount = 6 implies transmission.type = \"automatic\"\n  }\n\n}",
    "\n\npackage System {\n\n  part: ComputerSubsystem;\n\n  part: StorageSubsystem;\n\n  assembly: SystemAssembly {\n\n    part: ComputerSubsystem;\n\n    part: StorageSubsystem;\n\n  };\n\n  block: SoftwareDesign {\n\n    block: MessageFormat;\n\n    block: DataFormat;\n\n  };\n\n  flow: InformationStorage {\n\n    source: [SystemAssembly];\n\n    target: [StorageSubsystem];\n\n  };\n\n  flow: InformationTransmission {\n\n    source: [ComputerSubsystem];\n\n    target: [ComputerSubsystem];\n\n  };\n\n  flow: InformationProcessing {\n\n    source: [ComputerSubsystem];\n\n    target: [ComputerSubsystem];\n\n  };\n\n  requirement: CompatibilityRequirement {\n\n    constrainedElement: [StorageSubsystem];\n\n    relatedElement: [MessageFormat, DataFormat];\n\n  };\n\n  requirement: IntegrationRequirement {\n\n    constrainedElement: [ComputerSubsystem];\n\n    relatedElement: [SoftwareDesign];\n",
    "\n\npackage PowertrainSystem {\n\n  part PowertrainLogicalLayer {\n    part TorqueGenerator {\n      [1] providePower();\n      [1] generateTorque();\n    }\n  }\n\n  part PowertrainPhysicalLayer {\n    part PowerUnit {\n      [1] outputPower();\n      [1] generateTorque();\n    }\n  }\n\n  map PowertrainLogicalLayer.TorqueGenerator to PowertrainPhysicalLayer.PowerUnit;\n\n  require powerTransmission();\n  require torqueOutput();\n  require meetUserDemands();\n}\n\n––––––––––––––––––––––––––––––––––\n\nThe given natural-language requirements have been successfully translated into a SysML v2 textual model. The model consists of a package named \"PowertrainSystem\" that contains two parts: \"PowertrainLogicalLayer\" and \"PowertrainPhysicalLayer\".\n\nIn the \"PowertrainLogicalLayer\", there is a part named \"TorqueGenerator\" that provides two operations: \"providePower()",
    "\n\npackage SystemModel {\n  part PowerTransmissionSystem {\n    capability GeneratePower;\n    capability GenerateTorque;\n  }\n  part TorqueGenerator {\n    operation GenerateTorque;\n  }\n  part Powertrain {\n    part Engine {\n      operation GenerateTorque;\n    }\n  }\n  allocation AllocateTorqueGeneratorToPowertrain {\n    source TorqueGenerator;\n    target Powertrain;\n  }\n  allocation AllocateGenerateTorqueToEngine {\n    source GenerateTorque;\n    target Engine;\n  }\n}\n\n––––––––––––––––––––––––––––––––––\n\nThe given natural-language requirements have been successfully translated into a SysML v2 textual model. The model includes a package named \"SystemModel\" that contains three parts: \"PowerTransmissionSystem\", \"TorqueGenerator\", and \"Powertrain\". The \"PowerTransmissionSystem\" part has two capabilities: \"GeneratePower\" and \"GenerateTorque\". The \"TorqueGenerator\" part has an operation named \"GenerateTorque\". The",
    "\n\npackage VehicleFeatureAnnotationSystem {\n\n  part InteriorAssembly {\n    part SeatBelts {\n      safetyFunction: SafetyFunction;\n    }\n    part FrontSeats {\n      safetyFunction: SafetyFunction;\n    }\n    part DriverAirbag {\n      safetyFunction: SafetyFunction;\n    }\n    part AlarmSystem {\n      protectionFunction: ProtectionFunction;\n    }\n  }\n\n  part BodyAssembly {\n    part BodyShell {\n      safetyFunction: SafetyFunction;\n    }\n    part Bumpers {\n      safetyFunction: SafetyFunction;\n    }\n    part KeylessEntryDevice {\n      protectionFunction: ProtectionFunction;\n    }\n  }\n\n  part SafetyFunction {\n  }\n\n  part ProtectionFunction {\n  }\n\n}\n\n––––––––––––––––––––––––––––––––––\n\nThe given natural-language requirements have been successfully translated into a SysML v2 textual model. The model includes two main assemblies: InteriorAssembly and BodyAssembly. Each assembly contains",
    "\npackage VehicleDynamicSimulation {\n  part Vehicle {\n    attribute initialVelocity : Real;\n    attribute initialPosition : Real;\n    attribute acceleration : Real;\n    attribute timeStep : Real;\n    attribute velocity : Real;\n    attribute position : Real;\n  }\n  part ModelCenter {\n    attribute physicalModel : String;\n  }\n  flow calculateVelocityAndPosition : Vehicle[1] -> ModelCenter[1] {\n    parameter inputVelocity : Real;\n    parameter inputPosition : Real;\n    parameter inputAcceleration : Real;\n    parameter inputTimeStep : Real;\n    parameter outputVelocity : Real;\n    parameter outputPosition : Real;\n  }\n}\n\nExplanation:\nThe system is modeled as a package containing two parts: Vehicle and ModelCenter. The Vehicle part has attributes for initial velocity, initial position, acceleration, time step, velocity, and position. The ModelCenter part has an attribute for the physical model. A flow, calculateVelocityAndPosition, is defined to represent the integration between the Vehicle and ModelCenter parts. This flow has parameters for input velocity, input position,",
    "\npackage SafetyFeatures {\n  part Interior {\n    part SeatBelt {\n      attribute isMandatory : Boolean = true;\n      attribute isSafety : Boolean = true;\n    }\n    part Airbag {\n      attribute isMandatory : Boolean = false;\n      attribute isSafety : Boolean = true;\n    }\n  }\n  part Body {\n    part Bumper {\n      attribute isMandatory : Boolean = true;\n      attribute isSafety : Boolean = true;\n    }\n    part KeylessEntrySystem {\n      attribute isMandatory : Boolean = false;\n      attribute isSafety : Boolean = false;\n    }\n  }\n  part WheelAssembly {\n    part Wheel {\n      attribute quantity : Integer = 2;\n    }\n    part AntiLockBrakingSystem {\n      attribute isMandatory : Boolean = false;\n      attribute isSafety : Boolean = true;\n    }\n  }\n}\npackage MandatorySafetyFeatures {\n  part Interior {\n    part SeatBelt {\n      attribute isMandatory : Boolean =",
    "\n\npackage VehicleSafetyComplianceSystem {\n  part Vehicle {\n    part Interior {\n      part SeatBelt [0..2] {\n        feature SafetyFeature;\n      }\n      part DriversAirbag [0..1] {\n        feature OptionalSafetyFeature;\n      }\n    }\n    part Body {\n      part Bumper {\n        feature SafetyFeature;\n      }\n      part KeylessEntrySystem [0..1] {\n        feature OptionalSafetyFeature;\n      }\n    }\n    part Chassis {\n      part Tire [4];\n      part AntiLockBrakingSystem [0..1] {\n        feature OptionalSafetyFeature;\n      }\n    }\n  }\n}\n\nNote:\n- The model uses the SysML v2 subset that includes packages, parts, and features.\n- The multiplicity of parts and features is represented using the square brackets notation.\n- The SafetyFeature and OptionalSafetyFeature stereotypes are used to distinguish between required and optional safety components.\n- The model is structured to reflect the hierarchical relationship between the",
    "\n\npackage RiskManagementSystem {\n\n  part Risk {\n    attribute probability : Real;\n    attribute severity : SeverityLevel;\n  }\n\n  part Failure {\n    attribute severity : SeverityLevel;\n  }\n\n  part Situation {\n    attribute causes : list<Cause>;\n    attribute failures : list<Failure>;\n  }\n\n  part Cause {\n    attribute probability : Real;\n  }\n\n  enum SeverityLevel {\n    low,\n    medium,\n    high\n  }\n\n  association RiskSituation {\n    end risk : Risk[0..1];\n    end situation : Situation[1];\n  }\n\n  association CauseSituation {\n    end cause : Cause[1];\n    end situation : Situation[0..*];\n  }\n\n  association FailureSituation {\n    end failure : Failure[1];\n    end situation : Situation[0..*];\n  }\n\n}\n\nThis SysML model represents a system for managing risks and failures. It includes parts for Risk, Failure",
    "\n\npackage RiskModelingSystem {\n\n  part Scenario {\n    attribute name : String;\n    attribute description : String;\n    attribute causes : Cause[*];\n    attribute failures : Failure[*];\n  }\n\n  part Cause {\n    attribute name : String;\n    attribute probability : Real;\n  }\n\n  part Failure {\n    attribute type : String;\n    attribute severity : SeverityLevel;\n  }\n\n  enum SeverityLevel {\n    low,\n    medium,\n    high\n  }\n\n  association RiskPropagation {\n    source Scenario[*];\n    target Scenario[*];\n  }\n\n  association ScenarioCause {\n    source Scenario[1];\n    target Cause[*];\n  }\n\n  association ScenarioFailure {\n    source Scenario[1];\n    target Failure[*];\n  }\n\n  association RiskScenario {\n    source Scenario[*];\n    target Cause[*];\n    target Failure[*];\n  }\n\n}\n\nThis SysML model defines",
    "\n\npackage EquipmentRiskAnalysis {\n\n  part Battery {\n    attribute level {\n      type Real;\n    }\n  }\n\n  block Equipment {\n    part Battery;\n    attribute state {\n      type String;\n    }\n  }\n\n  block RiskAnalysisSystem {\n    part Equipment;\n    block RiskDetection {\n      block BatteryAgingDetection {\n        requirement detectBatteryAgingRisk {\n          description \"Detect situations where battery aging may lead to low battery level.\";\n        }\n      }\n      block LowBatteryLevelDetection {\n        requirement detectLowBatteryLevel {\n          description \"Detect when the battery level falls below the set minimum threshold.\";\n        }\n      }\n    }\n    block FailureAnalysis {\n      block LowBatteryFailureAnalysis {\n        requirement analyzeLowBatteryState {\n          description \"Determine that the equipment is in a 'low battery' state and further analyze the situation.\";\n        }\n        requirement shutdownOnProlongedLowBattery {\n          description \"If this state persists for a prolonged period without recovery, the device may automatically shut",
    "\n\npackage System {\n\n  part Decomposition {\n    subview StructuralView {\n      block System {\n        part Subsystem1;\n        part Subsystem2;\n        // ...\n        part SubsystemN;\n      }\n    }\n  }\n\n  viewpoint IVV {\n    usageView IVVView {\n      include Decomposition::StructuralView;\n    }\n  }\n\n  interface Interface1 {\n    // ...\n  }\n\n  interface InterfaceN {\n    // ...\n  }\n\n  // Interfaces between components are not explicitly defined in the textual model\n}\n\nNote:\n\n1. The number of subsystems (N) is not specified in the requirement.\n2. The number of interfaces (N) is not specified in the requirement.\n3. The names of the subsystems and interfaces are not specified in the requirement.\n4. The interfaces between components are not explicitly defined in the requirement.\n5. The interfaces between components are not explicitly defined in the textual model.\n6. The textual model is a simplification of the system and does not include",
    "\n\npackage AutomotiveSystem {\n  part AutomotiveSystemRoot;\n  part SeatBelts {\n    attribute safety = mandatory;\n  };\n  part Bumpers {\n    attribute safety = mandatory;\n  };\n  part DriverAirbags {\n    attribute safety = optional;\n  };\n  part AntiLockBrakingSystem {\n    attribute safety = optional;\n  };\n  part NonSafetyComponent1;\n  part NonSafetyComponent2;\n  part Subsystem1 {\n    part Component1;\n    part Component2;\n  };\n  part Subsystem2 {\n    part Component3;\n    part Component4;\n  };\n  AutomotiveSystemRoot.containedBy Subsystem1;\n  AutomotiveSystemRoot.containedBy Subsystem2;\n  Subsystem1.containedBy SeatBelts;\n  Subsystem1.containedBy Bumpers;\n  Subsystem1.containedBy DriverAirbags;\n  Subsystem1.containedBy AntiLockBrakingSystem;\n  Subsystem1.containedBy NonSafetyComponent1;\n  Subsystem2",
    "\npackage AutomotiveDomain {\n  part Automobile {\n    alias Car;\n    comment \"Represents a core component in the automotive domain.\";\n    physicalQuantity Torque;\n  }\n  comment \"This model provides standardized definitions and annotations for fundamental concepts and elements in the automotive domain.\";\n  comment \"The model emphasizes clarity and extensibility for convenient development, integration, and maintenance of subsequent automotive-related systems.\";\n}\n\n––––––––––––––––––––––––––––––––––\n\nThe given natural-language requirements have been successfully translated into a SysML v2 textual model. The model is structured within a package named \"AutomotiveDomain\". Within this package, a part named \"Automobile\" is defined, which represents a core component in the automotive domain. An alias \"Car\" is also defined for the \"Automobile\" part to facilitate communication and usage. Comprehensive comments are provided to explain the purpose and functionality of the \"Automobile\" part and the overall model. Additionally, a physical quantity \"Torque\" is associated with the \"Autom",
    "\npackage AutomobileDocumentManagement {\n  part Automobile {\n    attribute TorqueValue;\n    attribute Documentation;\n  }\n  part Car alias Automobile;\n}\n\n––––––––––––––––––––––––––––––––––\n\nThe given natural-language requirements have been translated into a SysML v2 textual model. The system is named \"AutomobileDocumentManagement\" and it contains two parts: \"Automobile\" and \"Car\". The \"Automobile\" part has two attributes: \"TorqueValue\" and \"Documentation\". The \"Car\" part is an alias for the \"Automobile\" part, allowing for flexible searches and operations by different user groups. This model accurately represents the requirements of the document management platform for automobiles, supporting the management of information and documentation, compatibility with standard physical quantity systems, and the addition of explanatory documents for different objects and their aliases.",
    "\n\npackage AutomobileSystem {\n\n  part Automobile as Car {\n    attribute TorqueValue as Torque;\n  }\n\n  part ScalarPhysicalQuantityData;\n\n  flow ImportData;\n\n  Automobile.ImportData(ScalarPhysicalQuantityData);\n\n}\n\n––––––––––––––––––––––––––––––––––\n\nThe given natural-language requirements have been translated into a SysML v2 textual model. The system is represented as a package named \"AutomobileSystem\". Within this package, there are two parts: \"Automobile\" and \"ScalarPhysicalQuantityData\". The \"Automobile\" part is aliased as \"Car\" and has an attribute named \"TorqueValue\" which is aliased as \"Torque\". The \"ScalarPhysicalQuantityData\" part represents the various scalar physical quantity data that the system can import and manage. A flow named \"ImportData\" is also defined to represent the importing of data. Finally, a connection is established between the \"Automobile\" part and the \"ImportData\" flow,",
    "\n\npackage VehicleSystem {\n\n  part type Vehicle {\n    [0..1] engine : Engine;\n  }\n\n  part type BasicVehicle : Vehicle {\n  }\n\n  part type SmallVehicle : BasicVehicle {\n    engine.numCylinders = 4;\n  }\n\n  part type LargeVehicle : BasicVehicle {\n    engine.numCylinders = 6;\n  }\n\n  part type Engine {\n    numCylinders : Integer [4..6];\n  }\n\n}\n\n––––––––––––––––––––––––––––––––––\n\npackage VehicleSystem {\n\n  part type Vehicle {\n    [0..1] engine : Engine;\n  }\n\n  part type BasicVehicle : Vehicle {\n  }\n\n  part type SmallVehicle : BasicVehicle {\n    engine.numCylinders = 4;\n  }\n\n  part type LargeVehicle : BasicVehicle {\n    engine.num",
    "\n\npackage FuelManagementSystem {\n  part FuelTank;\n  part Engine;\n  part FuelInterface;\n  flow FuelFlow;\n  flow FuelTemperature;\n  flow FuelReturn;\n\n  FuelTank.fuelOut -> FuelInterface.fuelIn;\n  FuelInterface.fuelOut -> Engine.fuelIn;\n  Engine.fuelOut -> FuelInterface.fuelIn;\n  FuelInterface.fuelOut -> FuelTank.fuelIn;\n\n  FuelTank.temperature -> FuelTemperature;\n  Engine.temperature -> FuelTemperature;\n  FuelInterface.temperature -> FuelTemperature;\n\n  FuelFlow.item = Fuel;\n  FuelReturn.item = Fuel;\n\n  FuelFlow.source = FuelTank;\n  FuelFlow.target = Engine;\n\n  FuelReturn.source = Engine;\n  FuelReturn.target = FuelTank;\n}\n\nThis SysML model represents the FuelManagementSystem with parts for the FuelT",
    "\n\npackage VehicleStructuralArchitecture {\n\n  part type Vehicle {\n    attribute mass : Real;\n  }\n\n  part type AxleAssembly {\n    part frontAxle : FrontAxle;\n    part rearAxle : RearAxle;\n  }\n\n  part type FrontAxle {\n    part leftWheel : Wheel;\n    part rightWheel : Wheel;\n  }\n\n  part type RearAxle {\n    part leftWheel : Wheel;\n    part rightWheel : Wheel;\n  }\n\n  part type SteeringFrontAxle extends FrontAxle {\n    attribute steeringAngle : Real;\n  }\n\n  part type Wheel {\n    // No attributes defined\n  }\n\n  part type VehicleConfiguration {\n    part vehicle : Vehicle;\n    part axleAssembly : AxleAssembly;\n  }\n\n  part type NamedWheel extends Wheel {\n    attribute name : String;\n  }\n\n  part type NamedFrontAxle extends FrontAxle {\n    part left"
]