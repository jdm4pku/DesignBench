[
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Personnel' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToPersonnel connect user.onOffCmdPort to personnel.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart personnel {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'TrafficSignal' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToTrafficSignal connect user.onOffCmdPort to trafficSignal.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart trafficSignal {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflecting",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Tire' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToTire connect user.onOffCmdPort to Tire.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart tire {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort: ~",
    "package 'Fuel Tank' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFuelTank connect user.onOffCmdPort to fuelTank.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart fuelTank {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport light",
    "package 'Vehicle' {\n\tattribute def mass;\n\tattribute def mass_override;\n\tattribute def mass_override_override;\n\tattribute def mass_override_override_override;\n\tattribute def mass_override_override_override_override;\n\tattribute def mass_override_override_override_override_override;\n\tattribute def mass_override_override_override_override_override_override;\n\tattribute def mass_override_override_override_override_override_override_override;\n\tattribute def mass_override_override_override_override_override_override_override_override;\n\tattribute def mass_override_override_override_override_override_override_override_override_override_override;\n\tattribute def mass_override_override_override_override_override_override_override_override_override_override_override_override_override_override_override_over",
    "package 'Coupling' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform coupling.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToCoupling connect user.onOffCmdPort to coupling.onOffCmdPort {\n\t\t\tref flow references coupling.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart coupling {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform coupling.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort: ~",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "The system is designed to be a system that is designed to be a multi-level component interoperability system. The system is designed to be a multi-level component interoperability system. The system is designed to be a multi-level component interoperability system. The system is designed to be a multi-level component interoperability system. The system is designed to be a multi-level component interoperability system. The system is designed to be a multi-level component interoperability system. The system is designed to be a multi-level component interoperability system. The system is designed to be a multi-level component interoperability system. The system is designed to be a multi-level component interoperability system. The system is designed to be a multi-level component interoperability system. The system is designed to be a multi-level component interoperability system. The system is designed to be a multi-level component interoperability system. The system is designed to be a multi-level component interoperability system. The system is designed to be a multi-level component interoperability system. The system is designed to be a multi-level component interoperability system. The system is designed to be a multi-level component interoperability system. The system is designed to be a multi-",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'TowBall' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToTowBall connect user.onOffCmdPort to towBall.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart towBall {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\t",
    "package 'Fuel Supply' {\n\tattribute def fuel;\n\tattribute def fuelFlow;\n\tport def fuelPort {\n\t\tout fuel: fuel;\n\t}\n\tport def fuelFlowPort {\n\t\tout fuelFlow: fuelFlow;\n\t}\n\tpart fuel {\n\t\tport fuelPort: ~fuel;\n\t\tperform fuelFlow.sendFuelFlow {\n\t\t\tout fuelFlow = fuelFlowPort.fuelFlow;\n\t\t}\n\t}\n}\n––––– YOUR TURN –––––\n\nInput Requirements:\nThis system is designed to describe the fuel system of motor vehicles, including the fuel supply and return process between the fuel tank assembly and the engine. As the fuel supply port, the fuel tank is capable of providing fuel to the engine, while the engine can also return a portion of the fuel to the fuel tank, ensuring the circulation and utilization of fuel. During the fuel flow process, the system can monitor key parameters such as temperature to ensure the safety and efficiency of fuel supply. The entire fuel system is designed to support interface connections between different components, ensuring smooth and well-integrated fuel supply routes, and meeting the requirements for stability and reliability of fuel supply during vehicle operation.\n\n",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'VehicleA' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToVehicleA connect user.onOffCmdPort to vehicleA.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart vehicleA {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\t",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Faucet' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFaucet connect user.onOffCmdPort to faucet.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart faucet {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Safety' {\n\tattribute def OnOffCmd;\n\tattribute def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToSafety connect user.onOffCmdPort to safety.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart safety {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort: ~Light",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "The system must be capable of transmitting and outputting power, and logically should have the ability to provide power as well as generate torque. The system must include a torque generator component responsible for generating torque. At the physical level, the system must include a powertrain, which should contain an engine responsible for the actual execution of torque generation. The function of the system’s torque generator should be able to be mapped and implemented onto the engine within the powertrain, achieving effective correspondence and allocation between logical functions and physical implementation.\n\nInput Requirements:\nThe system must be capable of transmitting and outputting power, and logically should have the ability to provide power as well as generate torque. The system must include a torque generator component responsible for generating torque. At the physical level, the system must include a powertrain, which should contain an engine responsible for the actual execution of torque generation. The function of the system’s torque generator should be able to be mapped and implemented onto the engine within the powertrain, achieving effective correspondence and allocation between logical functions and physical implementation.\n\nOutput Model:\nThe system must be capable of transmitting and outputting power, and logically should have the ability to provide power as well as generate torque. The system must include a torque generator",
    "package 'Safety' {\n\tattribute def Safety;\n\tattribute def SafetyType;\n\tattribute def SafetyLevel;\n\tattribute def SafetyLevelType;\n\tattribute def SafetyLevelLevel;\n\tattribute def SafetyLevelLevelType;\n\tattribute def SafetyLevelLevelLevel;\n\tattribute def SafetyLevelLevelLevelType;\n\tattribute def SafetyLevelLevelLevelType;\n\tattribute def SafetyLevelLevelLevelLevel;\n\tattribute def SafetyLevelLevelLevelLevelType;\n\tattribute def SafetyLevelLevelLevelLevelType;\n\tattribute def SafetyLevelLevelLevelLevelLevel;\n\tattribute def SafetyLevelLevelLevelLevelLevelType;\n\tattribute def SafetyLevelLevelLevelLevelLevelType;\n\tattribute def SafetyLevelLevelLevelLevelLevelLevel;\n\tattribute def SafetyLevelLevelLevelLevelLevelLevelType;\n\tattribute def SafetyLevelLevelLevelLevelLevelLevelType;\n\tattribute def SafetyLevelLevelLevelLevelLevelLevelLevelType;\n\tattribute def SafetyLevelLevelLevelLevelLevelLevelLevelLevelType;\n\tattribute def SafetyLevelLevelLevelLevelLevelLevelLevelLevelLevelType;\n\tattribute def SafetyLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevelLevel",
    "package 'Fuel Supply' {\n\tattribute def Fuel;\n\tattribute def FuelFlow;\n\tport def FuelPort {\n\t\tout Fuel: Fuel;\n\t\tout FuelFlow: FuelFlow;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport FuelPort: FuelPort;\n\t\t\tperform fuelFlow.sendFuelFlow {\n\t\t\t\tout FuelFlow = fuelFlow.FuelFlow;\n\t\t\t}\n\t\t}\n\t\tinterface userToFuelSupply connect user.FuelPort to fuelSupply.Fuel;\n\t\tpart fuelSupply {\n\t\t\tport fuelFlowPort: ~FuelFlowPort;\n\t\t\tperform fuelFlow.sendFuelFlow {\n\t\t\t\tin fuelFlowPort.FuelFlow = fuelFlow.FuelFlow;\n\t\t\t}\n\t\t}\n\t}\n}\n––––– YOUR TURN –––––\n\nInput Requirement:\nThis system is designed to provide complete fuel supply and return management functions for vehicles. The vehicle is equipped with a fuel system composed of a fuel tank assembly, which integrates both the fuel pump and the fuel tank. The fuel pump is responsible for pressurizing fuel from the tank and delivering it to various fuel-consuming units within the vehicle, while",
    "package 'Safety' {\n\tattribute def OnOffCmd;\n\tattribute def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToSafety connect user.onOffCmdPort to safety.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart safety {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort: ~Light",
    "package 'Safety' {\n\tattribute def OnOffCmd;\n\tattribute def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToSafety connect user.onOffCmdPort to safety.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart safety {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort: ~Light",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Tire' {\n\tattribute def Name;\n\tattribute def RimDiameter;\n\tattribute def Width;\n\tport def NamePort {\n\t\tout name: Name;\n\t}\n\tport def RimDiameterPort {\n\t\tout rimDiameter: RimDiameter;\n\t}\n\tport def WidthPort {\n\t\tout width: Width;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport namePort: NamePort;\n\t\t\tperform name.name {\n\t\t\t\tin name: Name;\n\t\t\t}\n\t\t\tpart userToTire {\n\t\t\t\tport rimDiameterPort: RimDiameterPort;\n\t\t\t\tperform rimDiameter.rimDiameter {\n\t\t\t\t\tin rimDiameter: rimDiameter;\n\t\t\t\t}\n\t\t\t\tport widthPort: WidthPort;\n\t\t\t\tperform width.width {\n\t\t\t\t\tin width: Width;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tinterface userToTire connect user.name to userToTire.rimDiameter; \n\t\tinterface userToTire connect user.width to userToTire.width; \n\t}\n\taction userToTire {\n\t\taction",
    "package 'Vehicle' {\n\tattribute def Mass;\n\tattribute def Length;\n\tport def MassPort {\n\t\tout mass: Mass;\n\t}\n\tport def LengthPort {\n\t\tout length: Length;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport massPort: MassPort;\n\t\t\tperform vehicle.mass.sendMass {\n\t\t\t\tout mass = massPort.mass;\n\t\t\t}\n\t\t}\n\t\tpart vehicle {\n\t\t\tport lengthPort: LengthPort;\n\t\t\tperform vehicle.length.sendLength {\n\t\t\t\tout length = lengthPort.length;\n\t\t\t}\n\t\t}\n\t}\n\taction vehicle {\n\t\taction sendMass { out mass: massPort.mass; }\n\t\taction sendLength { out length: lengthPort.length; }\n\t}\n}\n––––– YOUR TURN –––––\n\nInput Requirement:\nThe system requires the definition of an automotive component model, which includes a vehicle and its front wheels. The vehicle has a mass of 1200 kilograms and a length of 4.82 meters. Each vehicle is equipped with a pair of left and right front wheels. For each wheel, the hub",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Fuel Tank Assembly' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFuelTank connect user.onOffCmdPort to fuelTank.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart fuelTank {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport",
    "The system must be capable of supporting and managing data and units related to physical quantities, and is required to cover various base physical quantities in the International System of Quantities (ISQ), such as length, mass, time, electric current, temperature, amount of substance, and luminous intensity. The system must ensure accurate representation of relevant physical quantities and consistency of information, facilitating physical quantity data processing and unit conversion operations in subsequent engineering or scientific development. The system must meet users' diverse requirements for managing physical quantity systems.\n\nInput Requirements:\nThe system must be capable of supporting and managing data and units related to physical quantities, and is required to cover various base physical quantities in the International System of Quantities (ISQ), such as length, mass, time, electric current, temperature, amount of substance, and luminous intensity. The system must ensure accurate representation of relevant physical quantities and consistency of information, facilitating physical quantity data processing and unit conversion operations in subsequent engineering or scientific development. The system must meet users' diverse requirements for managing physical quantity systems.\n\nOutput Model:\nThe system must be capable of supporting and managing data and units related to physical quantities, and is required to cover various base physical quantities in the International System of Quantities (ISQ",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Headlamp' {\n\tattribute def Tilt;\n\tattribute def TiltAngle;\n\tport def TiltPort {\n\t\tout Tilt: Tilt;\n\t\tout TiltAngle: TiltAngle;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToHeadlamp connect user.onOffCmdPort to headlamp.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart headlamp {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout Tilt = Tilt;\n\t\t\t\tout TiltAngle = TiltAngle;\n\t\t\t}\n\t\t\tport TiltPort {\n\t\t\t\tout Tilt",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Alloy' {\n\tattribute def Alloy;\n\tattribute def AlloyType;\n\tattribute def AlloyTypeName;\n\tattribute def AlloyTypeDescription;\n\tattribute def AlloyTypeVersion;\n\tattribute def AlloyTypeVersionName;\n\tattribute def AlloyTypeVersionDescription;\n\tattribute def AlloyTypeVersionVersion;\n\tattribute def AlloyTypeVersionName;\n\tattribute def AlloyTypeVersionDescription;\n\tattribute def AlloyTypeVersionVersion;\n\tattribute def AlloyTypeVersionName;\n\tattribute def AlloyTypeVersionDescription;\n\tattribute def AlloyTypeVersionVersion;\n\tattribute def AlloyTypeVersionName;\n\tattribute def AlloyTypeVersionDescription;\n\tattribute def AlloyTypeVersionVersion;\n\tattribute def AlloyTypeVersionName;\n\tattribute def AlloyTypeVersionDescription;\n\tattribute def AlloyTypeVersionVersion;\n\tattribute def AlloyTypeVersionName;\n\tattribute def AlloyTypeVersionDescription;\n\tattribute def AlloyTypeVersionVersion;\n\tattribute def AlloyTypeVersionName;\n\tattribute def AlloyTypeVersionDescription;\n\tattribute def AlloyTypeVersion",
    "package 'Steel' {\n\tattribute def Steel_980;\n\tattribute def Steel_980_MassFraction;\n\tattribute def Steel_980_MassFraction_MassFraction;\n\tattribute def Steel_980_MassFraction_MassFraction_MassFraction;\n\tattribute def Steel_980_MassFraction_MassFraction_MassFraction_MassFraction;\n\tattribute def Steel_980_MassFraction_MassFraction_MassFraction_MassFraction_MassFraction_MassFraction;\n\tattribute def Steel_980_MassFraction_MassFraction_MassFraction_MassFraction_MassFraction_MassFraction_MassFraction_MassFraction_MassFraction_MassFraction_MassFraction_MassFraction_MassFraction_MassFraction_MassFraction_MassFraction_MassFraction_MassFraction_MassFraction_MassFraction_MassFraction_MassFraction_MassFraction_MassFraction_MassFraction_MassFraction_MassFraction_MassFraction_MassFraction_MassFraction_MassFraction_MassFraction_MassFraction",
    "The system is designed to be a simple and simple, simple, and efficient, fully-functional system. The system is designed to be a simple and simple, and efficient, and efficient, system that is designed to be a simple and simple, and efficient, and efficient, system. The system is designed to be a simple and simple, and efficient, and efficient, system that is designed to be a simple and simple, and efficient, and efficient, system. The system is designed to be a simple and simple, and efficient, and efficient, system that is designed to be a simple and simple, and efficient, and efficient, system. The system is designed to be a simple and simple, and efficient, and efficient, system that is designed to be a simple and simple, and efficient, and efficient, system. The system is designed to be a simple and simple, and efficient, and efficient, system that is designed to be a simple and simple, and efficient, and efficient, system. The system is designed to be a simple and simple, and efficient, and efficient, system that is designed to be a simple and simple, and efficient, and efficient, system. The system is designed to be a simple and simple, and efficient, and efficient, system that",
    "package 'Fuel Tank' {\n\tattribute def Fuel;\n\tattribute def FuelFlow;\n\tport def FuelPort {\n\t\tout Fuel: Fuel;\n\t\tout FuelFlow: FuelFlow;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport FuelPort: FuelPort;\n\t\t\tperform fuelFlow.sendFuelFlow {\n\t\t\t\tout FuelFlow = fuelFlow.FuelFlow;\n\t\t\t}\n\t\t}\n\t\tinterface userToFuelTank connect user.FuelPort to fuelTank.FuelPort; \n\t\tpart fuelTank {\n\t\t\tport fuelFlowPort: ~FuelFlowPort;\n\t\t\tperform fuelFlow.produceFuel {\n\t\t\t\tin fuelFlowPort.FuelFlow = fuelFlow.FuelFlow;\n\t\t\t}\n\t\t}\n\t\tpart fuelFlowPort: ~FuelFlowPort;\n\t\tpart fuelTankFlow from fuelFlow.FuelFlow to fuelFlow.FuelFlow;\n\t\tpart fuelFlowFlow from fuelFlow.FuelFlow to fuelFlow.FuelFlow;\n\t\tpart fuelFlowFlow from fuelFlow.FuelFlow to fuelFlow.FuelFlow;\n\t\tpart fuelFlowFlow from fuelFlow.FuelFlow to fuelFlow.FuelFlow;\n\t\tpart fuel",
    "The system is designed to be a publish-subscribe message flow architecture. The system is designed to be a publish-subscribe message flow architecture, consisting of three main participants: producers, server, and consumers. The system requires that producers can publish topic messages to the server, while consumers can subscribe to specific topics via the server. Upon successful subscription, when a new message related to the topic is published, the server needs to push and deliver the message to all consumers who have subscribed to that topic. The entire process includes consumers sending subscription requests to the server, producers publishing messages to the server, and after receiving the messages, the server sending them to all corresponding subscribers, thus achieving reliable message publishing and distribution and ensuring efficient information exchange between different users.\n\nInput Requirements:\nThe system requires that the server and the consumers have the same number of topics. The system also requires that the server and the consumers have the same number of topics.\n\nOutput Model:\nThe system is designed to be a publish-subscribe message flow architecture. The system is designed to be a publish-subscribe message flow architecture, consisting of three main participants: producers, server, and consumers. The system requires that the server and the consumers have the same number of topics.\n",
    "package 'Transportation' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform transportation.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToTransportation connect user.onOffCmdPort to transportation.onOffCmdPort {\n\t\t\tref flow references transportation.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart transportation {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform transportation.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort: ~LightPort",
    "package 'Fuel Tank' {\n\tattribute def Fuel;\n\tattribute def FuelFlow;\n\tport def FuelPort {\n\t\tout Fuel: Fuel;\n\t\tout FuelFlow: FuelFlow;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport FuelPort: FuelPort;\n\t\t\tperform fuelFlow.sendFuelFlow {\n\t\t\t\tout FuelFlow = fuelFlow.FuelFlow;\n\t\t\t}\n\t\t}\n\t\tinterface userToFuelTank connect user.FuelPort to fuelTank.FuelPort; \n\t\tpart fuelTank {\n\t\t\tport fuelFlowPort: ~FuelFlowPort;\n\t\t\tperform fuelFlow.sendFuelFlow {\n\t\t\t\tin fuelFlowPort.FuelFlow = fuelFlow.FuelFlow;\n\t\t\t}\n\t\t}\n\t\tpart fuelFlowPort: ~FuelFlowPort;\n\t\tpart fuelFlow {\n\t\t\tport fuelFlowPort: ~FuelFlowPort;\n\t\t\tperform fuelFlow.sendFuelFlow {\n\t\t\t\tin fuelFlowPort.FuelFlow = fuelFlow.FuelFlow;\n\t\t\t}\n\t\t}\n\t}\n\taction fuelFlow {\n\t\taction sendFuelFlow { out FuelFlow: FuelFlow; }\n\t\tsuccession flow",
    "package 'Fuel Tank Assembly' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFuelTank connect user.onOffCmdPort to fuelTank.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart fuelTank {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'PhotographyWorkflow' {\n\tattribute def OnOffCmd;\n\tattribute def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToPhotographyWorkflow connect user.onOffCmdPort to PhotographyWorkflow.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart photographyWorkflow {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflecting",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Brake' {\n\tattribute def brakePressure;\n\tattribute def brakeTraction;\n\tport def brakePressurePort {\n\t\tout brakePressure : brakePressure;\n\t}\n\tport def brakeTractionPort {\n\t\tout brakeTraction : brakeTraction;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport brakePressurePort: brakePressurePort;\n\t\t\tperform brakePressure.sendBrakePressure {\n\t\t\t\tout brakePressure = brakePressurePort.brakePressure;\n\t\t\t}\n\t\t\tpart userToFlashlight connect user.brakePressurePort to flashlight.brakePressurePort {\n\t\t\t\tref flow references brakePressure.sendBrakePressureFlow\n\t\t\t\t\tfrom source.brakePressurePort to target.brakePressurePort; \n\t\t\t}\n\t\t\tpart flashlight {\n\t\t\t\tport brakePressurePort: ~brakePressurePort;\n\t\t\t\tperform brakePressure.produceDirectedLight {\n\t\t\t\t\tin brakePressure = brakePressurePort.brakePressure;\n\t\t\t\t\tout light = lightPort.light;\n\t\t\t\t}\n\t\t\t\tport lightPort",
    "package 'Battery' {\n\tattribute def OnOffCmd;\n\tattribute def Battery;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def BatteryPort {\n\t\tout battery: Battery;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform battery.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToBattery connect user.onOffCmdPort to battery.onOffCmdPort {\n\t\t\tref flow references battery.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart battery {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform battery.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout battery = batteryPort.battery;\n\t\t\t}\n\t\t\tport batteryPort: ~BatteryPort;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport batteryPort: ~BatteryPort;",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "The system is designed to implement a camera information processing workflow. When a user selects a scene through the camera’s viewfinder (viewPort), the system first focuses on the scene to obtain an image (Image). This image is then captured to generate a photograph (Picture). After the photograph is generated, the system displays it on the screen via the display port (displayPort). The user does not need to be concerned with specific technical details during operation and only needs to complete scene selection and shooting. The system will automatically handle the processes of focusing, capturing, and displaying the photograph.\n\nInput Requirements:\nThe system is designed to implement a camera information processing workflow. When a user selects a scene through the camera’s viewfinder (viewPort), the system first focuses on the scene to obtain an image (Image). This image is then captured to generate a photograph (Picture). After the photograph is generated, the system displays it on the screen via the display port (displayPort). The user does not need to be concerned with specific technical details during operation and only needs to complete scene selection and shooting. The system will automatically handle the processes of focusing, capturing, and displaying the photograph.\n\nOutput Model:\nThe system is designed to implement a camera",
    "The system should be able to automatically traverse all registered sensors and promptly process and maintain each sensor that meets the ready condition, thereby ensuring that all available sensors are kept up-to-date.\n\n––––– YOUR TURN –––––\n\nInput Requirements:\nThe system needs to be capable of managing multiple sensors and support monitoring and updating the status of these sensors. When the system detects that any sensor is in a ready state, it should automatically perform an update operation on that sensor. The system should be able to automatically traverse all registered sensors and promptly process and maintain each sensor that meets the ready condition, thereby ensuring that all available sensors are kept up-to-date. This will enhance the overall responsiveness and reliability of the system.\n\nOutput Model:\nThe system should be able to automatically traverse all registered sensors and promptly process and maintain each sensor that meets the ready condition, thereby ensuring that all available sensors are kept up-to-date.\n\n––––– YOUR TURN –––––\n\nInput Requirements:\nThe system needs to be capable of managing multiple sensors and support monitoring and updating the status of these sensors. When the system detects that any sensor is in a ready state, it should automatically perform an update operation on that sensor.",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "The system implements a server that exhibits timed clock behavior. The server features a local clock and a port for receiving requests. After startup, the server initially enters the “off” state and requires a “start” command received through the request port to transition into the waiting state. In the waiting state, the server can receive “request” messages, upon which it switches to the response state. In the response state, the server waits for five minutes before reverting back to the waiting state. Additionally, every day at 11:59:00, the server automatically switches back to the off state. The system supports multiple periodic request and response cycles within a single day and can automatically manage its power state according to the preset schedule, thereby ensuring controllable response timing and orderly service operations.\n\nOutput Model:\nThe system implements a server that exhibits timed clock behavior. The server features a local clock and a port for receiving requests. After startup, the server initially enters the “off” state and requires a “start” command received through the request port to transition into the waiting state. In the waiting state, the server can receive “request” messages, upon which it switches to the response state. In the response",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Vehicle' {\n\tattribute def StartControl;\n\tattribute def Status;\n\tport def StartControlPort {\n\t\tout startControl: StartControl;\n\t}\n\tport def StatusPort {\n\t\tout status: Status;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport startControlPort: StartControlPort;\n\t\t\tperform startControl.sendStartControl {\n\t\t\t\tout startControl = startControlPort.startControl;\n\t\t\t}\n\t\t}\n\t\tinterface userToVehicle connect user.startControlPort to vehicle.startControlPort {\n\t\t\tref flow references startControl.sendStartControlFlow\n\t\t\t\tfrom source.startControl to target.startControl; \n\t\t}\n\t\tpart vehicle {\n\t\t\tport startControlPort: ~StartControlPort;\n\t\t\tperform startControl.produceDirectedLight {\n\t\t\t\tin startControl = startControlPort.startControl;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort: ~LightPort;\n\t\t\tperform startControl.reflectLight {\n\t\t\t\tin light =",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flight' {\n\tattribute def OnOffCmd;\n\tattribute def Speed;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def SpeedPort {\n\t\tout speed : Speed;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform flight.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlight connect user.onOffCmdPort to flight.onOffCmdPort {\n\t\t\tref flight.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tpart flight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform flight.produceDirectedSpeed {\n\t\t\t\tin speed = speedPort.speed;\n\t\t\t}\n\t\t\tport speedPort: SpeedPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport speedPort: ~SpeedPort;\n\t\t\tperform flight.reflectSpeed {\n\t\t\t\tin speed = speedPort",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "The system is designed to be a simple system that can be used to drive the vehicle at the desired speed. The system is designed to be a simple system that can be used to drive the vehicle at the desired speed. The system is designed to be a simple system that can be used to drive the vehicle at the desired speed. The system is designed to be a simple system that can be used to drive the vehicle at the desired speed. The system is designed to be a simple system that can be used to drive the vehicle at the desired speed. The system is designed to be a simple system that can be used to drive the vehicle at the desired speed. The system is designed to be a simple system that can be used to drive the vehicle at the desired speed. The system is designed to be a simple system that can be used to drive the vehicle at the desired speed. The system is designed to be a simple system that can be used to drive the vehicle at the desired speed. The system is designed to be a simple system that can be used to drive the vehicle at the desired speed. The system is designed to be a simple system that can be used to drive the vehicle at the desired speed. The system is designed to be a simple system that can be used to",
    "package 'CruiseControl' {\n\tattribute def TargetSpeed;\n\tattribute def TargetSpeedCmd;\n\tport def TargetSpeedCmdPort {\n\t\tout TargetSpeed: TargetSpeed;\n\t}\n\tport def TargetSpeedCmdPort {\n\t\tout TargetSpeedCmd: TargetSpeedCmd;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport TargetSpeedCmdPort: TargetSpeedCmdPort;\n\t\t\tperform cruiseControl.sendTargetSpeedCmd {\n\t\t\t\tout TargetSpeedCmd = TargetSpeedCmdPort.TargetSpeedCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToCruiseControl connect user.TargetSpeedCmdPort to cruiseControl.TargetSpeedCmdPort {\n\t\t\tref cruiseControl.sendTargetSpeedCmdFlow from source.TargetSpeedCmd to target.TargetSpeedCmd; \n\t\t}\n\t\tpart cruiseControl {\n\t\t\tport TargetSpeedCmdPort: ~TargetSpeedCmdPort;\n\t\t\tperform cruiseControl.sendTargetSpeedCmdFlow from target.TargetSpeedCmd to source.TargetSpeedCmd; \n\t\t}\n\t}\n\taction cruiseControl {\n\t\taction sendTargetSpeedCmd { out TargetSpeedCmd: TargetSpeedCmd; }\n\t\tsuccession flow",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Mass' {\n\tattribute def Mass;\n\tattribute def MinimumMass;\n\tpart context {\n\t\tpart user {\n\t\t\tport minimumMass: MinimumMass;\n\t\t\tperform mass.sendMinimumMass {\n\t\t\t\tout minimumMass = minimumMass;\n\t\t\t}\n\t\t}\n\t\tinterface userToMass connect user.minimumMass to mass.minimumMass;\n\t\tpart mass {\n\t\t\tport minimumMass: MinimumMass;\n\t\t\tperform mass.sendMinimumMass {\n\t\t\t\tout minimumMass = minimumMass;\n\t\t\t}\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport minimumMass: MinimumMass;\n\t\t\tperform mass.reflectMinimumMass {\n\t\t\t\tin minimumMass = minimumMass;\n\t\t\t}\n\t\t}\n\t}\n\taction mass {\n\t\taction sendMinimumMass { out minimumMass: MinimumMass; }\n\t\tsuccession flow minimumMassFlow from sendMinimumMass.minimumMass to produceMinimumMass.minimumMass;\n\t\taction produceMinimumMass { in minimumMass; out mass: Mass; }\n\t}\n}\n––––– YOUR TURN –––––\n\nInput Requirement:\nThis system is used for the aggregation and management of the mass of",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "The system is designed to describe an automotive configuration space, supporting combinations of different engines and transmission systems. Vehicles can be equipped with either a 4-cylinder or 6-cylinder engine, with each engine type containing the corresponding number of cylinders. Cylinder diameter is a key parameter and can be selected between two specifications: 70mm and 100mm. Each vehicle can only be fitted with one type of engine and one type of transmission system. The transmission can be either a manual or an automatic gearbox. Furthermore, the following constraints apply to concrete configurations: if the engine is a 4-cylinder, a manual transmission must be used; if the engine is a 6-cylinder, an automatic transmission must be used. This model provides users with a clear structure and constraints, enabling the flexible selection of vehicle components and parameters according to actual requirements.\n\nInput Requirements:\nThe system is designed to describe an automotive configuration space, supporting combinations of different engines and transmission systems. Vehicles can be equipped with either a 4-cylinder or 6-cylinder engine, with each engine type containing the corresponding number of cylinders. Cylinder diameter is a key parameter and can be selected between two specifications: 70mm and 100mm. Each vehicle can only be fitted with one",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "The system is designed to be a logical layer with a physical layer. The physical layer is a logical layer that is capable of providing power and torque generation. The logical layer is a physical layer that is capable of providing power output and torque output capabilities. The physical layer is a logical layer that is capable of providing torque generation. The system is designed to be a logical layer with a physical layer. The physical layer is a logical layer that is capable of providing power output and torque output capabilities. The system is designed to be a logical layer with a physical layer. The physical layer is a logical layer that is capable of providing torque generation. The system is designed to be a logical layer with a physical layer. The physical layer is a logical layer that is capable of providing torque generation. The system is designed to be a logical layer with a physical layer. The physical layer is a logical layer that is capable of providing torque generation. The system is designed to be a logical layer with a physical layer. The physical layer is a logical layer that is capable of providing torque generation. The system is designed to be a logical layer with a physical layer. The physical layer is a logical layer that is capable of providing torque generation. The system is designed to be a logical layer with a physical layer",
    "The system is able to generate and transmit power and generate torque, which is a logical-layer component of the powertrain. The system is able to generate and transmit torque, which is a physical-layer component of the powertrain. The system is able to transmit power and generate torque, which is a logical-layer component of the powertrain. The system is able to transmit power and generate torque, which is a physical-layer component of the powertrain. The system is able to transmit power and generate torque, which is a logical-layer component of the powertrain. The system is able to transmit power and generate torque, which is a physical-layer component of the powertrain. The system is able to transmit power and generate torque, which is a logical-layer component of the powertrain. The system is able to transmit power and generate torque, which is a physical-layer component of the powertrain. The system is able to transmit power and generate torque, which is a logical-layer component of the powertrain. The system is able to transmit power and generate torque, which is a physical-layer component of the powertrain. The system is able to transmit power and generate torque, which is a logical-layer component of the powertrain. The system",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Vehicle Dynamics' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToVehicleDynamics connect user.onOffCmdPort to vehicleDynamics.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart vehicleDynamics {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\t",
    "package 'Safety' {\n\tattribute def SafetyFeatures;\n\tattribute def MandatorySafetyFeatures;\n\tattribute def MandatorySafetyFeatures.mandatory;\n\tattribute def MandatorySafetyFeatures.mandatory.mandatory;\n\tattribute def MandatorySafetyFeatures.mandatory.mandatory.mandatory;\n\tattribute def MandatorySafetyFeatures.mandatory.mandatory.mandatory.mandatory;\n\tattribute def MandatorySafetyFeatures.mandatory.mandatory.mandatory.mandatory.mandatory;\n\tattribute def MandatorySafetyFeatures.mandatory.mandatory.mandatory.mandatory.mandatory.mandatory.mandatory;\n\tattribute def MandatorySafetyFeatures.mandatory.mandatory.mandatory.mandatory.mandatory.mandatory.mandatory.mandatory.mandatory.mandatory.mandatory;\n\tattribute def MandatorySafetyFeatures.mandatory.mandatory.mandatory.mandatory.mandatory.mandatory.mandatory.mandatory.mandatory.mandatory.mandatory.mandatory.mandatory.mandatory.mandatory;\n\tattribute def MandatorySafetyFeatures.mandatory.mandatory.mandatory.mandatory.mandatory.mandatory.mandatory",
    "package 'Safety' {\n\tattribute def Safety;\n\tattribute def SafetyType;\n\tattribute def SafetyLevel;\n\tattribute def SafetyLevelType;\n\tattribute def SafetyLevelLevel;\n\tattribute def SafetyLevelLevelType;\n\tattribute def SafetyLevelLevelLevel;\n\tattribute def SafetyLevelLevelLevelType;\n\tattribute def SafetyLevelLevelLevelType;\n\tattribute def SafetyLevelLevelLevelLevel;\n\tattribute def SafetyLevelLevelLevelLevelType;\n\tattribute def SafetyLevelLevelLevelLevelType;\n\tattribute def SafetyLevelLevelLevelLevelLevel;\n\tattribute def SafetyLevelLevelLevelLevelLevelType;\n\tattribute def SafetyLevelLevelLevelLevelLevelType;\n\tattribute def SafetyLevelLevelLevelLevelLevelLevel;\n\tattribute def SafetyLevelLevelLevelLevelLevelLevelType;\n\tattribute def SafetyLevelLevelLevelLevelLevelLevelType;\n\tattribute def SafetyLevelLevelLevelLevelLevelLevelLevelType;\n\tattribute def SafetyLevelLevelLevelLevelLevelLevelLevelType;\n\tattribute def SafetyLevelLevelLevelLevelLevelLevelLevelLevelType;\n\tattribute def SafetyLevelLevelLevelLevelLevelLevelLevelLevelLevelType;\n\tattribute def SafetyLevelLevelLevelLevelLevelLevelLevelLevel",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Car' {\n\tattribute def CarType;\n\tattribute def CarModel;\n\tattribute def CarYear;\n\tattribute def CarYearOfManufacture;\n\tattribute def CarYearOfProduction;\n\tattribute def CarYearOfProductionYear;\n\tattribute def CarYearOfProductionYearOfManufacture;\n\tattribute def CarYearOfProductionYearOfManufactureOfCar;\n\tattribute def CarYearOfProductionYearOfManufactureOfCarOfCar;\n\tattribute def CarYearOfProductionYearOfManufactureOfCarOfCarOfCar;\n\tattribute def CarYearOfProductionYearOfManufactureOfCarOfCarOfCarOfCar;\n\tattribute def CarYearOfProductionYearOfManufactureOfCarOfCarOfCarOfCarOfCar;\n\tattribute def CarYearOfProductionYearOfManufactureOfCarOfCarOfCarOfCarOfCarOfCarOfCar;\n\tattribute def CarYearOfProductionYearOfManufactureOfCarOfCarOfCarOfCarOfCarOfCarOfCarOfCarOfCarOfCarOfCarOfCarOfCarOfCarOfCarOfCarOfCarOfCarOfCarOfCarOfCarOfCarOfCarOfCarOfCarOfCarOfCar",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:",
    "package 'Flashlight' {\n\tattribute def OnOffCmd;\n\tattribute def Light;\n\tport def OnOffCmdPort {\n\t\tout onOffCmd : OnOffCmd;\n\t}\n\tport def LightPort {\n\t\tout light: Light;\n\t}\n\tpart context {\n\t\tpart user {\n\t\t\tport onOffCmdPort: OnOffCmdPort;\n\t\t\tperform illuminateRegion.sendOnOffCmd {\n\t\t\t\tout onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t}\n\t\t}\n\t\tinterface userToFlashlight connect user.onOffCmdPort to flashlight.onOffCmdPort {\n\t\t\tref flow references illuminateRegion.onOffCmdFlow\n\t\t\t\tfrom source.onOffCmd to target.onOffCmd; \n\t\t}\n\t\tpart flashlight {\n\t\t\tport onOffCmdPort: ~OnOffCmdPort;\n\t\t\tperform illuminateRegion.produceDirectedLight {\n\t\t\t\tin onOffCmd = onOffCmdPort.onOffCmd;\n\t\t\t\tout light = lightPort.light;\n\t\t\t}\n\t\t\tport lightPort: ~LightPort ;\n\t\t}\n\t\tpart reflectingSource {\n\t\t\tport lightPort:"
]